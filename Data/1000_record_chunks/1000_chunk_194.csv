record_number,buggy_code,fixed_code,code_similarity
193001,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}",0.962915601023018
193002,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp,deviceUsageTime);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9948320413436692
193003,"/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(long currentTimeMillis){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,sPackageStatsMerger);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY]);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}","/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(final long currentTimeMillis,final long deviceUsageTime){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,new StatCombiner<IntervalStats>(){
    @Override public void combine(    IntervalStats stats,    boolean mutable,    List<IntervalStats> accumulatedResult){
      IntervalStats accum;
      if (accumulatedResult.isEmpty()) {
        accum=new IntervalStats();
        accum.beginTime=stats.beginTime;
        accumulatedResult.add(accum);
      }
 else {
        accum=accumulatedResult.get(0);
      }
      mergePackageStats(accum,stats,deviceUsageTime);
    }
  }
);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY],deviceUsageTime);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}",0.7731913004882379
193004,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis,final long deviceUsageTime){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9877388080980896
193005,"/** 
 * This should be the only way to get the time from the system.
 */
private long checkAndGetTimeLocked(){
  final long actualSystemTime=System.currentTimeMillis();
  final long actualRealtime=SystemClock.elapsedRealtime();
  final long expectedSystemTime=(actualRealtime - mRealTimeSnapshot) + mSystemTimeSnapshot;
  boolean resetBeginIdleTime=false;
  if (Math.abs(actualSystemTime - expectedSystemTime) > TIME_CHANGE_THRESHOLD_MILLIS) {
    if (Math.abs(actualSystemTime - expectedSystemTime) > mAppIdleDurationMillis) {
      mScreenOnSystemTimeSnapshot=actualSystemTime;
      mScreenOnTime=0;
      resetBeginIdleTime=true;
    }
    final int userCount=mUserState.size();
    for (int i=0; i < userCount; i++) {
      final UserUsageStatsService service=mUserState.valueAt(i);
      service.onTimeChanged(expectedSystemTime,actualSystemTime,resetBeginIdleTime);
    }
    mRealTimeSnapshot=actualRealtime;
    mSystemTimeSnapshot=actualSystemTime;
  }
  return actualSystemTime;
}","/** 
 * This should be the only way to get the time from the system.
 */
private long checkAndGetTimeLocked(){
  final long actualSystemTime=System.currentTimeMillis();
  final long actualRealtime=SystemClock.elapsedRealtime();
  final long expectedSystemTime=(actualRealtime - mRealTimeSnapshot) + mSystemTimeSnapshot;
  boolean resetBeginIdleTime=false;
  if (Math.abs(actualSystemTime - expectedSystemTime) > TIME_CHANGE_THRESHOLD_MILLIS) {
    if (Math.abs(actualSystemTime - expectedSystemTime) > mAppIdleDurationMillis) {
      mScreenOnSystemTimeSnapshot=actualSystemTime;
      mScreenOnTime=0;
      resetBeginIdleTime=true;
    }
    final int userCount=mUserState.size();
    for (int i=0; i < userCount; i++) {
      final UserUsageStatsService service=mUserState.valueAt(i);
      service.onTimeChanged(expectedSystemTime,actualSystemTime,mScreenOnTime,resetBeginIdleTime);
    }
    mRealTimeSnapshot=actualRealtime;
    mSystemTimeSnapshot=actualSystemTime;
  }
  return actualSystemTime;
}",0.9929859719438878
193006,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}","void onTimeChanged(long oldTime,long newTime,long deviceUsageTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime,deviceUsageTime);
}",0.9275929549902152
193007,"/** 
 * If any of the apps don't have a last-used entry, add one now.
 * @param currentTimeMillis the current time
 * @param firstUpdate if it is the first update, touch all installed apps, otherwise onlytouch the system apps
 */
private void initializeDefaultsForApps(long currentTimeMillis,long deviceUsageTime,boolean firstUpdate){
  PackageManager pm=mContext.getPackageManager();
  List<PackageInfo> packages=pm.getInstalledPackages(0,mUserId);
  final int packageCount=packages.size();
  for (int i=0; i < packageCount; i++) {
    final PackageInfo pi=packages.get(i);
    String packageName=pi.packageName;
    if (pi.applicationInfo != null && (firstUpdate || pi.applicationInfo.isSystemApp()) && getBeginIdleTime(packageName) == -1) {
      for (      IntervalStats stats : mCurrentStats) {
        stats.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
        stats.updateBeginIdleTime(packageName,deviceUsageTime);
        mStatsChanged=true;
      }
    }
  }
  persistActiveStats();
}","/** 
 * If any of the apps don't have a last-used entry, add one now.
 * @param currentTimeMillis the current time
 * @param firstUpdate if it is the first update, touch all installed apps, otherwise onlytouch the system apps
 */
private void initializeDefaultsForApps(long currentTimeMillis,long deviceUsageTime,boolean firstUpdate){
  PackageManager pm=mContext.getPackageManager();
  List<PackageInfo> packages=pm.getInstalledPackages(0,mUserId);
  final int packageCount=packages.size();
  for (int i=0; i < packageCount; i++) {
    final PackageInfo pi=packages.get(i);
    String packageName=pi.packageName;
    if (pi.applicationInfo != null && (firstUpdate || pi.applicationInfo.isSystemApp()) && getBeginIdleTime(packageName) == -1) {
      for (      IntervalStats stats : mCurrentStats) {
        stats.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
        stats.updateBeginIdleTime(packageName,deviceUsageTime);
      }
      mAppIdleRollingWindow.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
      mAppIdleRollingWindow.updateBeginIdleTime(packageName,deviceUsageTime);
      mStatsChanged=true;
    }
  }
  persistActiveStats();
}",0.8960802187784868
193008,"private static void mergePackageStats(IntervalStats dst,IntervalStats src){
  dst.endTime=Math.max(dst.endTime,src.endTime);
  final int srcPackageCount=src.packageStats.size();
  for (int i=0; i < srcPackageCount; i++) {
    final String packageName=src.packageStats.keyAt(i);
    final UsageStats srcStats=src.packageStats.valueAt(i);
    final UsageStats dstStats=dst.packageStats.get(packageName);
    if (dstStats == null) {
      dst.packageStats.put(packageName,new UsageStats(srcStats));
    }
 else {
      dstStats.add(src.packageStats.valueAt(i));
    }
  }
}","private static void mergePackageStats(IntervalStats dst,IntervalStats src,final long deviceUsageTime){
  dst.endTime=Math.max(dst.endTime,src.endTime);
  final int srcPackageCount=src.packageStats.size();
  for (int i=0; i < srcPackageCount; i++) {
    final String packageName=src.packageStats.keyAt(i);
    final UsageStats srcStats=src.packageStats.valueAt(i);
    UsageStats dstStats=dst.packageStats.get(packageName);
    if (dstStats == null) {
      dstStats=new UsageStats(srcStats);
      dst.packageStats.put(packageName,dstStats);
    }
 else {
      dstStats.add(src.packageStats.valueAt(i));
    }
    if (dstStats.mBeginIdleTime > deviceUsageTime) {
      dstStats.mBeginIdleTime=deviceUsageTime;
    }
  }
}",0.6408668730650154
193009,"@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats,deviceUsageTime);
}",0.977961432506887
193010,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}",0.962915601023018
193011,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp,deviceUsageTime);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9948320413436692
193012,"/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(long currentTimeMillis){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,sPackageStatsMerger);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY]);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}","/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(final long currentTimeMillis,final long deviceUsageTime){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,new StatCombiner<IntervalStats>(){
    @Override public void combine(    IntervalStats stats,    boolean mutable,    List<IntervalStats> accumulatedResult){
      IntervalStats accum;
      if (accumulatedResult.isEmpty()) {
        accum=new IntervalStats();
        accum.beginTime=stats.beginTime;
        accumulatedResult.add(accum);
      }
 else {
        accum=accumulatedResult.get(0);
      }
      mergePackageStats(accum,stats,deviceUsageTime);
    }
  }
);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY],deviceUsageTime);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}",0.7731913004882379
193013,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis,final long deviceUsageTime){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9877388080980896
193014,"/** 
 * Retrieves whether the current DPM allows use of the Profile Challenge.
 */
public boolean isSeparateProfileChallengeAllowed(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (!info.isManagedProfile()) {
    return false;
  }
  return getDevicePolicyManager().isSeparateProfileChallengeAllowed(userHandle);
}","/** 
 * Retrieves whether the current DPM allows use of the Profile Challenge.
 */
public boolean isSeparateProfileChallengeAllowed(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (info == null || !info.isManagedProfile()) {
    return false;
  }
  return getDevicePolicyManager().isSeparateProfileChallengeAllowed(userHandle);
}",0.9773371104815864
193015,"/** 
 * Retrieves whether the Separate Profile Challenge is enabled for this   {@param userHandle}.
 */
public boolean isSeparateProfileChallengeEnabled(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (!info.isManagedProfile()) {
    return false;
  }
  return getBoolean(SEPARATE_PROFILE_CHALLENGE_KEY,false,userHandle);
}","/** 
 * Retrieves whether the Separate Profile Challenge is enabled for this   {@param userHandle}.
 */
public boolean isSeparateProfileChallengeEnabled(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (info == null || !info.isManagedProfile()) {
    return false;
  }
  return getBoolean(SEPARATE_PROFILE_CHALLENGE_KEY,false,userHandle);
}",0.977961432506887
193016,"@Override public boolean isDeviceSecure(int userId) throws RemoteException {
  userId=ActivityManager.handleIncomingUser(getCallingPid(),getCallingUid(),userId,false,true,""String_Node_Str"",null);
  if (!mLockPatternUtils.isSeparateProfileChallengeEnabled(userId)) {
    userId=resolveProfileParent(userId);
  }
  long token=Binder.clearCallingIdentity();
  try {
    return mLockPatternUtils.isSecure(userId);
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}","@Override public boolean isDeviceSecure(int userId) throws RemoteException {
  userId=ActivityManager.handleIncomingUser(getCallingPid(),getCallingUid(),userId,false,true,""String_Node_Str"",null);
  long token=Binder.clearCallingIdentity();
  try {
    if (!mLockPatternUtils.isSeparateProfileChallengeEnabled(userId)) {
      userId=resolveProfileParent(userId);
    }
    return mLockPatternUtils.isSecure(userId);
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}",0.884453781512605
193017,"/** 
 * This should be the only way to get the time from the system.
 */
private long checkAndGetTimeLocked(){
  final long actualSystemTime=System.currentTimeMillis();
  final long actualRealtime=SystemClock.elapsedRealtime();
  final long expectedSystemTime=(actualRealtime - mRealTimeSnapshot) + mSystemTimeSnapshot;
  boolean resetBeginIdleTime=false;
  if (Math.abs(actualSystemTime - expectedSystemTime) > TIME_CHANGE_THRESHOLD_MILLIS) {
    if (Math.abs(actualSystemTime - expectedSystemTime) > mAppIdleDurationMillis) {
      mScreenOnSystemTimeSnapshot=actualSystemTime;
      mScreenOnTime=0;
      resetBeginIdleTime=true;
    }
    final int userCount=mUserState.size();
    for (int i=0; i < userCount; i++) {
      final UserUsageStatsService service=mUserState.valueAt(i);
      service.onTimeChanged(expectedSystemTime,actualSystemTime,resetBeginIdleTime);
    }
    mRealTimeSnapshot=actualRealtime;
    mSystemTimeSnapshot=actualSystemTime;
  }
  return actualSystemTime;
}","/** 
 * This should be the only way to get the time from the system.
 */
private long checkAndGetTimeLocked(){
  final long actualSystemTime=System.currentTimeMillis();
  final long actualRealtime=SystemClock.elapsedRealtime();
  final long expectedSystemTime=(actualRealtime - mRealTimeSnapshot) + mSystemTimeSnapshot;
  boolean resetBeginIdleTime=false;
  if (Math.abs(actualSystemTime - expectedSystemTime) > TIME_CHANGE_THRESHOLD_MILLIS) {
    if (Math.abs(actualSystemTime - expectedSystemTime) > mAppIdleDurationMillis) {
      mScreenOnSystemTimeSnapshot=actualSystemTime;
      mScreenOnTime=0;
      resetBeginIdleTime=true;
    }
    final int userCount=mUserState.size();
    for (int i=0; i < userCount; i++) {
      final UserUsageStatsService service=mUserState.valueAt(i);
      service.onTimeChanged(expectedSystemTime,actualSystemTime,mScreenOnTime,resetBeginIdleTime);
    }
    mRealTimeSnapshot=actualRealtime;
    mSystemTimeSnapshot=actualSystemTime;
  }
  return actualSystemTime;
}",0.9929859719438878
193018,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}","void onTimeChanged(long oldTime,long newTime,long deviceUsageTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime,deviceUsageTime);
}",0.9275929549902152
193019,"/** 
 * If any of the apps don't have a last-used entry, add one now.
 * @param currentTimeMillis the current time
 * @param firstUpdate if it is the first update, touch all installed apps, otherwise onlytouch the system apps
 */
private void initializeDefaultsForApps(long currentTimeMillis,long deviceUsageTime,boolean firstUpdate){
  PackageManager pm=mContext.getPackageManager();
  List<PackageInfo> packages=pm.getInstalledPackages(0,mUserId);
  final int packageCount=packages.size();
  for (int i=0; i < packageCount; i++) {
    final PackageInfo pi=packages.get(i);
    String packageName=pi.packageName;
    if (pi.applicationInfo != null && (firstUpdate || pi.applicationInfo.isSystemApp()) && getBeginIdleTime(packageName) == -1) {
      for (      IntervalStats stats : mCurrentStats) {
        stats.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
        stats.updateBeginIdleTime(packageName,deviceUsageTime);
        mStatsChanged=true;
      }
    }
  }
  persistActiveStats();
}","/** 
 * If any of the apps don't have a last-used entry, add one now.
 * @param currentTimeMillis the current time
 * @param firstUpdate if it is the first update, touch all installed apps, otherwise onlytouch the system apps
 */
private void initializeDefaultsForApps(long currentTimeMillis,long deviceUsageTime,boolean firstUpdate){
  PackageManager pm=mContext.getPackageManager();
  List<PackageInfo> packages=pm.getInstalledPackages(0,mUserId);
  final int packageCount=packages.size();
  for (int i=0; i < packageCount; i++) {
    final PackageInfo pi=packages.get(i);
    String packageName=pi.packageName;
    if (pi.applicationInfo != null && (firstUpdate || pi.applicationInfo.isSystemApp()) && getBeginIdleTime(packageName) == -1) {
      for (      IntervalStats stats : mCurrentStats) {
        stats.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
        stats.updateBeginIdleTime(packageName,deviceUsageTime);
      }
      mAppIdleRollingWindow.update(packageName,currentTimeMillis,Event.SYSTEM_INTERACTION);
      mAppIdleRollingWindow.updateBeginIdleTime(packageName,deviceUsageTime);
      mStatsChanged=true;
    }
  }
  persistActiveStats();
}",0.8960802187784868
193020,"private static void mergePackageStats(IntervalStats dst,IntervalStats src){
  dst.endTime=Math.max(dst.endTime,src.endTime);
  final int srcPackageCount=src.packageStats.size();
  for (int i=0; i < srcPackageCount; i++) {
    final String packageName=src.packageStats.keyAt(i);
    final UsageStats srcStats=src.packageStats.valueAt(i);
    final UsageStats dstStats=dst.packageStats.get(packageName);
    if (dstStats == null) {
      dst.packageStats.put(packageName,new UsageStats(srcStats));
    }
 else {
      dstStats.add(src.packageStats.valueAt(i));
    }
  }
}","private static void mergePackageStats(IntervalStats dst,IntervalStats src,final long deviceUsageTime){
  dst.endTime=Math.max(dst.endTime,src.endTime);
  final int srcPackageCount=src.packageStats.size();
  for (int i=0; i < srcPackageCount; i++) {
    final String packageName=src.packageStats.keyAt(i);
    final UsageStats srcStats=src.packageStats.valueAt(i);
    UsageStats dstStats=dst.packageStats.get(packageName);
    if (dstStats == null) {
      dstStats=new UsageStats(srcStats);
      dst.packageStats.put(packageName,dstStats);
    }
 else {
      dstStats.add(src.packageStats.valueAt(i));
    }
    if (dstStats.mBeginIdleTime > deviceUsageTime) {
      dstStats.mBeginIdleTime=deviceUsageTime;
    }
  }
}",0.6408668730650154
193021,"@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats,deviceUsageTime);
}",0.977961432506887
193022,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}",0.962915601023018
193023,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp,deviceUsageTime);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9948320413436692
193024,"/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(long currentTimeMillis){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,sPackageStatsMerger);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY]);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}","/** 
 * App idle operates on a rolling window of time. When we roll over time, we end up with a period of time where in-memory stats are empty and we don't hit the disk for older stats for performance reasons. Suddenly all apps will become idle. Instead, at times we do a deep query to find all the apps that have run in the past few days and keep the cached data up to date.
 * @param currentTimeMillis
 */
void refreshAppIdleRollingWindow(final long currentTimeMillis,final long deviceUsageTime){
  List<IntervalStats> stats=mDatabase.queryUsageStats(UsageStatsManager.INTERVAL_DAILY,currentTimeMillis - (1000 * 60 * 60* 24* 2),currentTimeMillis,new StatCombiner<IntervalStats>(){
    @Override public void combine(    IntervalStats stats,    boolean mutable,    List<IntervalStats> accumulatedResult){
      IntervalStats accum;
      if (accumulatedResult.isEmpty()) {
        accum=new IntervalStats();
        accum.beginTime=stats.beginTime;
        accumulatedResult.add(accum);
      }
 else {
        accum=accumulatedResult.get(0);
      }
      mergePackageStats(accum,stats,deviceUsageTime);
    }
  }
);
  if (stats == null || stats.isEmpty()) {
    mAppIdleRollingWindow=new IntervalStats();
    mergePackageStats(mAppIdleRollingWindow,mCurrentStats[UsageStatsManager.INTERVAL_YEARLY],deviceUsageTime);
  }
 else {
    mAppIdleRollingWindow=stats.get(0);
  }
}",0.7731913004882379
193025,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis,final long deviceUsageTime){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis,deviceUsageTime);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9877388080980896
193026,"/** 
 * Retrieves whether the current DPM allows use of the Profile Challenge.
 */
public boolean isSeparateProfileChallengeAllowed(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (!info.isManagedProfile()) {
    return false;
  }
  return getDevicePolicyManager().isSeparateProfileChallengeAllowed(userHandle);
}","/** 
 * Retrieves whether the current DPM allows use of the Profile Challenge.
 */
public boolean isSeparateProfileChallengeAllowed(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (info == null || !info.isManagedProfile()) {
    return false;
  }
  return getDevicePolicyManager().isSeparateProfileChallengeAllowed(userHandle);
}",0.9773371104815864
193027,"/** 
 * Retrieves whether the Separate Profile Challenge is enabled for this   {@param userHandle}.
 */
public boolean isSeparateProfileChallengeEnabled(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (!info.isManagedProfile()) {
    return false;
  }
  return getBoolean(SEPARATE_PROFILE_CHALLENGE_KEY,false,userHandle);
}","/** 
 * Retrieves whether the Separate Profile Challenge is enabled for this   {@param userHandle}.
 */
public boolean isSeparateProfileChallengeEnabled(int userHandle){
  UserInfo info=getUserManager().getUserInfo(userHandle);
  if (info == null || !info.isManagedProfile()) {
    return false;
  }
  return getBoolean(SEPARATE_PROFILE_CHALLENGE_KEY,false,userHandle);
}",0.977961432506887
193028,"@Override public boolean isDeviceSecure(int userId) throws RemoteException {
  userId=ActivityManager.handleIncomingUser(getCallingPid(),getCallingUid(),userId,false,true,""String_Node_Str"",null);
  if (!mLockPatternUtils.isSeparateProfileChallengeEnabled(userId)) {
    userId=resolveProfileParent(userId);
  }
  long token=Binder.clearCallingIdentity();
  try {
    return mLockPatternUtils.isSecure(userId);
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}","@Override public boolean isDeviceSecure(int userId) throws RemoteException {
  userId=ActivityManager.handleIncomingUser(getCallingPid(),getCallingUid(),userId,false,true,""String_Node_Str"",null);
  long token=Binder.clearCallingIdentity();
  try {
    if (!mLockPatternUtils.isSeparateProfileChallengeEnabled(userId)) {
      userId=resolveProfileParent(userId);
    }
    return mLockPatternUtils.isSecure(userId);
  }
  finally {
    Binder.restoreCallingIdentity(token);
  }
}",0.884453781512605
193029,"@Override public void onReceive(Context context,Intent intent){
  if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {
    final int sequence=intent.getIntExtra(""String_Node_Str"",0);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + sequence + ""String_Node_Str""+ mDelayedShowingSequence);
synchronized (KeyguardViewMediator.this) {
      doKeyguardLocked(null);
    }
  }
 else   if (DELAYED_LOCK_PROFILE_ACTION.equals(intent.getAction())) {
    int userId=intent.getIntExtra(Intent.EXTRA_USER_ID,0);
    if (userId != 0) {
synchronized (KeyguardViewMediator.this) {
        lockProfile(userId);
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {
    final int sequence=intent.getIntExtra(""String_Node_Str"",0);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + sequence + ""String_Node_Str""+ mDelayedShowingSequence);
synchronized (KeyguardViewMediator.this) {
      if (mDelayedShowingSequence == sequence) {
        doKeyguardLocked(null);
      }
    }
  }
 else   if (DELAYED_LOCK_PROFILE_ACTION.equals(intent.getAction())) {
    int userId=intent.getIntExtra(Intent.EXTRA_USER_ID,0);
    if (userId != 0) {
synchronized (KeyguardViewMediator.this) {
        lockProfile(userId);
      }
    }
  }
}",0.9545104086353122
193030,"public void keyguardDoneDrawing(){
  mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);
}","@Override public void keyguardDoneDrawing(){
  mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);
}",0.946236559139785
193031,"public void onBootCompleted(){
  mUpdateMonitor.dispatchBootCompleted();
synchronized (this) {
    mBootCompleted=true;
    if (mBootSendUserPresent) {
      sendUserPresentBroadcast();
    }
  }
}","@Override public void onBootCompleted(){
  mUpdateMonitor.dispatchBootCompleted();
synchronized (this) {
    mBootCompleted=true;
    if (mBootSendUserPresent) {
      sendUserPresentBroadcast();
    }
  }
}",0.9752475247524752
193032,"private void updateLockScreenTimeout(){
synchronized (mScreenLockTimeout) {
    boolean enable=(mAllowLockscreenWhenOn && mAwake && mKeyguardDelegate != null && mKeyguardDelegate.isSecure());
    if (mLockScreenTimerActive != enable) {
      if (enable) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.postDelayed(mScreenLockTimeout,mLockScreenTimeout);
      }
 else {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
      }
      mLockScreenTimerActive=enable;
    }
  }
}","private void updateLockScreenTimeout(){
synchronized (mScreenLockTimeout) {
    boolean enable=(mAllowLockscreenWhenOn && mAwake && mKeyguardDelegate != null && mKeyguardDelegate.isSecure());
    if (mLockScreenTimerActive != enable) {
      if (enable) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
        mHandler.postDelayed(mScreenLockTimeout,mLockScreenTimeout);
      }
 else {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
      }
      mLockScreenTimerActive=enable;
    }
  }
}",0.955
193033,"ActivityRecord(ActivityManagerService _service,ProcessRecord _caller,int _launchedFromUid,String _launchedFromPackage,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified,boolean _rootVoiceInteraction,ActivityStackSupervisor supervisor,ActivityContainer container,ActivityOptions options){
  service=_service;
  appToken=new Token(this,service);
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  launchedFromPackage=_launchedFromPackage;
  userId=UserHandle.getUserId(aInfo.applicationInfo.uid);
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  rootVoiceInteraction=_rootVoiceInteraction;
  configuration=_configuration;
  taskConfigOverride=Configuration.EMPTY;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  visible=false;
  nowVisible=false;
  idle=false;
  hasBeenLaunched=false;
  mStackSupervisor=supervisor;
  mInitialActivityContainer=container;
  if (options != null) {
    pendingOptions=options;
    mLaunchTaskBehind=pendingOptions.getLaunchTaskBehind();
    PendingIntent usageReport=pendingOptions.getUsageTimeReport();
    if (usageReport != null) {
      appTimeTracker=new AppTimeTracker(usageReport);
    }
  }
  haveState=true;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    appInfo=aInfo.applicationInfo;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    logo=aInfo.getLogoResource();
    theme=aInfo.getThemeResource();
    realTheme=theme;
    if (realTheme == 0) {
      realTheme=aInfo.applicationInfo.targetSdkVersion < Build.VERSION_CODES.HONEYCOMB ? android.R.style.Theme : android.R.style.Theme_Holo;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0) {
      windowFlags|=WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,realTheme,com.android.internal.R.styleable.Window,userId);
    final boolean translucent=ent != null && (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) || (!ent.array.hasValue(com.android.internal.R.styleable.Window_windowIsTranslucent) && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowSwipeToDismiss,false)));
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !translucent;
    noDisplay=ent != null && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowNoDisplay,false);
    if ((!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) && Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME)&& _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !isResolverActivity()) {
      mActivityType=HOME_ACTIVITY_TYPE;
    }
 else     if (realActivity.getClassName().contains(RECENTS_PACKAGE_NAME)) {
      mActivityType=RECENTS_ACTIVITY_TYPE;
    }
 else {
      mActivityType=APPLICATION_ACTIVITY_TYPE;
    }
    immersive=(aInfo.flags & ActivityInfo.FLAG_IMMERSIVE) != 0;
    isVrActivity=(aInfo.flags & ActivityInfo.FLAG_ENABLE_VR_MODE) != 0;
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    appInfo=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    noDisplay=false;
    mActivityType=APPLICATION_ACTIVITY_TYPE;
    immersive=false;
    isVrActivity=false;
  }
}","ActivityRecord(ActivityManagerService _service,ProcessRecord _caller,int _launchedFromUid,String _launchedFromPackage,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified,boolean _rootVoiceInteraction,ActivityStackSupervisor supervisor,ActivityContainer container,ActivityOptions options){
  service=_service;
  appToken=new Token(this,service);
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  launchedFromPackage=_launchedFromPackage;
  userId=UserHandle.getUserId(aInfo.applicationInfo.uid);
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  rootVoiceInteraction=_rootVoiceInteraction;
  configuration=_configuration;
  taskConfigOverride=Configuration.EMPTY;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  deferRelaunchUntilPaused=false;
  keysPaused=false;
  inHistory=false;
  visible=false;
  nowVisible=false;
  idle=false;
  hasBeenLaunched=false;
  mStackSupervisor=supervisor;
  mInitialActivityContainer=container;
  if (options != null) {
    pendingOptions=options;
    mLaunchTaskBehind=pendingOptions.getLaunchTaskBehind();
    PendingIntent usageReport=pendingOptions.getUsageTimeReport();
    if (usageReport != null) {
      appTimeTracker=new AppTimeTracker(usageReport);
    }
  }
  haveState=true;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    appInfo=aInfo.applicationInfo;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    logo=aInfo.getLogoResource();
    theme=aInfo.getThemeResource();
    realTheme=theme;
    if (realTheme == 0) {
      realTheme=aInfo.applicationInfo.targetSdkVersion < Build.VERSION_CODES.HONEYCOMB ? android.R.style.Theme : android.R.style.Theme_Holo;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0) {
      windowFlags|=WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,realTheme,com.android.internal.R.styleable.Window,userId);
    final boolean translucent=ent != null && (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) || (!ent.array.hasValue(com.android.internal.R.styleable.Window_windowIsTranslucent) && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowSwipeToDismiss,false)));
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !translucent;
    noDisplay=ent != null && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowNoDisplay,false);
    if ((!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) && Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME)&& _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && !isResolverActivity()) {
      mActivityType=HOME_ACTIVITY_TYPE;
    }
 else     if (realActivity.getClassName().contains(RECENTS_PACKAGE_NAME)) {
      mActivityType=RECENTS_ACTIVITY_TYPE;
    }
 else {
      mActivityType=APPLICATION_ACTIVITY_TYPE;
    }
    immersive=(aInfo.flags & ActivityInfo.FLAG_IMMERSIVE) != 0;
    isVrActivity=(aInfo.flags & ActivityInfo.FLAG_ENABLE_VR_MODE) != 0;
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    appInfo=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    noDisplay=false;
    mActivityType=APPLICATION_ACTIVITY_TYPE;
    immersive=false;
    isVrActivity=false;
  }
}",0.996309963099631
193034,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromPackage);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent.toInsecureStringWithClip());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  if (appInfo != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(appInfo.sourceDir);
    if (!Objects.equals(appInfo.sourceDir,appInfo.publicSourceDir)) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(appInfo.publicSourceDir);
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(appInfo.dataDir);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(mActivityType);
  if (rootVoiceInteraction) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(rootVoiceInteraction);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(compat);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskConfigOverride);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (taskDescription != null) {
    final String iconFilename=taskDescription.getIconFilename();
    if (iconFilename != null || taskDescription.getLabel() != null || taskDescription.getPrimaryColor() != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(taskDescription.getIconFilename());
      pw.print(""String_Node_Str"");
      pw.print(taskDescription.getLabel());
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(Integer.toHexString(taskDescription.getPrimaryColor()));
    }
    if (iconFilename == null && taskDescription.getIcon() != null) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
    }
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null && pendingResults.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    WeakReference<PendingIntentRecord> wpir : pendingResults) {
      PendingIntentRecord pir=wpir != null ? wpir.get() : null;
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      if (pir == null) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(pir);
        pir.dump(pw,prefix + ""String_Node_Str"");
      }
    }
  }
  if (newIntents != null && newIntents.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < newIntents.size(); i++) {
      Intent intent=newIntents.get(i);
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      if (intent == null) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(intent.toShortString(false,true,false,true));
      }
    }
  }
  if (pendingOptions != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingOptions);
  }
  if (appTimeTracker != null) {
    appTimeTracker.dumpWithHeader(pw,prefix,false);
  }
  if (uriPermissions != null) {
    uriPermissions.dump(pw,prefix);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(launchCount);
  pw.print(""String_Node_Str"");
  if (lastLaunchTime == 0)   pw.print(""String_Node_Str"");
 else   TimeUtils.formatDuration(lastLaunchTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(sleeping);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(noDisplay);
  pw.print(""String_Node_Str"");
  pw.print(immersive);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.println(forceNewConfig);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(activityTypeToString(mActivityType));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(isVrActivity);
  if (displayStartTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    if (displayStartTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(displayStartTime,now,pw);
    pw.print(""String_Node_Str"");
    if (startTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(startTime,now,pw);
    pw.println();
  }
  final boolean waitingVisible=mStackSupervisor.mWaitingVisibleActivities.contains(this);
  if (lastVisibleTime != 0 || waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.print(nowVisible);
    pw.print(""String_Node_Str"");
    if (lastVisibleTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(lastVisibleTime,now,pw);
    pw.println();
  }
  if (configDestroy || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(configDestroy);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(packageName);
  pw.print(""String_Node_Str"");
  pw.println(processName);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromUid);
  pw.print(""String_Node_Str"");
  pw.print(launchedFromPackage);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(app);
  pw.print(prefix);
  pw.println(intent.toInsecureStringWithClip());
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frontOfTask);
  pw.print(""String_Node_Str"");
  pw.println(task);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskAffinity);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(realActivity.flattenToShortString());
  if (appInfo != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(appInfo.sourceDir);
    if (!Objects.equals(appInfo.sourceDir,appInfo.publicSourceDir)) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(appInfo.publicSourceDir);
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(appInfo.dataDir);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(stateNotNeeded);
  pw.print(""String_Node_Str"");
  pw.print(componentSpecified);
  pw.print(""String_Node_Str"");
  pw.println(mActivityType);
  if (rootVoiceInteraction) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(rootVoiceInteraction);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(compat);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(labelRes));
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(icon));
  pw.print(""String_Node_Str"");
  pw.println(Integer.toHexString(theme));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(configuration);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(taskConfigOverride);
  if (resultTo != null || resultWho != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultWho);
    pw.print(""String_Node_Str"");
    pw.println(requestCode);
  }
  if (taskDescription != null) {
    final String iconFilename=taskDescription.getIconFilename();
    if (iconFilename != null || taskDescription.getLabel() != null || taskDescription.getPrimaryColor() != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(taskDescription.getIconFilename());
      pw.print(""String_Node_Str"");
      pw.print(taskDescription.getLabel());
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(Integer.toHexString(taskDescription.getPrimaryColor()));
    }
    if (iconFilename == null && taskDescription.getIcon() != null) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
    }
  }
  if (results != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(results);
  }
  if (pendingResults != null && pendingResults.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    WeakReference<PendingIntentRecord> wpir : pendingResults) {
      PendingIntentRecord pir=wpir != null ? wpir.get() : null;
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      if (pir == null) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(pir);
        pir.dump(pw,prefix + ""String_Node_Str"");
      }
    }
  }
  if (newIntents != null && newIntents.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < newIntents.size(); i++) {
      Intent intent=newIntents.get(i);
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      if (intent == null) {
        pw.println(""String_Node_Str"");
      }
 else {
        pw.println(intent.toShortString(false,true,false,true));
      }
    }
  }
  if (pendingOptions != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pendingOptions);
  }
  if (appTimeTracker != null) {
    appTimeTracker.dumpWithHeader(pw,prefix,false);
  }
  if (uriPermissions != null) {
    uriPermissions.dump(pw,prefix);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(launchFailed);
  pw.print(""String_Node_Str"");
  pw.print(launchCount);
  pw.print(""String_Node_Str"");
  if (lastLaunchTime == 0)   pw.print(""String_Node_Str"");
 else   TimeUtils.formatDuration(lastLaunchTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(haveState);
  pw.print(""String_Node_Str"");
  pw.println(icicle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(state);
  pw.print(""String_Node_Str"");
  pw.print(stopped);
  pw.print(""String_Node_Str"");
  pw.print(delayedResume);
  pw.print(""String_Node_Str"");
  pw.println(finishing);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(keysPaused);
  pw.print(""String_Node_Str"");
  pw.print(inHistory);
  pw.print(""String_Node_Str"");
  pw.print(visible);
  pw.print(""String_Node_Str"");
  pw.print(sleeping);
  pw.print(""String_Node_Str"");
  pw.println(idle);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(fullscreen);
  pw.print(""String_Node_Str"");
  pw.print(noDisplay);
  pw.print(""String_Node_Str"");
  pw.print(immersive);
  pw.print(""String_Node_Str"");
  pw.println(launchMode);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(frozenBeforeDestroy);
  pw.print(""String_Node_Str"");
  pw.println(forceNewConfig);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(activityTypeToString(mActivityType));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(isVrActivity);
  if (displayStartTime != 0 || startTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    if (displayStartTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(displayStartTime,now,pw);
    pw.print(""String_Node_Str"");
    if (startTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(startTime,now,pw);
    pw.println();
  }
  final boolean waitingVisible=mStackSupervisor.mWaitingVisibleActivities.contains(this);
  if (lastVisibleTime != 0 || waitingVisible || nowVisible) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(waitingVisible);
    pw.print(""String_Node_Str"");
    pw.print(nowVisible);
    pw.print(""String_Node_Str"");
    if (lastVisibleTime == 0)     pw.print(""String_Node_Str"");
 else     TimeUtils.formatDuration(lastVisibleTime,now,pw);
    pw.println();
  }
  if (deferRelaunchUntilPaused || configChangeFlags != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(deferRelaunchUntilPaused);
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(configChangeFlags));
  }
  if (connections != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
}",0.9950269963057686
193035,"private void insertTaskAtTop(TaskRecord task,ActivityRecord newActivity){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      task.setTaskToReturnTo(fromHome ? lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType : APPLICATION_ACTIVITY_TYPE);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  final boolean notShownWhenLocked=(newActivity != null && (newActivity.info.flags & FLAG_SHOW_FOR_ALL_USERS) == 0) || (newActivity == null && task.topRunningActivityLocked() == null);
  if (!mStackSupervisor.isCurrentProfileLocked(task.userId) && notShownWhenLocked) {
    while (--taskNdx >= 0) {
      final TaskRecord tmpTask=mTaskHistory.get(taskNdx);
      if (!mStackSupervisor.isCurrentProfileLocked(tmpTask.userId) || tmpTask.topRunningActivityLocked() == null) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}","private void insertTaskAtTop(TaskRecord task,ActivityRecord newActivity){
  if (task.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(task);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(task.getTaskToReturnTo());
    }
  }
  if (isOnHomeDisplay()) {
    ActivityStack lastStack=mStackSupervisor.getLastStack();
    final boolean fromHome=lastStack.isHomeStack();
    if (!isHomeStack() && (fromHome || topTask() != task)) {
      int returnToType=APPLICATION_ACTIVITY_TYPE;
      if (fromHome && StackId.allowTopTaskToReturnHome(mStackId)) {
        returnToType=lastStack.topTask() == null ? HOME_ACTIVITY_TYPE : lastStack.topTask().taskType;
      }
      task.setTaskToReturnTo(returnToType);
    }
  }
 else {
    task.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
  }
  mTaskHistory.remove(task);
  int taskNdx=mTaskHistory.size();
  final boolean notShownWhenLocked=(newActivity != null && (newActivity.info.flags & FLAG_SHOW_FOR_ALL_USERS) == 0) || (newActivity == null && task.topRunningActivityLocked() == null);
  if (!mStackSupervisor.isCurrentProfileLocked(task.userId) && notShownWhenLocked) {
    while (--taskNdx >= 0) {
      final TaskRecord tmpTask=mTaskHistory.get(taskNdx);
      if (!mStackSupervisor.isCurrentProfileLocked(tmpTask.userId) || tmpTask.topRunningActivityLocked() == null) {
        break;
      }
    }
    ++taskNdx;
  }
  mTaskHistory.add(taskNdx,task);
  updateTaskMovement(task,true);
}",0.9232974910394264
193036,"/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges,boolean preserveWindow){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
  final Configuration newConfig=mService.mConfiguration;
  final Configuration taskConfig=r.task.mOverrideConfig;
  if (r.configuration == newConfig && r.taskConfigOverride == taskConfig && !r.forceNewConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  final Configuration oldConfig=r.configuration;
  final Configuration oldTaskOverride=r.taskConfigOverride;
  r.configuration=newConfig;
  r.taskConfigOverride=taskConfig;
  int taskChanges=getTaskConfigurationChanges(r,taskConfig,oldTaskOverride);
  final int changes=oldConfig.diff(newConfig) | taskChanges;
  if (changes == 0 && !r.forceNewConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.scheduleConfigurationChanged(taskConfig,false);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r + ""String_Node_Str""+ Configuration.configurationDiffToString(taskChanges)+ ""String_Node_Str""+ Configuration.configurationDiffToString(changes));
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    r.forceNewConfig=false;
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.getRealConfigChanged())+ ""String_Node_Str""+ newConfig+ ""String_Node_Str""+ taskConfig);
  if ((changes & (~r.info.getRealConfigChanged())) != 0 || r.forceNewConfig) {
    r.configChangeFlags|=changes;
    r.startFreezingScreenLocked(r.app,globalChanges);
    r.forceNewConfig=false;
    if (r.app == null || r.app.thread == null) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      destroyActivityLocked(r,true,""String_Node_Str"");
    }
 else     if (r.state == ActivityState.PAUSING) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      r.configDestroy=true;
      return true;
    }
 else     if (r.state == ActivityState.RESUMED) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,true,preserveWindow && isResizeOnlyChange(changes));
      r.configChangeFlags=0;
    }
 else {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,false,preserveWindow && isResizeOnlyChange(changes));
      r.configChangeFlags=0;
    }
    return false;
  }
  r.scheduleConfigurationChanged(taskConfig,true);
  r.stopFreezingScreenLocked(false);
  return true;
}","/** 
 * Make sure the given activity matches the current configuration.  Returns false if the activity had to be destroyed.  Returns true if the configuration is the same, or the activity will remain running as-is for whatever reason.  Ensures the HistoryRecord is updated with the correct configuration and all other bookkeeping is handled.
 */
final boolean ensureActivityConfigurationLocked(ActivityRecord r,int globalChanges,boolean preserveWindow){
  if (mConfigWillChange) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
  final Configuration newConfig=mService.mConfiguration;
  final Configuration taskConfig=r.task.mOverrideConfig;
  if (r.configuration == newConfig && r.taskConfigOverride == taskConfig && !r.forceNewConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    return true;
  }
  if (r.finishing) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    return true;
  }
  final Configuration oldConfig=r.configuration;
  final Configuration oldTaskOverride=r.taskConfigOverride;
  r.configuration=newConfig;
  r.taskConfigOverride=taskConfig;
  int taskChanges=getTaskConfigurationChanges(r,taskConfig,oldTaskOverride);
  final int changes=oldConfig.diff(newConfig) | taskChanges;
  if (changes == 0 && !r.forceNewConfig) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.scheduleConfigurationChanged(taskConfig,false);
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r + ""String_Node_Str""+ Configuration.configurationDiffToString(taskChanges)+ ""String_Node_Str""+ Configuration.configurationDiffToString(changes));
  if (r.app == null || r.app.thread == null) {
    if (DEBUG_SWITCH || DEBUG_CONFIGURATION)     Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
    r.stopFreezingScreenLocked(false);
    r.forceNewConfig=false;
    return true;
  }
  if (DEBUG_SWITCH || DEBUG_CONFIGURATION)   Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r.info.name + ""String_Node_Str""+ Integer.toHexString(changes)+ ""String_Node_Str""+ Integer.toHexString(r.info.getRealConfigChanged())+ ""String_Node_Str""+ newConfig+ ""String_Node_Str""+ taskConfig);
  if ((changes & (~r.info.getRealConfigChanged())) != 0 || r.forceNewConfig) {
    r.configChangeFlags|=changes;
    r.startFreezingScreenLocked(r.app,globalChanges);
    r.forceNewConfig=false;
    preserveWindow&=isResizeOnlyChange(changes);
    if (r.app == null || r.app.thread == null) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      destroyActivityLocked(r,true,""String_Node_Str"");
    }
 else     if (r.state == ActivityState.PAUSING) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      r.deferRelaunchUntilPaused=true;
      r.preserveWindowOnDeferredRelaunch=preserveWindow;
      return true;
    }
 else     if (r.state == ActivityState.RESUMED) {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,true,preserveWindow);
    }
 else {
      if (DEBUG_SWITCH || DEBUG_CONFIGURATION)       Slog.v(TAG_CONFIGURATION,""String_Node_Str"" + r);
      relaunchActivityLocked(r,r.configChangeFlags,false,preserveWindow);
    }
    return false;
  }
  r.scheduleConfigurationChanged(taskConfig,true);
  r.stopFreezingScreenLocked(false);
  return true;
}",0.9639962800584564
193037,"final void stopActivityLocked(ActivityRecord r){
  if (DEBUG_SWITCH)   Slog.d(TAG_SWITCH,""String_Node_Str"" + r);
  if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_HISTORY) != 0 || (r.info.flags & ActivityInfo.FLAG_NO_HISTORY) != 0) {
    if (!r.finishing) {
      if (!mService.isSleeping()) {
        if (DEBUG_STATES)         Slog.d(TAG_STATES,""String_Node_Str"" + r);
        if (requestFinishActivityLocked(r.appToken,Activity.RESULT_CANCELED,null,""String_Node_Str"",false)) {
          adjustFocusedActivityLocked(r,""String_Node_Str"");
          r.resumeKeyDispatchingLocked();
          return;
        }
      }
 else {
        if (DEBUG_STATES)         Slog.d(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
      }
    }
  }
  if (r.app != null && r.app.thread != null) {
    adjustFocusedActivityLocked(r,""String_Node_Str"");
    r.resumeKeyDispatchingLocked();
    try {
      r.stopped=false;
      if (DEBUG_STATES)       Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
      r.state=ActivityState.STOPPING;
      if (DEBUG_VISIBILITY)       Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r.visible + ""String_Node_Str""+ r);
      if (!r.visible) {
        mWindowManager.setAppVisibility(r.appToken,false);
      }
      r.app.thread.scheduleStopActivity(r.appToken,r.visible,r.configChangeFlags);
      if (mService.isSleepingOrShuttingDown()) {
        r.setSleeping(true);
      }
      Message msg=mHandler.obtainMessage(STOP_TIMEOUT_MSG,r);
      mHandler.sendMessageDelayed(msg,STOP_TIMEOUT);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      r.stopped=true;
      if (DEBUG_STATES)       Slog.v(TAG_STATES,""String_Node_Str"" + r);
      r.state=ActivityState.STOPPED;
      if (r.configDestroy) {
        destroyActivityLocked(r,true,""String_Node_Str"");
      }
    }
  }
}","final void stopActivityLocked(ActivityRecord r){
  if (DEBUG_SWITCH)   Slog.d(TAG_SWITCH,""String_Node_Str"" + r);
  if ((r.intent.getFlags() & Intent.FLAG_ACTIVITY_NO_HISTORY) != 0 || (r.info.flags & ActivityInfo.FLAG_NO_HISTORY) != 0) {
    if (!r.finishing) {
      if (!mService.isSleeping()) {
        if (DEBUG_STATES)         Slog.d(TAG_STATES,""String_Node_Str"" + r);
        if (requestFinishActivityLocked(r.appToken,Activity.RESULT_CANCELED,null,""String_Node_Str"",false)) {
          adjustFocusedActivityLocked(r,""String_Node_Str"");
          r.resumeKeyDispatchingLocked();
          return;
        }
      }
 else {
        if (DEBUG_STATES)         Slog.d(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
      }
    }
  }
  if (r.app != null && r.app.thread != null) {
    adjustFocusedActivityLocked(r,""String_Node_Str"");
    r.resumeKeyDispatchingLocked();
    try {
      r.stopped=false;
      if (DEBUG_STATES)       Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
      r.state=ActivityState.STOPPING;
      if (DEBUG_VISIBILITY)       Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r.visible + ""String_Node_Str""+ r);
      if (!r.visible) {
        mWindowManager.setAppVisibility(r.appToken,false);
      }
      r.app.thread.scheduleStopActivity(r.appToken,r.visible,r.configChangeFlags);
      if (mService.isSleepingOrShuttingDown()) {
        r.setSleeping(true);
      }
      Message msg=mHandler.obtainMessage(STOP_TIMEOUT_MSG,r);
      mHandler.sendMessageDelayed(msg,STOP_TIMEOUT);
    }
 catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      r.stopped=true;
      if (DEBUG_STATES)       Slog.v(TAG_STATES,""String_Node_Str"" + r);
      r.state=ActivityState.STOPPED;
      if (r.deferRelaunchUntilPaused) {
        destroyActivityLocked(r,true,""String_Node_Str"");
      }
    }
  }
}",0.9899538419766496
193038,"final void activityStoppedLocked(ActivityRecord r,Bundle icicle,PersistableBundle persistentState,CharSequence description){
  if (r.state != ActivityState.STOPPING) {
    Slog.i(TAG,""String_Node_Str"" + r);
    mHandler.removeMessages(STOP_TIMEOUT_MSG,r);
    return;
  }
  if (persistentState != null) {
    r.persistentState=persistentState;
    mService.notifyTaskPersisterLocked(r.task,false);
  }
  if (DEBUG_SAVED_STATE)   Slog.i(TAG_SAVED_STATE,""String_Node_Str"" + r + ""String_Node_Str""+ icicle);
  if (icicle != null) {
    r.icicle=icicle;
    r.haveState=true;
    r.launchCount=0;
    r.updateThumbnailLocked(null,description);
  }
  if (!r.stopped) {
    if (DEBUG_STATES)     Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
    mHandler.removeMessages(STOP_TIMEOUT_MSG,r);
    r.stopped=true;
    r.state=ActivityState.STOPPED;
    if (getVisibleBehindActivity() == r) {
      mStackSupervisor.requestVisibleBehindLocked(r,false);
    }
    if (r.finishing) {
      r.clearOptionsLocked();
    }
 else {
      if (r.configDestroy) {
        destroyActivityLocked(r,true,""String_Node_Str"");
        mStackSupervisor.resumeFocusedStackTopActivityLocked();
      }
 else {
        mStackSupervisor.updatePreviousProcessLocked(r);
      }
    }
  }
}","final void activityStoppedLocked(ActivityRecord r,Bundle icicle,PersistableBundle persistentState,CharSequence description){
  if (r.state != ActivityState.STOPPING) {
    Slog.i(TAG,""String_Node_Str"" + r);
    mHandler.removeMessages(STOP_TIMEOUT_MSG,r);
    return;
  }
  if (persistentState != null) {
    r.persistentState=persistentState;
    mService.notifyTaskPersisterLocked(r.task,false);
  }
  if (DEBUG_SAVED_STATE)   Slog.i(TAG_SAVED_STATE,""String_Node_Str"" + r + ""String_Node_Str""+ icicle);
  if (icicle != null) {
    r.icicle=icicle;
    r.haveState=true;
    r.launchCount=0;
    r.updateThumbnailLocked(null,description);
  }
  if (!r.stopped) {
    if (DEBUG_STATES)     Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
    mHandler.removeMessages(STOP_TIMEOUT_MSG,r);
    r.stopped=true;
    r.state=ActivityState.STOPPED;
    if (getVisibleBehindActivity() == r) {
      mStackSupervisor.requestVisibleBehindLocked(r,false);
    }
    if (r.finishing) {
      r.clearOptionsLocked();
    }
 else {
      if (r.deferRelaunchUntilPaused) {
        destroyActivityLocked(r,true,""String_Node_Str"");
        mStackSupervisor.resumeFocusedStackTopActivityLocked();
      }
 else {
        mStackSupervisor.updatePreviousProcessLocked(r);
      }
    }
  }
}",0.9855299178725068
193039,"/** 
 * Perform the common clean-up of an activity record.  This is called both as part of destroyActivityLocked() (when destroying the client-side representation) and cleaning things up as a result of its hosting processing going away, in which case there is no remaining client-side state to destroy so only the cleanup here is needed. Note: Call before #removeActivityFromHistoryLocked.
 */
final void cleanUpActivityLocked(ActivityRecord r,boolean cleanServices,boolean setState){
  if (mResumedActivity == r) {
    mResumedActivity=null;
  }
  if (mPausingActivity == r) {
    mPausingActivity=null;
  }
  mService.resetFocusedActivityIfNeededLocked(r);
  r.configDestroy=false;
  r.frozenBeforeDestroy=false;
  if (setState) {
    if (DEBUG_STATES)     Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
    r.state=ActivityState.DESTROYED;
    if (DEBUG_APP)     Slog.v(TAG_APP,""String_Node_Str"" + r);
    r.app=null;
  }
  mStackSupervisor.mFinishingActivities.remove(r);
  mStackSupervisor.mWaitingVisibleActivities.remove(r);
  if (r.finishing && r.pendingResults != null) {
    for (    WeakReference<PendingIntentRecord> apr : r.pendingResults) {
      PendingIntentRecord rec=apr.get();
      if (rec != null) {
        mService.cancelIntentSenderLocked(rec,false);
      }
    }
    r.pendingResults=null;
  }
  if (cleanServices) {
    cleanUpActivityServicesLocked(r);
  }
  removeTimeoutsForActivityLocked(r);
  if (getVisibleBehindActivity() == r) {
    mStackSupervisor.requestVisibleBehindLocked(r,false);
  }
}","/** 
 * Perform the common clean-up of an activity record.  This is called both as part of destroyActivityLocked() (when destroying the client-side representation) and cleaning things up as a result of its hosting processing going away, in which case there is no remaining client-side state to destroy so only the cleanup here is needed. Note: Call before #removeActivityFromHistoryLocked.
 */
final void cleanUpActivityLocked(ActivityRecord r,boolean cleanServices,boolean setState){
  if (mResumedActivity == r) {
    mResumedActivity=null;
  }
  if (mPausingActivity == r) {
    mPausingActivity=null;
  }
  mService.resetFocusedActivityIfNeededLocked(r);
  r.deferRelaunchUntilPaused=false;
  r.frozenBeforeDestroy=false;
  if (setState) {
    if (DEBUG_STATES)     Slog.v(TAG_STATES,""String_Node_Str"" + r + ""String_Node_Str"");
    r.state=ActivityState.DESTROYED;
    if (DEBUG_APP)     Slog.v(TAG_APP,""String_Node_Str"" + r);
    r.app=null;
  }
  mStackSupervisor.mFinishingActivities.remove(r);
  mStackSupervisor.mWaitingVisibleActivities.remove(r);
  if (r.finishing && r.pendingResults != null) {
    for (    WeakReference<PendingIntentRecord> apr : r.pendingResults) {
      PendingIntentRecord rec=apr.get();
      if (rec != null) {
        mService.cancelIntentSenderLocked(rec,false);
      }
    }
    r.pendingResults=null;
  }
  if (cleanServices) {
    cleanUpActivityServicesLocked(r);
  }
  removeTimeoutsForActivityLocked(r);
  if (getVisibleBehindActivity() == r) {
    mStackSupervisor.requestVisibleBehindLocked(r,false);
  }
}",0.9880452342487884
193040,"private void relaunchActivityLocked(ActivityRecord r,int changes,boolean andResume,boolean preserveWindow){
  if (mService.mSuppressResizeConfigChanges && preserveWindow) {
    return;
  }
  List<ResultInfo> results=null;
  List<ReferrerIntent> newIntents=null;
  if (andResume) {
    results=r.results;
    newIntents=r.newIntents;
  }
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + r + ""String_Node_Str""+ results+ ""String_Node_Str""+ newIntents+ ""String_Node_Str""+ andResume+ ""String_Node_Str""+ preserveWindow);
  EventLog.writeEvent(andResume ? EventLogTags.AM_RELAUNCH_RESUME_ACTIVITY : EventLogTags.AM_RELAUNCH_ACTIVITY,r.userId,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  r.startFreezingScreenLocked(r.app,0);
  mStackSupervisor.removeChildActivityContainers(r);
  try {
    if (DEBUG_SWITCH || DEBUG_STATES)     Slog.i(TAG_SWITCH,""String_Node_Str"" + (andResume ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ r);
    r.forceNewConfig=false;
    r.app.thread.scheduleRelaunchActivity(r.appToken,results,newIntents,changes,!andResume,new Configuration(mService.mConfiguration),new Configuration(r.task.mOverrideConfig),preserveWindow);
    mStackSupervisor.activityRelaunchingLocked(r);
  }
 catch (  RemoteException e) {
    if (DEBUG_SWITCH || DEBUG_STATES)     Slog.i(TAG_SWITCH,""String_Node_Str"",e);
  }
  if (andResume) {
    r.results=null;
    r.newIntents=null;
    r.state=ActivityState.RESUMED;
  }
 else {
    mHandler.removeMessages(PAUSE_TIMEOUT_MSG,r);
    r.state=ActivityState.PAUSED;
  }
}","private void relaunchActivityLocked(ActivityRecord r,int changes,boolean andResume,boolean preserveWindow){
  if (mService.mSuppressResizeConfigChanges && preserveWindow) {
    r.configChangeFlags=0;
    return;
  }
  List<ResultInfo> results=null;
  List<ReferrerIntent> newIntents=null;
  if (andResume) {
    results=r.results;
    newIntents=r.newIntents;
  }
  if (DEBUG_SWITCH)   Slog.v(TAG_SWITCH,""String_Node_Str"" + r + ""String_Node_Str""+ results+ ""String_Node_Str""+ newIntents+ ""String_Node_Str""+ andResume+ ""String_Node_Str""+ preserveWindow);
  EventLog.writeEvent(andResume ? EventLogTags.AM_RELAUNCH_RESUME_ACTIVITY : EventLogTags.AM_RELAUNCH_ACTIVITY,r.userId,System.identityHashCode(r),r.task.taskId,r.shortComponentName);
  r.startFreezingScreenLocked(r.app,0);
  mStackSupervisor.removeChildActivityContainers(r);
  try {
    if (DEBUG_SWITCH || DEBUG_STATES)     Slog.i(TAG_SWITCH,""String_Node_Str"" + (andResume ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ r);
    r.forceNewConfig=false;
    r.app.thread.scheduleRelaunchActivity(r.appToken,results,newIntents,changes,!andResume,new Configuration(mService.mConfiguration),new Configuration(r.task.mOverrideConfig),preserveWindow);
    mStackSupervisor.activityRelaunchingLocked(r);
  }
 catch (  RemoteException e) {
    if (DEBUG_SWITCH || DEBUG_STATES)     Slog.i(TAG_SWITCH,""String_Node_Str"",e);
  }
  if (andResume) {
    r.results=null;
    r.newIntents=null;
    r.state=ActivityState.RESUMED;
  }
 else {
    mHandler.removeMessages(PAUSE_TIMEOUT_MSG,r);
    r.state=ActivityState.PAUSED;
  }
  r.configChangeFlags=0;
}",0.983596214511041
193041,"private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
  if (prev != null) {
    final boolean wasStopping=prev.state == ActivityState.STOPPING;
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      }
      if (prev.configDestroy) {
        if (DEBUG_PAUSE)         Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
        destroyActivityLocked(prev,true,""String_Node_Str"");
      }
 else       if (wasStopping) {
        prev.state=ActivityState.STOPPING;
      }
 else       if (!hasVisibleBehindActivity() || mService.isSleepingOrShuttingDown()) {
        addToStopping(prev);
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      prev=null;
    }
    prev.stopFreezingScreenLocked(true);
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeFocusedStackTopActivityLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked();
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeFocusedStackTopActivityLocked();
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}","private void completePauseLocked(boolean resumeNext){
  ActivityRecord prev=mPausingActivity;
  if (DEBUG_PAUSE)   Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
  if (prev != null) {
    final boolean wasStopping=prev.state == ActivityState.STOPPING;
    prev.state=ActivityState.PAUSED;
    if (prev.finishing) {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      prev=finishCurrentActivityLocked(prev,FINISH_AFTER_VISIBLE,false);
    }
 else     if (prev.app != null) {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      if (mStackSupervisor.mWaitingVisibleActivities.remove(prev)) {
        if (DEBUG_SWITCH || DEBUG_PAUSE)         Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      }
      if (prev.deferRelaunchUntilPaused) {
        if (DEBUG_PAUSE)         Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
        relaunchActivityLocked(prev,prev.configChangeFlags,false,prev.preserveWindowOnDeferredRelaunch);
      }
 else       if (wasStopping) {
        prev.state=ActivityState.STOPPING;
      }
 else       if (!hasVisibleBehindActivity() || mService.isSleepingOrShuttingDown()) {
        addToStopping(prev);
      }
    }
 else {
      if (DEBUG_PAUSE)       Slog.v(TAG_PAUSE,""String_Node_Str"" + prev);
      prev=null;
    }
    prev.stopFreezingScreenLocked(true);
    mPausingActivity=null;
  }
  if (resumeNext) {
    final ActivityStack topStack=mStackSupervisor.getFocusedStack();
    if (!mService.isSleepingOrShuttingDown()) {
      mStackSupervisor.resumeFocusedStackTopActivityLocked(topStack,prev,null);
    }
 else {
      mStackSupervisor.checkReadyForSleepLocked();
      ActivityRecord top=topStack.topRunningActivityLocked();
      if (top == null || (prev != null && top != prev)) {
        mStackSupervisor.resumeFocusedStackTopActivityLocked();
      }
    }
  }
  if (prev != null) {
    prev.resumeKeyDispatchingLocked();
    if (prev.app != null && prev.cpuTimeAtResume > 0 && mService.mBatteryStatsService.isOnBattery()) {
      long diff=mService.mProcessCpuTracker.getCpuTimeForPid(prev.app.pid) - prev.cpuTimeAtResume;
      if (diff > 0) {
        BatteryStatsImpl bsi=mService.mBatteryStatsService.getActiveStatistics();
synchronized (bsi) {
          BatteryStatsImpl.Uid.Proc ps=bsi.getProcessStatsLocked(prev.info.applicationInfo.uid,prev.info.packageName);
          if (ps != null) {
            ps.addForegroundTimeLocked(diff);
          }
        }
      }
    }
    prev.cpuTimeAtResume=0;
  }
  mService.notifyTaskStackChangedLocked();
}",0.9725099601593624
193042,"final ArrayList<ActivityRecord> processStoppingActivitiesLocked(boolean remove){
  ArrayList<ActivityRecord> stops=null;
  final boolean nowVisible=allResumedActivitiesVisible();
  for (int activityNdx=mStoppingActivities.size() - 1; activityNdx >= 0; --activityNdx) {
    ActivityRecord s=mStoppingActivities.get(activityNdx);
    final boolean waitingVisible=mWaitingVisibleActivities.contains(s);
    if (DEBUG_ALL)     Slog.v(TAG,""String_Node_Str"" + s + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ waitingVisible+ ""String_Node_Str""+ s.finishing);
    if (waitingVisible && nowVisible) {
      mWaitingVisibleActivities.remove(s);
      if (s.finishing) {
        if (DEBUG_ALL)         Slog.v(TAG,""String_Node_Str"" + s);
        mWindowManager.setAppVisibility(s.appToken,false);
      }
    }
    if ((!waitingVisible || mService.isSleepingOrShuttingDown()) && remove) {
      if (DEBUG_ALL)       Slog.v(TAG,""String_Node_Str"" + s);
      if (stops == null) {
        stops=new ArrayList<>();
      }
      stops.add(s);
      mStoppingActivities.remove(activityNdx);
    }
  }
  return stops;
}","final ArrayList<ActivityRecord> processStoppingActivitiesLocked(boolean remove){
  ArrayList<ActivityRecord> stops=null;
  final boolean nowVisible=allResumedActivitiesVisible();
  for (int activityNdx=mStoppingActivities.size() - 1; activityNdx >= 0; --activityNdx) {
    ActivityRecord s=mStoppingActivities.get(activityNdx);
    final boolean waitingVisible=mWaitingVisibleActivities.contains(s);
    if (DEBUG_STATES)     Slog.v(TAG,""String_Node_Str"" + s + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ waitingVisible+ ""String_Node_Str""+ s.finishing);
    if (waitingVisible && nowVisible) {
      mWaitingVisibleActivities.remove(s);
      if (s.finishing) {
        if (DEBUG_STATES)         Slog.v(TAG,""String_Node_Str"" + s);
        mWindowManager.setAppVisibility(s.appToken,false);
      }
    }
    if ((!waitingVisible || mService.isSleepingOrShuttingDown()) && remove) {
      if (DEBUG_STATES)       Slog.v(TAG,""String_Node_Str"" + s);
      if (stops == null) {
        stops=new ArrayList<>();
      }
      stops.add(s);
      mStoppingActivities.remove(activityNdx);
    }
  }
  return stops;
}",0.9878433138226024
193043,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean recents=cwd == null;
  boolean picking=mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION;
  createDir.setVisible(picking && !recents && cwd.isCreateSupported());
  mSearchManager.showMenu(!picking);
  grid.setVisible(!(picking && recents));
  list.setVisible(!(picking && recents));
  fileSize.setVisible(fileSize.isVisible() && !picking);
  settings.setVisible(false);
  if (mState.action == ACTION_CREATE) {
    final FragmentManager fm=getFragmentManager();
    SaveFragment.get(fm).prepareForDirectory(cwd);
  }
  Menus.disableHiddenItems(menu);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean recents=cwd == null;
  boolean picking=mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION;
  createDir.setVisible(picking && !recents && cwd.isCreateSupported());
  mSearchManager.showMenu(!picking);
  if (picking && recents) {
    grid.setVisible(false);
    list.setVisible(false);
  }
  fileSize.setVisible(fileSize.isVisible() && !picking);
  settings.setVisible(false);
  if (mState.action == ACTION_CREATE) {
    final FragmentManager fm=getFragmentManager();
    SaveFragment.get(fm).prepareForDirectory(cwd);
  }
  Menus.disableHiddenItems(menu);
  return true;
}",0.9527777777777776
193044,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
}","void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}",0.9078341013824884
193045,"long getBeginIdleTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}","long getBeginIdleTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}",0.6374045801526718
193046,"void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
}","void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
  pw.println(""String_Node_Str"");
  printIntervalStats(pw,mAppIdleRollingWindow,screenOnTime,true);
}",0.8641975308641975
193047,"void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  notifyStatsChanged();
}","void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  mAppIdleRollingWindow.updateSystemLastUsedTime(packageName,lastUsedTime);
  notifyStatsChanged();
}",0.8436213991769548
193048,"@Override public void combine(IntervalStats stats,boolean mutable,List<UsageEvents.Event> accumulatedResult){
  if (stats.events == null) {
    return;
  }
  final int startIndex=stats.events.closestIndexOnOrAfter(beginTime);
  if (startIndex < 0) {
    return;
  }
  final int size=stats.events.size();
  for (int i=startIndex; i < size; i++) {
    if (stats.events.keyAt(i) >= endTime) {
      return;
    }
    final UsageEvents.Event event=stats.events.valueAt(i);
    names.add(event.mPackage);
    if (event.mClass != null) {
      names.add(event.mClass);
    }
    accumulatedResult.add(event);
  }
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}",0.2159916926272066
193049,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}",0.983670803396473
193050,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9219460973048652
193051,"long getSystemLastUsedTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}","long getSystemLastUsedTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}",0.6507352941176471
193052,"/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  notifyStatsChanged();
}","/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  mAppIdleRollingWindow.updateBeginIdleTime(packageName,beginIdleTime);
  notifyStatsChanged();
}",0.8871473354231975
193053,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9853544229642648
193054,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
}","void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}",0.9078341013824884
193055,"long getBeginIdleTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}","long getBeginIdleTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}",0.6374045801526718
193056,"void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
}","void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
  pw.println(""String_Node_Str"");
  printIntervalStats(pw,mAppIdleRollingWindow,screenOnTime,true);
}",0.8641975308641975
193057,"void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  notifyStatsChanged();
}","void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  mAppIdleRollingWindow.updateSystemLastUsedTime(packageName,lastUsedTime);
  notifyStatsChanged();
}",0.8436213991769548
193058,"@Override public void combine(IntervalStats stats,boolean mutable,List<UsageEvents.Event> accumulatedResult){
  if (stats.events == null) {
    return;
  }
  final int startIndex=stats.events.closestIndexOnOrAfter(beginTime);
  if (startIndex < 0) {
    return;
  }
  final int size=stats.events.size();
  for (int i=startIndex; i < size; i++) {
    if (stats.events.keyAt(i) >= endTime) {
      return;
    }
    final UsageEvents.Event event=stats.events.valueAt(i);
    names.add(event.mPackage);
    if (event.mClass != null) {
      names.add(event.mClass);
    }
    accumulatedResult.add(event);
  }
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}",0.2159916926272066
193059,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}",0.983670803396473
193060,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9219460973048652
193061,"long getSystemLastUsedTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}","long getSystemLastUsedTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}",0.6507352941176471
193062,"/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  notifyStatsChanged();
}","/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  mAppIdleRollingWindow.updateBeginIdleTime(packageName,beginIdleTime);
  notifyStatsChanged();
}",0.8871473354231975
193063,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9853544229642648
193064,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
}","void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}",0.9078341013824884
193065,"long getBeginIdleTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}","long getBeginIdleTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}",0.6374045801526718
193066,"void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
}","void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
  pw.println(""String_Node_Str"");
  printIntervalStats(pw,mAppIdleRollingWindow,screenOnTime,true);
}",0.8641975308641975
193067,"void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  notifyStatsChanged();
}","void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  mAppIdleRollingWindow.updateSystemLastUsedTime(packageName,lastUsedTime);
  notifyStatsChanged();
}",0.8436213991769548
193068,"@Override public void combine(IntervalStats stats,boolean mutable,List<UsageEvents.Event> accumulatedResult){
  if (stats.events == null) {
    return;
  }
  final int startIndex=stats.events.closestIndexOnOrAfter(beginTime);
  if (startIndex < 0) {
    return;
  }
  final int size=stats.events.size();
  for (int i=startIndex; i < size; i++) {
    if (stats.events.keyAt(i) >= endTime) {
      return;
    }
    final UsageEvents.Event event=stats.events.valueAt(i);
    names.add(event.mPackage);
    if (event.mClass != null) {
      names.add(event.mClass);
    }
    accumulatedResult.add(event);
  }
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}",0.2159916926272066
193069,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}",0.983670803396473
193070,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9219460973048652
193071,"long getSystemLastUsedTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}","long getSystemLastUsedTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}",0.6507352941176471
193072,"/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  notifyStatsChanged();
}","/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  mAppIdleRollingWindow.updateBeginIdleTime(packageName,beginIdleTime);
  notifyStatsChanged();
}",0.8871473354231975
193073,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9853544229642648
193074,"@Override public void onReceive(Context context,Intent intent){
  if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {
    final int sequence=intent.getIntExtra(""String_Node_Str"",0);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + sequence + ""String_Node_Str""+ mDelayedShowingSequence);
synchronized (KeyguardViewMediator.this) {
      doKeyguardLocked(null);
    }
  }
 else   if (DELAYED_LOCK_PROFILE_ACTION.equals(intent.getAction())) {
    int userId=intent.getIntExtra(Intent.EXTRA_USER_ID,0);
    if (userId != 0) {
synchronized (KeyguardViewMediator.this) {
        lockProfile(userId);
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (DELAYED_KEYGUARD_ACTION.equals(intent.getAction())) {
    final int sequence=intent.getIntExtra(""String_Node_Str"",0);
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + sequence + ""String_Node_Str""+ mDelayedShowingSequence);
synchronized (KeyguardViewMediator.this) {
      if (mDelayedShowingSequence == sequence) {
        doKeyguardLocked(null);
      }
    }
  }
 else   if (DELAYED_LOCK_PROFILE_ACTION.equals(intent.getAction())) {
    int userId=intent.getIntExtra(Intent.EXTRA_USER_ID,0);
    if (userId != 0) {
synchronized (KeyguardViewMediator.this) {
        lockProfile(userId);
      }
    }
  }
}",0.9545104086353122
193075,"public void keyguardDoneDrawing(){
  mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);
}","@Override public void keyguardDoneDrawing(){
  mHandler.sendEmptyMessage(KEYGUARD_DONE_DRAWING);
}",0.946236559139785
193076,"public void onBootCompleted(){
  mUpdateMonitor.dispatchBootCompleted();
synchronized (this) {
    mBootCompleted=true;
    if (mBootSendUserPresent) {
      sendUserPresentBroadcast();
    }
  }
}","@Override public void onBootCompleted(){
  mUpdateMonitor.dispatchBootCompleted();
synchronized (this) {
    mBootCompleted=true;
    if (mBootSendUserPresent) {
      sendUserPresentBroadcast();
    }
  }
}",0.9752475247524752
193077,"private void updateLockScreenTimeout(){
synchronized (mScreenLockTimeout) {
    boolean enable=(mAllowLockscreenWhenOn && mAwake && mKeyguardDelegate != null && mKeyguardDelegate.isSecure());
    if (mLockScreenTimerActive != enable) {
      if (enable) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.postDelayed(mScreenLockTimeout,mLockScreenTimeout);
      }
 else {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
      }
      mLockScreenTimerActive=enable;
    }
  }
}","private void updateLockScreenTimeout(){
synchronized (mScreenLockTimeout) {
    boolean enable=(mAllowLockscreenWhenOn && mAwake && mKeyguardDelegate != null && mKeyguardDelegate.isSecure());
    if (mLockScreenTimerActive != enable) {
      if (enable) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
        mHandler.postDelayed(mScreenLockTimeout,mLockScreenTimeout);
      }
 else {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        mHandler.removeCallbacks(mScreenLockTimeout);
      }
      mLockScreenTimerActive=enable;
    }
  }
}",0.955
193078,"void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
}","void onTimeChanged(long oldTime,long newTime,boolean resetBeginIdleTime){
  persistActiveStats();
  mDatabase.onTimeChanged(newTime - oldTime);
  loadActiveStats(newTime,true,resetBeginIdleTime);
  refreshAppIdleRollingWindow(newTime);
}",0.9078341013824884
193079,"long getBeginIdleTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}","long getBeginIdleTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getBeginIdleTime();
  }
}",0.6374045801526718
193080,"void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
}","void dump(IndentingPrintWriter pw,final long screenOnTime){
  for (int interval=0; interval < mCurrentStats.length; interval++) {
    pw.print(""String_Node_Str"");
    pw.print(intervalToString(interval));
    pw.println(""String_Node_Str"");
    printIntervalStats(pw,mCurrentStats[interval],screenOnTime,true);
  }
  pw.println(""String_Node_Str"");
  printIntervalStats(pw,mAppIdleRollingWindow,screenOnTime,true);
}",0.8641975308641975
193081,"void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  notifyStatsChanged();
}","void setSystemLastUsedTime(String packageName,long lastUsedTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateSystemLastUsedTime(packageName,lastUsedTime);
  }
  mAppIdleRollingWindow.updateSystemLastUsedTime(packageName,lastUsedTime);
  notifyStatsChanged();
}",0.8436213991769548
193082,"@Override public void combine(IntervalStats stats,boolean mutable,List<UsageEvents.Event> accumulatedResult){
  if (stats.events == null) {
    return;
  }
  final int startIndex=stats.events.closestIndexOnOrAfter(beginTime);
  if (startIndex < 0) {
    return;
  }
  final int size=stats.events.size();
  for (int i=startIndex; i < size; i++) {
    if (stats.events.keyAt(i) >= endTime) {
      return;
    }
    final UsageEvents.Event event=stats.events.valueAt(i);
    names.add(event.mPackage);
    if (event.mClass != null) {
      names.add(event.mClass);
    }
    accumulatedResult.add(event);
  }
}","@Override public void combine(IntervalStats stats,boolean mutable,List<IntervalStats> accumulatedResult){
  IntervalStats accum;
  if (accumulatedResult.isEmpty()) {
    accum=new IntervalStats();
    accum.beginTime=stats.beginTime;
    accumulatedResult.add(accum);
  }
 else {
    accum=accumulatedResult.get(0);
  }
  mergePackageStats(accum,stats);
}",0.2159916926272066
193083,"void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
}","void init(final long currentTimeMillis,final long deviceUsageTime){
  mDatabase.init(currentTimeMillis);
  int nullCount=0;
  for (int i=0; i < mCurrentStats.length; i++) {
    mCurrentStats[i]=mDatabase.getLatestUsageStats(i);
    if (mCurrentStats[i] == null) {
      nullCount++;
    }
  }
  if (nullCount > 0) {
    if (nullCount != mCurrentStats.length) {
      Slog.w(TAG,mLogPrefix + ""String_Node_Str"");
    }
 else {
    }
    loadActiveStats(currentTimeMillis,false,false);
  }
 else {
    mDailyExpiryDate.setTimeInMillis(mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime);
    mDailyExpiryDate.addDays(1);
    mDailyExpiryDate.truncateToDay();
    Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + sDateFormat.format(mDailyExpiryDate.getTimeInMillis())+ ""String_Node_Str""+ mDailyExpiryDate.getTimeInMillis()+ ""String_Node_Str"");
  }
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        stat.update(pkgStats.mPackageName,stat.lastTimeSaved,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,stat.lastTimeSaved);
  }
  if (mDatabase.isNewUpdate()) {
    initializeDefaultsForApps(currentTimeMillis,deviceUsageTime,mDatabase.isFirstUpdate());
  }
  refreshAppIdleRollingWindow(currentTimeMillis);
}",0.983670803396473
193084,"void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  notifyStatsChanged();
}","void reportEvent(UsageEvents.Event event,long deviceUsageTime){
  if (DEBUG) {
    Slog.d(TAG,mLogPrefix + ""String_Node_Str"" + event.mPackage+ ""String_Node_Str""+ event.mTimeStamp+ ""String_Node_Str""+ eventToString(event.mEventType));
  }
  if (event.mTimeStamp >= mDailyExpiryDate.getTimeInMillis()) {
    rolloverStats(event.mTimeStamp);
  }
  final IntervalStats currentDailyStats=mCurrentStats[UsageStatsManager.INTERVAL_DAILY];
  final Configuration newFullConfig=event.mConfiguration;
  if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE && currentDailyStats.activeConfiguration != null) {
    event.mConfiguration=Configuration.generateDelta(currentDailyStats.activeConfiguration,newFullConfig);
  }
  if (currentDailyStats.events == null) {
    currentDailyStats.events=new TimeSparseArray<>();
  }
  if (event.mEventType != UsageEvents.Event.SYSTEM_INTERACTION) {
    currentDailyStats.events.put(event.mTimeStamp,event);
  }
  for (  IntervalStats stats : mCurrentStats) {
    if (event.mEventType == UsageEvents.Event.CONFIGURATION_CHANGE) {
      stats.updateConfigurationStats(newFullConfig,event.mTimeStamp);
    }
 else {
      stats.update(event.mPackage,event.mTimeStamp,event.mEventType);
      stats.updateBeginIdleTime(event.mPackage,deviceUsageTime);
    }
  }
  if (event.mEventType != Event.CONFIGURATION_CHANGE) {
    mAppIdleRollingWindow.update(event.mPackage,event.mTimeStamp,event.mEventType);
    mAppIdleRollingWindow.updateBeginIdleTime(event.mPackage,deviceUsageTime);
  }
  notifyStatsChanged();
}",0.9219460973048652
193085,"long getSystemLastUsedTime(String packageName){
  final IntervalStats yearly=mCurrentStats[UsageStatsManager.INTERVAL_YEARLY];
  UsageStats packageUsage;
  if ((packageUsage=yearly.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}","long getSystemLastUsedTime(String packageName){
  UsageStats packageUsage;
  if ((packageUsage=mAppIdleRollingWindow.packageStats.get(packageName)) == null) {
    return -1;
  }
 else {
    return packageUsage.getLastTimeSystemUsed();
  }
}",0.6507352941176471
193086,"/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  notifyStatsChanged();
}","/** 
 * Sets the beginIdleTime for each of the intervals.
 * @param beginIdleTime
 */
void setBeginIdleTime(String packageName,long beginIdleTime){
  for (  IntervalStats stats : mCurrentStats) {
    stats.updateBeginIdleTime(packageName,beginIdleTime);
  }
  mAppIdleRollingWindow.updateBeginIdleTime(packageName,beginIdleTime);
  notifyStatsChanged();
}",0.8871473354231975
193087,"private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}","private void rolloverStats(final long currentTimeMillis){
  final long startTime=SystemClock.elapsedRealtime();
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"");
  final Configuration previousConfig=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].activeConfiguration;
  ArraySet<String> continuePreviousDay=new ArraySet<>();
  for (  IntervalStats stat : mCurrentStats) {
    final int pkgCount=stat.packageStats.size();
    for (int i=0; i < pkgCount; i++) {
      UsageStats pkgStats=stat.packageStats.valueAt(i);
      if (pkgStats.mLastEvent == UsageEvents.Event.MOVE_TO_FOREGROUND || pkgStats.mLastEvent == UsageEvents.Event.CONTINUE_PREVIOUS_DAY) {
        continuePreviousDay.add(pkgStats.mPackageName);
        stat.update(pkgStats.mPackageName,mDailyExpiryDate.getTimeInMillis() - 1,UsageEvents.Event.END_OF_DAY);
        notifyStatsChanged();
      }
    }
    stat.updateConfigurationStats(null,mDailyExpiryDate.getTimeInMillis() - 1);
  }
  persistActiveStats();
  mDatabase.prune(currentTimeMillis);
  loadActiveStats(currentTimeMillis,false,false);
  final int continueCount=continuePreviousDay.size();
  for (int i=0; i < continueCount; i++) {
    String name=continuePreviousDay.valueAt(i);
    final long beginTime=mCurrentStats[UsageStatsManager.INTERVAL_DAILY].beginTime;
    for (    IntervalStats stat : mCurrentStats) {
      stat.update(name,beginTime,UsageEvents.Event.CONTINUE_PREVIOUS_DAY);
      stat.updateConfigurationStats(previousConfig,beginTime);
      notifyStatsChanged();
    }
  }
  persistActiveStats();
  refreshAppIdleRollingWindow(currentTimeMillis);
  final long totalTime=SystemClock.elapsedRealtime() - startTime;
  Slog.i(TAG,mLogPrefix + ""String_Node_Str"" + totalTime+ ""String_Node_Str"");
}",0.9853544229642648
193088,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean recents=cwd == null;
  boolean picking=mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION;
  createDir.setVisible(picking && !recents && cwd.isCreateSupported());
  mSearchManager.showMenu(!picking);
  grid.setVisible(!(picking && recents));
  list.setVisible(!(picking && recents));
  fileSize.setVisible(fileSize.isVisible() && !picking);
  settings.setVisible(false);
  if (mState.action == ACTION_CREATE) {
    final FragmentManager fm=getFragmentManager();
    SaveFragment.get(fm).prepareForDirectory(cwd);
  }
  Menus.disableHiddenItems(menu);
  return true;
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  super.onPrepareOptionsMenu(menu);
  final DocumentInfo cwd=getCurrentDirectory();
  final MenuItem createDir=menu.findItem(R.id.menu_create_dir);
  final MenuItem grid=menu.findItem(R.id.menu_grid);
  final MenuItem list=menu.findItem(R.id.menu_list);
  final MenuItem fileSize=menu.findItem(R.id.menu_file_size);
  final MenuItem settings=menu.findItem(R.id.menu_settings);
  boolean recents=cwd == null;
  boolean picking=mState.action == ACTION_CREATE || mState.action == ACTION_OPEN_TREE || mState.action == ACTION_PICK_COPY_DESTINATION;
  createDir.setVisible(picking && !recents && cwd.isCreateSupported());
  mSearchManager.showMenu(!picking);
  if (picking && recents) {
    grid.setVisible(false);
    list.setVisible(false);
  }
  fileSize.setVisible(fileSize.isVisible() && !picking);
  settings.setVisible(false);
  if (mState.action == ACTION_CREATE) {
    final FragmentManager fm=getFragmentManager();
    SaveFragment.get(fm).prepareForDirectory(cwd);
  }
  Menus.disableHiddenItems(menu);
  return true;
}",0.9527777777777776
193089,"public void onResume(){
  restoreExitedViews();
}","public void onResume(){
  restoreExitedViews();
  restoreReenteringViews();
}",0.7777777777777778
193090,"private void startEnter(){
  if (mEnterActivityOptions.isReturning()) {
    if (mExitingToView != null) {
      mEnterTransitionCoordinator.viewInstancesReady(mExitingFrom,mExitingTo,mExitingToView);
    }
 else {
      mEnterTransitionCoordinator.namedViewsReady(mExitingFrom,mExitingTo);
    }
  }
 else {
    mEnterTransitionCoordinator.namedViewsReady(null,null);
    mEnteringNames=mEnterTransitionCoordinator.getAllSharedElementNames();
  }
  mExitingFrom=null;
  mExitingTo=null;
  mExitingToView=null;
  mEnterActivityOptions=null;
}","private void startEnter(){
  if (mEnterTransitionCoordinator.isReturning()) {
    if (mExitingToView != null) {
      mEnterTransitionCoordinator.viewInstancesReady(mExitingFrom,mExitingTo,mExitingToView);
    }
 else {
      mEnterTransitionCoordinator.namedViewsReady(mExitingFrom,mExitingTo);
    }
  }
 else {
    mEnterTransitionCoordinator.namedViewsReady(null,null);
    mEnteringNames=mEnterTransitionCoordinator.getAllSharedElementNames();
  }
  mExitingFrom=null;
  mExitingTo=null;
  mExitingToView=null;
  mEnterActivityOptions=null;
}",0.1029411764705882
193091,"private void triggerViewsReady(final ArrayMap<String,View> sharedElements){
  if (mAreViewsReady) {
    return;
  }
  mAreViewsReady=true;
  final ViewGroup decor=getDecor();
  if (decor == null || (decor.isAttachedToWindow() && (sharedElements.isEmpty() || !sharedElements.valueAt(0).isLayoutRequested()))) {
    viewsReady(sharedElements);
  }
 else {
    decor.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        decor.getViewTreeObserver().removeOnPreDrawListener(this);
        viewsReady(sharedElements);
        return true;
      }
    }
);
  }
}","private void triggerViewsReady(final ArrayMap<String,View> sharedElements){
  if (mAreViewsReady) {
    return;
  }
  mAreViewsReady=true;
  final ViewGroup decor=getDecor();
  if (decor == null || (decor.isAttachedToWindow() && (sharedElements.isEmpty() || !sharedElements.valueAt(0).isLayoutRequested()))) {
    viewsReady(sharedElements);
  }
 else {
    mViewsReadyListener=new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        mViewsReadyListener=null;
        decor.getViewTreeObserver().removeOnPreDrawListener(this);
        viewsReady(sharedElements);
        return true;
      }
    }
;
    decor.getViewTreeObserver().addOnPreDrawListener(mViewsReadyListener);
  }
}",0.7089167280766396
193092,"public void onResume(){
  restoreExitedViews();
}","public void onResume(){
  restoreExitedViews();
  restoreReenteringViews();
}",0.7777777777777778
193093,"private void startEnter(){
  if (mEnterActivityOptions.isReturning()) {
    if (mExitingToView != null) {
      mEnterTransitionCoordinator.viewInstancesReady(mExitingFrom,mExitingTo,mExitingToView);
    }
 else {
      mEnterTransitionCoordinator.namedViewsReady(mExitingFrom,mExitingTo);
    }
  }
 else {
    mEnterTransitionCoordinator.namedViewsReady(null,null);
    mEnteringNames=mEnterTransitionCoordinator.getAllSharedElementNames();
  }
  mExitingFrom=null;
  mExitingTo=null;
  mExitingToView=null;
  mEnterActivityOptions=null;
}","private void startEnter(){
  if (mEnterTransitionCoordinator.isReturning()) {
    if (mExitingToView != null) {
      mEnterTransitionCoordinator.viewInstancesReady(mExitingFrom,mExitingTo,mExitingToView);
    }
 else {
      mEnterTransitionCoordinator.namedViewsReady(mExitingFrom,mExitingTo);
    }
  }
 else {
    mEnterTransitionCoordinator.namedViewsReady(null,null);
    mEnteringNames=mEnterTransitionCoordinator.getAllSharedElementNames();
  }
  mExitingFrom=null;
  mExitingTo=null;
  mExitingToView=null;
  mEnterActivityOptions=null;
}",0.1029411764705882
193094,"private void triggerViewsReady(final ArrayMap<String,View> sharedElements){
  if (mAreViewsReady) {
    return;
  }
  mAreViewsReady=true;
  final ViewGroup decor=getDecor();
  if (decor == null || (decor.isAttachedToWindow() && (sharedElements.isEmpty() || !sharedElements.valueAt(0).isLayoutRequested()))) {
    viewsReady(sharedElements);
  }
 else {
    decor.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        decor.getViewTreeObserver().removeOnPreDrawListener(this);
        viewsReady(sharedElements);
        return true;
      }
    }
);
  }
}","private void triggerViewsReady(final ArrayMap<String,View> sharedElements){
  if (mAreViewsReady) {
    return;
  }
  mAreViewsReady=true;
  final ViewGroup decor=getDecor();
  if (decor == null || (decor.isAttachedToWindow() && (sharedElements.isEmpty() || !sharedElements.valueAt(0).isLayoutRequested()))) {
    viewsReady(sharedElements);
  }
 else {
    mViewsReadyListener=new ViewTreeObserver.OnPreDrawListener(){
      @Override public boolean onPreDraw(){
        mViewsReadyListener=null;
        decor.getViewTreeObserver().removeOnPreDrawListener(this);
        viewsReady(sharedElements);
        return true;
      }
    }
;
    decor.getViewTreeObserver().addOnPreDrawListener(mViewsReadyListener);
  }
}",0.7089167280766396
193095,"private boolean transferStartingWindow(IBinder transferFrom,AppWindowToken wtoken){
  if (transferFrom == null) {
    return false;
  }
  AppWindowToken ttoken=findAppWindowToken(transferFrom);
  if (ttoken == null) {
    return false;
  }
  WindowState startingWindow=ttoken.startingWindow;
  if (startingWindow != null) {
    mSkipAppTransitionAnimation=true;
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
    final long origId=Binder.clearCallingIdentity();
    wtoken.startingData=ttoken.startingData;
    wtoken.startingView=ttoken.startingView;
    wtoken.startingDisplayed=ttoken.startingDisplayed;
    ttoken.startingDisplayed=false;
    wtoken.startingWindow=startingWindow;
    wtoken.reportedVisible=ttoken.reportedVisible;
    ttoken.startingData=null;
    ttoken.startingView=null;
    ttoken.startingWindow=null;
    ttoken.startingMoved=true;
    startingWindow.mToken=wtoken;
    startingWindow.mRootToken=wtoken;
    startingWindow.mAppToken=wtoken;
    if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
      Slog.v(TAG_WM,""String_Node_Str"" + startingWindow);
    }
    startingWindow.getWindowList().remove(startingWindow);
    mWindowsChanged=true;
    if (DEBUG_ADD_REMOVE)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
    ttoken.windows.remove(startingWindow);
    ttoken.allAppWindows.remove(startingWindow);
    addWindowToListInOrderLocked(startingWindow,true);
    if (ttoken.allDrawn) {
      wtoken.allDrawn=true;
      wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
    }
    if (ttoken.firstWindowDrawn) {
      wtoken.firstWindowDrawn=true;
    }
    if (!ttoken.hidden) {
      wtoken.hidden=false;
      wtoken.hiddenRequested=false;
    }
    if (wtoken.clientHidden != ttoken.clientHidden) {
      wtoken.clientHidden=ttoken.clientHidden;
      wtoken.sendAppVisibilityToClients();
    }
    ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
    getDefaultDisplayContentLocked().layoutNeeded=true;
    mWindowPlacerLocked.performSurfacePlacement();
    Binder.restoreCallingIdentity(origId);
    return true;
  }
 else   if (ttoken.startingData != null) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
    wtoken.startingData=ttoken.startingData;
    ttoken.startingData=null;
    ttoken.startingMoved=true;
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    mH.sendMessageAtFrontOfQueue(m);
    return true;
  }
  final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
  final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
  if (tAppAnimator.thumbnail != null) {
    if (wAppAnimator.thumbnail != null) {
      wAppAnimator.thumbnail.destroy();
    }
    wAppAnimator.thumbnail=tAppAnimator.thumbnail;
    wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
    wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
    wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
    wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
    tAppAnimator.thumbnail=null;
  }
  return false;
}","private boolean transferStartingWindow(IBinder transferFrom,AppWindowToken wtoken){
  if (transferFrom == null) {
    return false;
  }
  AppWindowToken ttoken=findAppWindowToken(transferFrom);
  if (ttoken == null) {
    return false;
  }
  WindowState startingWindow=ttoken.startingWindow;
  if (startingWindow != null && ttoken.startingView != null) {
    mSkipAppTransitionAnimation=true;
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
    final long origId=Binder.clearCallingIdentity();
    wtoken.startingData=ttoken.startingData;
    wtoken.startingView=ttoken.startingView;
    wtoken.startingDisplayed=ttoken.startingDisplayed;
    ttoken.startingDisplayed=false;
    wtoken.startingWindow=startingWindow;
    wtoken.reportedVisible=ttoken.reportedVisible;
    ttoken.startingData=null;
    ttoken.startingView=null;
    ttoken.startingWindow=null;
    ttoken.startingMoved=true;
    startingWindow.mToken=wtoken;
    startingWindow.mRootToken=wtoken;
    startingWindow.mAppToken=wtoken;
    if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
      Slog.v(TAG_WM,""String_Node_Str"" + startingWindow);
    }
    startingWindow.getWindowList().remove(startingWindow);
    mWindowsChanged=true;
    if (DEBUG_ADD_REMOVE)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
    ttoken.windows.remove(startingWindow);
    ttoken.allAppWindows.remove(startingWindow);
    addWindowToListInOrderLocked(startingWindow,true);
    if (ttoken.allDrawn) {
      wtoken.allDrawn=true;
      wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
    }
    if (ttoken.firstWindowDrawn) {
      wtoken.firstWindowDrawn=true;
    }
    if (!ttoken.hidden) {
      wtoken.hidden=false;
      wtoken.hiddenRequested=false;
    }
    if (wtoken.clientHidden != ttoken.clientHidden) {
      wtoken.clientHidden=ttoken.clientHidden;
      wtoken.sendAppVisibilityToClients();
    }
    ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
    getDefaultDisplayContentLocked().layoutNeeded=true;
    mWindowPlacerLocked.performSurfacePlacement();
    Binder.restoreCallingIdentity(origId);
    return true;
  }
 else   if (ttoken.startingData != null) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
    wtoken.startingData=ttoken.startingData;
    ttoken.startingData=null;
    ttoken.startingMoved=true;
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    mH.sendMessageAtFrontOfQueue(m);
    return true;
  }
  final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
  final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
  if (tAppAnimator.thumbnail != null) {
    if (wAppAnimator.thumbnail != null) {
      wAppAnimator.thumbnail.destroy();
    }
    wAppAnimator.thumbnail=tAppAnimator.thumbnail;
    wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
    wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
    wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
    wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
    tAppAnimator.thumbnail=null;
  }
  return false;
}",0.9953008943459148
193096,"@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}","@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null && ttoken.startingView != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}",0.9974052063279484
193097,"@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}","@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null && ttoken.startingView != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}",0.9974052063279484
193098,"private boolean transferStartingWindow(IBinder transferFrom,AppWindowToken wtoken){
  if (transferFrom == null) {
    return false;
  }
  AppWindowToken ttoken=findAppWindowToken(transferFrom);
  if (ttoken == null) {
    return false;
  }
  WindowState startingWindow=ttoken.startingWindow;
  if (startingWindow != null) {
    mSkipAppTransitionAnimation=true;
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
    final long origId=Binder.clearCallingIdentity();
    wtoken.startingData=ttoken.startingData;
    wtoken.startingView=ttoken.startingView;
    wtoken.startingDisplayed=ttoken.startingDisplayed;
    ttoken.startingDisplayed=false;
    wtoken.startingWindow=startingWindow;
    wtoken.reportedVisible=ttoken.reportedVisible;
    ttoken.startingData=null;
    ttoken.startingView=null;
    ttoken.startingWindow=null;
    ttoken.startingMoved=true;
    startingWindow.mToken=wtoken;
    startingWindow.mRootToken=wtoken;
    startingWindow.mAppToken=wtoken;
    if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
      Slog.v(TAG_WM,""String_Node_Str"" + startingWindow);
    }
    startingWindow.getWindowList().remove(startingWindow);
    mWindowsChanged=true;
    if (DEBUG_ADD_REMOVE)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
    ttoken.windows.remove(startingWindow);
    ttoken.allAppWindows.remove(startingWindow);
    addWindowToListInOrderLocked(startingWindow,true);
    if (ttoken.allDrawn) {
      wtoken.allDrawn=true;
      wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
    }
    if (ttoken.firstWindowDrawn) {
      wtoken.firstWindowDrawn=true;
    }
    if (!ttoken.hidden) {
      wtoken.hidden=false;
      wtoken.hiddenRequested=false;
    }
    if (wtoken.clientHidden != ttoken.clientHidden) {
      wtoken.clientHidden=ttoken.clientHidden;
      wtoken.sendAppVisibilityToClients();
    }
    ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
    getDefaultDisplayContentLocked().layoutNeeded=true;
    mWindowPlacerLocked.performSurfacePlacement();
    Binder.restoreCallingIdentity(origId);
    return true;
  }
 else   if (ttoken.startingData != null) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
    wtoken.startingData=ttoken.startingData;
    ttoken.startingData=null;
    ttoken.startingMoved=true;
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    mH.sendMessageAtFrontOfQueue(m);
    return true;
  }
  final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
  final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
  if (tAppAnimator.thumbnail != null) {
    if (wAppAnimator.thumbnail != null) {
      wAppAnimator.thumbnail.destroy();
    }
    wAppAnimator.thumbnail=tAppAnimator.thumbnail;
    wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
    wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
    wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
    wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
    tAppAnimator.thumbnail=null;
  }
  return false;
}","private boolean transferStartingWindow(IBinder transferFrom,AppWindowToken wtoken){
  if (transferFrom == null) {
    return false;
  }
  AppWindowToken ttoken=findAppWindowToken(transferFrom);
  if (ttoken == null) {
    return false;
  }
  WindowState startingWindow=ttoken.startingWindow;
  if (startingWindow != null && ttoken.startingView != null) {
    mSkipAppTransitionAnimation=true;
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
    final long origId=Binder.clearCallingIdentity();
    wtoken.startingData=ttoken.startingData;
    wtoken.startingView=ttoken.startingView;
    wtoken.startingDisplayed=ttoken.startingDisplayed;
    ttoken.startingDisplayed=false;
    wtoken.startingWindow=startingWindow;
    wtoken.reportedVisible=ttoken.reportedVisible;
    ttoken.startingData=null;
    ttoken.startingView=null;
    ttoken.startingWindow=null;
    ttoken.startingMoved=true;
    startingWindow.mToken=wtoken;
    startingWindow.mRootToken=wtoken;
    startingWindow.mAppToken=wtoken;
    if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
      Slog.v(TAG_WM,""String_Node_Str"" + startingWindow);
    }
    startingWindow.getWindowList().remove(startingWindow);
    mWindowsChanged=true;
    if (DEBUG_ADD_REMOVE)     Slog.v(TAG_WM,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
    ttoken.windows.remove(startingWindow);
    ttoken.allAppWindows.remove(startingWindow);
    addWindowToListInOrderLocked(startingWindow,true);
    if (ttoken.allDrawn) {
      wtoken.allDrawn=true;
      wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
    }
    if (ttoken.firstWindowDrawn) {
      wtoken.firstWindowDrawn=true;
    }
    if (!ttoken.hidden) {
      wtoken.hidden=false;
      wtoken.hiddenRequested=false;
    }
    if (wtoken.clientHidden != ttoken.clientHidden) {
      wtoken.clientHidden=ttoken.clientHidden;
      wtoken.sendAppVisibilityToClients();
    }
    ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
    updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
    getDefaultDisplayContentLocked().layoutNeeded=true;
    mWindowPlacerLocked.performSurfacePlacement();
    Binder.restoreCallingIdentity(origId);
    return true;
  }
 else   if (ttoken.startingData != null) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG_WM,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
    wtoken.startingData=ttoken.startingData;
    ttoken.startingData=null;
    ttoken.startingMoved=true;
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    mH.sendMessageAtFrontOfQueue(m);
    return true;
  }
  final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
  final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
  if (tAppAnimator.thumbnail != null) {
    if (wAppAnimator.thumbnail != null) {
      wAppAnimator.thumbnail.destroy();
    }
    wAppAnimator.thumbnail=tAppAnimator.thumbnail;
    wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
    wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
    wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
    wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
    tAppAnimator.thumbnail=null;
  }
  return false;
}",0.9953008943459148
193099,"/** 
 * Dismisses Recents directly to Home without checking whether it is currently visible.
 */
void dismissRecentsToHome(boolean animated){
  if (animated) {
    ReferenceCountedTrigger exitTrigger=new ReferenceCountedTrigger(null,mFinishLaunchHomeRunnable,null);
    mRecentsView.startExitToHomeAnimation(new ViewAnimation.TaskViewExitContext(exitTrigger));
  }
 else {
    mFinishLaunchHomeRunnable.run();
  }
}","/** 
 * Dismisses Recents directly to Home without checking whether it is currently visible.
 */
void dismissRecentsToHome(boolean animated){
  if (animated) {
    ReferenceCountedTrigger exitTrigger=new ReferenceCountedTrigger();
    exitTrigger.increment();
    exitTrigger.addLastDecrementRunnable(mFinishLaunchHomeRunnable);
    exitTrigger.addLastDecrementRunnable(new Runnable(){
      @Override public void run(){
        Recents.getSystemServices().sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_HOME_KEY);
      }
    }
);
    mRecentsView.startExitToHomeAnimation(new ViewAnimation.TaskViewExitContext(exitTrigger));
    exitTrigger.decrement();
  }
 else {
    mFinishLaunchHomeRunnable.run();
    Recents.getSystemServices().sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_HOME_KEY);
  }
}",0.6548100242522231
193100,"/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mAppWidgetHost=new RecentsAppWidgetHost(this,RecentsAppWidgetHost.HOST_ID);
  }
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mHistoryViewStub=(ViewStub)findViewById(R.id.history_view_stub);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mSearchWidgetInfo=ssp.getOrBindSearchAppWidget(this,mAppWidgetHost);
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  }
  registerReceiver(mSystemBroadcastReceiver,filter);
}","/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mAppWidgetHost=new RecentsAppWidgetHost(this,RecentsAppWidgetHost.HOST_ID);
  }
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mHistoryViewStub=(ViewStub)findViewById(R.id.history_view_stub);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mSearchWidgetInfo=ssp.getOrBindSearchAppWidget(this,mAppWidgetHost);
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  }
  registerReceiver(mSystemBroadcastReceiver,filter);
}",0.9948305571510626
193101,"@Override protected void onDestroy(){
  super.onDestroy();
  if (mFinishedOnStartup) {
    return;
  }
  unregisterReceiver(mSystemBroadcastReceiver);
  mPackageMonitor.unregister();
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mAppWidgetHost.stopListening();
  }
  EventBus.getDefault().unregister(this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mFinishedOnStartup) {
    return;
  }
  unregisterReceiver(mSystemBroadcastReceiver);
  mPackageMonitor.unregister();
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mAppWidgetHost.stopListening();
  }
  EventBus.getDefault().unregister(this);
}",0.9905362776025236
193102,"@Override public void toggleRecents(){
  if (mFastAltTabTrigger.isDozing()) {
    return;
  }
  mDraggingInRecents=false;
  mTriggeredFromAltTab=false;
  try {
    SystemServicesProxy ssp=Recents.getSystemServices();
    ActivityManager.RunningTaskInfo topTask=ssp.getTopMostTask();
    MutableBoolean isTopTaskHome=new MutableBoolean(true);
    if (topTask != null && ssp.isRecentsTopMost(topTask,isTopTaskHome)) {
      RecentsConfiguration config=Recents.getConfiguration();
      RecentsActivityLaunchState launchState=config.getLaunchState();
      RecentsDebugFlags flags=Recents.getDebugFlags();
      if (!launchState.launchedWithAltTab) {
        EventBus.getDefault().post(new IterateRecentsEvent());
      }
 else {
        if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
          return;
        }
        EventBus.getDefault().post(new ToggleRecentsEvent());
        mLastToggleTime=SystemClock.elapsedRealtime();
      }
      return;
    }
 else {
      if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
        return;
      }
      startRecentsActivity(topTask,isTopTaskHome.value,true);
      mLastToggleTime=SystemClock.elapsedRealtime();
    }
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void toggleRecents(){
  if (mFastAltTabTrigger.isDozing()) {
    return;
  }
  mDraggingInRecents=false;
  mTriggeredFromAltTab=false;
  try {
    SystemServicesProxy ssp=Recents.getSystemServices();
    ActivityManager.RunningTaskInfo topTask=ssp.getTopMostTask();
    MutableBoolean isTopTaskHome=new MutableBoolean(true);
    if (topTask != null && ssp.isRecentsTopMost(topTask,isTopTaskHome)) {
      RecentsConfiguration config=Recents.getConfiguration();
      RecentsActivityLaunchState launchState=config.getLaunchState();
      RecentsDebugFlags flags=Recents.getDebugFlags();
      if (!launchState.launchedWithAltTab) {
        EventBus.getDefault().post(new IterateRecentsEvent());
      }
 else {
        if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
          return;
        }
        EventBus.getDefault().post(new ToggleRecentsEvent());
        mLastToggleTime=SystemClock.elapsedRealtime();
      }
      return;
    }
 else {
      if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
        return;
      }
      startRecentsActivity(topTask,isTopTaskHome.value,true);
      ssp.sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_RECENT_APPS);
      mLastToggleTime=SystemClock.elapsedRealtime();
    }
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.9696745562130178
193103,"/** 
 * Prepares the header bar layout for the next transition, if the task view bounds has changed since the last call, it will attempt to re-measure and layout the header bar to the new size.
 * @param tryAndBindSearchWidget if set, will attempt to fetch and bind the search widget if oneis not already bound (can be expensive)
 * @param stack the stack to initialize the stack layout with
 */
private void reloadHeaderBarLayout(boolean tryAndBindSearchWidget,TaskStack stack){
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Rect windowRect=ssp.getWindowRect();
  config.update(windowRect);
  if (!RecentsDebugFlags.Static.DisableSearchBar && tryAndBindSearchWidget) {
    if (ssp.getOrBindSearchAppWidget(mContext,mAppWidgetHost) != null) {
      config.getSearchBarBounds(windowRect,mStatusBarHeight,mSearchBarBounds);
    }
  }
  Rect systemInsets=new Rect(0,mStatusBarHeight,(config.hasTransposedNavBar ? mNavBarWidth : 0),(config.hasTransposedNavBar ? 0 : mNavBarHeight));
  config.getTaskStackBounds(windowRect,systemInsets.top,systemInsets.right,mSearchBarBounds,mTaskStackBounds);
  TaskStackLayoutAlgorithm algo=mDummyStackView.getStackAlgorithm();
  Rect taskStackBounds=new Rect(mTaskStackBounds);
  algo.setSystemInsets(systemInsets);
  if (stack != null) {
    algo.initialize(taskStackBounds,TaskStackLayoutAlgorithm.StackState.getStackStateForStack(stack));
  }
  Rect taskViewBounds=algo.getUntransformedTaskViewBounds();
  if (!taskViewBounds.equals(mLastTaskViewBounds)) {
    mLastTaskViewBounds.set(taskViewBounds);
    int taskViewWidth=taskViewBounds.width();
synchronized (mHeaderBarLock) {
      mHeaderBar.measure(View.MeasureSpec.makeMeasureSpec(taskViewWidth,View.MeasureSpec.EXACTLY),View.MeasureSpec.makeMeasureSpec(mTaskBarHeight,View.MeasureSpec.EXACTLY));
      mHeaderBar.layout(0,0,taskViewWidth,mTaskBarHeight);
    }
  }
}","/** 
 * Prepares the header bar layout for the next transition, if the task view bounds has changed since the last call, it will attempt to re-measure and layout the header bar to the new size.
 * @param tryAndBindSearchWidget if set, will attempt to fetch and bind the search widget if oneis not already bound (can be expensive)
 * @param stack the stack to initialize the stack layout with
 */
private void reloadHeaderBarLayout(boolean tryAndBindSearchWidget,TaskStack stack){
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Rect windowRect=ssp.getWindowRect();
  config.update(windowRect);
  if (RecentsDebugFlags.Static.EnableSearchBar && tryAndBindSearchWidget) {
    if (ssp.getOrBindSearchAppWidget(mContext,mAppWidgetHost) != null) {
      config.getSearchBarBounds(windowRect,mStatusBarHeight,mSearchBarBounds);
    }
  }
  Rect systemInsets=new Rect(0,mStatusBarHeight,(config.hasTransposedNavBar ? mNavBarWidth : 0),(config.hasTransposedNavBar ? 0 : mNavBarHeight));
  config.getTaskStackBounds(windowRect,systemInsets.top,systemInsets.right,mSearchBarBounds,mTaskStackBounds);
  TaskStackLayoutAlgorithm algo=mDummyStackView.getStackAlgorithm();
  Rect taskStackBounds=new Rect(mTaskStackBounds);
  algo.setSystemInsets(systemInsets);
  if (stack != null) {
    algo.initialize(taskStackBounds,TaskStackLayoutAlgorithm.StackState.getStackStateForStack(stack));
  }
  Rect taskViewBounds=algo.getUntransformedTaskViewBounds();
  if (!taskViewBounds.equals(mLastTaskViewBounds)) {
    mLastTaskViewBounds.set(taskViewBounds);
    int taskViewWidth=taskViewBounds.width();
synchronized (mHeaderBarLock) {
      mHeaderBar.measure(View.MeasureSpec.makeMeasureSpec(taskViewWidth,View.MeasureSpec.EXACTLY),View.MeasureSpec.makeMeasureSpec(mTaskBarHeight,View.MeasureSpec.EXACTLY));
      mHeaderBar.layout(0,0,taskViewWidth,mTaskBarHeight);
    }
  }
}",0.9984431759211208
193104,"/** 
 * Returns the package name of the home activity. 
 */
public String getHomeActivityPackageName(){
  if (mPm == null)   return null;
  if (RecentsDebugFlags.Static.EnableSystemServicesProxy)   return null;
  ArrayList<ResolveInfo> homeActivities=new ArrayList<ResolveInfo>();
  ComponentName defaultHomeActivity=mPm.getHomeActivities(homeActivities);
  if (defaultHomeActivity != null) {
    return defaultHomeActivity.getPackageName();
  }
 else   if (homeActivities.size() == 1) {
    ResolveInfo info=homeActivities.get(0);
    if (info.activityInfo != null) {
      return info.activityInfo.packageName;
    }
  }
  return null;
}","/** 
 * Returns the package name of the home activity. 
 */
public String getHomeActivityPackageName(){
  if (mPm == null)   return null;
  if (RecentsDebugFlags.Static.EnableSystemServicesProxy)   return null;
  ArrayList<ResolveInfo> homeActivities=new ArrayList<>();
  ComponentName defaultHomeActivity=mPm.getHomeActivities(homeActivities);
  if (defaultHomeActivity != null) {
    return defaultHomeActivity.getPackageName();
  }
 else   if (homeActivities.size() == 1) {
    ResolveInfo info=homeActivities.get(0);
    if (info.activityInfo != null) {
      return info.activityInfo.packageName;
    }
  }
  return null;
}",0.4609313338595106
193105,"/** 
 * Returns the first Recents widget from the same package as the global assist activity.
 */
private AppWidgetProviderInfo resolveSearchAppWidget(){
  if (mAssistComponent == null)   return null;
  List<AppWidgetProviderInfo> widgets=mAwm.getInstalledProviders(AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX);
  for (  AppWidgetProviderInfo info : widgets) {
    if (info.provider.getPackageName().equals(mAssistComponent.getPackageName())) {
      return info;
    }
  }
  return null;
}","/** 
 * Returns the first Recents widget from the same package as the global assist activity.
 */
public AppWidgetProviderInfo resolveSearchAppWidget(){
  if (mAssistComponent == null)   return null;
  List<AppWidgetProviderInfo> widgets=mAwm.getInstalledProviders(AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX);
  for (  AppWidgetProviderInfo info : widgets) {
    if (info.provider.getPackageName().equals(mAssistComponent.getPackageName())) {
      return info;
    }
  }
  return null;
}",0.9888551165146908
193106,"/** 
 * Shows the task stack and hides the empty view.
 */
public void hideEmptyView(){
  mEmptyView.setVisibility(View.INVISIBLE);
  mTaskStackView.setVisibility(View.VISIBLE);
  if (!RecentsDebugFlags.Static.DisableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.VISIBLE);
  }
  mTaskStackView.bringToFront();
  if (mSearchBar != null) {
    mSearchBar.bringToFront();
  }
  mHistoryButton.bringToFront();
}","/** 
 * Shows the task stack and hides the empty view.
 */
public void hideEmptyView(){
  mEmptyView.setVisibility(View.INVISIBLE);
  mTaskStackView.setVisibility(View.VISIBLE);
  if (RecentsDebugFlags.Static.EnableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.VISIBLE);
  }
  mTaskStackView.bringToFront();
  if (mSearchBar != null) {
    mSearchBar.bringToFront();
  }
  mHistoryButton.bringToFront();
}",0.9930394431554525
193107,"/** 
 * Hides the task stack and shows the empty view.
 */
public void showEmptyView(){
  if (!RecentsDebugFlags.Static.DisableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.INVISIBLE);
  }
  mTaskStackView.setVisibility(View.INVISIBLE);
  mEmptyView.setVisibility(View.VISIBLE);
  mEmptyView.bringToFront();
  mHistoryButton.bringToFront();
}","/** 
 * Hides the task stack and shows the empty view.
 */
public void showEmptyView(){
  if (RecentsDebugFlags.Static.EnableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.INVISIBLE);
  }
  mTaskStackView.setVisibility(View.INVISIBLE);
  mEmptyView.setVisibility(View.VISIBLE);
  mEmptyView.bringToFront();
  mHistoryButton.bringToFront();
}",0.9918032786885246
193108,"/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds,StackState state){
  RecentsDebugFlags debugFlags=Recents.getDebugFlags();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  Rect lastStackRect=new Rect(mStackRect);
  mState=state;
  mStackTopOffset=mFocusedPeekHeight + heightPadding;
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  state.computeRects(mFreeformRect,mStackRect,taskStackBounds,widthPadding,heightPadding,mStackBottomOffset);
  mHistoryButtonRect.set(mStackRect.left,mStackRect.top - heightPadding,mStackRect.right,mStackRect.top + mFocusedPeekHeight);
  float aspect=(float)(taskStackBounds.width() - mSystemInsets.left - mSystemInsets.right) / (taskStackBounds.height() - mSystemInsets.bottom);
  int width=mStackRect.width();
  int minHeight=mStackRect.height() - mFocusedPeekHeight - mStackBottomOffset;
  int height=(int)Math.min(width / aspect,minHeight);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + width,mStackRect.top + height);
  if (lastStackRect.equals(mStackRect)) {
    return;
  }
  mUnfocusedCurve=constructUnfocusedCurve();
  mUnfocusedCurveInterpolator=new FreePathInterpolator(mUnfocusedCurve);
  mFocusedCurve=constructFocusedCurve();
  mFocusedCurveInterpolator=new FreePathInterpolator(mFocusedCurve);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
  }
}","/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds,StackState state){
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  Rect lastStackRect=new Rect(mStackRect);
  mState=state;
  mStackTopOffset=mFocusedPeekHeight + heightPadding;
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  state.computeRects(mFreeformRect,mStackRect,taskStackBounds,widthPadding,heightPadding,mStackBottomOffset);
  mHistoryButtonRect.set(mStackRect.left,mStackRect.top - heightPadding,mStackRect.right,mStackRect.top + mFocusedPeekHeight);
  float aspect=(float)(taskStackBounds.width() - mSystemInsets.left - mSystemInsets.right) / (taskStackBounds.height() - mSystemInsets.bottom);
  int width=mStackRect.width();
  int minHeight=mStackRect.height() - mFocusedPeekHeight - mStackBottomOffset;
  int height=(int)Math.min(width / aspect,minHeight);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + width,mStackRect.top + height);
  if (lastStackRect.equals(mStackRect)) {
    return;
  }
  mUnfocusedCurve=constructUnfocusedCurve();
  mUnfocusedCurveInterpolator=new FreePathInterpolator(mUnfocusedCurve);
  mFocusedCurve=constructFocusedCurve();
  mFocusedCurveInterpolator=new FreePathInterpolator(mFocusedCurve);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
  }
}",0.9845303867403314
193109,"protected void toggleRecents(){
  if (mRecents != null) {
    sendCloseSystemWindows(mContext,SYSTEM_DIALOG_REASON_RECENT_APPS);
    mRecents.toggleRecents(mDisplay,mLayoutDirection,getStatusBarView());
  }
}","protected void toggleRecents(){
  if (mRecents != null) {
    mRecents.toggleRecents(mDisplay,mLayoutDirection,getStatusBarView());
  }
}",0.7942028985507247
193110,"/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(final boolean awakenFromDreams,final boolean respectKeyguard){
  if (respectKeyguard) {
    if (isKeyguardShowingAndNotOccluded()) {
      return;
    }
    if (!mHideLockScreen && mKeyguardDelegate.isInputRestricted()) {
      mKeyguardDelegate.verifyUnlock(new OnKeyguardExitResult(){
        @Override public void onKeyguardExitResult(        boolean success){
          if (success) {
            try {
              ActivityManagerNative.getDefault().stopAppSwitches();
            }
 catch (            RemoteException e) {
            }
            sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
            startDockOrHome(true,awakenFromDreams);
          }
        }
      }
);
      return;
    }
  }
  try {
    ActivityManagerNative.getDefault().stopAppSwitches();
  }
 catch (  RemoteException e) {
  }
  if (mRecentsVisible) {
    if (awakenFromDreams) {
      awakenDreams();
    }
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    hideRecentApps(false,true);
  }
 else {
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    startDockOrHome(true,awakenFromDreams);
  }
}","/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(final boolean awakenFromDreams,final boolean respectKeyguard){
  if (respectKeyguard) {
    if (isKeyguardShowingAndNotOccluded()) {
      return;
    }
    if (!mHideLockScreen && mKeyguardDelegate.isInputRestricted()) {
      mKeyguardDelegate.verifyUnlock(new OnKeyguardExitResult(){
        @Override public void onKeyguardExitResult(        boolean success){
          if (success) {
            try {
              ActivityManagerNative.getDefault().stopAppSwitches();
            }
 catch (            RemoteException e) {
            }
            sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
            startDockOrHome(true,awakenFromDreams);
          }
        }
      }
);
      return;
    }
  }
  try {
    ActivityManagerNative.getDefault().stopAppSwitches();
  }
 catch (  RemoteException e) {
  }
  if (mRecentsVisible) {
    if (awakenFromDreams) {
      awakenDreams();
    }
    hideRecentApps(false,true);
  }
 else {
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    startDockOrHome(true,awakenFromDreams);
  }
}",0.9407496977025392
193111,"/** 
 * Dismisses Recents directly to Home without checking whether it is currently visible.
 */
void dismissRecentsToHome(boolean animated){
  if (animated) {
    ReferenceCountedTrigger exitTrigger=new ReferenceCountedTrigger(null,mFinishLaunchHomeRunnable,null);
    mRecentsView.startExitToHomeAnimation(new ViewAnimation.TaskViewExitContext(exitTrigger));
  }
 else {
    mFinishLaunchHomeRunnable.run();
  }
}","/** 
 * Dismisses Recents directly to Home without checking whether it is currently visible.
 */
void dismissRecentsToHome(boolean animated){
  if (animated) {
    ReferenceCountedTrigger exitTrigger=new ReferenceCountedTrigger();
    exitTrigger.increment();
    exitTrigger.addLastDecrementRunnable(mFinishLaunchHomeRunnable);
    exitTrigger.addLastDecrementRunnable(new Runnable(){
      @Override public void run(){
        Recents.getSystemServices().sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_HOME_KEY);
      }
    }
);
    mRecentsView.startExitToHomeAnimation(new ViewAnimation.TaskViewExitContext(exitTrigger));
    exitTrigger.decrement();
  }
 else {
    mFinishLaunchHomeRunnable.run();
    Recents.getSystemServices().sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_HOME_KEY);
  }
}",0.6548100242522231
193112,"/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mAppWidgetHost=new RecentsAppWidgetHost(this,RecentsAppWidgetHost.HOST_ID);
  }
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mHistoryViewStub=(ViewStub)findViewById(R.id.history_view_stub);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mSearchWidgetInfo=ssp.getOrBindSearchAppWidget(this,mAppWidgetHost);
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  }
  registerReceiver(mSystemBroadcastReceiver,filter);
}","/** 
 * Called with the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mFinishedOnStartup=false;
  SystemServicesProxy ssp=Recents.getSystemServices();
  if (ssp == null) {
    mFinishedOnStartup=true;
    finish();
    return;
  }
  EventBus.getDefault().register(this,EVENT_BUS_PRIORITY);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mAppWidgetHost=new RecentsAppWidgetHost(this,RecentsAppWidgetHost.HOST_ID);
  }
  mPackageMonitor=new RecentsPackageMonitor();
  mPackageMonitor.register(this);
  setContentView(R.layout.recents);
  mRecentsView=(RecentsView)findViewById(R.id.recents_view);
  mRecentsView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION);
  mHistoryViewStub=(ViewStub)findViewById(R.id.history_view_stub);
  mScrimViews=new SystemBarScrimViews(this);
  getWindow().getAttributes().privateFlags|=WindowManager.LayoutParams.PRIVATE_FLAG_FORCE_DECOR_VIEW_VISIBILITY;
  Intent homeIntent=new Intent(Intent.ACTION_MAIN,null);
  homeIntent.addCategory(Intent.CATEGORY_HOME);
  homeIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
  mFinishLaunchHomeRunnable=new FinishRecentsRunnable(homeIntent);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mSearchWidgetInfo=ssp.getOrBindSearchAppWidget(this,mAppWidgetHost);
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    filter.addAction(SearchManager.INTENT_GLOBAL_SEARCH_ACTIVITY_CHANGED);
  }
  registerReceiver(mSystemBroadcastReceiver,filter);
}",0.9948305571510626
193113,"@Override protected void onDestroy(){
  super.onDestroy();
  if (mFinishedOnStartup) {
    return;
  }
  unregisterReceiver(mSystemBroadcastReceiver);
  mPackageMonitor.unregister();
  if (!RecentsDebugFlags.Static.DisableSearchBar) {
    mAppWidgetHost.stopListening();
  }
  EventBus.getDefault().unregister(this);
}","@Override protected void onDestroy(){
  super.onDestroy();
  if (mFinishedOnStartup) {
    return;
  }
  unregisterReceiver(mSystemBroadcastReceiver);
  mPackageMonitor.unregister();
  if (RecentsDebugFlags.Static.EnableSearchBar) {
    mAppWidgetHost.stopListening();
  }
  EventBus.getDefault().unregister(this);
}",0.9905362776025236
193114,"@Override public void toggleRecents(){
  if (mFastAltTabTrigger.isDozing()) {
    return;
  }
  mDraggingInRecents=false;
  mTriggeredFromAltTab=false;
  try {
    SystemServicesProxy ssp=Recents.getSystemServices();
    ActivityManager.RunningTaskInfo topTask=ssp.getTopMostTask();
    MutableBoolean isTopTaskHome=new MutableBoolean(true);
    if (topTask != null && ssp.isRecentsTopMost(topTask,isTopTaskHome)) {
      RecentsConfiguration config=Recents.getConfiguration();
      RecentsActivityLaunchState launchState=config.getLaunchState();
      RecentsDebugFlags flags=Recents.getDebugFlags();
      if (!launchState.launchedWithAltTab) {
        EventBus.getDefault().post(new IterateRecentsEvent());
      }
 else {
        if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
          return;
        }
        EventBus.getDefault().post(new ToggleRecentsEvent());
        mLastToggleTime=SystemClock.elapsedRealtime();
      }
      return;
    }
 else {
      if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
        return;
      }
      startRecentsActivity(topTask,isTopTaskHome.value,true);
      mLastToggleTime=SystemClock.elapsedRealtime();
    }
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void toggleRecents(){
  if (mFastAltTabTrigger.isDozing()) {
    return;
  }
  mDraggingInRecents=false;
  mTriggeredFromAltTab=false;
  try {
    SystemServicesProxy ssp=Recents.getSystemServices();
    ActivityManager.RunningTaskInfo topTask=ssp.getTopMostTask();
    MutableBoolean isTopTaskHome=new MutableBoolean(true);
    if (topTask != null && ssp.isRecentsTopMost(topTask,isTopTaskHome)) {
      RecentsConfiguration config=Recents.getConfiguration();
      RecentsActivityLaunchState launchState=config.getLaunchState();
      RecentsDebugFlags flags=Recents.getDebugFlags();
      if (!launchState.launchedWithAltTab) {
        EventBus.getDefault().post(new IterateRecentsEvent());
      }
 else {
        if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
          return;
        }
        EventBus.getDefault().post(new ToggleRecentsEvent());
        mLastToggleTime=SystemClock.elapsedRealtime();
      }
      return;
    }
 else {
      if ((SystemClock.elapsedRealtime() - mLastToggleTime) < MIN_TOGGLE_DELAY_MS) {
        return;
      }
      startRecentsActivity(topTask,isTopTaskHome.value,true);
      ssp.sendCloseSystemWindows(BaseStatusBar.SYSTEM_DIALOG_REASON_RECENT_APPS);
      mLastToggleTime=SystemClock.elapsedRealtime();
    }
  }
 catch (  ActivityNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}",0.9696745562130178
193115,"/** 
 * Prepares the header bar layout for the next transition, if the task view bounds has changed since the last call, it will attempt to re-measure and layout the header bar to the new size.
 * @param tryAndBindSearchWidget if set, will attempt to fetch and bind the search widget if oneis not already bound (can be expensive)
 * @param stack the stack to initialize the stack layout with
 */
private void reloadHeaderBarLayout(boolean tryAndBindSearchWidget,TaskStack stack){
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Rect windowRect=ssp.getWindowRect();
  config.update(windowRect);
  if (!RecentsDebugFlags.Static.DisableSearchBar && tryAndBindSearchWidget) {
    if (ssp.getOrBindSearchAppWidget(mContext,mAppWidgetHost) != null) {
      config.getSearchBarBounds(windowRect,mStatusBarHeight,mSearchBarBounds);
    }
  }
  Rect systemInsets=new Rect(0,mStatusBarHeight,(config.hasTransposedNavBar ? mNavBarWidth : 0),(config.hasTransposedNavBar ? 0 : mNavBarHeight));
  config.getTaskStackBounds(windowRect,systemInsets.top,systemInsets.right,mSearchBarBounds,mTaskStackBounds);
  TaskStackLayoutAlgorithm algo=mDummyStackView.getStackAlgorithm();
  Rect taskStackBounds=new Rect(mTaskStackBounds);
  algo.setSystemInsets(systemInsets);
  if (stack != null) {
    algo.initialize(taskStackBounds,TaskStackLayoutAlgorithm.StackState.getStackStateForStack(stack));
  }
  Rect taskViewBounds=algo.getUntransformedTaskViewBounds();
  if (!taskViewBounds.equals(mLastTaskViewBounds)) {
    mLastTaskViewBounds.set(taskViewBounds);
    int taskViewWidth=taskViewBounds.width();
synchronized (mHeaderBarLock) {
      mHeaderBar.measure(View.MeasureSpec.makeMeasureSpec(taskViewWidth,View.MeasureSpec.EXACTLY),View.MeasureSpec.makeMeasureSpec(mTaskBarHeight,View.MeasureSpec.EXACTLY));
      mHeaderBar.layout(0,0,taskViewWidth,mTaskBarHeight);
    }
  }
}","/** 
 * Prepares the header bar layout for the next transition, if the task view bounds has changed since the last call, it will attempt to re-measure and layout the header bar to the new size.
 * @param tryAndBindSearchWidget if set, will attempt to fetch and bind the search widget if oneis not already bound (can be expensive)
 * @param stack the stack to initialize the stack layout with
 */
private void reloadHeaderBarLayout(boolean tryAndBindSearchWidget,TaskStack stack){
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Rect windowRect=ssp.getWindowRect();
  config.update(windowRect);
  if (RecentsDebugFlags.Static.EnableSearchBar && tryAndBindSearchWidget) {
    if (ssp.getOrBindSearchAppWidget(mContext,mAppWidgetHost) != null) {
      config.getSearchBarBounds(windowRect,mStatusBarHeight,mSearchBarBounds);
    }
  }
  Rect systemInsets=new Rect(0,mStatusBarHeight,(config.hasTransposedNavBar ? mNavBarWidth : 0),(config.hasTransposedNavBar ? 0 : mNavBarHeight));
  config.getTaskStackBounds(windowRect,systemInsets.top,systemInsets.right,mSearchBarBounds,mTaskStackBounds);
  TaskStackLayoutAlgorithm algo=mDummyStackView.getStackAlgorithm();
  Rect taskStackBounds=new Rect(mTaskStackBounds);
  algo.setSystemInsets(systemInsets);
  if (stack != null) {
    algo.initialize(taskStackBounds,TaskStackLayoutAlgorithm.StackState.getStackStateForStack(stack));
  }
  Rect taskViewBounds=algo.getUntransformedTaskViewBounds();
  if (!taskViewBounds.equals(mLastTaskViewBounds)) {
    mLastTaskViewBounds.set(taskViewBounds);
    int taskViewWidth=taskViewBounds.width();
synchronized (mHeaderBarLock) {
      mHeaderBar.measure(View.MeasureSpec.makeMeasureSpec(taskViewWidth,View.MeasureSpec.EXACTLY),View.MeasureSpec.makeMeasureSpec(mTaskBarHeight,View.MeasureSpec.EXACTLY));
      mHeaderBar.layout(0,0,taskViewWidth,mTaskBarHeight);
    }
  }
}",0.9984431759211208
193116,"/** 
 * Returns the package name of the home activity. 
 */
public String getHomeActivityPackageName(){
  if (mPm == null)   return null;
  if (RecentsDebugFlags.Static.EnableSystemServicesProxy)   return null;
  ArrayList<ResolveInfo> homeActivities=new ArrayList<ResolveInfo>();
  ComponentName defaultHomeActivity=mPm.getHomeActivities(homeActivities);
  if (defaultHomeActivity != null) {
    return defaultHomeActivity.getPackageName();
  }
 else   if (homeActivities.size() == 1) {
    ResolveInfo info=homeActivities.get(0);
    if (info.activityInfo != null) {
      return info.activityInfo.packageName;
    }
  }
  return null;
}","/** 
 * Returns the package name of the home activity. 
 */
public String getHomeActivityPackageName(){
  if (mPm == null)   return null;
  if (RecentsDebugFlags.Static.EnableSystemServicesProxy)   return null;
  ArrayList<ResolveInfo> homeActivities=new ArrayList<>();
  ComponentName defaultHomeActivity=mPm.getHomeActivities(homeActivities);
  if (defaultHomeActivity != null) {
    return defaultHomeActivity.getPackageName();
  }
 else   if (homeActivities.size() == 1) {
    ResolveInfo info=homeActivities.get(0);
    if (info.activityInfo != null) {
      return info.activityInfo.packageName;
    }
  }
  return null;
}",0.4609313338595106
193117,"/** 
 * Returns the first Recents widget from the same package as the global assist activity.
 */
private AppWidgetProviderInfo resolveSearchAppWidget(){
  if (mAssistComponent == null)   return null;
  List<AppWidgetProviderInfo> widgets=mAwm.getInstalledProviders(AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX);
  for (  AppWidgetProviderInfo info : widgets) {
    if (info.provider.getPackageName().equals(mAssistComponent.getPackageName())) {
      return info;
    }
  }
  return null;
}","/** 
 * Returns the first Recents widget from the same package as the global assist activity.
 */
public AppWidgetProviderInfo resolveSearchAppWidget(){
  if (mAssistComponent == null)   return null;
  List<AppWidgetProviderInfo> widgets=mAwm.getInstalledProviders(AppWidgetProviderInfo.WIDGET_CATEGORY_SEARCHBOX);
  for (  AppWidgetProviderInfo info : widgets) {
    if (info.provider.getPackageName().equals(mAssistComponent.getPackageName())) {
      return info;
    }
  }
  return null;
}",0.9888551165146908
193118,"/** 
 * Shows the task stack and hides the empty view.
 */
public void hideEmptyView(){
  mEmptyView.setVisibility(View.INVISIBLE);
  mTaskStackView.setVisibility(View.VISIBLE);
  if (!RecentsDebugFlags.Static.DisableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.VISIBLE);
  }
  mTaskStackView.bringToFront();
  if (mSearchBar != null) {
    mSearchBar.bringToFront();
  }
  mHistoryButton.bringToFront();
}","/** 
 * Shows the task stack and hides the empty view.
 */
public void hideEmptyView(){
  mEmptyView.setVisibility(View.INVISIBLE);
  mTaskStackView.setVisibility(View.VISIBLE);
  if (RecentsDebugFlags.Static.EnableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.VISIBLE);
  }
  mTaskStackView.bringToFront();
  if (mSearchBar != null) {
    mSearchBar.bringToFront();
  }
  mHistoryButton.bringToFront();
}",0.9930394431554525
193119,"/** 
 * Hides the task stack and shows the empty view.
 */
public void showEmptyView(){
  if (!RecentsDebugFlags.Static.DisableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.INVISIBLE);
  }
  mTaskStackView.setVisibility(View.INVISIBLE);
  mEmptyView.setVisibility(View.VISIBLE);
  mEmptyView.bringToFront();
  mHistoryButton.bringToFront();
}","/** 
 * Hides the task stack and shows the empty view.
 */
public void showEmptyView(){
  if (RecentsDebugFlags.Static.EnableSearchBar && (mSearchBar != null)) {
    mSearchBar.setVisibility(View.INVISIBLE);
  }
  mTaskStackView.setVisibility(View.INVISIBLE);
  mEmptyView.setVisibility(View.VISIBLE);
  mEmptyView.bringToFront();
  mHistoryButton.bringToFront();
}",0.9918032786885246
193120,"/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds,StackState state){
  RecentsDebugFlags debugFlags=Recents.getDebugFlags();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  Rect lastStackRect=new Rect(mStackRect);
  mState=state;
  mStackTopOffset=mFocusedPeekHeight + heightPadding;
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  state.computeRects(mFreeformRect,mStackRect,taskStackBounds,widthPadding,heightPadding,mStackBottomOffset);
  mHistoryButtonRect.set(mStackRect.left,mStackRect.top - heightPadding,mStackRect.right,mStackRect.top + mFocusedPeekHeight);
  float aspect=(float)(taskStackBounds.width() - mSystemInsets.left - mSystemInsets.right) / (taskStackBounds.height() - mSystemInsets.bottom);
  int width=mStackRect.width();
  int minHeight=mStackRect.height() - mFocusedPeekHeight - mStackBottomOffset;
  int height=(int)Math.min(width / aspect,minHeight);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + width,mStackRect.top + height);
  if (lastStackRect.equals(mStackRect)) {
    return;
  }
  mUnfocusedCurve=constructUnfocusedCurve();
  mUnfocusedCurveInterpolator=new FreePathInterpolator(mUnfocusedCurve);
  mFocusedCurve=constructFocusedCurve();
  mFocusedCurveInterpolator=new FreePathInterpolator(mFocusedCurve);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
  }
}","/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds,StackState state){
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  Rect lastStackRect=new Rect(mStackRect);
  mState=state;
  mStackTopOffset=mFocusedPeekHeight + heightPadding;
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  state.computeRects(mFreeformRect,mStackRect,taskStackBounds,widthPadding,heightPadding,mStackBottomOffset);
  mHistoryButtonRect.set(mStackRect.left,mStackRect.top - heightPadding,mStackRect.right,mStackRect.top + mFocusedPeekHeight);
  float aspect=(float)(taskStackBounds.width() - mSystemInsets.left - mSystemInsets.right) / (taskStackBounds.height() - mSystemInsets.bottom);
  int width=mStackRect.width();
  int minHeight=mStackRect.height() - mFocusedPeekHeight - mStackBottomOffset;
  int height=(int)Math.min(width / aspect,minHeight);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + width,mStackRect.top + height);
  if (lastStackRect.equals(mStackRect)) {
    return;
  }
  mUnfocusedCurve=constructUnfocusedCurve();
  mUnfocusedCurveInterpolator=new FreePathInterpolator(mUnfocusedCurve);
  mFocusedCurve=constructFocusedCurve();
  mFocusedCurveInterpolator=new FreePathInterpolator(mFocusedCurve);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
  }
}",0.9845303867403314
193121,"protected void toggleRecents(){
  if (mRecents != null) {
    sendCloseSystemWindows(mContext,SYSTEM_DIALOG_REASON_RECENT_APPS);
    mRecents.toggleRecents(mDisplay,mLayoutDirection,getStatusBarView());
  }
}","protected void toggleRecents(){
  if (mRecents != null) {
    mRecents.toggleRecents(mDisplay,mLayoutDirection,getStatusBarView());
  }
}",0.7942028985507247
193122,"/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(final boolean awakenFromDreams,final boolean respectKeyguard){
  if (respectKeyguard) {
    if (isKeyguardShowingAndNotOccluded()) {
      return;
    }
    if (!mHideLockScreen && mKeyguardDelegate.isInputRestricted()) {
      mKeyguardDelegate.verifyUnlock(new OnKeyguardExitResult(){
        @Override public void onKeyguardExitResult(        boolean success){
          if (success) {
            try {
              ActivityManagerNative.getDefault().stopAppSwitches();
            }
 catch (            RemoteException e) {
            }
            sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
            startDockOrHome(true,awakenFromDreams);
          }
        }
      }
);
      return;
    }
  }
  try {
    ActivityManagerNative.getDefault().stopAppSwitches();
  }
 catch (  RemoteException e) {
  }
  if (mRecentsVisible) {
    if (awakenFromDreams) {
      awakenDreams();
    }
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    hideRecentApps(false,true);
  }
 else {
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    startDockOrHome(true,awakenFromDreams);
  }
}","/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(final boolean awakenFromDreams,final boolean respectKeyguard){
  if (respectKeyguard) {
    if (isKeyguardShowingAndNotOccluded()) {
      return;
    }
    if (!mHideLockScreen && mKeyguardDelegate.isInputRestricted()) {
      mKeyguardDelegate.verifyUnlock(new OnKeyguardExitResult(){
        @Override public void onKeyguardExitResult(        boolean success){
          if (success) {
            try {
              ActivityManagerNative.getDefault().stopAppSwitches();
            }
 catch (            RemoteException e) {
            }
            sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
            startDockOrHome(true,awakenFromDreams);
          }
        }
      }
);
      return;
    }
  }
  try {
    ActivityManagerNative.getDefault().stopAppSwitches();
  }
 catch (  RemoteException e) {
  }
  if (mRecentsVisible) {
    if (awakenFromDreams) {
      awakenDreams();
    }
    hideRecentApps(false,true);
  }
 else {
    sendCloseSystemWindows(SYSTEM_DIALOG_REASON_HOME_KEY);
    startDockOrHome(true,awakenFromDreams);
  }
}",0.9407496977025392
193123,"@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}","@Override public void setAppStartingWindow(IBinder token,String pkg,int theme,CompatibilityInfo compatInfo,CharSequence nonLocalizedLabel,int labelRes,int icon,int logo,int windowFlags,IBinder transferFrom,boolean createIfNeeded){
  if (!checkCallingPermission(android.Manifest.permission.MANAGE_APP_TOKENS,""String_Node_Str"")) {
    throw new SecurityException(""String_Node_Str"");
  }
synchronized (mWindowMap) {
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ pkg+ ""String_Node_Str""+ transferFrom);
    AppWindowToken wtoken=findAppWindowToken(token);
    if (wtoken == null) {
      Slog.w(TAG,""String_Node_Str"" + token);
      return;
    }
    if (!okToDisplay()) {
      return;
    }
    if (wtoken.startingData != null) {
      return;
    }
    if (transferFrom != null) {
      AppWindowToken ttoken=findAppWindowToken(transferFrom);
      if (ttoken != null) {
        WindowState startingWindow=ttoken.startingWindow;
        if (startingWindow != null && ttoken.startingView != null) {
          mSkipAppTransitionAnimation=true;
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken+ ""String_Node_Str""+ wtoken);
          final long origId=Binder.clearCallingIdentity();
          wtoken.startingData=ttoken.startingData;
          wtoken.startingView=ttoken.startingView;
          wtoken.startingDisplayed=ttoken.startingDisplayed;
          ttoken.startingDisplayed=false;
          wtoken.startingWindow=startingWindow;
          wtoken.reportedVisible=ttoken.reportedVisible;
          ttoken.startingData=null;
          ttoken.startingView=null;
          ttoken.startingWindow=null;
          ttoken.startingMoved=true;
          startingWindow.mToken=wtoken;
          startingWindow.mRootToken=wtoken;
          startingWindow.mAppToken=wtoken;
          if (DEBUG_WINDOW_MOVEMENT || DEBUG_ADD_REMOVE || DEBUG_STARTING_WINDOW) {
            Slog.v(TAG,""String_Node_Str"" + startingWindow);
          }
          startingWindow.getWindowList().remove(startingWindow);
          mWindowsChanged=true;
          if (DEBUG_ADD_REMOVE)           Slog.v(TAG,""String_Node_Str"" + startingWindow + ""String_Node_Str""+ ttoken);
          ttoken.windows.remove(startingWindow);
          ttoken.allAppWindows.remove(startingWindow);
          addWindowToListInOrderLocked(startingWindow,true);
          if (ttoken.allDrawn) {
            wtoken.allDrawn=true;
            wtoken.deferClearAllDrawn=ttoken.deferClearAllDrawn;
          }
          if (ttoken.firstWindowDrawn) {
            wtoken.firstWindowDrawn=true;
          }
          if (!ttoken.hidden) {
            wtoken.hidden=false;
            wtoken.hiddenRequested=false;
            wtoken.willBeHidden=false;
          }
          if (wtoken.clientHidden != ttoken.clientHidden) {
            wtoken.clientHidden=ttoken.clientHidden;
            wtoken.sendAppVisibilityToClients();
          }
          ttoken.mAppAnimator.transferCurrentAnimation(wtoken.mAppAnimator,startingWindow.mWinAnimator);
          updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,true);
          getDefaultDisplayContentLocked().layoutNeeded=true;
          performLayoutAndPlaceSurfacesLocked();
          Binder.restoreCallingIdentity(origId);
          return;
        }
 else         if (ttoken.startingData != null) {
          if (DEBUG_STARTING_WINDOW)           Slog.v(TAG,""String_Node_Str"" + ttoken + ""String_Node_Str""+ wtoken);
          wtoken.startingData=ttoken.startingData;
          ttoken.startingData=null;
          ttoken.startingMoved=true;
          Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
          mH.sendMessageAtFrontOfQueue(m);
          return;
        }
        final AppWindowAnimator tAppAnimator=ttoken.mAppAnimator;
        final AppWindowAnimator wAppAnimator=wtoken.mAppAnimator;
        if (tAppAnimator.thumbnail != null) {
          if (wAppAnimator.thumbnail != null) {
            wAppAnimator.thumbnail.destroy();
          }
          wAppAnimator.thumbnail=tAppAnimator.thumbnail;
          wAppAnimator.thumbnailX=tAppAnimator.thumbnailX;
          wAppAnimator.thumbnailY=tAppAnimator.thumbnailY;
          wAppAnimator.thumbnailLayer=tAppAnimator.thumbnailLayer;
          wAppAnimator.thumbnailAnimation=tAppAnimator.thumbnailAnimation;
          tAppAnimator.thumbnail=null;
        }
      }
    }
    if (!createIfNeeded) {
      return;
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"" + Integer.toHexString(theme));
    if (theme != 0) {
      AttributeCache.Entry ent=AttributeCache.instance().get(pkg,theme,com.android.internal.R.styleable.Window,mCurrentUserId);
      if (ent == null) {
        return;
      }
      if (DEBUG_STARTING_WINDOW)       Slog.v(TAG,""String_Node_Str"" + ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) + ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)+ ""String_Node_Str""+ ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false));
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false)) {
        return;
      }
      if (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowShowWallpaper,false)) {
        if (mWallpaperTarget == null) {
          windowFlags|=FLAG_SHOW_WALLPAPER;
        }
 else {
          return;
        }
      }
    }
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    wtoken.startingData=new StartingData(pkg,theme,compatInfo,nonLocalizedLabel,labelRes,icon,logo,windowFlags);
    Message m=mH.obtainMessage(H.ADD_STARTING,wtoken);
    if (DEBUG_STARTING_WINDOW)     Slog.v(TAG,""String_Node_Str"");
    mH.sendMessageAtFrontOfQueue(m);
  }
}",0.9974052063279484
193124,"@Override public boolean hasOverlappingRendering(){
  return super.hasOverlappingRendering() && !mMeasuredTooHigh;
}","@Override public boolean hasOverlappingRendering(){
  return super.hasOverlappingRendering() && getActualHeight() <= getHeight();
}",0.8502024291497976
193125,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  final int givenSize=MeasureSpec.getSize(heightMeasureSpec);
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(givenSize,ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight && limitViewHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
  mMeasuredTooHigh=heightMode != MeasureSpec.UNSPECIFIED && ownHeight > givenSize;
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  final int givenSize=MeasureSpec.getSize(heightMeasureSpec);
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  if (heightMode != MeasureSpec.UNSPECIFIED && givenSize != 0) {
    ownMaxHeight=Math.min(givenSize,ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=heightMode == MeasureSpec.EXACTLY ? givenSize : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
}",0.2041568008418837
193126,"public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mIsExpanded) {
    return;
  }
  if (mHasPinnedNotification) {
    int minX=Integer.MAX_VALUE;
    int maxX=0;
    int minY=Integer.MAX_VALUE;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=Math.min(minX,mTmpTwoArray[0]);
        minY=Math.min(minY,0);
        maxX=Math.max(maxX,mTmpTwoArray[0] + row.getWidth());
        maxY=Math.max(maxY,row.getHeadsUpHeight());
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,minY,maxX,maxY + mNotificationsTopPadding);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}","public void onComputeInternalInsets(ViewTreeObserver.InternalInsetsInfo info){
  if (mIsExpanded) {
    return;
  }
  if (mHasPinnedNotification) {
    int minX=0;
    int maxX=0;
    int maxY=0;
    for (    HeadsUpEntry entry : mSortedEntries) {
      ExpandableNotificationRow row=entry.entry.row;
      if (row.isPinned()) {
        row.getLocationOnScreen(mTmpTwoArray);
        minX=mTmpTwoArray[0];
        maxX=mTmpTwoArray[0] + row.getWidth();
        maxY=row.getHeadsUpHeight();
        break;
      }
    }
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(minX,0,maxX,maxY + mNotificationsTopPadding);
  }
 else   if (mHeadsUpGoingAway || mWaitingOnCollapseWhenGoingAway) {
    info.setTouchableInsets(ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_REGION);
    info.touchableRegion.set(0,0,mStatusBarWindowView.getWidth(),mStatusBarHeight);
  }
}",0.905146316851665
193127,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  setMeasuredDimension(width,height);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  int size=MeasureSpec.getSize(heightMeasureSpec);
  if (hasFixedHeight || isHeightLimited) {
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  mRealHeight=height;
  if (heightMode != MeasureSpec.UNSPECIFIED) {
    height=Math.min(height,size);
  }
  setMeasuredDimension(width,height);
}",0.8937952036543586
193128,"private boolean commonKey(int keyCode,int count,KeyEvent event){
  if (mAdapter == null || !isAttachedToWindow()) {
    return false;
  }
  if (mDataChanged) {
    layoutChildren();
  }
  boolean handled=false;
  int action=event.getAction();
  if (KeyEvent.isConfirmKey(keyCode) && event.hasNoModifiers() && action == KeyEvent.ACTION_UP) {
    handled=resurrectSelectionIfNeeded();
    if (!handled && event.getRepeatCount() == 0 && getChildCount() > 0) {
      keyPressed();
      handled=true;
    }
  }
  if (!handled && action != KeyEvent.ACTION_UP) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (event.hasNoModifiers()) {
        handled=resurrectSelectionIfNeeded();
        if (!handled) {
          while (count-- > 0) {
            if (arrowScroll(FOCUS_UP)) {
              handled=true;
            }
 else {
              break;
            }
          }
        }
      }
 else       if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
        handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (event.hasNoModifiers()) {
    handled=resurrectSelectionIfNeeded();
    if (!handled) {
      while (count-- > 0) {
        if (arrowScroll(FOCUS_DOWN)) {
          handled=true;
        }
 else {
          break;
        }
      }
    }
  }
 else   if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
    handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_LEFT);
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_RIGHT);
}
break;
case KeyEvent.KEYCODE_PAGE_UP:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_UP);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_PAGE_DOWN:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_MOVE_HOME:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_MOVE_END:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_TAB:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_UP);
}
break;
}
}
if (handled) {
return true;
}
if (sendToTextFilter(keyCode,count,event)) {
return true;
}
switch (action) {
case KeyEvent.ACTION_DOWN:
return super.onKeyDown(keyCode,event);
case KeyEvent.ACTION_UP:
return super.onKeyUp(keyCode,event);
case KeyEvent.ACTION_MULTIPLE:
return super.onKeyMultiple(keyCode,count,event);
default :
return false;
}
}","private boolean commonKey(int keyCode,int count,KeyEvent event){
  if (mAdapter == null || !isAttachedToWindow()) {
    return false;
  }
  if (mDataChanged) {
    layoutChildren();
  }
  boolean handled=false;
  int action=event.getAction();
  if (KeyEvent.isConfirmKey(keyCode) && event.hasNoModifiers() && action != KeyEvent.ACTION_UP) {
    handled=resurrectSelectionIfNeeded();
    if (!handled && event.getRepeatCount() == 0 && getChildCount() > 0) {
      keyPressed();
      handled=true;
    }
  }
  if (!handled && action != KeyEvent.ACTION_UP) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (event.hasNoModifiers()) {
        handled=resurrectSelectionIfNeeded();
        if (!handled) {
          while (count-- > 0) {
            if (arrowScroll(FOCUS_UP)) {
              handled=true;
            }
 else {
              break;
            }
          }
        }
      }
 else       if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
        handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (event.hasNoModifiers()) {
    handled=resurrectSelectionIfNeeded();
    if (!handled) {
      while (count-- > 0) {
        if (arrowScroll(FOCUS_DOWN)) {
          handled=true;
        }
 else {
          break;
        }
      }
    }
  }
 else   if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
    handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_LEFT);
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_RIGHT);
}
break;
case KeyEvent.KEYCODE_PAGE_UP:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_UP);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_PAGE_DOWN:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_MOVE_HOME:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_MOVE_END:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_TAB:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_UP);
}
break;
}
}
if (handled) {
return true;
}
if (sendToTextFilter(keyCode,count,event)) {
return true;
}
switch (action) {
case KeyEvent.ACTION_DOWN:
return super.onKeyDown(keyCode,event);
case KeyEvent.ACTION_UP:
return super.onKeyUp(keyCode,event);
case KeyEvent.ACTION_MULTIPLE:
return super.onKeyMultiple(keyCode,count,event);
default :
return false;
}
}",0.99967845659164
193129,"private boolean commonKey(int keyCode,int count,KeyEvent event){
  if (mAdapter == null || !isAttachedToWindow()) {
    return false;
  }
  if (mDataChanged) {
    layoutChildren();
  }
  boolean handled=false;
  int action=event.getAction();
  if (KeyEvent.isConfirmKey(keyCode) && event.hasNoModifiers() && action == KeyEvent.ACTION_UP) {
    handled=resurrectSelectionIfNeeded();
    if (!handled && event.getRepeatCount() == 0 && getChildCount() > 0) {
      keyPressed();
      handled=true;
    }
  }
  if (!handled && action != KeyEvent.ACTION_UP) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (event.hasNoModifiers()) {
        handled=resurrectSelectionIfNeeded();
        if (!handled) {
          while (count-- > 0) {
            if (arrowScroll(FOCUS_UP)) {
              handled=true;
            }
 else {
              break;
            }
          }
        }
      }
 else       if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
        handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (event.hasNoModifiers()) {
    handled=resurrectSelectionIfNeeded();
    if (!handled) {
      while (count-- > 0) {
        if (arrowScroll(FOCUS_DOWN)) {
          handled=true;
        }
 else {
          break;
        }
      }
    }
  }
 else   if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
    handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_LEFT);
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_RIGHT);
}
break;
case KeyEvent.KEYCODE_PAGE_UP:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_UP);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_PAGE_DOWN:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_MOVE_HOME:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_MOVE_END:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_TAB:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_UP);
}
break;
}
}
if (handled) {
return true;
}
if (sendToTextFilter(keyCode,count,event)) {
return true;
}
switch (action) {
case KeyEvent.ACTION_DOWN:
return super.onKeyDown(keyCode,event);
case KeyEvent.ACTION_UP:
return super.onKeyUp(keyCode,event);
case KeyEvent.ACTION_MULTIPLE:
return super.onKeyMultiple(keyCode,count,event);
default :
return false;
}
}","private boolean commonKey(int keyCode,int count,KeyEvent event){
  if (mAdapter == null || !isAttachedToWindow()) {
    return false;
  }
  if (mDataChanged) {
    layoutChildren();
  }
  boolean handled=false;
  int action=event.getAction();
  if (KeyEvent.isConfirmKey(keyCode) && event.hasNoModifiers() && action != KeyEvent.ACTION_UP) {
    handled=resurrectSelectionIfNeeded();
    if (!handled && event.getRepeatCount() == 0 && getChildCount() > 0) {
      keyPressed();
      handled=true;
    }
  }
  if (!handled && action != KeyEvent.ACTION_UP) {
switch (keyCode) {
case KeyEvent.KEYCODE_DPAD_UP:
      if (event.hasNoModifiers()) {
        handled=resurrectSelectionIfNeeded();
        if (!handled) {
          while (count-- > 0) {
            if (arrowScroll(FOCUS_UP)) {
              handled=true;
            }
 else {
              break;
            }
          }
        }
      }
 else       if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
        handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
      }
    break;
case KeyEvent.KEYCODE_DPAD_DOWN:
  if (event.hasNoModifiers()) {
    handled=resurrectSelectionIfNeeded();
    if (!handled) {
      while (count-- > 0) {
        if (arrowScroll(FOCUS_DOWN)) {
          handled=true;
        }
 else {
          break;
        }
      }
    }
  }
 else   if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
    handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
  }
break;
case KeyEvent.KEYCODE_DPAD_LEFT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_LEFT);
}
break;
case KeyEvent.KEYCODE_DPAD_RIGHT:
if (event.hasNoModifiers()) {
handled=handleHorizontalFocusWithinListItem(View.FOCUS_RIGHT);
}
break;
case KeyEvent.KEYCODE_PAGE_UP:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_UP);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_PAGE_DOWN:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || pageScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_MOVE_HOME:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_UP);
}
break;
case KeyEvent.KEYCODE_MOVE_END:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || fullScroll(FOCUS_DOWN);
}
break;
case KeyEvent.KEYCODE_TAB:
if (event.hasNoModifiers()) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_DOWN);
}
 else if (event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
handled=resurrectSelectionIfNeeded() || arrowScroll(FOCUS_UP);
}
break;
}
}
if (handled) {
return true;
}
if (sendToTextFilter(keyCode,count,event)) {
return true;
}
switch (action) {
case KeyEvent.ACTION_DOWN:
return super.onKeyDown(keyCode,event);
case KeyEvent.ACTION_UP:
return super.onKeyUp(keyCode,event);
case KeyEvent.ACTION_MULTIPLE:
return super.onKeyMultiple(keyCode,count,event);
default :
return false;
}
}",0.99967845659164
193130,"/** 
 * Returns the top activity in any existing task matching the given Intent.  Returns null if no such task is found.
 */
ActivityRecord findTaskLocked(ActivityRecord target){
  Intent intent=target.intent;
  ActivityInfo info=target.info;
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  boolean isDocument=intent != null & intent.isDocument();
  Uri documentData=isDocument ? intent.getData() : null;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + target + ""String_Node_Str""+ this);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.voiceSession != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    if (task.userId != userId) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final ActivityRecord r=task.getTopActivity();
    if (r == null || r.finishing || r.userId != userId || r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str""+ r);
      continue;
    }
    if (r.mActivityType != target.mActivityType) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final Intent taskIntent=task.intent;
    final Intent affinityIntent=task.affinityIntent;
    final boolean taskIsDocument;
    final Uri taskDocumentData;
    if (taskIntent != null && taskIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=taskIntent.getData();
    }
 else     if (affinityIntent != null && affinityIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=affinityIntent.getData();
    }
 else {
      taskIsDocument=false;
      taskDocumentData=null;
    }
    if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + taskIntent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.task.rootAffinity+ ""String_Node_Str""+ intent.getComponent().flattenToShortString()+ ""String_Node_Str""+ info.taskAffinity);
    if (!isDocument && !taskIsDocument && task.rootAffinity != null) {
      if (task.rootAffinity.equals(target.taskAffinity)) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"");
        return r;
      }
    }
 else     if (taskIntent != null && taskIntent.getComponent() != null && taskIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      return r;
    }
 else     if (affinityIntent != null && affinityIntent.getComponent() != null && affinityIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      return r;
    }
 else     if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + task);
  }
  return null;
}","/** 
 * Returns the top activity in any existing task matching the given Intent in the input result. Returns null if no such task is found.
 */
void findTaskLocked(ActivityRecord target,FindTaskResult result){
  Intent intent=target.intent;
  ActivityInfo info=target.info;
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  boolean isDocument=intent != null & intent.isDocument();
  Uri documentData=isDocument ? intent.getData() : null;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + target + ""String_Node_Str""+ this);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.voiceSession != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    if (task.userId != userId) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final ActivityRecord r=task.getTopActivity();
    if (r == null || r.finishing || r.userId != userId || r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str""+ r);
      continue;
    }
    if (r.mActivityType != target.mActivityType) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final Intent taskIntent=task.intent;
    final Intent affinityIntent=task.affinityIntent;
    final boolean taskIsDocument;
    final Uri taskDocumentData;
    if (taskIntent != null && taskIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=taskIntent.getData();
    }
 else     if (affinityIntent != null && affinityIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=affinityIntent.getData();
    }
 else {
      taskIsDocument=false;
      taskDocumentData=null;
    }
    if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + taskIntent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.task.rootAffinity+ ""String_Node_Str""+ intent.getComponent().flattenToShortString()+ ""String_Node_Str""+ info.taskAffinity);
    if (!isDocument && !taskIsDocument && result.r == null && task.canMatchRootAffinity()) {
      if (task.rootAffinity.equals(target.taskAffinity)) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"");
        result.r=r;
        result.matchedByRootAffinity=true;
      }
    }
 else     if (taskIntent != null && taskIntent.getComponent() != null && taskIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      result.r=r;
      result.matchedByRootAffinity=false;
      break;
    }
 else     if (affinityIntent != null && affinityIntent.getComponent() != null && affinityIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      result.r=r;
      result.matchedByRootAffinity=false;
      break;
    }
 else     if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + task);
  }
}",0.948139635109898
193131,"void moveActivityToStackLocked(ActivityRecord r,int stackId,String reason,Rect bounds){
  final TaskRecord task=r.task;
  if (task.mActivities.size() == 1) {
    moveTaskToStackLocked(task.taskId,stackId,ON_TOP,FORCE_FOCUS,reason,true);
  }
 else {
    final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,ON_TOP);
    stack.moveActivityToStack(r);
  }
  if (bounds != null) {
    resizeStackLocked(PINNED_STACK_ID,bounds,!PRESERVE_WINDOWS,true);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}","void moveActivityToStackLocked(ActivityRecord r,int stackId,String reason,Rect bounds){
  final TaskRecord task=r.task;
  if (task.mActivities.size() == 1) {
    moveTaskToStackLocked(task.taskId,stackId,ON_TOP,FORCE_FOCUS,reason,true);
  }
 else {
    final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,ON_TOP);
    stack.moveActivityToStack(r);
  }
  if (bounds != null) {
    resizeStackLocked(stackId,bounds,!PRESERVE_WINDOWS,true);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}",0.979816513761468
193132,"ActivityRecord findTaskLocked(ActivityRecord r){
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + r);
  for (int displayNdx=mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
    final ArrayList<ActivityStack> stacks=mActivityDisplays.valueAt(displayNdx).mStacks;
    for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
      final ActivityStack stack=stacks.get(stackNdx);
      if (!r.isApplicationActivity() && !stack.isHomeStack()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      if (!stack.mActivityContainer.isEligibleForNewTasks()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      final ActivityRecord ar=stack.findTaskLocked(r);
      if (ar != null) {
        return ar;
      }
    }
  }
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"");
  return null;
}","ActivityRecord findTaskLocked(ActivityRecord r){
  mTmpFindTaskResult.r=null;
  mTmpFindTaskResult.matchedByRootAffinity=false;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + r);
  for (int displayNdx=mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
    final ArrayList<ActivityStack> stacks=mActivityDisplays.valueAt(displayNdx).mStacks;
    for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
      final ActivityStack stack=stacks.get(stackNdx);
      if (!r.isApplicationActivity() && !stack.isHomeStack()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      if (!stack.mActivityContainer.isEligibleForNewTasks()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      stack.findTaskLocked(r,mTmpFindTaskResult);
      if (mTmpFindTaskResult.r != null && !mTmpFindTaskResult.matchedByRootAffinity) {
        return mTmpFindTaskResult.r;
      }
    }
  }
  if (DEBUG_TASKS && mTmpFindTaskResult.r == null)   Slog.d(TAG_TASKS,""String_Node_Str"");
  return mTmpFindTaskResult.r;
}",0.8411395461129889
193133,"/** 
 * Returns the top activity in any existing task matching the given Intent.  Returns null if no such task is found.
 */
ActivityRecord findTaskLocked(ActivityRecord target){
  Intent intent=target.intent;
  ActivityInfo info=target.info;
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  boolean isDocument=intent != null & intent.isDocument();
  Uri documentData=isDocument ? intent.getData() : null;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + target + ""String_Node_Str""+ this);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.voiceSession != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    if (task.userId != userId) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final ActivityRecord r=task.getTopActivity();
    if (r == null || r.finishing || r.userId != userId || r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str""+ r);
      continue;
    }
    if (r.mActivityType != target.mActivityType) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final Intent taskIntent=task.intent;
    final Intent affinityIntent=task.affinityIntent;
    final boolean taskIsDocument;
    final Uri taskDocumentData;
    if (taskIntent != null && taskIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=taskIntent.getData();
    }
 else     if (affinityIntent != null && affinityIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=affinityIntent.getData();
    }
 else {
      taskIsDocument=false;
      taskDocumentData=null;
    }
    if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + taskIntent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.task.rootAffinity+ ""String_Node_Str""+ intent.getComponent().flattenToShortString()+ ""String_Node_Str""+ info.taskAffinity);
    if (!isDocument && !taskIsDocument && task.rootAffinity != null) {
      if (task.rootAffinity.equals(target.taskAffinity)) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"");
        return r;
      }
    }
 else     if (taskIntent != null && taskIntent.getComponent() != null && taskIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      return r;
    }
 else     if (affinityIntent != null && affinityIntent.getComponent() != null && affinityIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      return r;
    }
 else     if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + task);
  }
  return null;
}","/** 
 * Returns the top activity in any existing task matching the given Intent in the input result. Returns null if no such task is found.
 */
void findTaskLocked(ActivityRecord target,FindTaskResult result){
  Intent intent=target.intent;
  ActivityInfo info=target.info;
  ComponentName cls=intent.getComponent();
  if (info.targetActivity != null) {
    cls=new ComponentName(info.packageName,info.targetActivity);
  }
  final int userId=UserHandle.getUserId(info.applicationInfo.uid);
  boolean isDocument=intent != null & intent.isDocument();
  Uri documentData=isDocument ? intent.getData() : null;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + target + ""String_Node_Str""+ this);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.voiceSession != null) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    if (task.userId != userId) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final ActivityRecord r=task.getTopActivity();
    if (r == null || r.finishing || r.userId != userId || r.launchMode == ActivityInfo.LAUNCH_SINGLE_INSTANCE) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str""+ r);
      continue;
    }
    if (r.mActivityType != target.mActivityType) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + task + ""String_Node_Str"");
      continue;
    }
    final Intent taskIntent=task.intent;
    final Intent affinityIntent=task.affinityIntent;
    final boolean taskIsDocument;
    final Uri taskDocumentData;
    if (taskIntent != null && taskIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=taskIntent.getData();
    }
 else     if (affinityIntent != null && affinityIntent.isDocument()) {
      taskIsDocument=true;
      taskDocumentData=affinityIntent.getData();
    }
 else {
      taskIsDocument=false;
      taskDocumentData=null;
    }
    if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + taskIntent.getComponent().flattenToShortString() + ""String_Node_Str""+ r.task.rootAffinity+ ""String_Node_Str""+ intent.getComponent().flattenToShortString()+ ""String_Node_Str""+ info.taskAffinity);
    if (!isDocument && !taskIsDocument && result.r == null && task.canMatchRootAffinity()) {
      if (task.rootAffinity.equals(target.taskAffinity)) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"");
        result.r=r;
        result.matchedByRootAffinity=true;
      }
    }
 else     if (taskIntent != null && taskIntent.getComponent() != null && taskIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      result.r=r;
      result.matchedByRootAffinity=false;
      break;
    }
 else     if (affinityIntent != null && affinityIntent.getComponent() != null && affinityIntent.getComponent().compareTo(cls) == 0 && Objects.equals(documentData,taskDocumentData)) {
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"");
      if (DEBUG_TASKS)       Slog.d(TAG_TASKS,""String_Node_Str"" + intent + ""String_Node_Str""+ r.intent);
      result.r=r;
      result.matchedByRootAffinity=false;
      break;
    }
 else     if (DEBUG_TASKS)     Slog.d(TAG_TASKS,""String_Node_Str"" + task);
  }
}",0.948139635109898
193134,"void moveActivityToStackLocked(ActivityRecord r,int stackId,String reason,Rect bounds){
  final TaskRecord task=r.task;
  if (task.mActivities.size() == 1) {
    moveTaskToStackLocked(task.taskId,stackId,ON_TOP,FORCE_FOCUS,reason,true);
  }
 else {
    final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,ON_TOP);
    stack.moveActivityToStack(r);
  }
  if (bounds != null) {
    resizeStackLocked(PINNED_STACK_ID,bounds,!PRESERVE_WINDOWS,true);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}","void moveActivityToStackLocked(ActivityRecord r,int stackId,String reason,Rect bounds){
  final TaskRecord task=r.task;
  if (task.mActivities.size() == 1) {
    moveTaskToStackLocked(task.taskId,stackId,ON_TOP,FORCE_FOCUS,reason,true);
  }
 else {
    final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,ON_TOP);
    stack.moveActivityToStack(r);
  }
  if (bounds != null) {
    resizeStackLocked(stackId,bounds,!PRESERVE_WINDOWS,true);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}",0.979816513761468
193135,"ActivityRecord findTaskLocked(ActivityRecord r){
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + r);
  for (int displayNdx=mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
    final ArrayList<ActivityStack> stacks=mActivityDisplays.valueAt(displayNdx).mStacks;
    for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
      final ActivityStack stack=stacks.get(stackNdx);
      if (!r.isApplicationActivity() && !stack.isHomeStack()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      if (!stack.mActivityContainer.isEligibleForNewTasks()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      final ActivityRecord ar=stack.findTaskLocked(r);
      if (ar != null) {
        return ar;
      }
    }
  }
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"");
  return null;
}","ActivityRecord findTaskLocked(ActivityRecord r){
  mTmpFindTaskResult.r=null;
  mTmpFindTaskResult.matchedByRootAffinity=false;
  if (DEBUG_TASKS)   Slog.d(TAG_TASKS,""String_Node_Str"" + r);
  for (int displayNdx=mActivityDisplays.size() - 1; displayNdx >= 0; --displayNdx) {
    final ArrayList<ActivityStack> stacks=mActivityDisplays.valueAt(displayNdx).mStacks;
    for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
      final ActivityStack stack=stacks.get(stackNdx);
      if (!r.isApplicationActivity() && !stack.isHomeStack()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      if (!stack.mActivityContainer.isEligibleForNewTasks()) {
        if (DEBUG_TASKS)         Slog.d(TAG_TASKS,""String_Node_Str"" + stack);
        continue;
      }
      stack.findTaskLocked(r,mTmpFindTaskResult);
      if (mTmpFindTaskResult.r != null && !mTmpFindTaskResult.matchedByRootAffinity) {
        return mTmpFindTaskResult.r;
      }
    }
  }
  if (DEBUG_TASKS && mTmpFindTaskResult.r == null)   Slog.d(TAG_TASKS,""String_Node_Str"");
  return mTmpFindTaskResult.r;
}",0.8411395461129889
193136,"private void writeBundleToXml(PersistableBundle extras,XmlSerializer out) throws IOException, XmlPullParserException {
  out.startTag(null,XML_TAG_EXTRAS);
  extras.saveToXml(out);
  out.endTag(null,XML_TAG_EXTRAS);
}","private void writeBundleToXml(PersistableBundle extras,XmlSerializer out) throws IOException, XmlPullParserException {
  out.startTag(null,XML_TAG_EXTRAS);
  PersistableBundle extrasCopy=deepCopyBundle(extras,10);
  extrasCopy.saveToXml(out);
  out.endTag(null,XML_TAG_EXTRAS);
}",0.8508064516129032
193137,"/** 
 * Set the grouping 
 */
public void setGroup(TaskGrouping group){
  if (group != null && this.group != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.group=group;
}","/** 
 * Set the grouping 
 */
public void setGroup(TaskGrouping group){
  this.group=group;
}",0.6503496503496503
193138,"/** 
 * Sets a few tasks in one go, without calling any callbacks.
 * @param tasks the new set of tasks to replace the current set.
 * @param notifyStackChanges whether or not to callback on specific changes to the list of tasks.
 */
public void setTasks(List<Task> tasks,boolean notifyStackChanges){
  HashMap<Task.TaskKey,Task> currentTasksMap=createTaskKeyMapFromList(mRawTaskList);
  HashMap<Task.TaskKey,Task> newTasksMap=createTaskKeyMapFromList(tasks);
  ArrayList<Task> newTasks=new ArrayList<>();
  if (mCb == null) {
    notifyStackChanges=false;
  }
  int taskCount=mRawTaskList.size();
  for (int i=0; i < taskCount; i++) {
    Task task=mRawTaskList.get(i);
    if (!newTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskRemoved(this,task,i == (taskCount - 1),null);
      }
    }
 else {
      newTasks.add(task);
    }
  }
  taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (!currentTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskAdded(this,task);
      }
      newTasks.add(task);
    }
 else {
      newTasks.add(currentTasksMap.get(task.key));
    }
  }
  Collections.sort(newTasks,LAST_ACTIVE_TIME_COMPARATOR);
  ArrayList<Task> stackTasks=new ArrayList<>();
  ArrayList<Task> historyTasks=new ArrayList<>();
  int newTaskCount=newTasks.size();
  for (int i=0; i < newTaskCount; i++) {
    Task task=newTasks.get(i);
    if (task.isHistorical) {
      historyTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  mStackTaskList.set(stackTasks);
  mHistoryTaskList.set(historyTasks);
  mRawTaskList.clear();
  mRawTaskList.addAll(newTasks);
}","/** 
 * Sets a few tasks in one go, without calling any callbacks.
 * @param tasks the new set of tasks to replace the current set.
 * @param notifyStackChanges whether or not to callback on specific changes to the list of tasks.
 */
public void setTasks(List<Task> tasks,boolean notifyStackChanges){
  HashMap<Task.TaskKey,Task> currentTasksMap=createTaskKeyMapFromList(mRawTaskList);
  HashMap<Task.TaskKey,Task> newTasksMap=createTaskKeyMapFromList(tasks);
  ArrayList<Task> newTasks=new ArrayList<>();
  if (mCb == null) {
    notifyStackChanges=false;
  }
  int taskCount=mRawTaskList.size();
  for (int i=0; i < taskCount; i++) {
    Task task=mRawTaskList.get(i);
    if (!newTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskRemoved(this,task,i == (taskCount - 1),null);
      }
    }
    task.setGroup(null);
  }
  taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (!currentTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskAdded(this,task);
      }
      newTasks.add(task);
    }
 else {
      newTasks.add(currentTasksMap.get(task.key));
    }
  }
  Collections.sort(newTasks,LAST_ACTIVE_TIME_COMPARATOR);
  ArrayList<Task> stackTasks=new ArrayList<>();
  ArrayList<Task> historyTasks=new ArrayList<>();
  int newTaskCount=newTasks.size();
  for (int i=0; i < newTaskCount; i++) {
    Task task=newTasks.get(i);
    if (task.isHistorical) {
      historyTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  mStackTaskList.set(stackTasks);
  mHistoryTaskList.set(historyTasks);
  mRawTaskList.clear();
  mRawTaskList.addAll(newTasks);
  mGroups.clear();
  mAffinitiesGroups.clear();
}",0.968341562590764
193139,"/** 
 * Sets the thumbnail to a given bitmap. 
 */
void setThumbnail(Bitmap bm){
  if (bm != null) {
    mBitmapShader=new BitmapShader(bm,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    mDrawPaint.setShader(mBitmapShader);
  }
 else {
    mBitmapShader=null;
    mDrawPaint.setShader(null);
  }
}","/** 
 * Sets the thumbnail to a given bitmap. 
 */
void setThumbnail(Bitmap bm){
  if (bm != null) {
    mBitmapShader=new BitmapShader(bm,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    mDrawPaint.setShader(mBitmapShader);
  }
 else {
    mBitmapShader=null;
    mDrawPaint.setShader(null);
  }
  invalidate();
}",0.973941368078176
193140,"/** 
 * Set the grouping 
 */
public void setGroup(TaskGrouping group){
  if (group != null && this.group != null) {
    throw new RuntimeException(""String_Node_Str"");
  }
  this.group=group;
}","/** 
 * Set the grouping 
 */
public void setGroup(TaskGrouping group){
  this.group=group;
}",0.6503496503496503
193141,"/** 
 * Sets a few tasks in one go, without calling any callbacks.
 * @param tasks the new set of tasks to replace the current set.
 * @param notifyStackChanges whether or not to callback on specific changes to the list of tasks.
 */
public void setTasks(List<Task> tasks,boolean notifyStackChanges){
  HashMap<Task.TaskKey,Task> currentTasksMap=createTaskKeyMapFromList(mRawTaskList);
  HashMap<Task.TaskKey,Task> newTasksMap=createTaskKeyMapFromList(tasks);
  ArrayList<Task> newTasks=new ArrayList<>();
  if (mCb == null) {
    notifyStackChanges=false;
  }
  int taskCount=mRawTaskList.size();
  for (int i=0; i < taskCount; i++) {
    Task task=mRawTaskList.get(i);
    if (!newTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskRemoved(this,task,i == (taskCount - 1),null);
      }
    }
 else {
      newTasks.add(task);
    }
  }
  taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (!currentTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskAdded(this,task);
      }
      newTasks.add(task);
    }
 else {
      newTasks.add(currentTasksMap.get(task.key));
    }
  }
  Collections.sort(newTasks,LAST_ACTIVE_TIME_COMPARATOR);
  ArrayList<Task> stackTasks=new ArrayList<>();
  ArrayList<Task> historyTasks=new ArrayList<>();
  int newTaskCount=newTasks.size();
  for (int i=0; i < newTaskCount; i++) {
    Task task=newTasks.get(i);
    if (task.isHistorical) {
      historyTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  mStackTaskList.set(stackTasks);
  mHistoryTaskList.set(historyTasks);
  mRawTaskList.clear();
  mRawTaskList.addAll(newTasks);
}","/** 
 * Sets a few tasks in one go, without calling any callbacks.
 * @param tasks the new set of tasks to replace the current set.
 * @param notifyStackChanges whether or not to callback on specific changes to the list of tasks.
 */
public void setTasks(List<Task> tasks,boolean notifyStackChanges){
  HashMap<Task.TaskKey,Task> currentTasksMap=createTaskKeyMapFromList(mRawTaskList);
  HashMap<Task.TaskKey,Task> newTasksMap=createTaskKeyMapFromList(tasks);
  ArrayList<Task> newTasks=new ArrayList<>();
  if (mCb == null) {
    notifyStackChanges=false;
  }
  int taskCount=mRawTaskList.size();
  for (int i=0; i < taskCount; i++) {
    Task task=mRawTaskList.get(i);
    if (!newTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskRemoved(this,task,i == (taskCount - 1),null);
      }
    }
    task.setGroup(null);
  }
  taskCount=tasks.size();
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (!currentTasksMap.containsKey(task.key)) {
      if (notifyStackChanges) {
        mCb.onStackTaskAdded(this,task);
      }
      newTasks.add(task);
    }
 else {
      newTasks.add(currentTasksMap.get(task.key));
    }
  }
  Collections.sort(newTasks,LAST_ACTIVE_TIME_COMPARATOR);
  ArrayList<Task> stackTasks=new ArrayList<>();
  ArrayList<Task> historyTasks=new ArrayList<>();
  int newTaskCount=newTasks.size();
  for (int i=0; i < newTaskCount; i++) {
    Task task=newTasks.get(i);
    if (task.isHistorical) {
      historyTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  mStackTaskList.set(stackTasks);
  mHistoryTaskList.set(historyTasks);
  mRawTaskList.clear();
  mRawTaskList.addAll(newTasks);
  mGroups.clear();
  mAffinitiesGroups.clear();
}",0.968341562590764
193142,"/** 
 * Sets the thumbnail to a given bitmap. 
 */
void setThumbnail(Bitmap bm){
  if (bm != null) {
    mBitmapShader=new BitmapShader(bm,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    mDrawPaint.setShader(mBitmapShader);
  }
 else {
    mBitmapShader=null;
    mDrawPaint.setShader(null);
  }
}","/** 
 * Sets the thumbnail to a given bitmap. 
 */
void setThumbnail(Bitmap bm){
  if (bm != null) {
    mBitmapShader=new BitmapShader(bm,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
    mDrawPaint.setShader(mBitmapShader);
  }
 else {
    mBitmapShader=null;
    mDrawPaint.setShader(null);
  }
  invalidate();
}",0.973941368078176
193143,"private void writeBundleToXml(PersistableBundle extras,XmlSerializer out) throws IOException, XmlPullParserException {
  out.startTag(null,XML_TAG_EXTRAS);
  extras.saveToXml(out);
  out.endTag(null,XML_TAG_EXTRAS);
}","private void writeBundleToXml(PersistableBundle extras,XmlSerializer out) throws IOException, XmlPullParserException {
  out.startTag(null,XML_TAG_EXTRAS);
  PersistableBundle extrasCopy=deepCopyBundle(extras,10);
  extrasCopy.saveToXml(out);
  out.endTag(null,XML_TAG_EXTRAS);
}",0.8508064516129032
193144,"/** 
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa.
 * @see android.R.attr#resizeableActivity
 * @param multiWindowMode True if the activity is in multi-window mode.
 */
public void onMultiWindowModeChanged(boolean multiWindowMode){
  if (DEBUG_LIFECYCLE)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ multiWindowMode);
}","/** 
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa.
 * @see android.R.attr#resizeableActivity
 * @param multiWindowMode True if the activity is in multi-window mode.
 */
@CallSuper public void onMultiWindowModeChanged(boolean multiWindowMode){
  if (DEBUG_LIFECYCLE)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ multiWindowMode);
  if (mWindow != null) {
    mWindow.onMultiWindowModeChanged();
  }
}",0.9080459770114944
193145,"private void updateElevation(){
  float elevation=0;
  final boolean wasAdjustedForStack=mElevationAdjustedForStack;
  if (ActivityManager.StackId.hasWindowShadow(mStackId) && !isResizing()) {
    elevation=hasWindowFocus() ? DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP : DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
    if (!mAllowUpdateElevation) {
      elevation=DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
    }
    elevation=dipToPx(elevation);
    mElevationAdjustedForStack=true;
  }
 else {
    mElevationAdjustedForStack=false;
  }
  if ((wasAdjustedForStack || mElevationAdjustedForStack) && getElevation() != elevation) {
    mWindow.setElevation(elevation);
  }
}","private void updateElevation(){
  float elevation=0;
  final boolean wasAdjustedForStack=mElevationAdjustedForStack;
  if (StackId.hasWindowShadow(mStackId) && !isResizing()) {
    elevation=hasWindowFocus() ? DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP : DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
    if (!mAllowUpdateElevation) {
      elevation=DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
    }
    elevation=dipToPx(elevation);
    mElevationAdjustedForStack=true;
  }
 else {
    mElevationAdjustedForStack=false;
  }
  if ((wasAdjustedForStack || mElevationAdjustedForStack) && getElevation() != elevation) {
    mWindow.setElevation(elevation);
  }
}",0.9875776397515528
193146,"private DecorCaptionView createDecorCaptionView(LayoutInflater inflater){
  DecorCaptionView decorCaptionView=null;
  for (int i=getChildCount() - 1; i >= 0 && decorCaptionView == null; i--) {
    View view=getChildAt(i);
    if (view instanceof DecorCaptionView) {
      decorCaptionView=(DecorCaptionView)view;
      removeViewAt(i);
    }
  }
  final WindowManager.LayoutParams attrs=mWindow.getAttributes();
  final boolean isApplication=attrs.type == TYPE_BASE_APPLICATION || attrs.type == TYPE_APPLICATION;
  if (!mWindow.isFloating() && isApplication && ActivityManager.StackId.hasWindowDecor(mStackId)) {
    if (decorCaptionView == null) {
      decorCaptionView=inflateDecorCaptionView(inflater);
    }
    decorCaptionView.setPhoneWindow(mWindow,true);
  }
 else {
    decorCaptionView=null;
  }
  enableCaption(decorCaptionView != null);
  return decorCaptionView;
}","private DecorCaptionView createDecorCaptionView(LayoutInflater inflater){
  DecorCaptionView decorCaptionView=null;
  for (int i=getChildCount() - 1; i >= 0 && decorCaptionView == null; i--) {
    View view=getChildAt(i);
    if (view instanceof DecorCaptionView) {
      decorCaptionView=(DecorCaptionView)view;
      removeViewAt(i);
    }
  }
  final WindowManager.LayoutParams attrs=mWindow.getAttributes();
  final boolean isApplication=attrs.type == TYPE_BASE_APPLICATION || attrs.type == TYPE_APPLICATION;
  if (!mWindow.isFloating() && isApplication && StackId.hasWindowDecor(mStackId)) {
    if (decorCaptionView == null) {
      decorCaptionView=inflateDecorCaptionView(inflater);
    }
    decorCaptionView.setPhoneWindow(mWindow,true);
  }
 else {
    decorCaptionView=null;
  }
  enableCaption(decorCaptionView != null);
  return decorCaptionView;
}",0.9908045977011494
193147,"private void drawableChanged(){
  if (mChanging) {
    return;
  }
  setPadding(mFramePadding.left + mBackgroundPadding.left,mFramePadding.top + mBackgroundPadding.top,mFramePadding.right + mBackgroundPadding.right,mFramePadding.bottom + mBackgroundPadding.bottom);
  requestLayout();
  invalidate();
  int opacity=PixelFormat.OPAQUE;
  if (ActivityManager.StackId.hasWindowShadow(mStackId)) {
    opacity=PixelFormat.TRANSLUCENT;
  }
 else {
    Drawable bg=getBackground();
    Drawable fg=getForeground();
    if (bg != null) {
      if (fg == null) {
        opacity=bg.getOpacity();
      }
 else       if (mFramePadding.left <= 0 && mFramePadding.top <= 0 && mFramePadding.right <= 0 && mFramePadding.bottom <= 0) {
        int fop=fg.getOpacity();
        int bop=bg.getOpacity();
        if (false)         Log.v(TAG,""String_Node_Str"" + bop + ""String_Node_Str""+ fop);
        if (fop == PixelFormat.OPAQUE || bop == PixelFormat.OPAQUE) {
          opacity=PixelFormat.OPAQUE;
        }
 else         if (fop == PixelFormat.UNKNOWN) {
          opacity=bop;
        }
 else         if (bop == PixelFormat.UNKNOWN) {
          opacity=fop;
        }
 else {
          opacity=Drawable.resolveOpacity(fop,bop);
        }
      }
 else {
        if (false)         Log.v(TAG,""String_Node_Str"" + mFramePadding);
        opacity=PixelFormat.TRANSLUCENT;
      }
    }
    if (false)     Log.v(TAG,""String_Node_Str"" + bg + ""String_Node_Str""+ fg);
  }
  if (false)   Log.v(TAG,""String_Node_Str"" + opacity);
  mDefaultOpacity=opacity;
  if (mFeatureId < 0) {
    mWindow.setDefaultWindowFormat(opacity);
  }
}","private void drawableChanged(){
  if (mChanging) {
    return;
  }
  setPadding(mFramePadding.left + mBackgroundPadding.left,mFramePadding.top + mBackgroundPadding.top,mFramePadding.right + mBackgroundPadding.right,mFramePadding.bottom + mBackgroundPadding.bottom);
  requestLayout();
  invalidate();
  int opacity=PixelFormat.OPAQUE;
  if (StackId.hasWindowShadow(mStackId)) {
    opacity=PixelFormat.TRANSLUCENT;
  }
 else {
    Drawable bg=getBackground();
    Drawable fg=getForeground();
    if (bg != null) {
      if (fg == null) {
        opacity=bg.getOpacity();
      }
 else       if (mFramePadding.left <= 0 && mFramePadding.top <= 0 && mFramePadding.right <= 0 && mFramePadding.bottom <= 0) {
        int fop=fg.getOpacity();
        int bop=bg.getOpacity();
        if (false)         Log.v(TAG,""String_Node_Str"" + bop + ""String_Node_Str""+ fop);
        if (fop == PixelFormat.OPAQUE || bop == PixelFormat.OPAQUE) {
          opacity=PixelFormat.OPAQUE;
        }
 else         if (fop == PixelFormat.UNKNOWN) {
          opacity=bop;
        }
 else         if (bop == PixelFormat.UNKNOWN) {
          opacity=fop;
        }
 else {
          opacity=Drawable.resolveOpacity(fop,bop);
        }
      }
 else {
        if (false)         Log.v(TAG,""String_Node_Str"" + mFramePadding);
        opacity=PixelFormat.TRANSLUCENT;
      }
    }
    if (false)     Log.v(TAG,""String_Node_Str"" + bg + ""String_Node_Str""+ fg);
  }
  if (false)   Log.v(TAG,""String_Node_Str"" + opacity);
  mDefaultOpacity=opacity;
  if (mFeatureId < 0) {
    mWindow.setDefaultWindowFormat(opacity);
  }
}",0.995
193148,"void onConfigurationChanged(){
  int workspaceId=getStackId();
  if (mDecorCaptionView != null) {
    if (mStackId != workspaceId) {
      mStackId=workspaceId;
      mDecorCaptionView.onConfigurationChanged(ActivityManager.StackId.hasWindowDecor(mStackId));
      enableCaption(ActivityManager.StackId.hasWindowDecor(workspaceId));
    }
  }
  initializeElevation();
}","void onConfigurationChanged(){
  int workspaceId=getStackId();
  if (mStackId != workspaceId) {
    mStackId=workspaceId;
    if (mDecorCaptionView == null && StackId.hasWindowDecor(mStackId)) {
      final LayoutInflater inflater=mWindow.getLayoutInflater();
      mDecorCaptionView=createDecorCaptionView(inflater);
      if (mDecorCaptionView != null) {
        if (mDecorCaptionView.getParent() == null) {
          addView(mDecorCaptionView,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT));
        }
        removeView(mContentRoot);
        mDecorCaptionView.addView(mContentRoot,new ViewGroup.MarginLayoutParams(MATCH_PARENT,MATCH_PARENT));
      }
    }
 else     if (mDecorCaptionView != null) {
      mDecorCaptionView.onConfigurationChanged(StackId.hasWindowDecor(mStackId));
      enableCaption(StackId.hasWindowDecor(workspaceId));
    }
  }
  initializeElevation();
}",0.3208895949166004
193149,"/** 
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa.
 * @see android.R.attr#resizeableActivity
 * @param multiWindowMode True if the activity is in multi-window mode.
 */
public void onMultiWindowModeChanged(boolean multiWindowMode){
  if (DEBUG_LIFECYCLE)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ multiWindowMode);
}","/** 
 * Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa.
 * @see android.R.attr#resizeableActivity
 * @param multiWindowMode True if the activity is in multi-window mode.
 */
@CallSuper public void onMultiWindowModeChanged(boolean multiWindowMode){
  if (DEBUG_LIFECYCLE)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ multiWindowMode);
  if (mWindow != null) {
    mWindow.onMultiWindowModeChanged();
  }
}",0.9080459770114944
193150,"private void updateElevation(){
  float elevation=0;
  final boolean wasAdjustedForStack=mElevationAdjustedForStack;
  if (ActivityManager.StackId.hasWindowShadow(mStackId) && !isResizing()) {
    elevation=hasWindowFocus() ? DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP : DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
    if (!mAllowUpdateElevation) {
      elevation=DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
    }
    elevation=dipToPx(elevation);
    mElevationAdjustedForStack=true;
  }
 else {
    mElevationAdjustedForStack=false;
  }
  if ((wasAdjustedForStack || mElevationAdjustedForStack) && getElevation() != elevation) {
    mWindow.setElevation(elevation);
  }
}","private void updateElevation(){
  float elevation=0;
  final boolean wasAdjustedForStack=mElevationAdjustedForStack;
  if (StackId.hasWindowShadow(mStackId) && !isResizing()) {
    elevation=hasWindowFocus() ? DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP : DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
    if (!mAllowUpdateElevation) {
      elevation=DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
    }
    elevation=dipToPx(elevation);
    mElevationAdjustedForStack=true;
  }
 else {
    mElevationAdjustedForStack=false;
  }
  if ((wasAdjustedForStack || mElevationAdjustedForStack) && getElevation() != elevation) {
    mWindow.setElevation(elevation);
  }
}",0.9875776397515528
193151,"private DecorCaptionView createDecorCaptionView(LayoutInflater inflater){
  DecorCaptionView decorCaptionView=null;
  for (int i=getChildCount() - 1; i >= 0 && decorCaptionView == null; i--) {
    View view=getChildAt(i);
    if (view instanceof DecorCaptionView) {
      decorCaptionView=(DecorCaptionView)view;
      removeViewAt(i);
    }
  }
  final WindowManager.LayoutParams attrs=mWindow.getAttributes();
  final boolean isApplication=attrs.type == TYPE_BASE_APPLICATION || attrs.type == TYPE_APPLICATION;
  if (!mWindow.isFloating() && isApplication && ActivityManager.StackId.hasWindowDecor(mStackId)) {
    if (decorCaptionView == null) {
      decorCaptionView=inflateDecorCaptionView(inflater);
    }
    decorCaptionView.setPhoneWindow(mWindow,true);
  }
 else {
    decorCaptionView=null;
  }
  enableCaption(decorCaptionView != null);
  return decorCaptionView;
}","private DecorCaptionView createDecorCaptionView(LayoutInflater inflater){
  DecorCaptionView decorCaptionView=null;
  for (int i=getChildCount() - 1; i >= 0 && decorCaptionView == null; i--) {
    View view=getChildAt(i);
    if (view instanceof DecorCaptionView) {
      decorCaptionView=(DecorCaptionView)view;
      removeViewAt(i);
    }
  }
  final WindowManager.LayoutParams attrs=mWindow.getAttributes();
  final boolean isApplication=attrs.type == TYPE_BASE_APPLICATION || attrs.type == TYPE_APPLICATION;
  if (!mWindow.isFloating() && isApplication && StackId.hasWindowDecor(mStackId)) {
    if (decorCaptionView == null) {
      decorCaptionView=inflateDecorCaptionView(inflater);
    }
    decorCaptionView.setPhoneWindow(mWindow,true);
  }
 else {
    decorCaptionView=null;
  }
  enableCaption(decorCaptionView != null);
  return decorCaptionView;
}",0.9908045977011494
193152,"private void drawableChanged(){
  if (mChanging) {
    return;
  }
  setPadding(mFramePadding.left + mBackgroundPadding.left,mFramePadding.top + mBackgroundPadding.top,mFramePadding.right + mBackgroundPadding.right,mFramePadding.bottom + mBackgroundPadding.bottom);
  requestLayout();
  invalidate();
  int opacity=PixelFormat.OPAQUE;
  if (ActivityManager.StackId.hasWindowShadow(mStackId)) {
    opacity=PixelFormat.TRANSLUCENT;
  }
 else {
    Drawable bg=getBackground();
    Drawable fg=getForeground();
    if (bg != null) {
      if (fg == null) {
        opacity=bg.getOpacity();
      }
 else       if (mFramePadding.left <= 0 && mFramePadding.top <= 0 && mFramePadding.right <= 0 && mFramePadding.bottom <= 0) {
        int fop=fg.getOpacity();
        int bop=bg.getOpacity();
        if (false)         Log.v(TAG,""String_Node_Str"" + bop + ""String_Node_Str""+ fop);
        if (fop == PixelFormat.OPAQUE || bop == PixelFormat.OPAQUE) {
          opacity=PixelFormat.OPAQUE;
        }
 else         if (fop == PixelFormat.UNKNOWN) {
          opacity=bop;
        }
 else         if (bop == PixelFormat.UNKNOWN) {
          opacity=fop;
        }
 else {
          opacity=Drawable.resolveOpacity(fop,bop);
        }
      }
 else {
        if (false)         Log.v(TAG,""String_Node_Str"" + mFramePadding);
        opacity=PixelFormat.TRANSLUCENT;
      }
    }
    if (false)     Log.v(TAG,""String_Node_Str"" + bg + ""String_Node_Str""+ fg);
  }
  if (false)   Log.v(TAG,""String_Node_Str"" + opacity);
  mDefaultOpacity=opacity;
  if (mFeatureId < 0) {
    mWindow.setDefaultWindowFormat(opacity);
  }
}","private void drawableChanged(){
  if (mChanging) {
    return;
  }
  setPadding(mFramePadding.left + mBackgroundPadding.left,mFramePadding.top + mBackgroundPadding.top,mFramePadding.right + mBackgroundPadding.right,mFramePadding.bottom + mBackgroundPadding.bottom);
  requestLayout();
  invalidate();
  int opacity=PixelFormat.OPAQUE;
  if (StackId.hasWindowShadow(mStackId)) {
    opacity=PixelFormat.TRANSLUCENT;
  }
 else {
    Drawable bg=getBackground();
    Drawable fg=getForeground();
    if (bg != null) {
      if (fg == null) {
        opacity=bg.getOpacity();
      }
 else       if (mFramePadding.left <= 0 && mFramePadding.top <= 0 && mFramePadding.right <= 0 && mFramePadding.bottom <= 0) {
        int fop=fg.getOpacity();
        int bop=bg.getOpacity();
        if (false)         Log.v(TAG,""String_Node_Str"" + bop + ""String_Node_Str""+ fop);
        if (fop == PixelFormat.OPAQUE || bop == PixelFormat.OPAQUE) {
          opacity=PixelFormat.OPAQUE;
        }
 else         if (fop == PixelFormat.UNKNOWN) {
          opacity=bop;
        }
 else         if (bop == PixelFormat.UNKNOWN) {
          opacity=fop;
        }
 else {
          opacity=Drawable.resolveOpacity(fop,bop);
        }
      }
 else {
        if (false)         Log.v(TAG,""String_Node_Str"" + mFramePadding);
        opacity=PixelFormat.TRANSLUCENT;
      }
    }
    if (false)     Log.v(TAG,""String_Node_Str"" + bg + ""String_Node_Str""+ fg);
  }
  if (false)   Log.v(TAG,""String_Node_Str"" + opacity);
  mDefaultOpacity=opacity;
  if (mFeatureId < 0) {
    mWindow.setDefaultWindowFormat(opacity);
  }
}",0.995
193153,"void onConfigurationChanged(){
  int workspaceId=getStackId();
  if (mDecorCaptionView != null) {
    if (mStackId != workspaceId) {
      mStackId=workspaceId;
      mDecorCaptionView.onConfigurationChanged(ActivityManager.StackId.hasWindowDecor(mStackId));
      enableCaption(ActivityManager.StackId.hasWindowDecor(workspaceId));
    }
  }
  initializeElevation();
}","void onConfigurationChanged(){
  int workspaceId=getStackId();
  if (mStackId != workspaceId) {
    mStackId=workspaceId;
    if (mDecorCaptionView == null && StackId.hasWindowDecor(mStackId)) {
      final LayoutInflater inflater=mWindow.getLayoutInflater();
      mDecorCaptionView=createDecorCaptionView(inflater);
      if (mDecorCaptionView != null) {
        if (mDecorCaptionView.getParent() == null) {
          addView(mDecorCaptionView,0,new ViewGroup.LayoutParams(MATCH_PARENT,MATCH_PARENT));
        }
        removeView(mContentRoot);
        mDecorCaptionView.addView(mContentRoot,new ViewGroup.MarginLayoutParams(MATCH_PARENT,MATCH_PARENT));
      }
    }
 else     if (mDecorCaptionView != null) {
      mDecorCaptionView.onConfigurationChanged(StackId.hasWindowDecor(mStackId));
      enableCaption(StackId.hasWindowDecor(workspaceId));
    }
  }
  initializeElevation();
}",0.3208895949166004
193154,"void resizeStackLocked(int stackId,Rect bounds,boolean preserveWindows,boolean allowResizeInDockedMode){
  final ActivityStack stack=getStack(stackId);
  if (stack == null) {
    Slog.w(TAG,""String_Node_Str"" + stackId + ""String_Node_Str"");
    return;
  }
  if (!allowResizeInDockedMode && stackId != DOCKED_STACK_ID && getStack(DOCKED_STACK_ID) != null) {
    return;
  }
  Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER,""String_Node_Str"" + stackId);
  mWindowManager.deferSurfaceLayout();
  try {
    ActivityRecord r=stack.topRunningActivityLocked();
    mTmpBounds.clear();
    mTmpConfigs.clear();
    ArrayList<TaskRecord> tasks=stack.getAllTasks();
    for (int i=tasks.size() - 1; i >= 0; i--) {
      TaskRecord task=tasks.get(i);
      if (task.mResizeable) {
        if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID) {
          tempRect2.set(task.mBounds);
          fitWithinBounds(tempRect2,bounds);
          task.updateOverrideConfiguration(tempRect2);
        }
 else {
          task.updateOverrideConfiguration(bounds);
        }
      }
      mTmpConfigs.put(task.taskId,task.mOverrideConfig);
      mTmpBounds.put(task.taskId,task.mBounds);
    }
    stack.mFullscreen=mWindowManager.resizeStack(stackId,bounds,mTmpConfigs,mTmpBounds);
    if (stack.mStackId == DOCKED_STACK_ID) {
      if (stack.mFullscreen) {
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i) && getStack(i) != null) {
            resizeStackLocked(i,null,preserveWindows,true);
          }
        }
        final int count=tasks.size();
        for (int i=0; i < count; i++) {
          moveTaskToStackLocked(tasks.get(i).taskId,FULLSCREEN_WORKSPACE_STACK_ID,ON_TOP,FORCE_FOCUS,""String_Node_Str"",false);
        }
        r=null;
      }
 else {
        mWindowManager.getStackDockedModeBounds(HOME_STACK_ID,tempRect);
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i)) {
            ActivityStack otherStack=getStack(i);
            if (otherStack != null) {
              resizeStackLocked(i,tempRect,PRESERVE_WINDOWS,true);
            }
          }
        }
      }
      preserveWindows=true;
    }
    stack.setBounds(bounds);
    if (r != null) {
      final boolean updated=stack.ensureActivityConfigurationLocked(r,0,preserveWindows);
      ensureActivitiesVisibleLocked(r,0,preserveWindows);
      if (!updated) {
        resumeTopActivitiesLocked(stack,null,null);
      }
    }
  }
  finally {
    mWindowManager.continueSurfaceLayout();
    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);
  }
}","void resizeStackLocked(int stackId,Rect bounds,boolean preserveWindows,boolean allowResizeInDockedMode){
  final ActivityStack stack=getStack(stackId);
  if (stack == null) {
    Slog.w(TAG,""String_Node_Str"" + stackId + ""String_Node_Str"");
    return;
  }
  if (!allowResizeInDockedMode && stackId != DOCKED_STACK_ID && getStack(DOCKED_STACK_ID) != null) {
    return;
  }
  Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER,""String_Node_Str"" + stackId);
  mWindowManager.deferSurfaceLayout();
  try {
    if (bounds != null && mWindowManager.isFullscreenBounds(stackId,bounds)) {
      bounds=null;
    }
    ActivityRecord r=stack.topRunningActivityLocked();
    mTmpBounds.clear();
    mTmpConfigs.clear();
    ArrayList<TaskRecord> tasks=stack.getAllTasks();
    for (int i=tasks.size() - 1; i >= 0; i--) {
      TaskRecord task=tasks.get(i);
      if (task.mResizeable) {
        if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID) {
          tempRect2.set(task.mBounds);
          fitWithinBounds(tempRect2,bounds);
          task.updateOverrideConfiguration(tempRect2);
        }
 else {
          task.updateOverrideConfiguration(bounds);
        }
      }
      mTmpConfigs.put(task.taskId,task.mOverrideConfig);
      mTmpBounds.put(task.taskId,task.mBounds);
    }
    stack.mFullscreen=mWindowManager.resizeStack(stackId,bounds,mTmpConfigs,mTmpBounds);
    if (stack.mStackId == DOCKED_STACK_ID) {
      if (stack.mFullscreen) {
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i) && getStack(i) != null) {
            resizeStackLocked(i,null,preserveWindows,true);
          }
        }
        final int count=tasks.size();
        for (int i=0; i < count; i++) {
          moveTaskToStackLocked(tasks.get(i).taskId,FULLSCREEN_WORKSPACE_STACK_ID,ON_TOP,FORCE_FOCUS,""String_Node_Str"",false);
        }
        r=null;
      }
 else {
        mWindowManager.getStackDockedModeBounds(HOME_STACK_ID,tempRect);
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i)) {
            ActivityStack otherStack=getStack(i);
            if (otherStack != null) {
              resizeStackLocked(i,tempRect,PRESERVE_WINDOWS,true);
            }
          }
        }
      }
      preserveWindows=true;
    }
    stack.setBounds(bounds);
    if (r != null) {
      final boolean updated=stack.ensureActivityConfigurationLocked(r,0,preserveWindows);
      ensureActivitiesVisibleLocked(r,0,preserveWindows);
      if (!updated) {
        resumeTopActivitiesLocked(stack,null,null);
      }
    }
  }
  finally {
    mWindowManager.continueSurfaceLayout();
    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);
  }
}",0.9807407407407408
193155,"final void performLayoutLockedInner(final DisplayContent displayContent,boolean initial,boolean updateInputWindows){
  if (!displayContent.layoutNeeded) {
    return;
  }
  displayContent.layoutNeeded=false;
  WindowList windows=displayContent.getWindowList();
  boolean isDefaultDisplay=displayContent.isDefaultDisplay;
  DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  if (mService.mInputConsumer != null) {
    mService.mInputConsumer.layout(dw,dh);
  }
  final int N=windows.size();
  int i;
  if (DEBUG_LAYOUT) {
    Slog.v(TAG_WM,""String_Node_Str"");
    Slog.v(TAG_WM,""String_Node_Str"" + displayContent.layoutNeeded + ""String_Node_Str""+ dw+ ""String_Node_Str""+ dh);
  }
  mService.mPolicy.beginLayoutLw(isDefaultDisplay,dw,dh,mService.mRotation);
  if (isDefaultDisplay) {
    mService.mSystemDecorLayer=mService.mPolicy.getSystemDecorLayerLw();
    mService.mScreenRect.set(0,0,dw,dh);
  }
  mService.mPolicy.getContentRectLw(mService.mTmpContentRect);
  displayContent.resize(mService.mTmpContentRect);
  int seq=mService.mLayoutSeq + 1;
  if (seq < 0)   seq=0;
  mService.mLayoutSeq=seq;
  boolean behindDream=false;
  int topAttached=-1;
  for (i=N - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    final boolean gone=(behindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) || win.isGoneForLayoutLw();
    if (DEBUG_LAYOUT && !win.mLayoutAttached) {
      Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ gone+ ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mLayoutAttached+ ""String_Node_Str""+ win.isConfigChanged());
      final AppWindowToken atoken=win.mAppToken;
      if (gone)       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
 else       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
    }
    if (!gone || !win.mHaveFrame || win.mLayoutNeeded|| ((win.isConfigChanged() || win.setInsetsChanged()) && ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || (win.mHasSurface && win.mAppToken != null && win.mAppToken.layoutConfigChanges)))) {
      if (!win.mLayoutAttached) {
        if (initial) {
          win.mContentChanged=false;
        }
        if (win.mAttrs.type == TYPE_DREAM) {
          behindDream=true;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,null);
        win.mLayoutSeq=seq;
        final Task task=win.getTask();
        if (task != null) {
          displayContent.mDimLayerController.updateDimLayer(task);
        }
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
 else {
        if (topAttached < 0)         topAttached=i;
      }
    }
  }
  boolean attachedBehindDream=false;
  for (i=topAttached; i >= 0; i--) {
    final WindowState win=windows.get(i);
    if (win.mLayoutAttached) {
      if (DEBUG_LAYOUT)       Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRelayoutCalled);
      if (attachedBehindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) {
        continue;
      }
      if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame || win.mLayoutNeeded) {
        if (initial) {
          win.mContentChanged=false;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,win.mAttachedWindow);
        win.mLayoutSeq=seq;
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
    }
 else     if (win.mAttrs.type == TYPE_DREAM) {
      attachedBehindDream=behindDream;
    }
  }
  mService.mInputMonitor.setUpdateInputWindowsNeededLw();
  if (updateInputWindows) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.mPolicy.finishLayoutLw();
  mService.mH.sendEmptyMessage(UPDATE_DOCKED_STACK_DIVIDER);
}","final void performLayoutLockedInner(final DisplayContent displayContent,boolean initial,boolean updateInputWindows){
  if (!displayContent.layoutNeeded) {
    return;
  }
  displayContent.layoutNeeded=false;
  WindowList windows=displayContent.getWindowList();
  boolean isDefaultDisplay=displayContent.isDefaultDisplay;
  DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  if (mService.mInputConsumer != null) {
    mService.mInputConsumer.layout(dw,dh);
  }
  final int N=windows.size();
  int i;
  if (DEBUG_LAYOUT) {
    Slog.v(TAG_WM,""String_Node_Str"");
    Slog.v(TAG_WM,""String_Node_Str"" + displayContent.layoutNeeded + ""String_Node_Str""+ dw+ ""String_Node_Str""+ dh);
  }
  mService.mPolicy.beginLayoutLw(isDefaultDisplay,dw,dh,mService.mRotation);
  if (isDefaultDisplay) {
    mService.mSystemDecorLayer=mService.mPolicy.getSystemDecorLayerLw();
    mService.mScreenRect.set(0,0,dw,dh);
  }
  mService.mPolicy.getContentRectLw(mTmpContentRect);
  displayContent.resize(mTmpContentRect);
  int seq=mService.mLayoutSeq + 1;
  if (seq < 0)   seq=0;
  mService.mLayoutSeq=seq;
  boolean behindDream=false;
  int topAttached=-1;
  for (i=N - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    final boolean gone=(behindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) || win.isGoneForLayoutLw();
    if (DEBUG_LAYOUT && !win.mLayoutAttached) {
      Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ gone+ ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mLayoutAttached+ ""String_Node_Str""+ win.isConfigChanged());
      final AppWindowToken atoken=win.mAppToken;
      if (gone)       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
 else       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
    }
    if (!gone || !win.mHaveFrame || win.mLayoutNeeded|| ((win.isConfigChanged() || win.setInsetsChanged()) && ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || (win.mHasSurface && win.mAppToken != null && win.mAppToken.layoutConfigChanges)))) {
      if (!win.mLayoutAttached) {
        if (initial) {
          win.mContentChanged=false;
        }
        if (win.mAttrs.type == TYPE_DREAM) {
          behindDream=true;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,null);
        win.mLayoutSeq=seq;
        final Task task=win.getTask();
        if (task != null) {
          displayContent.mDimLayerController.updateDimLayer(task);
        }
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
 else {
        if (topAttached < 0)         topAttached=i;
      }
    }
  }
  boolean attachedBehindDream=false;
  for (i=topAttached; i >= 0; i--) {
    final WindowState win=windows.get(i);
    if (win.mLayoutAttached) {
      if (DEBUG_LAYOUT)       Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRelayoutCalled);
      if (attachedBehindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) {
        continue;
      }
      if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame || win.mLayoutNeeded) {
        if (initial) {
          win.mContentChanged=false;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,win.mAttachedWindow);
        win.mLayoutSeq=seq;
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
    }
 else     if (win.mAttrs.type == TYPE_DREAM) {
      attachedBehindDream=behindDream;
    }
  }
  mService.mInputMonitor.setUpdateInputWindowsNeededLw();
  if (updateInputWindows) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.mPolicy.finishLayoutLw();
  mService.mH.sendEmptyMessage(UPDATE_DOCKED_STACK_DIVIDER);
}",0.9979982206405694
193156,"void resizeStackLocked(int stackId,Rect bounds,boolean preserveWindows,boolean allowResizeInDockedMode){
  final ActivityStack stack=getStack(stackId);
  if (stack == null) {
    Slog.w(TAG,""String_Node_Str"" + stackId + ""String_Node_Str"");
    return;
  }
  if (!allowResizeInDockedMode && stackId != DOCKED_STACK_ID && getStack(DOCKED_STACK_ID) != null) {
    return;
  }
  Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER,""String_Node_Str"" + stackId);
  mWindowManager.deferSurfaceLayout();
  try {
    ActivityRecord r=stack.topRunningActivityLocked();
    mTmpBounds.clear();
    mTmpConfigs.clear();
    ArrayList<TaskRecord> tasks=stack.getAllTasks();
    for (int i=tasks.size() - 1; i >= 0; i--) {
      TaskRecord task=tasks.get(i);
      if (task.mResizeable) {
        if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID) {
          tempRect2.set(task.mBounds);
          fitWithinBounds(tempRect2,bounds);
          task.updateOverrideConfiguration(tempRect2);
        }
 else {
          task.updateOverrideConfiguration(bounds);
        }
      }
      mTmpConfigs.put(task.taskId,task.mOverrideConfig);
      mTmpBounds.put(task.taskId,task.mBounds);
    }
    stack.mFullscreen=mWindowManager.resizeStack(stackId,bounds,mTmpConfigs,mTmpBounds);
    if (stack.mStackId == DOCKED_STACK_ID) {
      if (stack.mFullscreen) {
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i) && getStack(i) != null) {
            resizeStackLocked(i,null,preserveWindows,true);
          }
        }
        final int count=tasks.size();
        for (int i=0; i < count; i++) {
          moveTaskToStackLocked(tasks.get(i).taskId,FULLSCREEN_WORKSPACE_STACK_ID,ON_TOP,FORCE_FOCUS,""String_Node_Str"",false);
        }
        r=null;
      }
 else {
        mWindowManager.getStackDockedModeBounds(HOME_STACK_ID,tempRect);
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i)) {
            ActivityStack otherStack=getStack(i);
            if (otherStack != null) {
              resizeStackLocked(i,tempRect,PRESERVE_WINDOWS,true);
            }
          }
        }
      }
      preserveWindows=true;
    }
    stack.setBounds(bounds);
    if (r != null) {
      final boolean updated=stack.ensureActivityConfigurationLocked(r,0,preserveWindows);
      ensureActivitiesVisibleLocked(r,0,preserveWindows);
      if (!updated) {
        resumeTopActivitiesLocked(stack,null,null);
      }
    }
  }
  finally {
    mWindowManager.continueSurfaceLayout();
    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);
  }
}","void resizeStackLocked(int stackId,Rect bounds,boolean preserveWindows,boolean allowResizeInDockedMode){
  final ActivityStack stack=getStack(stackId);
  if (stack == null) {
    Slog.w(TAG,""String_Node_Str"" + stackId + ""String_Node_Str"");
    return;
  }
  if (!allowResizeInDockedMode && stackId != DOCKED_STACK_ID && getStack(DOCKED_STACK_ID) != null) {
    return;
  }
  Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER,""String_Node_Str"" + stackId);
  mWindowManager.deferSurfaceLayout();
  try {
    if (bounds != null && mWindowManager.isFullscreenBounds(stackId,bounds)) {
      bounds=null;
    }
    ActivityRecord r=stack.topRunningActivityLocked();
    mTmpBounds.clear();
    mTmpConfigs.clear();
    ArrayList<TaskRecord> tasks=stack.getAllTasks();
    for (int i=tasks.size() - 1; i >= 0; i--) {
      TaskRecord task=tasks.get(i);
      if (task.mResizeable) {
        if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID) {
          tempRect2.set(task.mBounds);
          fitWithinBounds(tempRect2,bounds);
          task.updateOverrideConfiguration(tempRect2);
        }
 else {
          task.updateOverrideConfiguration(bounds);
        }
      }
      mTmpConfigs.put(task.taskId,task.mOverrideConfig);
      mTmpBounds.put(task.taskId,task.mBounds);
    }
    stack.mFullscreen=mWindowManager.resizeStack(stackId,bounds,mTmpConfigs,mTmpBounds);
    if (stack.mStackId == DOCKED_STACK_ID) {
      if (stack.mFullscreen) {
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i) && getStack(i) != null) {
            resizeStackLocked(i,null,preserveWindows,true);
          }
        }
        final int count=tasks.size();
        for (int i=0; i < count; i++) {
          moveTaskToStackLocked(tasks.get(i).taskId,FULLSCREEN_WORKSPACE_STACK_ID,ON_TOP,FORCE_FOCUS,""String_Node_Str"",false);
        }
        r=null;
      }
 else {
        mWindowManager.getStackDockedModeBounds(HOME_STACK_ID,tempRect);
        for (int i=FIRST_STATIC_STACK_ID; i <= LAST_STATIC_STACK_ID; i++) {
          if (StackId.isResizeableByDockedStack(i)) {
            ActivityStack otherStack=getStack(i);
            if (otherStack != null) {
              resizeStackLocked(i,tempRect,PRESERVE_WINDOWS,true);
            }
          }
        }
      }
      preserveWindows=true;
    }
    stack.setBounds(bounds);
    if (r != null) {
      final boolean updated=stack.ensureActivityConfigurationLocked(r,0,preserveWindows);
      ensureActivitiesVisibleLocked(r,0,preserveWindows);
      if (!updated) {
        resumeTopActivitiesLocked(stack,null,null);
      }
    }
  }
  finally {
    mWindowManager.continueSurfaceLayout();
    Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);
  }
}",0.9807407407407408
193157,"final void performLayoutLockedInner(final DisplayContent displayContent,boolean initial,boolean updateInputWindows){
  if (!displayContent.layoutNeeded) {
    return;
  }
  displayContent.layoutNeeded=false;
  WindowList windows=displayContent.getWindowList();
  boolean isDefaultDisplay=displayContent.isDefaultDisplay;
  DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  if (mService.mInputConsumer != null) {
    mService.mInputConsumer.layout(dw,dh);
  }
  final int N=windows.size();
  int i;
  if (DEBUG_LAYOUT) {
    Slog.v(TAG_WM,""String_Node_Str"");
    Slog.v(TAG_WM,""String_Node_Str"" + displayContent.layoutNeeded + ""String_Node_Str""+ dw+ ""String_Node_Str""+ dh);
  }
  mService.mPolicy.beginLayoutLw(isDefaultDisplay,dw,dh,mService.mRotation);
  if (isDefaultDisplay) {
    mService.mSystemDecorLayer=mService.mPolicy.getSystemDecorLayerLw();
    mService.mScreenRect.set(0,0,dw,dh);
  }
  mService.mPolicy.getContentRectLw(mService.mTmpContentRect);
  displayContent.resize(mService.mTmpContentRect);
  int seq=mService.mLayoutSeq + 1;
  if (seq < 0)   seq=0;
  mService.mLayoutSeq=seq;
  boolean behindDream=false;
  int topAttached=-1;
  for (i=N - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    final boolean gone=(behindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) || win.isGoneForLayoutLw();
    if (DEBUG_LAYOUT && !win.mLayoutAttached) {
      Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ gone+ ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mLayoutAttached+ ""String_Node_Str""+ win.isConfigChanged());
      final AppWindowToken atoken=win.mAppToken;
      if (gone)       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
 else       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
    }
    if (!gone || !win.mHaveFrame || win.mLayoutNeeded|| ((win.isConfigChanged() || win.setInsetsChanged()) && ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || (win.mHasSurface && win.mAppToken != null && win.mAppToken.layoutConfigChanges)))) {
      if (!win.mLayoutAttached) {
        if (initial) {
          win.mContentChanged=false;
        }
        if (win.mAttrs.type == TYPE_DREAM) {
          behindDream=true;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,null);
        win.mLayoutSeq=seq;
        final Task task=win.getTask();
        if (task != null) {
          displayContent.mDimLayerController.updateDimLayer(task);
        }
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
 else {
        if (topAttached < 0)         topAttached=i;
      }
    }
  }
  boolean attachedBehindDream=false;
  for (i=topAttached; i >= 0; i--) {
    final WindowState win=windows.get(i);
    if (win.mLayoutAttached) {
      if (DEBUG_LAYOUT)       Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRelayoutCalled);
      if (attachedBehindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) {
        continue;
      }
      if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame || win.mLayoutNeeded) {
        if (initial) {
          win.mContentChanged=false;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,win.mAttachedWindow);
        win.mLayoutSeq=seq;
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
    }
 else     if (win.mAttrs.type == TYPE_DREAM) {
      attachedBehindDream=behindDream;
    }
  }
  mService.mInputMonitor.setUpdateInputWindowsNeededLw();
  if (updateInputWindows) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.mPolicy.finishLayoutLw();
  mService.mH.sendEmptyMessage(UPDATE_DOCKED_STACK_DIVIDER);
}","final void performLayoutLockedInner(final DisplayContent displayContent,boolean initial,boolean updateInputWindows){
  if (!displayContent.layoutNeeded) {
    return;
  }
  displayContent.layoutNeeded=false;
  WindowList windows=displayContent.getWindowList();
  boolean isDefaultDisplay=displayContent.isDefaultDisplay;
  DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  if (mService.mInputConsumer != null) {
    mService.mInputConsumer.layout(dw,dh);
  }
  final int N=windows.size();
  int i;
  if (DEBUG_LAYOUT) {
    Slog.v(TAG_WM,""String_Node_Str"");
    Slog.v(TAG_WM,""String_Node_Str"" + displayContent.layoutNeeded + ""String_Node_Str""+ dw+ ""String_Node_Str""+ dh);
  }
  mService.mPolicy.beginLayoutLw(isDefaultDisplay,dw,dh,mService.mRotation);
  if (isDefaultDisplay) {
    mService.mSystemDecorLayer=mService.mPolicy.getSystemDecorLayerLw();
    mService.mScreenRect.set(0,0,dw,dh);
  }
  mService.mPolicy.getContentRectLw(mTmpContentRect);
  displayContent.resize(mTmpContentRect);
  int seq=mService.mLayoutSeq + 1;
  if (seq < 0)   seq=0;
  mService.mLayoutSeq=seq;
  boolean behindDream=false;
  int topAttached=-1;
  for (i=N - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    final boolean gone=(behindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) || win.isGoneForLayoutLw();
    if (DEBUG_LAYOUT && !win.mLayoutAttached) {
      Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ gone+ ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mLayoutAttached+ ""String_Node_Str""+ win.isConfigChanged());
      final AppWindowToken atoken=win.mAppToken;
      if (gone)       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
 else       Slog.v(TAG_WM,""String_Node_Str"" + win.mViewVisibility + ""String_Node_Str""+ win.mRelayoutCalled+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ (atoken != null && atoken.hiddenRequested)+ ""String_Node_Str""+ win.mAttachedHidden);
    }
    if (!gone || !win.mHaveFrame || win.mLayoutNeeded|| ((win.isConfigChanged() || win.setInsetsChanged()) && ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0 || (win.mHasSurface && win.mAppToken != null && win.mAppToken.layoutConfigChanges)))) {
      if (!win.mLayoutAttached) {
        if (initial) {
          win.mContentChanged=false;
        }
        if (win.mAttrs.type == TYPE_DREAM) {
          behindDream=true;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,null);
        win.mLayoutSeq=seq;
        final Task task=win.getTask();
        if (task != null) {
          displayContent.mDimLayerController.updateDimLayer(task);
        }
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
 else {
        if (topAttached < 0)         topAttached=i;
      }
    }
  }
  boolean attachedBehindDream=false;
  for (i=topAttached; i >= 0; i--) {
    final WindowState win=windows.get(i);
    if (win.mLayoutAttached) {
      if (DEBUG_LAYOUT)       Slog.v(TAG_WM,""String_Node_Str"" + win + ""String_Node_Str""+ win.mHaveFrame+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRelayoutCalled);
      if (attachedBehindDream && mService.mPolicy.canBeForceHidden(win,win.mAttrs)) {
        continue;
      }
      if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame || win.mLayoutNeeded) {
        if (initial) {
          win.mContentChanged=false;
        }
        win.mLayoutNeeded=false;
        win.prelayout();
        mService.mPolicy.layoutWindowLw(win,win.mAttachedWindow);
        win.mLayoutSeq=seq;
        if (DEBUG_LAYOUT)         Slog.v(TAG_WM,""String_Node_Str"" + win.mFrame + ""String_Node_Str""+ win.mContainingFrame+ ""String_Node_Str""+ win.mDisplayFrame);
      }
    }
 else     if (win.mAttrs.type == TYPE_DREAM) {
      attachedBehindDream=behindDream;
    }
  }
  mService.mInputMonitor.setUpdateInputWindowsNeededLw();
  if (updateInputWindows) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.mPolicy.finishLayoutLw();
  mService.mH.sendEmptyMessage(UPDATE_DOCKED_STACK_DIVIDER);
}",0.9979982206405694
193158,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(MeasureSpec.getSize(heightMeasureSpec),ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight && limitViewHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  final int givenSize=MeasureSpec.getSize(heightMeasureSpec);
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(givenSize,ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight && limitViewHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
  mMeasuredTooHigh=heightMode != MeasureSpec.UNSPECIFIED && ownHeight > givenSize;
}",0.9514511873350924
193159,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  int childCount=mChildren.size();
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    child.layout(0,0,getWidth(),child.getMeasuredHeight());
    mDividers.get(i).layout(0,0,getWidth(),mDividerHeight);
  }
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.layout(0,0,getWidth(),mGroupOverflowContainer.getMeasuredHeight());
  }
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    child.layout(0,0,getWidth(),child.getMeasuredHeight());
    mDividers.get(i).layout(0,0,getWidth(),mDividerHeight);
  }
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.layout(0,0,getWidth(),mGroupOverflowContainer.getMeasuredHeight());
  }
}",0.9521178637200736
193160,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=mChildren.size();
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  setMeasuredDimension(width,height);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  setMeasuredDimension(width,height);
}",0.9789473684210528
193161,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  requestPanelHeightUpdate();
  mHasLayoutedSinceDown=true;
  if (mUpdateFlingOnLayout) {
    abortAnimations();
    fling(mUpdateFlingVelocity,true);
    mUpdateFlingOnLayout=false;
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (mLayoutHeight != getHeight()) {
    mLayoutHeight=getHeight();
    mStatusBar.onPanelHeightChanged();
  }
  requestPanelHeightUpdate();
  mHasLayoutedSinceDown=true;
  if (mUpdateFlingOnLayout) {
    abortAnimations();
    fling(mUpdateFlingVelocity,true);
    mUpdateFlingOnLayout=false;
  }
}",0.8537859007832899
193162,"public void expand(final boolean animate){
  if (!isFullyCollapsed() && !isCollapsing()) {
    return;
  }
  mInstantExpanding=true;
  mUpdateFlingOnLayout=false;
  abortAnimations();
  cancelPeek();
  if (mTracking) {
    onTrackingStopped(true);
  }
  if (mExpanding) {
    notifyExpandingFinished();
  }
  notifyBarPanelExpansionChanged();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
        getViewTreeObserver().removeOnGlobalLayoutListener(this);
        mStatusBar.onPanelExpandedAndLayouted();
        if (animate) {
          mBar.startOpeningPanel(PanelView.this);
          notifyExpandingStarted();
          fling(0,true);
        }
 else {
          setExpandedFraction(1f);
        }
        mInstantExpanding=false;
      }
    }
  }
);
  requestLayout();
}","public void expand(final boolean animate){
  if (!isFullyCollapsed() && !isCollapsing()) {
    return;
  }
  mInstantExpanding=true;
  mUpdateFlingOnLayout=false;
  abortAnimations();
  cancelPeek();
  if (mTracking) {
    onTrackingStopped(true);
  }
  if (mExpanding) {
    notifyExpandingFinished();
  }
  notifyBarPanelExpansionChanged();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
        getViewTreeObserver().removeOnGlobalLayoutListener(this);
        if (animate) {
          mBar.startOpeningPanel(PanelView.this);
          notifyExpandingStarted();
          fling(0,true);
        }
 else {
          setExpandedFraction(1f);
        }
        mInstantExpanding=false;
      }
    }
  }
);
  requestLayout();
}",0.9738666666666668
193163,"@Override public void onGlobalLayout(){
  if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
    getViewTreeObserver().removeOnGlobalLayoutListener(this);
    mStatusBar.onPanelExpandedAndLayouted();
    if (animate) {
      mBar.startOpeningPanel(PanelView.this);
      notifyExpandingStarted();
      fling(0,true);
    }
 else {
      setExpandedFraction(1f);
    }
    mInstantExpanding=false;
  }
}","@Override public void onGlobalLayout(){
  if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
    getViewTreeObserver().removeOnGlobalLayoutListener(this);
    if (animate) {
      mBar.startOpeningPanel(PanelView.this);
      notifyExpandingStarted();
      fling(0,true);
    }
 else {
      setExpandedFraction(1f);
    }
    mInstantExpanding=false;
  }
}",0.9458483754512635
193164,"private void recreateNotificationHeader(){
  final Notification.Builder builder=Notification.Builder.recoverBuilder(getContext(),getStatusBarNotification().getNotification());
  final RemoteViews header=builder.makeNotificationHeader();
  if (mNotificationHeader == null) {
    mNotificationHeader=(NotificationHeaderView)header.apply(getContext(),this);
    final View expandButton=mNotificationHeader.findViewById(com.android.internal.R.id.expand_button);
    expandButton.setVisibility(VISIBLE);
    mNotificationHeader.setOnClickListener(mExpandClickListener);
    mNotificationHeaderWrapper=NotificationViewWrapper.wrap(getContext(),mNotificationHeader);
    addView(mNotificationHeader);
  }
 else {
    header.reapply(getContext(),mNotificationHeader);
    mNotificationHeaderWrapper.notifyContentUpdated();
  }
  updateHeaderExpandButton();
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
}","private void recreateNotificationHeader(){
  final Notification.Builder builder=Notification.Builder.recoverBuilder(getContext(),getStatusBarNotification().getNotification());
  final RemoteViews header=builder.makeNotificationHeader();
  if (mNotificationHeader == null) {
    mNotificationHeader=(NotificationHeaderView)header.apply(getContext(),this);
    final View expandButton=mNotificationHeader.findViewById(com.android.internal.R.id.expand_button);
    expandButton.setVisibility(VISIBLE);
    mNotificationHeader.setOnClickListener(mExpandClickListener);
    mNotificationHeaderWrapper=NotificationViewWrapper.wrap(getContext(),mNotificationHeader);
    addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1);
  }
 else {
    header.reapply(getContext(),mNotificationHeader);
    mNotificationHeaderWrapper.notifyContentUpdated();
  }
  updateHeaderExpandButton();
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
}",0.9801608579088472
193165,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(MeasureSpec.getSize(heightMeasureSpec),ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight && limitViewHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  boolean limitViewHeight=shouldLimitViewHeight();
  final int givenSize=MeasureSpec.getSize(heightMeasureSpec);
  int ownMaxHeight=limitViewHeight ? mMaxViewHeight : Integer.MAX_VALUE;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  if (hasFixedHeight) {
    ownMaxHeight=Math.min(givenSize,ownMaxHeight);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int maxChildHeight=0;
  int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    int childHeightSpec=newHeightSpec;
    ViewGroup.LayoutParams layoutParams=child.getLayoutParams();
    if (layoutParams.height != ViewGroup.LayoutParams.MATCH_PARENT) {
      if (layoutParams.height >= 0) {
        childHeightSpec=layoutParams.height > ownMaxHeight && limitViewHeight ? MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.EXACTLY) : MeasureSpec.makeMeasureSpec(layoutParams.height,MeasureSpec.EXACTLY);
      }
      child.measure(getChildMeasureSpec(widthMeasureSpec,0,layoutParams.width),childHeightSpec);
      int childHeight=child.getMeasuredHeight();
      maxChildHeight=Math.max(maxChildHeight,childHeight);
    }
 else {
      mMatchParentViews.add(child);
    }
  }
  int ownHeight=hasFixedHeight ? ownMaxHeight : Math.min(ownMaxHeight,maxChildHeight);
  newHeightSpec=MeasureSpec.makeMeasureSpec(ownHeight,MeasureSpec.EXACTLY);
  for (  View child : mMatchParentViews) {
    child.measure(getChildMeasureSpec(widthMeasureSpec,0,child.getLayoutParams().width),newHeightSpec);
  }
  mMatchParentViews.clear();
  int width=MeasureSpec.getSize(widthMeasureSpec);
  setMeasuredDimension(width,ownHeight);
  mMeasuredTooHigh=heightMode != MeasureSpec.UNSPECIFIED && ownHeight > givenSize;
}",0.9514511873350924
193166,"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  int childCount=mChildren.size();
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    child.layout(0,0,getWidth(),child.getMeasuredHeight());
    mDividers.get(i).layout(0,0,getWidth(),mDividerHeight);
  }
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.layout(0,0,getWidth(),mGroupOverflowContainer.getMeasuredHeight());
  }
}","@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    if (child.getVisibility() == View.GONE) {
      continue;
    }
    child.layout(0,0,getWidth(),child.getMeasuredHeight());
    mDividers.get(i).layout(0,0,getWidth(),mDividerHeight);
  }
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.layout(0,0,getWidth(),mGroupOverflowContainer.getMeasuredHeight());
  }
}",0.9521178637200736
193167,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=mChildren.size();
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  setMeasuredDimension(width,height);
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int ownMaxHeight=mMaxNotificationHeight;
  int heightMode=MeasureSpec.getMode(heightMeasureSpec);
  boolean hasFixedHeight=heightMode == MeasureSpec.EXACTLY;
  boolean isHeightLimited=heightMode == MeasureSpec.AT_MOST;
  if (hasFixedHeight || isHeightLimited) {
    int size=MeasureSpec.getSize(heightMeasureSpec);
    ownMaxHeight=Math.min(ownMaxHeight,size);
  }
  int newHeightSpec=MeasureSpec.makeMeasureSpec(ownMaxHeight,MeasureSpec.AT_MOST);
  int dividerHeightSpec=MeasureSpec.makeMeasureSpec(mDividerHeight,MeasureSpec.EXACTLY);
  int height=mNotificationHeaderHeight + mNotificatonTopPadding;
  int childCount=Math.min(mChildren.size(),NUMBER_OF_CHILDREN_WHEN_CHILDREN_EXPANDED);
  for (int i=0; i < childCount; i++) {
    View child=mChildren.get(i);
    child.measure(widthMeasureSpec,newHeightSpec);
    height+=child.getMeasuredHeight();
    View divider=mDividers.get(i);
    divider.measure(widthMeasureSpec,dividerHeightSpec);
    height+=mDividerHeight;
  }
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (mGroupOverflowContainer != null) {
    mGroupOverflowContainer.measure(widthMeasureSpec,newHeightSpec);
  }
  setMeasuredDimension(width,height);
}",0.9789473684210528
193168,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  requestPanelHeightUpdate();
  mHasLayoutedSinceDown=true;
  if (mUpdateFlingOnLayout) {
    abortAnimations();
    fling(mUpdateFlingVelocity,true);
    mUpdateFlingOnLayout=false;
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  super.onLayout(changed,left,top,right,bottom);
  if (mLayoutHeight != getHeight()) {
    mLayoutHeight=getHeight();
    mStatusBar.onPanelHeightChanged();
  }
  requestPanelHeightUpdate();
  mHasLayoutedSinceDown=true;
  if (mUpdateFlingOnLayout) {
    abortAnimations();
    fling(mUpdateFlingVelocity,true);
    mUpdateFlingOnLayout=false;
  }
}",0.8537859007832899
193169,"public void expand(final boolean animate){
  if (!isFullyCollapsed() && !isCollapsing()) {
    return;
  }
  mInstantExpanding=true;
  mUpdateFlingOnLayout=false;
  abortAnimations();
  cancelPeek();
  if (mTracking) {
    onTrackingStopped(true);
  }
  if (mExpanding) {
    notifyExpandingFinished();
  }
  notifyBarPanelExpansionChanged();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
        getViewTreeObserver().removeOnGlobalLayoutListener(this);
        mStatusBar.onPanelExpandedAndLayouted();
        if (animate) {
          mBar.startOpeningPanel(PanelView.this);
          notifyExpandingStarted();
          fling(0,true);
        }
 else {
          setExpandedFraction(1f);
        }
        mInstantExpanding=false;
      }
    }
  }
);
  requestLayout();
}","public void expand(final boolean animate){
  if (!isFullyCollapsed() && !isCollapsing()) {
    return;
  }
  mInstantExpanding=true;
  mUpdateFlingOnLayout=false;
  abortAnimations();
  cancelPeek();
  if (mTracking) {
    onTrackingStopped(true);
  }
  if (mExpanding) {
    notifyExpandingFinished();
  }
  notifyBarPanelExpansionChanged();
  getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
        getViewTreeObserver().removeOnGlobalLayoutListener(this);
        if (animate) {
          mBar.startOpeningPanel(PanelView.this);
          notifyExpandingStarted();
          fling(0,true);
        }
 else {
          setExpandedFraction(1f);
        }
        mInstantExpanding=false;
      }
    }
  }
);
  requestLayout();
}",0.9738666666666668
193170,"@Override public void onGlobalLayout(){
  if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
    getViewTreeObserver().removeOnGlobalLayoutListener(this);
    mStatusBar.onPanelExpandedAndLayouted();
    if (animate) {
      mBar.startOpeningPanel(PanelView.this);
      notifyExpandingStarted();
      fling(0,true);
    }
 else {
      setExpandedFraction(1f);
    }
    mInstantExpanding=false;
  }
}","@Override public void onGlobalLayout(){
  if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
    getViewTreeObserver().removeOnGlobalLayoutListener(this);
    if (animate) {
      mBar.startOpeningPanel(PanelView.this);
      notifyExpandingStarted();
      fling(0,true);
    }
 else {
      setExpandedFraction(1f);
    }
    mInstantExpanding=false;
  }
}",0.9458483754512635
193171,"private void recreateNotificationHeader(){
  final Notification.Builder builder=Notification.Builder.recoverBuilder(getContext(),getStatusBarNotification().getNotification());
  final RemoteViews header=builder.makeNotificationHeader();
  if (mNotificationHeader == null) {
    mNotificationHeader=(NotificationHeaderView)header.apply(getContext(),this);
    final View expandButton=mNotificationHeader.findViewById(com.android.internal.R.id.expand_button);
    expandButton.setVisibility(VISIBLE);
    mNotificationHeader.setOnClickListener(mExpandClickListener);
    mNotificationHeaderWrapper=NotificationViewWrapper.wrap(getContext(),mNotificationHeader);
    addView(mNotificationHeader);
  }
 else {
    header.reapply(getContext(),mNotificationHeader);
    mNotificationHeaderWrapper.notifyContentUpdated();
  }
  updateHeaderExpandButton();
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
}","private void recreateNotificationHeader(){
  final Notification.Builder builder=Notification.Builder.recoverBuilder(getContext(),getStatusBarNotification().getNotification());
  final RemoteViews header=builder.makeNotificationHeader();
  if (mNotificationHeader == null) {
    mNotificationHeader=(NotificationHeaderView)header.apply(getContext(),this);
    final View expandButton=mNotificationHeader.findViewById(com.android.internal.R.id.expand_button);
    expandButton.setVisibility(VISIBLE);
    mNotificationHeader.setOnClickListener(mExpandClickListener);
    mNotificationHeaderWrapper=NotificationViewWrapper.wrap(getContext(),mNotificationHeader);
    addView(mNotificationHeader,indexOfChild(mChildrenContainer) + 1);
  }
 else {
    header.reapply(getContext(),mNotificationHeader);
    mNotificationHeaderWrapper.notifyContentUpdated();
  }
  updateHeaderExpandButton();
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
}",0.9801608579088472
193172,"/** 
 * @param onKeyguard whether to prevent notification expansion
 */
public void setOnKeyguard(boolean onKeyguard){
  if (onKeyguard != mOnKeyguard) {
    final boolean wasExpanded=isExpanded();
    mOnKeyguard=onKeyguard;
    logExpansionEvent(false,wasExpanded);
    if (wasExpanded != isExpanded()) {
      notifyHeightChanged(false);
    }
  }
}","/** 
 * @param onKeyguard whether to prevent notification expansion
 */
public void setOnKeyguard(boolean onKeyguard){
  if (onKeyguard != mOnKeyguard) {
    final boolean wasExpanded=isExpanded();
    mOnKeyguard=onKeyguard;
    logExpansionEvent(false,wasExpanded);
    if (wasExpanded != isExpanded()) {
      if (mIsSummaryWithChildren) {
        mChildrenContainer.updateGroupOverflow();
      }
      notifyHeightChanged(false);
    }
  }
}",0.8822055137844611
193173,"/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
    mStackScroller.onHeightChanged(null,false);
  }
}","/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
  }
}",0.8978723404255319
193174,"/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
    mStackScroller.onHeightChanged(null,false);
  }
}","/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
  }
}",0.8978723404255319
193175,"/** 
 * @param onKeyguard whether to prevent notification expansion
 */
public void setOnKeyguard(boolean onKeyguard){
  if (onKeyguard != mOnKeyguard) {
    final boolean wasExpanded=isExpanded();
    mOnKeyguard=onKeyguard;
    logExpansionEvent(false,wasExpanded);
    if (wasExpanded != isExpanded()) {
      notifyHeightChanged(false);
    }
  }
}","/** 
 * @param onKeyguard whether to prevent notification expansion
 */
public void setOnKeyguard(boolean onKeyguard){
  if (onKeyguard != mOnKeyguard) {
    final boolean wasExpanded=isExpanded();
    mOnKeyguard=onKeyguard;
    logExpansionEvent(false,wasExpanded);
    if (wasExpanded != isExpanded()) {
      if (mIsSummaryWithChildren) {
        mChildrenContainer.updateGroupOverflow();
      }
      notifyHeightChanged(false);
    }
  }
}",0.8822055137844611
193176,"final void processNextBroadcast(boolean fromMsg){
synchronized (mService) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mParallelBroadcasts.size()+ ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    mService.updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      r.dispatchClockTime=System.currentTimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ target+ ""String_Node_Str""+ r);
        deliverToRegisteredReceiverLocked(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp);
      boolean isDead;
synchronized (mService.mPidsSelfLocked) {
        ProcessRecord proc=mService.mPidsSelfLocked.get(mPendingBroadcast.curApp.pid);
        isDead=proc == null || proc.crashing;
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp+ ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        mService.scheduleAppGcsLocked();
        if (looped) {
          mService.updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mService.mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * mTimeoutPeriod * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ ""String_Node_Str""+ now+ ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeoutLocked(false);
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.state+ ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST)             Slog.i(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent.getAction()+ ""String_Node_Str""+ r.callerApp);
            performReceiveLocked(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false,r.userId);
            r.resultTo=null;
          }
 catch (          RemoteException e) {
            r.resultTo=null;
            Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"");
        cancelBroadcastTimeoutLocked();
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      r.dispatchClockTime=System.currentTimeMillis();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (!mPendingBroadcastTimeoutMessage) {
      long timeoutTime=r.receiverTime + mTimeoutPeriod;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ timeoutTime);
      setBroadcastTimeoutLocked(timeoutTime);
    }
    final BroadcastOptions brOptions=r.options;
    final Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ filter+ ""String_Node_Str""+ r);
      deliverToRegisteredReceiverLocked(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.ordered+ ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
 else {
        if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
          scheduleTempWhitelistLocked(filter.owningUid,brOptions.getTemporaryAppWhitelistDuration(),r);
        }
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    ComponentName component=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    boolean skip=false;
    int perm=mService.checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.applicationInfo.uid,info.activityInfo.exported);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      if (!info.activityInfo.exported) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ component.flattenToShortString());
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ component.flattenToShortString());
      }
      skip=true;
    }
 else     if (info.activityInfo.permission != null) {
      final int opCode=AppOpsManager.permissionToOpCode(info.activityInfo.permission);
      if (opCode != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(opCode,r.callingUid,r.callerPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ AppOpsManager.permissionToOp(info.activityInfo.permission)+ ""String_Node_Str""+ component.flattenToShortString());
        skip=true;
      }
    }
    if (!skip && info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID && r.requiredPermissions != null && r.requiredPermissions.length > 0) {
      for (int i=0; i < r.requiredPermissions.length; i++) {
        String requiredPermission=r.requiredPermissions[i];
        try {
          perm=AppGlobals.getPackageManager().checkPermission(requiredPermission,info.activityInfo.applicationInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
        }
 catch (        RemoteException e) {
          perm=PackageManager.PERMISSION_DENIED;
        }
        if (perm != PackageManager.PERMISSION_GRANTED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
        int appOp=AppOpsManager.permissionToOpCode(requiredPermission);
        if (appOp != AppOpsManager.OP_NONE && appOp != r.appOp && mService.mAppOpsService.noteOperation(appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.permissionToOp(requiredPermission)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
      }
    }
    if (!skip && r.appOp != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(r.appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.opToName(r.appOp)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      skip=!mService.mIntentFirewall.checkBroadcast(r.intent,r.callingUid,r.callingPid,r.resolvedType,info.activityInfo.applicationInfo.uid);
    }
    boolean isSingleton=false;
    try {
      isSingleton=mService.isSingleton(info.activityInfo.processName,info.activityInfo.applicationInfo,info.activityInfo.name,info.activityInfo.flags);
    }
 catch (    SecurityException e) {
      Slog.w(TAG,e.getMessage());
      skip=true;
    }
    if ((info.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
      if (ActivityManager.checkUidPermission(android.Manifest.permission.INTERACT_ACROSS_USERS,info.activityInfo.applicationInfo.uid) != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + component.flattenToShortString() + ""String_Node_Str""+ android.Manifest.permission.INTERACT_ACROSS_USERS);
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      boolean isAvailable=false;
      try {
        isAvailable=AppGlobals.getPackageManager().isPackageAvailable(info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + info.activityInfo.packageName,e);
      }
      if (!isAvailable) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + info.activityInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (Build.PERMISSIONS_REVIEW_REQUIRED && !skip) {
      if (!requestStartTargetPermissionsReviewIfNeededLocked(r,info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid))) {
        skip=true;
      }
    }
    String targetProcess=info.activityInfo.processName;
    ProcessRecord app=mService.getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid,false);
    if (!skip) {
      final int allowed=mService.checkAllowBackgroundLocked(info.activityInfo.applicationInfo.uid,info.activityInfo.packageName,-1);
      if (allowed != ActivityManager.APP_START_MODE_NORMAL) {
        if (allowed == ActivityManager.APP_START_MODE_DISABLED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
        if (((r.intent.getFlags() & Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0) || (r.intent.getComponent() == null && r.intent.getPackage() == null && app == null && ((r.intent.getFlags() & Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0))) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
      }
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    r.curComponent=component;
    final int receiverUid=info.activityInfo.applicationInfo.uid;
    if (r.callingUid != Process.SYSTEM_UID && isSingleton && mService.isValidSingletonCall(r.callingUid,receiverUid)) {
      info.activityInfo=mService.getActivityInfoForUser(info.activityInfo,0);
    }
    r.curReceiver=info.activityInfo;
    if (DEBUG_MU && r.callingUid > UserHandle.PER_USER_RANGE) {
      Slog.v(TAG_MU,""String_Node_Str"" + info.activityInfo + ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid);
    }
    if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
      scheduleTempWhitelistLocked(receiverUid,brOptions.getTemporaryAppWhitelistDuration(),r);
    }
    try {
      AppGlobals.getPackageManager().setPackageStoppedState(r.curComponent.getPackageName(),false,UserHandle.getUserId(r.callingUid));
    }
 catch (    RemoteException e) {
    }
catch (    IllegalArgumentException e) {
      Slog.w(TAG,""String_Node_Str"" + r.curComponent.getPackageName() + ""String_Node_Str""+ e);
    }
    if (app != null && app.thread != null) {
      try {
        app.addPackage(info.activityInfo.packageName,info.activityInfo.applicationInfo.versionCode,mService.mProcessStats);
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
catch (      RuntimeException e) {
        Slog.wtf(TAG,""String_Node_Str"" + r.curComponent + ""String_Node_Str""+ r.intent,e);
        logBroadcastReceiverDiscardLocked(r);
        finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
        scheduleBroadcastsLocked();
        r.state=BroadcastRecord.IDLE;
        return;
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ targetProcess+ ""String_Node_Str""+ r);
    if ((r.curApp=mService.startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0,false,false)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscardLocked(r);
      finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}","final void processNextBroadcast(boolean fromMsg){
synchronized (mService) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mParallelBroadcasts.size()+ ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    mService.updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      r.dispatchClockTime=System.currentTimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ target+ ""String_Node_Str""+ r);
        deliverToRegisteredReceiverLocked(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp);
      boolean isDead;
synchronized (mService.mPidsSelfLocked) {
        ProcessRecord proc=mService.mPidsSelfLocked.get(mPendingBroadcast.curApp.pid);
        isDead=proc == null || proc.crashing;
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp+ ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        mService.scheduleAppGcsLocked();
        if (looped) {
          mService.updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mService.mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * mTimeoutPeriod * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ ""String_Node_Str""+ now+ ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeoutLocked(false);
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.state+ ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST)             Slog.i(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent.getAction()+ ""String_Node_Str""+ r.callerApp);
            performReceiveLocked(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false,r.userId);
            r.resultTo=null;
          }
 catch (          RemoteException e) {
            r.resultTo=null;
            Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"");
        cancelBroadcastTimeoutLocked();
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      r.dispatchClockTime=System.currentTimeMillis();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (!mPendingBroadcastTimeoutMessage) {
      long timeoutTime=r.receiverTime + mTimeoutPeriod;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ timeoutTime);
      setBroadcastTimeoutLocked(timeoutTime);
    }
    final BroadcastOptions brOptions=r.options;
    final Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ filter+ ""String_Node_Str""+ r);
      deliverToRegisteredReceiverLocked(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.ordered+ ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
 else {
        if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
          scheduleTempWhitelistLocked(filter.owningUid,brOptions.getTemporaryAppWhitelistDuration(),r);
        }
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    ComponentName component=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    boolean skip=false;
    int perm=mService.checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.applicationInfo.uid,info.activityInfo.exported);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      if (!info.activityInfo.exported) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ component.flattenToShortString());
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ component.flattenToShortString());
      }
      skip=true;
    }
 else     if (info.activityInfo.permission != null) {
      final int opCode=AppOpsManager.permissionToOpCode(info.activityInfo.permission);
      if (opCode != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(opCode,r.callingUid,r.callerPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ AppOpsManager.permissionToOp(info.activityInfo.permission)+ ""String_Node_Str""+ component.flattenToShortString());
        skip=true;
      }
    }
    if (!skip && info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID && r.requiredPermissions != null && r.requiredPermissions.length > 0) {
      for (int i=0; i < r.requiredPermissions.length; i++) {
        String requiredPermission=r.requiredPermissions[i];
        try {
          perm=AppGlobals.getPackageManager().checkPermission(requiredPermission,info.activityInfo.applicationInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
        }
 catch (        RemoteException e) {
          perm=PackageManager.PERMISSION_DENIED;
        }
        if (perm != PackageManager.PERMISSION_GRANTED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
        int appOp=AppOpsManager.permissionToOpCode(requiredPermission);
        if (appOp != AppOpsManager.OP_NONE && appOp != r.appOp && mService.mAppOpsService.noteOperation(appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.permissionToOp(requiredPermission)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
      }
    }
    if (!skip && r.appOp != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(r.appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.opToName(r.appOp)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      skip=!mService.mIntentFirewall.checkBroadcast(r.intent,r.callingUid,r.callingPid,r.resolvedType,info.activityInfo.applicationInfo.uid);
    }
    boolean isSingleton=false;
    try {
      isSingleton=mService.isSingleton(info.activityInfo.processName,info.activityInfo.applicationInfo,info.activityInfo.name,info.activityInfo.flags);
    }
 catch (    SecurityException e) {
      Slog.w(TAG,e.getMessage());
      skip=true;
    }
    if ((info.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
      if (ActivityManager.checkUidPermission(android.Manifest.permission.INTERACT_ACROSS_USERS,info.activityInfo.applicationInfo.uid) != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + component.flattenToShortString() + ""String_Node_Str""+ android.Manifest.permission.INTERACT_ACROSS_USERS);
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      boolean isAvailable=false;
      try {
        isAvailable=AppGlobals.getPackageManager().isPackageAvailable(info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + info.activityInfo.packageName,e);
      }
      if (!isAvailable) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + info.activityInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (Build.PERMISSIONS_REVIEW_REQUIRED && !skip) {
      if (!requestStartTargetPermissionsReviewIfNeededLocked(r,info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid))) {
        skip=true;
      }
    }
    final int receiverUid=info.activityInfo.applicationInfo.uid;
    if (r.callingUid != Process.SYSTEM_UID && isSingleton && mService.isValidSingletonCall(r.callingUid,receiverUid)) {
      info.activityInfo=mService.getActivityInfoForUser(info.activityInfo,0);
    }
    String targetProcess=info.activityInfo.processName;
    ProcessRecord app=mService.getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid,false);
    if (!skip) {
      final int allowed=mService.checkAllowBackgroundLocked(info.activityInfo.applicationInfo.uid,info.activityInfo.packageName,-1);
      if (allowed != ActivityManager.APP_START_MODE_NORMAL) {
        if (allowed == ActivityManager.APP_START_MODE_DISABLED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
        if (((r.intent.getFlags() & Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0) || (r.intent.getComponent() == null && r.intent.getPackage() == null && app == null && ((r.intent.getFlags() & Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0))) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
      }
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    r.curComponent=component;
    r.curReceiver=info.activityInfo;
    if (DEBUG_MU && r.callingUid > UserHandle.PER_USER_RANGE) {
      Slog.v(TAG_MU,""String_Node_Str"" + info.activityInfo + ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid);
    }
    if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
      scheduleTempWhitelistLocked(receiverUid,brOptions.getTemporaryAppWhitelistDuration(),r);
    }
    try {
      AppGlobals.getPackageManager().setPackageStoppedState(r.curComponent.getPackageName(),false,UserHandle.getUserId(r.callingUid));
    }
 catch (    RemoteException e) {
    }
catch (    IllegalArgumentException e) {
      Slog.w(TAG,""String_Node_Str"" + r.curComponent.getPackageName() + ""String_Node_Str""+ e);
    }
    if (app != null && app.thread != null) {
      try {
        app.addPackage(info.activityInfo.packageName,info.activityInfo.applicationInfo.versionCode,mService.mProcessStats);
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
catch (      RuntimeException e) {
        Slog.wtf(TAG,""String_Node_Str"" + r.curComponent + ""String_Node_Str""+ r.intent,e);
        logBroadcastReceiverDiscardLocked(r);
        finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
        scheduleBroadcastsLocked();
        r.state=BroadcastRecord.IDLE;
        return;
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ targetProcess+ ""String_Node_Str""+ r);
    if ((r.curApp=mService.startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0,false,false)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscardLocked(r);
      finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}",0.9824148525854742
193177,"final void processNextBroadcast(boolean fromMsg){
synchronized (mService) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mParallelBroadcasts.size()+ ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    mService.updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      r.dispatchClockTime=System.currentTimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ target+ ""String_Node_Str""+ r);
        deliverToRegisteredReceiverLocked(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp);
      boolean isDead;
synchronized (mService.mPidsSelfLocked) {
        ProcessRecord proc=mService.mPidsSelfLocked.get(mPendingBroadcast.curApp.pid);
        isDead=proc == null || proc.crashing;
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp+ ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        mService.scheduleAppGcsLocked();
        if (looped) {
          mService.updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mService.mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * mTimeoutPeriod * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ ""String_Node_Str""+ now+ ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeoutLocked(false);
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.state+ ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST)             Slog.i(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent.getAction()+ ""String_Node_Str""+ r.callerApp);
            performReceiveLocked(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false,r.userId);
            r.resultTo=null;
          }
 catch (          RemoteException e) {
            r.resultTo=null;
            Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"");
        cancelBroadcastTimeoutLocked();
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      r.dispatchClockTime=System.currentTimeMillis();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (!mPendingBroadcastTimeoutMessage) {
      long timeoutTime=r.receiverTime + mTimeoutPeriod;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ timeoutTime);
      setBroadcastTimeoutLocked(timeoutTime);
    }
    final BroadcastOptions brOptions=r.options;
    final Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ filter+ ""String_Node_Str""+ r);
      deliverToRegisteredReceiverLocked(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.ordered+ ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
 else {
        if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
          scheduleTempWhitelistLocked(filter.owningUid,brOptions.getTemporaryAppWhitelistDuration(),r);
        }
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    ComponentName component=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    boolean skip=false;
    int perm=mService.checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.applicationInfo.uid,info.activityInfo.exported);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      if (!info.activityInfo.exported) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ component.flattenToShortString());
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ component.flattenToShortString());
      }
      skip=true;
    }
 else     if (info.activityInfo.permission != null) {
      final int opCode=AppOpsManager.permissionToOpCode(info.activityInfo.permission);
      if (opCode != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(opCode,r.callingUid,r.callerPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ AppOpsManager.permissionToOp(info.activityInfo.permission)+ ""String_Node_Str""+ component.flattenToShortString());
        skip=true;
      }
    }
    if (!skip && info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID && r.requiredPermissions != null && r.requiredPermissions.length > 0) {
      for (int i=0; i < r.requiredPermissions.length; i++) {
        String requiredPermission=r.requiredPermissions[i];
        try {
          perm=AppGlobals.getPackageManager().checkPermission(requiredPermission,info.activityInfo.applicationInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
        }
 catch (        RemoteException e) {
          perm=PackageManager.PERMISSION_DENIED;
        }
        if (perm != PackageManager.PERMISSION_GRANTED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
        int appOp=AppOpsManager.permissionToOpCode(requiredPermission);
        if (appOp != AppOpsManager.OP_NONE && appOp != r.appOp && mService.mAppOpsService.noteOperation(appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.permissionToOp(requiredPermission)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
      }
    }
    if (!skip && r.appOp != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(r.appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.opToName(r.appOp)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      skip=!mService.mIntentFirewall.checkBroadcast(r.intent,r.callingUid,r.callingPid,r.resolvedType,info.activityInfo.applicationInfo.uid);
    }
    boolean isSingleton=false;
    try {
      isSingleton=mService.isSingleton(info.activityInfo.processName,info.activityInfo.applicationInfo,info.activityInfo.name,info.activityInfo.flags);
    }
 catch (    SecurityException e) {
      Slog.w(TAG,e.getMessage());
      skip=true;
    }
    if ((info.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
      if (ActivityManager.checkUidPermission(android.Manifest.permission.INTERACT_ACROSS_USERS,info.activityInfo.applicationInfo.uid) != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + component.flattenToShortString() + ""String_Node_Str""+ android.Manifest.permission.INTERACT_ACROSS_USERS);
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      boolean isAvailable=false;
      try {
        isAvailable=AppGlobals.getPackageManager().isPackageAvailable(info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + info.activityInfo.packageName,e);
      }
      if (!isAvailable) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + info.activityInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (Build.PERMISSIONS_REVIEW_REQUIRED && !skip) {
      if (!requestStartTargetPermissionsReviewIfNeededLocked(r,info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid))) {
        skip=true;
      }
    }
    String targetProcess=info.activityInfo.processName;
    ProcessRecord app=mService.getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid,false);
    if (!skip) {
      final int allowed=mService.checkAllowBackgroundLocked(info.activityInfo.applicationInfo.uid,info.activityInfo.packageName,-1);
      if (allowed != ActivityManager.APP_START_MODE_NORMAL) {
        if (allowed == ActivityManager.APP_START_MODE_DISABLED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
        if (((r.intent.getFlags() & Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0) || (r.intent.getComponent() == null && r.intent.getPackage() == null && app == null && ((r.intent.getFlags() & Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0))) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
      }
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    r.curComponent=component;
    final int receiverUid=info.activityInfo.applicationInfo.uid;
    if (r.callingUid != Process.SYSTEM_UID && isSingleton && mService.isValidSingletonCall(r.callingUid,receiverUid)) {
      info.activityInfo=mService.getActivityInfoForUser(info.activityInfo,0);
    }
    r.curReceiver=info.activityInfo;
    if (DEBUG_MU && r.callingUid > UserHandle.PER_USER_RANGE) {
      Slog.v(TAG_MU,""String_Node_Str"" + info.activityInfo + ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid);
    }
    if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
      scheduleTempWhitelistLocked(receiverUid,brOptions.getTemporaryAppWhitelistDuration(),r);
    }
    try {
      AppGlobals.getPackageManager().setPackageStoppedState(r.curComponent.getPackageName(),false,UserHandle.getUserId(r.callingUid));
    }
 catch (    RemoteException e) {
    }
catch (    IllegalArgumentException e) {
      Slog.w(TAG,""String_Node_Str"" + r.curComponent.getPackageName() + ""String_Node_Str""+ e);
    }
    if (app != null && app.thread != null) {
      try {
        app.addPackage(info.activityInfo.packageName,info.activityInfo.applicationInfo.versionCode,mService.mProcessStats);
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
catch (      RuntimeException e) {
        Slog.wtf(TAG,""String_Node_Str"" + r.curComponent + ""String_Node_Str""+ r.intent,e);
        logBroadcastReceiverDiscardLocked(r);
        finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
        scheduleBroadcastsLocked();
        r.state=BroadcastRecord.IDLE;
        return;
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ targetProcess+ ""String_Node_Str""+ r);
    if ((r.curApp=mService.startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0,false,false)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscardLocked(r);
      finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}","final void processNextBroadcast(boolean fromMsg){
synchronized (mService) {
    BroadcastRecord r;
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mParallelBroadcasts.size()+ ""String_Node_Str""+ mOrderedBroadcasts.size()+ ""String_Node_Str"");
    mService.updateCpuStats();
    if (fromMsg) {
      mBroadcastsScheduled=false;
    }
    while (mParallelBroadcasts.size() > 0) {
      r=mParallelBroadcasts.remove(0);
      r.dispatchTime=SystemClock.uptimeMillis();
      r.dispatchClockTime=System.currentTimeMillis();
      final int N=r.receivers.size();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
      for (int i=0; i < N; i++) {
        Object target=r.receivers.get(i);
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ target+ ""String_Node_Str""+ r);
        deliverToRegisteredReceiverLocked(r,(BroadcastFilter)target,false);
      }
      addBroadcastToHistoryLocked(r);
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (mPendingBroadcast != null) {
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp);
      boolean isDead;
synchronized (mService.mPidsSelfLocked) {
        ProcessRecord proc=mService.mPidsSelfLocked.get(mPendingBroadcast.curApp.pid);
        isDead=proc == null || proc.crashing;
      }
      if (!isDead) {
        return;
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ mPendingBroadcast.curApp+ ""String_Node_Str"");
        mPendingBroadcast.state=BroadcastRecord.IDLE;
        mPendingBroadcast.nextReceiver=mPendingBroadcastRecvIndex;
        mPendingBroadcast=null;
      }
    }
    boolean looped=false;
    do {
      if (mOrderedBroadcasts.size() == 0) {
        mService.scheduleAppGcsLocked();
        if (looped) {
          mService.updateOomAdjLocked();
        }
        return;
      }
      r=mOrderedBroadcasts.get(0);
      boolean forceReceive=false;
      int numReceivers=(r.receivers != null) ? r.receivers.size() : 0;
      if (mService.mProcessesReady && r.dispatchTime > 0) {
        long now=SystemClock.uptimeMillis();
        if ((numReceivers > 0) && (now > r.dispatchTime + (2 * mTimeoutPeriod * numReceivers))) {
          Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ ""String_Node_Str""+ now+ ""String_Node_Str""+ r.dispatchTime+ ""String_Node_Str""+ r.receiverTime+ ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ numReceivers+ ""String_Node_Str""+ r.nextReceiver+ ""String_Node_Str""+ r.state);
          broadcastTimeoutLocked(false);
          forceReceive=true;
          r.state=BroadcastRecord.IDLE;
        }
      }
      if (r.state != BroadcastRecord.IDLE) {
        if (DEBUG_BROADCAST)         Slog.d(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.state+ ""String_Node_Str"");
        return;
      }
      if (r.receivers == null || r.nextReceiver >= numReceivers || r.resultAbort || forceReceive) {
        if (r.resultTo != null) {
          try {
            if (DEBUG_BROADCAST)             Slog.i(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent.getAction()+ ""String_Node_Str""+ r.callerApp);
            performReceiveLocked(r.callerApp,r.resultTo,new Intent(r.intent),r.resultCode,r.resultData,r.resultExtras,false,false,r.userId);
            r.resultTo=null;
          }
 catch (          RemoteException e) {
            r.resultTo=null;
            Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.intent,e);
          }
        }
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"");
        cancelBroadcastTimeoutLocked();
        if (DEBUG_BROADCAST_LIGHT)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + r);
        addBroadcastToHistoryLocked(r);
        mOrderedBroadcasts.remove(0);
        r=null;
        looped=true;
        continue;
      }
    }
 while (r == null);
    int recIdx=r.nextReceiver++;
    r.receiverTime=SystemClock.uptimeMillis();
    if (recIdx == 0) {
      r.dispatchTime=r.receiverTime;
      r.dispatchClockTime=System.currentTimeMillis();
      if (DEBUG_BROADCAST_LIGHT)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r);
    }
    if (!mPendingBroadcastTimeoutMessage) {
      long timeoutTime=r.receiverTime + mTimeoutPeriod;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ timeoutTime);
      setBroadcastTimeoutLocked(timeoutTime);
    }
    final BroadcastOptions brOptions=r.options;
    final Object nextReceiver=r.receivers.get(recIdx);
    if (nextReceiver instanceof BroadcastFilter) {
      BroadcastFilter filter=(BroadcastFilter)nextReceiver;
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ filter+ ""String_Node_Str""+ r);
      deliverToRegisteredReceiverLocked(r,filter,r.ordered);
      if (r.receiver == null || !r.ordered) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r.ordered+ ""String_Node_Str""+ r.receiver);
        r.state=BroadcastRecord.IDLE;
        scheduleBroadcastsLocked();
      }
 else {
        if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
          scheduleTempWhitelistLocked(filter.owningUid,brOptions.getTemporaryAppWhitelistDuration(),r);
        }
      }
      return;
    }
    ResolveInfo info=(ResolveInfo)nextReceiver;
    ComponentName component=new ComponentName(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);
    boolean skip=false;
    int perm=mService.checkComponentPermission(info.activityInfo.permission,r.callingPid,r.callingUid,info.activityInfo.applicationInfo.uid,info.activityInfo.exported);
    if (perm != PackageManager.PERMISSION_GRANTED) {
      if (!info.activityInfo.exported) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ component.flattenToShortString());
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ info.activityInfo.permission+ ""String_Node_Str""+ component.flattenToShortString());
      }
      skip=true;
    }
 else     if (info.activityInfo.permission != null) {
      final int opCode=AppOpsManager.permissionToOpCode(info.activityInfo.permission);
      if (opCode != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(opCode,r.callingUid,r.callerPackage) != AppOpsManager.MODE_ALLOWED) {
        Slog.w(TAG,""String_Node_Str"" + r.intent.toString() + ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingPid+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ AppOpsManager.permissionToOp(info.activityInfo.permission)+ ""String_Node_Str""+ component.flattenToShortString());
        skip=true;
      }
    }
    if (!skip && info.activityInfo.applicationInfo.uid != Process.SYSTEM_UID && r.requiredPermissions != null && r.requiredPermissions.length > 0) {
      for (int i=0; i < r.requiredPermissions.length; i++) {
        String requiredPermission=r.requiredPermissions[i];
        try {
          perm=AppGlobals.getPackageManager().checkPermission(requiredPermission,info.activityInfo.applicationInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
        }
 catch (        RemoteException e) {
          perm=PackageManager.PERMISSION_DENIED;
        }
        if (perm != PackageManager.PERMISSION_GRANTED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ requiredPermission+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
        int appOp=AppOpsManager.permissionToOpCode(requiredPermission);
        if (appOp != AppOpsManager.OP_NONE && appOp != r.appOp && mService.mAppOpsService.noteOperation(appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.permissionToOp(requiredPermission)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
          skip=true;
          break;
        }
      }
    }
    if (!skip && r.appOp != AppOpsManager.OP_NONE && mService.mAppOpsService.noteOperation(r.appOp,info.activityInfo.applicationInfo.uid,info.activityInfo.packageName) != AppOpsManager.MODE_ALLOWED) {
      Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString()+ ""String_Node_Str""+ AppOpsManager.opToName(r.appOp)+ ""String_Node_Str""+ r.callerPackage+ ""String_Node_Str""+ r.callingUid+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      skip=!mService.mIntentFirewall.checkBroadcast(r.intent,r.callingUid,r.callingPid,r.resolvedType,info.activityInfo.applicationInfo.uid);
    }
    boolean isSingleton=false;
    try {
      isSingleton=mService.isSingleton(info.activityInfo.processName,info.activityInfo.applicationInfo,info.activityInfo.name,info.activityInfo.flags);
    }
 catch (    SecurityException e) {
      Slog.w(TAG,e.getMessage());
      skip=true;
    }
    if ((info.activityInfo.flags & ActivityInfo.FLAG_SINGLE_USER) != 0) {
      if (ActivityManager.checkUidPermission(android.Manifest.permission.INTERACT_ACROSS_USERS,info.activityInfo.applicationInfo.uid) != PackageManager.PERMISSION_GRANTED) {
        Slog.w(TAG,""String_Node_Str"" + component.flattenToShortString() + ""String_Node_Str""+ android.Manifest.permission.INTERACT_ACROSS_USERS);
        skip=true;
      }
    }
    if (r.curApp != null && r.curApp.crashing) {
      Slog.w(TAG,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str""+ r.curApp+ ""String_Node_Str"");
      skip=true;
    }
    if (!skip) {
      boolean isAvailable=false;
      try {
        isAvailable=AppGlobals.getPackageManager().isPackageAvailable(info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid));
      }
 catch (      Exception e) {
        Slog.w(TAG,""String_Node_Str"" + info.activityInfo.packageName,e);
      }
      if (!isAvailable) {
        if (DEBUG_BROADCAST)         Slog.v(TAG_BROADCAST,""String_Node_Str"" + info.activityInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str"");
        skip=true;
      }
    }
    if (Build.PERMISSIONS_REVIEW_REQUIRED && !skip) {
      if (!requestStartTargetPermissionsReviewIfNeededLocked(r,info.activityInfo.packageName,UserHandle.getUserId(info.activityInfo.applicationInfo.uid))) {
        skip=true;
      }
    }
    final int receiverUid=info.activityInfo.applicationInfo.uid;
    if (r.callingUid != Process.SYSTEM_UID && isSingleton && mService.isValidSingletonCall(r.callingUid,receiverUid)) {
      info.activityInfo=mService.getActivityInfoForUser(info.activityInfo,0);
    }
    String targetProcess=info.activityInfo.processName;
    ProcessRecord app=mService.getProcessRecordLocked(targetProcess,info.activityInfo.applicationInfo.uid,false);
    if (!skip) {
      final int allowed=mService.checkAllowBackgroundLocked(info.activityInfo.applicationInfo.uid,info.activityInfo.packageName,-1);
      if (allowed != ActivityManager.APP_START_MODE_NORMAL) {
        if (allowed == ActivityManager.APP_START_MODE_DISABLED) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
        if (((r.intent.getFlags() & Intent.FLAG_RECEIVER_EXCLUDE_BACKGROUND) != 0) || (r.intent.getComponent() == null && r.intent.getPackage() == null && app == null && ((r.intent.getFlags() & Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND) == 0))) {
          Slog.w(TAG,""String_Node_Str"" + r.intent + ""String_Node_Str""+ component.flattenToShortString());
          skip=true;
        }
      }
    }
    if (skip) {
      if (DEBUG_BROADCAST)       Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ r+ ""String_Node_Str"");
      r.receiver=null;
      r.curFilter=null;
      r.state=BroadcastRecord.IDLE;
      scheduleBroadcastsLocked();
      return;
    }
    r.state=BroadcastRecord.APP_RECEIVE;
    r.curComponent=component;
    r.curReceiver=info.activityInfo;
    if (DEBUG_MU && r.callingUid > UserHandle.PER_USER_RANGE) {
      Slog.v(TAG_MU,""String_Node_Str"" + info.activityInfo + ""String_Node_Str""+ r.callingUid+ ""String_Node_Str""+ info.activityInfo.applicationInfo.uid);
    }
    if (brOptions != null && brOptions.getTemporaryAppWhitelistDuration() > 0) {
      scheduleTempWhitelistLocked(receiverUid,brOptions.getTemporaryAppWhitelistDuration(),r);
    }
    try {
      AppGlobals.getPackageManager().setPackageStoppedState(r.curComponent.getPackageName(),false,UserHandle.getUserId(r.callingUid));
    }
 catch (    RemoteException e) {
    }
catch (    IllegalArgumentException e) {
      Slog.w(TAG,""String_Node_Str"" + r.curComponent.getPackageName() + ""String_Node_Str""+ e);
    }
    if (app != null && app.thread != null) {
      try {
        app.addPackage(info.activityInfo.packageName,info.activityInfo.applicationInfo.versionCode,mService.mProcessStats);
        processCurBroadcastLocked(r,app);
        return;
      }
 catch (      RemoteException e) {
        Slog.w(TAG,""String_Node_Str"" + r.curComponent,e);
      }
catch (      RuntimeException e) {
        Slog.wtf(TAG,""String_Node_Str"" + r.curComponent + ""String_Node_Str""+ r.intent,e);
        logBroadcastReceiverDiscardLocked(r);
        finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
        scheduleBroadcastsLocked();
        r.state=BroadcastRecord.IDLE;
        return;
      }
    }
    if (DEBUG_BROADCAST)     Slog.v(TAG_BROADCAST,""String_Node_Str"" + mQueueName + ""String_Node_Str""+ targetProcess+ ""String_Node_Str""+ r);
    if ((r.curApp=mService.startProcessLocked(targetProcess,info.activityInfo.applicationInfo,true,r.intent.getFlags() | Intent.FLAG_FROM_BACKGROUND,""String_Node_Str"",r.curComponent,(r.intent.getFlags() & Intent.FLAG_RECEIVER_BOOT_UPGRADE) != 0,false,false)) == null) {
      Slog.w(TAG,""String_Node_Str"" + info.activityInfo.applicationInfo.packageName + ""String_Node_Str""+ info.activityInfo.applicationInfo.uid+ ""String_Node_Str""+ r.intent+ ""String_Node_Str"");
      logBroadcastReceiverDiscardLocked(r);
      finishReceiverLocked(r,r.resultCode,r.resultData,r.resultExtras,r.resultAbort,false);
      scheduleBroadcastsLocked();
      r.state=BroadcastRecord.IDLE;
      return;
    }
    mPendingBroadcast=r;
    mPendingBroadcastRecvIndex=recIdx;
  }
}",0.9824148525854742
193178,"protected boolean inflateViews(Entry entry,ViewGroup parent){
  PackageManager pmUser=getPackageManagerForUser(mContext,entry.notification.getUser().getIdentifier());
  final StatusBarNotification sbn=entry.notification;
  entry.cacheContentViews(mContext,null);
  final RemoteViews contentView=entry.cachedContentView;
  final RemoteViews bigContentView=entry.cachedBigContentView;
  final RemoteViews headsUpContentView=entry.cachedHeadsUpContentView;
  final RemoteViews publicContentView=entry.cachedPublicContentView;
  if (contentView == null) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification());
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + publicContentView);
  }
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
    row.setGroupManager(mGroupManager);
    row.setOnExpandClickListener(this);
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView contentContainer=row.getPrivateLayout();
  NotificationContentView contentContainerPublic=row.getPublicLayout();
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  if (ENABLE_REMOTE_INPUT) {
    row.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);
  }
  mNotificationClicker.register(row,sbn);
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  View headsUpContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    }
    if (headsUpContentView != null) {
      headsUpContentViewLocal=headsUpContentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    contentContainer.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    contentContainer.setExpandedChild(bigContentViewLocal);
  }
  if (headsUpContentViewLocal != null) {
    headsUpContentViewLocal.setIsRootNamespace(true);
    contentContainer.setHeadsUpChild(headsUpContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicContentView != null) {
    try {
      publicViewLocal=publicContentView.apply(sbn.getPackageContext(mContext),contentContainerPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        contentContainerPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,contentContainerPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getUser(),entry.notification.getPackageName(),entry.notification.getNotification().getSmallIcon(),entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    contentContainerPublic.setContractedChild(publicViewLocal);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  updateNotificationHeightRange(entry);
  entry.row.setOnActivatedListener(this);
  entry.row.setExpandable(bigContentViewLocal != null);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.updateStatusBarNotification(entry.notification);
  applyRemoteInput(entry);
  return true;
}","protected boolean inflateViews(Entry entry,ViewGroup parent){
  PackageManager pmUser=getPackageManagerForUser(mContext,entry.notification.getUser().getIdentifier());
  final StatusBarNotification sbn=entry.notification;
  entry.cacheContentViews(mContext,null);
  final RemoteViews contentView=entry.cachedContentView;
  final RemoteViews bigContentView=entry.cachedBigContentView;
  final RemoteViews headsUpContentView=entry.cachedHeadsUpContentView;
  final RemoteViews publicContentView=entry.cachedPublicContentView;
  if (contentView == null) {
    Log.v(TAG,""String_Node_Str"" + sbn.getNotification());
    return false;
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + publicContentView);
  }
  ExpandableNotificationRow row;
  boolean hasUserChangedExpansion=false;
  boolean userExpanded=false;
  boolean userLocked=false;
  if (entry.row != null) {
    row=entry.row;
    hasUserChangedExpansion=row.hasUserChangedExpansion();
    userExpanded=row.isUserExpanded();
    userLocked=row.isUserLocked();
    entry.reset();
    if (hasUserChangedExpansion) {
      row.setUserExpanded(userExpanded);
    }
  }
 else {
    LayoutInflater inflater=(LayoutInflater)mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    row=(ExpandableNotificationRow)inflater.inflate(R.layout.status_bar_notification_row,parent,false);
    row.setExpansionLogger(this,entry.notification.getKey());
    row.setGroupManager(mGroupManager);
    row.setOnExpandClickListener(this);
  }
  workAroundBadLayerDrawableOpacity(row);
  View vetoButton=updateNotificationVetoButton(row,sbn);
  vetoButton.setContentDescription(mContext.getString(R.string.accessibility_remove_notification));
  NotificationContentView contentContainer=row.getPrivateLayout();
  NotificationContentView contentContainerPublic=row.getPublicLayout();
  row.setDescendantFocusability(ViewGroup.FOCUS_BLOCK_DESCENDANTS);
  if (ENABLE_REMOTE_INPUT) {
    row.setDescendantFocusability(ViewGroup.FOCUS_BEFORE_DESCENDANTS);
  }
  mNotificationClicker.register(row,sbn);
  View contentViewLocal=null;
  View bigContentViewLocal=null;
  View headsUpContentViewLocal=null;
  try {
    contentViewLocal=contentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    if (bigContentView != null) {
      bigContentViewLocal=bigContentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    }
    if (headsUpContentView != null) {
      headsUpContentViewLocal=headsUpContentView.apply(sbn.getPackageContext(mContext),contentContainer,mOnClickHandler);
    }
  }
 catch (  RuntimeException e) {
    final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
    Log.e(TAG,""String_Node_Str"" + ident,e);
    return false;
  }
  if (contentViewLocal != null) {
    contentViewLocal.setIsRootNamespace(true);
    contentContainer.setContractedChild(contentViewLocal);
  }
  if (bigContentViewLocal != null) {
    bigContentViewLocal.setIsRootNamespace(true);
    contentContainer.setExpandedChild(bigContentViewLocal);
  }
  if (headsUpContentViewLocal != null) {
    headsUpContentViewLocal.setIsRootNamespace(true);
    contentContainer.setHeadsUpChild(headsUpContentViewLocal);
  }
  View publicViewLocal=null;
  if (publicContentView != null) {
    try {
      publicViewLocal=publicContentView.apply(sbn.getPackageContext(mContext),contentContainerPublic,mOnClickHandler);
      if (publicViewLocal != null) {
        publicViewLocal.setIsRootNamespace(true);
        contentContainerPublic.setContractedChild(publicViewLocal);
      }
    }
 catch (    RuntimeException e) {
      final String ident=sbn.getPackageName() + ""String_Node_Str"" + Integer.toHexString(sbn.getId());
      Log.e(TAG,""String_Node_Str"" + ident,e);
      publicViewLocal=null;
    }
  }
  try {
    ApplicationInfo info=pmUser.getApplicationInfo(sbn.getPackageName(),0);
    entry.targetSdk=info.targetSdkVersion;
  }
 catch (  NameNotFoundException ex) {
    Log.e(TAG,""String_Node_Str"" + sbn.getPackageName(),ex);
  }
  if (publicViewLocal == null) {
    publicViewLocal=LayoutInflater.from(mContext).inflate(R.layout.notification_public_default,contentContainerPublic,false);
    publicViewLocal.setIsRootNamespace(true);
    final TextView title=(TextView)publicViewLocal.findViewById(R.id.title);
    try {
      title.setText(pmUser.getApplicationLabel(pmUser.getApplicationInfo(entry.notification.getPackageName(),0)));
    }
 catch (    NameNotFoundException e) {
      title.setText(entry.notification.getPackageName());
    }
    final ImageView icon=(ImageView)publicViewLocal.findViewById(R.id.icon);
    final ImageView profileBadge=(ImageView)publicViewLocal.findViewById(R.id.profile_badge_line3);
    final StatusBarIcon ic=new StatusBarIcon(entry.notification.getUser(),entry.notification.getPackageName(),entry.notification.getNotification().getSmallIcon(),entry.notification.getNotification().iconLevel,entry.notification.getNotification().number,entry.notification.getNotification().tickerText);
    Drawable iconDrawable=StatusBarIconView.getIcon(mContext,ic);
    icon.setImageDrawable(iconDrawable);
    if (profileBadge != null) {
      Drawable profileDrawable=mContext.getPackageManager().getUserBadgeForDensity(entry.notification.getUser(),0);
      if (profileDrawable != null) {
        profileBadge.setImageDrawable(profileDrawable);
        profileBadge.setVisibility(View.VISIBLE);
      }
 else {
        profileBadge.setVisibility(View.GONE);
      }
    }
    final View privateTime=contentViewLocal.findViewById(com.android.internal.R.id.time);
    final DateTimeView time=(DateTimeView)publicViewLocal.findViewById(R.id.time);
    if (privateTime != null && privateTime.getVisibility() == View.VISIBLE) {
      time.setVisibility(View.VISIBLE);
      time.setTime(entry.notification.getNotification().when);
    }
    final TextView text=(TextView)publicViewLocal.findViewById(R.id.text);
    if (text != null) {
      text.setText(R.string.notification_hidden_text);
      text.setTextAppearance(mContext,R.style.TextAppearance_Material_Notification_Parenthetical);
    }
    contentContainerPublic.setContractedChild(publicViewLocal);
    entry.autoRedacted=true;
  }
  if (MULTIUSER_DEBUG) {
    TextView debug=(TextView)row.findViewById(R.id.debug_info);
    if (debug != null) {
      debug.setVisibility(View.VISIBLE);
      debug.setText(""String_Node_Str"" + mCurrentUserId + ""String_Node_Str""+ entry.notification.getUserId());
    }
  }
  entry.row=row;
  entry.row.setOnActivatedListener(this);
  entry.row.setExpandable(bigContentViewLocal != null);
  applyColorsAndBackgrounds(sbn,entry);
  if (hasUserChangedExpansion) {
    row.setUserExpanded(userExpanded);
  }
  row.setUserLocked(userLocked);
  row.onNotificationUpdated(entry);
  applyRemoteInput(entry);
  return true;
}",0.9935286846506216
193179,"private void updateNotificationViews(Entry entry,StatusBarNotification sbn){
  final RemoteViews contentView=entry.cachedContentView;
  final RemoteViews bigContentView=entry.cachedBigContentView;
  final RemoteViews headsUpContentView=entry.cachedHeadsUpContentView;
  final RemoteViews publicContentView=entry.cachedPublicContentView;
  contentView.reapply(mContext,entry.getContentView(),mOnClickHandler);
  if (bigContentView != null && entry.getExpandedContentView() != null) {
    bigContentView.reapply(sbn.getPackageContext(mContext),entry.getExpandedContentView(),mOnClickHandler);
  }
  View headsUpChild=entry.getHeadsUpContentView();
  if (headsUpContentView != null && headsUpChild != null) {
    headsUpContentView.reapply(sbn.getPackageContext(mContext),headsUpChild,mOnClickHandler);
  }
  if (publicContentView != null && entry.getPublicContentView() != null) {
    publicContentView.reapply(sbn.getPackageContext(mContext),entry.getPublicContentView(),mOnClickHandler);
  }
  mNotificationClicker.register(entry.row,sbn);
  entry.row.updateStatusBarNotification(entry.notification);
  entry.row.resetHeight();
  applyRemoteInput(entry);
}","private void updateNotificationViews(Entry entry,StatusBarNotification sbn){
  final RemoteViews contentView=entry.cachedContentView;
  final RemoteViews bigContentView=entry.cachedBigContentView;
  final RemoteViews headsUpContentView=entry.cachedHeadsUpContentView;
  final RemoteViews publicContentView=entry.cachedPublicContentView;
  contentView.reapply(mContext,entry.getContentView(),mOnClickHandler);
  if (bigContentView != null && entry.getExpandedContentView() != null) {
    bigContentView.reapply(sbn.getPackageContext(mContext),entry.getExpandedContentView(),mOnClickHandler);
  }
  View headsUpChild=entry.getHeadsUpContentView();
  if (headsUpContentView != null && headsUpChild != null) {
    headsUpContentView.reapply(sbn.getPackageContext(mContext),headsUpChild,mOnClickHandler);
  }
  if (publicContentView != null && entry.getPublicContentView() != null) {
    publicContentView.reapply(sbn.getPackageContext(mContext),entry.getPublicContentView(),mOnClickHandler);
  }
  mNotificationClicker.register(entry.row,sbn);
  entry.row.onNotificationUpdated(entry);
  entry.row.resetHeight();
  applyRemoteInput(entry);
}",0.9786306149149586
193180,"private void updateChildrenVisibility(boolean animated){
  if (mChildrenContainer == null) {
    return;
  }
  mChildrenContainer.setVisibility(mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
  mNotificationHeader.setVisibility(mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
  mPrivateLayout.setVisibility(!mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
}","private void updateChildrenVisibility(){
  if (mChildrenContainer == null) {
    return;
  }
  mChildrenContainer.setVisibility(mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
  mNotificationHeader.setVisibility(mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
  mPrivateLayout.setVisibility(!mIsSummaryWithChildren ? VISIBLE : INVISIBLE);
  updateLimits();
}",0.952112676056338
193181,"private void onChildrenCountChanged(){
  mIsSummaryWithChildren=BaseStatusBar.ENABLE_CHILD_NOTIFICATIONS && mGroupManager.hasGroupChildren(mStatusBarNotification);
  if (mIsSummaryWithChildren) {
    if (mChildrenContainer == null) {
      mChildrenContainerStub.inflate();
    }
    if (mNotificationHeader == null) {
      recreateNotificationHeader();
    }
  }
  mPrivateLayout.updateExpandButtons(isExpandable());
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
  updateChildrenVisibility(true);
}","private void onChildrenCountChanged(){
  mIsSummaryWithChildren=BaseStatusBar.ENABLE_CHILD_NOTIFICATIONS && mGroupManager.hasGroupChildren(mStatusBarNotification);
  if (mIsSummaryWithChildren) {
    if (mChildrenContainer == null) {
      mChildrenContainerStub.inflate();
    }
    if (mNotificationHeader == null) {
      recreateNotificationHeader();
    }
  }
  mPrivateLayout.updateExpandButtons(isExpandable());
  updateChildrenHeaderAppearance();
  updateHeaderChildCount();
  updateChildrenVisibility();
}",0.996124031007752
193182,"public ExpandableNotificationRow(Context context,AttributeSet attrs){
  super(context,attrs);
  mFalsingManager=FalsingManager.getInstance(context);
}","public ExpandableNotificationRow(Context context,AttributeSet attrs){
  super(context,attrs);
  mFalsingManager=FalsingManager.getInstance(context);
  mNotificationMinHeightLegacy=getResources().getDimensionPixelSize(R.dimen.notification_min_height_legacy);
  mNotificationMinHeight=getResources().getDimensionPixelSize(R.dimen.notification_min_height);
  mNotificationMaxHeight=getResources().getDimensionPixelSize(R.dimen.notification_max_height);
}",0.4991680532445923
193183,"protected void loadDimens(){
  final Resources res=mContext.getResources();
  mNaturalBarHeight=res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
  mRowMinHeightLegacy=res.getDimensionPixelSize(R.dimen.notification_min_height_legacy);
  mRowMinHeight=res.getDimensionPixelSize(R.dimen.notification_min_height);
  mRowMaxHeight=res.getDimensionPixelSize(R.dimen.notification_max_height);
  mMaxAllowedKeyguardNotifications=res.getInteger(R.integer.keyguard_max_notification_count);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
}","protected void loadDimens(){
  final Resources res=mContext.getResources();
  mNaturalBarHeight=res.getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
  mMaxAllowedKeyguardNotifications=res.getInteger(R.integer.keyguard_max_notification_count);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
}",0.7207415990730012
193184,"@Override public void setDark(boolean dark,boolean fade,long delay){
  if (mInvertHelper != null) {
    if (fade) {
      mInvertHelper.fade(dark,delay);
    }
 else {
      mInvertHelper.update(dark);
    }
  }
  if (mIcon != null) {
    if (fade) {
      fadeIconColorFilter(mIcon,dark,delay);
      fadeIconAlpha(mIcon,dark,delay);
    }
 else {
      updateIconColorFilter(mIcon,dark);
      updateIconAlpha(mIcon,dark);
    }
  }
  setPictureGrayscale(dark,fade,delay);
  setProgressBarDark(dark,fade,delay);
}","@Override public void setDark(boolean dark,boolean fade,long delay){
  if (mInvertHelper != null) {
    if (fade) {
      mInvertHelper.fade(dark,delay);
    }
 else {
      mInvertHelper.update(dark);
    }
  }
  if (mIcon != null) {
    boolean hadColorFilter=mNotificationHeader.getOriginalIconColor() != NotificationHeaderView.NO_COLOR;
    if (fade) {
      if (hadColorFilter) {
        fadeIconColorFilter(mIcon,dark,delay);
        fadeIconAlpha(mIcon,dark,delay);
      }
 else {
        fadeGrayscale(mIcon,dark,delay);
      }
    }
 else {
      if (hadColorFilter) {
        updateIconColorFilter(mIcon,dark);
        updateIconAlpha(mIcon,dark);
      }
 else {
        updateGrayscale(mIcon,dark);
      }
    }
  }
  setPictureGrayscale(dark,fade,delay);
  setProgressBarDark(dark,fade,delay);
}",0.6923076923076923
193185,"/** 
 * Called by UserManagerService 
 */
void cleanUpUser(UserManagerService userManager,int userHandle){
synchronized (mPackages) {
    mDirtyUsers.remove(userHandle);
    mUserNeedsBadging.delete(userHandle);
    mSettings.removeUserLPw(userHandle);
    mPendingBroadcasts.remove(userHandle);
  }
synchronized (mInstallLock) {
    if (mInstaller != null) {
      final StorageManager storage=mContext.getSystemService(StorageManager.class);
      for (      VolumeInfo vol : storage.getWritablePrivateVolumes()) {
        final String volumeUuid=vol.getFsUuid();
        if (DEBUG_INSTALL)         Slog.d(TAG,""String_Node_Str"" + volumeUuid);
        mInstaller.removeUserDataDirs(volumeUuid,userHandle);
      }
    }
synchronized (mPackages) {
      removeUnusedPackagesLILPw(userManager,userHandle);
    }
  }
}","/** 
 * Called by UserManagerService 
 */
void cleanUpUser(UserManagerService userManager,int userHandle){
synchronized (mPackages) {
    mDirtyUsers.remove(userHandle);
    mUserNeedsBadging.delete(userHandle);
    mSettings.removeUserLPw(userHandle);
    mPendingBroadcasts.remove(userHandle);
  }
synchronized (mInstallLock) {
    final StorageManager storage=mContext.getSystemService(StorageManager.class);
    for (    VolumeInfo vol : storage.getWritablePrivateVolumes()) {
      final String volumeUuid=vol.getFsUuid();
      if (DEBUG_INSTALL)       Slog.d(TAG,""String_Node_Str"" + volumeUuid);
      mInstaller.removeUserDataDirs(volumeUuid,userHandle);
    }
synchronized (mPackages) {
      removeUnusedPackagesLILPw(userManager,userHandle);
    }
  }
}",0.7481012658227848
193186,"/** 
 * Called by UserManagerService 
 */
void createNewUser(int userHandle){
  if (mInstaller != null) {
synchronized (mInstallLock) {
synchronized (mPackages) {
        mInstaller.createUserConfig(userHandle);
        mSettings.createNewUserLILPw(this,mInstaller,userHandle);
      }
    }
synchronized (mPackages) {
      applyFactoryDefaultBrowserLPw(userHandle);
      primeDomainVerificationsLPw(userHandle);
    }
  }
}","/** 
 * Called by UserManagerService 
 */
void createNewUser(int userHandle){
synchronized (mInstallLock) {
    mInstaller.createUserConfig(userHandle);
    mSettings.createNewUserLI(this,mInstaller,userHandle);
  }
synchronized (mPackages) {
    applyFactoryDefaultBrowserLPw(userHandle);
    primeDomainVerificationsLPw(userHandle);
  }
}",0.4412532637075718
193187,"/** 
 * Called by UserManagerService 
 */
void cleanUpUser(UserManagerService userManager,int userHandle){
synchronized (mPackages) {
    mDirtyUsers.remove(userHandle);
    mUserNeedsBadging.delete(userHandle);
    mSettings.removeUserLPw(userHandle);
    mPendingBroadcasts.remove(userHandle);
  }
synchronized (mInstallLock) {
    if (mInstaller != null) {
      final StorageManager storage=mContext.getSystemService(StorageManager.class);
      for (      VolumeInfo vol : storage.getWritablePrivateVolumes()) {
        final String volumeUuid=vol.getFsUuid();
        if (DEBUG_INSTALL)         Slog.d(TAG,""String_Node_Str"" + volumeUuid);
        mInstaller.removeUserDataDirs(volumeUuid,userHandle);
      }
    }
synchronized (mPackages) {
      removeUnusedPackagesLILPw(userManager,userHandle);
    }
  }
}","/** 
 * Called by UserManagerService 
 */
void cleanUpUser(UserManagerService userManager,int userHandle){
synchronized (mPackages) {
    mDirtyUsers.remove(userHandle);
    mUserNeedsBadging.delete(userHandle);
    mSettings.removeUserLPw(userHandle);
    mPendingBroadcasts.remove(userHandle);
  }
synchronized (mInstallLock) {
    final StorageManager storage=mContext.getSystemService(StorageManager.class);
    for (    VolumeInfo vol : storage.getWritablePrivateVolumes()) {
      final String volumeUuid=vol.getFsUuid();
      if (DEBUG_INSTALL)       Slog.d(TAG,""String_Node_Str"" + volumeUuid);
      mInstaller.removeUserDataDirs(volumeUuid,userHandle);
    }
synchronized (mPackages) {
      removeUnusedPackagesLILPw(userManager,userHandle);
    }
  }
}",0.7481012658227848
193188,"/** 
 * Called by UserManagerService 
 */
void createNewUser(int userHandle){
  if (mInstaller != null) {
synchronized (mInstallLock) {
synchronized (mPackages) {
        mInstaller.createUserConfig(userHandle);
        mSettings.createNewUserLILPw(this,mInstaller,userHandle);
      }
    }
synchronized (mPackages) {
      applyFactoryDefaultBrowserLPw(userHandle);
      primeDomainVerificationsLPw(userHandle);
    }
  }
}","/** 
 * Called by UserManagerService 
 */
void createNewUser(int userHandle){
synchronized (mInstallLock) {
    mInstaller.createUserConfig(userHandle);
    mSettings.createNewUserLI(this,mInstaller,userHandle);
  }
synchronized (mPackages) {
    applyFactoryDefaultBrowserLPw(userHandle);
    primeDomainVerificationsLPw(userHandle);
  }
}",0.4412532637075718
193189,"/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
  }
}","/** 
 * Called when the panel was layouted expanded for the first time after being collapsed.
 */
public void onPanelExpandedAndLayouted(){
  if (mState == StatusBarState.KEYGUARD) {
    updateRowStates();
    mStackScroller.onHeightChanged(null,false);
  }
}",0.8978723404255319
193190,"/** 
 * Updates the configuration based on the current state of the system
 */
void update(Context context,SystemServicesProxy ssp,Rect windowRect){
  lockToAppEnabled=!ssp.hasFreeformWorkspaceSupport() && ssp.getSystemSetting(context,Settings.System.LOCK_TO_APP_ENABLED) != 0;
  hasDockedTasks=ssp.hasDockedTask();
  boolean isLandscape=windowRect.width() > windowRect.height();
  hasTransposedNavBar=isLandscape && isLargeScreen && !isXLargeScreen;
  hasTransposedSearchBar=isLandscape && isLargeScreen && !isXLargeScreen;
}","/** 
 * Updates the configuration based on the current state of the system
 */
void update(Context context,SystemServicesProxy ssp,Rect windowRect){
  lockToAppEnabled=!ssp.hasFreeformWorkspaceSupport() && ssp.getSystemSetting(context,Settings.System.LOCK_TO_APP_ENABLED) != 0;
  boolean isLandscape=windowRect.width() > windowRect.height();
  hasTransposedNavBar=isLandscape && isLargeScreen && !isXLargeScreen;
  hasTransposedSearchBar=isLandscape && isLargeScreen && !isXLargeScreen;
}",0.8500986193293886
193191,"/** 
 * Updates the configuration based on the current state of the system
 */
void update(Context context,SystemServicesProxy ssp,Rect windowRect){
  lockToAppEnabled=!ssp.hasFreeformWorkspaceSupport() && ssp.getSystemSetting(context,Settings.System.LOCK_TO_APP_ENABLED) != 0;
  hasDockedTasks=ssp.hasDockedTask();
  boolean isLandscape=windowRect.width() > windowRect.height();
  hasTransposedNavBar=isLandscape && isLargeScreen && !isXLargeScreen;
  hasTransposedSearchBar=isLandscape && isLargeScreen && !isXLargeScreen;
}","/** 
 * Updates the configuration based on the current state of the system
 */
void update(Context context,SystemServicesProxy ssp,Rect windowRect){
  lockToAppEnabled=!ssp.hasFreeformWorkspaceSupport() && ssp.getSystemSetting(context,Settings.System.LOCK_TO_APP_ENABLED) != 0;
  boolean isLandscape=windowRect.width() > windowRect.height();
  hasTransposedNavBar=isLandscape && isLargeScreen && !isXLargeScreen;
  hasTransposedSearchBar=isLandscape && isLargeScreen && !isXLargeScreen;
}",0.8500986193293886
193192,"public void updateStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  mPrivateLayout.onNotificationUpdated(statusBarNotification);
  mPublicLayout.onNotificationUpdated(statusBarNotification);
  updateVetoButton();
  if (mIsSummaryWithChildren) {
    recreateNotificationHeader();
  }
  onChildrenCountChanged();
}","public void updateStatusBarNotification(StatusBarNotification statusBarNotification){
  mStatusBarNotification=statusBarNotification;
  mPrivateLayout.onNotificationUpdated(statusBarNotification);
  mPublicLayout.onNotificationUpdated(statusBarNotification);
  updateVetoButton();
  if (mIsSummaryWithChildren) {
    recreateNotificationHeader();
  }
  if (mIconAnimationRunning) {
    setIconAnimationRunning(true);
  }
  onChildrenCountChanged();
}",0.9156626506024096
193193,"@Override public boolean onTouchEvent(MotionEvent event){
  if (!mDraggingDown) {
    return false;
  }
  final float x=event.getX();
  final float y=event.getY();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_MOVE:
    mLastHeight=y - mInitialTouchY;
  captureStartingChild(mInitialTouchX,mInitialTouchY);
if (mStartingChild != null) {
  handleExpansion(mLastHeight,mStartingChild);
}
 else {
  mDragDownCallback.setEmptyDragAmount(mLastHeight);
}
if (mLastHeight > mMinDragDistance) {
if (!mDraggedFarEnough) {
  mDraggedFarEnough=true;
  mDragDownCallback.onThresholdReached();
}
}
 else {
if (mDraggedFarEnough) {
  mDraggedFarEnough=false;
  mDragDownCallback.onDragDownReset();
}
}
return true;
case MotionEvent.ACTION_UP:
if (!isFalseTouch() && mDragDownCallback.onDraggedDown(mStartingChild,(int)(y - mInitialTouchY))) {
if (mStartingChild == null) {
mDragDownCallback.setEmptyDragAmount(0f);
}
 else {
mCallback.setUserLockedChild(mStartingChild,false);
}
mDraggingDown=false;
}
 else {
stopDragging();
return false;
}
break;
case MotionEvent.ACTION_CANCEL:
stopDragging();
return false;
}
return false;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (!mDraggingDown) {
    return false;
  }
  final float x=event.getX();
  final float y=event.getY();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_MOVE:
    mLastHeight=y - mInitialTouchY;
  captureStartingChild(mInitialTouchX,mInitialTouchY);
if (mStartingChild != null) {
  handleExpansion(mLastHeight,mStartingChild);
}
 else {
  mDragDownCallback.setEmptyDragAmount(mLastHeight);
}
if (mLastHeight > mMinDragDistance) {
if (!mDraggedFarEnough) {
  mDraggedFarEnough=true;
  mDragDownCallback.onCrossedThreshold(true);
}
}
 else {
if (mDraggedFarEnough) {
  mDraggedFarEnough=false;
  mDragDownCallback.onCrossedThreshold(false);
}
}
return true;
case MotionEvent.ACTION_UP:
if (!isFalseTouch() && mDragDownCallback.onDraggedDown(mStartingChild,(int)(y - mInitialTouchY))) {
if (mStartingChild == null) {
mDragDownCallback.setEmptyDragAmount(0f);
}
 else {
mCallback.setUserLockedChild(mStartingChild,false);
}
mDraggingDown=false;
}
 else {
stopDragging();
return false;
}
break;
case MotionEvent.ACTION_CANCEL:
stopDragging();
return false;
}
return false;
}",0.9752868490732568
193194,"@Override public void onDragDownReset(){
  mStackScroller.setDimmed(true,true);
}","@Override public void onDragDownReset(){
  mStackScroller.setDimmed(true,true);
  mStackScroller.resetScrollPosition();
}",0.801980198019802
193195,"private boolean isGlobalOrSecureSettingRestrictedForUser(String setting,int userId){
  String restriction=sSettingToUserRestrictionMap.get(setting);
  if (restriction == null) {
    return false;
  }
  return mUserManager.hasUserRestriction(restriction,new UserHandle(userId));
}","/** 
 * Checks whether changing a setting to a value is prohibited by the corresponding user restriction. <p>See also   {@link com.android.server.pm.UserRestrictionsUtils#applyUserRestrictionLR}, which should be in sync with this method.
 * @return true if the change is prohibited, false if the change is allowed.
 */
private boolean isGlobalOrSecureSettingRestrictedForUser(String setting,int userId,String value){
  String restriction;
switch (setting) {
case Settings.Secure.LOCATION_MODE:
    if (String.valueOf(Settings.Secure.LOCATION_MODE_OFF).equals(value))     return false;
  restriction=UserManager.DISALLOW_SHARE_LOCATION;
break;
case Settings.Secure.LOCATION_PROVIDERS_ALLOWED:
if (value != null && value.startsWith(""String_Node_Str"")) return false;
restriction=UserManager.DISALLOW_SHARE_LOCATION;
break;
case Settings.Secure.INSTALL_NON_MARKET_APPS:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES;
break;
case Settings.Global.ADB_ENABLED:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.DISALLOW_DEBUGGING_FEATURES;
break;
case Settings.Global.PACKAGE_VERIFIER_ENABLE:
case Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.ENSURE_VERIFY_APPS;
break;
case Settings.Global.PREFERRED_NETWORK_MODE:
restriction=UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS;
break;
default :
return false;
}
return mUserManager.hasUserRestriction(restriction,UserHandle.of(userId));
}",0.1222466960352423
193196,"private boolean mutateSecureSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId)) {
    return false;
  }
  final int owningUserId=resolveOwningUserIdForSecureSettingLocked(callingUserId,name);
  if (owningUserId != callingUserId) {
    return false;
  }
  if (Settings.Secure.LOCATION_PROVIDERS_ALLOWED.equals(name)) {
    return updateLocationProvidersAllowedLocked(value,owningUserId);
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
  }
}
}
return false;
}","private boolean mutateSecureSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId,value)) {
    return false;
  }
  final int owningUserId=resolveOwningUserIdForSecureSettingLocked(callingUserId,name);
  if (owningUserId != callingUserId) {
    return false;
  }
  if (Settings.Secure.LOCATION_PROVIDERS_ALLOWED.equals(name)) {
    return updateLocationProvidersAllowedLocked(value,owningUserId);
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
  }
}
}
return false;
}",0.9975062344139652
193197,"private boolean mutateGlobalSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId)) {
    return false;
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
  }
}
}
return false;
}","private boolean mutateGlobalSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId,value)) {
    return false;
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
  }
}
}
return false;
}",0.996828752642706
193198,"/** 
 * Apply each user restriction. <p>Note this method is called by   {@link UserManagerService} while holding{@code mRestrictionLock}. Be aware when calling into other services, which could cause a deadlock.
 */
private static void applyUserRestrictionLR(Context context,int userId,String key,boolean newValue){
  if (UserManagerService.DBG) {
    Log.d(TAG,""String_Node_Str"" + userId + ""String_Node_Str""+ key+ ""String_Node_Str""+ newValue);
  }
  final ContentResolver cr=context.getContentResolver();
  final long id=Binder.clearCallingIdentity();
  try {
switch (key) {
case UserManager.DISALLOW_CONFIG_WIFI:
      if (newValue) {
        android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0,userId);
      }
    break;
case UserManager.DISALLOW_SHARE_LOCATION:
  if (newValue) {
    android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.LOCATION_MODE,android.provider.Settings.Secure.LOCATION_MODE_OFF,userId);
    android.provider.Settings.Secure.putStringForUser(cr,android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED,""String_Node_Str"",userId);
  }
final String property=android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION;
long version=SystemProperties.getLong(property,0) + 1;
SystemProperties.set(property,Long.toString(version));
final String name=android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED;
final Uri url=Uri.withAppendedPath(android.provider.Settings.Secure.CONTENT_URI,name);
context.getContentResolver().notifyChange(url,null,true,userId);
break;
case UserManager.DISALLOW_DEBUGGING_FEATURES:
if (newValue) {
if (userId == UserHandle.USER_SYSTEM) {
android.provider.Settings.Global.putStringForUser(cr,android.provider.Settings.Global.ADB_ENABLED,""String_Node_Str"",userId);
}
}
break;
case UserManager.ENSURE_VERIFY_APPS:
if (newValue) {
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE,""String_Node_Str"",userId);
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB,""String_Node_Str"",userId);
}
break;
case UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES:
if (newValue) {
android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS,0,userId);
}
break;
}
}
  finally {
Binder.restoreCallingIdentity(id);
}
}","/** 
 * Apply each user restriction. <p>Note this method is called by   {@link UserManagerService} while holding{@code mRestrictionLock}. Be aware when calling into other services, which could cause a deadlock. <p>See also   {@link com.android.providers.settings.SettingsProvider#isGlobalOrSecureSettingRestrictedForUser}, which should be in sync with this method.
 */
private static void applyUserRestrictionLR(Context context,int userId,String key,boolean newValue){
  if (UserManagerService.DBG) {
    Log.d(TAG,""String_Node_Str"" + userId + ""String_Node_Str""+ key+ ""String_Node_Str""+ newValue);
  }
  final ContentResolver cr=context.getContentResolver();
  final long id=Binder.clearCallingIdentity();
  try {
switch (key) {
case UserManager.DISALLOW_CONFIG_WIFI:
      if (newValue) {
        android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0,userId);
      }
    break;
case UserManager.DISALLOW_SHARE_LOCATION:
  if (newValue) {
    android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.LOCATION_MODE,android.provider.Settings.Secure.LOCATION_MODE_OFF,userId);
  }
final String property=android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION;
long version=SystemProperties.getLong(property,0) + 1;
SystemProperties.set(property,Long.toString(version));
final String name=android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED;
final Uri url=Uri.withAppendedPath(android.provider.Settings.Secure.CONTENT_URI,name);
context.getContentResolver().notifyChange(url,null,true,userId);
break;
case UserManager.DISALLOW_DEBUGGING_FEATURES:
if (newValue) {
if (userId == UserHandle.USER_SYSTEM) {
android.provider.Settings.Global.putStringForUser(cr,android.provider.Settings.Global.ADB_ENABLED,""String_Node_Str"",userId);
}
}
break;
case UserManager.ENSURE_VERIFY_APPS:
if (newValue) {
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE,""String_Node_Str"",userId);
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB,""String_Node_Str"",userId);
}
break;
case UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES:
if (newValue) {
android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS,0,userId);
}
break;
}
}
  finally {
Binder.restoreCallingIdentity(id);
}
}",0.9374747882210568
193199,"public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  mNotificationData.updateRanking(ranking);
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}","public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  mNotificationData.updateRanking(ranking);
  boolean applyInPlace=entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}",0.9997849924747366
193200,"public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  mNotificationData.updateRanking(ranking);
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}","public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  mNotificationData.updateRanking(ranking);
  boolean applyInPlace=entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}",0.9997849924747366
193201,"private boolean isGlobalOrSecureSettingRestrictedForUser(String setting,int userId){
  String restriction=sSettingToUserRestrictionMap.get(setting);
  if (restriction == null) {
    return false;
  }
  return mUserManager.hasUserRestriction(restriction,new UserHandle(userId));
}","/** 
 * Checks whether changing a setting to a value is prohibited by the corresponding user restriction. <p>See also   {@link com.android.server.pm.UserRestrictionsUtils#applyUserRestrictionLR}, which should be in sync with this method.
 * @return true if the change is prohibited, false if the change is allowed.
 */
private boolean isGlobalOrSecureSettingRestrictedForUser(String setting,int userId,String value){
  String restriction;
switch (setting) {
case Settings.Secure.LOCATION_MODE:
    if (String.valueOf(Settings.Secure.LOCATION_MODE_OFF).equals(value))     return false;
  restriction=UserManager.DISALLOW_SHARE_LOCATION;
break;
case Settings.Secure.LOCATION_PROVIDERS_ALLOWED:
if (value != null && value.startsWith(""String_Node_Str"")) return false;
restriction=UserManager.DISALLOW_SHARE_LOCATION;
break;
case Settings.Secure.INSTALL_NON_MARKET_APPS:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES;
break;
case Settings.Global.ADB_ENABLED:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.DISALLOW_DEBUGGING_FEATURES;
break;
case Settings.Global.PACKAGE_VERIFIER_ENABLE:
case Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB:
if (""String_Node_Str"".equals(value)) return false;
restriction=UserManager.ENSURE_VERIFY_APPS;
break;
case Settings.Global.PREFERRED_NETWORK_MODE:
restriction=UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS;
break;
default :
return false;
}
return mUserManager.hasUserRestriction(restriction,UserHandle.of(userId));
}",0.1222466960352423
193202,"private boolean mutateSecureSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId)) {
    return false;
  }
  final int owningUserId=resolveOwningUserIdForSecureSettingLocked(callingUserId,name);
  if (owningUserId != callingUserId) {
    return false;
  }
  if (Settings.Secure.LOCATION_PROVIDERS_ALLOWED.equals(name)) {
    return updateLocationProvidersAllowedLocked(value,owningUserId);
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
  }
}
}
return false;
}","private boolean mutateSecureSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId,value)) {
    return false;
  }
  final int owningUserId=resolveOwningUserIdForSecureSettingLocked(callingUserId,name);
  if (owningUserId != callingUserId) {
    return false;
  }
  if (Settings.Secure.LOCATION_PROVIDERS_ALLOWED.equals(name)) {
    return updateLocationProvidersAllowedLocked(value,owningUserId);
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_SECURE,owningUserId,name,value,getCallingPackage());
  }
}
}
return false;
}",0.9975062344139652
193203,"private boolean mutateGlobalSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId)) {
    return false;
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
  }
}
}
return false;
}","private boolean mutateGlobalSetting(String name,String value,int requestingUserId,int operation){
  enforceWritePermission(Manifest.permission.WRITE_SECURE_SETTINGS);
  final int callingUserId=resolveCallingUserIdEnforcingPermissionsLocked(requestingUserId);
  if (isGlobalOrSecureSettingRestrictedForUser(name,callingUserId,value)) {
    return false;
  }
synchronized (mLock) {
switch (operation) {
case MUTATION_OPERATION_INSERT:
{
        return mSettingsRegistry.insertSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
      }
case MUTATION_OPERATION_DELETE:
{
      return mSettingsRegistry.deleteSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name);
    }
case MUTATION_OPERATION_UPDATE:
{
    return mSettingsRegistry.updateSettingLocked(SettingsRegistry.SETTINGS_TYPE_GLOBAL,UserHandle.USER_SYSTEM,name,value,getCallingPackage());
  }
}
}
return false;
}",0.996828752642706
193204,"/** 
 * Apply each user restriction. <p>Note this method is called by   {@link UserManagerService} while holding{@code mRestrictionLock}. Be aware when calling into other services, which could cause a deadlock.
 */
private static void applyUserRestrictionLR(Context context,int userId,String key,boolean newValue){
  if (UserManagerService.DBG) {
    Log.d(TAG,""String_Node_Str"" + userId + ""String_Node_Str""+ key+ ""String_Node_Str""+ newValue);
  }
  final ContentResolver cr=context.getContentResolver();
  final long id=Binder.clearCallingIdentity();
  try {
switch (key) {
case UserManager.DISALLOW_CONFIG_WIFI:
      if (newValue) {
        android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0,userId);
      }
    break;
case UserManager.DISALLOW_SHARE_LOCATION:
  if (newValue) {
    android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.LOCATION_MODE,android.provider.Settings.Secure.LOCATION_MODE_OFF,userId);
    android.provider.Settings.Secure.putStringForUser(cr,android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED,""String_Node_Str"",userId);
  }
final String property=android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION;
long version=SystemProperties.getLong(property,0) + 1;
SystemProperties.set(property,Long.toString(version));
final String name=android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED;
final Uri url=Uri.withAppendedPath(android.provider.Settings.Secure.CONTENT_URI,name);
context.getContentResolver().notifyChange(url,null,true,userId);
break;
case UserManager.DISALLOW_DEBUGGING_FEATURES:
if (newValue) {
if (userId == UserHandle.USER_SYSTEM) {
android.provider.Settings.Global.putStringForUser(cr,android.provider.Settings.Global.ADB_ENABLED,""String_Node_Str"",userId);
}
}
break;
case UserManager.ENSURE_VERIFY_APPS:
if (newValue) {
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE,""String_Node_Str"",userId);
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB,""String_Node_Str"",userId);
}
break;
case UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES:
if (newValue) {
android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS,0,userId);
}
break;
}
}
  finally {
Binder.restoreCallingIdentity(id);
}
}","/** 
 * Apply each user restriction. <p>Note this method is called by   {@link UserManagerService} while holding{@code mRestrictionLock}. Be aware when calling into other services, which could cause a deadlock. <p>See also   {@link com.android.providers.settings.SettingsProvider#isGlobalOrSecureSettingRestrictedForUser}, which should be in sync with this method.
 */
private static void applyUserRestrictionLR(Context context,int userId,String key,boolean newValue){
  if (UserManagerService.DBG) {
    Log.d(TAG,""String_Node_Str"" + userId + ""String_Node_Str""+ key+ ""String_Node_Str""+ newValue);
  }
  final ContentResolver cr=context.getContentResolver();
  final long id=Binder.clearCallingIdentity();
  try {
switch (key) {
case UserManager.DISALLOW_CONFIG_WIFI:
      if (newValue) {
        android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0,userId);
      }
    break;
case UserManager.DISALLOW_SHARE_LOCATION:
  if (newValue) {
    android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.LOCATION_MODE,android.provider.Settings.Secure.LOCATION_MODE_OFF,userId);
  }
final String property=android.provider.Settings.Secure.SYS_PROP_SETTING_VERSION;
long version=SystemProperties.getLong(property,0) + 1;
SystemProperties.set(property,Long.toString(version));
final String name=android.provider.Settings.Secure.LOCATION_PROVIDERS_ALLOWED;
final Uri url=Uri.withAppendedPath(android.provider.Settings.Secure.CONTENT_URI,name);
context.getContentResolver().notifyChange(url,null,true,userId);
break;
case UserManager.DISALLOW_DEBUGGING_FEATURES:
if (newValue) {
if (userId == UserHandle.USER_SYSTEM) {
android.provider.Settings.Global.putStringForUser(cr,android.provider.Settings.Global.ADB_ENABLED,""String_Node_Str"",userId);
}
}
break;
case UserManager.ENSURE_VERIFY_APPS:
if (newValue) {
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_ENABLE,""String_Node_Str"",userId);
android.provider.Settings.Global.putStringForUser(context.getContentResolver(),android.provider.Settings.Global.PACKAGE_VERIFIER_INCLUDE_ADB,""String_Node_Str"",userId);
}
break;
case UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES:
if (newValue) {
android.provider.Settings.Secure.putIntForUser(cr,android.provider.Settings.Secure.INSTALL_NON_MARKET_APPS,0,userId);
}
break;
}
}
  finally {
Binder.restoreCallingIdentity(id);
}
}",0.9374747882210568
193205,"@Override public void onUidIdle(int uid) throws RemoteException {
  removeForStoppedLocked(uid);
}","@Override public void onUidIdle(int uid) throws RemoteException {
synchronized (mLock) {
    removeForStoppedLocked(uid);
  }
}",0.8711111111111111
193206,"@Override public void onUidIdle(int uid) throws RemoteException {
  removeForStoppedLocked(uid);
}","@Override public void onUidIdle(int uid) throws RemoteException {
synchronized (mLock) {
    removeForStoppedLocked(uid);
  }
}",0.8711111111111111
193207,"VoiceInteractionServiceInfo findAvailInteractor(int userHandle,String packageName){
  List<ResolveInfo> available=mContext.getPackageManager().queryIntentServicesAsUser(new Intent(VoiceInteractionService.SERVICE_INTERFACE),0,userHandle);
  int numAvailable=available.size();
  if (numAvailable == 0) {
    Slog.w(TAG,""String_Node_Str"" + userHandle);
    return null;
  }
 else {
    VoiceInteractionServiceInfo foundInfo=null;
    for (int i=0; i < numAvailable; i++) {
      ServiceInfo cur=available.get(i).serviceInfo;
      if ((cur.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        ComponentName comp=new ComponentName(cur.packageName,cur.name);
        try {
          VoiceInteractionServiceInfo info=new VoiceInteractionServiceInfo(mContext.getPackageManager(),comp,userHandle);
          if (info.getParseError() == null) {
            if (packageName == null || info.getServiceInfo().packageName.equals(packageName)) {
              if (foundInfo == null) {
                foundInfo=info;
              }
 else {
                Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + new ComponentName(foundInfo.getServiceInfo().packageName,foundInfo.getServiceInfo().name) + ""String_Node_Str""+ new ComponentName(cur.packageName,cur.name));
              }
            }
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + comp + ""String_Node_Str""+ info.getParseError());
          }
        }
 catch (        PackageManager.NameNotFoundException e) {
          Slog.w(TAG,""String_Node_Str"" + comp);
        }
catch (        RemoteException e) {
        }
      }
    }
    return foundInfo;
  }
}","VoiceInteractionServiceInfo findAvailInteractor(int userHandle,String packageName){
  List<ResolveInfo> available=mContext.getPackageManager().queryIntentServicesAsUser(new Intent(VoiceInteractionService.SERVICE_INTERFACE),0,userHandle);
  int numAvailable=available.size();
  if (numAvailable == 0) {
    Slog.w(TAG,""String_Node_Str"" + userHandle);
    return null;
  }
 else {
    VoiceInteractionServiceInfo foundInfo=null;
    for (int i=0; i < numAvailable; i++) {
      ServiceInfo cur=available.get(i).serviceInfo;
      if ((cur.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        ComponentName comp=new ComponentName(cur.packageName,cur.name);
        try {
          VoiceInteractionServiceInfo info=new VoiceInteractionServiceInfo(mContext.getPackageManager(),comp,userHandle);
          if (info.getParseError() == null) {
            if (packageName == null || info.getServiceInfo().packageName.equals(packageName)) {
              if (foundInfo == null) {
                foundInfo=info;
              }
 else {
                Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + new ComponentName(foundInfo.getServiceInfo().packageName,foundInfo.getServiceInfo().name) + ""String_Node_Str""+ new ComponentName(cur.packageName,cur.name));
              }
            }
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + comp + ""String_Node_Str""+ info.getParseError());
          }
        }
 catch (        PackageManager.NameNotFoundException e) {
          Slog.w(TAG,""String_Node_Str"" + comp);
        }
      }
    }
    return foundInfo;
  }
}",0.973308504034761
193208,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9932659932659932
193209,"private final int computeOomAdjLocked(ProcessRecord app,int cachedAdj,ProcessRecord TOP_APP,boolean doingAll,long now){
  if (mAdjSeq == app.adjSeq) {
    return app.curRawAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.curProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    return (app.curAdj=app.curRawAdj=ProcessList.CACHED_APP_MAX_ADJ);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.empty=false;
  app.cached=false;
  final int activitiesSize=app.activities.size();
  if (app.maxAdj <= ProcessList.FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.foregroundActivities=false;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT;
    app.systemNoUi=true;
    if (app == TOP_APP) {
      app.systemNoUi=false;
    }
 else     if (activitiesSize > 0) {
      for (int j=0; j < activitiesSize; j++) {
        final ActivityRecord r=app.activities.get(j);
        if (r.visible) {
          app.systemNoUi=false;
        }
      }
    }
    if (!app.systemNoUi) {
      app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT_UI;
    }
    return (app.curAdj=app.maxAdj);
  }
  app.systemNoUi=false;
  final int PROCESS_STATE_TOP=mTopProcessState;
  int adj;
  int schedGroup;
  int procState;
  boolean foregroundActivities=false;
  BroadcastQueue queue;
  if (app == TOP_APP) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    foregroundActivities=true;
    procState=PROCESS_STATE_TOP;
  }
 else   if (app.instrumentationClass != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
  }
 else   if ((queue=isReceivingBroadcast(app)) != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=(queue == mFgBroadcastQueue) ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_RECEIVER;
  }
 else   if (app.executingServices.size() > 0) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=app.execServicesFg ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_SERVICE;
  }
 else {
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=cachedAdj;
    procState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    app.cached=true;
    app.empty=true;
    app.adjType=""String_Node_Str"";
  }
  if (!foregroundActivities && activitiesSize > 0) {
    int minLayer=ProcessList.VISIBLE_APP_LAYER_MAX;
    for (int j=0; j < activitiesSize; j++) {
      final ActivityRecord r=app.activities.get(j);
      if (r.app != app) {
        Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ app+ ""String_Node_Str""+ r.app+ ""String_Node_Str"");
        continue;
      }
      if (r.visible) {
        if (adj > ProcessList.VISIBLE_APP_ADJ) {
          adj=ProcessList.VISIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_TOP) {
          procState=PROCESS_STATE_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
        if (r.task != null && minLayer > 0) {
          final int layer=r.task.mLayerRank;
          if (layer >= 0 && minLayer > layer) {
            minLayer=layer;
          }
        }
        break;
      }
 else       if (r.state == ActivityState.PAUSING || r.state == ActivityState.PAUSED) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_TOP) {
          procState=PROCESS_STATE_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else       if (r.state == ActivityState.STOPPING) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (!r.finishing) {
          if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
            procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
          }
        }
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else {
        if (procState > ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
          procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
          app.adjType=""String_Node_Str"";
        }
      }
    }
    if (adj == ProcessList.VISIBLE_APP_ADJ) {
      adj+=minLayer;
    }
  }
  if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
    if (app.foregroundServices) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
 else     if (app.forcingToForeground != null) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      app.adjSource=app.forcingToForeground;
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (app == mHeavyWeightProcess) {
    if (adj > ProcessList.HEAVY_WEIGHT_APP_ADJ) {
      adj=ProcessList.HEAVY_WEIGHT_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
      procState=ActivityManager.PROCESS_STATE_HEAVY_WEIGHT;
    }
  }
  if (app == mHomeProcess) {
    if (adj > ProcessList.HOME_APP_ADJ) {
      adj=ProcessList.HOME_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HOME) {
      procState=ActivityManager.PROCESS_STATE_HOME;
    }
  }
  if (app == mPreviousProcess && app.activities.size() > 0) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (false)   Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ adj+ ""String_Node_Str""+ app.adjType);
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  app.hasStartedServices=false;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > ProcessList.BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG_BACKUP,""String_Node_Str"" + app);
      adj=ProcessList.BACKUP_APP_ADJ;
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
      }
      app.adjType=""String_Node_Str"";
      app.cached=false;
    }
    if (procState > ActivityManager.PROCESS_STATE_BACKUP) {
      procState=ActivityManager.PROCESS_STATE_BACKUP;
    }
  }
  boolean mayBeTop=false;
  for (int is=app.services.size() - 1; is >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); is--) {
    ServiceRecord s=app.services.valueAt(is);
    if (s.startRequested) {
      app.hasStartedServices=true;
      if (procState > ActivityManager.PROCESS_STATE_SERVICE) {
        procState=ActivityManager.PROCESS_STATE_SERVICE;
      }
      if (app.hasShownUi && app != mHomeProcess) {
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
 else {
        if (now < (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
          if (adj > ProcessList.SERVICE_ADJ) {
            adj=ProcessList.SERVICE_ADJ;
            app.adjType=""String_Node_Str"";
            app.cached=false;
          }
        }
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
    }
    for (int conni=s.connections.size() - 1; conni >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); conni--) {
      ArrayList<ConnectionRecord> clist=s.connections.valueAt(conni);
      for (int i=0; i < clist.size() && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i++) {
        ConnectionRecord cr=clist.get(i);
        if (cr.binding.client == app) {
          continue;
        }
        if ((cr.flags & Context.BIND_WAIVE_PRIORITY) == 0) {
          ProcessRecord client=cr.binding.client;
          int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
          int clientProcState=client.curProcState;
          if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
            clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
          }
          String adjType=null;
          if ((cr.flags & Context.BIND_ALLOW_OOM_MANAGEMENT) != 0) {
            if (app.hasShownUi && app != mHomeProcess) {
              if (adj > clientAdj) {
                adjType=""String_Node_Str"";
              }
              app.cached=false;
              clientAdj=adj;
              clientProcState=procState;
            }
 else {
              if (now >= (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
                if (adj > clientAdj) {
                  adjType=""String_Node_Str"";
                }
                clientAdj=adj;
              }
            }
          }
          if (adj > clientAdj) {
            if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
              adjType=""String_Node_Str"";
            }
 else {
              if ((cr.flags & (Context.BIND_ABOVE_CLIENT | Context.BIND_IMPORTANT)) != 0) {
                adj=clientAdj >= ProcessList.PERSISTENT_SERVICE_ADJ ? clientAdj : ProcessList.PERSISTENT_SERVICE_ADJ;
              }
 else               if ((cr.flags & Context.BIND_NOT_VISIBLE) != 0 && clientAdj < ProcessList.PERCEPTIBLE_APP_ADJ && adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=ProcessList.PERCEPTIBLE_APP_ADJ;
              }
 else               if (clientAdj >= ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=clientAdj;
              }
 else {
                if (adj > ProcessList.VISIBLE_APP_ADJ) {
                  adj=Math.max(clientAdj,ProcessList.VISIBLE_APP_ADJ);
                }
              }
              if (!client.cached) {
                app.cached=false;
              }
              adjType=""String_Node_Str"";
            }
          }
          if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
            if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
              if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
                mayBeTop=true;
                clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
              }
 else {
                if ((cr.flags & Context.BIND_FOREGROUND_SERVICE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else                 if (mWakefulness == PowerManagerInternal.WAKEFULNESS_AWAKE && (cr.flags & Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else {
                  clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
                }
              }
            }
          }
 else {
            if (clientProcState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
              clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
            }
          }
          if (procState > clientProcState) {
            procState=clientProcState;
          }
          if (procState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND && (cr.flags & Context.BIND_SHOWING_UI) != 0) {
            app.pendingUiClean=true;
          }
          if (adjType != null) {
            app.adjType=adjType;
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=cr.binding.client;
            app.adjSourceProcState=clientProcState;
            app.adjTarget=s.name;
          }
        }
        if ((cr.flags & Context.BIND_TREAT_LIKE_ACTIVITY) != 0) {
          app.treatLikeActivity=true;
        }
        final ActivityRecord a=cr.activity;
        if ((cr.flags & Context.BIND_ADJUST_WITH_ACTIVITY) != 0) {
          if (a != null && adj > ProcessList.FOREGROUND_APP_ADJ && (a.visible || a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
            adj=ProcessList.FOREGROUND_APP_ADJ;
            if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            app.cached=false;
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=a;
            app.adjSourceProcState=procState;
            app.adjTarget=s.name;
          }
        }
      }
    }
  }
  for (int provi=app.pubProviders.size() - 1; provi >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); provi--) {
    ContentProviderRecord cpr=app.pubProviders.valueAt(provi);
    for (int i=cpr.connections.size() - 1; i >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i--) {
      ContentProviderConnection conn=cpr.connections.get(i);
      ProcessRecord client=conn.client;
      if (client == app) {
        continue;
      }
      int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
      int clientProcState=client.curProcState;
      if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
        clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
      }
      if (adj > clientAdj) {
        if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          app.adjType=""String_Node_Str"";
        }
 else {
          adj=clientAdj > ProcessList.FOREGROUND_APP_ADJ ? clientAdj : ProcessList.FOREGROUND_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        app.cached&=client.cached;
        app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
        app.adjSource=client;
        app.adjSourceProcState=clientProcState;
        app.adjTarget=cpr.name;
      }
      if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
        if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
          mayBeTop=true;
          clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
        }
 else {
          clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
        }
      }
      if (procState > clientProcState) {
        procState=clientProcState;
      }
      if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
        schedGroup=Process.THREAD_GROUP_DEFAULT;
      }
    }
    if (cpr.hasExternalProcessHandles()) {
      if (adj > ProcessList.FOREGROUND_APP_ADJ) {
        adj=ProcessList.FOREGROUND_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.adjType=""String_Node_Str"";
        app.adjTarget=cpr.name;
      }
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      }
    }
  }
  if (app.lastProviderTime > 0 && (app.lastProviderTime + CONTENT_PROVIDER_RETAIN_TIME) > now) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (mayBeTop && procState > ActivityManager.PROCESS_STATE_TOP) {
switch (procState) {
case ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND:
case ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND:
case ActivityManager.PROCESS_STATE_SERVICE:
      procState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
    break;
default :
  procState=ActivityManager.PROCESS_STATE_TOP;
break;
}
}
if (procState >= ActivityManager.PROCESS_STATE_CACHED_EMPTY) {
if (app.hasClientActivities) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
app.adjType=""String_Node_Str"";
}
 else if (app.treatLikeActivity) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
app.adjType=""String_Node_Str"";
}
}
if (adj == ProcessList.SERVICE_ADJ) {
if (doingAll) {
app.serviceb=mNewNumAServiceProcs > (mNumServiceProcs / 3);
mNewNumServiceProcs++;
if (!app.serviceb) {
if (mLastMemoryLevel > ProcessStats.ADJ_MEM_FACTOR_NORMAL && app.lastPss >= mProcessList.getCachedRestoreThresholdKb()) {
  app.serviceHighRam=true;
  app.serviceb=true;
}
 else {
  mNewNumAServiceProcs++;
}
}
 else {
app.serviceHighRam=false;
}
}
if (app.serviceb) {
adj=ProcessList.SERVICE_B_ADJ;
}
}
app.curRawAdj=adj;
if (adj > app.maxAdj) {
adj=app.maxAdj;
if (app.maxAdj <= ProcessList.PERCEPTIBLE_APP_ADJ) {
schedGroup=Process.THREAD_GROUP_DEFAULT;
}
}
app.curAdj=app.modifyRawOomAdj(adj);
app.curSchedGroup=schedGroup;
app.curProcState=procState;
app.foregroundActivities=foregroundActivities;
return app.curRawAdj;
}","private final int computeOomAdjLocked(ProcessRecord app,int cachedAdj,ProcessRecord TOP_APP,boolean doingAll,long now){
  if (mAdjSeq == app.adjSeq) {
    return app.curRawAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.curProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    return (app.curAdj=app.curRawAdj=ProcessList.CACHED_APP_MAX_ADJ);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.empty=false;
  app.cached=false;
  final int activitiesSize=app.activities.size();
  if (app.maxAdj <= ProcessList.FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.foregroundActivities=false;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT;
    app.systemNoUi=true;
    if (app == TOP_APP) {
      app.systemNoUi=false;
    }
 else     if (activitiesSize > 0) {
      for (int j=0; j < activitiesSize; j++) {
        final ActivityRecord r=app.activities.get(j);
        if (r.visible) {
          app.systemNoUi=false;
        }
      }
    }
    if (!app.systemNoUi) {
      app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT_UI;
    }
    return (app.curAdj=app.maxAdj);
  }
  app.systemNoUi=false;
  final int PROCESS_STATE_CUR_TOP=mTopProcessState;
  int adj;
  int schedGroup;
  int procState;
  boolean foregroundActivities=false;
  BroadcastQueue queue;
  if (app == TOP_APP) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    foregroundActivities=true;
    procState=PROCESS_STATE_CUR_TOP;
  }
 else   if (app.instrumentationClass != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
  }
 else   if ((queue=isReceivingBroadcast(app)) != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=(queue == mFgBroadcastQueue) ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_RECEIVER;
  }
 else   if (app.executingServices.size() > 0) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=app.execServicesFg ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_SERVICE;
  }
 else {
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=cachedAdj;
    procState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    app.cached=true;
    app.empty=true;
    app.adjType=""String_Node_Str"";
  }
  if (!foregroundActivities && activitiesSize > 0) {
    int minLayer=ProcessList.VISIBLE_APP_LAYER_MAX;
    for (int j=0; j < activitiesSize; j++) {
      final ActivityRecord r=app.activities.get(j);
      if (r.app != app) {
        Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ app+ ""String_Node_Str""+ r.app+ ""String_Node_Str"");
        continue;
      }
      if (r.visible) {
        if (adj > ProcessList.VISIBLE_APP_ADJ) {
          adj=ProcessList.VISIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_CUR_TOP) {
          procState=PROCESS_STATE_CUR_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
        if (r.task != null && minLayer > 0) {
          final int layer=r.task.mLayerRank;
          if (layer >= 0 && minLayer > layer) {
            minLayer=layer;
          }
        }
        break;
      }
 else       if (r.state == ActivityState.PAUSING || r.state == ActivityState.PAUSED) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_CUR_TOP) {
          procState=PROCESS_STATE_CUR_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else       if (r.state == ActivityState.STOPPING) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (!r.finishing) {
          if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
            procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
          }
        }
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else {
        if (procState > ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
          procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
          app.adjType=""String_Node_Str"";
        }
      }
    }
    if (adj == ProcessList.VISIBLE_APP_ADJ) {
      adj+=minLayer;
    }
  }
  if (adj > ProcessList.PERCEPTIBLE_APP_ADJ || procState > ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE) {
    if (app.foregroundServices) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
 else     if (app.forcingToForeground != null) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      app.adjSource=app.forcingToForeground;
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (app == mHeavyWeightProcess) {
    if (adj > ProcessList.HEAVY_WEIGHT_APP_ADJ) {
      adj=ProcessList.HEAVY_WEIGHT_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
      procState=ActivityManager.PROCESS_STATE_HEAVY_WEIGHT;
    }
  }
  if (app == mHomeProcess) {
    if (adj > ProcessList.HOME_APP_ADJ) {
      adj=ProcessList.HOME_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HOME) {
      procState=ActivityManager.PROCESS_STATE_HOME;
    }
  }
  if (app == mPreviousProcess && app.activities.size() > 0) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (false)   Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ adj+ ""String_Node_Str""+ app.adjType);
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  app.hasStartedServices=false;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > ProcessList.BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG_BACKUP,""String_Node_Str"" + app);
      adj=ProcessList.BACKUP_APP_ADJ;
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
      }
      app.adjType=""String_Node_Str"";
      app.cached=false;
    }
    if (procState > ActivityManager.PROCESS_STATE_BACKUP) {
      procState=ActivityManager.PROCESS_STATE_BACKUP;
    }
  }
  boolean mayBeTop=false;
  for (int is=app.services.size() - 1; is >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); is--) {
    ServiceRecord s=app.services.valueAt(is);
    if (s.startRequested) {
      app.hasStartedServices=true;
      if (procState > ActivityManager.PROCESS_STATE_SERVICE) {
        procState=ActivityManager.PROCESS_STATE_SERVICE;
      }
      if (app.hasShownUi && app != mHomeProcess) {
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
 else {
        if (now < (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
          if (adj > ProcessList.SERVICE_ADJ) {
            adj=ProcessList.SERVICE_ADJ;
            app.adjType=""String_Node_Str"";
            app.cached=false;
          }
        }
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
    }
    for (int conni=s.connections.size() - 1; conni >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); conni--) {
      ArrayList<ConnectionRecord> clist=s.connections.valueAt(conni);
      for (int i=0; i < clist.size() && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i++) {
        ConnectionRecord cr=clist.get(i);
        if (cr.binding.client == app) {
          continue;
        }
        if ((cr.flags & Context.BIND_WAIVE_PRIORITY) == 0) {
          ProcessRecord client=cr.binding.client;
          int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
          int clientProcState=client.curProcState;
          if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
            clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
          }
          String adjType=null;
          if ((cr.flags & Context.BIND_ALLOW_OOM_MANAGEMENT) != 0) {
            if (app.hasShownUi && app != mHomeProcess) {
              if (adj > clientAdj) {
                adjType=""String_Node_Str"";
              }
              app.cached=false;
              clientAdj=adj;
              clientProcState=procState;
            }
 else {
              if (now >= (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
                if (adj > clientAdj) {
                  adjType=""String_Node_Str"";
                }
                clientAdj=adj;
              }
            }
          }
          if (adj > clientAdj) {
            if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
              adjType=""String_Node_Str"";
            }
 else {
              if ((cr.flags & (Context.BIND_ABOVE_CLIENT | Context.BIND_IMPORTANT)) != 0) {
                adj=clientAdj >= ProcessList.PERSISTENT_SERVICE_ADJ ? clientAdj : ProcessList.PERSISTENT_SERVICE_ADJ;
              }
 else               if ((cr.flags & Context.BIND_NOT_VISIBLE) != 0 && clientAdj < ProcessList.PERCEPTIBLE_APP_ADJ && adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=ProcessList.PERCEPTIBLE_APP_ADJ;
              }
 else               if (clientAdj >= ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=clientAdj;
              }
 else {
                if (adj > ProcessList.VISIBLE_APP_ADJ) {
                  adj=Math.max(clientAdj,ProcessList.VISIBLE_APP_ADJ);
                }
              }
              if (!client.cached) {
                app.cached=false;
              }
              adjType=""String_Node_Str"";
            }
          }
          if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
            if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
              if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
                mayBeTop=true;
                clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
              }
 else {
                if ((cr.flags & Context.BIND_FOREGROUND_SERVICE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else                 if (mWakefulness == PowerManagerInternal.WAKEFULNESS_AWAKE && (cr.flags & Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else {
                  clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
                }
              }
            }
          }
 else {
            if (clientProcState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
              clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
            }
          }
          if (procState > clientProcState) {
            procState=clientProcState;
          }
          if (procState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND && (cr.flags & Context.BIND_SHOWING_UI) != 0) {
            app.pendingUiClean=true;
          }
          if (adjType != null) {
            app.adjType=adjType;
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=cr.binding.client;
            app.adjSourceProcState=clientProcState;
            app.adjTarget=s.name;
          }
        }
        if ((cr.flags & Context.BIND_TREAT_LIKE_ACTIVITY) != 0) {
          app.treatLikeActivity=true;
        }
        final ActivityRecord a=cr.activity;
        if ((cr.flags & Context.BIND_ADJUST_WITH_ACTIVITY) != 0) {
          if (a != null && adj > ProcessList.FOREGROUND_APP_ADJ && (a.visible || a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
            adj=ProcessList.FOREGROUND_APP_ADJ;
            if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            app.cached=false;
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=a;
            app.adjSourceProcState=procState;
            app.adjTarget=s.name;
          }
        }
      }
    }
  }
  for (int provi=app.pubProviders.size() - 1; provi >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); provi--) {
    ContentProviderRecord cpr=app.pubProviders.valueAt(provi);
    for (int i=cpr.connections.size() - 1; i >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i--) {
      ContentProviderConnection conn=cpr.connections.get(i);
      ProcessRecord client=conn.client;
      if (client == app) {
        continue;
      }
      int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
      int clientProcState=client.curProcState;
      if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
        clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
      }
      if (adj > clientAdj) {
        if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          app.adjType=""String_Node_Str"";
        }
 else {
          adj=clientAdj > ProcessList.FOREGROUND_APP_ADJ ? clientAdj : ProcessList.FOREGROUND_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        app.cached&=client.cached;
        app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
        app.adjSource=client;
        app.adjSourceProcState=clientProcState;
        app.adjTarget=cpr.name;
      }
      if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
        if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
          mayBeTop=true;
          clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
        }
 else {
          clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
        }
      }
      if (procState > clientProcState) {
        procState=clientProcState;
      }
      if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
        schedGroup=Process.THREAD_GROUP_DEFAULT;
      }
    }
    if (cpr.hasExternalProcessHandles()) {
      if (adj > ProcessList.FOREGROUND_APP_ADJ) {
        adj=ProcessList.FOREGROUND_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.adjType=""String_Node_Str"";
        app.adjTarget=cpr.name;
      }
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      }
    }
  }
  if (app.lastProviderTime > 0 && (app.lastProviderTime + CONTENT_PROVIDER_RETAIN_TIME) > now) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (mayBeTop && procState > ActivityManager.PROCESS_STATE_TOP) {
switch (procState) {
case ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND:
case ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND:
case ActivityManager.PROCESS_STATE_SERVICE:
      procState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
    break;
default :
  procState=ActivityManager.PROCESS_STATE_TOP;
break;
}
}
if (procState >= ActivityManager.PROCESS_STATE_CACHED_EMPTY) {
if (app.hasClientActivities) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
app.adjType=""String_Node_Str"";
}
 else if (app.treatLikeActivity) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
app.adjType=""String_Node_Str"";
}
}
if (adj == ProcessList.SERVICE_ADJ) {
if (doingAll) {
app.serviceb=mNewNumAServiceProcs > (mNumServiceProcs / 3);
mNewNumServiceProcs++;
if (!app.serviceb) {
if (mLastMemoryLevel > ProcessStats.ADJ_MEM_FACTOR_NORMAL && app.lastPss >= mProcessList.getCachedRestoreThresholdKb()) {
  app.serviceHighRam=true;
  app.serviceb=true;
}
 else {
  mNewNumAServiceProcs++;
}
}
 else {
app.serviceHighRam=false;
}
}
if (app.serviceb) {
adj=ProcessList.SERVICE_B_ADJ;
}
}
app.curRawAdj=adj;
if (adj > app.maxAdj) {
adj=app.maxAdj;
if (app.maxAdj <= ProcessList.PERCEPTIBLE_APP_ADJ) {
schedGroup=Process.THREAD_GROUP_DEFAULT;
}
}
app.curAdj=app.modifyRawOomAdj(adj);
app.curSchedGroup=schedGroup;
app.curProcState=procState;
app.foregroundActivities=foregroundActivities;
return app.curRawAdj;
}",0.9976254722072316
193210,"private final int computeOomAdjLocked(ProcessRecord app,int cachedAdj,ProcessRecord TOP_APP,boolean doingAll,long now){
  if (mAdjSeq == app.adjSeq) {
    return app.curRawAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.curProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    return (app.curAdj=app.curRawAdj=ProcessList.CACHED_APP_MAX_ADJ);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.empty=false;
  app.cached=false;
  final int activitiesSize=app.activities.size();
  if (app.maxAdj <= ProcessList.FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.foregroundActivities=false;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT;
    app.systemNoUi=true;
    if (app == TOP_APP) {
      app.systemNoUi=false;
    }
 else     if (activitiesSize > 0) {
      for (int j=0; j < activitiesSize; j++) {
        final ActivityRecord r=app.activities.get(j);
        if (r.visible) {
          app.systemNoUi=false;
        }
      }
    }
    if (!app.systemNoUi) {
      app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT_UI;
    }
    return (app.curAdj=app.maxAdj);
  }
  app.systemNoUi=false;
  final int PROCESS_STATE_TOP=mTopProcessState;
  int adj;
  int schedGroup;
  int procState;
  boolean foregroundActivities=false;
  BroadcastQueue queue;
  if (app == TOP_APP) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    foregroundActivities=true;
    procState=PROCESS_STATE_TOP;
  }
 else   if (app.instrumentationClass != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
  }
 else   if ((queue=isReceivingBroadcast(app)) != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=(queue == mFgBroadcastQueue) ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_RECEIVER;
  }
 else   if (app.executingServices.size() > 0) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=app.execServicesFg ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_SERVICE;
  }
 else {
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=cachedAdj;
    procState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    app.cached=true;
    app.empty=true;
    app.adjType=""String_Node_Str"";
  }
  if (!foregroundActivities && activitiesSize > 0) {
    int minLayer=ProcessList.VISIBLE_APP_LAYER_MAX;
    for (int j=0; j < activitiesSize; j++) {
      final ActivityRecord r=app.activities.get(j);
      if (r.app != app) {
        Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ app+ ""String_Node_Str""+ r.app+ ""String_Node_Str"");
        continue;
      }
      if (r.visible) {
        if (adj > ProcessList.VISIBLE_APP_ADJ) {
          adj=ProcessList.VISIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_TOP) {
          procState=PROCESS_STATE_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
        if (r.task != null && minLayer > 0) {
          final int layer=r.task.mLayerRank;
          if (layer >= 0 && minLayer > layer) {
            minLayer=layer;
          }
        }
        break;
      }
 else       if (r.state == ActivityState.PAUSING || r.state == ActivityState.PAUSED) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_TOP) {
          procState=PROCESS_STATE_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else       if (r.state == ActivityState.STOPPING) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (!r.finishing) {
          if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
            procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
          }
        }
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else {
        if (procState > ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
          procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
          app.adjType=""String_Node_Str"";
        }
      }
    }
    if (adj == ProcessList.VISIBLE_APP_ADJ) {
      adj+=minLayer;
    }
  }
  if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
    if (app.foregroundServices) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
 else     if (app.forcingToForeground != null) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      app.adjSource=app.forcingToForeground;
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (app == mHeavyWeightProcess) {
    if (adj > ProcessList.HEAVY_WEIGHT_APP_ADJ) {
      adj=ProcessList.HEAVY_WEIGHT_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
      procState=ActivityManager.PROCESS_STATE_HEAVY_WEIGHT;
    }
  }
  if (app == mHomeProcess) {
    if (adj > ProcessList.HOME_APP_ADJ) {
      adj=ProcessList.HOME_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HOME) {
      procState=ActivityManager.PROCESS_STATE_HOME;
    }
  }
  if (app == mPreviousProcess && app.activities.size() > 0) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (false)   Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ adj+ ""String_Node_Str""+ app.adjType);
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  app.hasStartedServices=false;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > ProcessList.BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG_BACKUP,""String_Node_Str"" + app);
      adj=ProcessList.BACKUP_APP_ADJ;
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
      }
      app.adjType=""String_Node_Str"";
      app.cached=false;
    }
    if (procState > ActivityManager.PROCESS_STATE_BACKUP) {
      procState=ActivityManager.PROCESS_STATE_BACKUP;
    }
  }
  boolean mayBeTop=false;
  for (int is=app.services.size() - 1; is >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); is--) {
    ServiceRecord s=app.services.valueAt(is);
    if (s.startRequested) {
      app.hasStartedServices=true;
      if (procState > ActivityManager.PROCESS_STATE_SERVICE) {
        procState=ActivityManager.PROCESS_STATE_SERVICE;
      }
      if (app.hasShownUi && app != mHomeProcess) {
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
 else {
        if (now < (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
          if (adj > ProcessList.SERVICE_ADJ) {
            adj=ProcessList.SERVICE_ADJ;
            app.adjType=""String_Node_Str"";
            app.cached=false;
          }
        }
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
    }
    for (int conni=s.connections.size() - 1; conni >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); conni--) {
      ArrayList<ConnectionRecord> clist=s.connections.valueAt(conni);
      for (int i=0; i < clist.size() && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i++) {
        ConnectionRecord cr=clist.get(i);
        if (cr.binding.client == app) {
          continue;
        }
        if ((cr.flags & Context.BIND_WAIVE_PRIORITY) == 0) {
          ProcessRecord client=cr.binding.client;
          int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
          int clientProcState=client.curProcState;
          if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
            clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
          }
          String adjType=null;
          if ((cr.flags & Context.BIND_ALLOW_OOM_MANAGEMENT) != 0) {
            if (app.hasShownUi && app != mHomeProcess) {
              if (adj > clientAdj) {
                adjType=""String_Node_Str"";
              }
              app.cached=false;
              clientAdj=adj;
              clientProcState=procState;
            }
 else {
              if (now >= (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
                if (adj > clientAdj) {
                  adjType=""String_Node_Str"";
                }
                clientAdj=adj;
              }
            }
          }
          if (adj > clientAdj) {
            if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
              adjType=""String_Node_Str"";
            }
 else {
              if ((cr.flags & (Context.BIND_ABOVE_CLIENT | Context.BIND_IMPORTANT)) != 0) {
                adj=clientAdj >= ProcessList.PERSISTENT_SERVICE_ADJ ? clientAdj : ProcessList.PERSISTENT_SERVICE_ADJ;
              }
 else               if ((cr.flags & Context.BIND_NOT_VISIBLE) != 0 && clientAdj < ProcessList.PERCEPTIBLE_APP_ADJ && adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=ProcessList.PERCEPTIBLE_APP_ADJ;
              }
 else               if (clientAdj >= ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=clientAdj;
              }
 else {
                if (adj > ProcessList.VISIBLE_APP_ADJ) {
                  adj=Math.max(clientAdj,ProcessList.VISIBLE_APP_ADJ);
                }
              }
              if (!client.cached) {
                app.cached=false;
              }
              adjType=""String_Node_Str"";
            }
          }
          if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
            if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
              if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
                mayBeTop=true;
                clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
              }
 else {
                if ((cr.flags & Context.BIND_FOREGROUND_SERVICE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else                 if (mWakefulness == PowerManagerInternal.WAKEFULNESS_AWAKE && (cr.flags & Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else {
                  clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
                }
              }
            }
          }
 else {
            if (clientProcState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
              clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
            }
          }
          if (procState > clientProcState) {
            procState=clientProcState;
          }
          if (procState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND && (cr.flags & Context.BIND_SHOWING_UI) != 0) {
            app.pendingUiClean=true;
          }
          if (adjType != null) {
            app.adjType=adjType;
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=cr.binding.client;
            app.adjSourceProcState=clientProcState;
            app.adjTarget=s.name;
          }
        }
        if ((cr.flags & Context.BIND_TREAT_LIKE_ACTIVITY) != 0) {
          app.treatLikeActivity=true;
        }
        final ActivityRecord a=cr.activity;
        if ((cr.flags & Context.BIND_ADJUST_WITH_ACTIVITY) != 0) {
          if (a != null && adj > ProcessList.FOREGROUND_APP_ADJ && (a.visible || a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
            adj=ProcessList.FOREGROUND_APP_ADJ;
            if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            app.cached=false;
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=a;
            app.adjSourceProcState=procState;
            app.adjTarget=s.name;
          }
        }
      }
    }
  }
  for (int provi=app.pubProviders.size() - 1; provi >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); provi--) {
    ContentProviderRecord cpr=app.pubProviders.valueAt(provi);
    for (int i=cpr.connections.size() - 1; i >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i--) {
      ContentProviderConnection conn=cpr.connections.get(i);
      ProcessRecord client=conn.client;
      if (client == app) {
        continue;
      }
      int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
      int clientProcState=client.curProcState;
      if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
        clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
      }
      if (adj > clientAdj) {
        if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          app.adjType=""String_Node_Str"";
        }
 else {
          adj=clientAdj > ProcessList.FOREGROUND_APP_ADJ ? clientAdj : ProcessList.FOREGROUND_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        app.cached&=client.cached;
        app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
        app.adjSource=client;
        app.adjSourceProcState=clientProcState;
        app.adjTarget=cpr.name;
      }
      if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
        if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
          mayBeTop=true;
          clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
        }
 else {
          clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
        }
      }
      if (procState > clientProcState) {
        procState=clientProcState;
      }
      if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
        schedGroup=Process.THREAD_GROUP_DEFAULT;
      }
    }
    if (cpr.hasExternalProcessHandles()) {
      if (adj > ProcessList.FOREGROUND_APP_ADJ) {
        adj=ProcessList.FOREGROUND_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.adjType=""String_Node_Str"";
        app.adjTarget=cpr.name;
      }
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      }
    }
  }
  if (app.lastProviderTime > 0 && (app.lastProviderTime + CONTENT_PROVIDER_RETAIN_TIME) > now) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (mayBeTop && procState > ActivityManager.PROCESS_STATE_TOP) {
switch (procState) {
case ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND:
case ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND:
case ActivityManager.PROCESS_STATE_SERVICE:
      procState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
    break;
default :
  procState=ActivityManager.PROCESS_STATE_TOP;
break;
}
}
if (procState >= ActivityManager.PROCESS_STATE_CACHED_EMPTY) {
if (app.hasClientActivities) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
app.adjType=""String_Node_Str"";
}
 else if (app.treatLikeActivity) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
app.adjType=""String_Node_Str"";
}
}
if (adj == ProcessList.SERVICE_ADJ) {
if (doingAll) {
app.serviceb=mNewNumAServiceProcs > (mNumServiceProcs / 3);
mNewNumServiceProcs++;
if (!app.serviceb) {
if (mLastMemoryLevel > ProcessStats.ADJ_MEM_FACTOR_NORMAL && app.lastPss >= mProcessList.getCachedRestoreThresholdKb()) {
  app.serviceHighRam=true;
  app.serviceb=true;
}
 else {
  mNewNumAServiceProcs++;
}
}
 else {
app.serviceHighRam=false;
}
}
if (app.serviceb) {
adj=ProcessList.SERVICE_B_ADJ;
}
}
app.curRawAdj=adj;
if (adj > app.maxAdj) {
adj=app.maxAdj;
if (app.maxAdj <= ProcessList.PERCEPTIBLE_APP_ADJ) {
schedGroup=Process.THREAD_GROUP_DEFAULT;
}
}
app.curAdj=app.modifyRawOomAdj(adj);
app.curSchedGroup=schedGroup;
app.curProcState=procState;
app.foregroundActivities=foregroundActivities;
return app.curRawAdj;
}","private final int computeOomAdjLocked(ProcessRecord app,int cachedAdj,ProcessRecord TOP_APP,boolean doingAll,long now){
  if (mAdjSeq == app.adjSeq) {
    return app.curRawAdj;
  }
  if (app.thread == null) {
    app.adjSeq=mAdjSeq;
    app.curSchedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.curProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    return (app.curAdj=app.curRawAdj=ProcessList.CACHED_APP_MAX_ADJ);
  }
  app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_UNKNOWN;
  app.adjSource=null;
  app.adjTarget=null;
  app.empty=false;
  app.cached=false;
  final int activitiesSize=app.activities.size();
  if (app.maxAdj <= ProcessList.FOREGROUND_APP_ADJ) {
    app.adjType=""String_Node_Str"";
    app.adjSeq=mAdjSeq;
    app.curRawAdj=app.maxAdj;
    app.foregroundActivities=false;
    app.curSchedGroup=Process.THREAD_GROUP_DEFAULT;
    app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT;
    app.systemNoUi=true;
    if (app == TOP_APP) {
      app.systemNoUi=false;
    }
 else     if (activitiesSize > 0) {
      for (int j=0; j < activitiesSize; j++) {
        final ActivityRecord r=app.activities.get(j);
        if (r.visible) {
          app.systemNoUi=false;
        }
      }
    }
    if (!app.systemNoUi) {
      app.curProcState=ActivityManager.PROCESS_STATE_PERSISTENT_UI;
    }
    return (app.curAdj=app.maxAdj);
  }
  app.systemNoUi=false;
  final int PROCESS_STATE_CUR_TOP=mTopProcessState;
  int adj;
  int schedGroup;
  int procState;
  boolean foregroundActivities=false;
  BroadcastQueue queue;
  if (app == TOP_APP) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    foregroundActivities=true;
    procState=PROCESS_STATE_CUR_TOP;
  }
 else   if (app.instrumentationClass != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=Process.THREAD_GROUP_DEFAULT;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
  }
 else   if ((queue=isReceivingBroadcast(app)) != null) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=(queue == mFgBroadcastQueue) ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_RECEIVER;
  }
 else   if (app.executingServices.size() > 0) {
    adj=ProcessList.FOREGROUND_APP_ADJ;
    schedGroup=app.execServicesFg ? Process.THREAD_GROUP_DEFAULT : Process.THREAD_GROUP_BG_NONINTERACTIVE;
    app.adjType=""String_Node_Str"";
    procState=ActivityManager.PROCESS_STATE_SERVICE;
  }
 else {
    schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
    adj=cachedAdj;
    procState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
    app.cached=true;
    app.empty=true;
    app.adjType=""String_Node_Str"";
  }
  if (!foregroundActivities && activitiesSize > 0) {
    int minLayer=ProcessList.VISIBLE_APP_LAYER_MAX;
    for (int j=0; j < activitiesSize; j++) {
      final ActivityRecord r=app.activities.get(j);
      if (r.app != app) {
        Slog.w(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ app+ ""String_Node_Str""+ r.app+ ""String_Node_Str"");
        continue;
      }
      if (r.visible) {
        if (adj > ProcessList.VISIBLE_APP_ADJ) {
          adj=ProcessList.VISIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_CUR_TOP) {
          procState=PROCESS_STATE_CUR_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
        if (r.task != null && minLayer > 0) {
          final int layer=r.task.mLayerRank;
          if (layer >= 0 && minLayer > layer) {
            minLayer=layer;
          }
        }
        break;
      }
 else       if (r.state == ActivityState.PAUSING || r.state == ActivityState.PAUSED) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (procState > PROCESS_STATE_CUR_TOP) {
          procState=PROCESS_STATE_CUR_TOP;
        }
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else       if (r.state == ActivityState.STOPPING) {
        if (adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          adj=ProcessList.PERCEPTIBLE_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        if (!r.finishing) {
          if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
            procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
          }
        }
        app.cached=false;
        app.empty=false;
        foregroundActivities=true;
      }
 else {
        if (procState > ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
          procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
          app.adjType=""String_Node_Str"";
        }
      }
    }
    if (adj == ProcessList.VISIBLE_APP_ADJ) {
      adj+=minLayer;
    }
  }
  if (adj > ProcessList.PERCEPTIBLE_APP_ADJ || procState > ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE) {
    if (app.foregroundServices) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_FOREGROUND_SERVICE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
 else     if (app.forcingToForeground != null) {
      adj=ProcessList.PERCEPTIBLE_APP_ADJ;
      procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      app.cached=false;
      app.adjType=""String_Node_Str"";
      app.adjSource=app.forcingToForeground;
      schedGroup=Process.THREAD_GROUP_DEFAULT;
    }
  }
  if (app == mHeavyWeightProcess) {
    if (adj > ProcessList.HEAVY_WEIGHT_APP_ADJ) {
      adj=ProcessList.HEAVY_WEIGHT_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
      procState=ActivityManager.PROCESS_STATE_HEAVY_WEIGHT;
    }
  }
  if (app == mHomeProcess) {
    if (adj > ProcessList.HOME_APP_ADJ) {
      adj=ProcessList.HOME_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_HOME) {
      procState=ActivityManager.PROCESS_STATE_HOME;
    }
  }
  if (app == mPreviousProcess && app.activities.size() > 0) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (false)   Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ adj+ ""String_Node_Str""+ app.adjType);
  app.adjSeq=mAdjSeq;
  app.curRawAdj=adj;
  app.hasStartedServices=false;
  if (mBackupTarget != null && app == mBackupTarget.app) {
    if (adj > ProcessList.BACKUP_APP_ADJ) {
      if (DEBUG_BACKUP)       Slog.v(TAG_BACKUP,""String_Node_Str"" + app);
      adj=ProcessList.BACKUP_APP_ADJ;
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
      }
      app.adjType=""String_Node_Str"";
      app.cached=false;
    }
    if (procState > ActivityManager.PROCESS_STATE_BACKUP) {
      procState=ActivityManager.PROCESS_STATE_BACKUP;
    }
  }
  boolean mayBeTop=false;
  for (int is=app.services.size() - 1; is >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); is--) {
    ServiceRecord s=app.services.valueAt(is);
    if (s.startRequested) {
      app.hasStartedServices=true;
      if (procState > ActivityManager.PROCESS_STATE_SERVICE) {
        procState=ActivityManager.PROCESS_STATE_SERVICE;
      }
      if (app.hasShownUi && app != mHomeProcess) {
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
 else {
        if (now < (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
          if (adj > ProcessList.SERVICE_ADJ) {
            adj=ProcessList.SERVICE_ADJ;
            app.adjType=""String_Node_Str"";
            app.cached=false;
          }
        }
        if (adj > ProcessList.SERVICE_ADJ) {
          app.adjType=""String_Node_Str"";
        }
      }
    }
    for (int conni=s.connections.size() - 1; conni >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); conni--) {
      ArrayList<ConnectionRecord> clist=s.connections.valueAt(conni);
      for (int i=0; i < clist.size() && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i++) {
        ConnectionRecord cr=clist.get(i);
        if (cr.binding.client == app) {
          continue;
        }
        if ((cr.flags & Context.BIND_WAIVE_PRIORITY) == 0) {
          ProcessRecord client=cr.binding.client;
          int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
          int clientProcState=client.curProcState;
          if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
            clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
          }
          String adjType=null;
          if ((cr.flags & Context.BIND_ALLOW_OOM_MANAGEMENT) != 0) {
            if (app.hasShownUi && app != mHomeProcess) {
              if (adj > clientAdj) {
                adjType=""String_Node_Str"";
              }
              app.cached=false;
              clientAdj=adj;
              clientProcState=procState;
            }
 else {
              if (now >= (s.lastActivity + ActiveServices.MAX_SERVICE_INACTIVITY)) {
                if (adj > clientAdj) {
                  adjType=""String_Node_Str"";
                }
                clientAdj=adj;
              }
            }
          }
          if (adj > clientAdj) {
            if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
              adjType=""String_Node_Str"";
            }
 else {
              if ((cr.flags & (Context.BIND_ABOVE_CLIENT | Context.BIND_IMPORTANT)) != 0) {
                adj=clientAdj >= ProcessList.PERSISTENT_SERVICE_ADJ ? clientAdj : ProcessList.PERSISTENT_SERVICE_ADJ;
              }
 else               if ((cr.flags & Context.BIND_NOT_VISIBLE) != 0 && clientAdj < ProcessList.PERCEPTIBLE_APP_ADJ && adj > ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=ProcessList.PERCEPTIBLE_APP_ADJ;
              }
 else               if (clientAdj >= ProcessList.PERCEPTIBLE_APP_ADJ) {
                adj=clientAdj;
              }
 else {
                if (adj > ProcessList.VISIBLE_APP_ADJ) {
                  adj=Math.max(clientAdj,ProcessList.VISIBLE_APP_ADJ);
                }
              }
              if (!client.cached) {
                app.cached=false;
              }
              adjType=""String_Node_Str"";
            }
          }
          if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
            if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
              if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
                mayBeTop=true;
                clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
              }
 else {
                if ((cr.flags & Context.BIND_FOREGROUND_SERVICE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else                 if (mWakefulness == PowerManagerInternal.WAKEFULNESS_AWAKE && (cr.flags & Context.BIND_FOREGROUND_SERVICE_WHILE_AWAKE) != 0) {
                  clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
                }
 else {
                  clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
                }
              }
            }
          }
 else {
            if (clientProcState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND) {
              clientProcState=ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND;
            }
          }
          if (procState > clientProcState) {
            procState=clientProcState;
          }
          if (procState < ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND && (cr.flags & Context.BIND_SHOWING_UI) != 0) {
            app.pendingUiClean=true;
          }
          if (adjType != null) {
            app.adjType=adjType;
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=cr.binding.client;
            app.adjSourceProcState=clientProcState;
            app.adjTarget=s.name;
          }
        }
        if ((cr.flags & Context.BIND_TREAT_LIKE_ACTIVITY) != 0) {
          app.treatLikeActivity=true;
        }
        final ActivityRecord a=cr.activity;
        if ((cr.flags & Context.BIND_ADJUST_WITH_ACTIVITY) != 0) {
          if (a != null && adj > ProcessList.FOREGROUND_APP_ADJ && (a.visible || a.state == ActivityState.RESUMED || a.state == ActivityState.PAUSING)) {
            adj=ProcessList.FOREGROUND_APP_ADJ;
            if ((cr.flags & Context.BIND_NOT_FOREGROUND) == 0) {
              schedGroup=Process.THREAD_GROUP_DEFAULT;
            }
            app.cached=false;
            app.adjType=""String_Node_Str"";
            app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE;
            app.adjSource=a;
            app.adjSourceProcState=procState;
            app.adjTarget=s.name;
          }
        }
      }
    }
  }
  for (int provi=app.pubProviders.size() - 1; provi >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); provi--) {
    ContentProviderRecord cpr=app.pubProviders.valueAt(provi);
    for (int i=cpr.connections.size() - 1; i >= 0 && (adj > ProcessList.FOREGROUND_APP_ADJ || schedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE || procState > ActivityManager.PROCESS_STATE_TOP); i--) {
      ContentProviderConnection conn=cpr.connections.get(i);
      ProcessRecord client=conn.client;
      if (client == app) {
        continue;
      }
      int clientAdj=computeOomAdjLocked(client,cachedAdj,TOP_APP,doingAll,now);
      int clientProcState=client.curProcState;
      if (clientProcState >= ActivityManager.PROCESS_STATE_CACHED_ACTIVITY) {
        clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
      }
      if (adj > clientAdj) {
        if (app.hasShownUi && app != mHomeProcess && clientAdj > ProcessList.PERCEPTIBLE_APP_ADJ) {
          app.adjType=""String_Node_Str"";
        }
 else {
          adj=clientAdj > ProcessList.FOREGROUND_APP_ADJ ? clientAdj : ProcessList.FOREGROUND_APP_ADJ;
          app.adjType=""String_Node_Str"";
        }
        app.cached&=client.cached;
        app.adjTypeCode=ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE;
        app.adjSource=client;
        app.adjSourceProcState=clientProcState;
        app.adjTarget=cpr.name;
      }
      if (clientProcState <= ActivityManager.PROCESS_STATE_TOP) {
        if (clientProcState == ActivityManager.PROCESS_STATE_TOP) {
          mayBeTop=true;
          clientProcState=ActivityManager.PROCESS_STATE_CACHED_EMPTY;
        }
 else {
          clientProcState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
        }
      }
      if (procState > clientProcState) {
        procState=clientProcState;
      }
      if (client.curSchedGroup == Process.THREAD_GROUP_DEFAULT) {
        schedGroup=Process.THREAD_GROUP_DEFAULT;
      }
    }
    if (cpr.hasExternalProcessHandles()) {
      if (adj > ProcessList.FOREGROUND_APP_ADJ) {
        adj=ProcessList.FOREGROUND_APP_ADJ;
        schedGroup=Process.THREAD_GROUP_DEFAULT;
        app.cached=false;
        app.adjType=""String_Node_Str"";
        app.adjTarget=cpr.name;
      }
      if (procState > ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND) {
        procState=ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
      }
    }
  }
  if (app.lastProviderTime > 0 && (app.lastProviderTime + CONTENT_PROVIDER_RETAIN_TIME) > now) {
    if (adj > ProcessList.PREVIOUS_APP_ADJ) {
      adj=ProcessList.PREVIOUS_APP_ADJ;
      schedGroup=Process.THREAD_GROUP_BG_NONINTERACTIVE;
      app.cached=false;
      app.adjType=""String_Node_Str"";
    }
    if (procState > ActivityManager.PROCESS_STATE_LAST_ACTIVITY) {
      procState=ActivityManager.PROCESS_STATE_LAST_ACTIVITY;
    }
  }
  if (mayBeTop && procState > ActivityManager.PROCESS_STATE_TOP) {
switch (procState) {
case ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND:
case ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND:
case ActivityManager.PROCESS_STATE_SERVICE:
      procState=ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE;
    break;
default :
  procState=ActivityManager.PROCESS_STATE_TOP;
break;
}
}
if (procState >= ActivityManager.PROCESS_STATE_CACHED_EMPTY) {
if (app.hasClientActivities) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT;
app.adjType=""String_Node_Str"";
}
 else if (app.treatLikeActivity) {
procState=ActivityManager.PROCESS_STATE_CACHED_ACTIVITY;
app.adjType=""String_Node_Str"";
}
}
if (adj == ProcessList.SERVICE_ADJ) {
if (doingAll) {
app.serviceb=mNewNumAServiceProcs > (mNumServiceProcs / 3);
mNewNumServiceProcs++;
if (!app.serviceb) {
if (mLastMemoryLevel > ProcessStats.ADJ_MEM_FACTOR_NORMAL && app.lastPss >= mProcessList.getCachedRestoreThresholdKb()) {
  app.serviceHighRam=true;
  app.serviceb=true;
}
 else {
  mNewNumAServiceProcs++;
}
}
 else {
app.serviceHighRam=false;
}
}
if (app.serviceb) {
adj=ProcessList.SERVICE_B_ADJ;
}
}
app.curRawAdj=adj;
if (adj > app.maxAdj) {
adj=app.maxAdj;
if (app.maxAdj <= ProcessList.PERCEPTIBLE_APP_ADJ) {
schedGroup=Process.THREAD_GROUP_DEFAULT;
}
}
app.curAdj=app.modifyRawOomAdj(adj);
app.curSchedGroup=schedGroup;
app.curProcState=procState;
app.foregroundActivities=foregroundActivities;
return app.curRawAdj;
}",0.9976254722072316
193211,"VoiceInteractionServiceInfo findAvailInteractor(int userHandle,String packageName){
  List<ResolveInfo> available=mContext.getPackageManager().queryIntentServicesAsUser(new Intent(VoiceInteractionService.SERVICE_INTERFACE),0,userHandle);
  int numAvailable=available.size();
  if (numAvailable == 0) {
    Slog.w(TAG,""String_Node_Str"" + userHandle);
    return null;
  }
 else {
    VoiceInteractionServiceInfo foundInfo=null;
    for (int i=0; i < numAvailable; i++) {
      ServiceInfo cur=available.get(i).serviceInfo;
      if ((cur.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        ComponentName comp=new ComponentName(cur.packageName,cur.name);
        try {
          VoiceInteractionServiceInfo info=new VoiceInteractionServiceInfo(mContext.getPackageManager(),comp,userHandle);
          if (info.getParseError() == null) {
            if (packageName == null || info.getServiceInfo().packageName.equals(packageName)) {
              if (foundInfo == null) {
                foundInfo=info;
              }
 else {
                Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + new ComponentName(foundInfo.getServiceInfo().packageName,foundInfo.getServiceInfo().name) + ""String_Node_Str""+ new ComponentName(cur.packageName,cur.name));
              }
            }
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + comp + ""String_Node_Str""+ info.getParseError());
          }
        }
 catch (        PackageManager.NameNotFoundException e) {
          Slog.w(TAG,""String_Node_Str"" + comp);
        }
catch (        RemoteException e) {
        }
      }
    }
    return foundInfo;
  }
}","VoiceInteractionServiceInfo findAvailInteractor(int userHandle,String packageName){
  List<ResolveInfo> available=mContext.getPackageManager().queryIntentServicesAsUser(new Intent(VoiceInteractionService.SERVICE_INTERFACE),0,userHandle);
  int numAvailable=available.size();
  if (numAvailable == 0) {
    Slog.w(TAG,""String_Node_Str"" + userHandle);
    return null;
  }
 else {
    VoiceInteractionServiceInfo foundInfo=null;
    for (int i=0; i < numAvailable; i++) {
      ServiceInfo cur=available.get(i).serviceInfo;
      if ((cur.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
        ComponentName comp=new ComponentName(cur.packageName,cur.name);
        try {
          VoiceInteractionServiceInfo info=new VoiceInteractionServiceInfo(mContext.getPackageManager(),comp,userHandle);
          if (info.getParseError() == null) {
            if (packageName == null || info.getServiceInfo().packageName.equals(packageName)) {
              if (foundInfo == null) {
                foundInfo=info;
              }
 else {
                Slog.w(TAG,""String_Node_Str"" + ""String_Node_Str"" + new ComponentName(foundInfo.getServiceInfo().packageName,foundInfo.getServiceInfo().name) + ""String_Node_Str""+ new ComponentName(cur.packageName,cur.name));
              }
            }
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + comp + ""String_Node_Str""+ info.getParseError());
          }
        }
 catch (        PackageManager.NameNotFoundException e) {
          Slog.w(TAG,""String_Node_Str"" + comp);
        }
      }
    }
    return foundInfo;
  }
}",0.973308504034761
193212,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9932659932659932
193213,"/** 
 * Returns the task stack bounds in the current orientation. These bounds do not account for the system insets.
 */
public void getTaskStackBounds(Rect windowBounds,int topInset,int rightInset,Rect searchBarBounds,Rect taskStackBounds){
  if (hasTransposedNavBar) {
    int swInset=getInsetToSmallestWidth(windowBounds.right - rightInset - windowBounds.left);
    taskStackBounds.set(windowBounds.left + swInset,windowBounds.top + topInset,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
 else {
    int swInset=getInsetToSmallestWidth(windowBounds.right - windowBounds.left);
    int top=searchBarBounds.isEmpty() ? topInset : 0;
    taskStackBounds.set(windowBounds.left + swInset,searchBarBounds.bottom + top,windowBounds.right - swInset,windowBounds.bottom);
  }
}","/** 
 * Returns the task stack bounds in the current orientation. These bounds do not account for the system insets.
 */
public void getTaskStackBounds(Rect windowBounds,int topInset,int rightInset,Rect searchBarBounds,Rect taskStackBounds){
  if (hasTransposedNavBar) {
    int swInset=getInsetToSmallestWidth(windowBounds.right - rightInset - windowBounds.left);
    taskStackBounds.set(windowBounds.left + swInset,windowBounds.top + topInset,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
 else {
    int swInset=getInsetToSmallestWidth(windowBounds.right - windowBounds.left);
    int top=searchBarBounds.isEmpty() ? topInset : 0;
    taskStackBounds.set(windowBounds.left + swInset,searchBarBounds.bottom + top,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
}",0.991869918699187
193214,"/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  int ffHeight=(taskStackBounds.height() - 2 * heightPadding - mStackBottomOffset) / 2;
  mFreeformRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.top + heightPadding + ffHeight);
  mFreeformStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding + ffHeight+ heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  mStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  int size=Math.min(mStackRect.width(),mStackRect.height() - mStackBottomOffset);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + size,mStackRect.top + size);
  mCurrentStackRect=ssp.hasFreeformWorkspaceSupport() ? mFreeformStackRect : mStackRect;
  int withinAffiliationOffset=mContext.getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  int betweenAffiliationOffset=(int)(VISIBLE_TASK_HEIGHT_BETWEEN_TASKS * mTaskRect.height());
  mWithinAffiliationPOffset=sCurve.computePOffsetForScaledHeight(withinAffiliationOffset,mCurrentStackRect);
  mBetweenAffiliationPOffset=sCurve.computePOffsetForScaledHeight(betweenAffiliationOffset,mCurrentStackRect);
  mTaskHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height(),mCurrentStackRect);
  mTaskHalfHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height() / 2,mCurrentStackRect);
  mStackBottomPOffset=sCurve.computePOffsetForHeight(mStackBottomOffset,mCurrentStackRect);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + sCurve.getArcLength());
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mFreeformStackRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
    Log.d(TAG,""String_Node_Str"" + mWithinAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mBetweenAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHalfHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mStackBottomPOffset);
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(0f,mCurrentStackRect));
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(1f,mCurrentStackRect));
  }
}","/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  int ffHeight=(taskStackBounds.height() - 2 * heightPadding - mStackBottomOffset) / 2;
  mFreeformRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.top + heightPadding + ffHeight);
  mFreeformStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding + ffHeight+ heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  mStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  int size=mStackRect.width();
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + size,mStackRect.top + size);
  mCurrentStackRect=ssp.hasFreeformWorkspaceSupport() ? mFreeformStackRect : mStackRect;
  int withinAffiliationOffset=mContext.getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  int betweenAffiliationOffset=(int)(VISIBLE_TASK_HEIGHT_BETWEEN_TASKS * mTaskRect.height());
  mWithinAffiliationPOffset=sCurve.computePOffsetForScaledHeight(withinAffiliationOffset,mCurrentStackRect);
  mBetweenAffiliationPOffset=sCurve.computePOffsetForScaledHeight(betweenAffiliationOffset,mCurrentStackRect);
  mTaskHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height(),mCurrentStackRect);
  mTaskHalfHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height() / 2,mCurrentStackRect);
  mStackBottomPOffset=sCurve.computePOffsetForHeight(mStackBottomOffset,mCurrentStackRect);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + sCurve.getArcLength());
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mFreeformStackRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
    Log.d(TAG,""String_Node_Str"" + mWithinAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mBetweenAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHalfHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mStackBottomPOffset);
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(0f,mCurrentStackRect));
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(1f,mCurrentStackRect));
  }
}",0.9911627101022352
193215,"/** 
 * This is called with the size of the space not including the top or right insets, or the search bar height in portrait (but including the search bar width in landscape, since we want to draw under it.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=taskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    Rect taskRect=mLayoutAlgorithm.mTaskRect;
    tv.layout(taskRect.left - mTmpRect.left,taskRect.top - mTmpRect.top,taskRect.right + mTmpRect.right,taskRect.bottom + mTmpRect.bottom);
  }
  if (mAwaitingFirstLayout) {
    mAwaitingFirstLayout=false;
    onFirstLayout();
  }
  if (changed) {
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
    clipTaskViews(true);
  }
}","/** 
 * This is called with the size of the space not including the top or right insets, or the search bar height in portrait (but including the search bar width in landscape, since we want to draw under it.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  mTmpTaskViews.clear();
  mTmpTaskViews.addAll(getTaskViews());
  mTmpTaskViews.addAll(mViewPool.getViews());
  int taskViewCount=mTmpTaskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=mTmpTaskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    Rect taskRect=mLayoutAlgorithm.mTaskRect;
    tv.layout(taskRect.left - mTmpRect.left,taskRect.top - mTmpRect.top,taskRect.right + mTmpRect.right,taskRect.bottom + mTmpRect.bottom);
  }
  if (mAwaitingFirstLayout) {
    mAwaitingFirstLayout=false;
    onFirstLayout();
  }
  if (changed) {
    if (mStackScroller.isScrollOutOfBounds()) {
      mStackScroller.boundScroll();
    }
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
    clipTaskViews(true);
  }
}",0.8658649398704903
193216,"/** 
 * Resets this TaskStackView for reuse. 
 */
void reset(){
  resetFocusedTask();
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=taskViewCount - 1; i >= 0; i--) {
    mViewPool.returnViewToPool(taskViews.get(i));
  }
  if (mViewPool != null) {
    Iterator<TaskView> iter=mViewPool.poolViewIterator();
    if (iter != null) {
      while (iter.hasNext()) {
        TaskView tv=iter.next();
        tv.reset();
      }
    }
  }
  mStack.reset();
  mStackViewsDirty=true;
  mStackViewsClipDirty=true;
  mAwaitingFirstLayout=true;
  if (mUIDozeTrigger != null) {
    mUIDozeTrigger.stopDozing();
    mUIDozeTrigger.resetTrigger();
  }
  mStackScroller.reset();
}","/** 
 * Resets this TaskStackView for reuse. 
 */
void reset(){
  resetFocusedTask();
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=taskViewCount - 1; i >= 0; i--) {
    mViewPool.returnViewToPool(taskViews.get(i));
  }
  List<TaskView> poolViews=mViewPool.getViews();
  for (  TaskView tv : poolViews) {
    tv.reset();
  }
  mStack.reset();
  mStackViewsDirty=true;
  mStackViewsClipDirty=true;
  mAwaitingFirstLayout=true;
  if (mUIDozeTrigger != null) {
    mUIDozeTrigger.stopDozing();
    mUIDozeTrigger.resetTrigger();
  }
  mStackScroller.reset();
}",0.7872340425531915
193217,"/** 
 * This is called with the full window width and height to allow stack view children to perform the full screen transition down.
 */
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  computeRects(mTaskStackBounds);
  if (mAwaitingFirstLayout) {
    mStackScroller.setStackScrollToInitialState();
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
  }
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=taskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom,MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,height);
}","/** 
 * This is called with the full window width and height to allow stack view children to perform the full screen transition down.
 */
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  computeRects(mTaskStackBounds);
  if (mAwaitingFirstLayout) {
    mStackScroller.setStackScrollToInitialState();
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
  }
  mTmpTaskViews.clear();
  mTmpTaskViews.addAll(getTaskViews());
  mTmpTaskViews.addAll(mViewPool.getViews());
  int taskViewCount=mTmpTaskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=mTmpTaskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom,MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,height);
}",0.912739965095986
193218,"/** 
 * Returns the task stack bounds in the current orientation. These bounds do not account for the system insets.
 */
public void getTaskStackBounds(Rect windowBounds,int topInset,int rightInset,Rect searchBarBounds,Rect taskStackBounds){
  if (hasTransposedNavBar) {
    int swInset=getInsetToSmallestWidth(windowBounds.right - rightInset - windowBounds.left);
    taskStackBounds.set(windowBounds.left + swInset,windowBounds.top + topInset,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
 else {
    int swInset=getInsetToSmallestWidth(windowBounds.right - windowBounds.left);
    int top=searchBarBounds.isEmpty() ? topInset : 0;
    taskStackBounds.set(windowBounds.left + swInset,searchBarBounds.bottom + top,windowBounds.right - swInset,windowBounds.bottom);
  }
}","/** 
 * Returns the task stack bounds in the current orientation. These bounds do not account for the system insets.
 */
public void getTaskStackBounds(Rect windowBounds,int topInset,int rightInset,Rect searchBarBounds,Rect taskStackBounds){
  if (hasTransposedNavBar) {
    int swInset=getInsetToSmallestWidth(windowBounds.right - rightInset - windowBounds.left);
    taskStackBounds.set(windowBounds.left + swInset,windowBounds.top + topInset,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
 else {
    int swInset=getInsetToSmallestWidth(windowBounds.right - windowBounds.left);
    int top=searchBarBounds.isEmpty() ? topInset : 0;
    taskStackBounds.set(windowBounds.left + swInset,searchBarBounds.bottom + top,windowBounds.right - swInset - rightInset,windowBounds.bottom);
  }
}",0.991869918699187
193219,"/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  int ffHeight=(taskStackBounds.height() - 2 * heightPadding - mStackBottomOffset) / 2;
  mFreeformRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.top + heightPadding + ffHeight);
  mFreeformStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding + ffHeight+ heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  mStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  int size=Math.min(mStackRect.width(),mStackRect.height() - mStackBottomOffset);
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + size,mStackRect.top + size);
  mCurrentStackRect=ssp.hasFreeformWorkspaceSupport() ? mFreeformStackRect : mStackRect;
  int withinAffiliationOffset=mContext.getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  int betweenAffiliationOffset=(int)(VISIBLE_TASK_HEIGHT_BETWEEN_TASKS * mTaskRect.height());
  mWithinAffiliationPOffset=sCurve.computePOffsetForScaledHeight(withinAffiliationOffset,mCurrentStackRect);
  mBetweenAffiliationPOffset=sCurve.computePOffsetForScaledHeight(betweenAffiliationOffset,mCurrentStackRect);
  mTaskHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height(),mCurrentStackRect);
  mTaskHalfHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height() / 2,mCurrentStackRect);
  mStackBottomPOffset=sCurve.computePOffsetForHeight(mStackBottomOffset,mCurrentStackRect);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + sCurve.getArcLength());
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mFreeformStackRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
    Log.d(TAG,""String_Node_Str"" + mWithinAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mBetweenAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHalfHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mStackBottomPOffset);
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(0f,mCurrentStackRect));
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(1f,mCurrentStackRect));
  }
}","/** 
 * Computes the stack and task rects.  The given task stack bounds is the whole bounds not including the search bar.
 */
public void initialize(Rect taskStackBounds){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsConfiguration config=Recents.getConfiguration();
  int widthPadding=(int)(config.taskStackWidthPaddingPct * taskStackBounds.width());
  int heightPadding=mContext.getResources().getDimensionPixelSize(R.dimen.recents_stack_top_padding);
  mStackBottomOffset=mSystemInsets.bottom + heightPadding;
  int ffHeight=(taskStackBounds.height() - 2 * heightPadding - mStackBottomOffset) / 2;
  mFreeformRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.top + heightPadding + ffHeight);
  mFreeformStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding + ffHeight+ heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  mStackRect.set(taskStackBounds.left + widthPadding,taskStackBounds.top + heightPadding,taskStackBounds.right - widthPadding,taskStackBounds.bottom);
  int size=mStackRect.width();
  mTaskRect.set(mStackRect.left,mStackRect.top,mStackRect.left + size,mStackRect.top + size);
  mCurrentStackRect=ssp.hasFreeformWorkspaceSupport() ? mFreeformStackRect : mStackRect;
  int withinAffiliationOffset=mContext.getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  int betweenAffiliationOffset=(int)(VISIBLE_TASK_HEIGHT_BETWEEN_TASKS * mTaskRect.height());
  mWithinAffiliationPOffset=sCurve.computePOffsetForScaledHeight(withinAffiliationOffset,mCurrentStackRect);
  mBetweenAffiliationPOffset=sCurve.computePOffsetForScaledHeight(betweenAffiliationOffset,mCurrentStackRect);
  mTaskHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height(),mCurrentStackRect);
  mTaskHalfHeightPOffset=sCurve.computePOffsetForScaledHeight(mTaskRect.height() / 2,mCurrentStackRect);
  mStackBottomPOffset=sCurve.computePOffsetForHeight(mStackBottomOffset,mCurrentStackRect);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"");
    Log.d(TAG,""String_Node_Str"" + sCurve.getArcLength());
    Log.d(TAG,""String_Node_Str"" + mFreeformRect);
    Log.d(TAG,""String_Node_Str"" + mFreeformStackRect);
    Log.d(TAG,""String_Node_Str"" + mStackRect);
    Log.d(TAG,""String_Node_Str"" + mTaskRect);
    Log.d(TAG,""String_Node_Str"" + mSystemInsets);
    Log.d(TAG,""String_Node_Str"" + mWithinAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mBetweenAffiliationPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mTaskHalfHeightPOffset);
    Log.d(TAG,""String_Node_Str"" + mStackBottomPOffset);
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(0f,mCurrentStackRect));
    Log.d(TAG,""String_Node_Str"" + sCurve.pToX(1f,mCurrentStackRect));
  }
}",0.9911627101022352
193220,"/** 
 * This is called with the size of the space not including the top or right insets, or the search bar height in portrait (but including the search bar width in landscape, since we want to draw under it.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=taskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    Rect taskRect=mLayoutAlgorithm.mTaskRect;
    tv.layout(taskRect.left - mTmpRect.left,taskRect.top - mTmpRect.top,taskRect.right + mTmpRect.right,taskRect.bottom + mTmpRect.bottom);
  }
  if (mAwaitingFirstLayout) {
    mAwaitingFirstLayout=false;
    onFirstLayout();
  }
  if (changed) {
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
    clipTaskViews(true);
  }
}","/** 
 * This is called with the size of the space not including the top or right insets, or the search bar height in portrait (but including the search bar width in landscape, since we want to draw under it.
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  mTmpTaskViews.clear();
  mTmpTaskViews.addAll(getTaskViews());
  mTmpTaskViews.addAll(mViewPool.getViews());
  int taskViewCount=mTmpTaskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=mTmpTaskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    Rect taskRect=mLayoutAlgorithm.mTaskRect;
    tv.layout(taskRect.left - mTmpRect.left,taskRect.top - mTmpRect.top,taskRect.right + mTmpRect.right,taskRect.bottom + mTmpRect.bottom);
  }
  if (mAwaitingFirstLayout) {
    mAwaitingFirstLayout=false;
    onFirstLayout();
  }
  if (changed) {
    if (mStackScroller.isScrollOutOfBounds()) {
      mStackScroller.boundScroll();
    }
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
    clipTaskViews(true);
  }
}",0.8658649398704903
193221,"/** 
 * Resets this TaskStackView for reuse. 
 */
void reset(){
  resetFocusedTask();
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=taskViewCount - 1; i >= 0; i--) {
    mViewPool.returnViewToPool(taskViews.get(i));
  }
  if (mViewPool != null) {
    Iterator<TaskView> iter=mViewPool.poolViewIterator();
    if (iter != null) {
      while (iter.hasNext()) {
        TaskView tv=iter.next();
        tv.reset();
      }
    }
  }
  mStack.reset();
  mStackViewsDirty=true;
  mStackViewsClipDirty=true;
  mAwaitingFirstLayout=true;
  if (mUIDozeTrigger != null) {
    mUIDozeTrigger.stopDozing();
    mUIDozeTrigger.resetTrigger();
  }
  mStackScroller.reset();
}","/** 
 * Resets this TaskStackView for reuse. 
 */
void reset(){
  resetFocusedTask();
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=taskViewCount - 1; i >= 0; i--) {
    mViewPool.returnViewToPool(taskViews.get(i));
  }
  List<TaskView> poolViews=mViewPool.getViews();
  for (  TaskView tv : poolViews) {
    tv.reset();
  }
  mStack.reset();
  mStackViewsDirty=true;
  mStackViewsClipDirty=true;
  mAwaitingFirstLayout=true;
  if (mUIDozeTrigger != null) {
    mUIDozeTrigger.stopDozing();
    mUIDozeTrigger.resetTrigger();
  }
  mStackScroller.reset();
}",0.7872340425531915
193222,"/** 
 * This is called with the full window width and height to allow stack view children to perform the full screen transition down.
 */
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  computeRects(mTaskStackBounds);
  if (mAwaitingFirstLayout) {
    mStackScroller.setStackScrollToInitialState();
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
  }
  List<TaskView> taskViews=getTaskViews();
  int taskViewCount=taskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=taskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom,MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,height);
}","/** 
 * This is called with the full window width and height to allow stack view children to perform the full screen transition down.
 */
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  computeRects(mTaskStackBounds);
  if (mAwaitingFirstLayout) {
    mStackScroller.setStackScrollToInitialState();
    requestSynchronizeStackViewsWithModel();
    synchronizeStackViewsWithModel();
  }
  mTmpTaskViews.clear();
  mTmpTaskViews.addAll(getTaskViews());
  mTmpTaskViews.addAll(mViewPool.getViews());
  int taskViewCount=mTmpTaskViews.size();
  for (int i=0; i < taskViewCount; i++) {
    TaskView tv=mTmpTaskViews.get(i);
    if (tv.getBackground() != null) {
      tv.getBackground().getPadding(mTmpRect);
    }
 else {
      mTmpRect.setEmpty();
    }
    tv.measure(MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.width() + mTmpRect.left + mTmpRect.right,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(mLayoutAlgorithm.mTaskRect.height() + mTmpRect.top + mTmpRect.bottom,MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,height);
}",0.912739965095986
193223,"/** 
 * An entry was removed.
 * @param removed the removed entry
 * @param sbn the notification the entry has, which doesn't need to be the same as it's internalnotification
 */
private void onEntryRemovedInternal(NotificationData.Entry removed,final StatusBarNotification sbn){
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  final NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    return;
  }
  if (notif.isGroupSummary()) {
    group.summary=null;
  }
 else {
    group.children.remove(removed);
  }
  if (group.children.isEmpty()) {
    if (group.summary == null) {
      mGroupMap.remove(groupKey);
    }
 else     if (!group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}","/** 
 * An entry was removed.
 * @param removed the removed entry
 * @param sbn the notification the entry has, which doesn't need to be the same as it's internalnotification
 */
private void onEntryRemovedInternal(NotificationData.Entry removed,final StatusBarNotification sbn){
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  final NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    return;
  }
  if (notif.isGroupChild()) {
    group.children.remove(removed);
  }
 else {
    group.summary=null;
  }
  if (group.children.isEmpty()) {
    if (group.summary == null) {
      mGroupMap.remove(groupKey);
    }
 else     if (!group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}",0.9295958279009128
193224,"public void onEntryAdded(NotificationData.Entry added){
  StatusBarNotification sbn=added.notification;
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    group=new NotificationGroup();
    mGroupMap.put(groupKey,group);
  }
  if (notif.isGroupSummary()) {
    group.summary=added;
    group.expanded=added.row.areChildrenExpanded();
    if (!group.children.isEmpty()) {
      mListener.onGroupCreatedFromChildren(group);
    }
  }
 else {
    group.children.add(added);
    if (group.summary != null && group.children.size() == 1 && !group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}","public void onEntryAdded(NotificationData.Entry added){
  StatusBarNotification sbn=added.notification;
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    group=new NotificationGroup();
    mGroupMap.put(groupKey,group);
  }
  if (notif.isGroupChild()) {
    group.children.add(added);
    if (group.summary != null && group.children.size() == 1 && !group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
 else {
    group.summary=added;
    group.expanded=added.row.areChildrenExpanded();
    if (!group.children.isEmpty()) {
      mListener.onGroupCreatedFromChildren(group);
    }
  }
}",0.6514522821576764
193225,"/** 
 * @return whether a given notification is a summary in a group which has children
 */
public boolean isSummaryOfGroup(StatusBarNotification sbn){
  if (sbn.getNotification().isGroupChild()) {
    return false;
  }
  NotificationGroup group=mGroupMap.get(sbn.getGroupKey());
  if (group == null) {
    return false;
  }
  return !group.children.isEmpty();
}","/** 
 * @return whether a given notification is a summary in a group which has children
 */
public boolean isSummaryOfGroup(StatusBarNotification sbn){
  if (!sbn.getNotification().isGroupSummary()) {
    return false;
  }
  NotificationGroup group=mGroupMap.get(sbn.getGroupKey());
  if (group == null) {
    return false;
  }
  return !group.children.isEmpty();
}",0.9821182943603852
193226,"public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
  Notification n=notification.getNotification();
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  mNotificationData.updateRanking(ranking);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}","public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  mNotificationData.updateRanking(ranking);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}",0.9739744155271284
193227,"private void updateAppWindowsLocked(int displayId){
  ArrayList<TaskStack> stacks=mService.getDisplayContentLocked(displayId).getStacks();
  for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
    final TaskStack stack=stacks.get(stackNdx);
    final ArrayList<Task> tasks=stack.getTasks();
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
      for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
        final AppWindowAnimator appAnimator=tokens.get(tokenNdx).mAppAnimator;
        appAnimator.wasAnimating=appAnimator.animating;
        if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
          appAnimator.animating=true;
          mAnimating=mAppWindowAnimating=true;
        }
 else         if (appAnimator.wasAnimating) {
          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
          if (DEBUG_ANIM)           Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
        }
      }
    }
    final AppTokenList exitingAppTokens=stack.mExitingAppTokens;
    final int exitingCount=exitingAppTokens.size();
    for (int i=0; i < exitingCount; i++) {
      final AppWindowAnimator appAnimator=exitingAppTokens.get(i).mAppAnimator;
      appAnimator.wasAnimating=appAnimator.animating;
      if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
        mAnimating=mAppWindowAnimating=true;
      }
 else       if (appAnimator.wasAnimating) {
        setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
        if (DEBUG_ANIM)         Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
      }
    }
  }
}","private void updateAppWindowsLocked(int displayId){
  ArrayList<TaskStack> stacks=mService.getDisplayContentLocked(displayId).getStacks();
  for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
    final TaskStack stack=stacks.get(stackNdx);
    final ArrayList<Task> tasks=stack.getTasks();
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
      for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
        final AppWindowAnimator appAnimator=tokens.get(tokenNdx).mAppAnimator;
        appAnimator.wasAnimating=appAnimator.animating;
        if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
          appAnimator.animating=true;
          setAnimating(true);
          mAppWindowAnimating=true;
        }
 else         if (appAnimator.wasAnimating) {
          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
          if (DEBUG_ANIM)           Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
        }
      }
    }
    final AppTokenList exitingAppTokens=stack.mExitingAppTokens;
    final int exitingCount=exitingAppTokens.size();
    for (int i=0; i < exitingCount; i++) {
      final AppWindowAnimator appAnimator=exitingAppTokens.get(i).mAppAnimator;
      appAnimator.wasAnimating=appAnimator.animating;
      if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
        setAnimating(true);
        mAppWindowAnimating=true;
      }
 else       if (appAnimator.wasAnimating) {
        setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
        if (DEBUG_ANIM)         Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
      }
    }
  }
}",0.9787234042553192
193228,"private void updateWallpaperLocked(int displayId){
  mService.getDisplayContentLocked(displayId).resetAnimationBackgroundAnimator();
  final WindowList windows=mService.getWindowListLocked(displayId);
  WindowState detachedWallpaper=null;
  for (int i=windows.size() - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (winAnimator.mSurfaceController == null) {
      continue;
    }
    final int flags=win.mAttrs.flags;
    if (winAnimator.mAnimating) {
      if (winAnimator.mAnimation != null) {
        if ((flags & FLAG_SHOW_WALLPAPER) != 0 && winAnimator.mAnimation.getDetachWallpaper()) {
          detachedWallpaper=win;
        }
        final int color=winAnimator.mAnimation.getBackgroundColor();
        if (color != 0) {
          final TaskStack stack=win.getStack();
          if (stack != null) {
            stack.setAnimationBackground(winAnimator,color);
          }
        }
      }
      mAnimating=true;
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.animation != null && appAnimator.animating) {
      if ((flags & FLAG_SHOW_WALLPAPER) != 0 && appAnimator.animation.getDetachWallpaper()) {
        detachedWallpaper=win;
      }
      final int color=appAnimator.animation.getBackgroundColor();
      if (color != 0) {
        final TaskStack stack=win.getStack();
        if (stack != null) {
          stack.setAnimationBackground(winAnimator,color);
        }
      }
    }
  }
  if (mWindowDetachedWallpaper != detachedWallpaper) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,""String_Node_Str"" + mWindowDetachedWallpaper + ""String_Node_Str""+ detachedWallpaper);
    mWindowDetachedWallpaper=detachedWallpaper;
    mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
  }
}","private void updateWallpaperLocked(int displayId){
  mService.getDisplayContentLocked(displayId).resetAnimationBackgroundAnimator();
  final WindowList windows=mService.getWindowListLocked(displayId);
  WindowState detachedWallpaper=null;
  for (int i=windows.size() - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (winAnimator.mSurfaceController == null) {
      continue;
    }
    final int flags=win.mAttrs.flags;
    if (winAnimator.mAnimating) {
      if (winAnimator.mAnimation != null) {
        if ((flags & FLAG_SHOW_WALLPAPER) != 0 && winAnimator.mAnimation.getDetachWallpaper()) {
          detachedWallpaper=win;
        }
        final int color=winAnimator.mAnimation.getBackgroundColor();
        if (color != 0) {
          final TaskStack stack=win.getStack();
          if (stack != null) {
            stack.setAnimationBackground(winAnimator,color);
          }
        }
      }
      setAnimating(true);
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.animation != null && appAnimator.animating) {
      if ((flags & FLAG_SHOW_WALLPAPER) != 0 && appAnimator.animation.getDetachWallpaper()) {
        detachedWallpaper=win;
      }
      final int color=appAnimator.animation.getBackgroundColor();
      if (color != 0) {
        final TaskStack stack=win.getStack();
        if (stack != null) {
          stack.setAnimationBackground(winAnimator,color);
        }
      }
    }
  }
  if (mWindowDetachedWallpaper != detachedWallpaper) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,""String_Node_Str"" + mWindowDetachedWallpaper + ""String_Node_Str""+ detachedWallpaper);
    mWindowDetachedWallpaper=detachedWallpaper;
    mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
  }
}",0.9931675321125992
193229,"private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.mSurfaceController != null && winAnimator.mSurfaceController.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      mAnimating|=nowAnimating;
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,mKeyguardGoingAwayToNotificationShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime());
            winAnimator.mKeyguardGoingAwayAnimation=true;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn || atoken.mAnimatingWithSavedSurface) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!mKeyguardGoingAwayDisableWindowAnimations) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,mKeyguardGoingAwayToNotificationShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !mKeyguardGoingAwayDisableWindowAnimations) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(mKeyguardGoingAwayToNotificationShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
}","private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.mSurfaceController != null && winAnimator.mSurfaceController.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      orAnimating(nowAnimating);
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,mKeyguardGoingAwayToNotificationShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime());
            winAnimator.mKeyguardGoingAwayAnimation=true;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn || atoken.mAnimatingWithSavedSurface) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!mKeyguardGoingAwayDisableWindowAnimations) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,mKeyguardGoingAwayToNotificationShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !mKeyguardGoingAwayDisableWindowAnimations) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(mKeyguardGoingAwayToNotificationShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
}",0.9974127461851208
193230,"/** 
 * See if any windows have been drawn, so they (and others associated with them) can now be shown. 
 */
private void testTokenMayBeDrawnLocked(int displayId){
  final ArrayList<Task> tasks=mService.getDisplayContentLocked(displayId).getTasks();
  final int numTasks=tasks.size();
  for (int taskNdx=0; taskNdx < numTasks; ++taskNdx) {
    final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    final int numTokens=tokens.size();
    for (int tokenNdx=0; tokenNdx < numTokens; ++tokenNdx) {
      final AppWindowToken wtoken=tokens.get(tokenNdx);
      AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      final boolean allDrawn=wtoken.allDrawn;
      if (allDrawn != appAnimator.allDrawn) {
        appAnimator.allDrawn=allDrawn;
        if (allDrawn) {
          if (appAnimator.freezingScreen) {
            appAnimator.showAllWindowsLocked();
            mService.unsetAppFreezingScreenLocked(wtoken,false,true);
            if (DEBUG_ORIENTATION)             Slog.i(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.numInterestingWindows+ ""String_Node_Str""+ wtoken.numDrawnWindows);
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"",displayId);
          }
 else {
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM,""String_Node_Str"",displayId);
            if (!mService.mOpeningApps.contains(wtoken)) {
              mAnimating|=appAnimator.showAllWindowsLocked();
            }
          }
        }
      }
    }
  }
}","/** 
 * See if any windows have been drawn, so they (and others associated with them) can now be shown. 
 */
private void testTokenMayBeDrawnLocked(int displayId){
  final ArrayList<Task> tasks=mService.getDisplayContentLocked(displayId).getTasks();
  final int numTasks=tasks.size();
  for (int taskNdx=0; taskNdx < numTasks; ++taskNdx) {
    final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    final int numTokens=tokens.size();
    for (int tokenNdx=0; tokenNdx < numTokens; ++tokenNdx) {
      final AppWindowToken wtoken=tokens.get(tokenNdx);
      AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      final boolean allDrawn=wtoken.allDrawn;
      if (allDrawn != appAnimator.allDrawn) {
        appAnimator.allDrawn=allDrawn;
        if (allDrawn) {
          if (appAnimator.freezingScreen) {
            appAnimator.showAllWindowsLocked();
            mService.unsetAppFreezingScreenLocked(wtoken,false,true);
            if (DEBUG_ORIENTATION)             Slog.i(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.numInterestingWindows+ ""String_Node_Str""+ wtoken.numDrawnWindows);
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"",displayId);
          }
 else {
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM,""String_Node_Str"",displayId);
            if (!mService.mOpeningApps.contains(wtoken)) {
              orAnimating(appAnimator.showAllWindowsLocked());
            }
          }
        }
      }
    }
  }
}",0.9919276719405876
193231,"/** 
 * Locked on mService.mWindowMap. 
 */
private void animateLocked(long frameTimeNs){
  if (!mInitialized) {
    return;
  }
  mCurrentTime=frameTimeNs / TimeUtils.NANOS_PER_MS;
  mBulkUpdateParams=SET_ORIENTATION_CHANGE_COMPLETE;
  boolean wasAnimating=mAnimating;
  mAnimating=false;
  mAppWindowAnimating=false;
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mCurrentTime);
  }
  if (SHOW_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  SurfaceControl.setAnimationTransaction();
  try {
    final int numDisplays=mDisplayContentsAnimators.size();
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      updateAppWindowsLocked(displayId);
      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);
      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;
      if (screenRotationAnimation != null && screenRotationAnimation.isAnimating()) {
        if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) {
          mAnimating=true;
        }
 else {
          mBulkUpdateParams|=SET_UPDATE_ROTATION;
          screenRotationAnimation.kill();
          displayAnimator.mScreenRotationAnimation=null;
          if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onRotationChangedLocked(mService.getDefaultDisplayContentLocked(),mService.mRotation);
          }
        }
      }
      updateWindowsLocked(displayId);
      updateWallpaperLocked(displayId);
      final WindowList windows=mService.getWindowListLocked(displayId);
      final int N=windows.size();
      for (int j=0; j < N; j++) {
        windows.get(j).mWinAnimator.prepareSurfaceLocked(true);
      }
    }
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      testTokenMayBeDrawnLocked(displayId);
      final ScreenRotationAnimation screenRotationAnimation=mDisplayContentsAnimators.valueAt(i).mScreenRotationAnimation;
      if (screenRotationAnimation != null) {
        screenRotationAnimation.updateSurfacesInTransaction();
      }
      mAnimating|=mService.getDisplayContentLocked(displayId).animateDimLayers();
      if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
        mService.mAccessibilityController.drawMagnifiedRegionBorderIfNeededLocked();
      }
    }
    if (mAnimating) {
      mService.scheduleAnimationLocked();
    }
    if (mService.mWatermark != null) {
      mService.mWatermark.drawIfNeeded();
    }
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  boolean hasPendingLayoutChanges=false;
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    final int pendingChanges=getPendingLayoutChanges(displayContent.getDisplayId());
    if ((pendingChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
      mBulkUpdateParams|=SET_WALLPAPER_ACTION_PENDING;
    }
    if (pendingChanges != 0) {
      hasPendingLayoutChanges=true;
    }
  }
  boolean doRequest=false;
  if (mBulkUpdateParams != 0) {
    doRequest=mWindowPlacerLocked.copyAnimToLayoutParamsLocked();
  }
  if (hasPendingLayoutChanges || doRequest) {
    mWindowPlacerLocked.requestTraversal();
  }
  if (mAnimating && !wasAnimating && Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
    Trace.asyncTraceBegin(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
  }
  if (!mAnimating && wasAnimating) {
    mWindowPlacerLocked.requestTraversal();
    if (Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
      Trace.asyncTraceEnd(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
    }
  }
  if (mRemoveReplacedWindows) {
    removeReplacedWindowsLocked();
  }
  mService.destroyPreservedSurfaceLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mAnimating + ""String_Node_Str""+ Integer.toHexString(mBulkUpdateParams)+ ""String_Node_Str""+ Integer.toHexString(getPendingLayoutChanges(Display.DEFAULT_DISPLAY)));
  }
}","/** 
 * Locked on mService.mWindowMap. 
 */
private void animateLocked(long frameTimeNs){
  if (!mInitialized) {
    return;
  }
  mCurrentTime=frameTimeNs / TimeUtils.NANOS_PER_MS;
  mBulkUpdateParams=SET_ORIENTATION_CHANGE_COMPLETE;
  boolean wasAnimating=mAnimating;
  setAnimating(false);
  mAppWindowAnimating=false;
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mCurrentTime);
  }
  if (SHOW_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  SurfaceControl.setAnimationTransaction();
  try {
    final int numDisplays=mDisplayContentsAnimators.size();
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      updateAppWindowsLocked(displayId);
      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);
      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;
      if (screenRotationAnimation != null && screenRotationAnimation.isAnimating()) {
        if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) {
          setAnimating(true);
        }
 else {
          mBulkUpdateParams|=SET_UPDATE_ROTATION;
          screenRotationAnimation.kill();
          displayAnimator.mScreenRotationAnimation=null;
          if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onRotationChangedLocked(mService.getDefaultDisplayContentLocked(),mService.mRotation);
          }
        }
      }
      updateWindowsLocked(displayId);
      updateWallpaperLocked(displayId);
      final WindowList windows=mService.getWindowListLocked(displayId);
      final int N=windows.size();
      for (int j=0; j < N; j++) {
        windows.get(j).mWinAnimator.prepareSurfaceLocked(true);
      }
    }
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      testTokenMayBeDrawnLocked(displayId);
      final ScreenRotationAnimation screenRotationAnimation=mDisplayContentsAnimators.valueAt(i).mScreenRotationAnimation;
      if (screenRotationAnimation != null) {
        screenRotationAnimation.updateSurfacesInTransaction();
      }
      orAnimating(mService.getDisplayContentLocked(displayId).animateDimLayers());
      if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
        mService.mAccessibilityController.drawMagnifiedRegionBorderIfNeededLocked();
      }
    }
    if (mAnimating) {
      mService.scheduleAnimationLocked();
    }
    if (mService.mWatermark != null) {
      mService.mWatermark.drawIfNeeded();
    }
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  boolean hasPendingLayoutChanges=false;
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    final int pendingChanges=getPendingLayoutChanges(displayContent.getDisplayId());
    if ((pendingChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
      mBulkUpdateParams|=SET_WALLPAPER_ACTION_PENDING;
    }
    if (pendingChanges != 0) {
      hasPendingLayoutChanges=true;
    }
  }
  boolean doRequest=false;
  if (mBulkUpdateParams != 0) {
    doRequest=mWindowPlacerLocked.copyAnimToLayoutParamsLocked();
  }
  if (hasPendingLayoutChanges || doRequest) {
    mWindowPlacerLocked.requestTraversal();
  }
  if (mAnimating && !wasAnimating && Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
    Trace.asyncTraceBegin(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
  }
  if (!mAnimating && wasAnimating) {
    mWindowPlacerLocked.requestTraversal();
    if (Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
      Trace.asyncTraceEnd(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
    }
  }
  if (mRemoveReplacedWindows) {
    removeReplacedWindowsLocked();
  }
  mService.destroyPreservedSurfaceLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mAnimating + ""String_Node_Str""+ Integer.toHexString(mBulkUpdateParams)+ ""String_Node_Str""+ Integer.toHexString(getPendingLayoutChanges(Display.DEFAULT_DISPLAY)));
  }
}",0.9894378194207836
193232,"@Override public void handleMessage(Message msg){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + msg.what);
  }
switch (msg.what) {
case REPORT_FOCUS_CHANGE:
{
      WindowState lastFocus;
      WindowState newFocus;
      AccessibilityController accessibilityController=null;
synchronized (mWindowMap) {
        if (mAccessibilityController != null && getDefaultDisplayContentLocked().getDisplayId() == Display.DEFAULT_DISPLAY) {
          accessibilityController=mAccessibilityController;
        }
        lastFocus=mLastFocus;
        newFocus=mCurrentFocus;
        if (lastFocus == newFocus) {
          return;
        }
        mLastFocus=newFocus;
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus + ""String_Node_Str""+ newFocus);
        if (newFocus != null && lastFocus != null && !newFocus.isDisplayedLw()) {
          mLosingFocus.add(lastFocus);
          lastFocus=null;
        }
      }
      if (accessibilityController != null) {
        accessibilityController.onWindowFocusChangedNotLocked();
      }
      if (newFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + newFocus);
        newFocus.reportFocusChangedSerialized(true,mInTouchMode);
        notifyFocusChanged();
      }
      if (lastFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus);
        lastFocus.reportFocusChangedSerialized(false,mInTouchMode);
      }
    }
  break;
case REPORT_LOSING_FOCUS:
{
  ArrayList<WindowState> losers;
synchronized (mWindowMap) {
    losers=mLosingFocus;
    mLosingFocus=new ArrayList<WindowState>();
  }
  final int N=losers.size();
  for (int i=0; i < N; i++) {
    if (DEBUG_FOCUS_LIGHT)     Slog.i(TAG,""String_Node_Str"" + losers.get(i));
    losers.get(i).reportFocusChangedSerialized(false,mInTouchMode);
  }
}
break;
case DO_TRAVERSAL:
{
synchronized (mWindowMap) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
case ADD_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
final StartingData sd=wtoken.startingData;
if (sd == null) {
return;
}
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ sd.pkg);
View view=null;
try {
view=mPolicy.addStartingWindow(wtoken.token,sd.pkg,sd.theme,sd.compatInfo,sd.nonLocalizedLabel,sd.labelRes,sd.icon,sd.logo,sd.windowFlags);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
if (view != null) {
boolean abort=false;
synchronized (mWindowMap) {
if (wtoken.removed || wtoken.startingData == null) {
if (wtoken.startingWindow != null) {
  if (DEBUG_STARTING_WINDOW)   Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.removed+ ""String_Node_Str""+ wtoken.startingData);
  wtoken.startingWindow=null;
  wtoken.startingData=null;
  abort=true;
}
}
 else {
wtoken.startingView=view;
}
if (DEBUG_STARTING_WINDOW && !abort) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
}
if (abort) {
try {
mPolicy.removeStartingWindow(wtoken.token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case REMOVE_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
IBinder token=null;
View view=null;
synchronized (mWindowMap) {
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow != null) {
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
}
if (view != null) {
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case FINISHED_STARTING:
{
IBinder token=null;
View view=null;
while (true) {
synchronized (mWindowMap) {
final int N=mFinishedStarting.size();
if (N <= 0) {
break;
}
AppWindowToken wtoken=mFinishedStarting.remove(N - 1);
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow == null) {
continue;
}
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case REPORT_APPLICATION_TOKEN_DRAWN:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken);
wtoken.appToken.windowsDrawn();
}
 catch (RemoteException ex) {
}
}
break;
case REPORT_APPLICATION_TOKEN_WINDOWS:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
boolean nowVisible=msg.arg1 != 0;
boolean nowGone=msg.arg2 != 0;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ nowGone);
if (nowVisible) {
wtoken.appToken.windowsVisible();
}
 else {
wtoken.appToken.windowsGone();
}
}
 catch (RemoteException ex) {
}
}
break;
case WINDOW_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final WindowList windows=getDefaultWindowListLocked();
int i=windows.size();
while (i > 0) {
i--;
WindowState w=windows.get(i);
if (w.mOrientationChanging) {
w.mOrientationChanging=false;
w.mLastFreezeDuration=(int)(SystemClock.elapsedRealtime() - mDisplayFreezeTime);
Slog.w(TAG,""String_Node_Str"" + w);
}
}
mWindowPlacerLocked.performSurfacePlacement();
}
break;
}
case APP_TRANSITION_TIMEOUT:
{
synchronized (mWindowMap) {
if (mAppTransition.isTransitionSet() || !mOpeningApps.isEmpty() || !mClosingApps.isEmpty()) {
if (DEBUG_APP_TRANSITIONS) Slog.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + mAppTransition.isTransitionSet() + ""String_Node_Str""+ mOpeningApps.size()+ ""String_Node_Str""+ mClosingApps.size());
mAppTransition.setTimeout();
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
}
case PERSIST_ANIMATION_SCALE:
{
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.WINDOW_ANIMATION_SCALE,mWindowAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.TRANSITION_ANIMATION_SCALE,mTransitionAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.ANIMATOR_DURATION_SCALE,mAnimatorDurationScaleSetting);
break;
}
case FORCE_GC:
{
synchronized (mWindowMap) {
if (mAnimator.mAnimating || mAnimationScheduled) {
sendEmptyMessageDelayed(H.FORCE_GC,2000);
return;
}
if (mDisplayFrozen) {
return;
}
}
Runtime.getRuntime().gc();
break;
}
case ENABLE_SCREEN:
{
performEnableScreen();
break;
}
case APP_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final int numStacks=mStackIdToStack.size();
for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
final TaskStack stack=mStackIdToStack.valueAt(stackNdx);
final ArrayList<Task> tasks=stack.getTasks();
for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
AppWindowToken tok=tokens.get(tokenNdx);
if (tok.mAppAnimator.freezingScreen) {
Slog.w(TAG,""String_Node_Str"" + tok);
unsetAppFreezingScreenLocked(tok,true,true);
}
}
}
}
}
break;
}
case CLIENT_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
if (mClientFreezingScreen) {
mClientFreezingScreen=false;
mLastFinishedFreezeSource=""String_Node_Str"";
stopFreezingDisplayLocked();
}
}
break;
}
case SEND_NEW_CONFIGURATION:
{
removeMessages(SEND_NEW_CONFIGURATION);
sendNewConfiguration();
break;
}
case REPORT_WINDOWS_CHANGE:
{
if (mWindowsChanged) {
synchronized (mWindowMap) {
mWindowsChanged=false;
}
notifyWindowsChanged();
}
break;
}
case DRAG_START_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.unregister();
mInputMonitor.updateInputWindowsLw(true);
mDragState.reset();
mDragState=null;
}
}
break;
}
case DRAG_END_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.mDragResult=false;
mDragState.endDragLw();
}
}
break;
}
case REPORT_HARD_KEYBOARD_STATUS_CHANGE:
{
notifyHardKeyboardStatusChange();
break;
}
case BOOT_TIMEOUT:
{
performBootTimeout();
break;
}
case WAITING_FOR_DRAWN_TIMEOUT:
{
Runnable callback=null;
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"" + mWaitingForDrawn);
mWaitingForDrawn.clear();
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
break;
}
case SHOW_STRICT_MODE_VIOLATION:
{
showStrictModeViolation(msg.arg1,msg.arg2);
break;
}
case SHOW_CIRCULAR_DISPLAY_MASK:
{
showCircularMask(msg.arg1 == 1);
break;
}
case SHOW_EMULATOR_DISPLAY_OVERLAY:
{
showEmulatorDisplayOverlay();
break;
}
case DO_ANIMATION_CALLBACK:
{
try {
((IRemoteCallback)msg.obj).sendResult(null);
}
 catch (RemoteException e) {
}
break;
}
case DO_DISPLAY_ADDED:
handleDisplayAdded(msg.arg1);
break;
case DO_DISPLAY_REMOVED:
synchronized (mWindowMap) {
handleDisplayRemovedLocked(msg.arg1);
}
break;
case DO_DISPLAY_CHANGED:
synchronized (mWindowMap) {
handleDisplayChangedLocked(msg.arg1);
}
break;
case TAP_OUTSIDE_TASK:
{
int taskId;
synchronized (mWindowMap) {
taskId=((DisplayContent)msg.obj).taskIdFromPoint(msg.arg1,msg.arg2);
}
if (taskId >= 0) {
try {
mActivityManager.setFocusedTask(taskId);
}
 catch (RemoteException e) {
}
}
}
break;
case TAP_DOWN_OUTSIDE_TASK:
{
startResizingTask((DisplayContent)msg.obj,msg.arg1,msg.arg2);
}
break;
case FINISH_TASK_POSITIONING:
{
finishPositioning();
}
break;
case NOTIFY_ACTIVITY_DRAWN:
try {
mActivityManager.notifyActivityDrawn((IBinder)msg.obj);
}
 catch (RemoteException e) {
}
break;
case ALL_WINDOWS_DRAWN:
{
Runnable callback;
synchronized (mWindowMap) {
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
}
case NEW_ANIMATOR_SCALE:
{
float scale=getCurrentAnimatorScale();
ValueAnimator.setDurationScale(scale);
Session session=(Session)msg.obj;
if (session != null) {
try {
session.mCallback.onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
 else {
ArrayList<IWindowSessionCallback> callbacks=new ArrayList<IWindowSessionCallback>();
synchronized (mWindowMap) {
for (int i=0; i < mSessions.size(); i++) {
callbacks.add(mSessions.valueAt(i).mCallback);
}
}
for (int i=0; i < callbacks.size(); i++) {
try {
callbacks.get(i).onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
}
}
break;
case CHECK_IF_BOOT_ANIMATION_FINISHED:
{
final boolean bootAnimationComplete;
synchronized (mWindowMap) {
if (DEBUG_BOOT) Slog.i(TAG,""String_Node_Str"");
bootAnimationComplete=checkBootAnimationCompleteLocked();
}
if (bootAnimationComplete) {
performEnableScreen();
}
}
break;
case RESET_ANR_MESSAGE:
{
synchronized (mWindowMap) {
mLastANRState=null;
}
}
break;
case WALLPAPER_DRAW_PENDING_TIMEOUT:
{
synchronized (mWindowMap) {
if (mWallpaperControllerLocked.processWallpaperDrawPendingTimeout()) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
}
case UPDATE_DOCKED_STACK_DIVIDER:
{
synchronized (mWindowMap) {
getDefaultDisplayContentLocked().getDockedDividerController().reevaluateVisibility();
}
}
break;
case RESIZE_TASK:
{
try {
mActivityManager.resizeTask(msg.arg1,(Rect)msg.obj,msg.arg2);
}
 catch (RemoteException e) {
}
}
break;
case RESIZE_STACK:
{
try {
mActivityManager.resizeStack(msg.arg1,(Rect)msg.obj,msg.arg2 == 1);
}
 catch (RemoteException e) {
}
}
break;
}
if (DEBUG_WINDOW_TRACE) {
Slog.v(TAG,""String_Node_Str"");
}
}","@Override public void handleMessage(Message msg){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + msg.what);
  }
switch (msg.what) {
case REPORT_FOCUS_CHANGE:
{
      WindowState lastFocus;
      WindowState newFocus;
      AccessibilityController accessibilityController=null;
synchronized (mWindowMap) {
        if (mAccessibilityController != null && getDefaultDisplayContentLocked().getDisplayId() == Display.DEFAULT_DISPLAY) {
          accessibilityController=mAccessibilityController;
        }
        lastFocus=mLastFocus;
        newFocus=mCurrentFocus;
        if (lastFocus == newFocus) {
          return;
        }
        mLastFocus=newFocus;
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus + ""String_Node_Str""+ newFocus);
        if (newFocus != null && lastFocus != null && !newFocus.isDisplayedLw()) {
          mLosingFocus.add(lastFocus);
          lastFocus=null;
        }
      }
      if (accessibilityController != null) {
        accessibilityController.onWindowFocusChangedNotLocked();
      }
      if (newFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + newFocus);
        newFocus.reportFocusChangedSerialized(true,mInTouchMode);
        notifyFocusChanged();
      }
      if (lastFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus);
        lastFocus.reportFocusChangedSerialized(false,mInTouchMode);
      }
    }
  break;
case REPORT_LOSING_FOCUS:
{
  ArrayList<WindowState> losers;
synchronized (mWindowMap) {
    losers=mLosingFocus;
    mLosingFocus=new ArrayList<WindowState>();
  }
  final int N=losers.size();
  for (int i=0; i < N; i++) {
    if (DEBUG_FOCUS_LIGHT)     Slog.i(TAG,""String_Node_Str"" + losers.get(i));
    losers.get(i).reportFocusChangedSerialized(false,mInTouchMode);
  }
}
break;
case DO_TRAVERSAL:
{
synchronized (mWindowMap) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
case ADD_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
final StartingData sd=wtoken.startingData;
if (sd == null) {
return;
}
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ sd.pkg);
View view=null;
try {
view=mPolicy.addStartingWindow(wtoken.token,sd.pkg,sd.theme,sd.compatInfo,sd.nonLocalizedLabel,sd.labelRes,sd.icon,sd.logo,sd.windowFlags);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
if (view != null) {
boolean abort=false;
synchronized (mWindowMap) {
if (wtoken.removed || wtoken.startingData == null) {
if (wtoken.startingWindow != null) {
  if (DEBUG_STARTING_WINDOW)   Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.removed+ ""String_Node_Str""+ wtoken.startingData);
  wtoken.startingWindow=null;
  wtoken.startingData=null;
  abort=true;
}
}
 else {
wtoken.startingView=view;
}
if (DEBUG_STARTING_WINDOW && !abort) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
}
if (abort) {
try {
mPolicy.removeStartingWindow(wtoken.token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case REMOVE_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
IBinder token=null;
View view=null;
synchronized (mWindowMap) {
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow != null) {
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
}
if (view != null) {
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case FINISHED_STARTING:
{
IBinder token=null;
View view=null;
while (true) {
synchronized (mWindowMap) {
final int N=mFinishedStarting.size();
if (N <= 0) {
break;
}
AppWindowToken wtoken=mFinishedStarting.remove(N - 1);
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow == null) {
continue;
}
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case REPORT_APPLICATION_TOKEN_DRAWN:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken);
wtoken.appToken.windowsDrawn();
}
 catch (RemoteException ex) {
}
}
break;
case REPORT_APPLICATION_TOKEN_WINDOWS:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
boolean nowVisible=msg.arg1 != 0;
boolean nowGone=msg.arg2 != 0;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ nowGone);
if (nowVisible) {
wtoken.appToken.windowsVisible();
}
 else {
wtoken.appToken.windowsGone();
}
}
 catch (RemoteException ex) {
}
}
break;
case WINDOW_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final WindowList windows=getDefaultWindowListLocked();
int i=windows.size();
while (i > 0) {
i--;
WindowState w=windows.get(i);
if (w.mOrientationChanging) {
w.mOrientationChanging=false;
w.mLastFreezeDuration=(int)(SystemClock.elapsedRealtime() - mDisplayFreezeTime);
Slog.w(TAG,""String_Node_Str"" + w);
}
}
mWindowPlacerLocked.performSurfacePlacement();
}
break;
}
case APP_TRANSITION_TIMEOUT:
{
synchronized (mWindowMap) {
if (mAppTransition.isTransitionSet() || !mOpeningApps.isEmpty() || !mClosingApps.isEmpty()) {
if (DEBUG_APP_TRANSITIONS) Slog.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + mAppTransition.isTransitionSet() + ""String_Node_Str""+ mOpeningApps.size()+ ""String_Node_Str""+ mClosingApps.size());
mAppTransition.setTimeout();
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
}
case PERSIST_ANIMATION_SCALE:
{
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.WINDOW_ANIMATION_SCALE,mWindowAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.TRANSITION_ANIMATION_SCALE,mTransitionAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.ANIMATOR_DURATION_SCALE,mAnimatorDurationScaleSetting);
break;
}
case FORCE_GC:
{
synchronized (mWindowMap) {
if (mAnimator.isAnimating() || mAnimationScheduled) {
sendEmptyMessageDelayed(H.FORCE_GC,2000);
return;
}
if (mDisplayFrozen) {
return;
}
}
Runtime.getRuntime().gc();
break;
}
case ENABLE_SCREEN:
{
performEnableScreen();
break;
}
case APP_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final int numStacks=mStackIdToStack.size();
for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
final TaskStack stack=mStackIdToStack.valueAt(stackNdx);
final ArrayList<Task> tasks=stack.getTasks();
for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
AppWindowToken tok=tokens.get(tokenNdx);
if (tok.mAppAnimator.freezingScreen) {
Slog.w(TAG,""String_Node_Str"" + tok);
unsetAppFreezingScreenLocked(tok,true,true);
}
}
}
}
}
break;
}
case CLIENT_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
if (mClientFreezingScreen) {
mClientFreezingScreen=false;
mLastFinishedFreezeSource=""String_Node_Str"";
stopFreezingDisplayLocked();
}
}
break;
}
case SEND_NEW_CONFIGURATION:
{
removeMessages(SEND_NEW_CONFIGURATION);
sendNewConfiguration();
break;
}
case REPORT_WINDOWS_CHANGE:
{
if (mWindowsChanged) {
synchronized (mWindowMap) {
mWindowsChanged=false;
}
notifyWindowsChanged();
}
break;
}
case DRAG_START_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.unregister();
mInputMonitor.updateInputWindowsLw(true);
mDragState.reset();
mDragState=null;
}
}
break;
}
case DRAG_END_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.mDragResult=false;
mDragState.endDragLw();
}
}
break;
}
case REPORT_HARD_KEYBOARD_STATUS_CHANGE:
{
notifyHardKeyboardStatusChange();
break;
}
case BOOT_TIMEOUT:
{
performBootTimeout();
break;
}
case WAITING_FOR_DRAWN_TIMEOUT:
{
Runnable callback=null;
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"" + mWaitingForDrawn);
mWaitingForDrawn.clear();
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
break;
}
case SHOW_STRICT_MODE_VIOLATION:
{
showStrictModeViolation(msg.arg1,msg.arg2);
break;
}
case SHOW_CIRCULAR_DISPLAY_MASK:
{
showCircularMask(msg.arg1 == 1);
break;
}
case SHOW_EMULATOR_DISPLAY_OVERLAY:
{
showEmulatorDisplayOverlay();
break;
}
case DO_ANIMATION_CALLBACK:
{
try {
((IRemoteCallback)msg.obj).sendResult(null);
}
 catch (RemoteException e) {
}
break;
}
case DO_DISPLAY_ADDED:
handleDisplayAdded(msg.arg1);
break;
case DO_DISPLAY_REMOVED:
synchronized (mWindowMap) {
handleDisplayRemovedLocked(msg.arg1);
}
break;
case DO_DISPLAY_CHANGED:
synchronized (mWindowMap) {
handleDisplayChangedLocked(msg.arg1);
}
break;
case TAP_OUTSIDE_TASK:
{
int taskId;
synchronized (mWindowMap) {
taskId=((DisplayContent)msg.obj).taskIdFromPoint(msg.arg1,msg.arg2);
}
if (taskId >= 0) {
try {
mActivityManager.setFocusedTask(taskId);
}
 catch (RemoteException e) {
}
}
}
break;
case TAP_DOWN_OUTSIDE_TASK:
{
startResizingTask((DisplayContent)msg.obj,msg.arg1,msg.arg2);
}
break;
case FINISH_TASK_POSITIONING:
{
finishPositioning();
}
break;
case NOTIFY_ACTIVITY_DRAWN:
try {
mActivityManager.notifyActivityDrawn((IBinder)msg.obj);
}
 catch (RemoteException e) {
}
break;
case ALL_WINDOWS_DRAWN:
{
Runnable callback;
synchronized (mWindowMap) {
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
}
case NEW_ANIMATOR_SCALE:
{
float scale=getCurrentAnimatorScale();
ValueAnimator.setDurationScale(scale);
Session session=(Session)msg.obj;
if (session != null) {
try {
session.mCallback.onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
 else {
ArrayList<IWindowSessionCallback> callbacks=new ArrayList<IWindowSessionCallback>();
synchronized (mWindowMap) {
for (int i=0; i < mSessions.size(); i++) {
callbacks.add(mSessions.valueAt(i).mCallback);
}
}
for (int i=0; i < callbacks.size(); i++) {
try {
callbacks.get(i).onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
}
}
break;
case CHECK_IF_BOOT_ANIMATION_FINISHED:
{
final boolean bootAnimationComplete;
synchronized (mWindowMap) {
if (DEBUG_BOOT) Slog.i(TAG,""String_Node_Str"");
bootAnimationComplete=checkBootAnimationCompleteLocked();
}
if (bootAnimationComplete) {
performEnableScreen();
}
}
break;
case RESET_ANR_MESSAGE:
{
synchronized (mWindowMap) {
mLastANRState=null;
}
}
break;
case WALLPAPER_DRAW_PENDING_TIMEOUT:
{
synchronized (mWindowMap) {
if (mWallpaperControllerLocked.processWallpaperDrawPendingTimeout()) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
}
case UPDATE_DOCKED_STACK_DIVIDER:
{
synchronized (mWindowMap) {
getDefaultDisplayContentLocked().getDockedDividerController().reevaluateVisibility();
}
}
break;
case RESIZE_TASK:
{
try {
mActivityManager.resizeTask(msg.arg1,(Rect)msg.obj,msg.arg2);
}
 catch (RemoteException e) {
}
}
break;
case RESIZE_STACK:
{
try {
mActivityManager.resizeStack(msg.arg1,(Rect)msg.obj,msg.arg2 == 1);
}
 catch (RemoteException e) {
}
}
break;
}
if (DEBUG_WINDOW_TRACE) {
Slog.v(TAG,""String_Node_Str"");
}
}",0.9990326786390208
193233,"private void adjustCropToStackBounds(WindowState w,Rect clipRect,boolean isFreeformResizing){
  final AppWindowToken appToken=w.mAppToken;
  final Task task=w.getTask();
  if (task != null && appToken.mCropWindowsToStack && !appToken.mWillReplaceWindow) {
    TaskStack stack=task.mStack;
    stack.getDimBounds(mTmpStackBounds);
    final int frameX=isFreeformResizing ? (int)mSurfaceController.getX() : w.mFrame.left + mWin.mXOffset - w.getAttrs().surfaceInsets.left;
    final int frameY=isFreeformResizing ? (int)mSurfaceController.getY() : w.mFrame.top + mWin.mYOffset - w.getAttrs().surfaceInsets.top;
    clipRect.left=Math.max(0,Math.max(mTmpStackBounds.left,frameX + clipRect.left) - frameX);
    clipRect.top=Math.max(0,Math.max(mTmpStackBounds.top,frameY + clipRect.top) - frameY);
    clipRect.right=Math.max(0,Math.min(mTmpStackBounds.right,frameX + clipRect.right) - frameX);
    clipRect.bottom=Math.max(0,Math.min(mTmpStackBounds.bottom,frameY + clipRect.bottom) - frameY);
  }
}","private void adjustCropToStackBounds(WindowState w,Rect clipRect,boolean isFreeformResizing){
  final AppWindowToken appToken=w.mAppToken;
  final Task task=w.getTask();
  if (task == null || !appToken.mCropWindowsToStack) {
    return;
  }
  if (isAnimating() && (appToken.mWillReplaceWindow || w.inDockedWorkspace())) {
    return;
  }
  final TaskStack stack=task.mStack;
  stack.getDimBounds(mTmpStackBounds);
  final int frameX=isFreeformResizing ? (int)mSurfaceController.getX() : w.mFrame.left + mWin.mXOffset - w.getAttrs().surfaceInsets.left;
  final int frameY=isFreeformResizing ? (int)mSurfaceController.getY() : w.mFrame.top + mWin.mYOffset - w.getAttrs().surfaceInsets.top;
  clipRect.left=Math.max(0,Math.max(mTmpStackBounds.left,frameX + clipRect.left) - frameX);
  clipRect.top=Math.max(0,Math.max(mTmpStackBounds.top,frameY + clipRect.top) - frameY);
  clipRect.right=Math.max(0,Math.min(mTmpStackBounds.right,frameX + clipRect.right) - frameX);
  clipRect.bottom=Math.max(0,Math.min(mTmpStackBounds.bottom,frameY + clipRect.bottom) - frameY);
}",0.8901846452866861
193234,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final boolean isFreeformResizing=w.isDragResizing() && w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM;
  final Rect clipRect=mTmpClipRect;
  if (isFreeformResizing) {
    clipRect.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);
  }
 else {
    clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  }
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!(mAnimator.mAnimating && w.inDockedWorkspace())) {
    adjustCropToStackBounds(w,clipRect,isFreeformResizing);
  }
  w.transformFromScreenToSurfaceSpace(clipRect);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    mSurfaceController.setCropInTransaction(clipRect,recoveringMemory);
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.isAnimating()) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final boolean isFreeformResizing=w.isDragResizing() && w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM;
  final Rect clipRect=mTmpClipRect;
  if (isFreeformResizing) {
    clipRect.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);
  }
 else {
    clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  }
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  adjustCropToStackBounds(w,clipRect,isFreeformResizing);
  w.transformFromScreenToSurfaceSpace(clipRect);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    mSurfaceController.setCropInTransaction(clipRect,recoveringMemory);
  }
}",0.8935775562253652
193235,"/** 
 * @param windows List of windows on default display.
 * @return bitmap indicating if another pass through layout must be made.
 */
private int handleAppTransitionReadyLocked(WindowList windows){
  int appsCount=mService.mOpeningApps.size();
  if (!transitionGoodToGo(appsCount)) {
    return 0;
  }
  if (DEBUG_APP_TRANSITIONS)   Slog.v(TAG,""String_Node_Str"");
  int transit=mService.mAppTransition.getAppTransition();
  if (mService.mSkipAppTransitionAnimation) {
    transit=AppTransition.TRANSIT_UNSET;
  }
  mService.mSkipAppTransitionAnimation=false;
  mService.mNoAnimationNotifyOnTransitionFinished.clear();
  mService.mH.removeMessages(APP_TRANSITION_TIMEOUT);
  mService.rebuildAppWindowListLocked();
  mWallpaperMayChange=false;
  WindowManager.LayoutParams animLp=null;
  int bestAnimLayer=-1;
  boolean fullscreenAnim=false;
  boolean voiceInteraction=false;
  final WindowState lowerWallpaperTarget=mWallpaperControllerLocked.getLowerWallpaperTarget();
  final WindowState upperWallpaperTarget=mWallpaperControllerLocked.getUpperWallpaperTarget();
  boolean openingAppHasWallpaper=false;
  boolean closingAppHasWallpaper=false;
  final AppWindowToken lowerWallpaperAppToken;
  final AppWindowToken upperWallpaperAppToken;
  if (lowerWallpaperTarget == null) {
    lowerWallpaperAppToken=upperWallpaperAppToken=null;
  }
 else {
    lowerWallpaperAppToken=lowerWallpaperTarget.mAppToken;
    upperWallpaperAppToken=upperWallpaperTarget.mAppToken;
  }
  int i;
  final int closingAppsCount=mService.mClosingApps.size();
  appsCount=closingAppsCount + mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    final AppWindowToken wtoken;
    if (i < closingAppsCount) {
      wtoken=mService.mClosingApps.valueAt(i);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        closingAppHasWallpaper=true;
      }
    }
 else {
      wtoken=mService.mOpeningApps.valueAt(i - closingAppsCount);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        openingAppHasWallpaper=true;
      }
    }
    voiceInteraction|=wtoken.voiceInteraction;
    if (wtoken.appFullscreen) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        animLp=ws.mAttrs;
        bestAnimLayer=ws.mLayer;
        fullscreenAnim=true;
      }
    }
 else     if (!fullscreenAnim) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        if (ws.mLayer > bestAnimLayer) {
          animLp=ws.mAttrs;
          bestAnimLayer=ws.mLayer;
        }
      }
    }
  }
  transit=maybeUpdateTransitToWallpaper(transit,openingAppHasWallpaper,closingAppHasWallpaper,lowerWallpaperTarget,upperWallpaperTarget);
  if (!mService.mPolicy.allowAppAnimationsLw()) {
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"");
    animLp=null;
  }
  processApplicationsAnimatingInPlace(transit);
  AppWindowToken topClosingApp=null;
  int topClosingLayer=0;
  appsCount=mService.mClosingApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mClosingApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    appAnimator.clearThumbnail();
    appAnimator.animation=null;
    wtoken.inPendingTransaction=false;
    mService.setTokenVisibilityLocked(wtoken,animLp,false,transit,false,voiceInteraction);
    wtoken.updateReportedVisibilityLocked();
    wtoken.allDrawn=true;
    wtoken.deferClearAllDrawn=false;
    if (wtoken.startingWindow != null && !wtoken.startingWindow.mExiting) {
      mService.scheduleRemoveStartingWindowLocked(wtoken);
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        WindowState win=wtoken.windows.get(j);
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topClosingApp == null || layer > topClosingLayer) {
        topClosingApp=wtoken;
        topClosingLayer=layer;
      }
    }
  }
  AppWindowToken topOpeningApp=null;
  appsCount=mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mOpeningApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    if (!appAnimator.usingTransferredAnimation) {
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
    }
    wtoken.inPendingTransaction=false;
    if (!mService.setTokenVisibilityLocked(wtoken,animLp,true,transit,false,voiceInteraction)) {
      mService.mNoAnimationNotifyOnTransitionFinished.add(wtoken.token);
    }
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToShow=false;
    appAnimator.mAllAppWinAnimators.clear();
    final int windowsCount=wtoken.allAppWindows.size();
    for (int j=0; j < windowsCount; j++) {
      appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
    }
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
    SurfaceControl.openTransaction();
    try {
      mService.mAnimator.mAnimating|=appAnimator.showAllWindowsLocked();
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    int topOpeningLayer=0;
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        final WindowState win=wtoken.windows.get(j);
        if (win.mAppToken == null || !win.mAppToken.mWillReplaceWindow) {
          win.mExiting=false;
        }
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topOpeningApp == null || layer > topOpeningLayer) {
        topOpeningApp=wtoken;
        topOpeningLayer=layer;
      }
    }
    createThumbnailAppAnimator(transit,wtoken,topOpeningLayer,topClosingLayer);
    wtoken.restoreSavedSurfaces();
  }
  AppWindowAnimator openingAppAnimator=(topOpeningApp == null) ? null : topOpeningApp.mAppAnimator;
  AppWindowAnimator closingAppAnimator=(topClosingApp == null) ? null : topClosingApp.mAppAnimator;
  mService.mAppTransition.goodToGo(openingAppAnimator,closingAppAnimator);
  mService.mAppTransition.postAnimationCallback();
  mService.mAppTransition.clear();
  mService.mOpeningApps.clear();
  mService.mClosingApps.clear();
  mService.getDefaultDisplayContentLocked().layoutNeeded=true;
  if (windows == mService.getDefaultWindowListLocked() && !mService.moveInputMethodWindowsIfNeededLocked(true)) {
    mService.assignLayersLocked(windows);
  }
  mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,true);
  mService.mFocusMayChange=false;
  mService.notifyActivityDrawnForKeyguard();
  return FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG;
}","/** 
 * @param windows List of windows on default display.
 * @return bitmap indicating if another pass through layout must be made.
 */
private int handleAppTransitionReadyLocked(WindowList windows){
  int appsCount=mService.mOpeningApps.size();
  if (!transitionGoodToGo(appsCount)) {
    return 0;
  }
  if (DEBUG_APP_TRANSITIONS)   Slog.v(TAG,""String_Node_Str"");
  int transit=mService.mAppTransition.getAppTransition();
  if (mService.mSkipAppTransitionAnimation) {
    transit=AppTransition.TRANSIT_UNSET;
  }
  mService.mSkipAppTransitionAnimation=false;
  mService.mNoAnimationNotifyOnTransitionFinished.clear();
  mService.mH.removeMessages(APP_TRANSITION_TIMEOUT);
  mService.rebuildAppWindowListLocked();
  mWallpaperMayChange=false;
  WindowManager.LayoutParams animLp=null;
  int bestAnimLayer=-1;
  boolean fullscreenAnim=false;
  boolean voiceInteraction=false;
  final WindowState lowerWallpaperTarget=mWallpaperControllerLocked.getLowerWallpaperTarget();
  final WindowState upperWallpaperTarget=mWallpaperControllerLocked.getUpperWallpaperTarget();
  boolean openingAppHasWallpaper=false;
  boolean closingAppHasWallpaper=false;
  final AppWindowToken lowerWallpaperAppToken;
  final AppWindowToken upperWallpaperAppToken;
  if (lowerWallpaperTarget == null) {
    lowerWallpaperAppToken=upperWallpaperAppToken=null;
  }
 else {
    lowerWallpaperAppToken=lowerWallpaperTarget.mAppToken;
    upperWallpaperAppToken=upperWallpaperTarget.mAppToken;
  }
  int i;
  final int closingAppsCount=mService.mClosingApps.size();
  appsCount=closingAppsCount + mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    final AppWindowToken wtoken;
    if (i < closingAppsCount) {
      wtoken=mService.mClosingApps.valueAt(i);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        closingAppHasWallpaper=true;
      }
    }
 else {
      wtoken=mService.mOpeningApps.valueAt(i - closingAppsCount);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        openingAppHasWallpaper=true;
      }
    }
    voiceInteraction|=wtoken.voiceInteraction;
    if (wtoken.appFullscreen) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        animLp=ws.mAttrs;
        bestAnimLayer=ws.mLayer;
        fullscreenAnim=true;
      }
    }
 else     if (!fullscreenAnim) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        if (ws.mLayer > bestAnimLayer) {
          animLp=ws.mAttrs;
          bestAnimLayer=ws.mLayer;
        }
      }
    }
  }
  transit=maybeUpdateTransitToWallpaper(transit,openingAppHasWallpaper,closingAppHasWallpaper,lowerWallpaperTarget,upperWallpaperTarget);
  if (!mService.mPolicy.allowAppAnimationsLw()) {
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"");
    animLp=null;
  }
  processApplicationsAnimatingInPlace(transit);
  AppWindowToken topClosingApp=null;
  int topClosingLayer=0;
  appsCount=mService.mClosingApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mClosingApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    appAnimator.clearThumbnail();
    appAnimator.animation=null;
    wtoken.inPendingTransaction=false;
    mService.setTokenVisibilityLocked(wtoken,animLp,false,transit,false,voiceInteraction);
    wtoken.updateReportedVisibilityLocked();
    wtoken.allDrawn=true;
    wtoken.deferClearAllDrawn=false;
    if (wtoken.startingWindow != null && !wtoken.startingWindow.mExiting) {
      mService.scheduleRemoveStartingWindowLocked(wtoken);
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        WindowState win=wtoken.windows.get(j);
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topClosingApp == null || layer > topClosingLayer) {
        topClosingApp=wtoken;
        topClosingLayer=layer;
      }
    }
  }
  AppWindowToken topOpeningApp=null;
  appsCount=mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mOpeningApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    if (!appAnimator.usingTransferredAnimation) {
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
    }
    wtoken.inPendingTransaction=false;
    if (!mService.setTokenVisibilityLocked(wtoken,animLp,true,transit,false,voiceInteraction)) {
      mService.mNoAnimationNotifyOnTransitionFinished.add(wtoken.token);
    }
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToShow=false;
    appAnimator.mAllAppWinAnimators.clear();
    final int windowsCount=wtoken.allAppWindows.size();
    for (int j=0; j < windowsCount; j++) {
      appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
    }
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
    SurfaceControl.openTransaction();
    try {
      mService.mAnimator.orAnimating(appAnimator.showAllWindowsLocked());
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    int topOpeningLayer=0;
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        final WindowState win=wtoken.windows.get(j);
        if (win.mAppToken == null || !win.mAppToken.mWillReplaceWindow) {
          win.mExiting=false;
        }
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topOpeningApp == null || layer > topOpeningLayer) {
        topOpeningApp=wtoken;
        topOpeningLayer=layer;
      }
    }
    createThumbnailAppAnimator(transit,wtoken,topOpeningLayer,topClosingLayer);
    wtoken.restoreSavedSurfaces();
  }
  AppWindowAnimator openingAppAnimator=(topOpeningApp == null) ? null : topOpeningApp.mAppAnimator;
  AppWindowAnimator closingAppAnimator=(topClosingApp == null) ? null : topClosingApp.mAppAnimator;
  mService.mAppTransition.goodToGo(openingAppAnimator,closingAppAnimator);
  mService.mAppTransition.postAnimationCallback();
  mService.mAppTransition.clear();
  mService.mOpeningApps.clear();
  mService.mClosingApps.clear();
  mService.getDefaultDisplayContentLocked().layoutNeeded=true;
  if (windows == mService.getDefaultWindowListLocked() && !mService.moveInputMethodWindowsIfNeededLocked(true)) {
    mService.assignLayersLocked(windows);
  }
  mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,true);
  mService.mFocusMayChange=false;
  mService.notifyActivityDrawnForKeyguard();
  return FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG;
}",0.9982235486392382
193236,"private void processApplicationsAnimatingInPlace(int transit){
  if (transit == AppTransition.TRANSIT_TASK_IN_PLACE) {
    final WindowState win=mService.findFocusedWindowLocked(mService.getDefaultDisplayContentLocked());
    if (win != null) {
      final AppWindowToken wtoken=win.mAppToken;
      final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,""String_Node_Str"" + wtoken);
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
      mService.updateTokenInPlaceLocked(wtoken,transit);
      wtoken.updateReportedVisibilityLocked();
      appAnimator.mAllAppWinAnimators.clear();
      final int N=wtoken.allAppWindows.size();
      for (int j=0; j < N; j++) {
        appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
      }
      mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
      mService.mAnimator.mAnimating|=appAnimator.showAllWindowsLocked();
    }
  }
}","private void processApplicationsAnimatingInPlace(int transit){
  if (transit == AppTransition.TRANSIT_TASK_IN_PLACE) {
    final WindowState win=mService.findFocusedWindowLocked(mService.getDefaultDisplayContentLocked());
    if (win != null) {
      final AppWindowToken wtoken=win.mAppToken;
      final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,""String_Node_Str"" + wtoken);
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
      mService.updateTokenInPlaceLocked(wtoken,transit);
      wtoken.updateReportedVisibilityLocked();
      appAnimator.mAllAppWinAnimators.clear();
      final int N=wtoken.allAppWindows.size();
      for (int j=0; j < N; j++) {
        appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
      }
      mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
      mService.mAnimator.orAnimating(appAnimator.showAllWindowsLocked());
    }
  }
}",0.9964664310954064
193237,"private void performSurfacePlacementInner(boolean recoveringMemory){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + Debug.getCallers(3));
  }
  int i;
  boolean updateInputWindowsNeeded=false;
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    updateInputWindowsNeeded=mService.updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    for (i=displayContent.mExitingTokens.size() - 1; i >= 0; i--) {
      displayContent.mExitingTokens.get(i).hasVisible=false;
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (int tokenNdx=exitingAppTokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      exitingAppTokens.get(tokenNdx).hasVisible=false;
    }
  }
  mHoldScreen=null;
  mScreenBrightness=-1;
  mButtonBrightness=-1;
  mUserActivityTimeout=-1;
  mObscureApplicationContentOnSecondaryDisplays=false;
  mService.mTransactionSequence++;
  final DisplayContent defaultDisplay=mService.getDefaultDisplayContentLocked();
  final DisplayInfo defaultInfo=defaultDisplay.getDisplayInfo();
  final int defaultDw=defaultInfo.logicalWidth;
  final int defaultDh=defaultInfo.logicalHeight;
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    applySurfaceChangesTransaction(recoveringMemory,numDisplays,defaultDw,defaultDh);
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  final WindowList defaultWindows=defaultDisplay.getWindowList();
  if (mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=handleAppTransitionReadyLocked(defaultWindows);
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (!mService.mAnimator.mAppWindowAnimating && mService.mAppTransition.isRunning()) {
    defaultDisplay.pendingLayoutChanges|=mService.handleAnimatingStoppedAndTransitionLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mWallpaperForceHidingChanged && defaultDisplay.pendingLayoutChanges == 0 && !mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  mWallpaperForceHidingChanged=false;
  if (mWallpaperMayChange) {
    if (DEBUG_WALLPAPER_LIGHT)     Slog.v(TAG,""String_Node_Str"");
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    if (mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
      updateInputWindowsNeeded=true;
      defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_ANIM;
    }
  }
  if (mService.needsLayout()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  for (i=mService.mResizingWindows.size() - 1; i >= 0; i--) {
    WindowState win=mService.mResizingWindows.get(i);
    if (win.mAppFreezing) {
      continue;
    }
    if (win.mAppToken != null) {
      win.mAppToken.destroySavedSurfaces();
    }
    win.reportResized();
    mService.mResizingWindows.remove(i);
  }
  if (DEBUG_ORIENTATION && mService.mDisplayFrozen)   Slog.v(TAG,""String_Node_Str"" + mOrientationChangeComplete);
  if (mOrientationChangeComplete) {
    if (mService.mWindowsFreezingScreen != WINDOWS_FREEZING_SCREENS_NONE) {
      mService.mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_NONE;
      mService.mLastFinishedFreezeSource=mLastWindowFreezeSource;
      mService.mH.removeMessages(WINDOW_FREEZE_TIMEOUT);
    }
    mService.stopFreezingDisplayLocked();
  }
  boolean wallpaperDestroyed=false;
  i=mService.mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mService.mDestroySurface.get(i);
      win.mDestroying=false;
      if (mService.mInputMethodWindow == win) {
        mService.mInputMethodWindow=null;
      }
      if (mWallpaperControllerLocked.isWallpaperTarget(win)) {
        wallpaperDestroyed=true;
      }
      if (!win.shouldSaveSurface()) {
        win.mWinAnimator.destroySurfaceLocked();
      }
    }
 while (i > 0);
    mService.mDestroySurface.clear();
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    ArrayList<WindowToken> exitingTokens=displayContent.mExitingTokens;
    for (i=exitingTokens.size() - 1; i >= 0; i--) {
      WindowToken token=exitingTokens.get(i);
      if (!token.hasVisible) {
        exitingTokens.remove(i);
        if (token.windowType == TYPE_WALLPAPER) {
          mWallpaperControllerLocked.removeWallpaperToken(token);
        }
      }
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (i=exitingAppTokens.size() - 1; i >= 0; i--) {
      AppWindowToken token=exitingAppTokens.get(i);
      if (!token.hasVisible && !mService.mClosingApps.contains(token) && (!token.mIsExiting || token.allAppWindows.isEmpty())) {
        token.mAppAnimator.clearAnimation();
        token.mAppAnimator.animating=false;
        if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)         Slog.v(TAG,""String_Node_Str"" + token);
        token.removeAppFromTaskLocked();
      }
    }
  }
  if (wallpaperDestroyed) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    defaultDisplay.layoutNeeded=true;
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    if (displayContent.pendingLayoutChanges != 0) {
      displayContent.layoutNeeded=true;
    }
  }
  mService.mInputMonitor.updateInputWindowsLw(true);
  mService.setHoldScreenLocked(mHoldScreen);
  if (!mService.mDisplayFrozen) {
    if (mScreenBrightness < 0 || mScreenBrightness > 1.0f) {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(toBrightnessOverride(mScreenBrightness));
    }
    if (mButtonBrightness < 0 || mButtonBrightness > 1.0f) {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(toBrightnessOverride(mButtonBrightness));
    }
    mService.mPowerManagerInternal.setUserActivityTimeoutOverrideFromWindowManager(mUserActivityTimeout);
  }
  if (mService.mTurnOnScreen) {
    if (mService.mAllowTheaterModeWakeFromLayout || Settings.Global.getInt(mService.mContext.getContentResolver(),Settings.Global.THEATER_MODE_ON,0) == 0) {
      if (DEBUG_VISIBILITY || DEBUG_POWER) {
        Slog.v(TAG,""String_Node_Str"");
      }
      mService.mPowerManager.wakeUp(SystemClock.uptimeMillis(),""String_Node_Str"");
    }
    mService.mTurnOnScreen=false;
  }
  if (mUpdateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,""String_Node_Str"");
    if (mService.updateRotationUncheckedLocked(false)) {
      mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
    }
 else {
      mUpdateRotation=false;
    }
  }
  if (mService.mWaitingForDrawnCallback != null || (mOrientationChangeComplete && !defaultDisplay.layoutNeeded && !mUpdateRotation)) {
    mService.checkDrawnWindowsLocked();
  }
  final int N=mService.mPendingRemove.size();
  if (N > 0) {
    if (mService.mPendingRemoveTmp.length < N) {
      mService.mPendingRemoveTmp=new WindowState[N + 10];
    }
    mService.mPendingRemove.toArray(mService.mPendingRemoveTmp);
    mService.mPendingRemove.clear();
    DisplayContentList displayList=new DisplayContentList();
    for (i=0; i < N; i++) {
      WindowState w=mService.mPendingRemoveTmp[i];
      mService.removeWindowInnerLocked(w);
      final DisplayContent displayContent=w.getDisplayContent();
      if (displayContent != null && !displayList.contains(displayContent)) {
        displayList.add(displayContent);
      }
    }
    for (    DisplayContent displayContent : displayList) {
      mService.assignLayersLocked(displayContent.getWindowList());
      displayContent.layoutNeeded=true;
    }
  }
  for (int displayNdx=mService.mDisplayContents.size() - 1; displayNdx >= 0; --displayNdx) {
    mService.mDisplayContents.valueAt(displayNdx).checkForDeferredActions();
  }
  if (updateInputWindowsNeeded) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.setFocusTaskRegion();
  mService.enableScreenIfNeededLocked();
  mService.scheduleAnimationLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.e(TAG,""String_Node_Str"" + mService.mAnimator.mAnimating);
  }
}","private void performSurfacePlacementInner(boolean recoveringMemory){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + Debug.getCallers(3));
  }
  int i;
  boolean updateInputWindowsNeeded=false;
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    updateInputWindowsNeeded=mService.updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    for (i=displayContent.mExitingTokens.size() - 1; i >= 0; i--) {
      displayContent.mExitingTokens.get(i).hasVisible=false;
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (int tokenNdx=exitingAppTokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      exitingAppTokens.get(tokenNdx).hasVisible=false;
    }
  }
  mHoldScreen=null;
  mScreenBrightness=-1;
  mButtonBrightness=-1;
  mUserActivityTimeout=-1;
  mObscureApplicationContentOnSecondaryDisplays=false;
  mService.mTransactionSequence++;
  final DisplayContent defaultDisplay=mService.getDefaultDisplayContentLocked();
  final DisplayInfo defaultInfo=defaultDisplay.getDisplayInfo();
  final int defaultDw=defaultInfo.logicalWidth;
  final int defaultDh=defaultInfo.logicalHeight;
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    applySurfaceChangesTransaction(recoveringMemory,numDisplays,defaultDw,defaultDh);
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  final WindowList defaultWindows=defaultDisplay.getWindowList();
  if (mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=handleAppTransitionReadyLocked(defaultWindows);
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (!mService.mAnimator.mAppWindowAnimating && mService.mAppTransition.isRunning()) {
    defaultDisplay.pendingLayoutChanges|=mService.handleAnimatingStoppedAndTransitionLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mWallpaperForceHidingChanged && defaultDisplay.pendingLayoutChanges == 0 && !mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  mWallpaperForceHidingChanged=false;
  if (mWallpaperMayChange) {
    if (DEBUG_WALLPAPER_LIGHT)     Slog.v(TAG,""String_Node_Str"");
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    if (mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
      updateInputWindowsNeeded=true;
      defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_ANIM;
    }
  }
  if (mService.needsLayout()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  for (i=mService.mResizingWindows.size() - 1; i >= 0; i--) {
    WindowState win=mService.mResizingWindows.get(i);
    if (win.mAppFreezing) {
      continue;
    }
    if (win.mAppToken != null) {
      win.mAppToken.destroySavedSurfaces();
    }
    win.reportResized();
    mService.mResizingWindows.remove(i);
  }
  if (DEBUG_ORIENTATION && mService.mDisplayFrozen)   Slog.v(TAG,""String_Node_Str"" + mOrientationChangeComplete);
  if (mOrientationChangeComplete) {
    if (mService.mWindowsFreezingScreen != WINDOWS_FREEZING_SCREENS_NONE) {
      mService.mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_NONE;
      mService.mLastFinishedFreezeSource=mLastWindowFreezeSource;
      mService.mH.removeMessages(WINDOW_FREEZE_TIMEOUT);
    }
    mService.stopFreezingDisplayLocked();
  }
  boolean wallpaperDestroyed=false;
  i=mService.mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mService.mDestroySurface.get(i);
      win.mDestroying=false;
      if (mService.mInputMethodWindow == win) {
        mService.mInputMethodWindow=null;
      }
      if (mWallpaperControllerLocked.isWallpaperTarget(win)) {
        wallpaperDestroyed=true;
      }
      if (!win.shouldSaveSurface()) {
        win.mWinAnimator.destroySurfaceLocked();
      }
    }
 while (i > 0);
    mService.mDestroySurface.clear();
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    ArrayList<WindowToken> exitingTokens=displayContent.mExitingTokens;
    for (i=exitingTokens.size() - 1; i >= 0; i--) {
      WindowToken token=exitingTokens.get(i);
      if (!token.hasVisible) {
        exitingTokens.remove(i);
        if (token.windowType == TYPE_WALLPAPER) {
          mWallpaperControllerLocked.removeWallpaperToken(token);
        }
      }
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (i=exitingAppTokens.size() - 1; i >= 0; i--) {
      AppWindowToken token=exitingAppTokens.get(i);
      if (!token.hasVisible && !mService.mClosingApps.contains(token) && (!token.mIsExiting || token.allAppWindows.isEmpty())) {
        token.mAppAnimator.clearAnimation();
        token.mAppAnimator.animating=false;
        if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)         Slog.v(TAG,""String_Node_Str"" + token);
        token.removeAppFromTaskLocked();
      }
    }
  }
  if (wallpaperDestroyed) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    defaultDisplay.layoutNeeded=true;
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    if (displayContent.pendingLayoutChanges != 0) {
      displayContent.layoutNeeded=true;
    }
  }
  mService.mInputMonitor.updateInputWindowsLw(true);
  mService.setHoldScreenLocked(mHoldScreen);
  if (!mService.mDisplayFrozen) {
    if (mScreenBrightness < 0 || mScreenBrightness > 1.0f) {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(toBrightnessOverride(mScreenBrightness));
    }
    if (mButtonBrightness < 0 || mButtonBrightness > 1.0f) {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(toBrightnessOverride(mButtonBrightness));
    }
    mService.mPowerManagerInternal.setUserActivityTimeoutOverrideFromWindowManager(mUserActivityTimeout);
  }
  if (mService.mTurnOnScreen) {
    if (mService.mAllowTheaterModeWakeFromLayout || Settings.Global.getInt(mService.mContext.getContentResolver(),Settings.Global.THEATER_MODE_ON,0) == 0) {
      if (DEBUG_VISIBILITY || DEBUG_POWER) {
        Slog.v(TAG,""String_Node_Str"");
      }
      mService.mPowerManager.wakeUp(SystemClock.uptimeMillis(),""String_Node_Str"");
    }
    mService.mTurnOnScreen=false;
  }
  if (mUpdateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,""String_Node_Str"");
    if (mService.updateRotationUncheckedLocked(false)) {
      mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
    }
 else {
      mUpdateRotation=false;
    }
  }
  if (mService.mWaitingForDrawnCallback != null || (mOrientationChangeComplete && !defaultDisplay.layoutNeeded && !mUpdateRotation)) {
    mService.checkDrawnWindowsLocked();
  }
  final int N=mService.mPendingRemove.size();
  if (N > 0) {
    if (mService.mPendingRemoveTmp.length < N) {
      mService.mPendingRemoveTmp=new WindowState[N + 10];
    }
    mService.mPendingRemove.toArray(mService.mPendingRemoveTmp);
    mService.mPendingRemove.clear();
    DisplayContentList displayList=new DisplayContentList();
    for (i=0; i < N; i++) {
      WindowState w=mService.mPendingRemoveTmp[i];
      mService.removeWindowInnerLocked(w);
      final DisplayContent displayContent=w.getDisplayContent();
      if (displayContent != null && !displayList.contains(displayContent)) {
        displayList.add(displayContent);
      }
    }
    for (    DisplayContent displayContent : displayList) {
      mService.assignLayersLocked(displayContent.getWindowList());
      displayContent.layoutNeeded=true;
    }
  }
  for (int displayNdx=mService.mDisplayContents.size() - 1; displayNdx >= 0; --displayNdx) {
    mService.mDisplayContents.valueAt(displayNdx).checkForDeferredActions();
  }
  if (updateInputWindowsNeeded) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.setFocusTaskRegion();
  mService.enableScreenIfNeededLocked();
  mService.scheduleAnimationLocked();
  if (DEBUG_WINDOW_TRACE)   Slog.e(TAG,""String_Node_Str"" + mService.mAnimator.isAnimating());
}",0.99805784473256
193238,"private void updateAppWindowsLocked(int displayId){
  ArrayList<TaskStack> stacks=mService.getDisplayContentLocked(displayId).getStacks();
  for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
    final TaskStack stack=stacks.get(stackNdx);
    final ArrayList<Task> tasks=stack.getTasks();
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
      for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
        final AppWindowAnimator appAnimator=tokens.get(tokenNdx).mAppAnimator;
        appAnimator.wasAnimating=appAnimator.animating;
        if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
          appAnimator.animating=true;
          mAnimating=mAppWindowAnimating=true;
        }
 else         if (appAnimator.wasAnimating) {
          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
          if (DEBUG_ANIM)           Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
        }
      }
    }
    final AppTokenList exitingAppTokens=stack.mExitingAppTokens;
    final int exitingCount=exitingAppTokens.size();
    for (int i=0; i < exitingCount; i++) {
      final AppWindowAnimator appAnimator=exitingAppTokens.get(i).mAppAnimator;
      appAnimator.wasAnimating=appAnimator.animating;
      if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
        mAnimating=mAppWindowAnimating=true;
      }
 else       if (appAnimator.wasAnimating) {
        setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
        if (DEBUG_ANIM)         Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
      }
    }
  }
}","private void updateAppWindowsLocked(int displayId){
  ArrayList<TaskStack> stacks=mService.getDisplayContentLocked(displayId).getStacks();
  for (int stackNdx=stacks.size() - 1; stackNdx >= 0; --stackNdx) {
    final TaskStack stack=stacks.get(stackNdx);
    final ArrayList<Task> tasks=stack.getTasks();
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
      for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
        final AppWindowAnimator appAnimator=tokens.get(tokenNdx).mAppAnimator;
        appAnimator.wasAnimating=appAnimator.animating;
        if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
          appAnimator.animating=true;
          setAnimating(true);
          mAppWindowAnimating=true;
        }
 else         if (appAnimator.wasAnimating) {
          setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
          if (DEBUG_ANIM)           Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
        }
      }
    }
    final AppTokenList exitingAppTokens=stack.mExitingAppTokens;
    final int exitingCount=exitingAppTokens.size();
    for (int i=0; i < exitingCount; i++) {
      final AppWindowAnimator appAnimator=exitingAppTokens.get(i).mAppAnimator;
      appAnimator.wasAnimating=appAnimator.animating;
      if (appAnimator.stepAnimationLocked(mCurrentTime,displayId)) {
        setAnimating(true);
        mAppWindowAnimating=true;
      }
 else       if (appAnimator.wasAnimating) {
        setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"" + appAnimator.mAppToken + ""String_Node_Str"",displayId);
        if (DEBUG_ANIM)         Slog.v(TAG,""String_Node_Str"" + appAnimator.mAppToken);
      }
    }
  }
}",0.9787234042553192
193239,"private void updateWallpaperLocked(int displayId){
  mService.getDisplayContentLocked(displayId).resetAnimationBackgroundAnimator();
  final WindowList windows=mService.getWindowListLocked(displayId);
  WindowState detachedWallpaper=null;
  for (int i=windows.size() - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (winAnimator.mSurfaceController == null) {
      continue;
    }
    final int flags=win.mAttrs.flags;
    if (winAnimator.mAnimating) {
      if (winAnimator.mAnimation != null) {
        if ((flags & FLAG_SHOW_WALLPAPER) != 0 && winAnimator.mAnimation.getDetachWallpaper()) {
          detachedWallpaper=win;
        }
        final int color=winAnimator.mAnimation.getBackgroundColor();
        if (color != 0) {
          final TaskStack stack=win.getStack();
          if (stack != null) {
            stack.setAnimationBackground(winAnimator,color);
          }
        }
      }
      mAnimating=true;
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.animation != null && appAnimator.animating) {
      if ((flags & FLAG_SHOW_WALLPAPER) != 0 && appAnimator.animation.getDetachWallpaper()) {
        detachedWallpaper=win;
      }
      final int color=appAnimator.animation.getBackgroundColor();
      if (color != 0) {
        final TaskStack stack=win.getStack();
        if (stack != null) {
          stack.setAnimationBackground(winAnimator,color);
        }
      }
    }
  }
  if (mWindowDetachedWallpaper != detachedWallpaper) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,""String_Node_Str"" + mWindowDetachedWallpaper + ""String_Node_Str""+ detachedWallpaper);
    mWindowDetachedWallpaper=detachedWallpaper;
    mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
  }
}","private void updateWallpaperLocked(int displayId){
  mService.getDisplayContentLocked(displayId).resetAnimationBackgroundAnimator();
  final WindowList windows=mService.getWindowListLocked(displayId);
  WindowState detachedWallpaper=null;
  for (int i=windows.size() - 1; i >= 0; i--) {
    final WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (winAnimator.mSurfaceController == null) {
      continue;
    }
    final int flags=win.mAttrs.flags;
    if (winAnimator.mAnimating) {
      if (winAnimator.mAnimation != null) {
        if ((flags & FLAG_SHOW_WALLPAPER) != 0 && winAnimator.mAnimation.getDetachWallpaper()) {
          detachedWallpaper=win;
        }
        final int color=winAnimator.mAnimation.getBackgroundColor();
        if (color != 0) {
          final TaskStack stack=win.getStack();
          if (stack != null) {
            stack.setAnimationBackground(winAnimator,color);
          }
        }
      }
      setAnimating(true);
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.animation != null && appAnimator.animating) {
      if ((flags & FLAG_SHOW_WALLPAPER) != 0 && appAnimator.animation.getDetachWallpaper()) {
        detachedWallpaper=win;
      }
      final int color=appAnimator.animation.getBackgroundColor();
      if (color != 0) {
        final TaskStack stack=win.getStack();
        if (stack != null) {
          stack.setAnimationBackground(winAnimator,color);
        }
      }
    }
  }
  if (mWindowDetachedWallpaper != detachedWallpaper) {
    if (DEBUG_WALLPAPER)     Slog.v(TAG,""String_Node_Str"" + mWindowDetachedWallpaper + ""String_Node_Str""+ detachedWallpaper);
    mWindowDetachedWallpaper=detachedWallpaper;
    mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
  }
}",0.9931675321125992
193240,"private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.mSurfaceController != null && winAnimator.mSurfaceController.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      mAnimating|=nowAnimating;
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,mKeyguardGoingAwayToNotificationShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime());
            winAnimator.mKeyguardGoingAwayAnimation=true;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn || atoken.mAnimatingWithSavedSurface) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!mKeyguardGoingAwayDisableWindowAnimations) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,mKeyguardGoingAwayToNotificationShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !mKeyguardGoingAwayDisableWindowAnimations) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(mKeyguardGoingAwayToNotificationShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
}","private void updateWindowsLocked(final int displayId){
  ++mAnimTransactionSequence;
  final WindowList windows=mService.getWindowListLocked(displayId);
  if (mKeyguardGoingAway) {
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState win=windows.get(i);
      if (!mPolicy.isKeyguardHostWindow(win.mAttrs)) {
        continue;
      }
      final WindowStateAnimator winAnimator=win.mWinAnimator;
      if ((win.mAttrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        if (!winAnimator.mAnimating) {
          if (DEBUG_KEYGUARD)           Slog.d(TAG,""String_Node_Str"");
          winAnimator.mAnimation=new AlphaAnimation(1.0f,1.0f);
          winAnimator.mAnimation.setDuration(KEYGUARD_ANIM_TIMEOUT_MS);
          winAnimator.mAnimationIsEntrance=false;
          winAnimator.mAnimationStartTime=-1;
          winAnimator.mKeyguardGoingAwayAnimation=true;
        }
      }
 else {
        if (DEBUG_KEYGUARD)         Slog.d(TAG,""String_Node_Str"");
        mKeyguardGoingAway=false;
        winAnimator.clearAnimation();
      }
      break;
    }
  }
  mForceHiding=KEYGUARD_NOT_SHOWN;
  boolean wallpaperInUnForceHiding=false;
  boolean startingInUnForceHiding=false;
  ArrayList<WindowStateAnimator> unForceHiding=null;
  WindowState wallpaper=null;
  final WallpaperController wallpaperController=mService.mWallpaperControllerLocked;
  for (int i=windows.size() - 1; i >= 0; i--) {
    WindowState win=windows.get(i);
    WindowStateAnimator winAnimator=win.mWinAnimator;
    final int flags=win.mAttrs.flags;
    boolean canBeForceHidden=mPolicy.canBeForceHidden(win,win.mAttrs);
    boolean shouldBeForceHidden=shouldForceHide(win);
    if (winAnimator.mSurfaceController != null && winAnimator.mSurfaceController.hasSurface()) {
      final boolean wasAnimating=winAnimator.mWasAnimating;
      final boolean nowAnimating=winAnimator.stepAnimationLocked(mCurrentTime);
      winAnimator.mWasAnimating=nowAnimating;
      orAnimating(nowAnimating);
      if (DEBUG_WALLPAPER) {
        Slog.v(TAG,win + ""String_Node_Str"" + wasAnimating+ ""String_Node_Str""+ nowAnimating);
      }
      if (wasAnimating && !winAnimator.mAnimating && wallpaperController.isWallpaperTarget(win)) {
        mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
        setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
        if (DEBUG_LAYOUT_REPEATS) {
          mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
        }
      }
      if (mPolicy.isForceHiding(win.mAttrs)) {
        if (!wasAnimating && nowAnimating) {
          if (DEBUG_KEYGUARD || DEBUG_ANIM || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          mBulkUpdateParams|=SET_FORCE_HIDING_CHANGED;
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
          mService.mFocusMayChange=true;
        }
 else         if (mKeyguardGoingAway && !nowAnimating) {
          Slog.e(TAG,""String_Node_Str"");
          mPolicy.startKeyguardExitAnimation(0,0);
          mKeyguardGoingAway=false;
        }
        if (win.isReadyForDisplay()) {
          if (nowAnimating && win.mWinAnimator.mKeyguardGoingAwayAnimation) {
            mForceHiding=KEYGUARD_ANIMATING_OUT;
          }
 else {
            mForceHiding=win.isDrawnLw() ? KEYGUARD_SHOWN : KEYGUARD_NOT_SHOWN;
          }
        }
        if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)         Slog.v(TAG,""String_Node_Str"" + forceHidingToString() + ""String_Node_Str""+ win.mHasSurface+ ""String_Node_Str""+ win.mPolicyVisibility+ ""String_Node_Str""+ win.mDestroying+ ""String_Node_Str""+ win.mAttachedHidden+ ""String_Node_Str""+ win.mViewVisibility+ ""String_Node_Str""+ win.mRootToken.hidden+ ""String_Node_Str""+ win.mWinAnimator.mAnimation);
      }
 else       if (canBeForceHidden) {
        if (shouldBeForceHidden) {
          if (!win.hideLw(false,false)) {
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
        }
 else {
          boolean applyExistingExitAnimation=mPostKeyguardExitAnimation != null && !mPostKeyguardExitAnimation.hasEnded() && !winAnimator.mKeyguardGoingAwayAnimation && win.hasDrawnLw() && win.mAttachedWindow == null && !win.mIsImWindow && displayId == Display.DEFAULT_DISPLAY;
          if (!win.showLw(false,false) && !applyExistingExitAnimation) {
            continue;
          }
          final boolean visibleNow=win.isVisibleNow();
          if (!visibleNow) {
            win.hideLw(false,false);
            continue;
          }
          if (DEBUG_KEYGUARD || DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          if ((mBulkUpdateParams & SET_FORCE_HIDING_CHANGED) != 0 && win.mAttachedWindow == null) {
            if (unForceHiding == null) {
              unForceHiding=new ArrayList<>();
            }
            unForceHiding.add(winAnimator);
            if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
              wallpaperInUnForceHiding=true;
            }
            if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
              startingInUnForceHiding=true;
            }
          }
 else           if (applyExistingExitAnimation) {
            if (DEBUG_KEYGUARD)             Slog.v(TAG,""String_Node_Str"" + win);
            Animation a=mPolicy.createForceHideEnterAnimation(false,mKeyguardGoingAwayToNotificationShade);
            winAnimator.setAnimation(a,mPostKeyguardExitAnimation.getStartTime());
            winAnimator.mKeyguardGoingAwayAnimation=true;
          }
          final WindowState currentFocus=mService.mCurrentFocus;
          if (currentFocus == null || currentFocus.mLayer < win.mLayer) {
            if (DEBUG_FOCUS_LIGHT)             Slog.v(TAG,""String_Node_Str"");
            mService.mFocusMayChange=true;
          }
        }
        if ((flags & FLAG_SHOW_WALLPAPER) != 0) {
          mBulkUpdateParams|=SET_WALLPAPER_MAY_CHANGE;
          setPendingLayoutChanges(Display.DEFAULT_DISPLAY,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(Display.DEFAULT_DISPLAY));
          }
        }
      }
    }
 else     if (canBeForceHidden) {
      if (shouldBeForceHidden) {
        win.hideLw(false,false);
      }
 else {
        win.showLw(false,false);
      }
    }
    final AppWindowToken atoken=win.mAppToken;
    if (winAnimator.mDrawState == WindowStateAnimator.READY_TO_SHOW) {
      if (atoken == null || atoken.allDrawn || atoken.mAnimatingWithSavedSurface) {
        if (winAnimator.performShowLocked()) {
          setPendingLayoutChanges(displayId,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
          if (DEBUG_LAYOUT_REPEATS) {
            mWindowPlacerLocked.debugLayoutRepeats(""String_Node_Str"",getPendingLayoutChanges(displayId));
          }
        }
      }
    }
    final AppWindowAnimator appAnimator=winAnimator.mAppAnimator;
    if (appAnimator != null && appAnimator.thumbnail != null) {
      if (appAnimator.thumbnailTransactionSeq != mAnimTransactionSequence) {
        appAnimator.thumbnailTransactionSeq=mAnimTransactionSequence;
        appAnimator.thumbnailLayer=0;
      }
      if (appAnimator.thumbnailLayer < winAnimator.mAnimLayer) {
        appAnimator.thumbnailLayer=winAnimator.mAnimLayer;
      }
    }
    if (win.mIsWallpaper) {
      wallpaper=win;
    }
  }
  if (unForceHiding != null) {
    if (!mKeyguardGoingAwayDisableWindowAnimations) {
      boolean first=true;
      for (int i=unForceHiding.size() - 1; i >= 0; i--) {
        final WindowStateAnimator winAnimator=unForceHiding.get(i);
        Animation a=mPolicy.createForceHideEnterAnimation(wallpaperInUnForceHiding && !startingInUnForceHiding,mKeyguardGoingAwayToNotificationShade);
        if (a != null) {
          if (DEBUG_KEYGUARD)           Slog.v(TAG,""String_Node_Str"" + winAnimator.mWin);
          winAnimator.setAnimation(a);
          winAnimator.mKeyguardGoingAwayAnimation=true;
          if (first) {
            mPostKeyguardExitAnimation=a;
            mPostKeyguardExitAnimation.setStartTime(mCurrentTime);
            first=false;
          }
        }
      }
    }
 else     if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime,0);
      mKeyguardGoingAway=false;
    }
    if (!wallpaperInUnForceHiding && wallpaper != null && !mKeyguardGoingAwayDisableWindowAnimations) {
      if (DEBUG_KEYGUARD)       Slog.d(TAG,""String_Node_Str"");
      Animation a=mPolicy.createForceHideWallpaperExitAnimation(mKeyguardGoingAwayToNotificationShade);
      if (a != null) {
        wallpaper.mWinAnimator.setAnimation(a);
      }
    }
  }
  if (mPostKeyguardExitAnimation != null) {
    if (mKeyguardGoingAway) {
      mPolicy.startKeyguardExitAnimation(mCurrentTime + mPostKeyguardExitAnimation.getStartOffset(),mPostKeyguardExitAnimation.getDuration());
      mKeyguardGoingAway=false;
    }
 else     if (mPostKeyguardExitAnimation.hasEnded() || mCurrentTime - mPostKeyguardExitAnimation.getStartTime() > mPostKeyguardExitAnimation.getDuration()) {
      if (DEBUG_KEYGUARD)       Slog.v(TAG,""String_Node_Str"");
      mPostKeyguardExitAnimation=null;
    }
  }
}",0.9974127461851208
193241,"/** 
 * See if any windows have been drawn, so they (and others associated with them) can now be shown. 
 */
private void testTokenMayBeDrawnLocked(int displayId){
  final ArrayList<Task> tasks=mService.getDisplayContentLocked(displayId).getTasks();
  final int numTasks=tasks.size();
  for (int taskNdx=0; taskNdx < numTasks; ++taskNdx) {
    final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    final int numTokens=tokens.size();
    for (int tokenNdx=0; tokenNdx < numTokens; ++tokenNdx) {
      final AppWindowToken wtoken=tokens.get(tokenNdx);
      AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      final boolean allDrawn=wtoken.allDrawn;
      if (allDrawn != appAnimator.allDrawn) {
        appAnimator.allDrawn=allDrawn;
        if (allDrawn) {
          if (appAnimator.freezingScreen) {
            appAnimator.showAllWindowsLocked();
            mService.unsetAppFreezingScreenLocked(wtoken,false,true);
            if (DEBUG_ORIENTATION)             Slog.i(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.numInterestingWindows+ ""String_Node_Str""+ wtoken.numDrawnWindows);
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"",displayId);
          }
 else {
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM,""String_Node_Str"",displayId);
            if (!mService.mOpeningApps.contains(wtoken)) {
              mAnimating|=appAnimator.showAllWindowsLocked();
            }
          }
        }
      }
    }
  }
}","/** 
 * See if any windows have been drawn, so they (and others associated with them) can now be shown. 
 */
private void testTokenMayBeDrawnLocked(int displayId){
  final ArrayList<Task> tasks=mService.getDisplayContentLocked(displayId).getTasks();
  final int numTasks=tasks.size();
  for (int taskNdx=0; taskNdx < numTasks; ++taskNdx) {
    final AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
    final int numTokens=tokens.size();
    for (int tokenNdx=0; tokenNdx < numTokens; ++tokenNdx) {
      final AppWindowToken wtoken=tokens.get(tokenNdx);
      AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      final boolean allDrawn=wtoken.allDrawn;
      if (allDrawn != appAnimator.allDrawn) {
        appAnimator.allDrawn=allDrawn;
        if (allDrawn) {
          if (appAnimator.freezingScreen) {
            appAnimator.showAllWindowsLocked();
            mService.unsetAppFreezingScreenLocked(wtoken,false,true);
            if (DEBUG_ORIENTATION)             Slog.i(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.numInterestingWindows+ ""String_Node_Str""+ wtoken.numDrawnWindows);
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER,""String_Node_Str"",displayId);
          }
 else {
            setAppLayoutChanges(appAnimator,WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM,""String_Node_Str"",displayId);
            if (!mService.mOpeningApps.contains(wtoken)) {
              orAnimating(appAnimator.showAllWindowsLocked());
            }
          }
        }
      }
    }
  }
}",0.9919276719405876
193242,"/** 
 * Locked on mService.mWindowMap. 
 */
private void animateLocked(long frameTimeNs){
  if (!mInitialized) {
    return;
  }
  mCurrentTime=frameTimeNs / TimeUtils.NANOS_PER_MS;
  mBulkUpdateParams=SET_ORIENTATION_CHANGE_COMPLETE;
  boolean wasAnimating=mAnimating;
  mAnimating=false;
  mAppWindowAnimating=false;
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mCurrentTime);
  }
  if (SHOW_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  SurfaceControl.setAnimationTransaction();
  try {
    final int numDisplays=mDisplayContentsAnimators.size();
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      updateAppWindowsLocked(displayId);
      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);
      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;
      if (screenRotationAnimation != null && screenRotationAnimation.isAnimating()) {
        if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) {
          mAnimating=true;
        }
 else {
          mBulkUpdateParams|=SET_UPDATE_ROTATION;
          screenRotationAnimation.kill();
          displayAnimator.mScreenRotationAnimation=null;
          if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onRotationChangedLocked(mService.getDefaultDisplayContentLocked(),mService.mRotation);
          }
        }
      }
      updateWindowsLocked(displayId);
      updateWallpaperLocked(displayId);
      final WindowList windows=mService.getWindowListLocked(displayId);
      final int N=windows.size();
      for (int j=0; j < N; j++) {
        windows.get(j).mWinAnimator.prepareSurfaceLocked(true);
      }
    }
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      testTokenMayBeDrawnLocked(displayId);
      final ScreenRotationAnimation screenRotationAnimation=mDisplayContentsAnimators.valueAt(i).mScreenRotationAnimation;
      if (screenRotationAnimation != null) {
        screenRotationAnimation.updateSurfacesInTransaction();
      }
      mAnimating|=mService.getDisplayContentLocked(displayId).animateDimLayers();
      if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
        mService.mAccessibilityController.drawMagnifiedRegionBorderIfNeededLocked();
      }
    }
    if (mAnimating) {
      mService.scheduleAnimationLocked();
    }
    if (mService.mWatermark != null) {
      mService.mWatermark.drawIfNeeded();
    }
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  boolean hasPendingLayoutChanges=false;
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    final int pendingChanges=getPendingLayoutChanges(displayContent.getDisplayId());
    if ((pendingChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
      mBulkUpdateParams|=SET_WALLPAPER_ACTION_PENDING;
    }
    if (pendingChanges != 0) {
      hasPendingLayoutChanges=true;
    }
  }
  boolean doRequest=false;
  if (mBulkUpdateParams != 0) {
    doRequest=mWindowPlacerLocked.copyAnimToLayoutParamsLocked();
  }
  if (hasPendingLayoutChanges || doRequest) {
    mWindowPlacerLocked.requestTraversal();
  }
  if (mAnimating && !wasAnimating && Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
    Trace.asyncTraceBegin(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
  }
  if (!mAnimating && wasAnimating) {
    mWindowPlacerLocked.requestTraversal();
    if (Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
      Trace.asyncTraceEnd(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
    }
  }
  if (mRemoveReplacedWindows) {
    removeReplacedWindowsLocked();
  }
  mService.destroyPreservedSurfaceLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mAnimating + ""String_Node_Str""+ Integer.toHexString(mBulkUpdateParams)+ ""String_Node_Str""+ Integer.toHexString(getPendingLayoutChanges(Display.DEFAULT_DISPLAY)));
  }
}","/** 
 * Locked on mService.mWindowMap. 
 */
private void animateLocked(long frameTimeNs){
  if (!mInitialized) {
    return;
  }
  mCurrentTime=frameTimeNs / TimeUtils.NANOS_PER_MS;
  mBulkUpdateParams=SET_ORIENTATION_CHANGE_COMPLETE;
  boolean wasAnimating=mAnimating;
  setAnimating(false);
  mAppWindowAnimating=false;
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mCurrentTime);
  }
  if (SHOW_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  SurfaceControl.setAnimationTransaction();
  try {
    final int numDisplays=mDisplayContentsAnimators.size();
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      updateAppWindowsLocked(displayId);
      DisplayContentsAnimator displayAnimator=mDisplayContentsAnimators.valueAt(i);
      final ScreenRotationAnimation screenRotationAnimation=displayAnimator.mScreenRotationAnimation;
      if (screenRotationAnimation != null && screenRotationAnimation.isAnimating()) {
        if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) {
          setAnimating(true);
        }
 else {
          mBulkUpdateParams|=SET_UPDATE_ROTATION;
          screenRotationAnimation.kill();
          displayAnimator.mScreenRotationAnimation=null;
          if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
            mService.mAccessibilityController.onRotationChangedLocked(mService.getDefaultDisplayContentLocked(),mService.mRotation);
          }
        }
      }
      updateWindowsLocked(displayId);
      updateWallpaperLocked(displayId);
      final WindowList windows=mService.getWindowListLocked(displayId);
      final int N=windows.size();
      for (int j=0; j < N; j++) {
        windows.get(j).mWinAnimator.prepareSurfaceLocked(true);
      }
    }
    for (int i=0; i < numDisplays; i++) {
      final int displayId=mDisplayContentsAnimators.keyAt(i);
      testTokenMayBeDrawnLocked(displayId);
      final ScreenRotationAnimation screenRotationAnimation=mDisplayContentsAnimators.valueAt(i).mScreenRotationAnimation;
      if (screenRotationAnimation != null) {
        screenRotationAnimation.updateSurfacesInTransaction();
      }
      orAnimating(mService.getDisplayContentLocked(displayId).animateDimLayers());
      if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
        mService.mAccessibilityController.drawMagnifiedRegionBorderIfNeededLocked();
      }
    }
    if (mAnimating) {
      mService.scheduleAnimationLocked();
    }
    if (mService.mWatermark != null) {
      mService.mWatermark.drawIfNeeded();
    }
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  boolean hasPendingLayoutChanges=false;
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    final int pendingChanges=getPendingLayoutChanges(displayContent.getDisplayId());
    if ((pendingChanges & WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER) != 0) {
      mBulkUpdateParams|=SET_WALLPAPER_ACTION_PENDING;
    }
    if (pendingChanges != 0) {
      hasPendingLayoutChanges=true;
    }
  }
  boolean doRequest=false;
  if (mBulkUpdateParams != 0) {
    doRequest=mWindowPlacerLocked.copyAnimToLayoutParamsLocked();
  }
  if (hasPendingLayoutChanges || doRequest) {
    mWindowPlacerLocked.requestTraversal();
  }
  if (mAnimating && !wasAnimating && Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
    Trace.asyncTraceBegin(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
  }
  if (!mAnimating && wasAnimating) {
    mWindowPlacerLocked.requestTraversal();
    if (Trace.isTagEnabled(Trace.TRACE_TAG_WINDOW_MANAGER)) {
      Trace.asyncTraceEnd(Trace.TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"",0);
    }
  }
  if (mRemoveReplacedWindows) {
    removeReplacedWindowsLocked();
  }
  mService.destroyPreservedSurfaceLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.i(TAG,""String_Node_Str"" + mAnimating + ""String_Node_Str""+ Integer.toHexString(mBulkUpdateParams)+ ""String_Node_Str""+ Integer.toHexString(getPendingLayoutChanges(Display.DEFAULT_DISPLAY)));
  }
}",0.9894378194207836
193243,"@Override public void handleMessage(Message msg){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + msg.what);
  }
switch (msg.what) {
case REPORT_FOCUS_CHANGE:
{
      WindowState lastFocus;
      WindowState newFocus;
      AccessibilityController accessibilityController=null;
synchronized (mWindowMap) {
        if (mAccessibilityController != null && getDefaultDisplayContentLocked().getDisplayId() == Display.DEFAULT_DISPLAY) {
          accessibilityController=mAccessibilityController;
        }
        lastFocus=mLastFocus;
        newFocus=mCurrentFocus;
        if (lastFocus == newFocus) {
          return;
        }
        mLastFocus=newFocus;
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus + ""String_Node_Str""+ newFocus);
        if (newFocus != null && lastFocus != null && !newFocus.isDisplayedLw()) {
          mLosingFocus.add(lastFocus);
          lastFocus=null;
        }
      }
      if (accessibilityController != null) {
        accessibilityController.onWindowFocusChangedNotLocked();
      }
      if (newFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + newFocus);
        newFocus.reportFocusChangedSerialized(true,mInTouchMode);
        notifyFocusChanged();
      }
      if (lastFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus);
        lastFocus.reportFocusChangedSerialized(false,mInTouchMode);
      }
    }
  break;
case REPORT_LOSING_FOCUS:
{
  ArrayList<WindowState> losers;
synchronized (mWindowMap) {
    losers=mLosingFocus;
    mLosingFocus=new ArrayList<WindowState>();
  }
  final int N=losers.size();
  for (int i=0; i < N; i++) {
    if (DEBUG_FOCUS_LIGHT)     Slog.i(TAG,""String_Node_Str"" + losers.get(i));
    losers.get(i).reportFocusChangedSerialized(false,mInTouchMode);
  }
}
break;
case DO_TRAVERSAL:
{
synchronized (mWindowMap) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
case ADD_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
final StartingData sd=wtoken.startingData;
if (sd == null) {
return;
}
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ sd.pkg);
View view=null;
try {
view=mPolicy.addStartingWindow(wtoken.token,sd.pkg,sd.theme,sd.compatInfo,sd.nonLocalizedLabel,sd.labelRes,sd.icon,sd.logo,sd.windowFlags);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
if (view != null) {
boolean abort=false;
synchronized (mWindowMap) {
if (wtoken.removed || wtoken.startingData == null) {
if (wtoken.startingWindow != null) {
  if (DEBUG_STARTING_WINDOW)   Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.removed+ ""String_Node_Str""+ wtoken.startingData);
  wtoken.startingWindow=null;
  wtoken.startingData=null;
  abort=true;
}
}
 else {
wtoken.startingView=view;
}
if (DEBUG_STARTING_WINDOW && !abort) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
}
if (abort) {
try {
mPolicy.removeStartingWindow(wtoken.token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case REMOVE_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
IBinder token=null;
View view=null;
synchronized (mWindowMap) {
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow != null) {
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
}
if (view != null) {
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case FINISHED_STARTING:
{
IBinder token=null;
View view=null;
while (true) {
synchronized (mWindowMap) {
final int N=mFinishedStarting.size();
if (N <= 0) {
break;
}
AppWindowToken wtoken=mFinishedStarting.remove(N - 1);
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow == null) {
continue;
}
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case REPORT_APPLICATION_TOKEN_DRAWN:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken);
wtoken.appToken.windowsDrawn();
}
 catch (RemoteException ex) {
}
}
break;
case REPORT_APPLICATION_TOKEN_WINDOWS:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
boolean nowVisible=msg.arg1 != 0;
boolean nowGone=msg.arg2 != 0;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ nowGone);
if (nowVisible) {
wtoken.appToken.windowsVisible();
}
 else {
wtoken.appToken.windowsGone();
}
}
 catch (RemoteException ex) {
}
}
break;
case WINDOW_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final WindowList windows=getDefaultWindowListLocked();
int i=windows.size();
while (i > 0) {
i--;
WindowState w=windows.get(i);
if (w.mOrientationChanging) {
w.mOrientationChanging=false;
w.mLastFreezeDuration=(int)(SystemClock.elapsedRealtime() - mDisplayFreezeTime);
Slog.w(TAG,""String_Node_Str"" + w);
}
}
mWindowPlacerLocked.performSurfacePlacement();
}
break;
}
case APP_TRANSITION_TIMEOUT:
{
synchronized (mWindowMap) {
if (mAppTransition.isTransitionSet() || !mOpeningApps.isEmpty() || !mClosingApps.isEmpty()) {
if (DEBUG_APP_TRANSITIONS) Slog.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + mAppTransition.isTransitionSet() + ""String_Node_Str""+ mOpeningApps.size()+ ""String_Node_Str""+ mClosingApps.size());
mAppTransition.setTimeout();
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
}
case PERSIST_ANIMATION_SCALE:
{
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.WINDOW_ANIMATION_SCALE,mWindowAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.TRANSITION_ANIMATION_SCALE,mTransitionAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.ANIMATOR_DURATION_SCALE,mAnimatorDurationScaleSetting);
break;
}
case FORCE_GC:
{
synchronized (mWindowMap) {
if (mAnimator.mAnimating || mAnimationScheduled) {
sendEmptyMessageDelayed(H.FORCE_GC,2000);
return;
}
if (mDisplayFrozen) {
return;
}
}
Runtime.getRuntime().gc();
break;
}
case ENABLE_SCREEN:
{
performEnableScreen();
break;
}
case APP_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final int numStacks=mStackIdToStack.size();
for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
final TaskStack stack=mStackIdToStack.valueAt(stackNdx);
final ArrayList<Task> tasks=stack.getTasks();
for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
AppWindowToken tok=tokens.get(tokenNdx);
if (tok.mAppAnimator.freezingScreen) {
Slog.w(TAG,""String_Node_Str"" + tok);
unsetAppFreezingScreenLocked(tok,true,true);
}
}
}
}
}
break;
}
case CLIENT_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
if (mClientFreezingScreen) {
mClientFreezingScreen=false;
mLastFinishedFreezeSource=""String_Node_Str"";
stopFreezingDisplayLocked();
}
}
break;
}
case SEND_NEW_CONFIGURATION:
{
removeMessages(SEND_NEW_CONFIGURATION);
sendNewConfiguration();
break;
}
case REPORT_WINDOWS_CHANGE:
{
if (mWindowsChanged) {
synchronized (mWindowMap) {
mWindowsChanged=false;
}
notifyWindowsChanged();
}
break;
}
case DRAG_START_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.unregister();
mInputMonitor.updateInputWindowsLw(true);
mDragState.reset();
mDragState=null;
}
}
break;
}
case DRAG_END_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.mDragResult=false;
mDragState.endDragLw();
}
}
break;
}
case REPORT_HARD_KEYBOARD_STATUS_CHANGE:
{
notifyHardKeyboardStatusChange();
break;
}
case BOOT_TIMEOUT:
{
performBootTimeout();
break;
}
case WAITING_FOR_DRAWN_TIMEOUT:
{
Runnable callback=null;
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"" + mWaitingForDrawn);
mWaitingForDrawn.clear();
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
break;
}
case SHOW_STRICT_MODE_VIOLATION:
{
showStrictModeViolation(msg.arg1,msg.arg2);
break;
}
case SHOW_CIRCULAR_DISPLAY_MASK:
{
showCircularMask(msg.arg1 == 1);
break;
}
case SHOW_EMULATOR_DISPLAY_OVERLAY:
{
showEmulatorDisplayOverlay();
break;
}
case DO_ANIMATION_CALLBACK:
{
try {
((IRemoteCallback)msg.obj).sendResult(null);
}
 catch (RemoteException e) {
}
break;
}
case DO_DISPLAY_ADDED:
handleDisplayAdded(msg.arg1);
break;
case DO_DISPLAY_REMOVED:
synchronized (mWindowMap) {
handleDisplayRemovedLocked(msg.arg1);
}
break;
case DO_DISPLAY_CHANGED:
synchronized (mWindowMap) {
handleDisplayChangedLocked(msg.arg1);
}
break;
case TAP_OUTSIDE_TASK:
{
int taskId;
synchronized (mWindowMap) {
taskId=((DisplayContent)msg.obj).taskIdFromPoint(msg.arg1,msg.arg2);
}
if (taskId >= 0) {
try {
mActivityManager.setFocusedTask(taskId);
}
 catch (RemoteException e) {
}
}
}
break;
case TAP_DOWN_OUTSIDE_TASK:
{
startResizingTask((DisplayContent)msg.obj,msg.arg1,msg.arg2);
}
break;
case FINISH_TASK_POSITIONING:
{
finishPositioning();
}
break;
case NOTIFY_ACTIVITY_DRAWN:
try {
mActivityManager.notifyActivityDrawn((IBinder)msg.obj);
}
 catch (RemoteException e) {
}
break;
case ALL_WINDOWS_DRAWN:
{
Runnable callback;
synchronized (mWindowMap) {
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
}
case NEW_ANIMATOR_SCALE:
{
float scale=getCurrentAnimatorScale();
ValueAnimator.setDurationScale(scale);
Session session=(Session)msg.obj;
if (session != null) {
try {
session.mCallback.onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
 else {
ArrayList<IWindowSessionCallback> callbacks=new ArrayList<IWindowSessionCallback>();
synchronized (mWindowMap) {
for (int i=0; i < mSessions.size(); i++) {
callbacks.add(mSessions.valueAt(i).mCallback);
}
}
for (int i=0; i < callbacks.size(); i++) {
try {
callbacks.get(i).onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
}
}
break;
case CHECK_IF_BOOT_ANIMATION_FINISHED:
{
final boolean bootAnimationComplete;
synchronized (mWindowMap) {
if (DEBUG_BOOT) Slog.i(TAG,""String_Node_Str"");
bootAnimationComplete=checkBootAnimationCompleteLocked();
}
if (bootAnimationComplete) {
performEnableScreen();
}
}
break;
case RESET_ANR_MESSAGE:
{
synchronized (mWindowMap) {
mLastANRState=null;
}
}
break;
case WALLPAPER_DRAW_PENDING_TIMEOUT:
{
synchronized (mWindowMap) {
if (mWallpaperControllerLocked.processWallpaperDrawPendingTimeout()) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
}
case UPDATE_DOCKED_STACK_DIVIDER:
{
synchronized (mWindowMap) {
getDefaultDisplayContentLocked().getDockedDividerController().reevaluateVisibility();
}
}
break;
case RESIZE_TASK:
{
try {
mActivityManager.resizeTask(msg.arg1,(Rect)msg.obj,msg.arg2);
}
 catch (RemoteException e) {
}
}
break;
case RESIZE_STACK:
{
try {
mActivityManager.resizeStack(msg.arg1,(Rect)msg.obj,msg.arg2 == 1);
}
 catch (RemoteException e) {
}
}
break;
}
if (DEBUG_WINDOW_TRACE) {
Slog.v(TAG,""String_Node_Str"");
}
}","@Override public void handleMessage(Message msg){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + msg.what);
  }
switch (msg.what) {
case REPORT_FOCUS_CHANGE:
{
      WindowState lastFocus;
      WindowState newFocus;
      AccessibilityController accessibilityController=null;
synchronized (mWindowMap) {
        if (mAccessibilityController != null && getDefaultDisplayContentLocked().getDisplayId() == Display.DEFAULT_DISPLAY) {
          accessibilityController=mAccessibilityController;
        }
        lastFocus=mLastFocus;
        newFocus=mCurrentFocus;
        if (lastFocus == newFocus) {
          return;
        }
        mLastFocus=newFocus;
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus + ""String_Node_Str""+ newFocus);
        if (newFocus != null && lastFocus != null && !newFocus.isDisplayedLw()) {
          mLosingFocus.add(lastFocus);
          lastFocus=null;
        }
      }
      if (accessibilityController != null) {
        accessibilityController.onWindowFocusChangedNotLocked();
      }
      if (newFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + newFocus);
        newFocus.reportFocusChangedSerialized(true,mInTouchMode);
        notifyFocusChanged();
      }
      if (lastFocus != null) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"" + lastFocus);
        lastFocus.reportFocusChangedSerialized(false,mInTouchMode);
      }
    }
  break;
case REPORT_LOSING_FOCUS:
{
  ArrayList<WindowState> losers;
synchronized (mWindowMap) {
    losers=mLosingFocus;
    mLosingFocus=new ArrayList<WindowState>();
  }
  final int N=losers.size();
  for (int i=0; i < N; i++) {
    if (DEBUG_FOCUS_LIGHT)     Slog.i(TAG,""String_Node_Str"" + losers.get(i));
    losers.get(i).reportFocusChangedSerialized(false,mInTouchMode);
  }
}
break;
case DO_TRAVERSAL:
{
synchronized (mWindowMap) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
case ADD_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
final StartingData sd=wtoken.startingData;
if (sd == null) {
return;
}
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ sd.pkg);
View view=null;
try {
view=mPolicy.addStartingWindow(wtoken.token,sd.pkg,sd.theme,sd.compatInfo,sd.nonLocalizedLabel,sd.labelRes,sd.icon,sd.logo,sd.windowFlags);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
if (view != null) {
boolean abort=false;
synchronized (mWindowMap) {
if (wtoken.removed || wtoken.startingData == null) {
if (wtoken.startingWindow != null) {
  if (DEBUG_STARTING_WINDOW)   Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.removed+ ""String_Node_Str""+ wtoken.startingData);
  wtoken.startingWindow=null;
  wtoken.startingData=null;
  abort=true;
}
}
 else {
wtoken.startingView=view;
}
if (DEBUG_STARTING_WINDOW && !abort) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
}
if (abort) {
try {
mPolicy.removeStartingWindow(wtoken.token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
}
break;
case REMOVE_STARTING:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
IBinder token=null;
View view=null;
synchronized (mWindowMap) {
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow != null) {
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
}
if (view != null) {
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case FINISHED_STARTING:
{
IBinder token=null;
View view=null;
while (true) {
synchronized (mWindowMap) {
final int N=mFinishedStarting.size();
if (N <= 0) {
break;
}
AppWindowToken wtoken=mFinishedStarting.remove(N - 1);
if (DEBUG_STARTING_WINDOW) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ wtoken.startingWindow+ ""String_Node_Str""+ wtoken.startingView);
if (wtoken.startingWindow == null) {
continue;
}
view=wtoken.startingView;
token=wtoken.token;
wtoken.startingData=null;
wtoken.startingView=null;
wtoken.startingWindow=null;
wtoken.startingDisplayed=false;
}
try {
mPolicy.removeStartingWindow(token,view);
}
 catch (Exception e) {
Slog.w(TAG,""String_Node_Str"",e);
}
}
}
break;
case REPORT_APPLICATION_TOKEN_DRAWN:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken);
wtoken.appToken.windowsDrawn();
}
 catch (RemoteException ex) {
}
}
break;
case REPORT_APPLICATION_TOKEN_WINDOWS:
{
final AppWindowToken wtoken=(AppWindowToken)msg.obj;
boolean nowVisible=msg.arg1 != 0;
boolean nowGone=msg.arg2 != 0;
try {
if (DEBUG_VISIBILITY) Slog.v(TAG,""String_Node_Str"" + wtoken + ""String_Node_Str""+ nowVisible+ ""String_Node_Str""+ nowGone);
if (nowVisible) {
wtoken.appToken.windowsVisible();
}
 else {
wtoken.appToken.windowsGone();
}
}
 catch (RemoteException ex) {
}
}
break;
case WINDOW_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final WindowList windows=getDefaultWindowListLocked();
int i=windows.size();
while (i > 0) {
i--;
WindowState w=windows.get(i);
if (w.mOrientationChanging) {
w.mOrientationChanging=false;
w.mLastFreezeDuration=(int)(SystemClock.elapsedRealtime() - mDisplayFreezeTime);
Slog.w(TAG,""String_Node_Str"" + w);
}
}
mWindowPlacerLocked.performSurfacePlacement();
}
break;
}
case APP_TRANSITION_TIMEOUT:
{
synchronized (mWindowMap) {
if (mAppTransition.isTransitionSet() || !mOpeningApps.isEmpty() || !mClosingApps.isEmpty()) {
if (DEBUG_APP_TRANSITIONS) Slog.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + mAppTransition.isTransitionSet() + ""String_Node_Str""+ mOpeningApps.size()+ ""String_Node_Str""+ mClosingApps.size());
mAppTransition.setTimeout();
mWindowPlacerLocked.performSurfacePlacement();
}
}
break;
}
case PERSIST_ANIMATION_SCALE:
{
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.WINDOW_ANIMATION_SCALE,mWindowAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.TRANSITION_ANIMATION_SCALE,mTransitionAnimationScaleSetting);
Settings.Global.putFloat(mContext.getContentResolver(),Settings.Global.ANIMATOR_DURATION_SCALE,mAnimatorDurationScaleSetting);
break;
}
case FORCE_GC:
{
synchronized (mWindowMap) {
if (mAnimator.isAnimating() || mAnimationScheduled) {
sendEmptyMessageDelayed(H.FORCE_GC,2000);
return;
}
if (mDisplayFrozen) {
return;
}
}
Runtime.getRuntime().gc();
break;
}
case ENABLE_SCREEN:
{
performEnableScreen();
break;
}
case APP_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"");
mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_TIMEOUT;
final int numStacks=mStackIdToStack.size();
for (int stackNdx=0; stackNdx < numStacks; ++stackNdx) {
final TaskStack stack=mStackIdToStack.valueAt(stackNdx);
final ArrayList<Task> tasks=stack.getTasks();
for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
AppTokenList tokens=tasks.get(taskNdx).mAppTokens;
for (int tokenNdx=tokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
AppWindowToken tok=tokens.get(tokenNdx);
if (tok.mAppAnimator.freezingScreen) {
Slog.w(TAG,""String_Node_Str"" + tok);
unsetAppFreezingScreenLocked(tok,true,true);
}
}
}
}
}
break;
}
case CLIENT_FREEZE_TIMEOUT:
{
synchronized (mWindowMap) {
if (mClientFreezingScreen) {
mClientFreezingScreen=false;
mLastFinishedFreezeSource=""String_Node_Str"";
stopFreezingDisplayLocked();
}
}
break;
}
case SEND_NEW_CONFIGURATION:
{
removeMessages(SEND_NEW_CONFIGURATION);
sendNewConfiguration();
break;
}
case REPORT_WINDOWS_CHANGE:
{
if (mWindowsChanged) {
synchronized (mWindowMap) {
mWindowsChanged=false;
}
notifyWindowsChanged();
}
break;
}
case DRAG_START_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.unregister();
mInputMonitor.updateInputWindowsLw(true);
mDragState.reset();
mDragState=null;
}
}
break;
}
case DRAG_END_TIMEOUT:
{
IBinder win=(IBinder)msg.obj;
if (DEBUG_DRAG) {
Slog.w(TAG,""String_Node_Str"" + win);
}
synchronized (mWindowMap) {
if (mDragState != null) {
mDragState.mDragResult=false;
mDragState.endDragLw();
}
}
break;
}
case REPORT_HARD_KEYBOARD_STATUS_CHANGE:
{
notifyHardKeyboardStatusChange();
break;
}
case BOOT_TIMEOUT:
{
performBootTimeout();
break;
}
case WAITING_FOR_DRAWN_TIMEOUT:
{
Runnable callback=null;
synchronized (mWindowMap) {
Slog.w(TAG,""String_Node_Str"" + mWaitingForDrawn);
mWaitingForDrawn.clear();
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
break;
}
case SHOW_STRICT_MODE_VIOLATION:
{
showStrictModeViolation(msg.arg1,msg.arg2);
break;
}
case SHOW_CIRCULAR_DISPLAY_MASK:
{
showCircularMask(msg.arg1 == 1);
break;
}
case SHOW_EMULATOR_DISPLAY_OVERLAY:
{
showEmulatorDisplayOverlay();
break;
}
case DO_ANIMATION_CALLBACK:
{
try {
((IRemoteCallback)msg.obj).sendResult(null);
}
 catch (RemoteException e) {
}
break;
}
case DO_DISPLAY_ADDED:
handleDisplayAdded(msg.arg1);
break;
case DO_DISPLAY_REMOVED:
synchronized (mWindowMap) {
handleDisplayRemovedLocked(msg.arg1);
}
break;
case DO_DISPLAY_CHANGED:
synchronized (mWindowMap) {
handleDisplayChangedLocked(msg.arg1);
}
break;
case TAP_OUTSIDE_TASK:
{
int taskId;
synchronized (mWindowMap) {
taskId=((DisplayContent)msg.obj).taskIdFromPoint(msg.arg1,msg.arg2);
}
if (taskId >= 0) {
try {
mActivityManager.setFocusedTask(taskId);
}
 catch (RemoteException e) {
}
}
}
break;
case TAP_DOWN_OUTSIDE_TASK:
{
startResizingTask((DisplayContent)msg.obj,msg.arg1,msg.arg2);
}
break;
case FINISH_TASK_POSITIONING:
{
finishPositioning();
}
break;
case NOTIFY_ACTIVITY_DRAWN:
try {
mActivityManager.notifyActivityDrawn((IBinder)msg.obj);
}
 catch (RemoteException e) {
}
break;
case ALL_WINDOWS_DRAWN:
{
Runnable callback;
synchronized (mWindowMap) {
callback=mWaitingForDrawnCallback;
mWaitingForDrawnCallback=null;
}
if (callback != null) {
callback.run();
}
}
case NEW_ANIMATOR_SCALE:
{
float scale=getCurrentAnimatorScale();
ValueAnimator.setDurationScale(scale);
Session session=(Session)msg.obj;
if (session != null) {
try {
session.mCallback.onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
 else {
ArrayList<IWindowSessionCallback> callbacks=new ArrayList<IWindowSessionCallback>();
synchronized (mWindowMap) {
for (int i=0; i < mSessions.size(); i++) {
callbacks.add(mSessions.valueAt(i).mCallback);
}
}
for (int i=0; i < callbacks.size(); i++) {
try {
callbacks.get(i).onAnimatorScaleChanged(scale);
}
 catch (RemoteException e) {
}
}
}
}
break;
case CHECK_IF_BOOT_ANIMATION_FINISHED:
{
final boolean bootAnimationComplete;
synchronized (mWindowMap) {
if (DEBUG_BOOT) Slog.i(TAG,""String_Node_Str"");
bootAnimationComplete=checkBootAnimationCompleteLocked();
}
if (bootAnimationComplete) {
performEnableScreen();
}
}
break;
case RESET_ANR_MESSAGE:
{
synchronized (mWindowMap) {
mLastANRState=null;
}
}
break;
case WALLPAPER_DRAW_PENDING_TIMEOUT:
{
synchronized (mWindowMap) {
if (mWallpaperControllerLocked.processWallpaperDrawPendingTimeout()) {
mWindowPlacerLocked.performSurfacePlacement();
}
}
}
case UPDATE_DOCKED_STACK_DIVIDER:
{
synchronized (mWindowMap) {
getDefaultDisplayContentLocked().getDockedDividerController().reevaluateVisibility();
}
}
break;
case RESIZE_TASK:
{
try {
mActivityManager.resizeTask(msg.arg1,(Rect)msg.obj,msg.arg2);
}
 catch (RemoteException e) {
}
}
break;
case RESIZE_STACK:
{
try {
mActivityManager.resizeStack(msg.arg1,(Rect)msg.obj,msg.arg2 == 1);
}
 catch (RemoteException e) {
}
}
break;
}
if (DEBUG_WINDOW_TRACE) {
Slog.v(TAG,""String_Node_Str"");
}
}",0.9990326786390208
193244,"private void adjustCropToStackBounds(WindowState w,Rect clipRect,boolean isFreeformResizing){
  final AppWindowToken appToken=w.mAppToken;
  final Task task=w.getTask();
  if (task != null && appToken.mCropWindowsToStack && !appToken.mWillReplaceWindow) {
    TaskStack stack=task.mStack;
    stack.getDimBounds(mTmpStackBounds);
    final int frameX=isFreeformResizing ? (int)mSurfaceController.getX() : w.mFrame.left + mWin.mXOffset - w.getAttrs().surfaceInsets.left;
    final int frameY=isFreeformResizing ? (int)mSurfaceController.getY() : w.mFrame.top + mWin.mYOffset - w.getAttrs().surfaceInsets.top;
    clipRect.left=Math.max(0,Math.max(mTmpStackBounds.left,frameX + clipRect.left) - frameX);
    clipRect.top=Math.max(0,Math.max(mTmpStackBounds.top,frameY + clipRect.top) - frameY);
    clipRect.right=Math.max(0,Math.min(mTmpStackBounds.right,frameX + clipRect.right) - frameX);
    clipRect.bottom=Math.max(0,Math.min(mTmpStackBounds.bottom,frameY + clipRect.bottom) - frameY);
  }
}","private void adjustCropToStackBounds(WindowState w,Rect clipRect,boolean isFreeformResizing){
  final AppWindowToken appToken=w.mAppToken;
  final Task task=w.getTask();
  if (task == null || !appToken.mCropWindowsToStack) {
    return;
  }
  if (isAnimating() && (appToken.mWillReplaceWindow || w.inDockedWorkspace())) {
    return;
  }
  final TaskStack stack=task.mStack;
  stack.getDimBounds(mTmpStackBounds);
  final int frameX=isFreeformResizing ? (int)mSurfaceController.getX() : w.mFrame.left + mWin.mXOffset - w.getAttrs().surfaceInsets.left;
  final int frameY=isFreeformResizing ? (int)mSurfaceController.getY() : w.mFrame.top + mWin.mYOffset - w.getAttrs().surfaceInsets.top;
  clipRect.left=Math.max(0,Math.max(mTmpStackBounds.left,frameX + clipRect.left) - frameX);
  clipRect.top=Math.max(0,Math.max(mTmpStackBounds.top,frameY + clipRect.top) - frameY);
  clipRect.right=Math.max(0,Math.min(mTmpStackBounds.right,frameX + clipRect.right) - frameX);
  clipRect.bottom=Math.max(0,Math.min(mTmpStackBounds.bottom,frameY + clipRect.bottom) - frameY);
}",0.8901846452866861
193245,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final boolean isFreeformResizing=w.isDragResizing() && w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM;
  final Rect clipRect=mTmpClipRect;
  if (isFreeformResizing) {
    clipRect.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);
  }
 else {
    clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  }
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!(mAnimator.mAnimating && w.inDockedWorkspace())) {
    adjustCropToStackBounds(w,clipRect,isFreeformResizing);
  }
  w.transformFromScreenToSurfaceSpace(clipRect);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    mSurfaceController.setCropInTransaction(clipRect,recoveringMemory);
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.isAnimating()) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final boolean isFreeformResizing=w.isDragResizing() && w.getResizeMode() == DRAG_RESIZE_MODE_FREEFORM;
  final Rect clipRect=mTmpClipRect;
  if (isFreeformResizing) {
    clipRect.set(0,0,displayInfo.logicalWidth,displayInfo.logicalHeight);
  }
 else {
    clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  }
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  adjustCropToStackBounds(w,clipRect,isFreeformResizing);
  w.transformFromScreenToSurfaceSpace(clipRect);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    mSurfaceController.setCropInTransaction(clipRect,recoveringMemory);
  }
}",0.8935775562253652
193246,"/** 
 * @param windows List of windows on default display.
 * @return bitmap indicating if another pass through layout must be made.
 */
private int handleAppTransitionReadyLocked(WindowList windows){
  int appsCount=mService.mOpeningApps.size();
  if (!transitionGoodToGo(appsCount)) {
    return 0;
  }
  if (DEBUG_APP_TRANSITIONS)   Slog.v(TAG,""String_Node_Str"");
  int transit=mService.mAppTransition.getAppTransition();
  if (mService.mSkipAppTransitionAnimation) {
    transit=AppTransition.TRANSIT_UNSET;
  }
  mService.mSkipAppTransitionAnimation=false;
  mService.mNoAnimationNotifyOnTransitionFinished.clear();
  mService.mH.removeMessages(APP_TRANSITION_TIMEOUT);
  mService.rebuildAppWindowListLocked();
  mWallpaperMayChange=false;
  WindowManager.LayoutParams animLp=null;
  int bestAnimLayer=-1;
  boolean fullscreenAnim=false;
  boolean voiceInteraction=false;
  final WindowState lowerWallpaperTarget=mWallpaperControllerLocked.getLowerWallpaperTarget();
  final WindowState upperWallpaperTarget=mWallpaperControllerLocked.getUpperWallpaperTarget();
  boolean openingAppHasWallpaper=false;
  boolean closingAppHasWallpaper=false;
  final AppWindowToken lowerWallpaperAppToken;
  final AppWindowToken upperWallpaperAppToken;
  if (lowerWallpaperTarget == null) {
    lowerWallpaperAppToken=upperWallpaperAppToken=null;
  }
 else {
    lowerWallpaperAppToken=lowerWallpaperTarget.mAppToken;
    upperWallpaperAppToken=upperWallpaperTarget.mAppToken;
  }
  int i;
  final int closingAppsCount=mService.mClosingApps.size();
  appsCount=closingAppsCount + mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    final AppWindowToken wtoken;
    if (i < closingAppsCount) {
      wtoken=mService.mClosingApps.valueAt(i);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        closingAppHasWallpaper=true;
      }
    }
 else {
      wtoken=mService.mOpeningApps.valueAt(i - closingAppsCount);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        openingAppHasWallpaper=true;
      }
    }
    voiceInteraction|=wtoken.voiceInteraction;
    if (wtoken.appFullscreen) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        animLp=ws.mAttrs;
        bestAnimLayer=ws.mLayer;
        fullscreenAnim=true;
      }
    }
 else     if (!fullscreenAnim) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        if (ws.mLayer > bestAnimLayer) {
          animLp=ws.mAttrs;
          bestAnimLayer=ws.mLayer;
        }
      }
    }
  }
  transit=maybeUpdateTransitToWallpaper(transit,openingAppHasWallpaper,closingAppHasWallpaper,lowerWallpaperTarget,upperWallpaperTarget);
  if (!mService.mPolicy.allowAppAnimationsLw()) {
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"");
    animLp=null;
  }
  processApplicationsAnimatingInPlace(transit);
  AppWindowToken topClosingApp=null;
  int topClosingLayer=0;
  appsCount=mService.mClosingApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mClosingApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    appAnimator.clearThumbnail();
    appAnimator.animation=null;
    wtoken.inPendingTransaction=false;
    mService.setTokenVisibilityLocked(wtoken,animLp,false,transit,false,voiceInteraction);
    wtoken.updateReportedVisibilityLocked();
    wtoken.allDrawn=true;
    wtoken.deferClearAllDrawn=false;
    if (wtoken.startingWindow != null && !wtoken.startingWindow.mExiting) {
      mService.scheduleRemoveStartingWindowLocked(wtoken);
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        WindowState win=wtoken.windows.get(j);
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topClosingApp == null || layer > topClosingLayer) {
        topClosingApp=wtoken;
        topClosingLayer=layer;
      }
    }
  }
  AppWindowToken topOpeningApp=null;
  appsCount=mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mOpeningApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    if (!appAnimator.usingTransferredAnimation) {
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
    }
    wtoken.inPendingTransaction=false;
    if (!mService.setTokenVisibilityLocked(wtoken,animLp,true,transit,false,voiceInteraction)) {
      mService.mNoAnimationNotifyOnTransitionFinished.add(wtoken.token);
    }
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToShow=false;
    appAnimator.mAllAppWinAnimators.clear();
    final int windowsCount=wtoken.allAppWindows.size();
    for (int j=0; j < windowsCount; j++) {
      appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
    }
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
    SurfaceControl.openTransaction();
    try {
      mService.mAnimator.mAnimating|=appAnimator.showAllWindowsLocked();
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    int topOpeningLayer=0;
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        final WindowState win=wtoken.windows.get(j);
        if (win.mAppToken == null || !win.mAppToken.mWillReplaceWindow) {
          win.mExiting=false;
        }
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topOpeningApp == null || layer > topOpeningLayer) {
        topOpeningApp=wtoken;
        topOpeningLayer=layer;
      }
    }
    createThumbnailAppAnimator(transit,wtoken,topOpeningLayer,topClosingLayer);
    wtoken.restoreSavedSurfaces();
  }
  AppWindowAnimator openingAppAnimator=(topOpeningApp == null) ? null : topOpeningApp.mAppAnimator;
  AppWindowAnimator closingAppAnimator=(topClosingApp == null) ? null : topClosingApp.mAppAnimator;
  mService.mAppTransition.goodToGo(openingAppAnimator,closingAppAnimator);
  mService.mAppTransition.postAnimationCallback();
  mService.mAppTransition.clear();
  mService.mOpeningApps.clear();
  mService.mClosingApps.clear();
  mService.getDefaultDisplayContentLocked().layoutNeeded=true;
  if (windows == mService.getDefaultWindowListLocked() && !mService.moveInputMethodWindowsIfNeededLocked(true)) {
    mService.assignLayersLocked(windows);
  }
  mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,true);
  mService.mFocusMayChange=false;
  mService.notifyActivityDrawnForKeyguard();
  return FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG;
}","/** 
 * @param windows List of windows on default display.
 * @return bitmap indicating if another pass through layout must be made.
 */
private int handleAppTransitionReadyLocked(WindowList windows){
  int appsCount=mService.mOpeningApps.size();
  if (!transitionGoodToGo(appsCount)) {
    return 0;
  }
  if (DEBUG_APP_TRANSITIONS)   Slog.v(TAG,""String_Node_Str"");
  int transit=mService.mAppTransition.getAppTransition();
  if (mService.mSkipAppTransitionAnimation) {
    transit=AppTransition.TRANSIT_UNSET;
  }
  mService.mSkipAppTransitionAnimation=false;
  mService.mNoAnimationNotifyOnTransitionFinished.clear();
  mService.mH.removeMessages(APP_TRANSITION_TIMEOUT);
  mService.rebuildAppWindowListLocked();
  mWallpaperMayChange=false;
  WindowManager.LayoutParams animLp=null;
  int bestAnimLayer=-1;
  boolean fullscreenAnim=false;
  boolean voiceInteraction=false;
  final WindowState lowerWallpaperTarget=mWallpaperControllerLocked.getLowerWallpaperTarget();
  final WindowState upperWallpaperTarget=mWallpaperControllerLocked.getUpperWallpaperTarget();
  boolean openingAppHasWallpaper=false;
  boolean closingAppHasWallpaper=false;
  final AppWindowToken lowerWallpaperAppToken;
  final AppWindowToken upperWallpaperAppToken;
  if (lowerWallpaperTarget == null) {
    lowerWallpaperAppToken=upperWallpaperAppToken=null;
  }
 else {
    lowerWallpaperAppToken=lowerWallpaperTarget.mAppToken;
    upperWallpaperAppToken=upperWallpaperTarget.mAppToken;
  }
  int i;
  final int closingAppsCount=mService.mClosingApps.size();
  appsCount=closingAppsCount + mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    final AppWindowToken wtoken;
    if (i < closingAppsCount) {
      wtoken=mService.mClosingApps.valueAt(i);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        closingAppHasWallpaper=true;
      }
    }
 else {
      wtoken=mService.mOpeningApps.valueAt(i - closingAppsCount);
      if (wtoken == lowerWallpaperAppToken || wtoken == upperWallpaperAppToken) {
        openingAppHasWallpaper=true;
      }
    }
    voiceInteraction|=wtoken.voiceInteraction;
    if (wtoken.appFullscreen) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        animLp=ws.mAttrs;
        bestAnimLayer=ws.mLayer;
        fullscreenAnim=true;
      }
    }
 else     if (!fullscreenAnim) {
      WindowState ws=wtoken.findMainWindow();
      if (ws != null) {
        if (ws.mLayer > bestAnimLayer) {
          animLp=ws.mAttrs;
          bestAnimLayer=ws.mLayer;
        }
      }
    }
  }
  transit=maybeUpdateTransitToWallpaper(transit,openingAppHasWallpaper,closingAppHasWallpaper,lowerWallpaperTarget,upperWallpaperTarget);
  if (!mService.mPolicy.allowAppAnimationsLw()) {
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"");
    animLp=null;
  }
  processApplicationsAnimatingInPlace(transit);
  AppWindowToken topClosingApp=null;
  int topClosingLayer=0;
  appsCount=mService.mClosingApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mClosingApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    appAnimator.clearThumbnail();
    appAnimator.animation=null;
    wtoken.inPendingTransaction=false;
    mService.setTokenVisibilityLocked(wtoken,animLp,false,transit,false,voiceInteraction);
    wtoken.updateReportedVisibilityLocked();
    wtoken.allDrawn=true;
    wtoken.deferClearAllDrawn=false;
    if (wtoken.startingWindow != null && !wtoken.startingWindow.mExiting) {
      mService.scheduleRemoveStartingWindowLocked(wtoken);
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        WindowState win=wtoken.windows.get(j);
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topClosingApp == null || layer > topClosingLayer) {
        topClosingApp=wtoken;
        topClosingLayer=layer;
      }
    }
  }
  AppWindowToken topOpeningApp=null;
  appsCount=mService.mOpeningApps.size();
  for (i=0; i < appsCount; i++) {
    AppWindowToken wtoken=mService.mOpeningApps.valueAt(i);
    final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
    if (DEBUG_APP_TRANSITIONS)     Slog.v(TAG,""String_Node_Str"" + wtoken);
    if (!appAnimator.usingTransferredAnimation) {
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
    }
    wtoken.inPendingTransaction=false;
    if (!mService.setTokenVisibilityLocked(wtoken,animLp,true,transit,false,voiceInteraction)) {
      mService.mNoAnimationNotifyOnTransitionFinished.add(wtoken.token);
    }
    wtoken.updateReportedVisibilityLocked();
    wtoken.waitingToShow=false;
    appAnimator.mAllAppWinAnimators.clear();
    final int windowsCount=wtoken.allAppWindows.size();
    for (int j=0; j < windowsCount; j++) {
      appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
    }
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
    SurfaceControl.openTransaction();
    try {
      mService.mAnimator.orAnimating(appAnimator.showAllWindowsLocked());
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
    int topOpeningLayer=0;
    if (animLp != null) {
      int layer=-1;
      for (int j=0; j < wtoken.windows.size(); j++) {
        final WindowState win=wtoken.windows.get(j);
        if (win.mAppToken == null || !win.mAppToken.mWillReplaceWindow) {
          win.mExiting=false;
        }
        if (win.mWinAnimator.mAnimLayer > layer) {
          layer=win.mWinAnimator.mAnimLayer;
        }
      }
      if (topOpeningApp == null || layer > topOpeningLayer) {
        topOpeningApp=wtoken;
        topOpeningLayer=layer;
      }
    }
    createThumbnailAppAnimator(transit,wtoken,topOpeningLayer,topClosingLayer);
    wtoken.restoreSavedSurfaces();
  }
  AppWindowAnimator openingAppAnimator=(topOpeningApp == null) ? null : topOpeningApp.mAppAnimator;
  AppWindowAnimator closingAppAnimator=(topClosingApp == null) ? null : topClosingApp.mAppAnimator;
  mService.mAppTransition.goodToGo(openingAppAnimator,closingAppAnimator);
  mService.mAppTransition.postAnimationCallback();
  mService.mAppTransition.clear();
  mService.mOpeningApps.clear();
  mService.mClosingApps.clear();
  mService.getDefaultDisplayContentLocked().layoutNeeded=true;
  if (windows == mService.getDefaultWindowListLocked() && !mService.moveInputMethodWindowsIfNeededLocked(true)) {
    mService.assignLayersLocked(windows);
  }
  mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,true);
  mService.mFocusMayChange=false;
  mService.notifyActivityDrawnForKeyguard();
  return FINISH_LAYOUT_REDO_LAYOUT | FINISH_LAYOUT_REDO_CONFIG;
}",0.9982235486392382
193247,"private void processApplicationsAnimatingInPlace(int transit){
  if (transit == AppTransition.TRANSIT_TASK_IN_PLACE) {
    final WindowState win=mService.findFocusedWindowLocked(mService.getDefaultDisplayContentLocked());
    if (win != null) {
      final AppWindowToken wtoken=win.mAppToken;
      final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,""String_Node_Str"" + wtoken);
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
      mService.updateTokenInPlaceLocked(wtoken,transit);
      wtoken.updateReportedVisibilityLocked();
      appAnimator.mAllAppWinAnimators.clear();
      final int N=wtoken.allAppWindows.size();
      for (int j=0; j < N; j++) {
        appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
      }
      mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
      mService.mAnimator.mAnimating|=appAnimator.showAllWindowsLocked();
    }
  }
}","private void processApplicationsAnimatingInPlace(int transit){
  if (transit == AppTransition.TRANSIT_TASK_IN_PLACE) {
    final WindowState win=mService.findFocusedWindowLocked(mService.getDefaultDisplayContentLocked());
    if (win != null) {
      final AppWindowToken wtoken=win.mAppToken;
      final AppWindowAnimator appAnimator=wtoken.mAppAnimator;
      if (DEBUG_APP_TRANSITIONS)       Slog.v(TAG,""String_Node_Str"" + wtoken);
      appAnimator.clearThumbnail();
      appAnimator.animation=null;
      mService.updateTokenInPlaceLocked(wtoken,transit);
      wtoken.updateReportedVisibilityLocked();
      appAnimator.mAllAppWinAnimators.clear();
      final int N=wtoken.allAppWindows.size();
      for (int j=0; j < N; j++) {
        appAnimator.mAllAppWinAnimators.add(wtoken.allAppWindows.get(j).mWinAnimator);
      }
      mService.mAnimator.mAppWindowAnimating|=appAnimator.isAnimating();
      mService.mAnimator.orAnimating(appAnimator.showAllWindowsLocked());
    }
  }
}",0.9964664310954064
193248,"private void performSurfacePlacementInner(boolean recoveringMemory){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + Debug.getCallers(3));
  }
  int i;
  boolean updateInputWindowsNeeded=false;
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    updateInputWindowsNeeded=mService.updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    for (i=displayContent.mExitingTokens.size() - 1; i >= 0; i--) {
      displayContent.mExitingTokens.get(i).hasVisible=false;
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (int tokenNdx=exitingAppTokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      exitingAppTokens.get(tokenNdx).hasVisible=false;
    }
  }
  mHoldScreen=null;
  mScreenBrightness=-1;
  mButtonBrightness=-1;
  mUserActivityTimeout=-1;
  mObscureApplicationContentOnSecondaryDisplays=false;
  mService.mTransactionSequence++;
  final DisplayContent defaultDisplay=mService.getDefaultDisplayContentLocked();
  final DisplayInfo defaultInfo=defaultDisplay.getDisplayInfo();
  final int defaultDw=defaultInfo.logicalWidth;
  final int defaultDh=defaultInfo.logicalHeight;
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    applySurfaceChangesTransaction(recoveringMemory,numDisplays,defaultDw,defaultDh);
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  final WindowList defaultWindows=defaultDisplay.getWindowList();
  if (mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=handleAppTransitionReadyLocked(defaultWindows);
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (!mService.mAnimator.mAppWindowAnimating && mService.mAppTransition.isRunning()) {
    defaultDisplay.pendingLayoutChanges|=mService.handleAnimatingStoppedAndTransitionLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mWallpaperForceHidingChanged && defaultDisplay.pendingLayoutChanges == 0 && !mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  mWallpaperForceHidingChanged=false;
  if (mWallpaperMayChange) {
    if (DEBUG_WALLPAPER_LIGHT)     Slog.v(TAG,""String_Node_Str"");
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    if (mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
      updateInputWindowsNeeded=true;
      defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_ANIM;
    }
  }
  if (mService.needsLayout()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  for (i=mService.mResizingWindows.size() - 1; i >= 0; i--) {
    WindowState win=mService.mResizingWindows.get(i);
    if (win.mAppFreezing) {
      continue;
    }
    if (win.mAppToken != null) {
      win.mAppToken.destroySavedSurfaces();
    }
    win.reportResized();
    mService.mResizingWindows.remove(i);
  }
  if (DEBUG_ORIENTATION && mService.mDisplayFrozen)   Slog.v(TAG,""String_Node_Str"" + mOrientationChangeComplete);
  if (mOrientationChangeComplete) {
    if (mService.mWindowsFreezingScreen != WINDOWS_FREEZING_SCREENS_NONE) {
      mService.mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_NONE;
      mService.mLastFinishedFreezeSource=mLastWindowFreezeSource;
      mService.mH.removeMessages(WINDOW_FREEZE_TIMEOUT);
    }
    mService.stopFreezingDisplayLocked();
  }
  boolean wallpaperDestroyed=false;
  i=mService.mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mService.mDestroySurface.get(i);
      win.mDestroying=false;
      if (mService.mInputMethodWindow == win) {
        mService.mInputMethodWindow=null;
      }
      if (mWallpaperControllerLocked.isWallpaperTarget(win)) {
        wallpaperDestroyed=true;
      }
      if (!win.shouldSaveSurface()) {
        win.mWinAnimator.destroySurfaceLocked();
      }
    }
 while (i > 0);
    mService.mDestroySurface.clear();
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    ArrayList<WindowToken> exitingTokens=displayContent.mExitingTokens;
    for (i=exitingTokens.size() - 1; i >= 0; i--) {
      WindowToken token=exitingTokens.get(i);
      if (!token.hasVisible) {
        exitingTokens.remove(i);
        if (token.windowType == TYPE_WALLPAPER) {
          mWallpaperControllerLocked.removeWallpaperToken(token);
        }
      }
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (i=exitingAppTokens.size() - 1; i >= 0; i--) {
      AppWindowToken token=exitingAppTokens.get(i);
      if (!token.hasVisible && !mService.mClosingApps.contains(token) && (!token.mIsExiting || token.allAppWindows.isEmpty())) {
        token.mAppAnimator.clearAnimation();
        token.mAppAnimator.animating=false;
        if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)         Slog.v(TAG,""String_Node_Str"" + token);
        token.removeAppFromTaskLocked();
      }
    }
  }
  if (wallpaperDestroyed) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    defaultDisplay.layoutNeeded=true;
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    if (displayContent.pendingLayoutChanges != 0) {
      displayContent.layoutNeeded=true;
    }
  }
  mService.mInputMonitor.updateInputWindowsLw(true);
  mService.setHoldScreenLocked(mHoldScreen);
  if (!mService.mDisplayFrozen) {
    if (mScreenBrightness < 0 || mScreenBrightness > 1.0f) {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(toBrightnessOverride(mScreenBrightness));
    }
    if (mButtonBrightness < 0 || mButtonBrightness > 1.0f) {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(toBrightnessOverride(mButtonBrightness));
    }
    mService.mPowerManagerInternal.setUserActivityTimeoutOverrideFromWindowManager(mUserActivityTimeout);
  }
  if (mService.mTurnOnScreen) {
    if (mService.mAllowTheaterModeWakeFromLayout || Settings.Global.getInt(mService.mContext.getContentResolver(),Settings.Global.THEATER_MODE_ON,0) == 0) {
      if (DEBUG_VISIBILITY || DEBUG_POWER) {
        Slog.v(TAG,""String_Node_Str"");
      }
      mService.mPowerManager.wakeUp(SystemClock.uptimeMillis(),""String_Node_Str"");
    }
    mService.mTurnOnScreen=false;
  }
  if (mUpdateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,""String_Node_Str"");
    if (mService.updateRotationUncheckedLocked(false)) {
      mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
    }
 else {
      mUpdateRotation=false;
    }
  }
  if (mService.mWaitingForDrawnCallback != null || (mOrientationChangeComplete && !defaultDisplay.layoutNeeded && !mUpdateRotation)) {
    mService.checkDrawnWindowsLocked();
  }
  final int N=mService.mPendingRemove.size();
  if (N > 0) {
    if (mService.mPendingRemoveTmp.length < N) {
      mService.mPendingRemoveTmp=new WindowState[N + 10];
    }
    mService.mPendingRemove.toArray(mService.mPendingRemoveTmp);
    mService.mPendingRemove.clear();
    DisplayContentList displayList=new DisplayContentList();
    for (i=0; i < N; i++) {
      WindowState w=mService.mPendingRemoveTmp[i];
      mService.removeWindowInnerLocked(w);
      final DisplayContent displayContent=w.getDisplayContent();
      if (displayContent != null && !displayList.contains(displayContent)) {
        displayList.add(displayContent);
      }
    }
    for (    DisplayContent displayContent : displayList) {
      mService.assignLayersLocked(displayContent.getWindowList());
      displayContent.layoutNeeded=true;
    }
  }
  for (int displayNdx=mService.mDisplayContents.size() - 1; displayNdx >= 0; --displayNdx) {
    mService.mDisplayContents.valueAt(displayNdx).checkForDeferredActions();
  }
  if (updateInputWindowsNeeded) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.setFocusTaskRegion();
  mService.enableScreenIfNeededLocked();
  mService.scheduleAnimationLocked();
  if (DEBUG_WINDOW_TRACE) {
    Slog.e(TAG,""String_Node_Str"" + mService.mAnimator.mAnimating);
  }
}","private void performSurfacePlacementInner(boolean recoveringMemory){
  if (DEBUG_WINDOW_TRACE) {
    Slog.v(TAG,""String_Node_Str"" + Debug.getCallers(3));
  }
  int i;
  boolean updateInputWindowsNeeded=false;
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    updateInputWindowsNeeded=mService.updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false);
  }
  final int numDisplays=mService.mDisplayContents.size();
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    for (i=displayContent.mExitingTokens.size() - 1; i >= 0; i--) {
      displayContent.mExitingTokens.get(i).hasVisible=false;
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (int tokenNdx=exitingAppTokens.size() - 1; tokenNdx >= 0; --tokenNdx) {
      exitingAppTokens.get(tokenNdx).hasVisible=false;
    }
  }
  mHoldScreen=null;
  mScreenBrightness=-1;
  mButtonBrightness=-1;
  mUserActivityTimeout=-1;
  mObscureApplicationContentOnSecondaryDisplays=false;
  mService.mTransactionSequence++;
  final DisplayContent defaultDisplay=mService.getDefaultDisplayContentLocked();
  final DisplayInfo defaultInfo=defaultDisplay.getDisplayInfo();
  final int defaultDw=defaultInfo.logicalWidth;
  final int defaultDh=defaultInfo.logicalHeight;
  if (SHOW_LIGHT_TRANSACTIONS)   Slog.i(TAG,""String_Node_Str"");
  SurfaceControl.openTransaction();
  try {
    applySurfaceChangesTransaction(recoveringMemory,numDisplays,defaultDw,defaultDh);
  }
 catch (  RuntimeException e) {
    Slog.wtf(TAG,""String_Node_Str"",e);
  }
 finally {
    SurfaceControl.closeTransaction();
    if (SHOW_LIGHT_TRANSACTIONS)     Slog.i(TAG,""String_Node_Str"");
  }
  final WindowList defaultWindows=defaultDisplay.getWindowList();
  if (mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=handleAppTransitionReadyLocked(defaultWindows);
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (!mService.mAnimator.mAppWindowAnimating && mService.mAppTransition.isRunning()) {
    defaultDisplay.pendingLayoutChanges|=mService.handleAnimatingStoppedAndTransitionLocked();
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mWallpaperForceHidingChanged && defaultDisplay.pendingLayoutChanges == 0 && !mService.mAppTransition.isReady()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  mWallpaperForceHidingChanged=false;
  if (mWallpaperMayChange) {
    if (DEBUG_WALLPAPER_LIGHT)     Slog.v(TAG,""String_Node_Str"");
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  if (mService.mFocusMayChange) {
    mService.mFocusMayChange=false;
    if (mService.updateFocusedWindowLocked(UPDATE_FOCUS_PLACING_SURFACES,false)) {
      updateInputWindowsNeeded=true;
      defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_ANIM;
    }
  }
  if (mService.needsLayout()) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
    if (DEBUG_LAYOUT_REPEATS)     debugLayoutRepeats(""String_Node_Str"",defaultDisplay.pendingLayoutChanges);
  }
  for (i=mService.mResizingWindows.size() - 1; i >= 0; i--) {
    WindowState win=mService.mResizingWindows.get(i);
    if (win.mAppFreezing) {
      continue;
    }
    if (win.mAppToken != null) {
      win.mAppToken.destroySavedSurfaces();
    }
    win.reportResized();
    mService.mResizingWindows.remove(i);
  }
  if (DEBUG_ORIENTATION && mService.mDisplayFrozen)   Slog.v(TAG,""String_Node_Str"" + mOrientationChangeComplete);
  if (mOrientationChangeComplete) {
    if (mService.mWindowsFreezingScreen != WINDOWS_FREEZING_SCREENS_NONE) {
      mService.mWindowsFreezingScreen=WINDOWS_FREEZING_SCREENS_NONE;
      mService.mLastFinishedFreezeSource=mLastWindowFreezeSource;
      mService.mH.removeMessages(WINDOW_FREEZE_TIMEOUT);
    }
    mService.stopFreezingDisplayLocked();
  }
  boolean wallpaperDestroyed=false;
  i=mService.mDestroySurface.size();
  if (i > 0) {
    do {
      i--;
      WindowState win=mService.mDestroySurface.get(i);
      win.mDestroying=false;
      if (mService.mInputMethodWindow == win) {
        mService.mInputMethodWindow=null;
      }
      if (mWallpaperControllerLocked.isWallpaperTarget(win)) {
        wallpaperDestroyed=true;
      }
      if (!win.shouldSaveSurface()) {
        win.mWinAnimator.destroySurfaceLocked();
      }
    }
 while (i > 0);
    mService.mDestroySurface.clear();
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    ArrayList<WindowToken> exitingTokens=displayContent.mExitingTokens;
    for (i=exitingTokens.size() - 1; i >= 0; i--) {
      WindowToken token=exitingTokens.get(i);
      if (!token.hasVisible) {
        exitingTokens.remove(i);
        if (token.windowType == TYPE_WALLPAPER) {
          mWallpaperControllerLocked.removeWallpaperToken(token);
        }
      }
    }
  }
  for (int stackNdx=mService.mStackIdToStack.size() - 1; stackNdx >= 0; --stackNdx) {
    final AppTokenList exitingAppTokens=mService.mStackIdToStack.valueAt(stackNdx).mExitingAppTokens;
    for (i=exitingAppTokens.size() - 1; i >= 0; i--) {
      AppWindowToken token=exitingAppTokens.get(i);
      if (!token.hasVisible && !mService.mClosingApps.contains(token) && (!token.mIsExiting || token.allAppWindows.isEmpty())) {
        token.mAppAnimator.clearAnimation();
        token.mAppAnimator.animating=false;
        if (DEBUG_ADD_REMOVE || DEBUG_TOKEN_MOVEMENT)         Slog.v(TAG,""String_Node_Str"" + token);
        token.removeAppFromTaskLocked();
      }
    }
  }
  if (wallpaperDestroyed) {
    defaultDisplay.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
    defaultDisplay.layoutNeeded=true;
  }
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    if (displayContent.pendingLayoutChanges != 0) {
      displayContent.layoutNeeded=true;
    }
  }
  mService.mInputMonitor.updateInputWindowsLw(true);
  mService.setHoldScreenLocked(mHoldScreen);
  if (!mService.mDisplayFrozen) {
    if (mScreenBrightness < 0 || mScreenBrightness > 1.0f) {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setScreenBrightnessOverrideFromWindowManager(toBrightnessOverride(mScreenBrightness));
    }
    if (mButtonBrightness < 0 || mButtonBrightness > 1.0f) {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(-1);
    }
 else {
      mService.mPowerManagerInternal.setButtonBrightnessOverrideFromWindowManager(toBrightnessOverride(mButtonBrightness));
    }
    mService.mPowerManagerInternal.setUserActivityTimeoutOverrideFromWindowManager(mUserActivityTimeout);
  }
  if (mService.mTurnOnScreen) {
    if (mService.mAllowTheaterModeWakeFromLayout || Settings.Global.getInt(mService.mContext.getContentResolver(),Settings.Global.THEATER_MODE_ON,0) == 0) {
      if (DEBUG_VISIBILITY || DEBUG_POWER) {
        Slog.v(TAG,""String_Node_Str"");
      }
      mService.mPowerManager.wakeUp(SystemClock.uptimeMillis(),""String_Node_Str"");
    }
    mService.mTurnOnScreen=false;
  }
  if (mUpdateRotation) {
    if (DEBUG_ORIENTATION)     Slog.d(TAG,""String_Node_Str"");
    if (mService.updateRotationUncheckedLocked(false)) {
      mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
    }
 else {
      mUpdateRotation=false;
    }
  }
  if (mService.mWaitingForDrawnCallback != null || (mOrientationChangeComplete && !defaultDisplay.layoutNeeded && !mUpdateRotation)) {
    mService.checkDrawnWindowsLocked();
  }
  final int N=mService.mPendingRemove.size();
  if (N > 0) {
    if (mService.mPendingRemoveTmp.length < N) {
      mService.mPendingRemoveTmp=new WindowState[N + 10];
    }
    mService.mPendingRemove.toArray(mService.mPendingRemoveTmp);
    mService.mPendingRemove.clear();
    DisplayContentList displayList=new DisplayContentList();
    for (i=0; i < N; i++) {
      WindowState w=mService.mPendingRemoveTmp[i];
      mService.removeWindowInnerLocked(w);
      final DisplayContent displayContent=w.getDisplayContent();
      if (displayContent != null && !displayList.contains(displayContent)) {
        displayList.add(displayContent);
      }
    }
    for (    DisplayContent displayContent : displayList) {
      mService.assignLayersLocked(displayContent.getWindowList());
      displayContent.layoutNeeded=true;
    }
  }
  for (int displayNdx=mService.mDisplayContents.size() - 1; displayNdx >= 0; --displayNdx) {
    mService.mDisplayContents.valueAt(displayNdx).checkForDeferredActions();
  }
  if (updateInputWindowsNeeded) {
    mService.mInputMonitor.updateInputWindowsLw(false);
  }
  mService.setFocusTaskRegion();
  mService.enableScreenIfNeededLocked();
  mService.scheduleAnimationLocked();
  if (DEBUG_WINDOW_TRACE)   Slog.e(TAG,""String_Node_Str"" + mService.mAnimator.isAnimating());
}",0.99805784473256
193249,"void invalidateInternal(int l,int t,int r,int b,boolean invalidateCache,boolean fullInvalidate){
  if (mGhostView != null) {
    mGhostView.invalidate(true);
    return;
  }
  if (skipInvalidate()) {
    return;
  }
  if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS) || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED || (fullInvalidate && isOpaque() != mLastIsOpaque)) {
    if (fullInvalidate) {
      mLastIsOpaque=isOpaque();
      mPrivateFlags&=~PFLAG_DRAWN;
    }
    mPrivateFlags|=PFLAG_DIRTY;
    resetDisplayList();
    if (invalidateCache) {
      mPrivateFlags|=PFLAG_INVALIDATED;
      mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
    }
    final AttachInfo ai=mAttachInfo;
    final ViewParent p=mParent;
    if (p != null && ai != null && l < r && t < b) {
      final Rect damage=ai.mTmpInvalRect;
      damage.set(l,t,r,b);
      p.invalidateChild(this,damage);
    }
    if (mBackground != null && mBackground.isProjected()) {
      final View receiver=getProjectionReceiver();
      if (receiver != null) {
        receiver.damageInParent();
      }
    }
    if (isHardwareAccelerated() && getZ() != 0) {
      damageShadowReceiver();
    }
  }
}","void invalidateInternal(int l,int t,int r,int b,boolean invalidateCache,boolean fullInvalidate){
  if (mGhostView != null) {
    mGhostView.invalidate(true);
    return;
  }
  if (skipInvalidate()) {
    return;
  }
  if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS) || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED || (fullInvalidate && isOpaque() != mLastIsOpaque)) {
    if (fullInvalidate) {
      mLastIsOpaque=isOpaque();
      mPrivateFlags&=~PFLAG_DRAWN;
    }
    mPrivateFlags|=PFLAG_DIRTY;
    if (invalidateCache) {
      mPrivateFlags|=PFLAG_INVALIDATED;
      mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
    }
    final AttachInfo ai=mAttachInfo;
    final ViewParent p=mParent;
    if (p != null && ai != null && l < r && t < b) {
      final Rect damage=ai.mTmpInvalRect;
      damage.set(l,t,r,b);
      p.invalidateChild(this,damage);
    }
    if (mBackground != null && mBackground.isProjected()) {
      final View receiver=getProjectionReceiver();
      if (receiver != null) {
        receiver.damageInParent();
      }
    }
    if (isHardwareAccelerated() && getZ() != 0) {
      damageShadowReceiver();
    }
  }
}",0.9907763259031516
193250,"void invalidateInternal(int l,int t,int r,int b,boolean invalidateCache,boolean fullInvalidate){
  if (mGhostView != null) {
    mGhostView.invalidate(true);
    return;
  }
  if (skipInvalidate()) {
    return;
  }
  if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS) || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED || (fullInvalidate && isOpaque() != mLastIsOpaque)) {
    if (fullInvalidate) {
      mLastIsOpaque=isOpaque();
      mPrivateFlags&=~PFLAG_DRAWN;
    }
    mPrivateFlags|=PFLAG_DIRTY;
    resetDisplayList();
    if (invalidateCache) {
      mPrivateFlags|=PFLAG_INVALIDATED;
      mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
    }
    final AttachInfo ai=mAttachInfo;
    final ViewParent p=mParent;
    if (p != null && ai != null && l < r && t < b) {
      final Rect damage=ai.mTmpInvalRect;
      damage.set(l,t,r,b);
      p.invalidateChild(this,damage);
    }
    if (mBackground != null && mBackground.isProjected()) {
      final View receiver=getProjectionReceiver();
      if (receiver != null) {
        receiver.damageInParent();
      }
    }
    if (isHardwareAccelerated() && getZ() != 0) {
      damageShadowReceiver();
    }
  }
}","void invalidateInternal(int l,int t,int r,int b,boolean invalidateCache,boolean fullInvalidate){
  if (mGhostView != null) {
    mGhostView.invalidate(true);
    return;
  }
  if (skipInvalidate()) {
    return;
  }
  if ((mPrivateFlags & (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS) || (invalidateCache && (mPrivateFlags & PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID) || (mPrivateFlags & PFLAG_INVALIDATED) != PFLAG_INVALIDATED || (fullInvalidate && isOpaque() != mLastIsOpaque)) {
    if (fullInvalidate) {
      mLastIsOpaque=isOpaque();
      mPrivateFlags&=~PFLAG_DRAWN;
    }
    mPrivateFlags|=PFLAG_DIRTY;
    if (invalidateCache) {
      mPrivateFlags|=PFLAG_INVALIDATED;
      mPrivateFlags&=~PFLAG_DRAWING_CACHE_VALID;
    }
    final AttachInfo ai=mAttachInfo;
    final ViewParent p=mParent;
    if (p != null && ai != null && l < r && t < b) {
      final Rect damage=ai.mTmpInvalRect;
      damage.set(l,t,r,b);
      p.invalidateChild(this,damage);
    }
    if (mBackground != null && mBackground.isProjected()) {
      final View receiver=getProjectionReceiver();
      if (receiver != null) {
        receiver.damageInParent();
      }
    }
    if (isHardwareAccelerated() && getZ() != 0) {
      damageShadowReceiver();
    }
  }
}",0.9907763259031516
193251,"/** 
 * Handle screen pinning request.
 */
public final void onBusEvent(final ScreenPinningRequestEvent event){
  int processUser=event.systemServicesProxy.getProcessUser();
  if (event.systemServicesProxy.isSystemUser(processUser)) {
    mImpl.onStartScreenPinning(event.applicationContext);
  }
 else {
    postToSystemUser(new Runnable(){
      @Override public void run(){
        try {
          mCallbacksToSystemUser.startScreenPinning();
        }
 catch (        RemoteException e) {
          Log.e(TAG,""String_Node_Str"",e);
        }
      }
    }
);
  }
}","/** 
 * Handle screen pinning request.
 */
public final void onBusEvent(final ScreenPinningRequestEvent event){
  int processUser=sSystemServicesProxy.getProcessUser();
  if (sSystemServicesProxy.isSystemUser(processUser)) {
    mImpl.onStartScreenPinning(event.applicationContext);
  }
 else {
    postToSystemUser(new Runnable(){
      @Override public void run(){
        try {
          mCallbacksToSystemUser.startScreenPinning();
        }
 catch (        RemoteException e) {
          Log.e(TAG,""String_Node_Str"",e);
        }
      }
    }
);
  }
}",0.9839857651245552
193252,"@Override public void onAllTaskViewsDismissed(){
  mFinishLaunchHomeRunnable.run();
}","/** 
 * RecentsView.RecentsViewCallbacks Implementation 
 */
@Override public void onAllTaskViewsDismissed(){
  mFinishLaunchHomeRunnable.run();
}",0.7359307359307359
193253,"/** 
 * Transitions to the next affiliated task.
 */
public void showRelativeAffiliatedTask(boolean showNextTask){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsTaskLoader loader=Recents.getTaskLoader();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  TaskStack focusedStack=plan.getTaskStack();
  if (focusedStack == null || focusedStack.getTaskCount() == 0)   return;
  ActivityManager.RunningTaskInfo runningTask=ssp.getTopMostTask();
  if (runningTask == null)   return;
  if (SystemServicesProxy.isHomeStack(runningTask.stackId))   return;
  ArrayList<Task> tasks=focusedStack.getTasks();
  Task toTask=null;
  ActivityOptions launchOpts=null;
  int taskCount=tasks.size();
  int numAffiliatedTasks=0;
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (task.key.id == runningTask.id) {
      TaskGrouping group=task.group;
      Task.TaskKey toTaskKey;
      if (showNextTask) {
        toTaskKey=group.getNextTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_next_affiliated_task_target,R.anim.recents_launch_next_affiliated_task_source);
      }
 else {
        toTaskKey=group.getPrevTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_target,R.anim.recents_launch_prev_affiliated_task_source);
      }
      if (toTaskKey != null) {
        toTask=focusedStack.findTaskWithId(toTaskKey.id);
      }
      numAffiliatedTasks=group.getTaskCount();
      break;
    }
  }
  if (toTask == null) {
    if (numAffiliatedTasks > 1) {
      if (showNextTask) {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_next_affiliated_task_bounce));
      }
 else {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_bounce));
      }
    }
    return;
  }
  MetricsLogger.count(mContext,""String_Node_Str"",1);
  if (toTask.isActive) {
    ssp.moveTaskToFront(toTask.key.id,launchOpts);
  }
 else {
    ssp.startActivityFromRecents(mContext,toTask.key.id,toTask.activityLabel,launchOpts);
  }
}","/** 
 * Transitions to the next affiliated task.
 */
public void showRelativeAffiliatedTask(boolean showNextTask){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsTaskLoader loader=Recents.getTaskLoader();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  TaskStack focusedStack=plan.getTaskStack();
  if (focusedStack == null || focusedStack.getTaskCount() == 0)   return;
  ActivityManager.RunningTaskInfo runningTask=ssp.getTopMostTask();
  if (runningTask == null)   return;
  if (SystemServicesProxy.isHomeStack(runningTask.stackId))   return;
  ArrayList<Task> tasks=focusedStack.getTasks();
  Task toTask=null;
  ActivityOptions launchOpts=null;
  int taskCount=tasks.size();
  int numAffiliatedTasks=0;
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (task.key.id == runningTask.id) {
      TaskGrouping group=task.group;
      Task.TaskKey toTaskKey;
      if (showNextTask) {
        toTaskKey=group.getNextTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_next_affiliated_task_target,R.anim.recents_launch_next_affiliated_task_source);
      }
 else {
        toTaskKey=group.getPrevTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_target,R.anim.recents_launch_prev_affiliated_task_source);
      }
      if (toTaskKey != null) {
        toTask=focusedStack.findTaskWithId(toTaskKey.id);
      }
      numAffiliatedTasks=group.getTaskCount();
      break;
    }
  }
  if (toTask == null) {
    if (numAffiliatedTasks > 1) {
      if (showNextTask) {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_next_affiliated_task_bounce));
      }
 else {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_bounce));
      }
    }
    return;
  }
  MetricsLogger.count(mContext,""String_Node_Str"",1);
  ssp.startActivityFromRecents(mContext,toTask.key.id,toTask.activityLabel,launchOpts);
}",0.9499329459097005
193254,"public ScreenPinningRequestEvent(Context context,SystemServicesProxy systemServicesProxy){
  this.applicationContext=context.getApplicationContext();
  this.systemServicesProxy=systemServicesProxy;
}","public ScreenPinningRequestEvent(Context context){
  this.applicationContext=context.getApplicationContext();
}",0.7161290322580646
193255,"private ForegroundThread(){
  super(""String_Node_Str"",android.os.Process.THREAD_PRIORITY_BACKGROUND);
}","private ForegroundThread(){
  super(""String_Node_Str"");
}",0.7125
193256,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Resources res=mContext.getResources();
  ArrayList<Task> freeformTasks=new ArrayList<>();
  ArrayList<Task> stackTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,ssp);
    String contentDescription=loader.getAndUpdateContentDescription(taskKey,activityLabel,ssp,res);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,ssp,res,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,contentDescription,activityIcon,activityColor,(i == (taskCount - 1)),config.lockToAppEnabled,icon,iconFilename,t.bounds);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,ssp,false);
    if (DEBUG) {
      Log.d(TAG,activityLabel + ""String_Node_Str"" + t.bounds);
    }
    if (task.isFreeformTask()) {
      freeformTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  ArrayList<Task> allTasks=new ArrayList<>();
  allTasks.addAll(stackTasks);
  allTasks.addAll(freeformTasks);
  mStack=new TaskStack();
  mStack.setTasks(allTasks);
  mStack.createAffiliatedGroupings(mContext);
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Resources res=mContext.getResources();
  ArrayList<Task> freeformTasks=new ArrayList<>();
  ArrayList<Task> stackTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,ssp);
    String contentDescription=loader.getAndUpdateContentDescription(taskKey,activityLabel,ssp,res);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,ssp,res,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,contentDescription,activityIcon,activityColor,(i == (taskCount - 1)),config.lockToAppEnabled,icon,iconFilename,t.bounds);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,ssp,false);
    if (DEBUG) {
      Log.d(TAG,activityLabel + ""String_Node_Str"" + t.bounds);
    }
    if (task.isFreeformTask()) {
      freeformTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  ArrayList<Task> allTasks=new ArrayList<>();
  allTasks.addAll(stackTasks);
  allTasks.addAll(freeformTasks);
  mStack=new TaskStack();
  mStack.setTasks(allTasks);
  mStack.createAffiliatedGroupings(mContext);
}",0.994367417677643
193257,"public Task(TaskKey key,boolean isActive,int taskAffiliation,int taskAffiliationColor,String activityTitle,String contentDescription,Drawable activityIcon,int colorPrimary,boolean lockToThisTask,boolean lockToTaskEnabled,Bitmap icon,String iconFilename,Rect bounds){
  boolean isInAffiliationGroup=(taskAffiliation != key.id);
  boolean hasAffiliationGroupColor=isInAffiliationGroup && (taskAffiliationColor != 0);
  this.key=key;
  this.taskAffiliation=taskAffiliation;
  this.taskAffiliationColor=taskAffiliationColor;
  this.activityLabel=activityTitle;
  this.contentDescription=contentDescription;
  this.activityIcon=activityIcon;
  this.colorPrimary=hasAffiliationGroupColor ? taskAffiliationColor : colorPrimary;
  this.useLightOnPrimaryColor=Utilities.computeContrastBetweenColors(this.colorPrimary,Color.WHITE) > 3f;
  this.isActive=isActive;
  this.lockToThisTask=lockToTaskEnabled && lockToThisTask;
  this.lockToTaskEnabled=lockToTaskEnabled;
  this.icon=icon;
  this.iconFilename=iconFilename;
  this.bounds=bounds;
}","public Task(TaskKey key,int taskAffiliation,int taskAffiliationColor,String activityTitle,String contentDescription,Drawable activityIcon,int colorPrimary,boolean lockToThisTask,boolean lockToTaskEnabled,Bitmap icon,String iconFilename,Rect bounds){
  boolean isInAffiliationGroup=(taskAffiliation != key.id);
  boolean hasAffiliationGroupColor=isInAffiliationGroup && (taskAffiliationColor != 0);
  this.key=key;
  this.taskAffiliation=taskAffiliation;
  this.taskAffiliationColor=taskAffiliationColor;
  this.activityLabel=activityTitle;
  this.contentDescription=contentDescription;
  this.activityIcon=activityIcon;
  this.colorPrimary=hasAffiliationGroupColor ? taskAffiliationColor : colorPrimary;
  this.useLightOnPrimaryColor=Utilities.computeContrastBetweenColors(this.colorPrimary,Color.WHITE) > 3f;
  this.lockToThisTask=lockToTaskEnabled && lockToThisTask;
  this.lockToTaskEnabled=lockToTaskEnabled;
  this.icon=icon;
  this.iconFilename=iconFilename;
  this.bounds=bounds;
}",0.9787023278850916
193258,"/** 
 * Copies the other task. 
 */
public void copyFrom(Task o){
  this.key=o.key;
  this.taskAffiliation=o.taskAffiliation;
  this.taskAffiliationColor=o.taskAffiliationColor;
  this.activityLabel=o.activityLabel;
  this.contentDescription=o.contentDescription;
  this.activityIcon=o.activityIcon;
  this.colorPrimary=o.colorPrimary;
  this.useLightOnPrimaryColor=o.useLightOnPrimaryColor;
  this.isActive=o.isActive;
  this.lockToThisTask=o.lockToThisTask;
  this.lockToTaskEnabled=o.lockToTaskEnabled;
}","/** 
 * Copies the other task. 
 */
public void copyFrom(Task o){
  this.key=o.key;
  this.taskAffiliation=o.taskAffiliation;
  this.taskAffiliationColor=o.taskAffiliationColor;
  this.activityLabel=o.activityLabel;
  this.contentDescription=o.contentDescription;
  this.activityIcon=o.activityIcon;
  this.colorPrimary=o.colorPrimary;
  this.useLightOnPrimaryColor=o.useLightOnPrimaryColor;
  this.lockToThisTask=o.lockToThisTask;
  this.lockToTaskEnabled=o.lockToTaskEnabled;
}",0.9716024340770792
193259,"/** 
 * Handle screen pinning request.
 */
public final void onBusEvent(final ScreenPinningRequestEvent event){
  int processUser=event.systemServicesProxy.getProcessUser();
  if (event.systemServicesProxy.isSystemUser(processUser)) {
    mImpl.onStartScreenPinning(event.applicationContext);
  }
 else {
    postToSystemUser(new Runnable(){
      @Override public void run(){
        try {
          mCallbacksToSystemUser.startScreenPinning();
        }
 catch (        RemoteException e) {
          Log.e(TAG,""String_Node_Str"",e);
        }
      }
    }
);
  }
}","/** 
 * Handle screen pinning request.
 */
public final void onBusEvent(final ScreenPinningRequestEvent event){
  int processUser=sSystemServicesProxy.getProcessUser();
  if (sSystemServicesProxy.isSystemUser(processUser)) {
    mImpl.onStartScreenPinning(event.applicationContext);
  }
 else {
    postToSystemUser(new Runnable(){
      @Override public void run(){
        try {
          mCallbacksToSystemUser.startScreenPinning();
        }
 catch (        RemoteException e) {
          Log.e(TAG,""String_Node_Str"",e);
        }
      }
    }
);
  }
}",0.9839857651245552
193260,"@Override public void onAllTaskViewsDismissed(){
  mFinishLaunchHomeRunnable.run();
}","/** 
 * RecentsView.RecentsViewCallbacks Implementation 
 */
@Override public void onAllTaskViewsDismissed(){
  mFinishLaunchHomeRunnable.run();
}",0.7359307359307359
193261,"/** 
 * Transitions to the next affiliated task.
 */
public void showRelativeAffiliatedTask(boolean showNextTask){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsTaskLoader loader=Recents.getTaskLoader();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  TaskStack focusedStack=plan.getTaskStack();
  if (focusedStack == null || focusedStack.getTaskCount() == 0)   return;
  ActivityManager.RunningTaskInfo runningTask=ssp.getTopMostTask();
  if (runningTask == null)   return;
  if (SystemServicesProxy.isHomeStack(runningTask.stackId))   return;
  ArrayList<Task> tasks=focusedStack.getTasks();
  Task toTask=null;
  ActivityOptions launchOpts=null;
  int taskCount=tasks.size();
  int numAffiliatedTasks=0;
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (task.key.id == runningTask.id) {
      TaskGrouping group=task.group;
      Task.TaskKey toTaskKey;
      if (showNextTask) {
        toTaskKey=group.getNextTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_next_affiliated_task_target,R.anim.recents_launch_next_affiliated_task_source);
      }
 else {
        toTaskKey=group.getPrevTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_target,R.anim.recents_launch_prev_affiliated_task_source);
      }
      if (toTaskKey != null) {
        toTask=focusedStack.findTaskWithId(toTaskKey.id);
      }
      numAffiliatedTasks=group.getTaskCount();
      break;
    }
  }
  if (toTask == null) {
    if (numAffiliatedTasks > 1) {
      if (showNextTask) {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_next_affiliated_task_bounce));
      }
 else {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_bounce));
      }
    }
    return;
  }
  MetricsLogger.count(mContext,""String_Node_Str"",1);
  if (toTask.isActive) {
    ssp.moveTaskToFront(toTask.key.id,launchOpts);
  }
 else {
    ssp.startActivityFromRecents(mContext,toTask.key.id,toTask.activityLabel,launchOpts);
  }
}","/** 
 * Transitions to the next affiliated task.
 */
public void showRelativeAffiliatedTask(boolean showNextTask){
  SystemServicesProxy ssp=Recents.getSystemServices();
  RecentsTaskLoader loader=Recents.getTaskLoader();
  RecentsTaskLoadPlan plan=loader.createLoadPlan(mContext);
  loader.preloadTasks(plan,true);
  TaskStack focusedStack=plan.getTaskStack();
  if (focusedStack == null || focusedStack.getTaskCount() == 0)   return;
  ActivityManager.RunningTaskInfo runningTask=ssp.getTopMostTask();
  if (runningTask == null)   return;
  if (SystemServicesProxy.isHomeStack(runningTask.stackId))   return;
  ArrayList<Task> tasks=focusedStack.getTasks();
  Task toTask=null;
  ActivityOptions launchOpts=null;
  int taskCount=tasks.size();
  int numAffiliatedTasks=0;
  for (int i=0; i < taskCount; i++) {
    Task task=tasks.get(i);
    if (task.key.id == runningTask.id) {
      TaskGrouping group=task.group;
      Task.TaskKey toTaskKey;
      if (showNextTask) {
        toTaskKey=group.getNextTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_next_affiliated_task_target,R.anim.recents_launch_next_affiliated_task_source);
      }
 else {
        toTaskKey=group.getPrevTaskInGroup(task);
        launchOpts=ActivityOptions.makeCustomAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_target,R.anim.recents_launch_prev_affiliated_task_source);
      }
      if (toTaskKey != null) {
        toTask=focusedStack.findTaskWithId(toTaskKey.id);
      }
      numAffiliatedTasks=group.getTaskCount();
      break;
    }
  }
  if (toTask == null) {
    if (numAffiliatedTasks > 1) {
      if (showNextTask) {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_next_affiliated_task_bounce));
      }
 else {
        ssp.startInPlaceAnimationOnFrontMostApplication(ActivityOptions.makeCustomInPlaceAnimation(mContext,R.anim.recents_launch_prev_affiliated_task_bounce));
      }
    }
    return;
  }
  MetricsLogger.count(mContext,""String_Node_Str"",1);
  ssp.startActivityFromRecents(mContext,toTask.key.id,toTask.activityLabel,launchOpts);
}",0.9499329459097005
193262,"public ScreenPinningRequestEvent(Context context,SystemServicesProxy systemServicesProxy){
  this.applicationContext=context.getApplicationContext();
  this.systemServicesProxy=systemServicesProxy;
}","public ScreenPinningRequestEvent(Context context){
  this.applicationContext=context.getApplicationContext();
}",0.7161290322580646
193263,"private ForegroundThread(){
  super(""String_Node_Str"",android.os.Process.THREAD_PRIORITY_BACKGROUND);
}","private ForegroundThread(){
  super(""String_Node_Str"");
}",0.7125
193264,"/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Resources res=mContext.getResources();
  ArrayList<Task> freeformTasks=new ArrayList<>();
  ArrayList<Task> stackTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,ssp);
    String contentDescription=loader.getAndUpdateContentDescription(taskKey,activityLabel,ssp,res);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,ssp,res,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,(t.id != INVALID_TASK_ID),t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,contentDescription,activityIcon,activityColor,(i == (taskCount - 1)),config.lockToAppEnabled,icon,iconFilename,t.bounds);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,ssp,false);
    if (DEBUG) {
      Log.d(TAG,activityLabel + ""String_Node_Str"" + t.bounds);
    }
    if (task.isFreeformTask()) {
      freeformTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  ArrayList<Task> allTasks=new ArrayList<>();
  allTasks.addAll(stackTasks);
  allTasks.addAll(freeformTasks);
  mStack=new TaskStack();
  mStack.setTasks(allTasks);
  mStack.createAffiliatedGroupings(mContext);
}","/** 
 * Preloads the list of recent tasks from the system.  After this call, the TaskStack will have a list of all the recent tasks with their metadata, not including icons or thumbnails which were not cached and have to be loaded. The tasks will be ordered by: - least-recent to most-recent stack tasks - least-recent to most-recent freeform tasks
 */
public synchronized void preloadPlan(RecentsTaskLoader loader,boolean isTopTaskHome){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"");
  RecentsConfiguration config=Recents.getConfiguration();
  SystemServicesProxy ssp=Recents.getSystemServices();
  Resources res=mContext.getResources();
  ArrayList<Task> freeformTasks=new ArrayList<>();
  ArrayList<Task> stackTasks=new ArrayList<>();
  if (mRawTasks == null) {
    preloadRawTasks(isTopTaskHome);
  }
  int taskCount=mRawTasks.size();
  for (int i=0; i < taskCount; i++) {
    ActivityManager.RecentTaskInfo t=mRawTasks.get(i);
    Task.TaskKey taskKey=new Task.TaskKey(t.persistentId,t.stackId,t.baseIntent,t.userId,t.firstActiveTime,t.lastActiveTime);
    String activityLabel=loader.getAndUpdateActivityLabel(taskKey,t.taskDescription,ssp);
    String contentDescription=loader.getAndUpdateContentDescription(taskKey,activityLabel,ssp,res);
    Drawable activityIcon=loader.getAndUpdateActivityIcon(taskKey,t.taskDescription,ssp,res,false);
    int activityColor=loader.getActivityPrimaryColor(t.taskDescription);
    Bitmap icon=t.taskDescription != null ? t.taskDescription.getInMemoryIcon() : null;
    String iconFilename=t.taskDescription != null ? t.taskDescription.getIconFilename() : null;
    Task task=new Task(taskKey,t.affiliatedTaskId,t.affiliatedTaskColor,activityLabel,contentDescription,activityIcon,activityColor,(i == (taskCount - 1)),config.lockToAppEnabled,icon,iconFilename,t.bounds);
    task.thumbnail=loader.getAndUpdateThumbnail(taskKey,ssp,false);
    if (DEBUG) {
      Log.d(TAG,activityLabel + ""String_Node_Str"" + t.bounds);
    }
    if (task.isFreeformTask()) {
      freeformTasks.add(task);
    }
 else {
      stackTasks.add(task);
    }
  }
  ArrayList<Task> allTasks=new ArrayList<>();
  allTasks.addAll(stackTasks);
  allTasks.addAll(freeformTasks);
  mStack=new TaskStack();
  mStack.setTasks(allTasks);
  mStack.createAffiliatedGroupings(mContext);
}",0.994367417677643
193265,"public Task(TaskKey key,boolean isActive,int taskAffiliation,int taskAffiliationColor,String activityTitle,String contentDescription,Drawable activityIcon,int colorPrimary,boolean lockToThisTask,boolean lockToTaskEnabled,Bitmap icon,String iconFilename,Rect bounds){
  boolean isInAffiliationGroup=(taskAffiliation != key.id);
  boolean hasAffiliationGroupColor=isInAffiliationGroup && (taskAffiliationColor != 0);
  this.key=key;
  this.taskAffiliation=taskAffiliation;
  this.taskAffiliationColor=taskAffiliationColor;
  this.activityLabel=activityTitle;
  this.contentDescription=contentDescription;
  this.activityIcon=activityIcon;
  this.colorPrimary=hasAffiliationGroupColor ? taskAffiliationColor : colorPrimary;
  this.useLightOnPrimaryColor=Utilities.computeContrastBetweenColors(this.colorPrimary,Color.WHITE) > 3f;
  this.isActive=isActive;
  this.lockToThisTask=lockToTaskEnabled && lockToThisTask;
  this.lockToTaskEnabled=lockToTaskEnabled;
  this.icon=icon;
  this.iconFilename=iconFilename;
  this.bounds=bounds;
}","public Task(TaskKey key,int taskAffiliation,int taskAffiliationColor,String activityTitle,String contentDescription,Drawable activityIcon,int colorPrimary,boolean lockToThisTask,boolean lockToTaskEnabled,Bitmap icon,String iconFilename,Rect bounds){
  boolean isInAffiliationGroup=(taskAffiliation != key.id);
  boolean hasAffiliationGroupColor=isInAffiliationGroup && (taskAffiliationColor != 0);
  this.key=key;
  this.taskAffiliation=taskAffiliation;
  this.taskAffiliationColor=taskAffiliationColor;
  this.activityLabel=activityTitle;
  this.contentDescription=contentDescription;
  this.activityIcon=activityIcon;
  this.colorPrimary=hasAffiliationGroupColor ? taskAffiliationColor : colorPrimary;
  this.useLightOnPrimaryColor=Utilities.computeContrastBetweenColors(this.colorPrimary,Color.WHITE) > 3f;
  this.lockToThisTask=lockToTaskEnabled && lockToThisTask;
  this.lockToTaskEnabled=lockToTaskEnabled;
  this.icon=icon;
  this.iconFilename=iconFilename;
  this.bounds=bounds;
}",0.9787023278850916
193266,"/** 
 * Copies the other task. 
 */
public void copyFrom(Task o){
  this.key=o.key;
  this.taskAffiliation=o.taskAffiliation;
  this.taskAffiliationColor=o.taskAffiliationColor;
  this.activityLabel=o.activityLabel;
  this.contentDescription=o.contentDescription;
  this.activityIcon=o.activityIcon;
  this.colorPrimary=o.colorPrimary;
  this.useLightOnPrimaryColor=o.useLightOnPrimaryColor;
  this.isActive=o.isActive;
  this.lockToThisTask=o.lockToThisTask;
  this.lockToTaskEnabled=o.lockToTaskEnabled;
}","/** 
 * Copies the other task. 
 */
public void copyFrom(Task o){
  this.key=o.key;
  this.taskAffiliation=o.taskAffiliation;
  this.taskAffiliationColor=o.taskAffiliationColor;
  this.activityLabel=o.activityLabel;
  this.contentDescription=o.contentDescription;
  this.activityIcon=o.activityIcon;
  this.colorPrimary=o.colorPrimary;
  this.useLightOnPrimaryColor=o.useLightOnPrimaryColor;
  this.lockToThisTask=o.lockToThisTask;
  this.lockToTaskEnabled=o.lockToTaskEnabled;
}",0.9716024340770792
193267,"/** 
 * Launches the focused task from the first stack if possible 
 */
public boolean launchFocusedTask(){
  if (mTaskStackView != null) {
    TaskStack stack=mTaskStackView.getStack();
    List<TaskView> taskViews=mTaskStackView.getTaskViews();
    int taskViewCount=taskViews.size();
    for (int j=0; j < taskViewCount; j++) {
      TaskView tv=taskViews.get(j);
      Task task=tv.getTask();
      if (tv.isFocusedTask()) {
        onTaskViewClicked(mTaskStackView,tv,stack,task,false,false,null,INVALID_STACK_ID);
        return true;
      }
    }
  }
  return false;
}","/** 
 * Launches the focused task from the first stack if possible 
 */
public boolean launchFocusedTask(){
  if (mTaskStackView != null) {
    TaskStack stack=mTaskStackView.getStack();
    Task task=mTaskStackView.getFocusedTask();
    if (task != null) {
      TaskView taskView=mTaskStackView.getChildViewForTask(task);
      onTaskViewClicked(mTaskStackView,taskView,stack,task,false,false,null,INVALID_STACK_ID);
      return true;
    }
  }
  return false;
}",0.5513928914505284
193268,"/** 
 * Synchronizes the views with the model 
 */
boolean synchronizeStackViewsWithModel(){
  if (mStackViewsDirty) {
    ArrayList<Task> tasks=mStack.getTasks();
    float stackScroll=mStackScroller.getStackScroll();
    int[] visibleStackRange=mTmpVisibleRange;
    boolean isValidVisibleStackRange=updateStackTransforms(mCurrentTaskTransforms,tasks,stackScroll,visibleStackRange,false);
    boolean hasStackBackTransform=false;
    boolean hasStackFrontTransform=false;
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + visibleStackRange[0] + ""String_Node_Str""+ visibleStackRange[1]);
    }
    mTmpTaskViewMap.clear();
    List<TaskView> taskViews=getTaskViews();
    boolean wasLastFocusedTaskAnimated=false;
    int lastFocusedTaskIndex=-1;
    int taskViewCount=taskViews.size();
    for (int i=taskViewCount - 1; i >= 0; i--) {
      TaskView tv=taskViews.get(i);
      Task task=tv.getTask();
      int taskIndex=mStack.indexOfTask(task);
      if (task.isFreeformTask() || visibleStackRange[1] <= taskIndex && taskIndex <= visibleStackRange[0]) {
        mTmpTaskViewMap.put(task,tv);
      }
 else {
        if (tv.isFocusedTask()) {
          wasLastFocusedTaskAnimated=tv.isFocusAnimated();
          lastFocusedTaskIndex=taskIndex;
          resetFocusedTask();
        }
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"" + task.key);
        }
        mViewPool.returnViewToPool(tv);
      }
    }
    int firstVisStackIndex=isValidVisibleStackRange ? visibleStackRange[0] : 0;
    for (int i=mStack.getTaskCount() - 1; i >= firstVisStackIndex; i--) {
      Task task=tasks.get(i);
      if (!task.isFreeformTask()) {
        continue;
      }
      TaskViewTransform transform=mLayoutAlgorithm.getStackTransform(task,stackScroll,mCurrentTaskTransforms.get(i),null);
      TaskView tv=mTmpTaskViewMap.get(task);
      if (tv == null) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"" + task.key);
        }
        tv=mViewPool.pickUpViewFromPool(task,task);
        if (mLayersDisabled) {
          tv.disableLayersForOneFrame();
        }
      }
      tv.updateViewPropertiesToTaskTransform(transform,mStackViewsAnimationDuration,mRequestUpdateClippingListener);
      detachViewFromParent(tv);
      int insertIndex=-1;
      int taskIndex=mStack.indexOfTask(task);
      taskViews=getTaskViews();
      taskViewCount=taskViews.size();
      for (int j=0; j < taskViewCount; j++) {
        Task tvTask=taskViews.get(j).getTask();
        if (taskIndex < mStack.indexOfTask(tvTask)) {
          insertIndex=j;
          break;
        }
      }
      attachViewToParent(tv,insertIndex,tv.getLayoutParams());
      updateTaskViewsList();
    }
    for (int i=visibleStackRange[0]; isValidVisibleStackRange && i >= visibleStackRange[1]; i--) {
      Task task=tasks.get(i);
      TaskViewTransform transform=mCurrentTaskTransforms.get(i);
      TaskView tv=mTmpTaskViewMap.get(task);
      if (tv == null) {
        tv=mViewPool.pickUpViewFromPool(task,task);
        if (mLayersDisabled) {
          tv.disableLayersForOneFrame();
        }
        if (mStackViewsAnimationDuration > 0) {
          if (Float.compare(transform.p,0f) <= 0) {
            if (!hasStackBackTransform) {
              hasStackBackTransform=true;
              mLayoutAlgorithm.getStackTransform(0f,0f,mTmpStackBackTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackBackTransform,0);
          }
 else {
            if (!hasStackFrontTransform) {
              hasStackFrontTransform=true;
              mLayoutAlgorithm.getStackTransform(1f,0f,mTmpStackFrontTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackFrontTransform,0);
          }
        }
      }
      tv.updateViewPropertiesToTaskTransform(transform,mStackViewsAnimationDuration,mRequestUpdateClippingListener);
    }
    if (lastFocusedTaskIndex != -1) {
      if (lastFocusedTaskIndex < visibleStackRange[1]) {
        setFocusedTask(visibleStackRange[1],false,wasLastFocusedTaskAnimated);
      }
 else {
        setFocusedTask(visibleStackRange[0],false,wasLastFocusedTaskAnimated);
      }
    }
    mStackViewsAnimationDuration=0;
    mStackViewsDirty=false;
    mStackViewsClipDirty=true;
    return true;
  }
  return false;
}","/** 
 * Synchronizes the views with the model 
 */
boolean synchronizeStackViewsWithModel(){
  if (mStackViewsDirty) {
    ArrayList<Task> tasks=mStack.getTasks();
    float stackScroll=mStackScroller.getStackScroll();
    int[] visibleStackRange=mTmpVisibleRange;
    boolean isValidVisibleStackRange=updateStackTransforms(mCurrentTaskTransforms,tasks,stackScroll,visibleStackRange,false);
    boolean hasStackBackTransform=false;
    boolean hasStackFrontTransform=false;
    if (DEBUG) {
      Log.d(TAG,""String_Node_Str"" + visibleStackRange[0] + ""String_Node_Str""+ visibleStackRange[1]);
    }
    mTmpTaskViewMap.clear();
    List<TaskView> taskViews=getTaskViews();
    boolean wasLastFocusedTaskAnimated=false;
    int lastFocusedTaskIndex=-1;
    int taskViewCount=taskViews.size();
    for (int i=taskViewCount - 1; i >= 0; i--) {
      TaskView tv=taskViews.get(i);
      Task task=tv.getTask();
      int taskIndex=mStack.indexOfTask(task);
      if (task.isFreeformTask() || visibleStackRange[1] <= taskIndex && taskIndex <= visibleStackRange[0]) {
        mTmpTaskViewMap.put(task,tv);
      }
 else {
        if (mTouchExplorationEnabled && tv.isFocusedTask()) {
          wasLastFocusedTaskAnimated=tv.isFocusAnimated();
          lastFocusedTaskIndex=taskIndex;
          resetFocusedTask();
        }
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"" + task.key);
        }
        mViewPool.returnViewToPool(tv);
      }
    }
    int firstVisStackIndex=isValidVisibleStackRange ? visibleStackRange[0] : 0;
    for (int i=mStack.getTaskCount() - 1; i >= firstVisStackIndex; i--) {
      Task task=tasks.get(i);
      if (!task.isFreeformTask()) {
        continue;
      }
      TaskViewTransform transform=mLayoutAlgorithm.getStackTransform(task,stackScroll,mCurrentTaskTransforms.get(i),null);
      TaskView tv=mTmpTaskViewMap.get(task);
      if (tv == null) {
        if (DEBUG) {
          Log.d(TAG,""String_Node_Str"" + task.key);
        }
        tv=mViewPool.pickUpViewFromPool(task,task);
        if (mLayersDisabled) {
          tv.disableLayersForOneFrame();
        }
      }
      tv.updateViewPropertiesToTaskTransform(transform,mStackViewsAnimationDuration,mRequestUpdateClippingListener);
      detachViewFromParent(tv);
      int insertIndex=-1;
      int taskIndex=mStack.indexOfTask(task);
      taskViews=getTaskViews();
      taskViewCount=taskViews.size();
      for (int j=0; j < taskViewCount; j++) {
        Task tvTask=taskViews.get(j).getTask();
        if (taskIndex < mStack.indexOfTask(tvTask)) {
          insertIndex=j;
          break;
        }
      }
      attachViewToParent(tv,insertIndex,tv.getLayoutParams());
      updateTaskViewsList();
    }
    for (int i=visibleStackRange[0]; isValidVisibleStackRange && i >= visibleStackRange[1]; i--) {
      Task task=tasks.get(i);
      TaskViewTransform transform=mCurrentTaskTransforms.get(i);
      TaskView tv=mTmpTaskViewMap.get(task);
      if (tv == null) {
        tv=mViewPool.pickUpViewFromPool(task,task);
        if (mLayersDisabled) {
          tv.disableLayersForOneFrame();
        }
        if (mStackViewsAnimationDuration > 0) {
          if (Float.compare(transform.p,0f) <= 0) {
            if (!hasStackBackTransform) {
              hasStackBackTransform=true;
              mLayoutAlgorithm.getStackTransform(0f,0f,mTmpStackBackTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackBackTransform,0);
          }
 else {
            if (!hasStackFrontTransform) {
              hasStackFrontTransform=true;
              mLayoutAlgorithm.getStackTransform(1f,0f,mTmpStackFrontTransform,null);
            }
            tv.updateViewPropertiesToTaskTransform(mTmpStackFrontTransform,0);
          }
        }
      }
      tv.updateViewPropertiesToTaskTransform(transform,mStackViewsAnimationDuration,mRequestUpdateClippingListener);
    }
    if (lastFocusedTaskIndex != -1) {
      if (lastFocusedTaskIndex < visibleStackRange[1]) {
        setFocusedTask(visibleStackRange[1],false,wasLastFocusedTaskAnimated);
      }
 else {
        setFocusedTask(visibleStackRange[0],false,wasLastFocusedTaskAnimated);
      }
    }
    mStackViewsAnimationDuration=0;
    mStackViewsDirty=false;
    mStackViewsClipDirty=true;
    return true;
  }
  return false;
}",0.9967524936209696
193269,"@Override protected void onAttachedToWindow(){
  EventBus.getDefault().register(this,RecentsActivity.EVENT_BUS_PRIORITY + 1);
  super.onAttachedToWindow();
}","@Override protected void onAttachedToWindow(){
  SystemServicesProxy ssp=Recents.getSystemServices();
  mTouchExplorationEnabled=ssp.isTouchExplorationEnabled();
  EventBus.getDefault().register(this,RecentsActivity.EVENT_BUS_PRIORITY + 1);
  super.onAttachedToWindow();
}",0.7319347319347319
193270,"@Override public Rect getTaskBounds(int taskId){
  enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,""String_Node_Str"");
  long ident=Binder.clearCallingIdentity();
  Rect rect=new Rect();
  try {
synchronized (this) {
      TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
      if (task == null) {
        Slog.w(TAG,""String_Node_Str"" + taskId + ""String_Node_Str"");
        return rect;
      }
      mWindowManager.getTaskBounds(task.taskId,rect);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return rect;
}","@Override public Rect getTaskBounds(int taskId){
  enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,""String_Node_Str"");
  long ident=Binder.clearCallingIdentity();
  Rect rect=new Rect();
  try {
synchronized (this) {
      final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId,!RESTORE_FROM_RECENTS,INVALID_STACK_ID);
      if (task == null) {
        Slog.w(TAG,""String_Node_Str"" + taskId + ""String_Node_Str"");
        return rect;
      }
      if (task.stack != null) {
        mWindowManager.getTaskBounds(task.taskId,rect);
      }
 else {
        if (task.mBounds != null) {
          rect.set(task.mBounds);
        }
 else         if (task.mLastNonFullscreenBounds != null) {
          rect.set(task.mLastNonFullscreenBounds);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return rect;
}",0.7895100069013112
193271,"final int startActivityFromRecentsInner(int taskId,int launchStackId,Bundle bOptions){
  final TaskRecord task;
  final int callingUid;
  final String callingPackage;
  final Intent intent;
  final int userId;
synchronized (this) {
    if (launchStackId == HOME_STACK_ID) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    task=mStackSupervisor.anyTaskForIdLocked(taskId,RESTORE_FROM_RECENTS,launchStackId);
    if (task == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    if (launchStackId != INVALID_STACK_ID && task.stack.mStackId != launchStackId) {
      if (launchStackId == DOCKED_STACK_ID && bOptions != null) {
        ActivityOptions activityOptions=new ActivityOptions(bOptions);
        mWindowManager.setDockedStackCreateMode(activityOptions.getDockCreateMode());
      }
      mStackSupervisor.moveTaskToStackLocked(taskId,launchStackId,ON_TOP,FORCE_FOCUS,""String_Node_Str"");
    }
    if (task.getRootActivity() != null) {
      moveTaskToFrontLocked(task.taskId,0,bOptions);
      return ActivityManager.START_TASK_TO_FRONT;
    }
    callingUid=task.mCallingUid;
    callingPackage=task.mCallingPackage;
    intent=task.intent;
    intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    userId=task.userId;
  }
  return startActivityInPackage(callingUid,callingPackage,intent,null,null,null,0,0,bOptions,userId,null,task);
}","final int startActivityFromRecentsInner(int taskId,int launchStackId,Bundle bOptions){
  final TaskRecord task;
  final int callingUid;
  final String callingPackage;
  final Intent intent;
  final int userId;
synchronized (this) {
    if (launchStackId == HOME_STACK_ID) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    task=mStackSupervisor.anyTaskForIdLocked(taskId,RESTORE_FROM_RECENTS,launchStackId);
    if (task == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    if (launchStackId != INVALID_STACK_ID) {
      if (launchStackId == DOCKED_STACK_ID && bOptions != null) {
        ActivityOptions activityOptions=new ActivityOptions(bOptions);
        mWindowManager.setDockedStackCreateMode(activityOptions.getDockCreateMode());
      }
      if (task.stack.mStackId != launchStackId) {
        mStackSupervisor.moveTaskToStackLocked(taskId,launchStackId,ON_TOP,FORCE_FOCUS,""String_Node_Str"");
      }
    }
    if (task.getRootActivity() != null) {
      moveTaskToFrontLocked(task.taskId,0,bOptions);
      return ActivityManager.START_TASK_TO_FRONT;
    }
    callingUid=task.mCallingUid;
    callingPackage=task.mCallingPackage;
    intent=task.intent;
    intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    userId=task.userId;
  }
  return startActivityInPackage(callingUid,callingPackage,intent,null,null,null,0,0,bOptions,userId,null,task);
}",0.9660095173351462
193272,"/** 
 * Restores a recent task to a stack
 * @param task The recent task to be restored.
 * @param stackId The stack to restore the task to (default launch stack will be usedif stackId is  {@link android.app.ActivityManager.StackId#INVALID_STACK_ID}).
 * @return true if the task has been restored successfully.
 */
private boolean restoreRecentTaskLocked(TaskRecord task,int stackId){
  if (stackId == INVALID_STACK_ID) {
    stackId=task.getLaunchStackId();
  }
  if (task.stack != null) {
    if (task.stack.mStackId == stackId) {
      return true;
    }
    task.stack.removeTask(task,""String_Node_Str"",MOVING);
  }
  ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,!ON_TOP);
  if (stack == null) {
    if (DEBUG_RECENTS)     Slog.v(TAG_RECENTS,""String_Node_Str"" + task);
    return false;
  }
  stack.addTask(task,false,false);
  if (DEBUG_RECENTS)   Slog.v(TAG_RECENTS,""String_Node_Str"" + task + ""String_Node_Str""+ stack);
  final ArrayList<ActivityRecord> activities=task.mActivities;
  for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
    stack.addConfigOverride(activities.get(activityNdx),task);
  }
  return true;
}","/** 
 * Restores a recent task to a stack
 * @param task The recent task to be restored.
 * @param stackId The stack to restore the task to (default launch stack will be usedif stackId is  {@link android.app.ActivityManager.StackId#INVALID_STACK_ID}).
 * @return true if the task has been restored successfully.
 */
private boolean restoreRecentTaskLocked(TaskRecord task,int stackId){
  if (stackId == INVALID_STACK_ID) {
    stackId=task.getLaunchStackId();
  }
  if (task.stack != null) {
    if (task.stack.mStackId == stackId) {
      return true;
    }
    task.stack.removeTask(task,""String_Node_Str"",MOVING);
  }
  final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,!ON_TOP);
  if (stack == null) {
    if (DEBUG_RECENTS)     Slog.v(TAG_RECENTS,""String_Node_Str"" + task);
    return false;
  }
  stack.addTask(task,false,false);
  if (DEBUG_RECENTS)   Slog.v(TAG_RECENTS,""String_Node_Str"" + task + ""String_Node_Str""+ stack);
  final ArrayList<ActivityRecord> activities=task.mActivities;
  for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
    stack.addConfigOverride(activities.get(activityNdx),task);
  }
  return true;
}",0.997427101200686
193273,"void moveTaskToStackLocked(int taskId,int stackId,boolean toTop,boolean forceFocus,String reason){
  final TaskRecord task=anyTaskForIdLocked(taskId);
  if (task == null) {
    Slog.w(TAG,""String_Node_Str"" + taskId);
    return;
  }
  if (StackId.preserveWindowOnTaskMove(stackId)) {
    ActivityRecord r=task.getTopActivity();
    mWindowManager.setReplacingWindow(r.appToken,true);
  }
  final ActivityStack stack=moveTaskToStackUncheckedLocked(task,stackId,toTop,forceFocus,""String_Node_Str"" + reason);
  if (stackId == FULLSCREEN_WORKSPACE_STACK_ID && task.mBounds != null) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == FREEFORM_WORKSPACE_STACK_ID && task.mBounds == null && task.mLastNonFullscreenBounds != null) {
    resizeTaskLocked(task,task.mLastNonFullscreenBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == DOCKED_STACK_ID || stackId == PINNED_STACK_ID) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}","void moveTaskToStackLocked(int taskId,int stackId,boolean toTop,boolean forceFocus,String reason){
  final TaskRecord task=anyTaskForIdLocked(taskId);
  if (task == null) {
    Slog.w(TAG,""String_Node_Str"" + taskId);
    return;
  }
  final ActivityRecord topActivity=task.getTopActivity();
  if (StackId.preserveWindowOnTaskMove(stackId) && topActivity != null) {
    mWindowManager.setReplacingWindow(topActivity.appToken,true);
  }
  final ActivityStack stack=moveTaskToStackUncheckedLocked(task,stackId,toTop,forceFocus,""String_Node_Str"" + reason);
  if (stackId == FULLSCREEN_WORKSPACE_STACK_ID && task.mBounds != null) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == FREEFORM_WORKSPACE_STACK_ID && task.mBounds == null && task.mLastNonFullscreenBounds != null) {
    resizeTaskLocked(task,task.mLastNonFullscreenBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == DOCKED_STACK_ID || stackId == PINNED_STACK_ID) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}",0.9404606692742286
193274,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  if (stringName != null) {
    sb.append(stringName);
    sb.append(""String_Node_Str"");
    sb.append(userId);
    sb.append(""String_Node_Str"");
    sb.append(mActivities.size());
    sb.append('}');
    return sb.toString();
  }
  sb.append(""String_Node_Str"");
  sb.append(Integer.toHexString(System.identityHashCode(this)));
  sb.append(""String_Node_Str"");
  sb.append(taskId);
  if (affinity != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinity);
  }
 else   if (intent != null) {
    sb.append(""String_Node_Str"");
    sb.append(intent.getComponent().flattenToShortString());
  }
 else   if (affinityIntent != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinityIntent.getComponent().flattenToShortString());
  }
 else {
    sb.append(""String_Node_Str"");
  }
  stringName=sb.toString();
  return toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  if (stringName != null) {
    sb.append(stringName);
    sb.append(""String_Node_Str"");
    sb.append(userId);
    sb.append(""String_Node_Str"");
    sb.append(stack != null ? stack.mStackId : INVALID_STACK_ID);
    sb.append(""String_Node_Str"");
    sb.append(mActivities.size());
    sb.append('}');
    return sb.toString();
  }
  sb.append(""String_Node_Str"");
  sb.append(Integer.toHexString(System.identityHashCode(this)));
  sb.append(""String_Node_Str"");
  sb.append(taskId);
  if (affinity != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinity);
  }
 else   if (intent != null) {
    sb.append(""String_Node_Str"");
    sb.append(intent.getComponent().flattenToShortString());
  }
 else   if (affinityIntent != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinityIntent.getComponent().flattenToShortString());
  }
 else {
    sb.append(""String_Node_Str"");
  }
  stringName=sb.toString();
  return toString();
}",0.9484004127966976
193275,"@Override public Rect getTaskBounds(int taskId){
  enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,""String_Node_Str"");
  long ident=Binder.clearCallingIdentity();
  Rect rect=new Rect();
  try {
synchronized (this) {
      TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId);
      if (task == null) {
        Slog.w(TAG,""String_Node_Str"" + taskId + ""String_Node_Str"");
        return rect;
      }
      mWindowManager.getTaskBounds(task.taskId,rect);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return rect;
}","@Override public Rect getTaskBounds(int taskId){
  enforceCallingPermission(android.Manifest.permission.MANAGE_ACTIVITY_STACKS,""String_Node_Str"");
  long ident=Binder.clearCallingIdentity();
  Rect rect=new Rect();
  try {
synchronized (this) {
      final TaskRecord task=mStackSupervisor.anyTaskForIdLocked(taskId,!RESTORE_FROM_RECENTS,INVALID_STACK_ID);
      if (task == null) {
        Slog.w(TAG,""String_Node_Str"" + taskId + ""String_Node_Str"");
        return rect;
      }
      if (task.stack != null) {
        mWindowManager.getTaskBounds(task.taskId,rect);
      }
 else {
        if (task.mBounds != null) {
          rect.set(task.mBounds);
        }
 else         if (task.mLastNonFullscreenBounds != null) {
          rect.set(task.mLastNonFullscreenBounds);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return rect;
}",0.7895100069013112
193276,"final int startActivityFromRecentsInner(int taskId,int launchStackId,Bundle bOptions){
  final TaskRecord task;
  final int callingUid;
  final String callingPackage;
  final Intent intent;
  final int userId;
synchronized (this) {
    if (launchStackId == HOME_STACK_ID) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    task=mStackSupervisor.anyTaskForIdLocked(taskId,RESTORE_FROM_RECENTS,launchStackId);
    if (task == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    if (launchStackId != INVALID_STACK_ID && task.stack.mStackId != launchStackId) {
      if (launchStackId == DOCKED_STACK_ID && bOptions != null) {
        ActivityOptions activityOptions=new ActivityOptions(bOptions);
        mWindowManager.setDockedStackCreateMode(activityOptions.getDockCreateMode());
      }
      mStackSupervisor.moveTaskToStackLocked(taskId,launchStackId,ON_TOP,FORCE_FOCUS,""String_Node_Str"");
    }
    if (task.getRootActivity() != null) {
      moveTaskToFrontLocked(task.taskId,0,bOptions);
      return ActivityManager.START_TASK_TO_FRONT;
    }
    callingUid=task.mCallingUid;
    callingPackage=task.mCallingPackage;
    intent=task.intent;
    intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    userId=task.userId;
  }
  return startActivityInPackage(callingUid,callingPackage,intent,null,null,null,0,0,bOptions,userId,null,task);
}","final int startActivityFromRecentsInner(int taskId,int launchStackId,Bundle bOptions){
  final TaskRecord task;
  final int callingUid;
  final String callingPackage;
  final Intent intent;
  final int userId;
synchronized (this) {
    if (launchStackId == HOME_STACK_ID) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    task=mStackSupervisor.anyTaskForIdLocked(taskId,RESTORE_FROM_RECENTS,launchStackId);
    if (task == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + taskId + ""String_Node_Str"");
    }
    if (launchStackId != INVALID_STACK_ID) {
      if (launchStackId == DOCKED_STACK_ID && bOptions != null) {
        ActivityOptions activityOptions=new ActivityOptions(bOptions);
        mWindowManager.setDockedStackCreateMode(activityOptions.getDockCreateMode());
      }
      if (task.stack.mStackId != launchStackId) {
        mStackSupervisor.moveTaskToStackLocked(taskId,launchStackId,ON_TOP,FORCE_FOCUS,""String_Node_Str"");
      }
    }
    if (task.getRootActivity() != null) {
      moveTaskToFrontLocked(task.taskId,0,bOptions);
      return ActivityManager.START_TASK_TO_FRONT;
    }
    callingUid=task.mCallingUid;
    callingPackage=task.mCallingPackage;
    intent=task.intent;
    intent.addFlags(Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY);
    userId=task.userId;
  }
  return startActivityInPackage(callingUid,callingPackage,intent,null,null,null,0,0,bOptions,userId,null,task);
}",0.9660095173351462
193277,"/** 
 * Restores a recent task to a stack
 * @param task The recent task to be restored.
 * @param stackId The stack to restore the task to (default launch stack will be usedif stackId is  {@link android.app.ActivityManager.StackId#INVALID_STACK_ID}).
 * @return true if the task has been restored successfully.
 */
private boolean restoreRecentTaskLocked(TaskRecord task,int stackId){
  if (stackId == INVALID_STACK_ID) {
    stackId=task.getLaunchStackId();
  }
  if (task.stack != null) {
    if (task.stack.mStackId == stackId) {
      return true;
    }
    task.stack.removeTask(task,""String_Node_Str"",MOVING);
  }
  ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,!ON_TOP);
  if (stack == null) {
    if (DEBUG_RECENTS)     Slog.v(TAG_RECENTS,""String_Node_Str"" + task);
    return false;
  }
  stack.addTask(task,false,false);
  if (DEBUG_RECENTS)   Slog.v(TAG_RECENTS,""String_Node_Str"" + task + ""String_Node_Str""+ stack);
  final ArrayList<ActivityRecord> activities=task.mActivities;
  for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
    stack.addConfigOverride(activities.get(activityNdx),task);
  }
  return true;
}","/** 
 * Restores a recent task to a stack
 * @param task The recent task to be restored.
 * @param stackId The stack to restore the task to (default launch stack will be usedif stackId is  {@link android.app.ActivityManager.StackId#INVALID_STACK_ID}).
 * @return true if the task has been restored successfully.
 */
private boolean restoreRecentTaskLocked(TaskRecord task,int stackId){
  if (stackId == INVALID_STACK_ID) {
    stackId=task.getLaunchStackId();
  }
  if (task.stack != null) {
    if (task.stack.mStackId == stackId) {
      return true;
    }
    task.stack.removeTask(task,""String_Node_Str"",MOVING);
  }
  final ActivityStack stack=getStack(stackId,CREATE_IF_NEEDED,!ON_TOP);
  if (stack == null) {
    if (DEBUG_RECENTS)     Slog.v(TAG_RECENTS,""String_Node_Str"" + task);
    return false;
  }
  stack.addTask(task,false,false);
  if (DEBUG_RECENTS)   Slog.v(TAG_RECENTS,""String_Node_Str"" + task + ""String_Node_Str""+ stack);
  final ArrayList<ActivityRecord> activities=task.mActivities;
  for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
    stack.addConfigOverride(activities.get(activityNdx),task);
  }
  return true;
}",0.997427101200686
193278,"void moveTaskToStackLocked(int taskId,int stackId,boolean toTop,boolean forceFocus,String reason){
  final TaskRecord task=anyTaskForIdLocked(taskId);
  if (task == null) {
    Slog.w(TAG,""String_Node_Str"" + taskId);
    return;
  }
  if (StackId.preserveWindowOnTaskMove(stackId)) {
    ActivityRecord r=task.getTopActivity();
    mWindowManager.setReplacingWindow(r.appToken,true);
  }
  final ActivityStack stack=moveTaskToStackUncheckedLocked(task,stackId,toTop,forceFocus,""String_Node_Str"" + reason);
  if (stackId == FULLSCREEN_WORKSPACE_STACK_ID && task.mBounds != null) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == FREEFORM_WORKSPACE_STACK_ID && task.mBounds == null && task.mLastNonFullscreenBounds != null) {
    resizeTaskLocked(task,task.mLastNonFullscreenBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == DOCKED_STACK_ID || stackId == PINNED_STACK_ID) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}","void moveTaskToStackLocked(int taskId,int stackId,boolean toTop,boolean forceFocus,String reason){
  final TaskRecord task=anyTaskForIdLocked(taskId);
  if (task == null) {
    Slog.w(TAG,""String_Node_Str"" + taskId);
    return;
  }
  final ActivityRecord topActivity=task.getTopActivity();
  if (StackId.preserveWindowOnTaskMove(stackId) && topActivity != null) {
    mWindowManager.setReplacingWindow(topActivity.appToken,true);
  }
  final ActivityStack stack=moveTaskToStackUncheckedLocked(task,stackId,toTop,forceFocus,""String_Node_Str"" + reason);
  if (stackId == FULLSCREEN_WORKSPACE_STACK_ID && task.mBounds != null) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == FREEFORM_WORKSPACE_STACK_ID && task.mBounds == null && task.mLastNonFullscreenBounds != null) {
    resizeTaskLocked(task,task.mLastNonFullscreenBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
 else   if (stackId == DOCKED_STACK_ID || stackId == PINNED_STACK_ID) {
    resizeTaskLocked(task,stack.mBounds,RESIZE_MODE_SYSTEM,!PRESERVE_WINDOWS);
  }
  ensureActivitiesVisibleLocked(null,0,!PRESERVE_WINDOWS);
  resumeTopActivitiesLocked();
}",0.9404606692742286
193279,"@Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  if (stringName != null) {
    sb.append(stringName);
    sb.append(""String_Node_Str"");
    sb.append(userId);
    sb.append(""String_Node_Str"");
    sb.append(mActivities.size());
    sb.append('}');
    return sb.toString();
  }
  sb.append(""String_Node_Str"");
  sb.append(Integer.toHexString(System.identityHashCode(this)));
  sb.append(""String_Node_Str"");
  sb.append(taskId);
  if (affinity != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinity);
  }
 else   if (intent != null) {
    sb.append(""String_Node_Str"");
    sb.append(intent.getComponent().flattenToShortString());
  }
 else   if (affinityIntent != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinityIntent.getComponent().flattenToShortString());
  }
 else {
    sb.append(""String_Node_Str"");
  }
  stringName=sb.toString();
  return toString();
}","@Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  if (stringName != null) {
    sb.append(stringName);
    sb.append(""String_Node_Str"");
    sb.append(userId);
    sb.append(""String_Node_Str"");
    sb.append(stack != null ? stack.mStackId : INVALID_STACK_ID);
    sb.append(""String_Node_Str"");
    sb.append(mActivities.size());
    sb.append('}');
    return sb.toString();
  }
  sb.append(""String_Node_Str"");
  sb.append(Integer.toHexString(System.identityHashCode(this)));
  sb.append(""String_Node_Str"");
  sb.append(taskId);
  if (affinity != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinity);
  }
 else   if (intent != null) {
    sb.append(""String_Node_Str"");
    sb.append(intent.getComponent().flattenToShortString());
  }
 else   if (affinityIntent != null) {
    sb.append(""String_Node_Str"");
    sb.append(affinityIntent.getComponent().flattenToShortString());
  }
 else {
    sb.append(""String_Node_Str"");
  }
  stringName=sb.toString();
  return toString();
}",0.9484004127966976
193280,"void updateWallpaperVisibility(){
  final boolean visible=isWallpaperVisible(mWallpaperTarget);
  final DisplayContent displayContent=mWallpaperTarget.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      token.hidden=!visible;
      displayContent.layoutNeeded=true;
    }
    final WindowList windows=token.windows;
    for (int wallpaperNdx=windows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=windows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
    }
  }
}","void updateWallpaperVisibility(){
  final DisplayContent displayContent=mWallpaperTarget.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final boolean visible=isWallpaperVisible(mWallpaperTarget);
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      token.hidden=!visible;
      displayContent.layoutNeeded=true;
    }
    final WindowList windows=token.windows;
    for (int wallpaperNdx=windows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=windows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
    }
  }
}",0.8697478991596639
193281,"void hideWallpapers(final WindowState winGoingAway){
  if (mWallpaperTarget != null && (mWallpaperTarget != winGoingAway || mLowerWallpaperTarget != null)) {
    return;
  }
  if (mService.mAppTransition.isRunning()) {
    mDeferredHideWallpaper=winGoingAway;
    return;
  }
  final boolean wasDeferred=(mDeferredHideWallpaper == winGoingAway);
  for (int i=mWallpaperTokens.size() - 1; i >= 0; i--) {
    final WindowToken token=mWallpaperTokens.get(i);
    for (int j=token.windows.size() - 1; j >= 0; j--) {
      final WindowState wallpaper=token.windows.get(j);
      final WindowStateAnimator winAnimator=wallpaper.mWinAnimator;
      if (!winAnimator.mLastHidden || wasDeferred) {
        winAnimator.hide();
        dispatchWallpaperVisibility(wallpaper,false);
        final DisplayContent displayContent=wallpaper.getDisplayContent();
        if (displayContent != null) {
          displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
        }
      }
    }
    if (DEBUG_WALLPAPER_LIGHT && !token.hidden)     Slog.d(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ winGoingAway+ ""String_Node_Str""+ mWallpaperTarget+ ""String_Node_Str""+ mLowerWallpaperTarget+ ""String_Node_Str""+ Debug.getCallers(5,""String_Node_Str""));
    token.hidden=true;
  }
}","void hideWallpapers(final WindowState winGoingAway){
  if (mWallpaperTarget != null && (mWallpaperTarget != winGoingAway || mLowerWallpaperTarget != null)) {
    return;
  }
  if (mService.mAppTransition.isRunning()) {
    mDeferredHideWallpaper=winGoingAway;
    return;
  }
  final boolean wasDeferred=(mDeferredHideWallpaper == winGoingAway);
  for (int i=mWallpaperTokens.size() - 1; i >= 0; i--) {
    final WindowToken token=mWallpaperTokens.get(i);
    for (int j=token.windows.size() - 1; j >= 0; j--) {
      final WindowState wallpaper=token.windows.get(j);
      final WindowStateAnimator winAnimator=wallpaper.mWinAnimator;
      if (!winAnimator.mLastHidden || wasDeferred) {
        winAnimator.hide(""String_Node_Str"");
        dispatchWallpaperVisibility(wallpaper,false);
        final DisplayContent displayContent=wallpaper.getDisplayContent();
        if (displayContent != null) {
          displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
        }
      }
    }
    if (DEBUG_WALLPAPER_LIGHT && !token.hidden)     Slog.d(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ winGoingAway+ ""String_Node_Str""+ mWallpaperTarget+ ""String_Node_Str""+ mLowerWallpaperTarget+ ""String_Node_Str""+ Debug.getCallers(5,""String_Node_Str""));
    token.hidden=true;
  }
}",0.9934790947449176
193282,"private void prepareWindowReplacementTransition(AppWindowToken atoken){
  if (atoken == null || !atoken.mWillReplaceWindow || !atoken.mAnimateReplacingWindow) {
    return;
  }
  atoken.allDrawn=false;
  WindowState replacedWindow=null;
  for (int i=atoken.windows.size() - 1; i >= 0 && replacedWindow == null; i--) {
    WindowState candidate=atoken.windows.get(i);
    if (candidate.mExiting) {
      replacedWindow=candidate;
    }
  }
  if (replacedWindow == null) {
    return;
  }
  Rect frame=replacedWindow.mFrame;
  mOpeningApps.add(atoken);
  prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH,ALWAYS_KEEP_CURRENT);
  mAppTransition.overridePendingAppTransitionClipReveal(frame.left,frame.top,frame.width(),frame.height());
  executeAppTransition();
}","private void prepareWindowReplacementTransition(AppWindowToken atoken){
  if (atoken == null || !atoken.mWillReplaceWindow || !atoken.mAnimateReplacingWindow) {
    return;
  }
  atoken.allDrawn=false;
  WindowState replacedWindow=null;
  for (int i=atoken.windows.size() - 1; i >= 0 && replacedWindow == null; i--) {
    WindowState candidate=atoken.windows.get(i);
    if (candidate.mExiting) {
      replacedWindow=candidate;
    }
  }
  if (replacedWindow == null) {
    return;
  }
  Rect frame=replacedWindow.mVisibleFrame;
  mOpeningApps.add(atoken);
  prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH,ALWAYS_KEEP_CURRENT);
  mAppTransition.overridePendingAppTransitionClipReveal(frame.left,frame.top,frame.width(),frame.height());
  executeAppTransition();
}",0.9954809554551324
193283,"void checkPolicyVisibilityChange(){
  if (mPolicyVisibility != mPolicyVisibilityAfterAnim) {
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mWinAnimator + ""String_Node_Str""+ mPolicyVisibilityAfterAnim);
    }
    mPolicyVisibility=mPolicyVisibilityAfterAnim;
    if (mDisplayContent != null) {
      mDisplayContent.layoutNeeded=true;
    }
    if (!mPolicyVisibility) {
      if (mService.mCurrentFocus == this) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"");
        mService.mFocusMayChange=true;
      }
      mService.enableScreenIfNeededLocked();
    }
  }
}","void checkPolicyVisibilityChange(){
  if (mPolicyVisibility != mPolicyVisibilityAfterAnim) {
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mWinAnimator + ""String_Node_Str""+ mPolicyVisibilityAfterAnim);
    }
    mPolicyVisibility=mPolicyVisibilityAfterAnim;
    setDisplayLayoutNeeded();
    if (!mPolicyVisibility) {
      if (mService.mCurrentFocus == this) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"");
        mService.mFocusMayChange=true;
      }
      mService.enableScreenIfNeededLocked();
    }
  }
}",0.9396551724137931
193284,"void finishExit(){
  if (WindowManagerService.DEBUG_ANIM)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mExiting+ ""String_Node_Str""+ mWin.mRemoveOnExit+ ""String_Node_Str""+ isWindowAnimating());
  final int N=mWin.mChildWindows.size();
  for (int i=0; i < N; i++) {
    mWin.mChildWindows.get(i).mWinAnimator.finishExit();
  }
  if (mEnteringAnimation) {
    mEnteringAnimation=false;
    mService.requestTraversal();
    if (mWin.mAppToken == null) {
      try {
        mWin.mClient.dispatchWindowShown();
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (!isWindowAnimating()) {
    if (mService.mAccessibilityController != null && mWin.getDisplayId() == Display.DEFAULT_DISPLAY) {
      mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
    }
  }
  if (!mWin.mExiting) {
    return;
  }
  if (isWindowAnimating()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mRemoveOnExit);
  if (mSurfaceController != null && mSurfaceController.hasSurface()) {
    mService.mDestroySurface.add(mWin);
    mWin.mDestroying=true;
    if (SHOW_TRANSACTIONS)     WindowManagerService.logSurface(mWin,""String_Node_Str"",null);
    hide();
  }
  mWin.mExiting=false;
  if (mWin.mRemoveOnExit) {
    mService.mPendingRemove.add(mWin);
    mWin.mRemoveOnExit=false;
  }
  mWallpaperControllerLocked.hideWallpapers(mWin);
}","void finishExit(){
  if (WindowManagerService.DEBUG_ANIM)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mExiting+ ""String_Node_Str""+ mWin.mRemoveOnExit+ ""String_Node_Str""+ isWindowAnimating());
  final int N=mWin.mChildWindows.size();
  for (int i=0; i < N; i++) {
    mWin.mChildWindows.get(i).mWinAnimator.finishExit();
  }
  if (mEnteringAnimation) {
    mEnteringAnimation=false;
    mService.requestTraversal();
    if (mWin.mAppToken == null) {
      try {
        mWin.mClient.dispatchWindowShown();
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (!isWindowAnimating()) {
    if (mService.mAccessibilityController != null && mWin.getDisplayId() == Display.DEFAULT_DISPLAY) {
      mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
    }
  }
  if (!mWin.mExiting) {
    return;
  }
  if (isWindowAnimating()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mRemoveOnExit);
  if (mSurfaceController != null && mSurfaceController.hasSurface()) {
    mService.mDestroySurface.add(mWin);
    mWin.mDestroying=true;
    hide(""String_Node_Str"");
  }
  mWin.mExiting=false;
  if (mWin.mRemoveOnExit) {
    mService.mPendingRemove.add(mWin);
    mWin.mRemoveOnExit=false;
  }
  mWallpaperControllerLocked.hideWallpapers(mWin);
}",0.9583632447954056
193285,"void preserveSurfaceLocked(){
  if (mDestroyPreservedSurfaceUponRedraw) {
    return;
  }
  mSurfaceController.setLayer(WINDOW_FREEZE_LAYER);
  mDestroyPreservedSurfaceUponRedraw=true;
  mSurfaceDestroyDeferred=true;
  destroySurfaceLocked();
}","void preserveSurfaceLocked(){
  if (mDestroyPreservedSurfaceUponRedraw) {
    return;
  }
  if (SHOW_TRANSACTIONS)   WindowManagerService.logSurface(mWin,""String_Node_Str"",null);
  mSurfaceController.setLayer(mAnimLayer + 1);
  mDestroyPreservedSurfaceUponRedraw=true;
  mSurfaceDestroyDeferred=true;
  destroySurfaceLocked();
}",0.7132867132867133
193286,"void prepareSurfaceLocked(final boolean recoveringMemory){
  final WindowState w=mWin;
  if (mSurfaceController == null || !mSurfaceController.hasSurface()) {
    if (w.mOrientationChanging) {
      if (DEBUG_ORIENTATION) {
        Slog.v(TAG,""String_Node_Str"" + w);
      }
      w.mOrientationChanging=false;
    }
    return;
  }
  boolean displayed=false;
  computeShownFrameLocked();
  setSurfaceBoundariesLocked(recoveringMemory);
  if (mIsWallpaper && !mWin.mWallpaperVisible) {
    hide();
  }
 else   if (w.mAttachedHidden || !w.isOnScreen()) {
    hide();
    mWallpaperControllerLocked.hideWallpapers(w);
    if (w.mOrientationChanging) {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,""String_Node_Str"" + w);
    }
  }
 else   if (mLastLayer != mAnimLayer || mLastAlpha != mShownAlpha || mLastDsDx != mDsDx || mLastDtDx != mDtDx || mLastDsDy != mDsDy || mLastDtDy != mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || mLastHidden) {
    displayed=true;
    mLastAlpha=mShownAlpha;
    mLastLayer=mAnimLayer;
    mLastDsDx=mDsDx;
    mLastDtDx=mDtDx;
    mLastDsDy=mDsDy;
    mLastDtDy=mDtDy;
    w.mLastHScale=w.mHScale;
    w.mLastVScale=w.mVScale;
    if (WindowManagerService.SHOW_TRANSACTIONS)     WindowManagerService.logSurface(w,""String_Node_Str"" + mSurfaceController + ""String_Node_Str""+ mShownAlpha+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str""+ mDsDx+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDx+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str""+ mDsDy+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDy+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str"",null);
    boolean prepared=mSurfaceController.prepareToShowInTransaction(mShownAlpha,mAnimLayer,mDsDx * w.mHScale,mDtDx * w.mVScale,mDsDy * w.mHScale,mDtDy * w.mVScale,recoveringMemory);
    if (prepared && mLastHidden && mDrawState == HAS_DRAWN) {
      if (showSurfaceRobustlyLocked()) {
        mLastHidden=false;
        if (mIsWallpaper) {
          mWallpaperControllerLocked.dispatchWallpaperVisibility(w,true);
        }
        mAnimator.setPendingLayoutChanges(w.getDisplayId(),WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
      }
 else {
        w.mOrientationChanging=false;
      }
    }
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
      w.mToken.hasVisible=true;
    }
  }
 else {
    if (DEBUG_ANIM && isAnimating()) {
      Slog.v(TAG,""String_Node_Str"" + this);
    }
    displayed=true;
  }
  if (displayed) {
    if (w.mOrientationChanging) {
      if (!w.isDrawnLw()) {
        mAnimator.mBulkUpdateParams&=~SET_ORIENTATION_CHANGE_COMPLETE;
        mAnimator.mLastWindowFreezeSource=w;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
 else {
        w.mOrientationChanging=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
    }
    w.mToken.hasVisible=true;
  }
}","void prepareSurfaceLocked(final boolean recoveringMemory){
  final WindowState w=mWin;
  if (mSurfaceController == null || !mSurfaceController.hasSurface()) {
    if (w.mOrientationChanging) {
      if (DEBUG_ORIENTATION) {
        Slog.v(TAG,""String_Node_Str"" + w);
      }
      w.mOrientationChanging=false;
    }
    return;
  }
  boolean displayed=false;
  computeShownFrameLocked();
  setSurfaceBoundariesLocked(recoveringMemory);
  if (mIsWallpaper && !mWin.mWallpaperVisible) {
    hide(""String_Node_Str"");
  }
 else   if (w.mAttachedHidden || !w.isOnScreen()) {
    hide(""String_Node_Str"");
    mWallpaperControllerLocked.hideWallpapers(w);
    if (w.mOrientationChanging) {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,""String_Node_Str"" + w);
    }
  }
 else   if (mLastLayer != mAnimLayer || mLastAlpha != mShownAlpha || mLastDsDx != mDsDx || mLastDtDx != mDtDx || mLastDsDy != mDsDy || mLastDtDy != mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || mLastHidden) {
    displayed=true;
    mLastAlpha=mShownAlpha;
    mLastLayer=mAnimLayer;
    mLastDsDx=mDsDx;
    mLastDtDx=mDtDx;
    mLastDsDy=mDsDy;
    mLastDtDy=mDtDy;
    w.mLastHScale=w.mHScale;
    w.mLastVScale=w.mVScale;
    if (WindowManagerService.SHOW_TRANSACTIONS)     WindowManagerService.logSurface(w,""String_Node_Str"" + mSurfaceController + ""String_Node_Str""+ mShownAlpha+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str""+ mDsDx+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDx+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str""+ mDsDy+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDy+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str"",null);
    boolean prepared=mSurfaceController.prepareToShowInTransaction(mShownAlpha,mAnimLayer,mDsDx * w.mHScale,mDtDx * w.mVScale,mDsDy * w.mHScale,mDtDy * w.mVScale,recoveringMemory);
    if (prepared && mLastHidden && mDrawState == HAS_DRAWN) {
      if (showSurfaceRobustlyLocked()) {
        mLastHidden=false;
        if (mIsWallpaper) {
          mWallpaperControllerLocked.dispatchWallpaperVisibility(w,true);
        }
        mAnimator.setPendingLayoutChanges(w.getDisplayId(),WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
      }
 else {
        w.mOrientationChanging=false;
      }
    }
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
      w.mToken.hasVisible=true;
    }
  }
 else {
    if (DEBUG_ANIM && isAnimating()) {
      Slog.v(TAG,""String_Node_Str"" + this);
    }
    displayed=true;
  }
  if (displayed) {
    if (w.mOrientationChanging) {
      if (!w.isDrawnLw()) {
        mAnimator.mBulkUpdateParams&=~SET_ORIENTATION_CHANGE_COMPLETE;
        mAnimator.mLastWindowFreezeSource=w;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
 else {
        w.mOrientationChanging=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
    }
    w.mToken.hasVisible=true;
  }
}",0.9942392409352762
193287,"void hide(){
  if (!mLastHidden) {
    mLastHidden=true;
    mSurfaceController.hideInTransaction();
  }
}","void hide(String reason){
  if (!mLastHidden) {
    mLastHidden=true;
    mSurfaceController.hideInTransaction(reason);
  }
}",0.9177489177489178
193288,"void setCropInTransaction(Rect clipRect,boolean recoveringMemory){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + clipRect.toShortString(),null);
  try {
    if (clipRect.width() > 0 && clipRect.height() > 0) {
      mSurfaceControl.setWindowCrop(clipRect);
      mHiddenForCrop=false;
    }
 else {
      hideInTransaction();
      mHiddenForCrop=true;
    }
  }
 catch (  RuntimeException e) {
    Slog.w(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ clipRect.toShortString(),e);
    if (!recoveringMemory) {
      mAnimator.reclaimSomeSurfaceMemory(""String_Node_Str"",true);
    }
  }
}","void setCropInTransaction(Rect clipRect,boolean recoveringMemory){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + clipRect.toShortString(),null);
  try {
    if (clipRect.width() > 0 && clipRect.height() > 0) {
      mSurfaceControl.setWindowCrop(clipRect);
      mHiddenForCrop=false;
    }
 else {
      hideInTransaction(""String_Node_Str"");
      mHiddenForCrop=true;
    }
  }
 catch (  RuntimeException e) {
    Slog.w(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ clipRect.toShortString(),e);
    if (!recoveringMemory) {
      mAnimator.reclaimSomeSurfaceMemory(""String_Node_Str"",true);
    }
  }
}",0.9860997547015536
193289,"void hideInTransaction(){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"",null);
  if (mSurfaceControl != null) {
    mSurfaceShown=false;
    try {
      mSurfaceControl.hide();
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + this);
    }
  }
}","void hideInTransaction(String reason){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + reason + ""String_Node_Str"",null);
  if (mSurfaceControl != null) {
    mSurfaceShown=false;
    try {
      mSurfaceControl.hide();
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + this);
    }
  }
}",0.9306930693069309
193290,"void updateWallpaperVisibility(){
  final boolean visible=isWallpaperVisible(mWallpaperTarget);
  final DisplayContent displayContent=mWallpaperTarget.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      token.hidden=!visible;
      displayContent.layoutNeeded=true;
    }
    final WindowList windows=token.windows;
    for (int wallpaperNdx=windows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=windows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
    }
  }
}","void updateWallpaperVisibility(){
  final DisplayContent displayContent=mWallpaperTarget.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final boolean visible=isWallpaperVisible(mWallpaperTarget);
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  final int dw=displayInfo.logicalWidth;
  final int dh=displayInfo.logicalHeight;
  for (int curTokenNdx=mWallpaperTokens.size() - 1; curTokenNdx >= 0; curTokenNdx--) {
    WindowToken token=mWallpaperTokens.get(curTokenNdx);
    if (token.hidden == visible) {
      token.hidden=!visible;
      displayContent.layoutNeeded=true;
    }
    final WindowList windows=token.windows;
    for (int wallpaperNdx=windows.size() - 1; wallpaperNdx >= 0; wallpaperNdx--) {
      WindowState wallpaper=windows.get(wallpaperNdx);
      if (visible) {
        updateWallpaperOffset(wallpaper,dw,dh,false);
      }
      dispatchWallpaperVisibility(wallpaper,visible);
    }
  }
}",0.8697478991596639
193291,"void hideWallpapers(final WindowState winGoingAway){
  if (mWallpaperTarget != null && (mWallpaperTarget != winGoingAway || mLowerWallpaperTarget != null)) {
    return;
  }
  if (mService.mAppTransition.isRunning()) {
    mDeferredHideWallpaper=winGoingAway;
    return;
  }
  final boolean wasDeferred=(mDeferredHideWallpaper == winGoingAway);
  for (int i=mWallpaperTokens.size() - 1; i >= 0; i--) {
    final WindowToken token=mWallpaperTokens.get(i);
    for (int j=token.windows.size() - 1; j >= 0; j--) {
      final WindowState wallpaper=token.windows.get(j);
      final WindowStateAnimator winAnimator=wallpaper.mWinAnimator;
      if (!winAnimator.mLastHidden || wasDeferred) {
        winAnimator.hide();
        dispatchWallpaperVisibility(wallpaper,false);
        final DisplayContent displayContent=wallpaper.getDisplayContent();
        if (displayContent != null) {
          displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
        }
      }
    }
    if (DEBUG_WALLPAPER_LIGHT && !token.hidden)     Slog.d(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ winGoingAway+ ""String_Node_Str""+ mWallpaperTarget+ ""String_Node_Str""+ mLowerWallpaperTarget+ ""String_Node_Str""+ Debug.getCallers(5,""String_Node_Str""));
    token.hidden=true;
  }
}","void hideWallpapers(final WindowState winGoingAway){
  if (mWallpaperTarget != null && (mWallpaperTarget != winGoingAway || mLowerWallpaperTarget != null)) {
    return;
  }
  if (mService.mAppTransition.isRunning()) {
    mDeferredHideWallpaper=winGoingAway;
    return;
  }
  final boolean wasDeferred=(mDeferredHideWallpaper == winGoingAway);
  for (int i=mWallpaperTokens.size() - 1; i >= 0; i--) {
    final WindowToken token=mWallpaperTokens.get(i);
    for (int j=token.windows.size() - 1; j >= 0; j--) {
      final WindowState wallpaper=token.windows.get(j);
      final WindowStateAnimator winAnimator=wallpaper.mWinAnimator;
      if (!winAnimator.mLastHidden || wasDeferred) {
        winAnimator.hide(""String_Node_Str"");
        dispatchWallpaperVisibility(wallpaper,false);
        final DisplayContent displayContent=wallpaper.getDisplayContent();
        if (displayContent != null) {
          displayContent.pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
        }
      }
    }
    if (DEBUG_WALLPAPER_LIGHT && !token.hidden)     Slog.d(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ winGoingAway+ ""String_Node_Str""+ mWallpaperTarget+ ""String_Node_Str""+ mLowerWallpaperTarget+ ""String_Node_Str""+ Debug.getCallers(5,""String_Node_Str""));
    token.hidden=true;
  }
}",0.9934790947449176
193292,"private void prepareWindowReplacementTransition(AppWindowToken atoken){
  if (atoken == null || !atoken.mWillReplaceWindow || !atoken.mAnimateReplacingWindow) {
    return;
  }
  atoken.allDrawn=false;
  WindowState replacedWindow=null;
  for (int i=atoken.windows.size() - 1; i >= 0 && replacedWindow == null; i--) {
    WindowState candidate=atoken.windows.get(i);
    if (candidate.mExiting) {
      replacedWindow=candidate;
    }
  }
  if (replacedWindow == null) {
    return;
  }
  Rect frame=replacedWindow.mFrame;
  mOpeningApps.add(atoken);
  prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH,ALWAYS_KEEP_CURRENT);
  mAppTransition.overridePendingAppTransitionClipReveal(frame.left,frame.top,frame.width(),frame.height());
  executeAppTransition();
}","private void prepareWindowReplacementTransition(AppWindowToken atoken){
  if (atoken == null || !atoken.mWillReplaceWindow || !atoken.mAnimateReplacingWindow) {
    return;
  }
  atoken.allDrawn=false;
  WindowState replacedWindow=null;
  for (int i=atoken.windows.size() - 1; i >= 0 && replacedWindow == null; i--) {
    WindowState candidate=atoken.windows.get(i);
    if (candidate.mExiting) {
      replacedWindow=candidate;
    }
  }
  if (replacedWindow == null) {
    return;
  }
  Rect frame=replacedWindow.mVisibleFrame;
  mOpeningApps.add(atoken);
  prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH,ALWAYS_KEEP_CURRENT);
  mAppTransition.overridePendingAppTransitionClipReveal(frame.left,frame.top,frame.width(),frame.height());
  executeAppTransition();
}",0.9954809554551324
193293,"void checkPolicyVisibilityChange(){
  if (mPolicyVisibility != mPolicyVisibilityAfterAnim) {
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mWinAnimator + ""String_Node_Str""+ mPolicyVisibilityAfterAnim);
    }
    mPolicyVisibility=mPolicyVisibilityAfterAnim;
    if (mDisplayContent != null) {
      mDisplayContent.layoutNeeded=true;
    }
    if (!mPolicyVisibility) {
      if (mService.mCurrentFocus == this) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"");
        mService.mFocusMayChange=true;
      }
      mService.enableScreenIfNeededLocked();
    }
  }
}","void checkPolicyVisibilityChange(){
  if (mPolicyVisibility != mPolicyVisibilityAfterAnim) {
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mWinAnimator + ""String_Node_Str""+ mPolicyVisibilityAfterAnim);
    }
    mPolicyVisibility=mPolicyVisibilityAfterAnim;
    setDisplayLayoutNeeded();
    if (!mPolicyVisibility) {
      if (mService.mCurrentFocus == this) {
        if (DEBUG_FOCUS_LIGHT)         Slog.i(TAG,""String_Node_Str"");
        mService.mFocusMayChange=true;
      }
      mService.enableScreenIfNeededLocked();
    }
  }
}",0.9396551724137931
193294,"void finishExit(){
  if (WindowManagerService.DEBUG_ANIM)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mExiting+ ""String_Node_Str""+ mWin.mRemoveOnExit+ ""String_Node_Str""+ isWindowAnimating());
  final int N=mWin.mChildWindows.size();
  for (int i=0; i < N; i++) {
    mWin.mChildWindows.get(i).mWinAnimator.finishExit();
  }
  if (mEnteringAnimation) {
    mEnteringAnimation=false;
    mService.requestTraversal();
    if (mWin.mAppToken == null) {
      try {
        mWin.mClient.dispatchWindowShown();
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (!isWindowAnimating()) {
    if (mService.mAccessibilityController != null && mWin.getDisplayId() == Display.DEFAULT_DISPLAY) {
      mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
    }
  }
  if (!mWin.mExiting) {
    return;
  }
  if (isWindowAnimating()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mRemoveOnExit);
  if (mSurfaceController != null && mSurfaceController.hasSurface()) {
    mService.mDestroySurface.add(mWin);
    mWin.mDestroying=true;
    if (SHOW_TRANSACTIONS)     WindowManagerService.logSurface(mWin,""String_Node_Str"",null);
    hide();
  }
  mWin.mExiting=false;
  if (mWin.mRemoveOnExit) {
    mService.mPendingRemove.add(mWin);
    mWin.mRemoveOnExit=false;
  }
  mWallpaperControllerLocked.hideWallpapers(mWin);
}","void finishExit(){
  if (WindowManagerService.DEBUG_ANIM)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mExiting+ ""String_Node_Str""+ mWin.mRemoveOnExit+ ""String_Node_Str""+ isWindowAnimating());
  final int N=mWin.mChildWindows.size();
  for (int i=0; i < N; i++) {
    mWin.mChildWindows.get(i).mWinAnimator.finishExit();
  }
  if (mEnteringAnimation) {
    mEnteringAnimation=false;
    mService.requestTraversal();
    if (mWin.mAppToken == null) {
      try {
        mWin.mClient.dispatchWindowShown();
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (!isWindowAnimating()) {
    if (mService.mAccessibilityController != null && mWin.getDisplayId() == Display.DEFAULT_DISPLAY) {
      mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
    }
  }
  if (!mWin.mExiting) {
    return;
  }
  if (isWindowAnimating()) {
    return;
  }
  if (WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ mWin.mRemoveOnExit);
  if (mSurfaceController != null && mSurfaceController.hasSurface()) {
    mService.mDestroySurface.add(mWin);
    mWin.mDestroying=true;
    hide(""String_Node_Str"");
  }
  mWin.mExiting=false;
  if (mWin.mRemoveOnExit) {
    mService.mPendingRemove.add(mWin);
    mWin.mRemoveOnExit=false;
  }
  mWallpaperControllerLocked.hideWallpapers(mWin);
}",0.9583632447954056
193295,"void preserveSurfaceLocked(){
  if (mDestroyPreservedSurfaceUponRedraw) {
    return;
  }
  mSurfaceController.setLayer(WINDOW_FREEZE_LAYER);
  mDestroyPreservedSurfaceUponRedraw=true;
  mSurfaceDestroyDeferred=true;
  destroySurfaceLocked();
}","void preserveSurfaceLocked(){
  if (mDestroyPreservedSurfaceUponRedraw) {
    return;
  }
  if (SHOW_TRANSACTIONS)   WindowManagerService.logSurface(mWin,""String_Node_Str"",null);
  mSurfaceController.setLayer(mAnimLayer + 1);
  mDestroyPreservedSurfaceUponRedraw=true;
  mSurfaceDestroyDeferred=true;
  destroySurfaceLocked();
}",0.7132867132867133
193296,"void prepareSurfaceLocked(final boolean recoveringMemory){
  final WindowState w=mWin;
  if (mSurfaceController == null || !mSurfaceController.hasSurface()) {
    if (w.mOrientationChanging) {
      if (DEBUG_ORIENTATION) {
        Slog.v(TAG,""String_Node_Str"" + w);
      }
      w.mOrientationChanging=false;
    }
    return;
  }
  boolean displayed=false;
  computeShownFrameLocked();
  setSurfaceBoundariesLocked(recoveringMemory);
  if (mIsWallpaper && !mWin.mWallpaperVisible) {
    hide();
  }
 else   if (w.mAttachedHidden || !w.isOnScreen()) {
    hide();
    mWallpaperControllerLocked.hideWallpapers(w);
    if (w.mOrientationChanging) {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,""String_Node_Str"" + w);
    }
  }
 else   if (mLastLayer != mAnimLayer || mLastAlpha != mShownAlpha || mLastDsDx != mDsDx || mLastDtDx != mDtDx || mLastDsDy != mDsDy || mLastDtDy != mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || mLastHidden) {
    displayed=true;
    mLastAlpha=mShownAlpha;
    mLastLayer=mAnimLayer;
    mLastDsDx=mDsDx;
    mLastDtDx=mDtDx;
    mLastDsDy=mDsDy;
    mLastDtDy=mDtDy;
    w.mLastHScale=w.mHScale;
    w.mLastVScale=w.mVScale;
    if (WindowManagerService.SHOW_TRANSACTIONS)     WindowManagerService.logSurface(w,""String_Node_Str"" + mSurfaceController + ""String_Node_Str""+ mShownAlpha+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str""+ mDsDx+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDx+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str""+ mDsDy+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDy+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str"",null);
    boolean prepared=mSurfaceController.prepareToShowInTransaction(mShownAlpha,mAnimLayer,mDsDx * w.mHScale,mDtDx * w.mVScale,mDsDy * w.mHScale,mDtDy * w.mVScale,recoveringMemory);
    if (prepared && mLastHidden && mDrawState == HAS_DRAWN) {
      if (showSurfaceRobustlyLocked()) {
        mLastHidden=false;
        if (mIsWallpaper) {
          mWallpaperControllerLocked.dispatchWallpaperVisibility(w,true);
        }
        mAnimator.setPendingLayoutChanges(w.getDisplayId(),WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
      }
 else {
        w.mOrientationChanging=false;
      }
    }
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
      w.mToken.hasVisible=true;
    }
  }
 else {
    if (DEBUG_ANIM && isAnimating()) {
      Slog.v(TAG,""String_Node_Str"" + this);
    }
    displayed=true;
  }
  if (displayed) {
    if (w.mOrientationChanging) {
      if (!w.isDrawnLw()) {
        mAnimator.mBulkUpdateParams&=~SET_ORIENTATION_CHANGE_COMPLETE;
        mAnimator.mLastWindowFreezeSource=w;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
 else {
        w.mOrientationChanging=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
    }
    w.mToken.hasVisible=true;
  }
}","void prepareSurfaceLocked(final boolean recoveringMemory){
  final WindowState w=mWin;
  if (mSurfaceController == null || !mSurfaceController.hasSurface()) {
    if (w.mOrientationChanging) {
      if (DEBUG_ORIENTATION) {
        Slog.v(TAG,""String_Node_Str"" + w);
      }
      w.mOrientationChanging=false;
    }
    return;
  }
  boolean displayed=false;
  computeShownFrameLocked();
  setSurfaceBoundariesLocked(recoveringMemory);
  if (mIsWallpaper && !mWin.mWallpaperVisible) {
    hide(""String_Node_Str"");
  }
 else   if (w.mAttachedHidden || !w.isOnScreen()) {
    hide(""String_Node_Str"");
    mWallpaperControllerLocked.hideWallpapers(w);
    if (w.mOrientationChanging) {
      w.mOrientationChanging=false;
      if (DEBUG_ORIENTATION)       Slog.v(TAG,""String_Node_Str"" + w);
    }
  }
 else   if (mLastLayer != mAnimLayer || mLastAlpha != mShownAlpha || mLastDsDx != mDsDx || mLastDtDx != mDtDx || mLastDsDy != mDsDy || mLastDtDy != mDtDy || w.mLastHScale != w.mHScale || w.mLastVScale != w.mVScale || mLastHidden) {
    displayed=true;
    mLastAlpha=mShownAlpha;
    mLastLayer=mAnimLayer;
    mLastDsDx=mDsDx;
    mLastDtDx=mDtDx;
    mLastDsDy=mDsDy;
    mLastDtDy=mDtDy;
    w.mLastHScale=w.mHScale;
    w.mLastVScale=w.mVScale;
    if (WindowManagerService.SHOW_TRANSACTIONS)     WindowManagerService.logSurface(w,""String_Node_Str"" + mSurfaceController + ""String_Node_Str""+ mShownAlpha+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str""+ mDsDx+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDx+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str""+ mDsDy+ ""String_Node_Str""+ w.mHScale+ ""String_Node_Str""+ mDtDy+ ""String_Node_Str""+ w.mVScale+ ""String_Node_Str"",null);
    boolean prepared=mSurfaceController.prepareToShowInTransaction(mShownAlpha,mAnimLayer,mDsDx * w.mHScale,mDtDx * w.mVScale,mDsDy * w.mHScale,mDtDy * w.mVScale,recoveringMemory);
    if (prepared && mLastHidden && mDrawState == HAS_DRAWN) {
      if (showSurfaceRobustlyLocked()) {
        mLastHidden=false;
        if (mIsWallpaper) {
          mWallpaperControllerLocked.dispatchWallpaperVisibility(w,true);
        }
        mAnimator.setPendingLayoutChanges(w.getDisplayId(),WindowManagerPolicy.FINISH_LAYOUT_REDO_ANIM);
      }
 else {
        w.mOrientationChanging=false;
      }
    }
    if (mSurfaceController != null && mSurfaceController.hasSurface()) {
      w.mToken.hasVisible=true;
    }
  }
 else {
    if (DEBUG_ANIM && isAnimating()) {
      Slog.v(TAG,""String_Node_Str"" + this);
    }
    displayed=true;
  }
  if (displayed) {
    if (w.mOrientationChanging) {
      if (!w.isDrawnLw()) {
        mAnimator.mBulkUpdateParams&=~SET_ORIENTATION_CHANGE_COMPLETE;
        mAnimator.mLastWindowFreezeSource=w;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
 else {
        w.mOrientationChanging=false;
        if (DEBUG_ORIENTATION)         Slog.v(TAG,""String_Node_Str"" + w);
      }
    }
    w.mToken.hasVisible=true;
  }
}",0.9942392409352762
193297,"void hide(){
  if (!mLastHidden) {
    mLastHidden=true;
    mSurfaceController.hideInTransaction();
  }
}","void hide(String reason){
  if (!mLastHidden) {
    mLastHidden=true;
    mSurfaceController.hideInTransaction(reason);
  }
}",0.9177489177489178
193298,"void setCropInTransaction(Rect clipRect,boolean recoveringMemory){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + clipRect.toShortString(),null);
  try {
    if (clipRect.width() > 0 && clipRect.height() > 0) {
      mSurfaceControl.setWindowCrop(clipRect);
      mHiddenForCrop=false;
    }
 else {
      hideInTransaction();
      mHiddenForCrop=true;
    }
  }
 catch (  RuntimeException e) {
    Slog.w(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ clipRect.toShortString(),e);
    if (!recoveringMemory) {
      mAnimator.reclaimSomeSurfaceMemory(""String_Node_Str"",true);
    }
  }
}","void setCropInTransaction(Rect clipRect,boolean recoveringMemory){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + clipRect.toShortString(),null);
  try {
    if (clipRect.width() > 0 && clipRect.height() > 0) {
      mSurfaceControl.setWindowCrop(clipRect);
      mHiddenForCrop=false;
    }
 else {
      hideInTransaction(""String_Node_Str"");
      mHiddenForCrop=true;
    }
  }
 catch (  RuntimeException e) {
    Slog.w(TAG,""String_Node_Str"" + this + ""String_Node_Str""+ clipRect.toShortString(),e);
    if (!recoveringMemory) {
      mAnimator.reclaimSomeSurfaceMemory(""String_Node_Str"",true);
    }
  }
}",0.9860997547015536
193299,"void hideInTransaction(){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"",null);
  if (mSurfaceControl != null) {
    mSurfaceShown=false;
    try {
      mSurfaceControl.hide();
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + this);
    }
  }
}","void hideInTransaction(String reason){
  if (SHOW_TRANSACTIONS)   logSurface(""String_Node_Str"" + reason + ""String_Node_Str"",null);
  if (mSurfaceControl != null) {
    mSurfaceShown=false;
    try {
      mSurfaceControl.hide();
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + this);
    }
  }
}",0.9306930693069309
193300,"/** 
 * An entry was removed.
 * @param removed the removed entry
 * @param sbn the notification the entry has, which doesn't need to be the same as it's internalnotification
 */
private void onEntryRemovedInternal(NotificationData.Entry removed,final StatusBarNotification sbn){
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  final NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    return;
  }
  if (notif.isGroupSummary()) {
    group.summary=null;
  }
 else {
    group.children.remove(removed);
  }
  if (group.children.isEmpty()) {
    if (group.summary == null) {
      mGroupMap.remove(groupKey);
    }
 else     if (!group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}","/** 
 * An entry was removed.
 * @param removed the removed entry
 * @param sbn the notification the entry has, which doesn't need to be the same as it's internalnotification
 */
private void onEntryRemovedInternal(NotificationData.Entry removed,final StatusBarNotification sbn){
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  final NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    return;
  }
  if (notif.isGroupChild()) {
    group.children.remove(removed);
  }
 else {
    group.summary=null;
  }
  if (group.children.isEmpty()) {
    if (group.summary == null) {
      mGroupMap.remove(groupKey);
    }
 else     if (!group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}",0.9295958279009128
193301,"public void onEntryAdded(NotificationData.Entry added){
  StatusBarNotification sbn=added.notification;
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    group=new NotificationGroup();
    mGroupMap.put(groupKey,group);
  }
  if (notif.isGroupSummary()) {
    group.summary=added;
    group.expanded=added.row.areChildrenExpanded();
    if (!group.children.isEmpty()) {
      mListener.onGroupCreatedFromChildren(group);
    }
  }
 else {
    group.children.add(added);
    if (group.summary != null && group.children.size() == 1 && !group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
}","public void onEntryAdded(NotificationData.Entry added){
  StatusBarNotification sbn=added.notification;
  Notification notif=sbn.getNotification();
  String groupKey=sbn.getGroupKey();
  NotificationGroup group=mGroupMap.get(groupKey);
  if (group == null) {
    group=new NotificationGroup();
    mGroupMap.put(groupKey,group);
  }
  if (notif.isGroupChild()) {
    group.children.add(added);
    if (group.summary != null && group.children.size() == 1 && !group.expanded) {
      group.summary.row.updateNotificationHeader();
    }
  }
 else {
    group.summary=added;
    group.expanded=added.row.areChildrenExpanded();
    if (!group.children.isEmpty()) {
      mListener.onGroupCreatedFromChildren(group);
    }
  }
}",0.6514522821576764
193302,"/** 
 * @return whether a given notification is a summary in a group which has children
 */
public boolean isSummaryOfGroup(StatusBarNotification sbn){
  if (sbn.getNotification().isGroupChild()) {
    return false;
  }
  NotificationGroup group=mGroupMap.get(sbn.getGroupKey());
  if (group == null) {
    return false;
  }
  return !group.children.isEmpty();
}","/** 
 * @return whether a given notification is a summary in a group which has children
 */
public boolean isSummaryOfGroup(StatusBarNotification sbn){
  if (!sbn.getNotification().isGroupSummary()) {
    return false;
  }
  NotificationGroup group=mGroupMap.get(sbn.getGroupKey());
  if (group == null) {
    return false;
  }
  return !group.children.isEmpty();
}",0.9821182943603852
193303,"public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
  Notification n=notification.getNotification();
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  mNotificationData.updateRanking(ranking);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}","public void updateNotification(StatusBarNotification notification,RankingMap ranking){
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + notification + ""String_Node_Str"");
  final String key=notification.getKey();
  Entry entry=mNotificationData.get(key);
  if (entry == null) {
    return;
  }
 else   if (mHeadsUpEntriesToRemoveOnSwitch.contains(entry)) {
    mHeadsUpEntriesToRemoveOnSwitch.remove(entry);
  }
  Notification n=notification.getNotification();
  boolean applyInPlace=!entry.cacheContentViews(mContext,notification.getNotification());
  boolean shouldInterrupt=shouldInterrupt(entry,notification);
  boolean alertAgain=alertAgain(entry,n);
  if (DEBUG) {
    Log.d(TAG,""String_Node_Str"" + applyInPlace + ""String_Node_Str""+ shouldInterrupt+ ""String_Node_Str""+ alertAgain);
  }
  entry.notification=notification;
  mGroupManager.onEntryUpdated(entry,entry.notification);
  boolean updateSuccessful=false;
  if (applyInPlace) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    try {
      if (entry.icon != null) {
        final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
        entry.icon.setNotification(n);
        if (!entry.icon.set(ic)) {
          handleNotificationError(notification,""String_Node_Str"" + ic);
          return;
        }
      }
      updateNotificationViews(entry,notification);
      updateSuccessful=true;
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + n.contentView.getPackage(),e);
    }
  }
  if (!updateSuccessful) {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"" + key);
    final StatusBarIcon ic=new StatusBarIcon(notification.getUser(),notification.getPackageName(),n.getSmallIcon(),n.iconLevel,n.number,n.tickerText);
    entry.icon.setNotification(n);
    entry.icon.set(ic);
    inflateViews(entry,mStackScroller);
  }
  updateHeadsUp(key,entry,shouldInterrupt,alertAgain);
  mNotificationData.updateRanking(ranking);
  updateNotifications();
  updateNotificationVetoButton(entry.row,notification);
  if (DEBUG) {
    boolean isForCurrentUser=isNotificationForCurrentProfiles(notification);
    Log.d(TAG,""String_Node_Str"" + (isForCurrentUser ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
  setAreThereNotifications();
}",0.9739744155271284
193304,"@Override public void onBindViewHolder(DocumentHolder holder,int position){
  final Context context=getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  final Cursor cursor=mModel.getItem(position);
  checkNotNull(cursor,""String_Node_Str"");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  holder.docId=docId;
  final View itemView=holder.view;
  itemView.setActivated(isSelected(position));
  final View line1=itemView.findViewById(R.id.line1);
  final View line2=itemView.findViewById(R.id.line2);
  final ImageView iconMime=(ImageView)itemView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)itemView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)itemView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)itemView.findViewById(android.R.id.icon1);
  final ImageView icon2=(ImageView)itemView.findViewById(android.R.id.icon2);
  final TextView summary=(TextView)itemView.findViewById(android.R.id.summary);
  final TextView date=(TextView)itemView.findViewById(R.id.date);
  final TextView size=(TextView)itemView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.preempt();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail && !mSvelteRecents;
  final boolean enabled=isDocumentEnabled(docMimeType,docFlags);
  final float iconAlpha=(state.derivedMode == MODE_LIST && !enabled) ? 0.5f : 1f;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize,iconAlpha);
      iconThumb.setTag(task);
      ProviderExecutor.forAuthority(docAuthority).execute(task);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconMime.setImageDrawable(null);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    iconThumb.setImageDrawable(null);
    iconMime.setImageDrawable(getDocumentIcon(mContext,docAuthority,docId,docMimeType,docIcon,state));
  }
  boolean hasLine1=false;
  boolean hasLine2=false;
  final boolean hideTitle=(state.derivedMode == MODE_GRID) && mHideGridTitles;
  if (!hideTitle) {
    title.setText(docDisplayName);
    hasLine1=true;
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    if (state.derivedMode == MODE_GRID) {
      iconDrawable=root.loadGridIcon(mContext);
    }
 else {
      iconDrawable=root.loadIcon(mContext);
    }
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
          hasLine2=true;
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=IconUtils.applyTintAttr(mContext,R.drawable.ic_doc_folder,android.R.attr.textColorPrimaryInverse);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (icon1 != null)   icon1.setVisibility(View.GONE);
  if (icon2 != null)   icon2.setVisibility(View.GONE);
  if (iconDrawable != null) {
    if (hasLine1) {
      icon1.setVisibility(View.VISIBLE);
      icon1.setImageDrawable(iconDrawable);
    }
 else {
      icon2.setVisibility(View.VISIBLE);
      icon2.setImageDrawable(iconDrawable);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(mContext,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(mContext,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  if (line1 != null) {
    line1.setVisibility(hasLine1 ? View.VISIBLE : View.GONE);
  }
  if (line2 != null) {
    line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  }
  setEnabledRecursive(itemView,enabled);
  iconMime.setAlpha(iconAlpha);
  iconThumb.setAlpha(iconAlpha);
  if (icon1 != null)   icon1.setAlpha(iconAlpha);
  if (icon2 != null)   icon2.setAlpha(iconAlpha);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDocumentView(itemView,cursor);
  }
}","@Override public void onBindViewHolder(DocumentHolder holder,int position){
  final Context context=getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  final Cursor cursor=mModel.getItem(position);
  checkNotNull(cursor,""String_Node_Str"");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  holder.docId=docId;
  final View itemView=holder.itemView;
  holder.setSelected(isSelected(position));
  final View line1=itemView.findViewById(R.id.line1);
  final View line2=itemView.findViewById(R.id.line2);
  final ImageView iconMime=(ImageView)itemView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)itemView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)itemView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)itemView.findViewById(android.R.id.icon1);
  final ImageView icon2=(ImageView)itemView.findViewById(android.R.id.icon2);
  final TextView summary=(TextView)itemView.findViewById(android.R.id.summary);
  final TextView date=(TextView)itemView.findViewById(R.id.date);
  final TextView size=(TextView)itemView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.preempt();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail && !mSvelteRecents;
  final boolean enabled=isDocumentEnabled(docMimeType,docFlags);
  final float iconAlpha=(state.derivedMode == MODE_LIST && !enabled) ? 0.5f : 1f;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize,iconAlpha);
      iconThumb.setTag(task);
      ProviderExecutor.forAuthority(docAuthority).execute(task);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconMime.setImageDrawable(null);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    iconThumb.setImageDrawable(null);
    iconMime.setImageDrawable(getDocumentIcon(mContext,docAuthority,docId,docMimeType,docIcon,state));
  }
  boolean hasLine1=false;
  boolean hasLine2=false;
  final boolean hideTitle=(state.derivedMode == MODE_GRID) && mHideGridTitles;
  if (!hideTitle) {
    title.setText(docDisplayName);
    hasLine1=true;
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    if (state.derivedMode == MODE_GRID) {
      iconDrawable=root.loadGridIcon(mContext);
    }
 else {
      iconDrawable=root.loadIcon(mContext);
    }
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
          hasLine2=true;
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=IconUtils.applyTintAttr(mContext,R.drawable.ic_doc_folder,android.R.attr.textColorPrimaryInverse);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (icon1 != null)   icon1.setVisibility(View.GONE);
  if (icon2 != null)   icon2.setVisibility(View.GONE);
  if (iconDrawable != null) {
    if (hasLine1) {
      icon1.setVisibility(View.VISIBLE);
      icon1.setImageDrawable(iconDrawable);
    }
 else {
      icon2.setVisibility(View.VISIBLE);
      icon2.setImageDrawable(iconDrawable);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(mContext,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(mContext,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  if (line1 != null) {
    line1.setVisibility(hasLine1 ? View.VISIBLE : View.GONE);
  }
  if (line2 != null) {
    line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  }
  setEnabledRecursive(itemView,enabled);
  iconMime.setAlpha(iconAlpha);
  iconThumb.setAlpha(iconAlpha);
  if (icon1 != null)   icon1.setAlpha(iconAlpha);
  if (icon2 != null)   icon2.setAlpha(iconAlpha);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDocumentView(itemView,cursor);
  }
}",0.9959240175344152
193305,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState(DirectoryFragment.this);
  final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  mAdapter=new DocumentsAdapter(context);
  mRecView.setAdapter(mAdapter);
  GestureDetector.SimpleOnGestureListener listener=new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return DirectoryFragment.this.onSingleTapUp(e);
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      Log.d(TAG,""String_Node_Str"");
      return DirectoryFragment.this.onDoubleTap(e);
    }
  }
;
  final GestureDetector detector=new GestureDetector(this.getContext(),listener);
  detector.setOnDoubleTapListener(listener);
  mRecView.addOnItemTouchListener(new OnItemTouchListener(){
    @Override public boolean onInterceptTouchEvent(    RecyclerView rv,    MotionEvent e){
      detector.onTouchEvent(e);
      return false;
    }
    @Override public void onTouchEvent(    RecyclerView rv,    MotionEvent e){
    }
    @Override public void onRequestDisallowInterceptTouchEvent(    boolean disallowIntercept){
    }
  }
);
  mSelectionManager=new MultiSelectManager(mRecView,state.allowMultiple ? MultiSelectManager.MODE_MULTIPLE : MultiSelectManager.MODE_SINGLE);
  mSelectionManager.addCallback(new SelectionModeListener());
  mModel=new Model(context,mAdapter);
  mModel.addUpdateListener(mModelUpdateListener);
  mType=getArguments().getInt(EXTRA_TYPE);
  mStateKey=buildStateKey(root,doc);
  mFragmentTuner=FragmentTuner.pick(state);
  mClipper=new DocumentClipper(context);
  if (mType == TYPE_RECENT_OPEN) {
    mHideGridTitles=MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,state.acceptMimes);
  }
 else {
    mHideGridTitles=(doc != null) && doc.isGridTitlesHidden();
  }
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  mSvelteRecents=am.isLowRamDevice() && (mType == TYPE_RECENT_OPEN);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(root.authority,root.rootId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
return new RecentLoader(context,roots,state);
default :
throw new IllegalStateException(""String_Node_Str"" + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mModel.update(result);
if (result.mode != MODE_UNKNOWN) {
state.derivedMode=result.mode;
}
state.derivedSortOrder=result.sortOrder;
((BaseActivity)context).onStateChanged();
updateDisplayState();
if (mType == TYPE_RECENT_OPEN && mModel.isEmpty() && !state.stackTouched && context instanceof DocumentsActivity) {
((DocumentsActivity)context).setRootsDrawerOpen(true);
}
final SparseArray<Parcelable> container=state.dirState.remove(mStateKey);
if (container != null && !getArguments().getBoolean(EXTRA_IGNORE_STATE,false)) {
getView().restoreHierarchyState(container);
}
 else if (mLastSortOrder != state.derivedSortOrder) {
mRecView.smoothScrollToPosition(0);
}
mLastSortOrder=state.derivedSortOrder;
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mModel.update(null);
}
}
;
getLoaderManager().restartLoader(LOADER_ID,null,mCallbacks);
updateDisplayState();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState(DirectoryFragment.this);
  final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  mAdapter=new DocumentsAdapter(context);
  mRecView.setAdapter(mAdapter);
  mDefaultItemColor=context.getResources().getColor(android.R.color.transparent);
  TypedValue selColor=new TypedValue();
  context.getTheme().resolveAttribute(android.R.attr.colorAccent,selColor,true);
  mSelectedItemColor=(selColor.data & 0x00ffffff) | 0x16000000;
  GestureDetector.SimpleOnGestureListener listener=new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return DirectoryFragment.this.onSingleTapUp(e);
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      Log.d(TAG,""String_Node_Str"");
      return DirectoryFragment.this.onDoubleTap(e);
    }
  }
;
  final GestureDetector detector=new GestureDetector(this.getContext(),listener);
  detector.setOnDoubleTapListener(listener);
  mRecView.addOnItemTouchListener(new OnItemTouchListener(){
    @Override public boolean onInterceptTouchEvent(    RecyclerView rv,    MotionEvent e){
      detector.onTouchEvent(e);
      return false;
    }
    @Override public void onTouchEvent(    RecyclerView rv,    MotionEvent e){
    }
    @Override public void onRequestDisallowInterceptTouchEvent(    boolean disallowIntercept){
    }
  }
);
  mSelectionManager=new MultiSelectManager(mRecView,state.allowMultiple ? MultiSelectManager.MODE_MULTIPLE : MultiSelectManager.MODE_SINGLE);
  mSelectionManager.addCallback(new SelectionModeListener());
  mModel=new Model(context,mAdapter);
  mModel.addUpdateListener(mModelUpdateListener);
  mType=getArguments().getInt(EXTRA_TYPE);
  mStateKey=buildStateKey(root,doc);
  mFragmentTuner=FragmentTuner.pick(state);
  mClipper=new DocumentClipper(context);
  if (mType == TYPE_RECENT_OPEN) {
    mHideGridTitles=MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,state.acceptMimes);
  }
 else {
    mHideGridTitles=(doc != null) && doc.isGridTitlesHidden();
  }
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  mSvelteRecents=am.isLowRamDevice() && (mType == TYPE_RECENT_OPEN);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(root.authority,root.rootId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
return new RecentLoader(context,roots,state);
default :
throw new IllegalStateException(""String_Node_Str"" + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mModel.update(result);
if (result.mode != MODE_UNKNOWN) {
state.derivedMode=result.mode;
}
state.derivedSortOrder=result.sortOrder;
((BaseActivity)context).onStateChanged();
updateDisplayState();
if (mType == TYPE_RECENT_OPEN && mModel.isEmpty() && !state.stackTouched && context instanceof DocumentsActivity) {
((DocumentsActivity)context).setRootsDrawerOpen(true);
}
final SparseArray<Parcelable> container=state.dirState.remove(mStateKey);
if (container != null && !getArguments().getBoolean(EXTRA_IGNORE_STATE,false)) {
getView().restoreHierarchyState(container);
}
 else if (mLastSortOrder != state.derivedSortOrder) {
mRecView.smoothScrollToPosition(0);
}
mLastSortOrder=state.derivedSortOrder;
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mModel.update(null);
}
}
;
getLoaderManager().restartLoader(LOADER_ID,null,mCallbacks);
updateDisplayState();
}",0.9693701961684066
193306,"public DocumentHolder(View view){
  super(view);
  this.view=view;
  this.view.setFocusable(true);
  this.view.setOnKeyListener(this);
}","public DocumentHolder(View view){
  super(view);
  view.setFocusable(true);
  view.setOnKeyListener(this);
}",0.8852459016393442
193307,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mMessageBar=MessageBar.create(getChildFragmentManager());
  mProgressBar=view.findViewById(R.id.progressbar);
  mEmptyView=view.findViewById(android.R.id.empty);
  mRecView=(RecyclerView)view.findViewById(R.id.list);
  mRecView.setRecyclerListener(new RecyclerListener(){
    @Override public void onViewRecycled(    ViewHolder holder){
      cancelThumbnailTask(holder.itemView);
    }
  }
);
  mRecView.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      mColumnCount=calculateColumnCount();
      if (mGridLayout != null) {
        mGridLayout.setSpanCount(mColumnCount);
      }
    }
  }
);
  ((SimpleItemAnimator)mRecView.getItemAnimator()).setSupportsChangeAnimations(false);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDirectoryView(mRecView);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mMessageBar=MessageBar.create(getChildFragmentManager());
  mProgressBar=view.findViewById(R.id.progressbar);
  mEmptyView=view.findViewById(android.R.id.empty);
  mRecView=(RecyclerView)view.findViewById(R.id.list);
  mRecView.setRecyclerListener(new RecyclerListener(){
    @Override public void onViewRecycled(    ViewHolder holder){
      cancelThumbnailTask(holder.itemView);
    }
  }
);
  mRecView.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      mColumnCount=calculateColumnCount();
      if (mGridLayout != null) {
        mGridLayout.setSpanCount(mColumnCount);
      }
    }
  }
);
  mRecView.setItemAnimator(new DirectoryItemAnimator(getActivity()));
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDirectoryView(mRecView);
  }
  return view;
}",0.9585695595290014
193308,"/** 
 * Notifies registered listeners when the selection status of a single item (identified by   {@code position}) changes.
 */
private void notifyItemStateChanged(int position,boolean selected){
  int lastListener=mCallbacks.size() - 1;
  for (int i=lastListener; i > -1; i--) {
    mCallbacks.get(i).onItemStateChanged(position,selected);
  }
  mAdapter.notifyItemChanged(position);
}","/** 
 * Notifies registered listeners when the selection status of a single item (identified by   {@code position}) changes.
 */
private void notifyItemStateChanged(int position,boolean selected){
  int lastListener=mCallbacks.size() - 1;
  for (int i=lastListener; i > -1; i--) {
    mCallbacks.get(i).onItemStateChanged(position,selected);
  }
  mAdapter.notifyItemChanged(position,SELECTION_CHANGED_MARKER);
}",0.9687108886107636
193309,"@Override public void onBindViewHolder(DocumentHolder holder,int position){
  final Context context=getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  final Cursor cursor=mModel.getItem(position);
  checkNotNull(cursor,""String_Node_Str"");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  holder.docId=docId;
  final View itemView=holder.view;
  itemView.setActivated(isSelected(position));
  final View line1=itemView.findViewById(R.id.line1);
  final View line2=itemView.findViewById(R.id.line2);
  final ImageView iconMime=(ImageView)itemView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)itemView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)itemView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)itemView.findViewById(android.R.id.icon1);
  final ImageView icon2=(ImageView)itemView.findViewById(android.R.id.icon2);
  final TextView summary=(TextView)itemView.findViewById(android.R.id.summary);
  final TextView date=(TextView)itemView.findViewById(R.id.date);
  final TextView size=(TextView)itemView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.preempt();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail && !mSvelteRecents;
  final boolean enabled=isDocumentEnabled(docMimeType,docFlags);
  final float iconAlpha=(state.derivedMode == MODE_LIST && !enabled) ? 0.5f : 1f;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize,iconAlpha);
      iconThumb.setTag(task);
      ProviderExecutor.forAuthority(docAuthority).execute(task);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconMime.setImageDrawable(null);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    iconThumb.setImageDrawable(null);
    iconMime.setImageDrawable(getDocumentIcon(mContext,docAuthority,docId,docMimeType,docIcon,state));
  }
  boolean hasLine1=false;
  boolean hasLine2=false;
  final boolean hideTitle=(state.derivedMode == MODE_GRID) && mHideGridTitles;
  if (!hideTitle) {
    title.setText(docDisplayName);
    hasLine1=true;
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    if (state.derivedMode == MODE_GRID) {
      iconDrawable=root.loadGridIcon(mContext);
    }
 else {
      iconDrawable=root.loadIcon(mContext);
    }
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
          hasLine2=true;
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=IconUtils.applyTintAttr(mContext,R.drawable.ic_doc_folder,android.R.attr.textColorPrimaryInverse);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (icon1 != null)   icon1.setVisibility(View.GONE);
  if (icon2 != null)   icon2.setVisibility(View.GONE);
  if (iconDrawable != null) {
    if (hasLine1) {
      icon1.setVisibility(View.VISIBLE);
      icon1.setImageDrawable(iconDrawable);
    }
 else {
      icon2.setVisibility(View.VISIBLE);
      icon2.setImageDrawable(iconDrawable);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(mContext,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(mContext,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  if (line1 != null) {
    line1.setVisibility(hasLine1 ? View.VISIBLE : View.GONE);
  }
  if (line2 != null) {
    line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  }
  setEnabledRecursive(itemView,enabled);
  iconMime.setAlpha(iconAlpha);
  iconThumb.setAlpha(iconAlpha);
  if (icon1 != null)   icon1.setAlpha(iconAlpha);
  if (icon2 != null)   icon2.setAlpha(iconAlpha);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDocumentView(itemView,cursor);
  }
}","@Override public void onBindViewHolder(DocumentHolder holder,int position){
  final Context context=getContext();
  final State state=getDisplayState(DirectoryFragment.this);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  final RootsCache roots=DocumentsApplication.getRootsCache(context);
  final ThumbnailCache thumbs=DocumentsApplication.getThumbnailsCache(context,mThumbSize);
  final Cursor cursor=mModel.getItem(position);
  checkNotNull(cursor,""String_Node_Str"");
  final String docAuthority=getCursorString(cursor,RootCursorWrapper.COLUMN_AUTHORITY);
  final String docRootId=getCursorString(cursor,RootCursorWrapper.COLUMN_ROOT_ID);
  final String docId=getCursorString(cursor,Document.COLUMN_DOCUMENT_ID);
  final String docMimeType=getCursorString(cursor,Document.COLUMN_MIME_TYPE);
  final String docDisplayName=getCursorString(cursor,Document.COLUMN_DISPLAY_NAME);
  final long docLastModified=getCursorLong(cursor,Document.COLUMN_LAST_MODIFIED);
  final int docIcon=getCursorInt(cursor,Document.COLUMN_ICON);
  final int docFlags=getCursorInt(cursor,Document.COLUMN_FLAGS);
  final String docSummary=getCursorString(cursor,Document.COLUMN_SUMMARY);
  final long docSize=getCursorLong(cursor,Document.COLUMN_SIZE);
  holder.docId=docId;
  final View itemView=holder.itemView;
  holder.setSelected(isSelected(position));
  final View line1=itemView.findViewById(R.id.line1);
  final View line2=itemView.findViewById(R.id.line2);
  final ImageView iconMime=(ImageView)itemView.findViewById(R.id.icon_mime);
  final ImageView iconThumb=(ImageView)itemView.findViewById(R.id.icon_thumb);
  final TextView title=(TextView)itemView.findViewById(android.R.id.title);
  final ImageView icon1=(ImageView)itemView.findViewById(android.R.id.icon1);
  final ImageView icon2=(ImageView)itemView.findViewById(android.R.id.icon2);
  final TextView summary=(TextView)itemView.findViewById(android.R.id.summary);
  final TextView date=(TextView)itemView.findViewById(R.id.date);
  final TextView size=(TextView)itemView.findViewById(R.id.size);
  final ThumbnailAsyncTask oldTask=(ThumbnailAsyncTask)iconThumb.getTag();
  if (oldTask != null) {
    oldTask.preempt();
    iconThumb.setTag(null);
  }
  iconMime.animate().cancel();
  iconThumb.animate().cancel();
  final boolean supportsThumbnail=(docFlags & Document.FLAG_SUPPORTS_THUMBNAIL) != 0;
  final boolean allowThumbnail=(state.derivedMode == MODE_GRID) || MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,docMimeType);
  final boolean showThumbnail=supportsThumbnail && allowThumbnail && !mSvelteRecents;
  final boolean enabled=isDocumentEnabled(docMimeType,docFlags);
  final float iconAlpha=(state.derivedMode == MODE_LIST && !enabled) ? 0.5f : 1f;
  boolean cacheHit=false;
  if (showThumbnail) {
    final Uri uri=DocumentsContract.buildDocumentUri(docAuthority,docId);
    final Bitmap cachedResult=thumbs.get(uri);
    if (cachedResult != null) {
      iconThumb.setImageBitmap(cachedResult);
      cacheHit=true;
    }
 else {
      iconThumb.setImageDrawable(null);
      final ThumbnailAsyncTask task=new ThumbnailAsyncTask(uri,iconMime,iconThumb,mThumbSize,iconAlpha);
      iconThumb.setTag(task);
      ProviderExecutor.forAuthority(docAuthority).execute(task);
    }
  }
  if (cacheHit) {
    iconMime.setAlpha(0f);
    iconMime.setImageDrawable(null);
    iconThumb.setAlpha(1f);
  }
 else {
    iconMime.setAlpha(1f);
    iconThumb.setAlpha(0f);
    iconThumb.setImageDrawable(null);
    iconMime.setImageDrawable(getDocumentIcon(mContext,docAuthority,docId,docMimeType,docIcon,state));
  }
  boolean hasLine1=false;
  boolean hasLine2=false;
  final boolean hideTitle=(state.derivedMode == MODE_GRID) && mHideGridTitles;
  if (!hideTitle) {
    title.setText(docDisplayName);
    hasLine1=true;
  }
  Drawable iconDrawable=null;
  if (mType == TYPE_RECENT_OPEN) {
    final RootInfo root=roots.getRootBlocking(docAuthority,docRootId);
    if (state.derivedMode == MODE_GRID) {
      iconDrawable=root.loadGridIcon(mContext);
    }
 else {
      iconDrawable=root.loadIcon(mContext);
    }
    if (summary != null) {
      final boolean alwaysShowSummary=getResources().getBoolean(R.bool.always_show_summary);
      if (alwaysShowSummary) {
        summary.setText(root.getDirectoryString());
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        if (iconDrawable != null && roots.isIconUniqueBlocking(root)) {
          summary.setVisibility(View.INVISIBLE);
        }
 else {
          summary.setText(root.getDirectoryString());
          summary.setVisibility(View.VISIBLE);
          summary.setTextAlignment(TextView.TEXT_ALIGNMENT_TEXT_END);
          hasLine2=true;
        }
      }
    }
  }
 else {
    if (Document.MIME_TYPE_DIR.equals(docMimeType) && state.derivedMode == MODE_GRID && showThumbnail) {
      iconDrawable=IconUtils.applyTintAttr(mContext,R.drawable.ic_doc_folder,android.R.attr.textColorPrimaryInverse);
    }
    if (summary != null) {
      if (docSummary != null) {
        summary.setText(docSummary);
        summary.setVisibility(View.VISIBLE);
        hasLine2=true;
      }
 else {
        summary.setVisibility(View.INVISIBLE);
      }
    }
  }
  if (icon1 != null)   icon1.setVisibility(View.GONE);
  if (icon2 != null)   icon2.setVisibility(View.GONE);
  if (iconDrawable != null) {
    if (hasLine1) {
      icon1.setVisibility(View.VISIBLE);
      icon1.setImageDrawable(iconDrawable);
    }
 else {
      icon2.setVisibility(View.VISIBLE);
      icon2.setImageDrawable(iconDrawable);
    }
  }
  if (docLastModified == -1) {
    date.setText(null);
  }
 else {
    date.setText(formatTime(mContext,docLastModified));
    hasLine2=true;
  }
  if (state.showSize) {
    size.setVisibility(View.VISIBLE);
    if (Document.MIME_TYPE_DIR.equals(docMimeType) || docSize == -1) {
      size.setText(null);
    }
 else {
      size.setText(Formatter.formatFileSize(mContext,docSize));
      hasLine2=true;
    }
  }
 else {
    size.setVisibility(View.GONE);
  }
  if (line1 != null) {
    line1.setVisibility(hasLine1 ? View.VISIBLE : View.GONE);
  }
  if (line2 != null) {
    line2.setVisibility(hasLine2 ? View.VISIBLE : View.GONE);
  }
  setEnabledRecursive(itemView,enabled);
  iconMime.setAlpha(iconAlpha);
  iconThumb.setAlpha(iconAlpha);
  if (icon1 != null)   icon1.setAlpha(iconAlpha);
  if (icon2 != null)   icon2.setAlpha(iconAlpha);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDocumentView(itemView,cursor);
  }
}",0.9959240175344152
193310,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState(DirectoryFragment.this);
  final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  mAdapter=new DocumentsAdapter(context);
  mRecView.setAdapter(mAdapter);
  GestureDetector.SimpleOnGestureListener listener=new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return DirectoryFragment.this.onSingleTapUp(e);
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      Log.d(TAG,""String_Node_Str"");
      return DirectoryFragment.this.onDoubleTap(e);
    }
  }
;
  final GestureDetector detector=new GestureDetector(this.getContext(),listener);
  detector.setOnDoubleTapListener(listener);
  mRecView.addOnItemTouchListener(new OnItemTouchListener(){
    @Override public boolean onInterceptTouchEvent(    RecyclerView rv,    MotionEvent e){
      detector.onTouchEvent(e);
      return false;
    }
    @Override public void onTouchEvent(    RecyclerView rv,    MotionEvent e){
    }
    @Override public void onRequestDisallowInterceptTouchEvent(    boolean disallowIntercept){
    }
  }
);
  mSelectionManager=new MultiSelectManager(mRecView,state.allowMultiple ? MultiSelectManager.MODE_MULTIPLE : MultiSelectManager.MODE_SINGLE);
  mSelectionManager.addCallback(new SelectionModeListener());
  mModel=new Model(context,mAdapter);
  mModel.addUpdateListener(mModelUpdateListener);
  mType=getArguments().getInt(EXTRA_TYPE);
  mStateKey=buildStateKey(root,doc);
  mFragmentTuner=pickFragmentTuner(state);
  mClipper=new DocumentClipper(context);
  if (mType == TYPE_RECENT_OPEN) {
    mHideGridTitles=MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,state.acceptMimes);
  }
 else {
    mHideGridTitles=(doc != null) && doc.isGridTitlesHidden();
  }
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  mSvelteRecents=am.isLowRamDevice() && (mType == TYPE_RECENT_OPEN);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(root.authority,root.rootId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
return new RecentLoader(context,roots,state);
default :
throw new IllegalStateException(""String_Node_Str"" + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mModel.update(result);
if (result.mode != MODE_UNKNOWN) {
state.derivedMode=result.mode;
}
state.derivedSortOrder=result.sortOrder;
((BaseActivity)context).onStateChanged();
updateDisplayState();
if (mType == TYPE_RECENT_OPEN && mModel.isEmpty() && !state.stackTouched && context instanceof DocumentsActivity) {
((DocumentsActivity)context).setRootsDrawerOpen(true);
}
final SparseArray<Parcelable> container=state.dirState.remove(mStateKey);
if (container != null && !getArguments().getBoolean(EXTRA_IGNORE_STATE,false)) {
getView().restoreHierarchyState(container);
}
 else if (mLastSortOrder != state.derivedSortOrder) {
mRecView.smoothScrollToPosition(0);
}
mLastSortOrder=state.derivedSortOrder;
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mModel.update(null);
}
}
;
getLoaderManager().restartLoader(LOADER_ID,null,mCallbacks);
mFragmentTuner.afterActivityCreated(this);
updateDisplayState();
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  final Context context=getActivity();
  final State state=getDisplayState(DirectoryFragment.this);
  final RootInfo root=getArguments().getParcelable(EXTRA_ROOT);
  final DocumentInfo doc=getArguments().getParcelable(EXTRA_DOC);
  mAdapter=new DocumentsAdapter(context);
  mRecView.setAdapter(mAdapter);
  mDefaultItemColor=context.getResources().getColor(android.R.color.transparent);
  TypedValue selColor=new TypedValue();
  context.getTheme().resolveAttribute(android.R.attr.colorAccent,selColor,true);
  mSelectedItemColor=(selColor.data & 0x00ffffff) | 0x16000000;
  GestureDetector.SimpleOnGestureListener listener=new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onSingleTapUp(    MotionEvent e){
      return DirectoryFragment.this.onSingleTapUp(e);
    }
    @Override public boolean onDoubleTap(    MotionEvent e){
      Log.d(TAG,""String_Node_Str"");
      return DirectoryFragment.this.onDoubleTap(e);
    }
  }
;
  final GestureDetector detector=new GestureDetector(this.getContext(),listener);
  detector.setOnDoubleTapListener(listener);
  mRecView.addOnItemTouchListener(new OnItemTouchListener(){
    @Override public boolean onInterceptTouchEvent(    RecyclerView rv,    MotionEvent e){
      detector.onTouchEvent(e);
      return false;
    }
    @Override public void onTouchEvent(    RecyclerView rv,    MotionEvent e){
    }
    @Override public void onRequestDisallowInterceptTouchEvent(    boolean disallowIntercept){
    }
  }
);
  mSelectionManager=new MultiSelectManager(mRecView,state.allowMultiple ? MultiSelectManager.MODE_MULTIPLE : MultiSelectManager.MODE_SINGLE);
  mSelectionManager.addCallback(new SelectionModeListener());
  mModel=new Model(context,mAdapter);
  mModel.addUpdateListener(mModelUpdateListener);
  mType=getArguments().getInt(EXTRA_TYPE);
  mStateKey=buildStateKey(root,doc);
  mFragmentTuner=pickFragmentTuner(state);
  mClipper=new DocumentClipper(context);
  if (mType == TYPE_RECENT_OPEN) {
    mHideGridTitles=MimePredicate.mimeMatches(MimePredicate.VISUAL_MIMES,state.acceptMimes);
  }
 else {
    mHideGridTitles=(doc != null) && doc.isGridTitlesHidden();
  }
  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
  mSvelteRecents=am.isLowRamDevice() && (mType == TYPE_RECENT_OPEN);
  mCallbacks=new LoaderCallbacks<DirectoryResult>(){
    @Override public Loader<DirectoryResult> onCreateLoader(    int id,    Bundle args){
      final String query=getArguments().getString(EXTRA_QUERY);
      Uri contentsUri;
switch (mType) {
case TYPE_NORMAL:
        contentsUri=DocumentsContract.buildChildDocumentsUri(doc.authority,doc.documentId);
      if (state.action == ACTION_MANAGE) {
        contentsUri=DocumentsContract.setManageMode(contentsUri);
      }
    return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_SEARCH:
  contentsUri=DocumentsContract.buildSearchDocumentsUri(root.authority,root.rootId,query);
if (state.action == ACTION_MANAGE) {
  contentsUri=DocumentsContract.setManageMode(contentsUri);
}
return new DirectoryLoader(context,mType,root,doc,contentsUri,state.userSortOrder);
case TYPE_RECENT_OPEN:
final RootsCache roots=DocumentsApplication.getRootsCache(context);
return new RecentLoader(context,roots,state);
default :
throw new IllegalStateException(""String_Node_Str"" + mType);
}
}
@Override public void onLoadFinished(Loader<DirectoryResult> loader,DirectoryResult result){
if (!isAdded()) return;
mModel.update(result);
if (result.mode != MODE_UNKNOWN) {
state.derivedMode=result.mode;
}
state.derivedSortOrder=result.sortOrder;
((BaseActivity)context).onStateChanged();
updateDisplayState();
if (mType == TYPE_RECENT_OPEN && mModel.isEmpty() && !state.stackTouched && context instanceof DocumentsActivity) {
((DocumentsActivity)context).setRootsDrawerOpen(true);
}
final SparseArray<Parcelable> container=state.dirState.remove(mStateKey);
if (container != null && !getArguments().getBoolean(EXTRA_IGNORE_STATE,false)) {
getView().restoreHierarchyState(container);
}
 else if (mLastSortOrder != state.derivedSortOrder) {
mRecView.smoothScrollToPosition(0);
}
mLastSortOrder=state.derivedSortOrder;
}
@Override public void onLoaderReset(Loader<DirectoryResult> loader){
mModel.update(null);
}
}
;
getLoaderManager().restartLoader(LOADER_ID,null,mCallbacks);
mFragmentTuner.afterActivityCreated(this);
updateDisplayState();
}",0.969662538347915
193311,"public DocumentHolder(View view){
  super(view);
  this.view=view;
  this.view.setFocusable(true);
  this.view.setOnKeyListener(this);
}","public DocumentHolder(View view){
  super(view);
  view.setFocusable(true);
  view.setOnKeyListener(this);
}",0.8852459016393442
193312,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mMessageBar=MessageBar.create(getChildFragmentManager());
  mProgressBar=view.findViewById(R.id.progressbar);
  mEmptyView=view.findViewById(android.R.id.empty);
  mRecView=(RecyclerView)view.findViewById(R.id.list);
  mRecView.setRecyclerListener(new RecyclerListener(){
    @Override public void onViewRecycled(    ViewHolder holder){
      cancelThumbnailTask(holder.itemView);
    }
  }
);
  mRecView.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      mColumnCount=calculateColumnCount();
      if (mGridLayout != null) {
        mGridLayout.setSpanCount(mColumnCount);
      }
    }
  }
);
  ((SimpleItemAnimator)mRecView.getItemAnimator()).setSupportsChangeAnimations(false);
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDirectoryView(mRecView);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final View view=inflater.inflate(R.layout.fragment_directory,container,false);
  mMessageBar=MessageBar.create(getChildFragmentManager());
  mProgressBar=view.findViewById(R.id.progressbar);
  mEmptyView=view.findViewById(android.R.id.empty);
  mRecView=(RecyclerView)view.findViewById(R.id.list);
  mRecView.setRecyclerListener(new RecyclerListener(){
    @Override public void onViewRecycled(    ViewHolder holder){
      cancelThumbnailTask(holder.itemView);
    }
  }
);
  mRecView.addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      mColumnCount=calculateColumnCount();
      if (mGridLayout != null) {
        mGridLayout.setSpanCount(mColumnCount);
      }
    }
  }
);
  mRecView.setItemAnimator(new DirectoryItemAnimator(getActivity()));
  if (DEBUG_ENABLE_DND) {
    setupDragAndDropOnDirectoryView(mRecView);
  }
  return view;
}",0.9585695595290014
193313,"/** 
 * Notifies registered listeners when the selection status of a single item (identified by   {@code position}) changes.
 */
private void notifyItemStateChanged(int position,boolean selected){
  int lastListener=mCallbacks.size() - 1;
  for (int i=lastListener; i > -1; i--) {
    mCallbacks.get(i).onItemStateChanged(position,selected);
  }
  mAdapter.notifyItemChanged(position);
}","/** 
 * Notifies registered listeners when the selection status of a single item (identified by   {@code position}) changes.
 */
private void notifyItemStateChanged(int position,boolean selected){
  int lastListener=mCallbacks.size() - 1;
  for (int i=lastListener; i > -1; i--) {
    mCallbacks.get(i).onItemStateChanged(position,selected);
  }
  mAdapter.notifyItemChanged(position,SELECTION_CHANGED_MARKER);
}",0.9687108886107636
193314,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193315,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193316,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193317,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193318,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193319,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193320,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193321,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193322,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193323,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193324,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193325,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193326,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193327,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193328,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193329,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193330,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193331,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193332,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193333,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193334,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193335,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193336,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193337,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193338,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193339,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193340,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193341,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193342,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193343,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193344,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193345,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193346,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193347,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193348,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193349,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193350,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193351,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193352,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193353,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193354,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193355,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193356,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193357,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193358,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193359,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193360,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193361,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193362,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193363,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193364,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193365,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193366,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193367,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193368,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193369,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193370,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193371,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193372,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193373,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193374,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193375,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193376,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193377,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193378,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193379,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193380,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193381,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193382,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193383,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193384,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193385,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193386,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193387,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193388,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193389,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193390,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193391,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193392,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193393,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193394,"/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int userId);","/** 
 * Returns true if the app has not been used for a certain amount of time. How much time? Could be hours, could be days, who knows?
 * @param packageName
 * @param uidForAppId The uid of the app, which will be used for its app id
 * @param userId
 * @return
 */
public abstract boolean isAppIdle(String packageName,int uidForAppId,int userId);",0.847682119205298
193395,"private void maybeUpdateUsageStatsLocked(ProcessRecord app){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    final long now=SystemClock.elapsedRealtime();
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=now;
      isInteraction=false;
    }
 else {
      isInteraction=now > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && !app.reportedInteraction) {
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
}","private void maybeUpdateUsageStatsLocked(ProcessRecord app,long nowElapsed){
  if (DEBUG_USAGE_STATS) {
    Slog.d(TAG,""String_Node_Str"" + Arrays.toString(app.getPackageList()) + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState);
  }
  if (mUsageStatsService == null) {
    return;
  }
  boolean isInteraction;
  if (app.curProcState <= ActivityManager.PROCESS_STATE_BOUND_FOREGROUND_SERVICE) {
    isInteraction=true;
    app.fgInteractionTime=0;
  }
 else   if (app.curProcState <= ActivityManager.PROCESS_STATE_TOP_SLEEPING) {
    if (app.fgInteractionTime == 0) {
      app.fgInteractionTime=nowElapsed;
      isInteraction=false;
    }
 else {
      isInteraction=nowElapsed > app.fgInteractionTime + SERVICE_USAGE_INTERACTION_TIME;
    }
  }
 else {
    isInteraction=app.curProcState <= ActivityManager.PROCESS_STATE_IMPORTANT_FOREGROUND;
    app.fgInteractionTime=0;
  }
  if (isInteraction && (!app.reportedInteraction || (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL)) {
    app.interactionEventTime=nowElapsed;
    String[] packages=app.getPackageList();
    if (packages != null) {
      for (int i=0; i < packages.length; i++) {
        mUsageStatsService.reportEvent(packages[i],app.userId,UsageEvents.Event.SYSTEM_INTERACTION);
      }
    }
  }
  app.reportedInteraction=isInteraction;
  if (!isInteraction) {
    app.interactionEventTime=0;
  }
}",0.8176712841632348
193396,"private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,SystemClock.elapsedRealtime());
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}","private final boolean applyOomAdjLocked(ProcessRecord app,boolean doingAll,long now,long nowElapsed){
  boolean success=true;
  if (app.curRawAdj != app.setRawAdj) {
    app.setRawAdj=app.curRawAdj;
  }
  int changes=0;
  if (app.curAdj != app.setAdj) {
    ProcessList.setOomAdj(app.pid,app.info.uid,app.curAdj);
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.processName+ ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ app.adjType);
    app.setAdj=app.curAdj;
  }
  if (app.setSchedGroup != app.curSchedGroup) {
    app.setSchedGroup=app.curSchedGroup;
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curSchedGroup);
    if (app.waitingToKill != null && app.curReceiver == null && app.setSchedGroup == Process.THREAD_GROUP_BG_NONINTERACTIVE) {
      app.kill(app.waitingToKill,true);
      success=false;
    }
 else {
      if (true) {
        long oldId=Binder.clearCallingIdentity();
        try {
          Process.setProcessGroup(app.pid,app.curSchedGroup);
        }
 catch (        Exception e) {
          Slog.w(TAG,""String_Node_Str"" + app.pid + ""String_Node_Str""+ app.curSchedGroup);
          e.printStackTrace();
        }
 finally {
          Binder.restoreCallingIdentity(oldId);
        }
      }
 else {
        if (app.thread != null) {
          try {
            app.thread.setSchedulingGroup(app.curSchedGroup);
          }
 catch (          RemoteException e) {
          }
        }
      }
      Process.setSwappiness(app.pid,app.curSchedGroup <= Process.THREAD_GROUP_BG_NONINTERACTIVE);
    }
  }
  if (app.repForegroundActivities != app.foregroundActivities) {
    app.repForegroundActivities=app.foregroundActivities;
    changes|=ProcessChangeItem.CHANGE_ACTIVITIES;
  }
  if (app.repProcState != app.curProcState) {
    app.repProcState=app.curProcState;
    changes|=ProcessChangeItem.CHANGE_PROCESS_STATE;
    if (app.thread != null) {
      try {
        if (false) {
          Slog.i(TAG,""String_Node_Str"" + app.repProcState + ""String_Node_Str""+ app);
        }
        app.thread.setProcessState(app.repProcState);
      }
 catch (      RemoteException e) {
      }
    }
  }
  if (app.setProcState == ActivityManager.PROCESS_STATE_NONEXISTENT || ProcessList.procStatesDifferForMem(app.curProcState,app.setProcState)) {
    if (false && mTestPssMode && app.setProcState >= 0 && app.lastStateTime <= (now - 200)) {
      long start=SystemClock.uptimeMillis();
      long pss=Debug.getPss(app.pid,mTmpLong,null);
      recordPssSampleLocked(app,app.curProcState,pss,mTmpLong[0],now);
      mPendingPssProcesses.remove(app);
      Slog.i(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ app.setProcState+ ""String_Node_Str""+ app.curProcState+ ""String_Node_Str""+ (SystemClock.uptimeMillis() - start)+ ""String_Node_Str"");
    }
    app.lastStateTime=now;
    app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,true,mTestPssMode,isSleeping(),now);
    if (DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + ProcessList.makeProcStateString(app.setProcState) + ""String_Node_Str""+ ProcessList.makeProcStateString(app.curProcState)+ ""String_Node_Str""+ (app.nextPssTime - now)+ ""String_Node_Str""+ app);
  }
 else {
    if (now > app.nextPssTime || (now > (app.lastPssTime + ProcessList.PSS_MAX_INTERVAL) && now > (app.lastStateTime + ProcessList.minTimeFromStateChange(mTestPssMode)))) {
      requestPssLocked(app,app.setProcState);
      app.nextPssTime=ProcessList.computeNextPssTime(app.curProcState,false,mTestPssMode,isSleeping(),now);
    }
 else     if (false && DEBUG_PSS)     Slog.d(TAG_PSS,""String_Node_Str"" + app + ""String_Node_Str""+ (app.nextPssTime - now));
  }
  if (app.setProcState != app.curProcState) {
    if (DEBUG_SWITCH || DEBUG_OOM_ADJ)     Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ app.curProcState);
    boolean setImportant=app.setProcState < ActivityManager.PROCESS_STATE_SERVICE;
    boolean curImportant=app.curProcState < ActivityManager.PROCESS_STATE_SERVICE;
    if (setImportant && !curImportant) {
      BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
        app.lastWakeTime=stats.getProcessWakeTime(app.info.uid,app.pid,nowElapsed);
      }
      app.lastCpuTime=app.curCpuTime;
    }
    maybeUpdateUsageStatsLocked(app,nowElapsed);
    app.setProcState=app.curProcState;
    if (app.setProcState >= ActivityManager.PROCESS_STATE_HOME) {
      app.notCachedSinceIdle=false;
    }
    if (!doingAll) {
      setProcessTrackerStateLocked(app,mProcessStats.getMemFactorLocked(),now);
    }
 else {
      app.procStateChanged=true;
    }
  }
 else   if (app.reportedInteraction && (nowElapsed - app.interactionEventTime) > USAGE_STATS_INTERACTION_INTERVAL) {
    maybeUpdateUsageStatsLocked(app,nowElapsed);
  }
  if (changes != 0) {
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + app + ""String_Node_Str""+ changes);
    int i=mPendingProcessChanges.size() - 1;
    ProcessChangeItem item=null;
    while (i >= 0) {
      item=mPendingProcessChanges.get(i);
      if (item.pid == app.pid) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
        break;
      }
      i--;
    }
    if (i < 0) {
      final int NA=mAvailProcessChanges.size();
      if (NA > 0) {
        item=mAvailProcessChanges.remove(NA - 1);
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
 else {
        item=new ProcessChangeItem();
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + item);
      }
      item.changes=0;
      item.pid=app.pid;
      item.uid=app.info.uid;
      if (mPendingProcessChanges.size() == 0) {
        if (DEBUG_PROCESS_OBSERVERS)         Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"");
        mUiHandler.obtainMessage(DISPATCH_PROCESSES_CHANGED).sendToTarget();
      }
      mPendingProcessChanges.add(item);
    }
    item.changes|=changes;
    item.processState=app.repProcState;
    item.foregroundActivities=app.repForegroundActivities;
    if (DEBUG_PROCESS_OBSERVERS)     Slog.i(TAG_PROCESS_OBSERVERS,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(item)) + ""String_Node_Str""+ app.toShortString()+ ""String_Node_Str""+ item.changes+ ""String_Node_Str""+ item.processState+ ""String_Node_Str""+ item.foregroundActivities+ ""String_Node_Str""+ app.adjType+ ""String_Node_Str""+ app.adjSource+ ""String_Node_Str""+ app.adjTarget);
  }
  return success;
}",0.9820286323484618
193397,"final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}","final void updateOomAdjLocked(){
  final ActivityRecord TOP_ACT=resumedAppLocked();
  final ProcessRecord TOP_APP=TOP_ACT != null ? TOP_ACT.app : null;
  final long now=SystemClock.uptimeMillis();
  final long nowElapsed=SystemClock.elapsedRealtime();
  final long oldTime=now - ProcessList.MAX_EMPTY_TIME;
  final int N=mLruProcesses.size();
  if (false) {
    RuntimeException e=new RuntimeException();
    e.fillInStackTrace();
    Slog.i(TAG,""String_Node_Str"" + TOP_ACT,e);
  }
  for (int i=mActiveUids.size() - 1; i >= 0; i--) {
    final UidRecord uidRec=mActiveUids.valueAt(i);
    if (false && DEBUG_UID_OBSERVERS)     Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec);
    uidRec.reset();
  }
  mAdjSeq++;
  mNewNumServiceProcs=0;
  mNewNumAServiceProcs=0;
  final int emptyProcessLimit;
  final int cachedProcessLimit;
  if (mProcessLimit <= 0) {
    emptyProcessLimit=cachedProcessLimit=0;
  }
 else   if (mProcessLimit == 1) {
    emptyProcessLimit=1;
    cachedProcessLimit=0;
  }
 else {
    emptyProcessLimit=ProcessList.computeEmptyProcessLimit(mProcessLimit);
    cachedProcessLimit=mProcessLimit - emptyProcessLimit;
  }
  int numSlots=(ProcessList.CACHED_APP_MAX_ADJ - ProcessList.CACHED_APP_MIN_ADJ + 1) / 2;
  int numEmptyProcs=N - mNumNonCachedProcs - mNumCachedHiddenProcs;
  if (numEmptyProcs > cachedProcessLimit) {
    numEmptyProcs=cachedProcessLimit;
  }
  int emptyFactor=numEmptyProcs / numSlots;
  if (emptyFactor < 1)   emptyFactor=1;
  int cachedFactor=(mNumCachedHiddenProcs > 0 ? mNumCachedHiddenProcs : 1) / numSlots;
  if (cachedFactor < 1)   cachedFactor=1;
  int stepCached=0;
  int stepEmpty=0;
  int numCached=0;
  int numEmpty=0;
  int numTrimming=0;
  mNumNonCachedProcs=0;
  mNumCachedHiddenProcs=0;
  int curCachedAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextCachedAdj=curCachedAdj + 1;
  int curEmptyAdj=ProcessList.CACHED_APP_MIN_ADJ;
  int nextEmptyAdj=curEmptyAdj + 2;
  for (int i=N - 1; i >= 0; i--) {
    ProcessRecord app=mLruProcesses.get(i);
    if (!app.killedByAm && app.thread != null) {
      app.procStateChanged=false;
      computeOomAdjLocked(app,ProcessList.UNKNOWN_ADJ,TOP_APP,true,now);
      if (app.curAdj >= ProcessList.UNKNOWN_ADJ) {
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
          app.curRawAdj=curCachedAdj;
        app.curAdj=app.modifyRawOomAdj(curCachedAdj);
      if (DEBUG_LRU && false)       Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curCachedAdj+ ""String_Node_Str"");
    if (curCachedAdj != nextCachedAdj) {
      stepCached++;
      if (stepCached >= cachedFactor) {
        stepCached=0;
        curCachedAdj=nextCachedAdj;
        nextCachedAdj+=2;
        if (nextCachedAdj > ProcessList.CACHED_APP_MAX_ADJ) {
          nextCachedAdj=ProcessList.CACHED_APP_MAX_ADJ;
        }
      }
    }
  break;
default :
app.curRawAdj=curEmptyAdj;
app.curAdj=app.modifyRawOomAdj(curEmptyAdj);
if (DEBUG_LRU && false) Slog.d(TAG_LRU,""String_Node_Str"" + i + ""String_Node_Str""+ app.curAdj+ ""String_Node_Str""+ curEmptyAdj+ ""String_Node_Str"");
if (curEmptyAdj != nextEmptyAdj) {
stepEmpty++;
if (stepEmpty >= emptyFactor) {
stepEmpty=0;
curEmptyAdj=nextEmptyAdj;
nextEmptyAdj+=2;
if (nextEmptyAdj > ProcessList.CACHED_APP_MAX_ADJ) {
nextEmptyAdj=ProcessList.CACHED_APP_MAX_ADJ;
}
}
}
break;
}
}
applyOomAdjLocked(app,true,now,nowElapsed);
switch (app.curProcState) {
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY:
case ActivityManager.PROCESS_STATE_CACHED_ACTIVITY_CLIENT:
mNumCachedHiddenProcs++;
numCached++;
if (numCached > cachedProcessLimit) {
app.kill(""String_Node_Str"" + numCached,true);
}
break;
case ActivityManager.PROCESS_STATE_CACHED_EMPTY:
if (numEmpty > ProcessList.TRIM_EMPTY_APPS && app.lastActivityTime < oldTime) {
app.kill(""String_Node_Str"" + ((oldTime + ProcessList.MAX_EMPTY_TIME - app.lastActivityTime) / 1000) + ""String_Node_Str"",true);
}
 else {
numEmpty++;
if (numEmpty > emptyProcessLimit) {
app.kill(""String_Node_Str"" + numEmpty,true);
}
}
break;
default :
mNumNonCachedProcs++;
break;
}
if (app.isolated && app.services.size() <= 0) {
app.kill(""String_Node_Str"",true);
}
 else {
final UidRecord uidRec=app.uidRecord;
if (uidRec != null && uidRec.curProcState > app.curProcState) {
uidRec.curProcState=app.curProcState;
}
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
numTrimming++;
}
}
}
mNumServiceProcs=mNewNumServiceProcs;
final int numCachedAndEmpty=numCached + numEmpty;
int memFactor;
if (numCached <= ProcessList.TRIM_CACHED_APPS && numEmpty <= ProcessList.TRIM_EMPTY_APPS) {
if (numCachedAndEmpty <= ProcessList.TRIM_CRITICAL_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_CRITICAL;
}
 else if (numCachedAndEmpty <= ProcessList.TRIM_LOW_THRESHOLD) {
memFactor=ProcessStats.ADJ_MEM_FACTOR_LOW;
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_MODERATE;
}
}
 else {
memFactor=ProcessStats.ADJ_MEM_FACTOR_NORMAL;
}
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + memFactor + ""String_Node_Str""+ mLastMemoryLevel+ ""String_Node_Str""+ mAllowLowerMemLevel+ ""String_Node_Str""+ mLruProcesses.size()+ ""String_Node_Str""+ mLastNumProcesses);
if (memFactor > mLastMemoryLevel) {
if (!mAllowLowerMemLevel || mLruProcesses.size() >= mLastNumProcesses) {
memFactor=mLastMemoryLevel;
if (DEBUG_OOM_ADJ) Slog.d(TAG_OOM_ADJ,""String_Node_Str"");
}
}
mLastMemoryLevel=memFactor;
mLastNumProcesses=mLruProcesses.size();
boolean allChanged=mProcessStats.setMemFactorLocked(memFactor,!isSleeping(),now);
final int trackerMemFactor=mProcessStats.getMemFactorLocked();
if (memFactor != ProcessStats.ADJ_MEM_FACTOR_NORMAL) {
if (mLowRamStartTime == 0) {
mLowRamStartTime=now;
}
int step=0;
int fgTrimLevel;
switch (memFactor) {
case ProcessStats.ADJ_MEM_FACTOR_CRITICAL:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_CRITICAL;
break;
case ProcessStats.ADJ_MEM_FACTOR_LOW:
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_LOW;
break;
default :
fgTrimLevel=ComponentCallbacks2.TRIM_MEMORY_RUNNING_MODERATE;
break;
}
int factor=numTrimming / 3;
int minFactor=2;
if (mHomeProcess != null) minFactor++;
if (mPreviousProcess != null) minFactor++;
if (factor < minFactor) factor=minFactor;
int curLevel=ComponentCallbacks2.TRIM_MEMORY_COMPLETE;
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if (app.curProcState >= ActivityManager.PROCESS_STATE_HOME && !app.killedByAm) {
if (app.trimMemoryLevel < curLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ curLevel);
app.thread.scheduleTrimMemory(curLevel);
}
 catch (RemoteException e) {
}
if (false) {
if (curLevel >= ComponentCallbacks2.TRIM_MEMORY_COMPLETE && app != mHomeProcess && app != mPreviousProcess) {
mStackSupervisor.scheduleDestroyAllActivities(app,""String_Node_Str"");
}
}
}
app.trimMemoryLevel=curLevel;
step++;
if (step >= factor) {
step=0;
switch (curLevel) {
case ComponentCallbacks2.TRIM_MEMORY_COMPLETE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_MODERATE;
break;
case ComponentCallbacks2.TRIM_MEMORY_MODERATE:
curLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
break;
}
}
}
 else if (app.curProcState == ActivityManager.PROCESS_STATE_HEAVY_WEIGHT) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_BACKGROUND && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_BACKGROUND);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=ComponentCallbacks2.TRIM_MEMORY_BACKGROUND;
}
 else {
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
final int level=ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN;
if (app.trimMemoryLevel < level && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ level);
app.thread.scheduleTrimMemory(level);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
if (app.trimMemoryLevel < fgTrimLevel && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ fgTrimLevel);
app.thread.scheduleTrimMemory(fgTrimLevel);
}
 catch (RemoteException e) {
}
}
app.trimMemoryLevel=fgTrimLevel;
}
}
}
 else {
if (mLowRamStartTime != 0) {
mLowRamTimeSinceLastIdle+=now - mLowRamStartTime;
mLowRamStartTime=0;
}
for (int i=N - 1; i >= 0; i--) {
ProcessRecord app=mLruProcesses.get(i);
if (allChanged || app.procStateChanged) {
setProcessTrackerStateLocked(app,trackerMemFactor,now);
app.procStateChanged=false;
}
if ((app.curProcState >= ActivityManager.PROCESS_STATE_IMPORTANT_BACKGROUND || app.systemNoUi) && app.pendingUiClean) {
if (app.trimMemoryLevel < ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN && app.thread != null) {
try {
if (DEBUG_SWITCH || DEBUG_OOM_ADJ) Slog.v(TAG_OOM_ADJ,""String_Node_Str"" + app.processName + ""String_Node_Str""+ ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
app.thread.scheduleTrimMemory(ComponentCallbacks2.TRIM_MEMORY_UI_HIDDEN);
}
 catch (RemoteException e) {
}
}
app.pendingUiClean=false;
}
app.trimMemoryLevel=0;
}
}
if (mAlwaysFinishActivities) {
mStackSupervisor.scheduleDestroyAllActivities(null,""String_Node_Str"");
}
if (allChanged) {
requestPssAllProcsLocked(now,false,mProcessStats.isMemFactorLowered());
}
for (int i=mActiveUids.size() - 1; i >= 0; i--) {
final UidRecord uidRec=mActiveUids.valueAt(i);
if (uidRec.setProcState != uidRec.curProcState) {
if (DEBUG_UID_OBSERVERS) Slog.i(TAG_UID_OBSERVERS,""String_Node_Str"" + uidRec + ""String_Node_Str""+ uidRec.setProcState+ ""String_Node_Str""+ uidRec.curProcState);
uidRec.setProcState=uidRec.curProcState;
enqueueUidChangeLocked(uidRec,false);
}
}
if (mProcessStats.shouldWriteNowLocked(now)) {
mHandler.post(new Runnable(){
@Override public void run(){
synchronized (ActivityManagerService.this) {
mProcessStats.writeStateAsyncLocked();
}
}
}
);
}
if (DEBUG_OOM_ADJ) {
final long duration=SystemClock.uptimeMillis() - now;
if (false) {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"",new RuntimeException(""String_Node_Str"").fillInStackTrace());
}
 else {
Slog.d(TAG_OOM_ADJ,""String_Node_Str"" + duration + ""String_Node_Str"");
}
}
}",0.9968779564806056
193398,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}","void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(userId);
  pw.print(""String_Node_Str"");
  pw.print(info.uid);
  if (uid != info.uid) {
    pw.print(""String_Node_Str"");
    pw.print(uid);
  }
  pw.print(""String_Node_Str"");
  if (gids != null) {
    for (int gi=0; gi < gids.length; gi++) {
      if (gi != 0)       pw.print(""String_Node_Str"");
      pw.print(gids[gi]);
    }
  }
  pw.println(""String_Node_Str"");
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(requiredAbi);
  pw.print(""String_Node_Str"");
  pw.println(instructionSet);
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  for (int i=0; i < pkgList.size(); i++) {
    if (i > 0)     pw.print(""String_Node_Str"");
    pw.print(pkgList.keyAt(i));
  }
  pw.println(""String_Node_Str"");
  if (pkgDeps != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    for (int i=0; i < pkgDeps.size(); i++) {
      if (i > 0)       pw.print(""String_Node_Str"");
      pw.print(pkgDeps.valueAt(i));
    }
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(compat);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(thread);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.println(starting);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastActivityTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastPssTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(nextPssTime,now,pw);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(adjSeq);
  pw.print(""String_Node_Str"");
  pw.print(lruSeq);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastPss * 1024);
  pw.print(""String_Node_Str"");
  DebugUtils.printSizeValue(pw,lastCachedPss * 1024);
  pw.println();
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(cached);
  pw.print(""String_Node_Str"");
  pw.println(empty);
  if (serviceb) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(serviceb);
    pw.print(""String_Node_Str"");
    pw.println(serviceHighRam);
  }
  if (notCachedSinceIdle) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(notCachedSinceIdle);
    pw.print(""String_Node_Str"");
    pw.println(initialIdlePss);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(setSchedGroup);
  pw.print(""String_Node_Str"");
  pw.print(systemNoUi);
  pw.print(""String_Node_Str"");
  pw.println(trimMemoryLevel);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(curProcState);
  pw.print(""String_Node_Str"");
  pw.print(repProcState);
  pw.print(""String_Node_Str"");
  pw.print(pssProcState);
  pw.print(""String_Node_Str"");
  pw.print(setProcState);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastStateTime,now,pw);
  pw.println();
  if (hasShownUi || pendingUiClean || hasAboveClient|| treatLikeActivity) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasShownUi);
    pw.print(""String_Node_Str"");
    pw.print(pendingUiClean);
    pw.print(""String_Node_Str"");
    pw.print(hasAboveClient);
    pw.print(""String_Node_Str"");
    pw.println(treatLikeActivity);
  }
  if (setIsForeground || foregroundServices || forcingToForeground != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(setIsForeground);
    pw.print(""String_Node_Str"");
    pw.print(foregroundServices);
    pw.print(""String_Node_Str"");
    pw.println(forcingToForeground);
  }
  if (reportedInteraction || fgInteractionTime != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(reportedInteraction);
    if (interactionEventTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(interactionEventTime,SystemClock.elapsedRealtime(),pw);
    }
    if (fgInteractionTime != 0) {
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(fgInteractionTime,SystemClock.elapsedRealtime(),pw);
    }
    pw.println();
  }
  if (persistent || removed) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(persistent);
    pw.print(""String_Node_Str"");
    pw.println(removed);
  }
  if (hasClientActivities || foregroundActivities || repForegroundActivities) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(hasClientActivities);
    pw.print(""String_Node_Str"");
    pw.print(foregroundActivities);
    pw.print(""String_Node_Str"");
    pw.print(repForegroundActivities);
    pw.println(""String_Node_Str"");
  }
  if (hasStartedServices) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(hasStartedServices);
  }
  if (setProcState >= ActivityManager.PROCESS_STATE_SERVICE) {
    long wtime;
synchronized (mBatteryStats) {
      wtime=mBatteryStats.getProcessWakeTime(info.uid,pid,SystemClock.elapsedRealtime());
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastWakeTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(wtime - lastWakeTime,pw);
    pw.println(""String_Node_Str"");
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(lastCpuTime);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(curCpuTime - lastCpuTime,pw);
    pw.println(""String_Node_Str"");
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastRequestedGc,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(lastLowMemory,now,pw);
  pw.print(""String_Node_Str"");
  pw.println(reportLowMemory);
  if (killed || killedByAm || waitingToKill != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(killed);
    pw.print(""String_Node_Str"");
    pw.print(killedByAm);
    pw.print(""String_Node_Str"");
    pw.println(waitingToKill);
  }
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.print(bad);
    if (errorReportReceiver != null) {
      pw.print(""String_Node_Str"");
      pw.print(errorReportReceiver.flattenToShortString());
    }
    pw.println();
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < activities.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(activities.get(i));
    }
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < services.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(services.valueAt(i));
    }
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(execServicesFg);
    pw.println(""String_Node_Str"");
    for (int i=0; i < executingServices.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(executingServices.valueAt(i));
    }
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < connections.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(connections.valueAt(i));
    }
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < pubProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.keyAt(i));
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(pubProviders.valueAt(i));
    }
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < conProviders.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(conProviders.get(i).toShortString());
    }
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < receivers.size(); i++) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(receivers.valueAt(i));
    }
  }
}",0.9916822100115944
193399,"boolean isAppIdle(String packageName,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,userId);
}","boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return !mAppIdleParoleOn && mUsageStats.isAppIdle(packageName,uidForAppId,userId);
}",0.8985507246376812
193400,"private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      if (packageName != null && mAppIdleMonitor.isAppIdle(packageName,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}","private long maybeStartNextSyncH(){
  final boolean isLoggable=Log.isLoggable(TAG,Log.VERBOSE);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  if (!mDataConnectionIsConnected) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mStorageIsLow) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mDeviceIsIdle) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  if (mRunningAccounts == INITIAL_ACCOUNTS_ARRAY) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"");
    }
    return Long.MAX_VALUE;
  }
  final long now=SystemClock.elapsedRealtime();
  long nextReadyToRunTime=Long.MAX_VALUE;
  ArrayList<SyncOperation> operations=new ArrayList<SyncOperation>();
synchronized (mSyncQueue) {
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + mSyncQueue.getOperations().size());
    }
    final Iterator<SyncOperation> operationIterator=mSyncQueue.getOperations().iterator();
    final ActivityManager activityManager=(ActivityManager)mContext.getSystemService(Context.ACTIVITY_SERVICE);
    final Set<Integer> removedUsers=Sets.newHashSet();
    while (operationIterator.hasNext()) {
      final SyncOperation op=operationIterator.next();
      if (!activityManager.isUserRunning(op.target.userId)) {
        final UserInfo userInfo=mUserManager.getUserInfo(op.target.userId);
        if (userInfo == null) {
          removedUsers.add(op.target.userId);
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + op.target.userId + ""String_Node_Str"");
        }
        continue;
      }
      if (!isOperationValidLocked(op)) {
        operationIterator.remove();
        mSyncStorageEngine.deleteFromPending(op.pendingOperation);
        continue;
      }
      if (op.effectiveRunTime - op.flexTime > now) {
        if (nextReadyToRunTime > op.effectiveRunTime) {
          nextReadyToRunTime=op.effectiveRunTime;
        }
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + op.effectiveRunTime + ""String_Node_Str""+ op.flexTime+ ""String_Node_Str""+ now);
        }
        continue;
      }
      String packageName=getPackageName(op.target);
      ApplicationInfo ai=null;
      if (packageName != null) {
        try {
          ai=mContext.getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
        }
 catch (        NameNotFoundException e) {
        }
      }
      if (ai != null && mAppIdleMonitor.isAppIdle(packageName,ai.uid,op.target.userId)) {
        increaseBackoffSetting(op);
        op.appIdle=true;
        if (isLoggable) {
          Log.v(TAG,""String_Node_Str"" + packageName);
        }
        continue;
      }
 else {
        op.appIdle=false;
      }
      operations.add(op);
    }
    for (    Integer user : removedUsers) {
      if (mUserManager.getUserInfo(user) == null) {
        onUserRemoved(user);
      }
    }
  }
  if (isLoggable)   Log.v(TAG,""String_Node_Str"" + operations.size());
  Collections.sort(operations);
  if (isLoggable)   Log.v(TAG,""String_Node_Str"");
  for (int i=0, N=operations.size(); i < N; i++) {
    final SyncOperation candidate=operations.get(i);
    final boolean candidateIsInitialization=candidate.isInitialization();
    int numInit=0;
    int numRegular=0;
    ActiveSyncContext conflict=null;
    ActiveSyncContext longRunning=null;
    ActiveSyncContext toReschedule=null;
    ActiveSyncContext oldestNonExpeditedRegular=null;
    for (    ActiveSyncContext activeSyncContext : mActiveSyncContexts) {
      final SyncOperation activeOp=activeSyncContext.mSyncOperation;
      if (activeOp.isInitialization()) {
        numInit++;
      }
 else {
        numRegular++;
        if (!activeOp.isExpedited()) {
          if (oldestNonExpeditedRegular == null || (oldestNonExpeditedRegular.mStartTime > activeSyncContext.mStartTime)) {
            oldestNonExpeditedRegular=activeSyncContext;
          }
        }
      }
      if (activeOp.isConflict(candidate)) {
        conflict=activeSyncContext;
      }
 else {
        if (candidateIsInitialization == activeOp.isInitialization() && activeSyncContext.mStartTime + MAX_TIME_PER_SYNC < now) {
          longRunning=activeSyncContext;
        }
      }
    }
    if (isLoggable) {
      Log.v(TAG,""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ N+ ""String_Node_Str""+ candidate);
      Log.v(TAG,""String_Node_Str"" + numInit + ""String_Node_Str""+ numRegular);
      Log.v(TAG,""String_Node_Str"" + longRunning);
      Log.v(TAG,""String_Node_Str"" + conflict);
      Log.v(TAG,""String_Node_Str"" + oldestNonExpeditedRegular);
    }
    final boolean roomAvailable=candidateIsInitialization ? numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS : numRegular < MAX_SIMULTANEOUS_REGULAR_SYNCS;
    if (conflict != null) {
      if (candidateIsInitialization && !conflict.mSyncOperation.isInitialization() && numInit < MAX_SIMULTANEOUS_INITIALIZATION_SYNCS) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else       if (candidate.isExpedited() && !conflict.mSyncOperation.isExpedited() && (candidateIsInitialization == conflict.mSyncOperation.isInitialization())) {
        toReschedule=conflict;
        if (Log.isLoggable(TAG,Log.VERBOSE)) {
          Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + conflict);
        }
      }
 else {
        continue;
      }
    }
 else     if (roomAvailable) {
    }
 else     if (candidate.isExpedited() && oldestNonExpeditedRegular != null && !candidateIsInitialization) {
      toReschedule=oldestNonExpeditedRegular;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + ""String_Node_Str"" + oldestNonExpeditedRegular);
      }
    }
 else     if (longRunning != null && (candidateIsInitialization == longRunning.mSyncOperation.isInitialization())) {
      toReschedule=longRunning;
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"" + longRunning);
      }
    }
 else {
      continue;
    }
    if (toReschedule != null) {
      runSyncFinishedOrCanceledH(null,toReschedule);
      scheduleSyncOperation(toReschedule.mSyncOperation);
    }
synchronized (mSyncQueue) {
      mSyncQueue.remove(candidate);
    }
    dispatchSyncOperation(candidate);
  }
  return nextReadyToRunTime;
}",0.9761960876738156
193401,"void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}","void setAppIdleParoleOn(boolean isAppIdleParoleOn){
  boolean changed=false;
synchronized (mTrackedTasks) {
    if (mAppIdleParoleOn == isAppIdleParoleOn) {
      return;
    }
    mAppIdleParoleOn=isAppIdleParoleOn;
    for (    JobStatus task : mTrackedTasks) {
      String packageName=task.job.getService().getPackageName();
      final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,task.uId,task.getUserId());
      if (DEBUG) {
        Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
      }
      if (task.appNotIdleConstraintSatisfied.get() == appIdle) {
        task.appNotIdleConstraintSatisfied.set(!appIdle);
        changed=true;
      }
    }
  }
  if (changed) {
    mStateChangedListener.onControllerStateChanged();
  }
}",0.994343180389692
193402,"@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}","@Override public void maybeStartTrackingJob(JobStatus jobStatus){
synchronized (mTrackedTasks) {
    mTrackedTasks.add(jobStatus);
    String packageName=jobStatus.job.getService().getPackageName();
    final boolean appIdle=!mAppIdleParoleOn && mUsageStatsInternal.isAppIdle(packageName,jobStatus.uId,jobStatus.getUserId());
    if (DEBUG) {
      Slog.d(LOG_TAG,""String_Node_Str"" + packageName + ""String_Node_Str""+ appIdle);
    }
    jobStatus.appNotIdleConstraintSatisfied.set(!appIdle);
  }
}",0.9857142857142858
193403,"private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,userId)) {
      return false;
    }
  }
  return true;
}","private boolean isUidIdle(int uid){
  final String[] packages=mContext.getPackageManager().getPackagesForUid(uid);
  final int userId=UserHandle.getUserId(uid);
  for (  String packageName : packages) {
    if (!mUsageStats.isAppIdle(packageName,uid,userId)) {
      return false;
    }
  }
  return true;
}",0.9934426229508196
193404,"@Override public boolean isAppIdle(String packageName,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,userId,-1);
}","@Override public boolean isAppIdle(String packageName,int uidForAppId,int userId){
  return UsageStatsService.this.isAppIdleFiltered(packageName,uidForAppId,userId,-1);
}",0.9102564102564102
193405,"/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final String packageName=packages.get(p).packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}","/** 
 * Check all running users' or specified user's apps to see if they enter an idle state. 
 */
void checkIdleStates(int checkUserId){
  if (!mAppIdleEnabled) {
    return;
  }
  final int[] userIds;
  try {
    if (checkUserId == UserHandle.USER_ALL) {
      userIds=ActivityManagerNative.getDefault().getRunningUserIds();
    }
 else {
      userIds=new int[]{checkUserId};
    }
  }
 catch (  RemoteException re) {
    return;
  }
  for (int i=0; i < userIds.length; i++) {
    final int userId=userIds[i];
    List<PackageInfo> packages=getContext().getPackageManager().getInstalledPackages(PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES,userId);
synchronized (mLock) {
      final long timeNow=checkAndGetTimeLocked();
      final long screenOnTime=getScreenOnTimeLocked(timeNow);
      UserUsageStatsService service=getUserDataAndInitializeIfNeededLocked(userId,timeNow);
      final int packageCount=packages.size();
      for (int p=0; p < packageCount; p++) {
        final PackageInfo pi=packages.get(p);
        final String packageName=pi.packageName;
        final boolean isIdle=isAppIdleFiltered(packageName,UserHandle.getAppId(pi.applicationInfo.uid),userId,service,timeNow,screenOnTime);
        mHandler.sendMessage(mHandler.obtainMessage(MSG_INFORM_LISTENERS,userId,isIdle ? 1 : 0,packageName));
        mAppIdleHistory.addEntry(packageName,userId,isIdle,timeNow);
      }
    }
  }
  mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_CHECK_IDLE_STATES,checkUserId,0),mCheckIdleIntervalMillis);
}",0.9654264076391176
193406,"boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  return isAppIdleFiltered(packageName,userId,timeNow);
}","boolean isAppIdleFilteredOrParoled(String packageName,int userId,long timeNow){
  if (mAppIdleParoled) {
    return false;
  }
  try {
    ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    return isAppIdleFiltered(packageName,ai.uid,userId,timeNow);
  }
 catch (  PackageManager.NameNotFoundException e) {
  }
  return false;
}",0.5832012678288431
193407,"/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (packageName.equals(""String_Node_Str""))   return false;
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}","/** 
 * Checks if an app has been idle for a while and filters out apps that are excluded. It returns false if the current system state allows all apps to be considered active. This happens if the device is plugged in or temporarily allowed to make exceptions. Called by interface impls.
 */
private boolean isAppIdleFiltered(String packageName,int appId,int userId,UserUsageStatsService userService,long timeNow,long screenOnTime){
  if (packageName == null)   return false;
  if (!mAppIdleEnabled) {
    return false;
  }
  if (appId < Process.FIRST_APPLICATION_UID) {
    return false;
  }
  if (packageName.equals(""String_Node_Str"")) {
    return false;
  }
  try {
    if (mDeviceIdleController.isPowerSaveWhitelistExceptIdleApp(packageName)) {
      return false;
    }
  }
 catch (  RemoteException re) {
  }
  if (isActiveDeviceAdmin(packageName,userId)) {
    return false;
  }
  if (isCarrierApp(packageName)) {
    return false;
  }
  if (isActiveNetworkScorer(packageName)) {
    return false;
  }
  if (mAppWidgetManager != null && mAppWidgetManager.isBoundWidgetPackage(packageName,userId)) {
    return false;
  }
  return isAppIdleUnfiltered(packageName,userService,timeNow,screenOnTime);
}",0.9625806451612904
193408,"protected final void notifyExpandingFinished(){
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}","protected final void notifyExpandingFinished(){
  endClosing();
  if (mExpanding) {
    mExpanding=false;
    onExpandingFinished();
  }
}",0.9384615384615383
193409,"protected void onExpandingFinished(){
  endClosing();
  mBar.onExpandingFinished();
}","protected void onExpandingFinished(){
  mBar.onExpandingFinished();
}",0.8961038961038961
193410,"public void countApiUse(NotificationRecord record){
  final Notification n=record.getNotification();
  if (n.actions != null) {
    numWithActions++;
  }
  if ((n.flags & Notification.FLAG_FOREGROUND_SERVICE) != 0) {
    numForegroundService++;
  }
  if ((n.flags & Notification.FLAG_ONGOING_EVENT) != 0) {
    numOngoing++;
  }
  if ((n.flags & Notification.FLAG_AUTO_CANCEL) != 0) {
    numAutoCancel++;
  }
  if ((n.defaults & Notification.DEFAULT_SOUND) != 0 || (n.defaults & Notification.DEFAULT_VIBRATE) != 0 || n.sound != null || n.vibrate != null) {
    numInterrupt++;
  }
switch (n.visibility) {
case Notification.VISIBILITY_PRIVATE:
    numPrivate++;
  break;
case Notification.VISIBILITY_SECRET:
numSecret++;
break;
}
switch (n.priority) {
case Notification.PRIORITY_MAX:
numPriorityMax++;
break;
case Notification.PRIORITY_HIGH:
numPriorityHigh++;
break;
case Notification.PRIORITY_LOW:
numPriorityLow++;
break;
case Notification.PRIORITY_MIN:
numPriorityMin++;
break;
}
for (String Key : n.extras.keySet()) {
if (Notification.EXTRA_BIG_TEXT.equals(key)) {
numWithBigText++;
}
 else if (Notification.EXTRA_PICTURE.equals(key)) {
numWithBigPicture++;
}
 else if (Notification.EXTRA_LARGE_ICON.equals(key)) {
numWithLargeIcon++;
}
 else if (Notification.EXTRA_TEXT_LINES.equals(key)) {
numWithInbox++;
}
 else if (Notification.EXTRA_MEDIA_SESSION.equals(key)) {
numWithMediaSession++;
}
 else if (Notification.EXTRA_TITLE.equals(key)) {
numWithTitle++;
}
 else if (Notification.EXTRA_TEXT.equals(key)) {
numWithText++;
}
 else if (Notification.EXTRA_SUB_TEXT.equals(key)) {
numWithSubText++;
}
 else if (Notification.EXTRA_INFO_TEXT.equals(key)) {
numWithInfoText++;
}
}
}","public void countApiUse(NotificationRecord record){
  final Notification n=record.getNotification();
  if (n.actions != null) {
    numWithActions++;
  }
  if ((n.flags & Notification.FLAG_FOREGROUND_SERVICE) != 0) {
    numForegroundService++;
  }
  if ((n.flags & Notification.FLAG_ONGOING_EVENT) != 0) {
    numOngoing++;
  }
  if ((n.flags & Notification.FLAG_AUTO_CANCEL) != 0) {
    numAutoCancel++;
  }
  if ((n.defaults & Notification.DEFAULT_SOUND) != 0 || (n.defaults & Notification.DEFAULT_VIBRATE) != 0 || n.sound != null || n.vibrate != null) {
    numInterrupt++;
  }
switch (n.visibility) {
case Notification.VISIBILITY_PRIVATE:
    numPrivate++;
  break;
case Notification.VISIBILITY_SECRET:
numSecret++;
break;
}
switch (n.priority) {
case Notification.PRIORITY_MAX:
numPriorityMax++;
break;
case Notification.PRIORITY_HIGH:
numPriorityHigh++;
break;
case Notification.PRIORITY_LOW:
numPriorityLow++;
break;
case Notification.PRIORITY_MIN:
numPriorityMin++;
break;
}
final Set<String> names=n.extras.keySet();
if (names.contains(Notification.EXTRA_BIG_TEXT)) {
numWithBigText++;
}
if (names.contains(Notification.EXTRA_PICTURE)) {
numWithBigPicture++;
}
if (names.contains(Notification.EXTRA_LARGE_ICON)) {
numWithLargeIcon++;
}
if (names.contains(Notification.EXTRA_TEXT_LINES)) {
numWithInbox++;
}
if (names.contains(Notification.EXTRA_MEDIA_SESSION)) {
numWithMediaSession++;
}
if (names.contains(Notification.EXTRA_TITLE) && !TextUtils.isEmpty(n.extras.getCharSequence(Notification.EXTRA_TITLE))) {
numWithTitle++;
}
if (names.contains(Notification.EXTRA_TEXT) && !TextUtils.isEmpty(n.extras.getCharSequence(Notification.EXTRA_TEXT))) {
numWithText++;
}
if (names.contains(Notification.EXTRA_SUB_TEXT) && !TextUtils.isEmpty(n.extras.getCharSequence(Notification.EXTRA_SUB_TEXT))) {
numWithSubText++;
}
if (names.contains(Notification.EXTRA_INFO_TEXT) && !TextUtils.isEmpty(n.extras.getCharSequence(Notification.EXTRA_INFO_TEXT))) {
numWithInfoText++;
}
}",0.7856752323674139
193411,"@Override public boolean onTouchEvent(MotionEvent event){
  if (!mDraggingDown) {
    return false;
  }
  final float x=event.getX();
  final float y=event.getY();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_MOVE:
    mLastHeight=y - mInitialTouchY;
  captureStartingChild(mInitialTouchX,mInitialTouchY);
if (mStartingChild != null) {
  handleExpansion(mLastHeight,mStartingChild);
}
 else {
  mDragDownCallback.setEmptyDragAmount(mLastHeight);
}
if (mLastHeight > mMinDragDistance) {
if (!mDraggedFarEnough) {
  mDraggedFarEnough=true;
  mDragDownCallback.onThresholdReached();
}
}
 else {
if (mDraggedFarEnough) {
  mDraggedFarEnough=false;
  mDragDownCallback.onDragDownReset();
}
}
return true;
case MotionEvent.ACTION_UP:
if (!isFalseTouch() && mDragDownCallback.onDraggedDown(mStartingChild,(int)(y - mInitialTouchY))) {
if (mStartingChild == null) {
mDragDownCallback.setEmptyDragAmount(0f);
}
mDraggingDown=false;
}
 else {
stopDragging();
return false;
}
break;
case MotionEvent.ACTION_CANCEL:
stopDragging();
return false;
}
return false;
}","@Override public boolean onTouchEvent(MotionEvent event){
  if (!mDraggingDown) {
    return false;
  }
  final float x=event.getX();
  final float y=event.getY();
switch (event.getActionMasked()) {
case MotionEvent.ACTION_MOVE:
    mLastHeight=y - mInitialTouchY;
  captureStartingChild(mInitialTouchX,mInitialTouchY);
if (mStartingChild != null) {
  handleExpansion(mLastHeight,mStartingChild);
}
 else {
  mDragDownCallback.setEmptyDragAmount(mLastHeight);
}
if (mLastHeight > mMinDragDistance) {
if (!mDraggedFarEnough) {
  mDraggedFarEnough=true;
  mDragDownCallback.onThresholdReached();
}
}
 else {
if (mDraggedFarEnough) {
  mDraggedFarEnough=false;
  mDragDownCallback.onDragDownReset();
}
}
return true;
case MotionEvent.ACTION_UP:
if (!isFalseTouch() && mDragDownCallback.onDraggedDown(mStartingChild,(int)(y - mInitialTouchY))) {
if (mStartingChild == null) {
mDragDownCallback.setEmptyDragAmount(0f);
}
 else {
mCallback.setUserLockedChild(mStartingChild,false);
}
mDraggingDown=false;
}
 else {
stopDragging();
return false;
}
break;
case MotionEvent.ACTION_CANCEL:
stopDragging();
return false;
}
return false;
}",0.9717153284671532
193412,"/** 
 * If secure with redaction: Show bouncer, go to unlocked shade. <p>If secure without redaction or no security: Go to   {@link StatusBarState#SHADE_LOCKED}.</p>
 * @param expandView The view to expand after going to the shade.
 */
public void goToLockedShade(View expandView){
  ExpandableNotificationRow row=null;
  if (expandView instanceof ExpandableNotificationRow) {
    row=(ExpandableNotificationRow)expandView;
    row.setUserExpanded(true);
  }
  boolean fullShadeNeedsBouncer=!userAllowsPrivateNotificationsInPublic(mCurrentUserId) || !mShowLockscreenNotifications || mFalsingManager.shouldEnforceBouncer();
  if (isLockscreenPublicMode() && fullShadeNeedsBouncer) {
    mLeaveOpenOnKeyguardHide=true;
    showBouncer();
    mDraggedDownRow=row;
  }
 else {
    mNotificationPanel.animateToFullShade(0);
    setBarState(StatusBarState.SHADE_LOCKED);
    updateKeyguardState(false,false);
    if (row != null) {
      row.setUserLocked(false);
    }
  }
}","/** 
 * If secure with redaction: Show bouncer, go to unlocked shade. <p>If secure without redaction or no security: Go to   {@link StatusBarState#SHADE_LOCKED}.</p>
 * @param expandView The view to expand after going to the shade.
 */
public void goToLockedShade(View expandView){
  ExpandableNotificationRow row=null;
  if (expandView instanceof ExpandableNotificationRow) {
    row=(ExpandableNotificationRow)expandView;
    row.setUserExpanded(true);
  }
  boolean fullShadeNeedsBouncer=!userAllowsPrivateNotificationsInPublic(mCurrentUserId) || !mShowLockscreenNotifications || mFalsingManager.shouldEnforceBouncer();
  if (isLockscreenPublicMode() && fullShadeNeedsBouncer) {
    mLeaveOpenOnKeyguardHide=true;
    showBouncer();
    mDraggedDownRow=row;
  }
 else {
    mNotificationPanel.animateToFullShade(0);
    setBarState(StatusBarState.SHADE_LOCKED);
    updateKeyguardState(false,false);
  }
}",0.9675013319126264
193413,"private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,final WindowState child,int flags,final int type,final boolean isVisible,final boolean hasFocus,final boolean hasWallpaper,DisplayContent displayContent){
  inputWindowHandle.name=child.toString();
  final boolean modal=(flags & (WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE)) == 0;
  if (modal && child.mAppToken != null) {
    flags|=WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
    final DimLayer.DimLayerUser dimLayerUser=child.getDimLayerUser();
    if (dimLayerUser != null) {
      dimLayerUser.getBounds(mTmpRect);
    }
 else {
      child.getVisibleBounds(mTmpRect,BOUNDS_FOR_TOUCH);
    }
    inputWindowHandle.touchableRegion.set(mTmpRect);
  }
 else {
    child.getTouchableRegion(inputWindowHandle.touchableRegion);
  }
  inputWindowHandle.layoutParamsFlags=flags;
  inputWindowHandle.layoutParamsType=type;
  inputWindowHandle.dispatchingTimeoutNanos=child.getInputDispatchingTimeoutNanos();
  inputWindowHandle.visible=isVisible;
  inputWindowHandle.canReceiveKeys=child.canReceiveKeys();
  inputWindowHandle.hasFocus=hasFocus;
  inputWindowHandle.hasWallpaper=hasWallpaper;
  inputWindowHandle.paused=child.mAppToken != null ? child.mAppToken.paused : false;
  inputWindowHandle.layer=child.mLayer;
  inputWindowHandle.ownerPid=child.mSession.mPid;
  inputWindowHandle.ownerUid=child.mSession.mUid;
  inputWindowHandle.inputFeatures=child.mAttrs.inputFeatures;
  final Rect frame=child.mFrame;
  inputWindowHandle.frameLeft=frame.left;
  inputWindowHandle.frameTop=frame.top;
  inputWindowHandle.frameRight=frame.right;
  inputWindowHandle.frameBottom=frame.bottom;
  if (child.mAttrs.type == TYPE_DOCK_DIVIDER) {
    int adjustment=displayContent.mDividerControllerLocked.getWidthAdjustment();
    if (inputWindowHandle.frameRight - inputWindowHandle.frameLeft > inputWindowHandle.frameTop - inputWindowHandle.frameBottom) {
      inputWindowHandle.frameTop-=adjustment;
      inputWindowHandle.frameBottom+=adjustment;
    }
 else {
      inputWindowHandle.frameLeft-=adjustment;
      inputWindowHandle.frameRight+=adjustment;
    }
  }
  if (child.mGlobalScale != 1) {
    inputWindowHandle.scaleFactor=1.0f / child.mGlobalScale;
  }
 else {
    inputWindowHandle.scaleFactor=1;
  }
  if (DEBUG_INPUT) {
    Slog.d(WindowManagerService.TAG,""String_Node_Str"" + inputWindowHandle);
  }
  addInputWindowHandleLw(inputWindowHandle);
}","private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,final WindowState child,int flags,final int type,final boolean isVisible,final boolean hasFocus,final boolean hasWallpaper,DisplayContent displayContent){
  inputWindowHandle.name=child.toString();
  flags=child.getTouchableRegion(inputWindowHandle.touchableRegion,flags,this);
  inputWindowHandle.layoutParamsFlags=flags;
  inputWindowHandle.layoutParamsType=type;
  inputWindowHandle.dispatchingTimeoutNanos=child.getInputDispatchingTimeoutNanos();
  inputWindowHandle.visible=isVisible;
  inputWindowHandle.canReceiveKeys=child.canReceiveKeys();
  inputWindowHandle.hasFocus=hasFocus;
  inputWindowHandle.hasWallpaper=hasWallpaper;
  inputWindowHandle.paused=child.mAppToken != null ? child.mAppToken.paused : false;
  inputWindowHandle.layer=child.mLayer;
  inputWindowHandle.ownerPid=child.mSession.mPid;
  inputWindowHandle.ownerUid=child.mSession.mUid;
  inputWindowHandle.inputFeatures=child.mAttrs.inputFeatures;
  final Rect frame=child.mFrame;
  inputWindowHandle.frameLeft=frame.left;
  inputWindowHandle.frameTop=frame.top;
  inputWindowHandle.frameRight=frame.right;
  inputWindowHandle.frameBottom=frame.bottom;
  if (child.mAttrs.type == TYPE_DOCK_DIVIDER) {
    int adjustment=displayContent.mDividerControllerLocked.getWidthAdjustment();
    if (inputWindowHandle.frameRight - inputWindowHandle.frameLeft > inputWindowHandle.frameTop - inputWindowHandle.frameBottom) {
      inputWindowHandle.frameTop-=adjustment;
      inputWindowHandle.frameBottom+=adjustment;
    }
 else {
      inputWindowHandle.frameLeft-=adjustment;
      inputWindowHandle.frameRight+=adjustment;
    }
  }
  if (child.mGlobalScale != 1) {
    inputWindowHandle.scaleFactor=1.0f / child.mGlobalScale;
  }
 else {
    inputWindowHandle.scaleFactor=1;
  }
  if (DEBUG_INPUT) {
    Slog.d(WindowManagerService.TAG,""String_Node_Str"" + inputWindowHandle);
  }
  addInputWindowHandleLw(inputWindowHandle);
}",0.8539376262059681
193414,"private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,final WindowState child,int flags,final int type,final boolean isVisible,final boolean hasFocus,final boolean hasWallpaper,DisplayContent displayContent){
  inputWindowHandle.name=child.toString();
  final boolean modal=(flags & (WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE)) == 0;
  if (modal && child.mAppToken != null) {
    flags|=WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
    final DimLayer.DimLayerUser dimLayerUser=child.getDimLayerUser();
    if (dimLayerUser != null) {
      dimLayerUser.getBounds(mTmpRect);
    }
 else {
      child.getVisibleBounds(mTmpRect,BOUNDS_FOR_TOUCH);
    }
    inputWindowHandle.touchableRegion.set(mTmpRect);
  }
 else {
    child.getTouchableRegion(inputWindowHandle.touchableRegion);
  }
  inputWindowHandle.layoutParamsFlags=flags;
  inputWindowHandle.layoutParamsType=type;
  inputWindowHandle.dispatchingTimeoutNanos=child.getInputDispatchingTimeoutNanos();
  inputWindowHandle.visible=isVisible;
  inputWindowHandle.canReceiveKeys=child.canReceiveKeys();
  inputWindowHandle.hasFocus=hasFocus;
  inputWindowHandle.hasWallpaper=hasWallpaper;
  inputWindowHandle.paused=child.mAppToken != null ? child.mAppToken.paused : false;
  inputWindowHandle.layer=child.mLayer;
  inputWindowHandle.ownerPid=child.mSession.mPid;
  inputWindowHandle.ownerUid=child.mSession.mUid;
  inputWindowHandle.inputFeatures=child.mAttrs.inputFeatures;
  final Rect frame=child.mFrame;
  inputWindowHandle.frameLeft=frame.left;
  inputWindowHandle.frameTop=frame.top;
  inputWindowHandle.frameRight=frame.right;
  inputWindowHandle.frameBottom=frame.bottom;
  if (child.mAttrs.type == TYPE_DOCK_DIVIDER) {
    int adjustment=displayContent.mDividerControllerLocked.getWidthAdjustment();
    if (inputWindowHandle.frameRight - inputWindowHandle.frameLeft > inputWindowHandle.frameTop - inputWindowHandle.frameBottom) {
      inputWindowHandle.frameTop-=adjustment;
      inputWindowHandle.frameBottom+=adjustment;
    }
 else {
      inputWindowHandle.frameLeft-=adjustment;
      inputWindowHandle.frameRight+=adjustment;
    }
  }
  if (child.mGlobalScale != 1) {
    inputWindowHandle.scaleFactor=1.0f / child.mGlobalScale;
  }
 else {
    inputWindowHandle.scaleFactor=1;
  }
  if (DEBUG_INPUT) {
    Slog.d(WindowManagerService.TAG,""String_Node_Str"" + inputWindowHandle);
  }
  addInputWindowHandleLw(inputWindowHandle);
}","private void addInputWindowHandleLw(final InputWindowHandle inputWindowHandle,final WindowState child,int flags,final int type,final boolean isVisible,final boolean hasFocus,final boolean hasWallpaper,DisplayContent displayContent){
  inputWindowHandle.name=child.toString();
  flags=child.getTouchableRegion(inputWindowHandle.touchableRegion,flags,this);
  inputWindowHandle.layoutParamsFlags=flags;
  inputWindowHandle.layoutParamsType=type;
  inputWindowHandle.dispatchingTimeoutNanos=child.getInputDispatchingTimeoutNanos();
  inputWindowHandle.visible=isVisible;
  inputWindowHandle.canReceiveKeys=child.canReceiveKeys();
  inputWindowHandle.hasFocus=hasFocus;
  inputWindowHandle.hasWallpaper=hasWallpaper;
  inputWindowHandle.paused=child.mAppToken != null ? child.mAppToken.paused : false;
  inputWindowHandle.layer=child.mLayer;
  inputWindowHandle.ownerPid=child.mSession.mPid;
  inputWindowHandle.ownerUid=child.mSession.mUid;
  inputWindowHandle.inputFeatures=child.mAttrs.inputFeatures;
  final Rect frame=child.mFrame;
  inputWindowHandle.frameLeft=frame.left;
  inputWindowHandle.frameTop=frame.top;
  inputWindowHandle.frameRight=frame.right;
  inputWindowHandle.frameBottom=frame.bottom;
  if (child.mAttrs.type == TYPE_DOCK_DIVIDER) {
    int adjustment=displayContent.mDividerControllerLocked.getWidthAdjustment();
    if (inputWindowHandle.frameRight - inputWindowHandle.frameLeft > inputWindowHandle.frameTop - inputWindowHandle.frameBottom) {
      inputWindowHandle.frameTop-=adjustment;
      inputWindowHandle.frameBottom+=adjustment;
    }
 else {
      inputWindowHandle.frameLeft-=adjustment;
      inputWindowHandle.frameRight+=adjustment;
    }
  }
  if (child.mGlobalScale != 1) {
    inputWindowHandle.scaleFactor=1.0f / child.mGlobalScale;
  }
 else {
    inputWindowHandle.scaleFactor=1;
  }
  if (DEBUG_INPUT) {
    Slog.d(WindowManagerService.TAG,""String_Node_Str"" + inputWindowHandle);
  }
  addInputWindowHandleLw(inputWindowHandle);
}",0.8539376262059681
193415,"public int getDefaultUsbCard(){
  for (  AlsaCardRecord rec : mCardRecords) {
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  return -1;
}","public int getDefaultUsbCard(){
  ArrayList<AlsaCardsParser.AlsaCardRecord> prevRecs=mCardRecords;
  if (DEBUG) {
    LogDevices(""String_Node_Str"",prevRecs);
  }
  scan();
  if (DEBUG) {
    LogDevices(""String_Node_Str"",mCardRecords);
  }
  ArrayList<AlsaCardRecord> newRecs=getNewCardRecords(prevRecs);
  if (DEBUG) {
    LogDevices(""String_Node_Str"",newRecs);
  }
  for (  AlsaCardRecord rec : newRecs) {
    if (DEBUG) {
      Slog.d(TAG,rec.mCardName + ""String_Node_Str"" + rec.mCardNum+ ""String_Node_Str""+ rec.mIsUsb);
    }
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  for (  AlsaCardRecord rec : prevRecs) {
    if (DEBUG) {
      Slog.d(TAG,rec.mCardName + ""String_Node_Str"" + rec.mCardNum+ ""String_Node_Str""+ rec.mIsUsb);
    }
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  return -1;
}",0.2643442622950819
193416,"public int getDefaultCard(){
  int card=getDefaultUsbCard();
  if (card < 0 && getNumCardRecords() > 0) {
    card=getCardRecordAt(getNumCardRecords() - 1).mCardNum;
  }
  return card;
}","public int getDefaultCard(){
  int card=getDefaultUsbCard();
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  if (card < 0 && getNumCardRecords() > 0) {
    card=getCardRecordAt(getNumCardRecords() - 1).mCardNum;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  return card;
}",0.7004048582995951
193417,"private AlsaDevice waitForAlsaDevice(int card,int device,int type){
  AlsaDevice testDevice=new AlsaDevice(type,card,device);
  final int kWaitTime=2500;
synchronized (mAlsaDevices) {
    long timeout=SystemClock.elapsedRealtime() + kWaitTime;
    do {
      if (mAlsaDevices.values().contains(testDevice)) {
        return testDevice;
      }
      long waitTime=timeout - SystemClock.elapsedRealtime();
      if (waitTime > 0) {
        try {
          mAlsaDevices.wait(waitTime);
        }
 catch (        InterruptedException e) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
    }
 while (timeout > SystemClock.elapsedRealtime());
  }
  Slog.e(TAG,""String_Node_Str"" + testDevice);
  return null;
}","private AlsaDevice waitForAlsaDevice(int card,int device,int type){
  if (DEBUG) {
    Slog.e(TAG,""String_Node_Str"" + card + ""String_Node_Str""+ device+ ""String_Node_Str"");
  }
  AlsaDevice testDevice=new AlsaDevice(type,card,device);
  final int kWaitTime=2500;
synchronized (mAlsaDevices) {
    long timeout=SystemClock.elapsedRealtime() + kWaitTime;
    do {
      if (mAlsaDevices.values().contains(testDevice)) {
        return testDevice;
      }
      long waitTime=timeout - SystemClock.elapsedRealtime();
      if (waitTime > 0) {
        try {
          mAlsaDevices.wait(waitTime);
        }
 catch (        InterruptedException e) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
    }
 while (timeout > SystemClock.elapsedRealtime());
  }
  Slog.e(TAG,""String_Node_Str"" + testDevice);
  return null;
}",0.9299610894941636
193418,"UsbAudioDevice selectAudioCard(int card){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  if (!mCardsParser.isCardUsb(card)) {
    return null;
  }
  mDevicesParser.scan();
  int device=mDevicesParser.getDefaultDeviceNum(card);
  boolean hasPlayback=mDevicesParser.hasPlaybackDevices(card);
  boolean hasCapture=mDevicesParser.hasCaptureDevices(card);
  int deviceClass=(mCardsParser.isCardUsb(card) ? UsbAudioDevice.kAudioDeviceClass_External : UsbAudioDevice.kAudioDeviceClass_Internal) | UsbAudioDevice.kAudioDeviceMeta_Alsa;
  if (hasPlayback && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_PLAYBACK) == null)) {
    return null;
  }
  if (hasCapture && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_CAPTURE) == null)) {
    return null;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + hasPlayback + ""String_Node_Str""+ hasCapture);
  }
  UsbAudioDevice audioDevice=new UsbAudioDevice(card,device,hasPlayback,hasCapture,deviceClass);
  AlsaCardsParser.AlsaCardRecord cardRecord=mCardsParser.getCardRecordFor(card);
  audioDevice.mDeviceName=cardRecord.mCardName;
  audioDevice.mDeviceDescription=cardRecord.mCardDescription;
  notifyDeviceState(audioDevice,true);
  return audioDevice;
}","UsbAudioDevice selectAudioCard(int card){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card + ""String_Node_Str""+ mCardsParser.isCardUsb(card));
  }
  if (!mCardsParser.isCardUsb(card)) {
    return null;
  }
  mDevicesParser.scan();
  int device=mDevicesParser.getDefaultDeviceNum(card);
  boolean hasPlayback=mDevicesParser.hasPlaybackDevices(card);
  boolean hasCapture=mDevicesParser.hasCaptureDevices(card);
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + hasPlayback + ""String_Node_Str""+ hasCapture);
  }
  int deviceClass=(mCardsParser.isCardUsb(card) ? UsbAudioDevice.kAudioDeviceClass_External : UsbAudioDevice.kAudioDeviceClass_Internal) | UsbAudioDevice.kAudioDeviceMeta_Alsa;
  if (hasPlayback && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_PLAYBACK) == null)) {
    return null;
  }
  if (hasCapture && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_CAPTURE) == null)) {
    return null;
  }
  UsbAudioDevice audioDevice=new UsbAudioDevice(card,device,hasPlayback,hasCapture,deviceClass);
  AlsaCardsParser.AlsaCardRecord cardRecord=mCardsParser.getCardRecordFor(card);
  audioDevice.mDeviceName=cardRecord.mCardName;
  audioDevice.mDeviceDescription=cardRecord.mCardDescription;
  notifyDeviceState(audioDevice,true);
  return audioDevice;
}",0.8991121872477804
193419,"void usbDeviceAdded(UsbDevice usbDevice){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + usbDevice.getManufacturerName() + ""String_Node_Str""+ usbDevice.getProductName());
  }
  boolean isAudioDevice=false;
  int interfaceCount=usbDevice.getInterfaceCount();
  for (int ntrfaceIndex=0; !isAudioDevice && ntrfaceIndex < interfaceCount; ntrfaceIndex++) {
    UsbInterface ntrface=usbDevice.getInterface(ntrfaceIndex);
    if (ntrface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
      isAudioDevice=true;
    }
  }
  if (!isAudioDevice) {
    return;
  }
  ArrayList<AlsaCardsParser.AlsaCardRecord> prevScanRecs=mCardsParser.getScanRecords();
  mCardsParser.scan();
  int addedCard=-1;
  ArrayList<AlsaCardsParser.AlsaCardRecord> newScanRecs=mCardsParser.getNewCardRecords(prevScanRecs);
  if (newScanRecs.size() > 0) {
    addedCard=newScanRecs.get(0).mCardNum;
  }
 else {
    addedCard=mCardsParser.getDefaultUsbCard();
  }
  if (mCardsParser.isCardUsb(addedCard)) {
    UsbAudioDevice audioDevice=selectAudioCard(addedCard);
    if (audioDevice != null) {
      mAudioDevices.put(usbDevice,audioDevice);
    }
    boolean hasMidi=mDevicesParser.hasMIDIDevices(addedCard);
    if (hasMidi && mHasMidiFeature) {
      int device=mDevicesParser.getDefaultDeviceNum(addedCard);
      AlsaDevice alsaDevice=waitForAlsaDevice(addedCard,device,AlsaDevice.TYPE_MIDI);
      if (alsaDevice != null) {
        Bundle properties=new Bundle();
        String manufacturer=usbDevice.getManufacturerName();
        String product=usbDevice.getProductName();
        String version=usbDevice.getVersion();
        String name;
        if (manufacturer == null || manufacturer.isEmpty()) {
          name=product;
        }
 else         if (product == null || product.isEmpty()) {
          name=manufacturer;
        }
 else {
          name=manufacturer + ""String_Node_Str"" + product;
        }
        properties.putString(MidiDeviceInfo.PROPERTY_NAME,name);
        properties.putString(MidiDeviceInfo.PROPERTY_MANUFACTURER,manufacturer);
        properties.putString(MidiDeviceInfo.PROPERTY_PRODUCT,product);
        properties.putString(MidiDeviceInfo.PROPERTY_VERSION,version);
        properties.putString(MidiDeviceInfo.PROPERTY_SERIAL_NUMBER,usbDevice.getSerialNumber());
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_CARD,alsaDevice.mCard);
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_DEVICE,alsaDevice.mDevice);
        properties.putParcelable(MidiDeviceInfo.PROPERTY_USB_DEVICE,usbDevice);
        UsbMidiDevice usbMidiDevice=UsbMidiDevice.create(mContext,properties,alsaDevice.mCard,alsaDevice.mDevice);
        if (usbMidiDevice != null) {
          mMidiDevices.put(usbDevice,usbMidiDevice);
        }
      }
    }
  }
}","void usbDeviceAdded(UsbDevice usbDevice){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + usbDevice.getManufacturerName() + ""String_Node_Str""+ usbDevice.getProductName());
  }
  boolean isAudioDevice=false;
  int interfaceCount=usbDevice.getInterfaceCount();
  for (int ntrfaceIndex=0; !isAudioDevice && ntrfaceIndex < interfaceCount; ntrfaceIndex++) {
    UsbInterface ntrface=usbDevice.getInterface(ntrfaceIndex);
    if (ntrface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
      isAudioDevice=true;
    }
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + isAudioDevice);
  }
  if (!isAudioDevice) {
    return;
  }
  int addedCard=mCardsParser.getDefaultUsbCard();
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + addedCard + ""String_Node_Str""+ mCardsParser.isCardUsb(addedCard));
  }
  if (mCardsParser.isCardUsb(addedCard)) {
    UsbAudioDevice audioDevice=selectAudioCard(addedCard);
    if (audioDevice != null) {
      mAudioDevices.put(usbDevice,audioDevice);
    }
    boolean hasMidi=mDevicesParser.hasMIDIDevices(addedCard);
    if (hasMidi && mHasMidiFeature) {
      int device=mDevicesParser.getDefaultDeviceNum(addedCard);
      AlsaDevice alsaDevice=waitForAlsaDevice(addedCard,device,AlsaDevice.TYPE_MIDI);
      if (alsaDevice != null) {
        Bundle properties=new Bundle();
        String manufacturer=usbDevice.getManufacturerName();
        String product=usbDevice.getProductName();
        String version=usbDevice.getVersion();
        String name;
        if (manufacturer == null || manufacturer.isEmpty()) {
          name=product;
        }
 else         if (product == null || product.isEmpty()) {
          name=manufacturer;
        }
 else {
          name=manufacturer + ""String_Node_Str"" + product;
        }
        properties.putString(MidiDeviceInfo.PROPERTY_NAME,name);
        properties.putString(MidiDeviceInfo.PROPERTY_MANUFACTURER,manufacturer);
        properties.putString(MidiDeviceInfo.PROPERTY_PRODUCT,product);
        properties.putString(MidiDeviceInfo.PROPERTY_VERSION,version);
        properties.putString(MidiDeviceInfo.PROPERTY_SERIAL_NUMBER,usbDevice.getSerialNumber());
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_CARD,alsaDevice.mCard);
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_DEVICE,alsaDevice.mDevice);
        properties.putParcelable(MidiDeviceInfo.PROPERTY_USB_DEVICE,usbDevice);
        UsbMidiDevice usbMidiDevice=UsbMidiDevice.create(mContext,properties,alsaDevice.mCard,alsaDevice.mDevice);
        if (usbMidiDevice != null) {
          mMidiDevices.put(usbDevice,usbMidiDevice);
        }
      }
    }
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
}",0.8865183005333824
193420,"UsbAudioDevice selectDefaultDevice(){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
  mCardsParser.scan();
  return selectAudioCard(mCardsParser.getDefaultCard());
}","UsbAudioDevice selectDefaultDevice(){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
  return selectAudioCard(mCardsParser.getDefaultCard());
}",0.9287925696594428
193421,"public int getDefaultUsbCard(){
  for (  AlsaCardRecord rec : mCardRecords) {
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  return -1;
}","public int getDefaultUsbCard(){
  ArrayList<AlsaCardsParser.AlsaCardRecord> prevRecs=mCardRecords;
  if (DEBUG) {
    LogDevices(""String_Node_Str"",prevRecs);
  }
  scan();
  if (DEBUG) {
    LogDevices(""String_Node_Str"",mCardRecords);
  }
  ArrayList<AlsaCardRecord> newRecs=getNewCardRecords(prevRecs);
  if (DEBUG) {
    LogDevices(""String_Node_Str"",newRecs);
  }
  for (  AlsaCardRecord rec : newRecs) {
    if (DEBUG) {
      Slog.d(TAG,rec.mCardName + ""String_Node_Str"" + rec.mCardNum+ ""String_Node_Str""+ rec.mIsUsb);
    }
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  for (  AlsaCardRecord rec : prevRecs) {
    if (DEBUG) {
      Slog.d(TAG,rec.mCardName + ""String_Node_Str"" + rec.mCardNum+ ""String_Node_Str""+ rec.mIsUsb);
    }
    if (rec.mIsUsb) {
      return rec.mCardNum;
    }
  }
  return -1;
}",0.2643442622950819
193422,"public int getDefaultCard(){
  int card=getDefaultUsbCard();
  if (card < 0 && getNumCardRecords() > 0) {
    card=getCardRecordAt(getNumCardRecords() - 1).mCardNum;
  }
  return card;
}","public int getDefaultCard(){
  int card=getDefaultUsbCard();
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  if (card < 0 && getNumCardRecords() > 0) {
    card=getCardRecordAt(getNumCardRecords() - 1).mCardNum;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  return card;
}",0.7004048582995951
193423,"private AlsaDevice waitForAlsaDevice(int card,int device,int type){
  AlsaDevice testDevice=new AlsaDevice(type,card,device);
  final int kWaitTime=2500;
synchronized (mAlsaDevices) {
    long timeout=SystemClock.elapsedRealtime() + kWaitTime;
    do {
      if (mAlsaDevices.values().contains(testDevice)) {
        return testDevice;
      }
      long waitTime=timeout - SystemClock.elapsedRealtime();
      if (waitTime > 0) {
        try {
          mAlsaDevices.wait(waitTime);
        }
 catch (        InterruptedException e) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
    }
 while (timeout > SystemClock.elapsedRealtime());
  }
  Slog.e(TAG,""String_Node_Str"" + testDevice);
  return null;
}","private AlsaDevice waitForAlsaDevice(int card,int device,int type){
  if (DEBUG) {
    Slog.e(TAG,""String_Node_Str"" + card + ""String_Node_Str""+ device+ ""String_Node_Str"");
  }
  AlsaDevice testDevice=new AlsaDevice(type,card,device);
  final int kWaitTime=2500;
synchronized (mAlsaDevices) {
    long timeout=SystemClock.elapsedRealtime() + kWaitTime;
    do {
      if (mAlsaDevices.values().contains(testDevice)) {
        return testDevice;
      }
      long waitTime=timeout - SystemClock.elapsedRealtime();
      if (waitTime > 0) {
        try {
          mAlsaDevices.wait(waitTime);
        }
 catch (        InterruptedException e) {
          Slog.d(TAG,""String_Node_Str"");
        }
      }
    }
 while (timeout > SystemClock.elapsedRealtime());
  }
  Slog.e(TAG,""String_Node_Str"" + testDevice);
  return null;
}",0.9299610894941636
193424,"UsbAudioDevice selectAudioCard(int card){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card);
  }
  if (!mCardsParser.isCardUsb(card)) {
    return null;
  }
  mDevicesParser.scan();
  int device=mDevicesParser.getDefaultDeviceNum(card);
  boolean hasPlayback=mDevicesParser.hasPlaybackDevices(card);
  boolean hasCapture=mDevicesParser.hasCaptureDevices(card);
  int deviceClass=(mCardsParser.isCardUsb(card) ? UsbAudioDevice.kAudioDeviceClass_External : UsbAudioDevice.kAudioDeviceClass_Internal) | UsbAudioDevice.kAudioDeviceMeta_Alsa;
  if (hasPlayback && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_PLAYBACK) == null)) {
    return null;
  }
  if (hasCapture && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_CAPTURE) == null)) {
    return null;
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + hasPlayback + ""String_Node_Str""+ hasCapture);
  }
  UsbAudioDevice audioDevice=new UsbAudioDevice(card,device,hasPlayback,hasCapture,deviceClass);
  AlsaCardsParser.AlsaCardRecord cardRecord=mCardsParser.getCardRecordFor(card);
  audioDevice.mDeviceName=cardRecord.mCardName;
  audioDevice.mDeviceDescription=cardRecord.mCardDescription;
  notifyDeviceState(audioDevice,true);
  return audioDevice;
}","UsbAudioDevice selectAudioCard(int card){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + card + ""String_Node_Str""+ mCardsParser.isCardUsb(card));
  }
  if (!mCardsParser.isCardUsb(card)) {
    return null;
  }
  mDevicesParser.scan();
  int device=mDevicesParser.getDefaultDeviceNum(card);
  boolean hasPlayback=mDevicesParser.hasPlaybackDevices(card);
  boolean hasCapture=mDevicesParser.hasCaptureDevices(card);
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + hasPlayback + ""String_Node_Str""+ hasCapture);
  }
  int deviceClass=(mCardsParser.isCardUsb(card) ? UsbAudioDevice.kAudioDeviceClass_External : UsbAudioDevice.kAudioDeviceClass_Internal) | UsbAudioDevice.kAudioDeviceMeta_Alsa;
  if (hasPlayback && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_PLAYBACK) == null)) {
    return null;
  }
  if (hasCapture && (waitForAlsaDevice(card,device,AlsaDevice.TYPE_CAPTURE) == null)) {
    return null;
  }
  UsbAudioDevice audioDevice=new UsbAudioDevice(card,device,hasPlayback,hasCapture,deviceClass);
  AlsaCardsParser.AlsaCardRecord cardRecord=mCardsParser.getCardRecordFor(card);
  audioDevice.mDeviceName=cardRecord.mCardName;
  audioDevice.mDeviceDescription=cardRecord.mCardDescription;
  notifyDeviceState(audioDevice,true);
  return audioDevice;
}",0.8991121872477804
193425,"void usbDeviceAdded(UsbDevice usbDevice){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + usbDevice.getManufacturerName() + ""String_Node_Str""+ usbDevice.getProductName());
  }
  boolean isAudioDevice=false;
  int interfaceCount=usbDevice.getInterfaceCount();
  for (int ntrfaceIndex=0; !isAudioDevice && ntrfaceIndex < interfaceCount; ntrfaceIndex++) {
    UsbInterface ntrface=usbDevice.getInterface(ntrfaceIndex);
    if (ntrface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
      isAudioDevice=true;
    }
  }
  if (!isAudioDevice) {
    return;
  }
  ArrayList<AlsaCardsParser.AlsaCardRecord> prevScanRecs=mCardsParser.getScanRecords();
  mCardsParser.scan();
  int addedCard=-1;
  ArrayList<AlsaCardsParser.AlsaCardRecord> newScanRecs=mCardsParser.getNewCardRecords(prevScanRecs);
  if (newScanRecs.size() > 0) {
    addedCard=newScanRecs.get(0).mCardNum;
  }
 else {
    addedCard=mCardsParser.getDefaultUsbCard();
  }
  if (mCardsParser.isCardUsb(addedCard)) {
    UsbAudioDevice audioDevice=selectAudioCard(addedCard);
    if (audioDevice != null) {
      mAudioDevices.put(usbDevice,audioDevice);
    }
    boolean hasMidi=mDevicesParser.hasMIDIDevices(addedCard);
    if (hasMidi && mHasMidiFeature) {
      int device=mDevicesParser.getDefaultDeviceNum(addedCard);
      AlsaDevice alsaDevice=waitForAlsaDevice(addedCard,device,AlsaDevice.TYPE_MIDI);
      if (alsaDevice != null) {
        Bundle properties=new Bundle();
        String manufacturer=usbDevice.getManufacturerName();
        String product=usbDevice.getProductName();
        String version=usbDevice.getVersion();
        String name;
        if (manufacturer == null || manufacturer.isEmpty()) {
          name=product;
        }
 else         if (product == null || product.isEmpty()) {
          name=manufacturer;
        }
 else {
          name=manufacturer + ""String_Node_Str"" + product;
        }
        properties.putString(MidiDeviceInfo.PROPERTY_NAME,name);
        properties.putString(MidiDeviceInfo.PROPERTY_MANUFACTURER,manufacturer);
        properties.putString(MidiDeviceInfo.PROPERTY_PRODUCT,product);
        properties.putString(MidiDeviceInfo.PROPERTY_VERSION,version);
        properties.putString(MidiDeviceInfo.PROPERTY_SERIAL_NUMBER,usbDevice.getSerialNumber());
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_CARD,alsaDevice.mCard);
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_DEVICE,alsaDevice.mDevice);
        properties.putParcelable(MidiDeviceInfo.PROPERTY_USB_DEVICE,usbDevice);
        UsbMidiDevice usbMidiDevice=UsbMidiDevice.create(mContext,properties,alsaDevice.mCard,alsaDevice.mDevice);
        if (usbMidiDevice != null) {
          mMidiDevices.put(usbDevice,usbMidiDevice);
        }
      }
    }
  }
}","void usbDeviceAdded(UsbDevice usbDevice){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + usbDevice.getManufacturerName() + ""String_Node_Str""+ usbDevice.getProductName());
  }
  boolean isAudioDevice=false;
  int interfaceCount=usbDevice.getInterfaceCount();
  for (int ntrfaceIndex=0; !isAudioDevice && ntrfaceIndex < interfaceCount; ntrfaceIndex++) {
    UsbInterface ntrface=usbDevice.getInterface(ntrfaceIndex);
    if (ntrface.getInterfaceClass() == UsbConstants.USB_CLASS_AUDIO) {
      isAudioDevice=true;
    }
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + isAudioDevice);
  }
  if (!isAudioDevice) {
    return;
  }
  int addedCard=mCardsParser.getDefaultUsbCard();
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"" + addedCard + ""String_Node_Str""+ mCardsParser.isCardUsb(addedCard));
  }
  if (mCardsParser.isCardUsb(addedCard)) {
    UsbAudioDevice audioDevice=selectAudioCard(addedCard);
    if (audioDevice != null) {
      mAudioDevices.put(usbDevice,audioDevice);
    }
    boolean hasMidi=mDevicesParser.hasMIDIDevices(addedCard);
    if (hasMidi && mHasMidiFeature) {
      int device=mDevicesParser.getDefaultDeviceNum(addedCard);
      AlsaDevice alsaDevice=waitForAlsaDevice(addedCard,device,AlsaDevice.TYPE_MIDI);
      if (alsaDevice != null) {
        Bundle properties=new Bundle();
        String manufacturer=usbDevice.getManufacturerName();
        String product=usbDevice.getProductName();
        String version=usbDevice.getVersion();
        String name;
        if (manufacturer == null || manufacturer.isEmpty()) {
          name=product;
        }
 else         if (product == null || product.isEmpty()) {
          name=manufacturer;
        }
 else {
          name=manufacturer + ""String_Node_Str"" + product;
        }
        properties.putString(MidiDeviceInfo.PROPERTY_NAME,name);
        properties.putString(MidiDeviceInfo.PROPERTY_MANUFACTURER,manufacturer);
        properties.putString(MidiDeviceInfo.PROPERTY_PRODUCT,product);
        properties.putString(MidiDeviceInfo.PROPERTY_VERSION,version);
        properties.putString(MidiDeviceInfo.PROPERTY_SERIAL_NUMBER,usbDevice.getSerialNumber());
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_CARD,alsaDevice.mCard);
        properties.putInt(MidiDeviceInfo.PROPERTY_ALSA_DEVICE,alsaDevice.mDevice);
        properties.putParcelable(MidiDeviceInfo.PROPERTY_USB_DEVICE,usbDevice);
        UsbMidiDevice usbMidiDevice=UsbMidiDevice.create(mContext,properties,alsaDevice.mCard,alsaDevice.mDevice);
        if (usbMidiDevice != null) {
          mMidiDevices.put(usbDevice,usbMidiDevice);
        }
      }
    }
  }
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
}",0.8865183005333824
193426,"UsbAudioDevice selectDefaultDevice(){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
  mCardsParser.scan();
  return selectAudioCard(mCardsParser.getDefaultCard());
}","UsbAudioDevice selectDefaultDevice(){
  if (DEBUG) {
    Slog.d(TAG,""String_Node_Str"");
  }
  return selectAudioCard(mCardsParser.getDefaultCard());
}",0.9287925696594428
193427,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9896945160103054
193428,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193429,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9904043865661412
193430,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193431,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9896945160103054
193432,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193433,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9904043865661412
193434,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193435,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringMotionLocked();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.NETWORK_PROVIDER) != null) {
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasNetworkLocation=false;
}
if (mLocationManager != null && mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHasGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
mLocating=true;
}
 else {
mHasGps=false;
}
if (mLocating) {
break;
}
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9904043865661412
193436,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193437,"void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
cancelSensingAlarmLocked();
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}","void stepIdleStateLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mState);
  EventLogTags.writeDeviceIdleStep();
  final long now=SystemClock.elapsedRealtime();
  if ((now + mConstants.MIN_TIME_TO_ALARM) > mAlarmManager.getNextWakeFromIdleTime()) {
    if (mState != STATE_ACTIVE) {
      becomeActiveLocked(""String_Node_Str"",Process.myUid());
    }
    return;
  }
switch (mState) {
case STATE_INACTIVE:
    startMonitoringSignificantMotion();
  scheduleAlarmLocked(mConstants.IDLE_AFTER_INACTIVE_TIMEOUT,false);
mNextIdlePendingDelay=mConstants.IDLE_PENDING_TIMEOUT;
mNextIdleDelay=mConstants.IDLE_TIMEOUT;
mState=STATE_IDLE_PENDING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
break;
case STATE_IDLE_PENDING:
mState=STATE_SENSING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.SENSING_TIMEOUT);
cancelLocatingLocked();
mAnyMotionDetector.checkForAnyMotion();
mNotMoving=false;
mLocated=false;
mLastGenericLocation=null;
mLastGpsLocation=null;
break;
case STATE_SENSING:
mState=STATE_LOCATING;
if (DEBUG) Slog.d(TAG,""String_Node_Str"");
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
scheduleSensingAlarmLocked(mConstants.LOCATING_TIMEOUT);
mLocating=true;
mLocationManager.requestLocationUpdates(mLocationRequest,mGenericLocationListener,mHandler.getLooper());
if (mLocationManager.getProvider(LocationManager.GPS_PROVIDER) != null) {
mHaveGps=true;
mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,1000,5,mGpsLocationListener,mHandler.getLooper());
}
 else {
mHaveGps=false;
}
break;
case STATE_LOCATING:
cancelSensingAlarmLocked();
cancelLocatingLocked();
mAnyMotionDetector.stop();
case STATE_IDLE_MAINTENANCE:
scheduleAlarmLocked(mNextIdleDelay,true);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay + ""String_Node_Str"");
mNextIdleDelay=(long)(mNextIdleDelay * mConstants.IDLE_FACTOR);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + mNextIdleDelay);
mNextIdleDelay=Math.min(mNextIdleDelay,mConstants.MAX_IDLE_TIMEOUT);
mState=STATE_IDLE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_ON);
break;
case STATE_IDLE:
scheduleAlarmLocked(mNextIdlePendingDelay,false);
if (DEBUG) Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + mNextIdlePendingDelay + ""String_Node_Str"");
mNextIdlePendingDelay=Math.min(mConstants.MAX_IDLE_PENDING_TIMEOUT,(long)(mNextIdlePendingDelay * mConstants.IDLE_PENDING_FACTOR));
mState=STATE_IDLE_MAINTENANCE;
EventLogTags.writeDeviceIdle(mState,""String_Node_Str"");
mHandler.sendEmptyMessage(MSG_REPORT_IDLE_OFF);
break;
}
}",0.9896945160103054
193438,"void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    becomeInactiveIfAppropriateLocked();
  }
}","void handleMotionDetectedLocked(long timeout,String type){
  if (mState != STATE_ACTIVE) {
    scheduleReportActiveLocked(type,Process.myUid());
    mState=STATE_ACTIVE;
    mInactiveTimeout=timeout;
    EventLogTags.writeDeviceIdle(mState,type);
    cancelSensingAlarmLocked();
    becomeInactiveIfAppropriateLocked();
  }
}",0.948220064724919
193439,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193440,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193441,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193442,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193443,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193444,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193445,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193446,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193447,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193448,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193449,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193450,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193451,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193452,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193453,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193454,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193455,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193456,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193457,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193458,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193459,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193460,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193461,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193462,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193463,"boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr=null;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}","boolean attachApplicationLocked(ProcessRecord proc,String processName) throws RemoteException {
  boolean didSomething=false;
  if (mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        proc.addPackage(sr.appInfo.packageName,sr.appInfo.versionCode,mAm.mProcessStats);
        realStartServiceLocked(sr,proc,sr.createdFromFg);
        didSomething=true;
        if (!isServiceNeeded(sr,false,false)) {
          bringDownServiceLocked(sr);
        }
      }
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + sr.shortName,e);
      throw e;
    }
  }
  if (mRestartingServices.size() > 0) {
    ServiceRecord sr;
    for (int i=0; i < mRestartingServices.size(); i++) {
      sr=mRestartingServices.get(i);
      if (proc != sr.isolatedProc && (proc.uid != sr.appInfo.uid || !processName.equals(sr.processName))) {
        continue;
      }
      mAm.mHandler.removeCallbacks(sr.restarter);
      mAm.mHandler.post(sr.restarter);
    }
  }
  return didSomething;
}",0.9594540345242876
193464,"final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}","final void performServiceRestartLocked(ServiceRecord r){
  if (!mRestartingServices.contains(r)) {
    return;
  }
  if (!isServiceNeeded(r,false,false)) {
    Slog.wtf(TAG,""String_Node_Str"" + r);
    return;
  }
  try {
    bringUpServiceLocked(r,r.intent.getIntent().getFlags(),r.createdFromFg,true);
  }
 catch (  TransactionTooLargeException e) {
  }
}",0.8403908794788274
193465,"final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"");
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"");
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"");
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"");
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}","final boolean dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args,int opti,boolean dumpAll,String dumpPackage,boolean needSep){
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  if (mParallelBroadcasts.size() > 0 || mOrderedBroadcasts.size() > 0 || mPendingBroadcast != null) {
    boolean printed=false;
    for (int i=mParallelBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mParallelBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      br.dump(pw,""String_Node_Str"",sdf);
    }
    printed=false;
    needSep=true;
    for (int i=mOrderedBroadcasts.size() - 1; i >= 0; i--) {
      BroadcastRecord br=mOrderedBroadcasts.get(i);
      if (dumpPackage != null && !dumpPackage.equals(br.callerPackage)) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        printed=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str""+ i+ ""String_Node_Str"");
      mOrderedBroadcasts.get(i).dump(pw,""String_Node_Str"",sdf);
    }
    if (dumpPackage == null || (mPendingBroadcast != null && dumpPackage.equals(mPendingBroadcast.callerPackage))) {
      if (needSep) {
        pw.println();
      }
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      if (mPendingBroadcast != null) {
        mPendingBroadcast.dump(pw,""String_Node_Str"",sdf);
      }
 else {
        pw.println(""String_Node_Str"");
      }
      needSep=true;
    }
  }
  int i;
  boolean printed=false;
  i=-1;
  int lastIndex=mHistoryNext;
  int ringIndex=lastIndex;
  do {
    ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_HISTORY);
    BroadcastRecord r=mBroadcastHistory[ringIndex];
    if (r == null) {
      continue;
    }
    i++;
    if (dumpPackage != null && !dumpPackage.equals(r.callerPackage)) {
      continue;
    }
    if (!printed) {
      if (needSep) {
        pw.println();
      }
      needSep=true;
      pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      printed=true;
    }
    if (dumpAll) {
      pw.print(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
      pw.print(i);
      pw.println(""String_Node_Str"");
      r.dump(pw,""String_Node_Str"",sdf);
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(r);
      pw.print(""String_Node_Str"");
      pw.println(r.intent.toShortString(false,true,true,false));
      if (r.targetComp != null && r.targetComp != r.intent.getComponent()) {
        pw.print(""String_Node_Str"");
        pw.println(r.targetComp.toShortString());
      }
      Bundle bundle=r.intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
  }
 while (ringIndex != lastIndex);
  if (dumpPackage == null) {
    lastIndex=ringIndex=mSummaryHistoryNext;
    if (dumpAll) {
      printed=false;
      i=-1;
    }
 else {
      for (int j=i; j > 0 && ringIndex != lastIndex; ) {
        ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
        BroadcastRecord r=mBroadcastHistory[ringIndex];
        if (r == null) {
          continue;
        }
        j--;
      }
    }
    do {
      ringIndex=ringAdvance(ringIndex,-1,MAX_BROADCAST_SUMMARY_HISTORY);
      Intent intent=mBroadcastSummaryHistory[ringIndex];
      if (intent == null) {
        continue;
      }
      if (!printed) {
        if (needSep) {
          pw.println();
        }
        needSep=true;
        pw.println(""String_Node_Str"" + mQueueName + ""String_Node_Str"");
        printed=true;
      }
      if (!dumpAll && i >= 50) {
        pw.println(""String_Node_Str"");
        break;
      }
      i++;
      pw.print(""String_Node_Str"");
      pw.print(i);
      pw.print(""String_Node_Str"");
      pw.println(intent.toShortString(false,true,true,false));
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryDispatchTime[ringIndex] - mSummaryHistoryEnqueueTime[ringIndex],pw);
      pw.print(""String_Node_Str"");
      TimeUtils.formatDuration(mSummaryHistoryFinishTime[ringIndex] - mSummaryHistoryDispatchTime[ringIndex],pw);
      pw.println(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryEnqueueTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.print(sdf.format(new Date(mSummaryHistoryDispatchTime[ringIndex])));
      pw.print(""String_Node_Str"");
      pw.println(sdf.format(new Date(mSummaryHistoryFinishTime[ringIndex])));
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        pw.print(""String_Node_Str"");
        pw.println(bundle.toString());
      }
    }
 while (ringIndex != lastIndex);
  }
  return needSep;
}",0.9131730578183984
193466,"void dump(PrintWriter pw,String prefix){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(new Date(enqueueClockTime));
  pw.print(""String_Node_Str"");
  pw.println(new Date(dispatchClockTime));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}","void dump(PrintWriter pw,String prefix,SimpleDateFormat sdf){
  final long now=SystemClock.uptimeMillis();
  pw.print(prefix);
  pw.print(this);
  pw.print(""String_Node_Str"");
  pw.println(userId);
  pw.print(prefix);
  pw.println(intent.toInsecureString());
  if (targetComp != null && targetComp != intent.getComponent()) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(targetComp.toShortString());
  }
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(bundle.toString());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(callerPackage);
  pw.print(""String_Node_Str"");
  pw.print(callerApp != null ? callerApp.toShortString() : ""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.print(callingPid);
  pw.print(""String_Node_Str"");
  pw.println(callingUid);
  if ((requiredPermissions != null && requiredPermissions.length > 0) || appOp != AppOpsManager.OP_NONE) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(Arrays.toString(requiredPermissions));
    pw.print(""String_Node_Str"");
    pw.println(appOp);
  }
  if (options != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(options.toBundle());
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(sdf.format(new Date(enqueueClockTime)));
  pw.print(""String_Node_Str"");
  pw.println(sdf.format(new Date(dispatchClockTime)));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchTime,now,pw);
  pw.print(""String_Node_Str"");
  TimeUtils.formatDuration(dispatchClockTime - enqueueClockTime,pw);
  pw.print(""String_Node_Str"");
  if (finishTime != 0) {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime,now,pw);
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(finishTime - dispatchTime,pw);
    pw.print(""String_Node_Str"");
  }
 else {
    pw.print(""String_Node_Str"");
    TimeUtils.formatDuration(receiverTime,now,pw);
  }
  pw.println(""String_Node_Str"");
  if (anrCount != 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(anrCount);
  }
  if (resultTo != null || resultCode != -1 || resultData != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultTo);
    pw.print(""String_Node_Str"");
    pw.print(resultCode);
    pw.print(""String_Node_Str"");
    pw.println(resultData);
  }
  if (resultExtras != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(resultExtras);
  }
  if (resultAbort || ordered || sticky|| initialSticky) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(resultAbort);
    pw.print(""String_Node_Str"");
    pw.print(ordered);
    pw.print(""String_Node_Str"");
    pw.print(sticky);
    pw.print(""String_Node_Str"");
    pw.println(initialSticky);
  }
  if (nextReceiver != 0 || receiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(nextReceiver);
    pw.print(""String_Node_Str"");
    pw.println(receiver);
  }
  if (curFilter != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curFilter);
  }
  if (curReceiver != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curReceiver);
  }
  if (curApp != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(curApp);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println((curComponent != null ? curComponent.toShortString() : ""String_Node_Str""));
    if (curReceiver != null && curReceiver.applicationInfo != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(curReceiver.applicationInfo.sourceDir);
    }
  }
  if (state != IDLE) {
    String stateStr=""String_Node_Str"";
switch (state) {
case APP_RECEIVE:
      stateStr=""String_Node_Str"";
    break;
case CALL_IN_RECEIVE:
  stateStr=""String_Node_Str"";
break;
case CALL_DONE_RECEIVE:
stateStr=""String_Node_Str"";
break;
case WAITING_SERVICES:
stateStr=""String_Node_Str"";
break;
}
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(state);
pw.println(stateStr);
}
final int N=receivers != null ? receivers.size() : 0;
String p2=prefix + ""String_Node_Str"";
PrintWriterPrinter printer=new PrintWriterPrinter(pw);
for (int i=0; i < N; i++) {
Object o=receivers.get(i);
pw.print(prefix);
pw.print(""String_Node_Str"");
pw.print(i);
pw.print(""String_Node_Str"");
pw.println(o);
if (o instanceof BroadcastFilter) ((BroadcastFilter)o).dumpBrief(pw,p2);
 else if (o instanceof ResolveInfo) ((ResolveInfo)o).dump(printer,p2);
}
}",0.956034096007178
193467,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193468,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193469,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193470,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193471,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193472,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193473,"void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length != 0) {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}","void generate(Builder b,boolean includepad,boolean trackpad){
  CharSequence source=b.mText;
  int bufStart=b.mStart;
  int bufEnd=b.mEnd;
  TextPaint paint=b.mPaint;
  int outerWidth=b.mWidth;
  TextDirectionHeuristic textDir=b.mTextDir;
  float spacingmult=b.mSpacingMult;
  float spacingadd=b.mSpacingAdd;
  float ellipsizedWidth=b.mEllipsizedWidth;
  TextUtils.TruncateAt ellipsize=b.mEllipsize;
  LineBreaks lineBreaks=new LineBreaks();
  int[] spanEndCache=new int[4];
  int[] fmCache=new int[4 * 4];
  b.setLocale(paint.getTextLocale());
  mLineCount=0;
  int v=0;
  boolean needMultiply=(spacingmult != 1 || spacingadd != 0);
  Paint.FontMetricsInt fm=b.mFontMetricsInt;
  int[] chooseHtv=null;
  MeasuredText measured=b.mMeasuredText;
  Spanned spanned=null;
  if (source instanceof Spanned)   spanned=(Spanned)source;
  int paraEnd;
  for (int paraStart=bufStart; paraStart <= bufEnd; paraStart=paraEnd) {
    paraEnd=TextUtils.indexOf(source,CHAR_NEW_LINE,paraStart,bufEnd);
    if (paraEnd < 0)     paraEnd=bufEnd;
 else     paraEnd++;
    int firstWidthLineCount=1;
    int firstWidth=outerWidth;
    int restWidth=outerWidth;
    LineHeightSpan[] chooseHt=null;
    if (spanned != null) {
      LeadingMarginSpan[] sp=getParagraphSpans(spanned,paraStart,paraEnd,LeadingMarginSpan.class);
      for (int i=0; i < sp.length; i++) {
        LeadingMarginSpan lms=sp[i];
        firstWidth-=sp[i].getLeadingMargin(true);
        restWidth-=sp[i].getLeadingMargin(false);
        if (lms instanceof LeadingMarginSpan2) {
          LeadingMarginSpan2 lms2=(LeadingMarginSpan2)lms;
          firstWidthLineCount=Math.max(firstWidthLineCount,lms2.getLeadingMarginLineCount());
        }
      }
      chooseHt=getParagraphSpans(spanned,paraStart,paraEnd,LineHeightSpan.class);
      if (chooseHt.length == 0) {
        chooseHt=null;
      }
 else {
        if (chooseHtv == null || chooseHtv.length < chooseHt.length) {
          chooseHtv=ArrayUtils.newUnpaddedIntArray(chooseHt.length);
        }
        for (int i=0; i < chooseHt.length; i++) {
          int o=spanned.getSpanStart(chooseHt[i]);
          if (o < paraStart) {
            chooseHtv[i]=getLineTop(getLineForOffset(o));
          }
 else {
            chooseHtv[i]=v;
          }
        }
      }
    }
    measured.setPara(source,paraStart,paraEnd,textDir,b);
    char[] chs=measured.mChars;
    float[] widths=measured.mWidths;
    byte[] chdirs=measured.mLevels;
    int dir=measured.mDir;
    boolean easy=measured.mEasy;
    int[] variableTabStops=null;
    if (spanned != null) {
      TabStopSpan[] spans=getParagraphSpans(spanned,paraStart,paraEnd,TabStopSpan.class);
      if (spans.length > 0) {
        int[] stops=new int[spans.length];
        for (int i=0; i < spans.length; i++) {
          stops[i]=spans[i].getTabStop();
        }
        Arrays.sort(stops,0,stops.length);
        variableTabStops=stops;
      }
    }
    nSetupParagraph(b.mNativePtr,chs,paraEnd - paraStart,firstWidth,firstWidthLineCount,restWidth,variableTabStops,TAB_INCREMENT,b.mBreakStrategy,b.mHyphenationFrequency);
    if (mLeftIndents != null || mRightIndents != null) {
      int leftLen=mLeftIndents == null ? 0 : mLeftIndents.length;
      int rightLen=mRightIndents == null ? 0 : mRightIndents.length;
      int indentsLen=Math.max(1,Math.min(leftLen,rightLen) - mLineCount);
      int[] indents=new int[indentsLen];
      for (int i=0; i < indentsLen; i++) {
        int leftMargin=mLeftIndents == null ? 0 : mLeftIndents[Math.min(i + mLineCount,leftLen - 1)];
        int rightMargin=mRightIndents == null ? 0 : mRightIndents[Math.min(i + mLineCount,rightLen - 1)];
        indents[i]=leftMargin + rightMargin;
      }
      nSetIndents(b.mNativePtr,indents);
    }
    int fmCacheCount=0;
    int spanEndCacheCount=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      if (fmCacheCount * 4 >= fmCache.length) {
        int[] grow=new int[fmCacheCount * 4 * 2];
        System.arraycopy(fmCache,0,grow,0,fmCacheCount * 4);
        fmCache=grow;
      }
      if (spanEndCacheCount >= spanEndCache.length) {
        int[] grow=new int[spanEndCacheCount * 2];
        System.arraycopy(spanEndCache,0,grow,0,spanEndCacheCount);
        spanEndCache=grow;
      }
      if (spanned == null) {
        spanEnd=paraEnd;
        int spanLen=spanEnd - spanStart;
        measured.addStyleRun(paint,spanLen,fm);
      }
 else {
        spanEnd=spanned.nextSpanTransition(spanStart,paraEnd,MetricAffectingSpan.class);
        int spanLen=spanEnd - spanStart;
        MetricAffectingSpan[] spans=spanned.getSpans(spanStart,spanEnd,MetricAffectingSpan.class);
        spans=TextUtils.removeEmptySpans(spans,spanned,MetricAffectingSpan.class);
        measured.addStyleRun(paint,spans,spanLen,fm);
      }
      fmCache[fmCacheCount * 4 + 0]=fm.top;
      fmCache[fmCacheCount * 4 + 1]=fm.bottom;
      fmCache[fmCacheCount * 4 + 2]=fm.ascent;
      fmCache[fmCacheCount * 4 + 3]=fm.descent;
      fmCacheCount++;
      spanEndCache[spanEndCacheCount]=spanEnd;
      spanEndCacheCount++;
    }
    nGetWidths(b.mNativePtr,widths);
    int breakCount=nComputeLineBreaks(b.mNativePtr,lineBreaks,lineBreaks.breaks,lineBreaks.widths,lineBreaks.flags,lineBreaks.breaks.length);
    int[] breaks=lineBreaks.breaks;
    float[] lineWidths=lineBreaks.widths;
    int[] flags=lineBreaks.flags;
    final int remainingLineCount=mMaximumVisibleLineCount - mLineCount;
    final boolean ellipsisMayBeApplied=ellipsize != null && (ellipsize == TextUtils.TruncateAt.END || (mMaximumVisibleLineCount == 1 && ellipsize != TextUtils.TruncateAt.MARQUEE));
    if (remainingLineCount > 0 && remainingLineCount < breakCount && ellipsisMayBeApplied) {
      breaks[remainingLineCount - 1]=breaks[breakCount - 1];
      float width=0;
      int flag=0;
      for (int i=remainingLineCount - 1; i < breakCount; i++) {
        width+=lineWidths[i];
        flag|=flags[i] & TAB_MASK;
      }
      lineWidths[remainingLineCount - 1]=width;
      flags[remainingLineCount - 1]=flag;
      breakCount=remainingLineCount;
    }
    int here=paraStart;
    int fmTop=0, fmBottom=0, fmAscent=0, fmDescent=0;
    int fmCacheIndex=0;
    int spanEndCacheIndex=0;
    int breakIndex=0;
    for (int spanStart=paraStart, spanEnd; spanStart < paraEnd; spanStart=spanEnd) {
      spanEnd=spanEndCache[spanEndCacheIndex++];
      fm.top=fmCache[fmCacheIndex * 4 + 0];
      fm.bottom=fmCache[fmCacheIndex * 4 + 1];
      fm.ascent=fmCache[fmCacheIndex * 4 + 2];
      fm.descent=fmCache[fmCacheIndex * 4 + 3];
      fmCacheIndex++;
      if (fm.top < fmTop) {
        fmTop=fm.top;
      }
      if (fm.ascent < fmAscent) {
        fmAscent=fm.ascent;
      }
      if (fm.descent > fmDescent) {
        fmDescent=fm.descent;
      }
      if (fm.bottom > fmBottom) {
        fmBottom=fm.bottom;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] < spanStart) {
        breakIndex++;
      }
      while (breakIndex < breakCount && paraStart + breaks[breakIndex] <= spanEnd) {
        int endPos=paraStart + breaks[breakIndex];
        boolean moreChars=(endPos < bufEnd);
        v=out(source,here,endPos,fmAscent,fmDescent,fmTop,fmBottom,v,spacingmult,spacingadd,chooseHt,chooseHtv,fm,flags[breakIndex],needMultiply,chdirs,dir,easy,bufEnd,includepad,trackpad,chs,widths,paraStart,ellipsize,ellipsizedWidth,lineWidths[breakIndex],paint,moreChars);
        if (endPos < spanEnd) {
          fmTop=fm.top;
          fmBottom=fm.bottom;
          fmAscent=fm.ascent;
          fmDescent=fm.descent;
        }
 else {
          fmTop=fmBottom=fmAscent=fmDescent=0;
        }
        here=endPos;
        breakIndex++;
        if (mLineCount >= mMaximumVisibleLineCount) {
          return;
        }
      }
    }
    if (paraEnd == bufEnd)     break;
  }
  if ((bufEnd == bufStart || source.charAt(bufEnd - 1) == CHAR_NEW_LINE) && mLineCount < mMaximumVisibleLineCount) {
    measured.setPara(source,bufEnd,bufEnd,textDir,b);
    paint.getFontMetricsInt(fm);
    v=out(source,bufEnd,bufEnd,fm.ascent,fm.descent,fm.top,fm.bottom,v,spacingmult,spacingadd,null,null,fm,0,needMultiply,measured.mLevels,measured.mDir,measured.mEasy,bufEnd,includepad,trackpad,null,null,bufStart,ellipsize,ellipsizedWidth,0,paint,false);
  }
}",0.9975287806642156
193474,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193475,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193476,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193477,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193478,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193479,"private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}","private void setImplLocked(Alarm a,boolean rebatching,boolean doValidate){
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    if (mNextWakeFromIdle != null && a.whenElapsed > mNextWakeFromIdle.whenElapsed) {
      a.when=a.whenElapsed=a.maxWhenElapsed=mNextWakeFromIdle.whenElapsed;
    }
    final long nowElapsed=SystemClock.elapsedRealtime();
    final int fuzz=fuzzForDuration(a.whenElapsed - nowElapsed);
    if (fuzz > 0) {
      if (mRandom == null) {
        mRandom=new Random();
      }
      final int delta=mRandom.nextInt(fuzz);
      a.whenElapsed-=delta;
      if (false) {
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
        Slog.d(TAG,""String_Node_Str"" + (a.whenElapsed - nowElapsed));
        Slog.d(TAG,""String_Node_Str"" + fuzz);
        Slog.d(TAG,""String_Node_Str"" + delta);
        Slog.d(TAG,""String_Node_Str"" + a.whenElapsed);
      }
      a.when=a.maxWhenElapsed=a.whenElapsed;
    }
  }
 else   if (mPendingIdleUntil != null) {
    if ((a.flags & (AlarmManager.FLAG_ALLOW_WHILE_IDLE | AlarmManager.FLAG_ALLOW_WHILE_IDLE_UNRESTRICTED | AlarmManager.FLAG_WAKE_FROM_IDLE)) == 0) {
      mPendingWhileIdleAlarms.add(a);
      return;
    }
  }
  int whichBatch=((a.flags & AlarmManager.FLAG_STANDALONE) != 0) ? -1 : attemptCoalesceLocked(a.whenElapsed,a.maxWhenElapsed);
  if (whichBatch < 0) {
    Batch batch=new Batch(a);
    addBatchLocked(mAlarmBatches,batch);
  }
 else {
    Batch batch=mAlarmBatches.get(whichBatch);
    if (batch.add(a)) {
      mAlarmBatches.remove(whichBatch);
      addBatchLocked(mAlarmBatches,batch);
    }
  }
  if (a.alarmClock != null) {
    mNextAlarmClockMayChange=true;
  }
  boolean needRebatch=false;
  if ((a.flags & AlarmManager.FLAG_IDLE_UNTIL) != 0) {
    mPendingIdleUntil=a;
    mConstants.updateAllowWhileIdleMinTimeLocked();
    needRebatch=true;
  }
 else   if ((a.flags & AlarmManager.FLAG_WAKE_FROM_IDLE) != 0) {
    if (mNextWakeFromIdle == null || mNextWakeFromIdle.whenElapsed > a.whenElapsed) {
      mNextWakeFromIdle=a;
      if (mPendingIdleUntil != null) {
        needRebatch=true;
      }
    }
  }
  if (!rebatching) {
    if (DEBUG_VALIDATE) {
      if (doValidate && !validateConsistencyLocked()) {
        Slog.v(TAG,""String_Node_Str"" + a.type + ""String_Node_Str""+ a.when+ ""String_Node_Str""+ Long.toHexString(a.when)+ ""String_Node_Str""+ a.whenElapsed+ ""String_Node_Str""+ a.maxWhenElapsed+ ""String_Node_Str""+ a.repeatInterval+ ""String_Node_Str""+ a.operation+ ""String_Node_Str""+ Integer.toHexString(a.flags));
        rebatchAllAlarmsLocked(false);
        needRebatch=false;
      }
    }
    if (needRebatch) {
      rebatchAllAlarmsLocked(false);
    }
    rescheduleKernelAlarmsLocked();
    updateNextAlarmClockLocked();
  }
}",0.9909610772920124
193480,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193481,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193482,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193483,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193484,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193485,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193486,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193487,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193488,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193489,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193490,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193491,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193492,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193493,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193494,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193495,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193496,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193497,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193498,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193499,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193500,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193501,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193502,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193503,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193504,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193505,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193506,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193507,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193508,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193509,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193510,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193511,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193512,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193513,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193514,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193515,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193516,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193517,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193518,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193519,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193520,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193521,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193522,"@Override public void onClick(View v){
  startSelected(holder.itemIndex,false,true);
}","@Override public void onClick(View v){
  startSelected(holder.itemIndices[column],false,true);
}",0.934065934065934
193523,"RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndex,false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}","RowViewHolder createViewHolder(ViewGroup parent){
  final ViewGroup row=(ViewGroup)mLayoutInflater.inflate(R.layout.chooser_row,parent,false);
  final RowViewHolder holder=new RowViewHolder(row,mColumnCount);
  final int spec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);
  for (int i=0; i < mColumnCount; i++) {
    final View v=mChooserListAdapter.createView(row);
    final int column=i;
    v.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startSelected(holder.itemIndices[column],false,true);
      }
    }
);
    v.setOnLongClickListener(new OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
        return true;
      }
    }
);
    row.addView(v);
    holder.cells[i]=v;
    LayoutParams lp=v.getLayoutParams();
    v.measure(spec,spec);
    if (lp == null) {
      lp=new LayoutParams(LayoutParams.MATCH_PARENT,v.getMeasuredHeight());
      row.setLayoutParams(lp);
    }
 else {
      lp.height=v.getMeasuredHeight();
    }
  }
  holder.measure();
  LayoutParams lp=row.getLayoutParams();
  if (lp == null) {
    lp=new LayoutParams(LayoutParams.MATCH_PARENT,holder.measuredRowHeight);
    row.setLayoutParams(lp);
  }
 else {
    lp.height=holder.measuredRowHeight;
  }
  row.setTag(holder);
  return holder;
}",0.9813620071684588
193524,"public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
}","public RowViewHolder(ViewGroup row,int cellCount){
  this.row=row;
  this.cells=new View[cellCount];
  this.itemIndices=new int[cellCount];
}",0.8395061728395061
193525,"public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
          rs.startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}","public ChooserRowAdapter(ChooserListAdapter wrappedAdapter){
  mChooserListAdapter=wrappedAdapter;
  mLayoutInflater=LayoutInflater.from(ChooserActivity.this);
  mInterpolator=AnimationUtils.loadInterpolator(ChooserActivity.this,android.R.interpolator.decelerate_quint);
  wrappedAdapter.registerDataSetObserver(new DataSetObserver(){
    @Override public void onChanged(){
      super.onChanged();
      final int rcount=getServiceTargetRowCount();
      if (mServiceTargetScale == null || mServiceTargetScale.length != rcount) {
        RowScale[] old=mServiceTargetScale;
        int oldRCount=old != null ? old.length : 0;
        mServiceTargetScale=new RowScale[rcount];
        if (old != null && rcount > 0) {
          System.arraycopy(old,0,mServiceTargetScale,0,Math.min(old.length,rcount));
        }
        for (int i=rcount; i < oldRCount; i++) {
          old[i].cancelAnimation();
        }
        for (int i=oldRCount; i < rcount; i++) {
          final RowScale rs=new RowScale(ChooserRowAdapter.this,0.f,1.f).setInterpolator(mInterpolator);
          mServiceTargetScale[i]=rs;
        }
        for (int i=oldRCount; i < rcount; i++) {
          mServiceTargetScale[i].startAnimation();
        }
      }
      notifyDataSetChanged();
    }
    @Override public void onInvalidated(){
      super.onInvalidated();
      notifyDataSetInvalidated();
      if (mServiceTargetScale != null) {
        for (        RowScale rs : mServiceTargetScale) {
          rs.cancelAnimation();
        }
      }
    }
  }
);
}",0.970854271356784
193526,"void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndex=start + i;
      mChooserListAdapter.bindView(holder.itemIndex,v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}","void bindViewHolder(int rowPosition,RowViewHolder holder){
  final int start=getFirstRowPosition(rowPosition);
  final int startType=mChooserListAdapter.getPositionTargetType(start);
  int end=start + mColumnCount - 1;
  while (mChooserListAdapter.getPositionTargetType(end) != startType && end >= start) {
    end--;
  }
  if (startType == ChooserListAdapter.TARGET_SERVICE) {
    holder.row.setBackgroundColor(getColor(R.color.chooser_service_row_background_color));
  }
 else {
    holder.row.setBackgroundColor(Color.TRANSPARENT);
  }
  final int oldHeight=holder.row.getLayoutParams().height;
  holder.row.getLayoutParams().height=Math.max(1,(int)(holder.measuredRowHeight * getRowScale(rowPosition)));
  if (holder.row.getLayoutParams().height != oldHeight) {
    holder.row.requestLayout();
  }
  for (int i=0; i < mColumnCount; i++) {
    final View v=holder.cells[i];
    if (start + i <= end) {
      v.setVisibility(View.VISIBLE);
      holder.itemIndices[i]=start + i;
      mChooserListAdapter.bindView(holder.itemIndices[i],v);
    }
 else {
      v.setVisibility(View.GONE);
    }
  }
}",0.9917883211678832
193527,"@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos) * chooserTargetRows);
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}","@Override public void onChanged(){
  if (mResolverDrawerLayout == null) {
    return;
  }
  final int chooserTargetRows=mChooserRowAdapter.getServiceTargetRowCount();
  int offset=0;
  for (int i=0; i < chooserTargetRows; i++) {
    final int pos=mChooserRowAdapter.getCallerTargetRowCount() + i;
    final int vt=mChooserRowAdapter.getItemViewType(pos);
    if (vt != mCachedViewType) {
      mCachedView=null;
    }
    final View v=mChooserRowAdapter.getView(pos,mCachedView,mListView);
    int height=((RowViewHolder)(v.getTag())).measuredRowHeight;
    offset+=(int)(height * mChooserRowAdapter.getRowScale(pos));
    if (vt >= 0) {
      mCachedViewType=vt;
      mCachedView=v;
    }
 else {
      mCachedViewType=-1;
    }
  }
  mResolverDrawerLayout.setCollapsibleHeightReserved(offset);
}",0.9876237623762376
193528,"@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndex,true));
  return true;
}","@Override public boolean onLongClick(View v){
  showAppDetails(mChooserListAdapter.resolveInfoForPosition(holder.itemIndices[column],true));
  return true;
}",0.9605263157894736
193529,"@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
  mActionButtonTranslationZ=mActionButtonView.getTranslationZ();
}","@Override protected void onFinishInflate(){
  mContent=findViewById(R.id.task_view_content);
  mHeaderView=(TaskViewHeader)findViewById(R.id.task_view_bar);
  mThumbnailView=(TaskViewThumbnail)findViewById(R.id.task_view_thumbnail);
  mActionButtonView=findViewById(R.id.lock_to_app_fab);
  mActionButtonView.setOutlineProvider(new ViewOutlineProvider(){
    @Override public void getOutline(    View view,    Outline outline){
      outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
    }
  }
);
  mActionButtonTranslationZ=mActionButtonView.getTranslationZ();
}",0.9588377723970944
193530,"@Override public void getOutline(View view,Outline outline){
  outline.setOval(0,0,mActionButtonView.getWidth(),mActionButtonView.getHeight());
}","@Override public void getOutline(View view,Outline outline){
  outline.setRect(0,0,width,height);
}",0.7704918032786885
193531,"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  int widthWithoutPadding=width - mPaddingLeft - mPaddingRight;
  int heightWithoutPadding=height - mPaddingTop - mPaddingBottom;
  int taskBarHeight=getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  mContent.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY));
  mHeaderView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(taskBarHeight,MeasureSpec.EXACTLY));
  mActionButtonView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(heightWithoutPadding,MeasureSpec.AT_MOST));
  mThumbnailView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY));
  setMeasuredDimension(width,height);
  invalidateOutline();
}","@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  int widthWithoutPadding=width - mPaddingLeft - mPaddingRight;
  int heightWithoutPadding=height - mPaddingTop - mPaddingBottom;
  int taskBarHeight=getResources().getDimensionPixelSize(R.dimen.recents_task_bar_height);
  mContent.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY));
  mHeaderView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(taskBarHeight,MeasureSpec.EXACTLY));
  mActionButtonView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(heightWithoutPadding,MeasureSpec.AT_MOST));
  mThumbnailView.measure(MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(widthWithoutPadding,MeasureSpec.EXACTLY));
  mThumbnailView.updateClipToTaskBar(mHeaderView);
  setMeasuredDimension(width,height);
  invalidateOutline();
}",0.9776609724047306
193532,"/** 
 * View.OnLongClickListener Implementation 
 */
@Override public boolean onLongClick(View v){
  if (v == this) {
    setClipViewInStack(false);
    int width=(int)(getScaleX() * getWidth());
    int height=(int)(getScaleY() * getHeight());
    Bitmap dragBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(dragBitmap);
    c.scale(getScaleX(),getScaleY());
    mThumbnailView.draw(c);
    mHeaderView.draw(c);
    c.setBitmap(null);
    final DragView dragView=new DragView(getContext(),dragBitmap,mDownTouchPos);
    dragView.setOutlineProvider(mViewBounds);
    dragView.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener(){
      @Override public void onViewAttachedToWindow(      View v){
        setVisibility(View.INVISIBLE);
        dragView.setElevation(getElevation());
        dragView.setTranslationZ(getTranslationZ());
        dragView.animate().scaleX(1.05f).scaleY(1.05f).setDuration(175).setInterpolator(mFastOutSlowInInterpolator).start();
      }
      @Override public void onViewDetachedFromWindow(      View v){
      }
    }
);
    EventBus.getDefault().register(this,RecentsActivity.EVENT_BUS_PRIORITY + 1);
    EventBus.getDefault().send(new DragStartEvent(mTask,this,dragView));
    return true;
  }
  return false;
}","/** 
 * View.OnLongClickListener Implementation 
 */
@Override public boolean onLongClick(View v){
  if (v == this) {
    setClipViewInStack(false);
    final int width=(int)(getScaleX() * getWidth());
    final int height=(int)(getScaleY() * getHeight());
    Bitmap dragBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    Canvas c=new Canvas(dragBitmap);
    c.scale(getScaleX(),getScaleY());
    mThumbnailView.draw(c);
    mHeaderView.draw(c);
    c.setBitmap(null);
    final DragView dragView=new DragView(getContext(),dragBitmap,mDownTouchPos);
    dragView.setOutlineProvider(new ViewOutlineProvider(){
      @Override public void getOutline(      View view,      Outline outline){
        outline.setRect(0,0,width,height);
      }
    }
);
    dragView.addOnAttachStateChangeListener(new View.OnAttachStateChangeListener(){
      @Override public void onViewAttachedToWindow(      View v){
        setVisibility(View.INVISIBLE);
        dragView.setElevation(getElevation());
        dragView.setTranslationZ(getTranslationZ());
        dragView.animate().scaleX(1.05f).scaleY(1.05f).setDuration(175).setInterpolator(mFastOutSlowInInterpolator).start();
      }
      @Override public void onViewDetachedFromWindow(      View v){
      }
    }
);
    EventBus.getDefault().register(this,RecentsActivity.EVENT_BUS_PRIORITY + 1);
    EventBus.getDefault().send(new DragStartEvent(mTask,this,dragView));
    return true;
  }
  return false;
}",0.9328519855595668
193533,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193534,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193535,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193536,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9687705456936226
193537,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193538,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193539,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193540,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9687705456936226
193541,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193542,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193543,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193544,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9687705456936226
193545,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193546,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193547,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193548,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9569941149841558
193549,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193550,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193551,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193552,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      int sigMotionSensorId=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeAnyMotionSensor);
      if (sigMotionSensorId > 0) {
        mMotionSensor=mSensorManager.getDefaultSensor(sigMotionSensorId,true);
      }
      if (mMotionSensor == null && getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePreferWristTilt)) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_WRIST_TILT_GESTURE,true);
      }
      if (mMotionSensor == null) {
        mMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION,true);
      }
      if (getContext().getResources().getBoolean(com.android.internal.R.bool.config_autoPowerModePrefetchLocation)) {
        mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
        mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      }
      float angleThreshold=getContext().getResources().getInteger(com.android.internal.R.integer.config_autoPowerModeThresholdAngle) / 100f;
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this,angleThreshold);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9687705456936226
193553,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193554,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193555,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193556,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193557,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193558,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193559,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9569941149841558
193560,"@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (Intent.ACTION_BATTERY_CHANGED.equals(intent.getAction())) {
    int plugged=intent.getIntExtra(""String_Node_Str"",0);
    updateChargingLocked(plugged != 0);
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction())) {
    if (!intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
      Uri data=intent.getData();
      String ssp;
      if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
        removePowerSaveWhitelistAppInternal(ssp);
      }
    }
  }
 else   if (ACTION_STEP_IDLE_STATE.equals(intent.getAction())) {
synchronized (DeviceIdleController.this) {
      stepIdleStateLocked();
    }
  }
}",0.6979742173112339
193561,"private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,0);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}","private void readConfigFileLocked(XmlPullParser parser){
  final PackageManager pm=getContext().getPackageManager();
  try {
    int type;
    while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
      ;
    }
    if (type != XmlPullParser.START_TAG) {
      throw new IllegalStateException(""String_Node_Str"");
    }
    int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      String tagName=parser.getName();
      if (tagName.equals(""String_Node_Str"")) {
        String name=parser.getAttributeValue(null,""String_Node_Str"");
        if (name != null) {
          try {
            ApplicationInfo ai=pm.getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
            mPowerSaveWhitelistUserApps.put(ai.packageName,UserHandle.getAppId(ai.uid));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Slog.w(TAG,""String_Node_Str"" + parser.getName());
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  IllegalStateException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NullPointerException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  NumberFormatException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  XmlPullParserException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IOException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
catch (  IndexOutOfBoundsException e) {
    Slog.w(TAG,""String_Node_Str"" + e);
  }
}",0.9618801948982516
193562,"public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,0);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}","public boolean addPowerSaveWhitelistAppInternal(String name){
synchronized (this) {
    try {
      ApplicationInfo ai=getContext().getPackageManager().getApplicationInfo(name,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
      if (mPowerSaveWhitelistUserApps.put(name,UserHandle.getAppId(ai.uid)) == null) {
        reportPowerSaveWhitelistChangedLocked();
        updateWhitelistAppIdsLocked();
        writeConfigFileLocked();
      }
      return true;
    }
 catch (    PackageManager.NameNotFoundException e) {
      return false;
    }
  }
}",0.8836395450568679
193563,"@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}","@Override public void onBootPhase(int phase){
  if (phase == PHASE_SYSTEM_SERVICES_READY) {
synchronized (this) {
      mAlarmManager=(AlarmManager)getContext().getSystemService(Context.ALARM_SERVICE);
      mBatteryStats=BatteryStatsService.getService();
      mLocalPowerManager=getLocalService(PowerManagerInternal.class);
      mNetworkPolicyManager=INetworkPolicyManager.Stub.asInterface(ServiceManager.getService(Context.NETWORK_POLICY_SERVICE));
      mDisplayManager=(DisplayManager)getContext().getSystemService(Context.DISPLAY_SERVICE);
      mSensorManager=(SensorManager)getContext().getSystemService(Context.SENSOR_SERVICE);
      mSigMotionSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_SIGNIFICANT_MOTION);
      mLocationManager=(LocationManager)getContext().getSystemService(Context.LOCATION_SERVICE);
      mLocationRequest=new LocationRequest().setQuality(LocationRequest.ACCURACY_FINE).setInterval(0).setFastestInterval(0).setNumUpdates(1);
      mAnyMotionDetector=new AnyMotionDetector((PowerManager)getContext().getSystemService(Context.POWER_SERVICE),mHandler,mSensorManager,this);
      Intent intent=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intent,0);
      Intent intentSensing=new Intent(ACTION_STEP_IDLE_STATE).setPackage(""String_Node_Str"").setFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY);
      mSensingAlarmIntent=PendingIntent.getBroadcast(getContext(),0,intentSensing,0);
      mIdleIntent=new Intent(PowerManager.ACTION_DEVICE_IDLE_MODE_CHANGED);
      mIdleIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY | Intent.FLAG_RECEIVER_FOREGROUND);
      IntentFilter filter=new IntentFilter();
      filter.addAction(Intent.ACTION_BATTERY_CHANGED);
      filter.addAction(ACTION_STEP_IDLE_STATE);
      getContext().registerReceiver(mReceiver,filter);
      filter=new IntentFilter();
      filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
      filter.addDataScheme(""String_Node_Str"");
      getContext().registerReceiver(mReceiver,filter);
      mLocalPowerManager.setDeviceIdleWhitelist(mPowerSaveWhitelistAllAppIdArray);
      mDisplayManager.registerDisplayListener(mDisplayListener,null);
      updateDisplayLocked();
    }
  }
}",0.9569941149841558
193564,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193565,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193566,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193567,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193568,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193569,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193570,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193571,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193572,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193573,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193574,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193575,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193576,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193577,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193578,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193579,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193580,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193581,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193582,"/** 
 * Handles dragging touch events
 * @param ev
 */
private void handleTouchEvent(MotionEvent ev){
  boolean isLandscape=mRv.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mDownPos.set((int)ev.getX(),(int)ev.getY());
  break;
case MotionEvent.ACTION_MOVE:
{
  if (mDragging) {
    int width=mRv.getMeasuredWidth();
    int height=mRv.getMeasuredHeight();
    float evX=ev.getX();
    float evY=ev.getY();
    float x=evX - mDragView.getTopLeftOffset().x;
    float y=evY - mDragView.getTopLeftOffset().y;
    TaskStack.DockState[] dockStates=isLandscape ? DockRegion.LANDSCAPE : DockRegion.PORTRAIT;
    TaskStack.DockState foundDockState=TaskStack.DockState.NONE;
    for (int i=0; i < dockStates.length; i++) {
      TaskStack.DockState state=dockStates[i];
      if (state.touchAreaContainsPoint(width,height,evX,evY)) {
        foundDockState=state;
        break;
      }
    }
    if (mLastDockState != foundDockState) {
      mLastDockState=foundDockState;
      EventBus.getDefault().send(new DragDockStateChangedEvent(mDragTask,foundDockState));
    }
    mDragView.setTranslationX(x);
    mDragView.setTranslationY(y);
  }
  break;
}
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
{
ReferenceCountedTrigger postAnimationTrigger=new ReferenceCountedTrigger(mRv.getContext(),null,null,null);
postAnimationTrigger.increment();
EventBus.getDefault().send(new DragEndEvent(mDragTask,mTaskView,mDragView,mLastDockState,postAnimationTrigger));
postAnimationTrigger.decrement();
break;
}
}
}","/** 
 * Handles dragging touch events
 * @param ev
 */
private void handleTouchEvent(MotionEvent ev){
  boolean isLandscape=mRv.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mDownPos.set((int)ev.getX(),(int)ev.getY());
  break;
case MotionEvent.ACTION_MOVE:
{
  if (mDragging) {
    int width=mRv.getMeasuredWidth();
    int height=mRv.getMeasuredHeight();
    float evX=ev.getX();
    float evY=ev.getY();
    float x=evX - mDragView.getTopLeftOffset().x;
    float y=evY - mDragView.getTopLeftOffset().y;
    TaskStack.DockState[] dockStates=isLandscape ? DockRegion.LANDSCAPE : DockRegion.PORTRAIT;
    TaskStack.DockState foundDockState=TaskStack.DockState.NONE;
    for (int i=0; i < dockStates.length; i++) {
      TaskStack.DockState state=dockStates[i];
      if (state.touchAreaContainsPoint(width,height,evX,evY)) {
        foundDockState=state;
        break;
      }
    }
    if (mLastDockState != foundDockState) {
      mLastDockState=foundDockState;
      EventBus.getDefault().send(new DragDockStateChangedEvent(mDragTask,foundDockState));
    }
    mDragView.setTranslationX(x);
    mDragView.setTranslationY(y);
  }
  break;
}
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
{
if (mDragging) {
  ReferenceCountedTrigger postAnimationTrigger=new ReferenceCountedTrigger(mRv.getContext(),null,null,null);
  postAnimationTrigger.increment();
  EventBus.getDefault().send(new DragEndEvent(mDragTask,mTaskView,mDragView,mLastDockState,postAnimationTrigger));
  postAnimationTrigger.decrement();
  break;
}
}
}
}",0.9913147648996704
193583,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193584,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193585,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193586,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193587,"/** 
 * Handles dragging touch events
 * @param ev
 */
private void handleTouchEvent(MotionEvent ev){
  boolean isLandscape=mRv.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mDownPos.set((int)ev.getX(),(int)ev.getY());
  break;
case MotionEvent.ACTION_MOVE:
{
  if (mDragging) {
    int width=mRv.getMeasuredWidth();
    int height=mRv.getMeasuredHeight();
    float evX=ev.getX();
    float evY=ev.getY();
    float x=evX - mDragView.getTopLeftOffset().x;
    float y=evY - mDragView.getTopLeftOffset().y;
    TaskStack.DockState[] dockStates=isLandscape ? DockRegion.LANDSCAPE : DockRegion.PORTRAIT;
    TaskStack.DockState foundDockState=TaskStack.DockState.NONE;
    for (int i=0; i < dockStates.length; i++) {
      TaskStack.DockState state=dockStates[i];
      if (state.touchAreaContainsPoint(width,height,evX,evY)) {
        foundDockState=state;
        break;
      }
    }
    if (mLastDockState != foundDockState) {
      mLastDockState=foundDockState;
      EventBus.getDefault().send(new DragDockStateChangedEvent(mDragTask,foundDockState));
    }
    mDragView.setTranslationX(x);
    mDragView.setTranslationY(y);
  }
  break;
}
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
{
ReferenceCountedTrigger postAnimationTrigger=new ReferenceCountedTrigger(mRv.getContext(),null,null,null);
postAnimationTrigger.increment();
EventBus.getDefault().send(new DragEndEvent(mDragTask,mTaskView,mDragView,mLastDockState,postAnimationTrigger));
postAnimationTrigger.decrement();
break;
}
}
}","/** 
 * Handles dragging touch events
 * @param ev
 */
private void handleTouchEvent(MotionEvent ev){
  boolean isLandscape=mRv.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;
  int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
    mDownPos.set((int)ev.getX(),(int)ev.getY());
  break;
case MotionEvent.ACTION_MOVE:
{
  if (mDragging) {
    int width=mRv.getMeasuredWidth();
    int height=mRv.getMeasuredHeight();
    float evX=ev.getX();
    float evY=ev.getY();
    float x=evX - mDragView.getTopLeftOffset().x;
    float y=evY - mDragView.getTopLeftOffset().y;
    TaskStack.DockState[] dockStates=isLandscape ? DockRegion.LANDSCAPE : DockRegion.PORTRAIT;
    TaskStack.DockState foundDockState=TaskStack.DockState.NONE;
    for (int i=0; i < dockStates.length; i++) {
      TaskStack.DockState state=dockStates[i];
      if (state.touchAreaContainsPoint(width,height,evX,evY)) {
        foundDockState=state;
        break;
      }
    }
    if (mLastDockState != foundDockState) {
      mLastDockState=foundDockState;
      EventBus.getDefault().send(new DragDockStateChangedEvent(mDragTask,foundDockState));
    }
    mDragView.setTranslationX(x);
    mDragView.setTranslationY(y);
  }
  break;
}
case MotionEvent.ACTION_UP:
case MotionEvent.ACTION_CANCEL:
{
if (mDragging) {
  ReferenceCountedTrigger postAnimationTrigger=new ReferenceCountedTrigger(mRv.getContext(),null,null,null);
  postAnimationTrigger.increment();
  EventBus.getDefault().send(new DragEndEvent(mDragTask,mTaskView,mDragView,mLastDockState,postAnimationTrigger));
  postAnimationTrigger.decrement();
  break;
}
}
}
}",0.9913147648996704
193588,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193589,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193590,"VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}","VoiceInteractionManagerServiceImpl(Context context,Handler handler,Object lock,int userHandle,ComponentName service){
  mContext=context;
  mHandler=handler;
  mLock=lock;
  mUser=userHandle;
  mComponent=service;
  mAm=ActivityManagerNative.getDefault();
  VoiceInteractionServiceInfo info;
  try {
    info=new VoiceInteractionServiceInfo(context.getPackageManager(),service,mUser);
  }
 catch (  RemoteException|PackageManager.NameNotFoundException e) {
    Slog.w(TAG,""String_Node_Str"" + service,e);
    mInfo=null;
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mInfo=info;
  if (mInfo.getParseError() != null) {
    Slog.w(TAG,""String_Node_Str"" + mInfo.getParseError());
    mSessionComponentName=null;
    mIWindowManager=null;
    mValid=false;
    return;
  }
  mValid=true;
  mSessionComponentName=new ComponentName(service.getPackageName(),mInfo.getSessionService());
  mIWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService(Context.WINDOW_SERVICE));
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
  mContext.registerReceiver(mBroadcastReceiver,filter,null,handler);
}",0.9898648648648648
193591,"public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}","public void dumpLocked(FileDescriptor fd,PrintWriter pw,String[] args){
  if (!mValid) {
    pw.print(""String_Node_Str"");
    if (mInfo == null) {
      pw.println(""String_Node_Str"");
    }
 else {
      pw.println(mInfo.getParseError());
    }
    return;
  }
  pw.print(""String_Node_Str"");
  pw.println(mUser);
  pw.print(""String_Node_Str"");
  pw.println(mComponent.flattenToShortString());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSessionService());
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.println(""String_Node_Str"");
  mInfo.getServiceInfo().applicationInfo.dump(new PrintWriterPrinter(pw),""String_Node_Str"");
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getRecognitionService());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSettingsActivity());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsAssist());
  pw.print(""String_Node_Str"");
  pw.println(mInfo.getSupportsLaunchFromKeyguard());
  if (mDisabledShowContext != 0) {
    pw.print(""String_Node_Str"");
    pw.println(Integer.toHexString(mDisabledShowContext));
  }
  pw.print(""String_Node_Str"");
  pw.print(mBound);
  pw.print(""String_Node_Str"");
  pw.println(mService);
  if (mActiveSession != null) {
    pw.println(""String_Node_Str"");
    mActiveSession.dump(""String_Node_Str"",pw);
  }
}",0.7642792384406165
193592,"@Override public void onInputEvent(InputEvent event){
  if (!(event instanceof MotionEvent) || (event.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
    return;
  }
  final MotionEvent motionEvent=(MotionEvent)event;
  boolean handled=false;
  try {
    if (mDragEnded) {
      handled=true;
      return;
    }
    final float newX=motionEvent.getRawX();
    final float newY=motionEvent.getRawY();
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
{
        if (DEBUG_TASK_POSITIONING) {
          Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
        }
      }
    break;
case MotionEvent.ACTION_MOVE:
{
    if (DEBUG_TASK_POSITIONING) {
      Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
    }
synchronized (mService.mWindowMap) {
      mDragEnded=notifyMoveLocked(newX,newY);
    }
    Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"");
    try {
      mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER);
    }
 catch (    RemoteException e) {
    }
    Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);
  }
break;
case MotionEvent.ACTION_UP:
{
if (DEBUG_TASK_POSITIONING) {
  Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (DEBUG_TASK_POSITIONING) {
Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
}
if (mDragEnded) {
synchronized (mService.mWindowMap) {
endDragLocked();
}
try {
if (mResizing) {
mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER_FORCED);
}
if (mCurrentDimSide != CTRL_NONE) {
final int createMode=mCurrentDimSide == CTRL_LEFT ? DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT : DOCKED_STACK_CREATE_MODE_BOTTOM_OR_RIGHT;
mService.mActivityManager.moveTaskToDockedStack(mTask.mTaskId,createMode,true);
}
}
 catch (RemoteException e) {
}
mService.mH.sendEmptyMessage(H.FINISH_TASK_POSITIONING);
}
handled=true;
}
 catch (Exception e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
finishInputEvent(event,handled);
}
}","@Override public void onInputEvent(InputEvent event){
  if (!(event instanceof MotionEvent) || (event.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
    return;
  }
  final MotionEvent motionEvent=(MotionEvent)event;
  boolean handled=false;
  try {
    if (mDragEnded) {
      handled=true;
      return;
    }
    final float newX=motionEvent.getRawX();
    final float newY=motionEvent.getRawY();
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
{
        if (DEBUG_TASK_POSITIONING) {
          Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
        }
      }
    break;
case MotionEvent.ACTION_MOVE:
{
    if (DEBUG_TASK_POSITIONING) {
      Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
    }
synchronized (mService.mWindowMap) {
      mDragEnded=notifyMoveLocked(newX,newY);
      mTask.getBounds(mTmpRect);
    }
    if (!mTmpRect.equals(mWindowDragBounds)) {
      Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"");
      try {
        mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER);
      }
 catch (      RemoteException e) {
      }
      Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);
    }
  }
break;
case MotionEvent.ACTION_UP:
{
if (DEBUG_TASK_POSITIONING) {
  Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (DEBUG_TASK_POSITIONING) {
Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
}
if (mDragEnded) {
final boolean wasResizing=mResizing;
synchronized (mService.mWindowMap) {
endDragLocked();
}
try {
if (wasResizing) {
mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER_FORCED);
}
if (mCurrentDimSide != CTRL_NONE) {
final int createMode=mCurrentDimSide == CTRL_LEFT ? DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT : DOCKED_STACK_CREATE_MODE_BOTTOM_OR_RIGHT;
mService.mActivityManager.moveTaskToDockedStack(mTask.mTaskId,createMode,true);
}
}
 catch (RemoteException e) {
}
mService.mH.sendEmptyMessage(H.FINISH_TASK_POSITIONING);
}
handled=true;
}
 catch (Exception e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
finishInputEvent(event,handled);
}
}",0.9600713807718046
193593,"@Override public void onInputEvent(InputEvent event){
  if (!(event instanceof MotionEvent) || (event.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
    return;
  }
  final MotionEvent motionEvent=(MotionEvent)event;
  boolean handled=false;
  try {
    if (mDragEnded) {
      handled=true;
      return;
    }
    final float newX=motionEvent.getRawX();
    final float newY=motionEvent.getRawY();
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
{
        if (DEBUG_TASK_POSITIONING) {
          Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
        }
      }
    break;
case MotionEvent.ACTION_MOVE:
{
    if (DEBUG_TASK_POSITIONING) {
      Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
    }
synchronized (mService.mWindowMap) {
      mDragEnded=notifyMoveLocked(newX,newY);
    }
    Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"");
    try {
      mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER);
    }
 catch (    RemoteException e) {
    }
    Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);
  }
break;
case MotionEvent.ACTION_UP:
{
if (DEBUG_TASK_POSITIONING) {
  Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (DEBUG_TASK_POSITIONING) {
Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
}
if (mDragEnded) {
synchronized (mService.mWindowMap) {
endDragLocked();
}
try {
if (mResizing) {
mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER_FORCED);
}
if (mCurrentDimSide != CTRL_NONE) {
final int createMode=mCurrentDimSide == CTRL_LEFT ? DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT : DOCKED_STACK_CREATE_MODE_BOTTOM_OR_RIGHT;
mService.mActivityManager.moveTaskToDockedStack(mTask.mTaskId,createMode,true);
}
}
 catch (RemoteException e) {
}
mService.mH.sendEmptyMessage(H.FINISH_TASK_POSITIONING);
}
handled=true;
}
 catch (Exception e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
finishInputEvent(event,handled);
}
}","@Override public void onInputEvent(InputEvent event){
  if (!(event instanceof MotionEvent) || (event.getSource() & InputDevice.SOURCE_CLASS_POINTER) == 0) {
    return;
  }
  final MotionEvent motionEvent=(MotionEvent)event;
  boolean handled=false;
  try {
    if (mDragEnded) {
      handled=true;
      return;
    }
    final float newX=motionEvent.getRawX();
    final float newY=motionEvent.getRawY();
switch (motionEvent.getAction()) {
case MotionEvent.ACTION_DOWN:
{
        if (DEBUG_TASK_POSITIONING) {
          Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
        }
      }
    break;
case MotionEvent.ACTION_MOVE:
{
    if (DEBUG_TASK_POSITIONING) {
      Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
    }
synchronized (mService.mWindowMap) {
      mDragEnded=notifyMoveLocked(newX,newY);
      mTask.getBounds(mTmpRect);
    }
    if (!mTmpRect.equals(mWindowDragBounds)) {
      Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER,""String_Node_Str"");
      try {
        mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER);
      }
 catch (      RemoteException e) {
      }
      Trace.traceEnd(Trace.TRACE_TAG_WINDOW_MANAGER);
    }
  }
break;
case MotionEvent.ACTION_UP:
{
if (DEBUG_TASK_POSITIONING) {
  Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
case MotionEvent.ACTION_CANCEL:
{
if (DEBUG_TASK_POSITIONING) {
Slog.w(TAG,""String_Node_Str"" + newX + ""String_Node_Str""+ newY+ ""String_Node_Str"");
}
mDragEnded=true;
}
break;
}
if (mDragEnded) {
final boolean wasResizing=mResizing;
synchronized (mService.mWindowMap) {
endDragLocked();
}
try {
if (wasResizing) {
mService.mActivityManager.resizeTask(mTask.mTaskId,mWindowDragBounds,RESIZE_MODE_USER_FORCED);
}
if (mCurrentDimSide != CTRL_NONE) {
final int createMode=mCurrentDimSide == CTRL_LEFT ? DOCKED_STACK_CREATE_MODE_TOP_OR_LEFT : DOCKED_STACK_CREATE_MODE_BOTTOM_OR_RIGHT;
mService.mActivityManager.moveTaskToDockedStack(mTask.mTaskId,createMode,true);
}
}
 catch (RemoteException e) {
}
mService.mH.sendEmptyMessage(H.FINISH_TASK_POSITIONING);
}
handled=true;
}
 catch (Exception e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
finishInputEvent(event,handled);
}
}",0.9600713807718046
193594,"private void readFromParcelInner(Parcel parcel,int length){
  if (length == 0) {
    mParcelledData=EMPTY_PARCEL;
    return;
  }
  int magic=parcel.readInt();
  if (magic != BUNDLE_MAGIC) {
    throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  int offset=parcel.dataPosition();
  parcel.setDataPosition(offset + length);
  Parcel p=Parcel.obtain();
  p.setDataPosition(0);
  p.appendFrom(parcel,offset,length);
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(this)) + ""String_Node_Str""+ length+ ""String_Node_Str""+ offset);
  p.setDataPosition(0);
  mParcelledData=p;
}","private void readFromParcelInner(Parcel parcel,int length){
  if (length < 0) {
    throw new RuntimeException(""String_Node_Str"" + length);
  }
 else   if (length == 0) {
    mParcelledData=EMPTY_PARCEL;
    return;
  }
  int magic=parcel.readInt();
  if (magic != BUNDLE_MAGIC) {
    throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  int offset=parcel.dataPosition();
  parcel.setDataPosition(MathUtils.addOrThrow(offset,length));
  Parcel p=Parcel.obtain();
  p.setDataPosition(0);
  p.appendFrom(parcel,offset,length);
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(this)) + ""String_Node_Str""+ length+ ""String_Node_Str""+ offset);
  p.setDataPosition(0);
  mParcelledData=p;
}",0.9002849002849003
193595,"public ParcelableParcel(Parcel src,ClassLoader loader){
  mParcel=Parcel.obtain();
  mClassLoader=loader;
  int size=src.readInt();
  int pos=src.dataPosition();
  mParcel.appendFrom(src,src.dataPosition(),size);
  src.setDataPosition(pos + size);
}","public ParcelableParcel(Parcel src,ClassLoader loader){
  mParcel=Parcel.obtain();
  mClassLoader=loader;
  int size=src.readInt();
  if (size < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int pos=src.dataPosition();
  src.setDataPosition(MathUtils.addOrThrow(pos,size));
  mParcel.appendFrom(src,pos,size);
}",0.6712328767123288
193596,"/** 
 * Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     record size                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata key                              |  // TITLE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata type                             |  // STRING_VAL +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata payload ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized records.
 * @param bytesLeft How many bytes in the parcel should be processed.
 * @return false if an error occurred during parsing.
 */
private boolean scanAllRecords(Parcel parcel,int bytesLeft){
  int recCount=0;
  boolean error=false;
  mKeyToPosMap.clear();
  while (bytesLeft > kRecordHeaderSize) {
    final int start=parcel.dataPosition();
    final int size=parcel.readInt();
    if (size <= kRecordHeaderSize) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    final int metadataId=parcel.readInt();
    if (!checkMetadataId(metadataId)) {
      error=true;
      break;
    }
    if (mKeyToPosMap.containsKey(metadataId)) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    mKeyToPosMap.put(metadataId,parcel.dataPosition());
    final int metadataType=parcel.readInt();
    if (metadataType <= 0 || metadataType > LAST_TYPE) {
      Log.e(TAG,""String_Node_Str"" + metadataType);
      error=true;
      break;
    }
    parcel.setDataPosition(start + size);
    bytesLeft-=size;
    ++recCount;
  }
  if (0 != bytesLeft || error) {
    Log.e(TAG,""String_Node_Str"" + recCount);
    mKeyToPosMap.clear();
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     record size                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata key                              |  // TITLE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata type                             |  // STRING_VAL +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata payload ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized records.
 * @param bytesLeft How many bytes in the parcel should be processed.
 * @return false if an error occurred during parsing.
 */
private boolean scanAllRecords(Parcel parcel,int bytesLeft){
  int recCount=0;
  boolean error=false;
  mKeyToPosMap.clear();
  while (bytesLeft > kRecordHeaderSize) {
    final int start=parcel.dataPosition();
    final int size=parcel.readInt();
    if (size <= kRecordHeaderSize) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    final int metadataId=parcel.readInt();
    if (!checkMetadataId(metadataId)) {
      error=true;
      break;
    }
    if (mKeyToPosMap.containsKey(metadataId)) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    mKeyToPosMap.put(metadataId,parcel.dataPosition());
    final int metadataType=parcel.readInt();
    if (metadataType <= 0 || metadataType > LAST_TYPE) {
      Log.e(TAG,""String_Node_Str"" + metadataType);
      error=true;
      break;
    }
    try {
      parcel.setDataPosition(MathUtils.addOrThrow(start,size));
    }
 catch (    IllegalArgumentException e) {
      Log.e(TAG,""String_Node_Str"" + e.getMessage());
      error=true;
      break;
    }
    bytesLeft-=size;
    ++recCount;
  }
  if (0 != bytesLeft || error) {
    Log.e(TAG,""String_Node_Str"" + recCount);
    mKeyToPosMap.clear();
    return false;
  }
 else {
    return true;
  }
}",0.931695127030404
193597,"private void readFromParcelInner(Parcel parcel,int length){
  if (length == 0) {
    mParcelledData=EMPTY_PARCEL;
    return;
  }
  int magic=parcel.readInt();
  if (magic != BUNDLE_MAGIC) {
    throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  int offset=parcel.dataPosition();
  parcel.setDataPosition(offset + length);
  Parcel p=Parcel.obtain();
  p.setDataPosition(0);
  p.appendFrom(parcel,offset,length);
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(this)) + ""String_Node_Str""+ length+ ""String_Node_Str""+ offset);
  p.setDataPosition(0);
  mParcelledData=p;
}","private void readFromParcelInner(Parcel parcel,int length){
  if (length < 0) {
    throw new RuntimeException(""String_Node_Str"" + length);
  }
 else   if (length == 0) {
    mParcelledData=EMPTY_PARCEL;
    return;
  }
  int magic=parcel.readInt();
  if (magic != BUNDLE_MAGIC) {
    throw new IllegalStateException(""String_Node_Str"" + Integer.toHexString(magic));
  }
  int offset=parcel.dataPosition();
  parcel.setDataPosition(MathUtils.addOrThrow(offset,length));
  Parcel p=Parcel.obtain();
  p.setDataPosition(0);
  p.appendFrom(parcel,offset,length);
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + Integer.toHexString(System.identityHashCode(this)) + ""String_Node_Str""+ length+ ""String_Node_Str""+ offset);
  p.setDataPosition(0);
  mParcelledData=p;
}",0.9002849002849003
193598,"public ParcelableParcel(Parcel src,ClassLoader loader){
  mParcel=Parcel.obtain();
  mClassLoader=loader;
  int size=src.readInt();
  int pos=src.dataPosition();
  mParcel.appendFrom(src,src.dataPosition(),size);
  src.setDataPosition(pos + size);
}","public ParcelableParcel(Parcel src,ClassLoader loader){
  mParcel=Parcel.obtain();
  mClassLoader=loader;
  int size=src.readInt();
  if (size < 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  int pos=src.dataPosition();
  src.setDataPosition(MathUtils.addOrThrow(pos,size));
  mParcel.appendFrom(src,pos,size);
}",0.6712328767123288
193599,"/** 
 * Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     record size                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata key                              |  // TITLE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata type                             |  // STRING_VAL +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata payload ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized records.
 * @param bytesLeft How many bytes in the parcel should be processed.
 * @return false if an error occurred during parsing.
 */
private boolean scanAllRecords(Parcel parcel,int bytesLeft){
  int recCount=0;
  boolean error=false;
  mKeyToPosMap.clear();
  while (bytesLeft > kRecordHeaderSize) {
    final int start=parcel.dataPosition();
    final int size=parcel.readInt();
    if (size <= kRecordHeaderSize) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    final int metadataId=parcel.readInt();
    if (!checkMetadataId(metadataId)) {
      error=true;
      break;
    }
    if (mKeyToPosMap.containsKey(metadataId)) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    mKeyToPosMap.put(metadataId,parcel.dataPosition());
    final int metadataType=parcel.readInt();
    if (metadataType <= 0 || metadataType > LAST_TYPE) {
      Log.e(TAG,""String_Node_Str"" + metadataType);
      error=true;
      break;
    }
    parcel.setDataPosition(start + size);
    bytesLeft-=size;
    ++recCount;
  }
  if (0 != bytesLeft || error) {
    Log.e(TAG,""String_Node_Str"" + recCount);
    mKeyToPosMap.clear();
    return false;
  }
 else {
    return true;
  }
}","/** 
 * Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     record size                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata key                              |  // TITLE +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata type                             |  // STRING_VAL +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata payload ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized records.
 * @param bytesLeft How many bytes in the parcel should be processed.
 * @return false if an error occurred during parsing.
 */
private boolean scanAllRecords(Parcel parcel,int bytesLeft){
  int recCount=0;
  boolean error=false;
  mKeyToPosMap.clear();
  while (bytesLeft > kRecordHeaderSize) {
    final int start=parcel.dataPosition();
    final int size=parcel.readInt();
    if (size <= kRecordHeaderSize) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    final int metadataId=parcel.readInt();
    if (!checkMetadataId(metadataId)) {
      error=true;
      break;
    }
    if (mKeyToPosMap.containsKey(metadataId)) {
      Log.e(TAG,""String_Node_Str"");
      error=true;
      break;
    }
    mKeyToPosMap.put(metadataId,parcel.dataPosition());
    final int metadataType=parcel.readInt();
    if (metadataType <= 0 || metadataType > LAST_TYPE) {
      Log.e(TAG,""String_Node_Str"" + metadataType);
      error=true;
      break;
    }
    try {
      parcel.setDataPosition(MathUtils.addOrThrow(start,size));
    }
 catch (    IllegalArgumentException e) {
      Log.e(TAG,""String_Node_Str"" + e.getMessage());
      error=true;
      break;
    }
    bytesLeft-=size;
    ++recCount;
  }
  if (0 != bytesLeft || error) {
    Log.e(TAG,""String_Node_Str"" + recCount);
    mKeyToPosMap.clear();
    return false;
  }
 else {
    return true;
  }
}",0.931695127030404
193600,"/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsConfiguration.reinitialize(mContext,mSystemServicesProxy);
  if (sInstanceLoadPlan == null) {
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  if (mConfig.multiWindowEnabled) {
    loader.preloadTasks(sInstanceLoadPlan,true);
    TaskStack stack=sInstanceLoadPlan.getTaskStack();
    mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,true);
    TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
    ActivityOptions opts=getUnknownTransitionActivityOptions();
    startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    return;
  }
  if (!sInstanceLoadPlan.hasTasks()) {
    loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  }
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=(topTask != null) && !isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,false,false,true,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      String searchWidgetPackage=Prefs.getString(mContext,Prefs.Key.SEARCH_APP_WIDGET_PACKAGE,null);
      boolean fromSearchHome=(homeActivityPackage != null) && homeActivityPackage.equals(searchWidgetPackage);
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,true,fromSearchHome,false,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    }
  }
  mLastToggleTime=SystemClock.elapsedRealtime();
}","/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsConfiguration config=RecentsConfiguration.getInstance();
  config.reinitializeWithApplicationContext(mContext,mSystemServicesProxy);
  if (sInstanceLoadPlan == null) {
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  if (mConfig.multiWindowEnabled) {
    loader.preloadTasks(sInstanceLoadPlan,true);
    TaskStack stack=sInstanceLoadPlan.getTaskStack();
    mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,true);
    TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
    ActivityOptions opts=getUnknownTransitionActivityOptions();
    startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    return;
  }
  if (!sInstanceLoadPlan.hasTasks()) {
    loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  }
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=(topTask != null) && !isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,false,false,true,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      String searchWidgetPackage=Prefs.getString(mContext,Prefs.Key.SEARCH_APP_WIDGET_PACKAGE,null);
      boolean fromSearchHome=(homeActivityPackage != null) && homeActivityPackage.equals(searchWidgetPackage);
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,true,fromSearchHome,false,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    }
  }
  mLastToggleTime=SystemClock.elapsedRealtime();
}",0.9844144903117102
193601,"/** 
 * Updates the configuration to the current context 
 */
public static RecentsConfiguration reinitialize(Context context,SystemServicesProxy ssp){
  if (sInstance == null) {
    sInstance=new RecentsConfiguration(context);
  }
  int configHashCode=context.getResources().getConfiguration().hashCode();
  if (sPrevConfigurationHashCode != configHashCode) {
    sInstance.update(context);
    sPrevConfigurationHashCode=configHashCode;
  }
  sInstance.updateOnReinitialize(context,ssp);
  return sInstance;
}","/** 
 * Updates the configuration to the current context 
 */
public static RecentsConfiguration reinitialize(Context context,SystemServicesProxy ssp){
  if (sInstance == null) {
    sInstance=new RecentsConfiguration(context);
  }
  int configHashCode=context.getResources().getConfiguration().hashCode();
  if (sPrevConfigurationHashCode != configHashCode) {
    sInstance.update(context);
    sPrevConfigurationHashCode=configHashCode;
  }
  sInstance.reinitializeWithApplicationContext(context.getApplicationContext(),ssp);
  return sInstance;
}",0.9320754716981132
193602,"/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsConfiguration.reinitialize(mContext,mSystemServicesProxy);
  if (sInstanceLoadPlan == null) {
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  if (mConfig.multiWindowEnabled) {
    loader.preloadTasks(sInstanceLoadPlan,true);
    TaskStack stack=sInstanceLoadPlan.getTaskStack();
    mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,true);
    TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
    ActivityOptions opts=getUnknownTransitionActivityOptions();
    startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    return;
  }
  if (!sInstanceLoadPlan.hasTasks()) {
    loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  }
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=(topTask != null) && !isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,false,false,true,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      String searchWidgetPackage=Prefs.getString(mContext,Prefs.Key.SEARCH_APP_WIDGET_PACKAGE,null);
      boolean fromSearchHome=(homeActivityPackage != null) && homeActivityPackage.equals(searchWidgetPackage);
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,true,fromSearchHome,false,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    }
  }
  mLastToggleTime=SystemClock.elapsedRealtime();
}","/** 
 * Starts the recents activity 
 */
void startRecentsActivity(ActivityManager.RunningTaskInfo topTask,boolean isTopTaskHome){
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  RecentsConfiguration config=RecentsConfiguration.getInstance();
  config.reinitializeWithApplicationContext(mContext,mSystemServicesProxy);
  if (sInstanceLoadPlan == null) {
    sInstanceLoadPlan=loader.createLoadPlan(mContext);
  }
  if (mConfig.multiWindowEnabled) {
    loader.preloadTasks(sInstanceLoadPlan,true);
    TaskStack stack=sInstanceLoadPlan.getTaskStack();
    mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,true);
    TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
    ActivityOptions opts=getUnknownTransitionActivityOptions();
    startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    return;
  }
  if (!sInstanceLoadPlan.hasTasks()) {
    loader.preloadTasks(sInstanceLoadPlan,isTopTaskHome);
  }
  TaskStack stack=sInstanceLoadPlan.getTaskStack();
  mDummyStackView.updateMinMaxScrollForStack(stack,mTriggeredFromAltTab,isTopTaskHome);
  TaskStackViewLayoutAlgorithm.VisibilityReport stackVr=mDummyStackView.computeStackVisibilityReport();
  boolean hasRecentTasks=stack.getTaskCount() > 0;
  boolean useThumbnailTransition=(topTask != null) && !isTopTaskHome && hasRecentTasks;
  if (useThumbnailTransition) {
    ActivityOptions opts=getThumbnailTransitionActivityOptions(topTask,stack,mDummyStackView);
    if (opts != null) {
      startAlternateRecentsActivity(topTask,opts,false,false,true,stackVr);
    }
 else {
      useThumbnailTransition=false;
    }
  }
  if (!useThumbnailTransition) {
    if (hasRecentTasks) {
      String homeActivityPackage=mSystemServicesProxy.getHomeActivityPackageName();
      String searchWidgetPackage=Prefs.getString(mContext,Prefs.Key.SEARCH_APP_WIDGET_PACKAGE,null);
      boolean fromSearchHome=(homeActivityPackage != null) && homeActivityPackage.equals(searchWidgetPackage);
      ActivityOptions opts=getHomeTransitionActivityOptions(fromSearchHome);
      startAlternateRecentsActivity(topTask,opts,true,fromSearchHome,false,stackVr);
    }
 else {
      ActivityOptions opts=getUnknownTransitionActivityOptions();
      startAlternateRecentsActivity(topTask,opts,true,false,false,stackVr);
    }
  }
  mLastToggleTime=SystemClock.elapsedRealtime();
}",0.9844144903117102
193603,"/** 
 * Updates the configuration to the current context 
 */
public static RecentsConfiguration reinitialize(Context context,SystemServicesProxy ssp){
  if (sInstance == null) {
    sInstance=new RecentsConfiguration(context);
  }
  int configHashCode=context.getResources().getConfiguration().hashCode();
  if (sPrevConfigurationHashCode != configHashCode) {
    sInstance.update(context);
    sPrevConfigurationHashCode=configHashCode;
  }
  sInstance.updateOnReinitialize(context,ssp);
  return sInstance;
}","/** 
 * Updates the configuration to the current context 
 */
public static RecentsConfiguration reinitialize(Context context,SystemServicesProxy ssp){
  if (sInstance == null) {
    sInstance=new RecentsConfiguration(context);
  }
  int configHashCode=context.getResources().getConfiguration().hashCode();
  if (sPrevConfigurationHashCode != configHashCode) {
    sInstance.update(context);
    sPrevConfigurationHashCode=configHashCode;
  }
  sInstance.reinitializeWithApplicationContext(context.getApplicationContext(),ssp);
  return sInstance;
}",0.9320754716981132
193604,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  ListMenuItemView selectedItem=(ListMenuItemView)getSelectedView();
  if (selectedItem != null && keyCode == mAdvanceKey) {
    if (selectedItem.isEnabled() && ((ListMenuItemView)selectedItem).getItemData().hasSubMenu()) {
      performItemClick(selectedItem,getSelectedItemPosition(),getSelectedItemId());
    }
    return true;
  }
 else   if (selectedItem != null && keyCode == mRetreatKey) {
    setSelectedPositionInt(-1);
    setNextSelectedPositionInt(-1);
    ((MenuAdapter)getAdapter()).getAdapterMenu().close();
    return true;
  }
  return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  ListMenuItemView selectedItem=(ListMenuItemView)getSelectedView();
  if (selectedItem != null && keyCode == mAdvanceKey) {
    if (selectedItem.isEnabled() && ((ListMenuItemView)selectedItem).getItemData().hasSubMenu()) {
      performItemClick(selectedItem,getSelectedItemPosition(),getSelectedItemId());
    }
    return true;
  }
 else   if (selectedItem != null && keyCode == mRetreatKey) {
    setSelectedPositionInt(INVALID_POSITION);
    setNextSelectedPositionInt(INVALID_POSITION);
    ((MenuAdapter)getAdapter()).getAdapterMenu().close();
    return true;
  }
  return super.onKeyDown(keyCode,event);
}",0.9578313253012049
193605,"@Override public void run(){
  int nextMenuIndex=mListViews.indexOf(nextView);
  if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
    mPopupWindows.get(nextMenuIndex).setExitTransition(null);
    nextAdapter.getAdapterMenu().close();
  }
}","@Override public void run(){
  int nextMenuIndex=mListViews.indexOf(nextView);
  if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
    for (int i=nextMenuIndex; i < mPopupWindows.size(); i++) {
      final MenuPopupWindow popupWindow=mPopupWindows.get(i);
      popupWindow.setExitTransition(null);
      popupWindow.setAnimationStyle(0);
    }
    nextAdapter.getAdapterMenu().close();
  }
}",0.5709969788519638
193606,"/** 
 * Initializes a new cascading-capable menu popup.
 * @param parent A parent view to get the {@link android.view.View#getWindowToken()} token from.
 */
public CascadingMenuPopup(Context context,View anchor,int popupStyleAttr,int popupStyleRes,boolean overflowOnly){
  mContext=Preconditions.checkNotNull(context);
  mAnchorView=Preconditions.checkNotNull(anchor);
  mPopupStyleAttr=popupStyleAttr;
  mPopupStyleRes=popupStyleRes;
  mOverflowOnly=overflowOnly;
  mForceShowIcon=false;
  final Resources res=context.getResources();
  final Configuration config=res.getConfiguration();
  mLayoutDirection=config.getLayoutDirection();
  mPreferredPosition=mLayoutDirection == View.LAYOUT_DIRECTION_RTL ? HORIZ_POSITION_LEFT : HORIZ_POSITION_RIGHT;
  mMenuMaxWidth=Math.max(res.getDisplayMetrics().widthPixels / 2,res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));
  mPopupWindows=new ArrayList<MenuPopupWindow>();
  mListViews=new ArrayList<DropDownListView>();
  mOffsets=new ArrayList<int[]>();
  mSubMenuHoverHandler=new Handler();
}","/** 
 * Initializes a new cascading-capable menu popup.
 * @param parent A parent view to get the {@link android.view.View#getWindowToken()} token from.
 */
public CascadingMenuPopup(Context context,View anchor,int popupStyleAttr,int popupStyleRes,boolean overflowOnly){
  mContext=Preconditions.checkNotNull(context);
  mAnchorView=Preconditions.checkNotNull(anchor);
  mPopupStyleAttr=popupStyleAttr;
  mPopupStyleRes=popupStyleRes;
  mOverflowOnly=overflowOnly;
  mForceShowIcon=false;
  final Resources res=context.getResources();
  final Configuration config=res.getConfiguration();
  mLayoutDirection=config.getLayoutDirection();
  mLastPosition=getInitialMenuPosition();
  mMenuMaxWidth=Math.max(res.getDisplayMetrics().widthPixels / 2,res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));
  mPopupWindows=new ArrayList<MenuPopupWindow>();
  mListViews=new ArrayList<DropDownListView>();
  mOffsets=new ArrayList<int[]>();
  mPositions=new ArrayList<Integer>();
  mSubMenuHoverHandler=new Handler();
}",0.9153187440532826
193607,"/** 
 * Determines whether the next submenu (of the given width) should display on the right or on the left of the most recent menu.
 * @param nextMenuWidth Width of the next submenu to display.
 * @return The position to display it.
 */
@HorizPosition private int getNextMenuPosition(int nextMenuWidth){
  ListView lastListView=mListViews.get(mListViews.size() - 1);
  final int[] screenLocation=new int[2];
  lastListView.getLocationOnScreen(screenLocation);
  final Rect displayFrame=new Rect();
  mShownAnchorView.getWindowVisibleDisplayFrame(displayFrame);
  if (mPreferredPosition == HORIZ_POSITION_RIGHT) {
    final int right=screenLocation[0] + lastListView.getWidth() + nextMenuWidth;
    if (right > displayFrame.right) {
      return HORIZ_POSITION_LEFT;
    }
    return HORIZ_POSITION_RIGHT;
  }
 else {
    final int left=screenLocation[0] - nextMenuWidth;
    if (left < 0) {
      return HORIZ_POSITION_RIGHT;
    }
    return HORIZ_POSITION_LEFT;
  }
}","/** 
 * Determines whether the next submenu (of the given width) should display on the right or on the left of the most recent menu.
 * @param nextMenuWidth Width of the next submenu to display.
 * @return The position to display it.
 */
@HorizPosition private int getNextMenuPosition(int nextMenuWidth){
  ListView lastListView=mListViews.get(mListViews.size() - 1);
  final int[] screenLocation=new int[2];
  lastListView.getLocationOnScreen(screenLocation);
  final Rect displayFrame=new Rect();
  mShownAnchorView.getWindowVisibleDisplayFrame(displayFrame);
  if (mLastPosition == HORIZ_POSITION_RIGHT) {
    final int right=screenLocation[0] + lastListView.getWidth() + nextMenuWidth;
    if (right > displayFrame.right) {
      return HORIZ_POSITION_LEFT;
    }
    return HORIZ_POSITION_RIGHT;
  }
 else {
    final int left=screenLocation[0] - nextMenuWidth;
    if (left < 0) {
      return HORIZ_POSITION_RIGHT;
    }
    return HORIZ_POSITION_LEFT;
  }
}",0.99328165374677
193608,"@Override public void addMenu(MenuBuilder menu){
  boolean addSubMenu=mListViews.size() > 0;
  menu.addMenuPresenter(this,mContext);
  MenuPopupWindow popupWindow=createPopupWindow();
  MenuAdapter adapter=new MenuAdapter(menu,LayoutInflater.from(mContext),mOverflowOnly);
  adapter.setForceShowIcon(mForceShowIcon);
  popupWindow.setAdapter(adapter);
  int menuWidth=measureIndividualMenuWidth(adapter,null,mContext,mMenuMaxWidth);
  int x=0;
  int y=0;
  if (addSubMenu) {
    popupWindow.setTouchModal(false);
    popupWindow.setEnterTransition(null);
    ListView lastListView=mListViews.get(mListViews.size() - 1);
    @HorizPosition int nextMenuPosition=getNextMenuPosition(menuWidth);
    boolean showOnRight=nextMenuPosition == HORIZ_POSITION_RIGHT;
    mPreferredPosition=nextMenuPosition;
    int[] lastLocation=new int[2];
    lastListView.getLocationOnScreen(lastLocation);
    int[] lastOffset=mOffsets.get(mOffsets.size() - 1);
    if ((mDropDownGravity & Gravity.RIGHT) == Gravity.RIGHT) {
      if (showOnRight) {
        x=lastOffset[0] + menuWidth;
      }
 else {
        x=lastOffset[0] - lastListView.getWidth();
      }
    }
 else {
      if (showOnRight) {
        x=lastOffset[0] + lastListView.getWidth();
      }
 else {
        x=lastOffset[0] - menuWidth;
      }
    }
    y=lastOffset[1] + lastListView.getSelectedView().getTop() - lastListView.getChildAt(0).getTop();
  }
  popupWindow.setWidth(menuWidth);
  popupWindow.setHorizontalOffset(x);
  popupWindow.setVerticalOffset(y);
  mPopupWindows.add(popupWindow);
  if (isShowing()) {
    popupWindow.show();
    mListViews.add((DropDownListView)popupWindow.getListView());
  }
  int[] offsets={x,y};
  mOffsets.add(offsets);
}","@Override public void addMenu(MenuBuilder menu){
  boolean addSubMenu=mListViews.size() > 0;
  menu.addMenuPresenter(this,mContext);
  MenuPopupWindow popupWindow=createPopupWindow();
  MenuAdapter adapter=new MenuAdapter(menu,LayoutInflater.from(mContext),mOverflowOnly);
  adapter.setForceShowIcon(mForceShowIcon);
  popupWindow.setAdapter(adapter);
  int menuWidth=measureIndividualMenuWidth(adapter,null,mContext,mMenuMaxWidth);
  int x=0;
  int y=0;
  if (addSubMenu) {
    popupWindow.setTouchModal(false);
    popupWindow.setEnterTransition(null);
    ListView lastListView=mListViews.get(mListViews.size() - 1);
    @HorizPosition int nextMenuPosition=getNextMenuPosition(menuWidth);
    boolean showOnRight=nextMenuPosition == HORIZ_POSITION_RIGHT;
    mLastPosition=nextMenuPosition;
    int[] lastLocation=new int[2];
    lastListView.getLocationOnScreen(lastLocation);
    int[] lastOffset=mOffsets.get(mOffsets.size() - 1);
    if ((mDropDownGravity & Gravity.RIGHT) == Gravity.RIGHT) {
      if (showOnRight) {
        x=lastOffset[0] + menuWidth;
      }
 else {
        x=lastOffset[0] - lastListView.getWidth();
      }
    }
 else {
      if (showOnRight) {
        x=lastOffset[0] + lastListView.getWidth();
      }
 else {
        x=lastOffset[0] - menuWidth;
      }
    }
    y=lastOffset[1] + lastListView.getSelectedView().getTop() - lastListView.getChildAt(0).getTop();
  }
  popupWindow.setWidth(menuWidth);
  popupWindow.setHorizontalOffset(x);
  popupWindow.setVerticalOffset(y);
  mPopupWindows.add(popupWindow);
  if (isShowing()) {
    popupWindow.show();
    mListViews.add((DropDownListView)popupWindow.getListView());
  }
  int[] offsets={x,y};
  mOffsets.add(offsets);
  mPositions.add(mLastPosition);
}",0.9866589327146172
193609,"@Override public void onItemHovered(MenuBuilder menu,int position){
  int menuIndex=-1;
  for (int i=0; i < mListViews.size(); i++) {
    final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(i);
    final MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (adapter.getAdapterMenu() == menu) {
      menuIndex=i;
      break;
    }
  }
  if (menuIndex == -1) {
    return;
  }
  final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(menuIndex);
  final ListMenuItemView selectedItemView=(ListMenuItemView)view.getSelectedView();
  if (selectedItemView != null && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (view.getSelectedView() == selectedItemView && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
          int nextIndex=mListViews.indexOf(view) + 1;
          if (nextIndex < mListViews.size()) {
            MenuAdapter nextSubMenuAdapter=(MenuAdapter)mListViews.get(nextIndex).getAdapter();
            mPopupWindows.get(nextIndex).setExitTransition(null);
            nextSubMenuAdapter.getAdapterMenu().close();
          }
          view.performItemClick(selectedItemView,view.getSelectedItemPosition(),view.getSelectedItemId());
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
 else   if (menuIndex + 1 < mListViews.size()) {
    final MenuDropDownListView nextView=(MenuDropDownListView)mListViews.get(menuIndex + 1);
    final MenuAdapter nextAdapter=(MenuAdapter)nextView.getAdapter();
    view.clearSelection();
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        int nextMenuIndex=mListViews.indexOf(nextView);
        if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
          mPopupWindows.get(nextMenuIndex).setExitTransition(null);
          nextAdapter.getAdapterMenu().close();
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
}","@Override public void onItemHovered(MenuBuilder menu,int position){
  int menuIndex=-1;
  for (int i=0; i < mListViews.size(); i++) {
    final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(i);
    final MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (adapter.getAdapterMenu() == menu) {
      menuIndex=i;
      break;
    }
  }
  if (menuIndex == -1) {
    return;
  }
  final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(menuIndex);
  final ListMenuItemView selectedItemView=(ListMenuItemView)view.getSelectedView();
  if (selectedItemView != null && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (view.getSelectedView() == selectedItemView && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
          int nextIndex=mListViews.indexOf(view) + 1;
          if (nextIndex < mListViews.size()) {
            MenuAdapter nextSubMenuAdapter=(MenuAdapter)mListViews.get(nextIndex).getAdapter();
            mPopupWindows.get(nextIndex).setExitTransition(null);
            nextSubMenuAdapter.getAdapterMenu().close();
          }
          view.performItemClick(selectedItemView,view.getSelectedItemPosition(),view.getSelectedItemId());
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
 else   if (menuIndex + 1 < mListViews.size()) {
    final MenuDropDownListView nextView=(MenuDropDownListView)mListViews.get(menuIndex + 1);
    final MenuAdapter nextAdapter=(MenuAdapter)nextView.getAdapter();
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        int nextMenuIndex=mListViews.indexOf(nextView);
        if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
          for (int i=nextMenuIndex; i < mPopupWindows.size(); i++) {
            final MenuPopupWindow popupWindow=mPopupWindows.get(i);
            popupWindow.setExitTransition(null);
            popupWindow.setAnimationStyle(0);
          }
          nextAdapter.getAdapterMenu().close();
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
}",0.9477257298031228
193610,"@Override public void onCloseMenu(MenuBuilder menu,boolean allMenusAreClosing){
  int menuIndex=-1;
  boolean wasSelected=false;
  for (int i=0; i < mListViews.size(); i++) {
    ListView view=mListViews.get(i);
    MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (menuIndex == -1 && menu == adapter.mAdapterMenu) {
      menuIndex=i;
      wasSelected=view.getSelectedView() != null;
    }
    if (menuIndex != -1) {
      adapter.mAdapterMenu.removeMenuPresenter(this);
    }
  }
  if (menuIndex != -1) {
    for (int i=menuIndex; i < mPopupWindows.size(); i++) {
      mPopupWindows.get(i).dismiss();
    }
    mPopupWindows.subList(menuIndex,mPopupWindows.size()).clear();
    mListViews.subList(menuIndex,mListViews.size()).clear();
    mOffsets.subList(menuIndex,mOffsets.size()).clear();
    if (mListViews.size() > 0) {
      mListViews.get(mListViews.size() - 1).requestFocus();
    }
  }
  if (mListViews.size() == 0 || wasSelected) {
    dismiss();
    if (mPresenterCallback != null) {
      mPresenterCallback.onCloseMenu(menu,allMenusAreClosing);
    }
  }
  if (mPopupWindows.size() == 0) {
    if (mTreeObserver != null) {
      if (mTreeObserver.isAlive()) {
        mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
      }
      mTreeObserver=null;
    }
    mShownAnchorView.removeOnAttachStateChangeListener(mAttachStateChangeListener);
    mOnDismissListener.onDismiss();
  }
}","@Override public void onCloseMenu(MenuBuilder menu,boolean allMenusAreClosing){
  int menuIndex=-1;
  boolean wasSelected=false;
  for (int i=0; i < mListViews.size(); i++) {
    ListView view=mListViews.get(i);
    MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (menuIndex == -1 && menu == adapter.mAdapterMenu) {
      menuIndex=i;
      wasSelected=view.getSelectedView() != null;
    }
    if (menuIndex != -1) {
      adapter.mAdapterMenu.removeMenuPresenter(this);
    }
  }
  if (menuIndex != -1) {
    for (int i=menuIndex; i < mPopupWindows.size(); i++) {
      mPopupWindows.get(i).dismiss();
    }
    mPopupWindows.subList(menuIndex,mPopupWindows.size()).clear();
    mListViews.subList(menuIndex,mListViews.size()).clear();
    mOffsets.subList(menuIndex,mOffsets.size()).clear();
    mPositions.subList(menuIndex,mPositions.size()).clear();
    if (mPositions.size() > 0) {
      mLastPosition=mPositions.get(mPositions.size() - 1);
    }
 else {
      mLastPosition=getInitialMenuPosition();
    }
  }
  if (mListViews.size() == 0 || wasSelected) {
    dismiss();
    if (mPresenterCallback != null) {
      mPresenterCallback.onCloseMenu(menu,allMenusAreClosing);
    }
  }
  if (mPopupWindows.size() == 0) {
    if (mTreeObserver != null) {
      if (mTreeObserver.isAlive()) {
        mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
      }
      mTreeObserver=null;
    }
    mShownAnchorView.removeOnAttachStateChangeListener(mAttachStateChangeListener);
    mOnDismissListener.onDismiss();
  }
}",0.9354404841963684
193611,"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  ListMenuItemView selectedItem=(ListMenuItemView)getSelectedView();
  if (selectedItem != null && keyCode == mAdvanceKey) {
    if (selectedItem.isEnabled() && ((ListMenuItemView)selectedItem).getItemData().hasSubMenu()) {
      performItemClick(selectedItem,getSelectedItemPosition(),getSelectedItemId());
    }
    return true;
  }
 else   if (selectedItem != null && keyCode == mRetreatKey) {
    setSelectedPositionInt(-1);
    setNextSelectedPositionInt(-1);
    ((MenuAdapter)getAdapter()).getAdapterMenu().close();
    return true;
  }
  return super.onKeyDown(keyCode,event);
}","@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  ListMenuItemView selectedItem=(ListMenuItemView)getSelectedView();
  if (selectedItem != null && keyCode == mAdvanceKey) {
    if (selectedItem.isEnabled() && ((ListMenuItemView)selectedItem).getItemData().hasSubMenu()) {
      performItemClick(selectedItem,getSelectedItemPosition(),getSelectedItemId());
    }
    return true;
  }
 else   if (selectedItem != null && keyCode == mRetreatKey) {
    setSelectedPositionInt(INVALID_POSITION);
    setNextSelectedPositionInt(INVALID_POSITION);
    ((MenuAdapter)getAdapter()).getAdapterMenu().close();
    return true;
  }
  return super.onKeyDown(keyCode,event);
}",0.9578313253012049
193612,"@Override public void run(){
  int nextMenuIndex=mListViews.indexOf(nextView);
  if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
    mPopupWindows.get(nextMenuIndex).setExitTransition(null);
    nextAdapter.getAdapterMenu().close();
  }
}","@Override public void run(){
  int nextMenuIndex=mListViews.indexOf(nextView);
  if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
    for (int i=nextMenuIndex; i < mPopupWindows.size(); i++) {
      final MenuPopupWindow popupWindow=mPopupWindows.get(i);
      popupWindow.setExitTransition(null);
      popupWindow.setAnimationStyle(0);
    }
    nextAdapter.getAdapterMenu().close();
  }
}",0.5709969788519638
193613,"/** 
 * Initializes a new cascading-capable menu popup.
 * @param parent A parent view to get the {@link android.view.View#getWindowToken()} token from.
 */
public CascadingMenuPopup(Context context,View anchor,int popupStyleAttr,int popupStyleRes,boolean overflowOnly){
  mContext=Preconditions.checkNotNull(context);
  mAnchorView=Preconditions.checkNotNull(anchor);
  mPopupStyleAttr=popupStyleAttr;
  mPopupStyleRes=popupStyleRes;
  mOverflowOnly=overflowOnly;
  mForceShowIcon=false;
  final Resources res=context.getResources();
  final Configuration config=res.getConfiguration();
  mLayoutDirection=config.getLayoutDirection();
  mPreferredPosition=mLayoutDirection == View.LAYOUT_DIRECTION_RTL ? HORIZ_POSITION_LEFT : HORIZ_POSITION_RIGHT;
  mMenuMaxWidth=Math.max(res.getDisplayMetrics().widthPixels / 2,res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));
  mPopupWindows=new ArrayList<MenuPopupWindow>();
  mListViews=new ArrayList<DropDownListView>();
  mOffsets=new ArrayList<int[]>();
  mSubMenuHoverHandler=new Handler();
}","/** 
 * Initializes a new cascading-capable menu popup.
 * @param parent A parent view to get the {@link android.view.View#getWindowToken()} token from.
 */
public CascadingMenuPopup(Context context,View anchor,int popupStyleAttr,int popupStyleRes,boolean overflowOnly){
  mContext=Preconditions.checkNotNull(context);
  mAnchorView=Preconditions.checkNotNull(anchor);
  mPopupStyleAttr=popupStyleAttr;
  mPopupStyleRes=popupStyleRes;
  mOverflowOnly=overflowOnly;
  mForceShowIcon=false;
  final Resources res=context.getResources();
  final Configuration config=res.getConfiguration();
  mLayoutDirection=config.getLayoutDirection();
  mLastPosition=getInitialMenuPosition();
  mMenuMaxWidth=Math.max(res.getDisplayMetrics().widthPixels / 2,res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));
  mPopupWindows=new ArrayList<MenuPopupWindow>();
  mListViews=new ArrayList<DropDownListView>();
  mOffsets=new ArrayList<int[]>();
  mPositions=new ArrayList<Integer>();
  mSubMenuHoverHandler=new Handler();
}",0.9153187440532826
193614,"/** 
 * Determines whether the next submenu (of the given width) should display on the right or on the left of the most recent menu.
 * @param nextMenuWidth Width of the next submenu to display.
 * @return The position to display it.
 */
@HorizPosition private int getNextMenuPosition(int nextMenuWidth){
  ListView lastListView=mListViews.get(mListViews.size() - 1);
  final int[] screenLocation=new int[2];
  lastListView.getLocationOnScreen(screenLocation);
  final Rect displayFrame=new Rect();
  mShownAnchorView.getWindowVisibleDisplayFrame(displayFrame);
  if (mPreferredPosition == HORIZ_POSITION_RIGHT) {
    final int right=screenLocation[0] + lastListView.getWidth() + nextMenuWidth;
    if (right > displayFrame.right) {
      return HORIZ_POSITION_LEFT;
    }
    return HORIZ_POSITION_RIGHT;
  }
 else {
    final int left=screenLocation[0] - nextMenuWidth;
    if (left < 0) {
      return HORIZ_POSITION_RIGHT;
    }
    return HORIZ_POSITION_LEFT;
  }
}","/** 
 * Determines whether the next submenu (of the given width) should display on the right or on the left of the most recent menu.
 * @param nextMenuWidth Width of the next submenu to display.
 * @return The position to display it.
 */
@HorizPosition private int getNextMenuPosition(int nextMenuWidth){
  ListView lastListView=mListViews.get(mListViews.size() - 1);
  final int[] screenLocation=new int[2];
  lastListView.getLocationOnScreen(screenLocation);
  final Rect displayFrame=new Rect();
  mShownAnchorView.getWindowVisibleDisplayFrame(displayFrame);
  if (mLastPosition == HORIZ_POSITION_RIGHT) {
    final int right=screenLocation[0] + lastListView.getWidth() + nextMenuWidth;
    if (right > displayFrame.right) {
      return HORIZ_POSITION_LEFT;
    }
    return HORIZ_POSITION_RIGHT;
  }
 else {
    final int left=screenLocation[0] - nextMenuWidth;
    if (left < 0) {
      return HORIZ_POSITION_RIGHT;
    }
    return HORIZ_POSITION_LEFT;
  }
}",0.99328165374677
193615,"@Override public void addMenu(MenuBuilder menu){
  boolean addSubMenu=mListViews.size() > 0;
  menu.addMenuPresenter(this,mContext);
  MenuPopupWindow popupWindow=createPopupWindow();
  MenuAdapter adapter=new MenuAdapter(menu,LayoutInflater.from(mContext),mOverflowOnly);
  adapter.setForceShowIcon(mForceShowIcon);
  popupWindow.setAdapter(adapter);
  int menuWidth=measureIndividualMenuWidth(adapter,null,mContext,mMenuMaxWidth);
  int x=0;
  int y=0;
  if (addSubMenu) {
    popupWindow.setTouchModal(false);
    popupWindow.setEnterTransition(null);
    ListView lastListView=mListViews.get(mListViews.size() - 1);
    @HorizPosition int nextMenuPosition=getNextMenuPosition(menuWidth);
    boolean showOnRight=nextMenuPosition == HORIZ_POSITION_RIGHT;
    mPreferredPosition=nextMenuPosition;
    int[] lastLocation=new int[2];
    lastListView.getLocationOnScreen(lastLocation);
    int[] lastOffset=mOffsets.get(mOffsets.size() - 1);
    if ((mDropDownGravity & Gravity.RIGHT) == Gravity.RIGHT) {
      if (showOnRight) {
        x=lastOffset[0] + menuWidth;
      }
 else {
        x=lastOffset[0] - lastListView.getWidth();
      }
    }
 else {
      if (showOnRight) {
        x=lastOffset[0] + lastListView.getWidth();
      }
 else {
        x=lastOffset[0] - menuWidth;
      }
    }
    y=lastOffset[1] + lastListView.getSelectedView().getTop() - lastListView.getChildAt(0).getTop();
  }
  popupWindow.setWidth(menuWidth);
  popupWindow.setHorizontalOffset(x);
  popupWindow.setVerticalOffset(y);
  mPopupWindows.add(popupWindow);
  if (isShowing()) {
    popupWindow.show();
    mListViews.add((DropDownListView)popupWindow.getListView());
  }
  int[] offsets={x,y};
  mOffsets.add(offsets);
}","@Override public void addMenu(MenuBuilder menu){
  boolean addSubMenu=mListViews.size() > 0;
  menu.addMenuPresenter(this,mContext);
  MenuPopupWindow popupWindow=createPopupWindow();
  MenuAdapter adapter=new MenuAdapter(menu,LayoutInflater.from(mContext),mOverflowOnly);
  adapter.setForceShowIcon(mForceShowIcon);
  popupWindow.setAdapter(adapter);
  int menuWidth=measureIndividualMenuWidth(adapter,null,mContext,mMenuMaxWidth);
  int x=0;
  int y=0;
  if (addSubMenu) {
    popupWindow.setTouchModal(false);
    popupWindow.setEnterTransition(null);
    ListView lastListView=mListViews.get(mListViews.size() - 1);
    @HorizPosition int nextMenuPosition=getNextMenuPosition(menuWidth);
    boolean showOnRight=nextMenuPosition == HORIZ_POSITION_RIGHT;
    mLastPosition=nextMenuPosition;
    int[] lastLocation=new int[2];
    lastListView.getLocationOnScreen(lastLocation);
    int[] lastOffset=mOffsets.get(mOffsets.size() - 1);
    if ((mDropDownGravity & Gravity.RIGHT) == Gravity.RIGHT) {
      if (showOnRight) {
        x=lastOffset[0] + menuWidth;
      }
 else {
        x=lastOffset[0] - lastListView.getWidth();
      }
    }
 else {
      if (showOnRight) {
        x=lastOffset[0] + lastListView.getWidth();
      }
 else {
        x=lastOffset[0] - menuWidth;
      }
    }
    y=lastOffset[1] + lastListView.getSelectedView().getTop() - lastListView.getChildAt(0).getTop();
  }
  popupWindow.setWidth(menuWidth);
  popupWindow.setHorizontalOffset(x);
  popupWindow.setVerticalOffset(y);
  mPopupWindows.add(popupWindow);
  if (isShowing()) {
    popupWindow.show();
    mListViews.add((DropDownListView)popupWindow.getListView());
  }
  int[] offsets={x,y};
  mOffsets.add(offsets);
  mPositions.add(mLastPosition);
}",0.9866589327146172
193616,"@Override public void onItemHovered(MenuBuilder menu,int position){
  int menuIndex=-1;
  for (int i=0; i < mListViews.size(); i++) {
    final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(i);
    final MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (adapter.getAdapterMenu() == menu) {
      menuIndex=i;
      break;
    }
  }
  if (menuIndex == -1) {
    return;
  }
  final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(menuIndex);
  final ListMenuItemView selectedItemView=(ListMenuItemView)view.getSelectedView();
  if (selectedItemView != null && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (view.getSelectedView() == selectedItemView && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
          int nextIndex=mListViews.indexOf(view) + 1;
          if (nextIndex < mListViews.size()) {
            MenuAdapter nextSubMenuAdapter=(MenuAdapter)mListViews.get(nextIndex).getAdapter();
            mPopupWindows.get(nextIndex).setExitTransition(null);
            nextSubMenuAdapter.getAdapterMenu().close();
          }
          view.performItemClick(selectedItemView,view.getSelectedItemPosition(),view.getSelectedItemId());
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
 else   if (menuIndex + 1 < mListViews.size()) {
    final MenuDropDownListView nextView=(MenuDropDownListView)mListViews.get(menuIndex + 1);
    final MenuAdapter nextAdapter=(MenuAdapter)nextView.getAdapter();
    view.clearSelection();
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        int nextMenuIndex=mListViews.indexOf(nextView);
        if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
          mPopupWindows.get(nextMenuIndex).setExitTransition(null);
          nextAdapter.getAdapterMenu().close();
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
}","@Override public void onItemHovered(MenuBuilder menu,int position){
  int menuIndex=-1;
  for (int i=0; i < mListViews.size(); i++) {
    final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(i);
    final MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (adapter.getAdapterMenu() == menu) {
      menuIndex=i;
      break;
    }
  }
  if (menuIndex == -1) {
    return;
  }
  final MenuDropDownListView view=(MenuDropDownListView)mListViews.get(menuIndex);
  final ListMenuItemView selectedItemView=(ListMenuItemView)view.getSelectedView();
  if (selectedItemView != null && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (view.getSelectedView() == selectedItemView && selectedItemView.isEnabled() && selectedItemView.getItemData().hasSubMenu()) {
          int nextIndex=mListViews.indexOf(view) + 1;
          if (nextIndex < mListViews.size()) {
            MenuAdapter nextSubMenuAdapter=(MenuAdapter)mListViews.get(nextIndex).getAdapter();
            mPopupWindows.get(nextIndex).setExitTransition(null);
            nextSubMenuAdapter.getAdapterMenu().close();
          }
          view.performItemClick(selectedItemView,view.getSelectedItemPosition(),view.getSelectedItemId());
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
 else   if (menuIndex + 1 < mListViews.size()) {
    final MenuDropDownListView nextView=(MenuDropDownListView)mListViews.get(menuIndex + 1);
    final MenuAdapter nextAdapter=(MenuAdapter)nextView.getAdapter();
    mSubMenuHoverHandler.removeCallbacksAndMessages(null);
    mSubMenuHoverHandler.postDelayed(new Runnable(){
      @Override public void run(){
        int nextMenuIndex=mListViews.indexOf(nextView);
        if (nextMenuIndex != -1 && nextView.getSelectedView() == null) {
          for (int i=nextMenuIndex; i < mPopupWindows.size(); i++) {
            final MenuPopupWindow popupWindow=mPopupWindows.get(i);
            popupWindow.setExitTransition(null);
            popupWindow.setAnimationStyle(0);
          }
          nextAdapter.getAdapterMenu().close();
        }
      }
    }
,SUBMENU_TIMEOUT_MS);
  }
}",0.9477257298031228
193617,"@Override public void onCloseMenu(MenuBuilder menu,boolean allMenusAreClosing){
  int menuIndex=-1;
  boolean wasSelected=false;
  for (int i=0; i < mListViews.size(); i++) {
    ListView view=mListViews.get(i);
    MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (menuIndex == -1 && menu == adapter.mAdapterMenu) {
      menuIndex=i;
      wasSelected=view.getSelectedView() != null;
    }
    if (menuIndex != -1) {
      adapter.mAdapterMenu.removeMenuPresenter(this);
    }
  }
  if (menuIndex != -1) {
    for (int i=menuIndex; i < mPopupWindows.size(); i++) {
      mPopupWindows.get(i).dismiss();
    }
    mPopupWindows.subList(menuIndex,mPopupWindows.size()).clear();
    mListViews.subList(menuIndex,mListViews.size()).clear();
    mOffsets.subList(menuIndex,mOffsets.size()).clear();
    if (mListViews.size() > 0) {
      mListViews.get(mListViews.size() - 1).requestFocus();
    }
  }
  if (mListViews.size() == 0 || wasSelected) {
    dismiss();
    if (mPresenterCallback != null) {
      mPresenterCallback.onCloseMenu(menu,allMenusAreClosing);
    }
  }
  if (mPopupWindows.size() == 0) {
    if (mTreeObserver != null) {
      if (mTreeObserver.isAlive()) {
        mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
      }
      mTreeObserver=null;
    }
    mShownAnchorView.removeOnAttachStateChangeListener(mAttachStateChangeListener);
    mOnDismissListener.onDismiss();
  }
}","@Override public void onCloseMenu(MenuBuilder menu,boolean allMenusAreClosing){
  int menuIndex=-1;
  boolean wasSelected=false;
  for (int i=0; i < mListViews.size(); i++) {
    ListView view=mListViews.get(i);
    MenuAdapter adapter=(MenuAdapter)view.getAdapter();
    if (menuIndex == -1 && menu == adapter.mAdapterMenu) {
      menuIndex=i;
      wasSelected=view.getSelectedView() != null;
    }
    if (menuIndex != -1) {
      adapter.mAdapterMenu.removeMenuPresenter(this);
    }
  }
  if (menuIndex != -1) {
    for (int i=menuIndex; i < mPopupWindows.size(); i++) {
      mPopupWindows.get(i).dismiss();
    }
    mPopupWindows.subList(menuIndex,mPopupWindows.size()).clear();
    mListViews.subList(menuIndex,mListViews.size()).clear();
    mOffsets.subList(menuIndex,mOffsets.size()).clear();
    mPositions.subList(menuIndex,mPositions.size()).clear();
    if (mPositions.size() > 0) {
      mLastPosition=mPositions.get(mPositions.size() - 1);
    }
 else {
      mLastPosition=getInitialMenuPosition();
    }
  }
  if (mListViews.size() == 0 || wasSelected) {
    dismiss();
    if (mPresenterCallback != null) {
      mPresenterCallback.onCloseMenu(menu,allMenusAreClosing);
    }
  }
  if (mPopupWindows.size() == 0) {
    if (mTreeObserver != null) {
      if (mTreeObserver.isAlive()) {
        mTreeObserver.removeGlobalOnLayoutListener(mGlobalLayoutListener);
      }
      mTreeObserver=null;
    }
    mShownAnchorView.removeOnAttachStateChangeListener(mAttachStateChangeListener);
    mOnDismissListener.onDismiss();
  }
}",0.9354404841963684
193618,"void updateDisplayInfo(final DisplayContent displayContent){
  if (displayContent == null) {
    return;
  }
  if (mFullscreen) {
    setBounds(null,Configuration.EMPTY);
    return;
  }
  final int newRotation=displayContent.getDisplayInfo().rotation;
  if (mRotation == newRotation) {
    return;
  }
  final int rotationDelta=DisplayContent.deltaRotation(mRotation,newRotation);
  displayContent.getLogicalDisplayRect(mTmpRect);
switch (rotationDelta) {
case Surface.ROTATION_0:
    mTmpRect2.set(mBounds);
  break;
case Surface.ROTATION_90:
mTmpRect2.top=mTmpRect.bottom - mBounds.right;
mTmpRect2.left=mBounds.top;
mTmpRect2.right=mTmpRect2.left + mBounds.height();
mTmpRect2.bottom=mTmpRect2.top + mBounds.width();
break;
case Surface.ROTATION_180:
mTmpRect2.top=mTmpRect.bottom - mBounds.bottom;
mTmpRect2.left=mTmpRect.right - mBounds.right;
mTmpRect2.right=mTmpRect2.left + mBounds.width();
mTmpRect2.bottom=mTmpRect2.top + mBounds.height();
break;
case Surface.ROTATION_270:
mTmpRect2.top=mBounds.left;
mTmpRect2.left=mTmpRect.right - mBounds.bottom;
mTmpRect2.right=mTmpRect2.left + mBounds.height();
mTmpRect2.bottom=mTmpRect2.top + mBounds.width();
break;
}
setBounds(mTmpRect2,mOverrideConfig);
}","void updateDisplayInfo(final DisplayContent displayContent){
  if (displayContent == null) {
    return;
  }
  if (mFullscreen) {
    setBounds(null,Configuration.EMPTY);
    return;
  }
  final int newRotation=displayContent.getDisplayInfo().rotation;
  if (mRotation == newRotation) {
    return;
  }
  mTmpRect2.set(mBounds);
  displayContent.rotateBounds(mRotation,newRotation,mTmpRect2);
  setBounds(mTmpRect2,mOverrideConfig);
}",0.4537712895377129
193619,"private boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      if (!bounds.intersect(mTmpRect)) {
        return false;
      }
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  return true;
}","private boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  int rotation=Surface.ROTATION_0;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    rotation=mDisplayContent.getDisplayInfo().rotation;
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      if (!bounds.intersect(mTmpRect)) {
        return false;
      }
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen && mRotation == rotation) {
    return false;
  }
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  mRotation=rotation;
  return true;
}",0.8959276018099548
193620,"void updateDisplayInfo(Rect bounds){
  if (mDisplayContent != null) {
    if (bounds != null) {
      setBounds(bounds);
    }
 else {
      setBounds(mFullscreen ? null : mBounds);
    }
    for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
      mTasks.get(taskNdx).updateDisplayInfo(mDisplayContent);
    }
  }
}","void updateDisplayInfo(Rect bounds){
  if (mDisplayContent != null) {
    if (bounds != null) {
      setBounds(bounds);
    }
 else     if (mFullscreen) {
      setBounds(null);
    }
 else {
      TmpRect2.set(mBounds);
      mDisplayContent.rotateBounds(mRotation,mDisplayContent.getDisplayInfo().rotation,TmpRect2);
      setBounds(TmpRect2);
    }
    for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
      mTasks.get(taskNdx).updateDisplayInfo(mDisplayContent);
    }
  }
}",0.730816077953715
193621,"void updateDisplayInfo(final DisplayContent displayContent){
  if (displayContent == null) {
    return;
  }
  if (mFullscreen) {
    setBounds(null,Configuration.EMPTY);
    return;
  }
  final int newRotation=displayContent.getDisplayInfo().rotation;
  if (mRotation == newRotation) {
    return;
  }
  final int rotationDelta=DisplayContent.deltaRotation(mRotation,newRotation);
  displayContent.getLogicalDisplayRect(mTmpRect);
switch (rotationDelta) {
case Surface.ROTATION_0:
    mTmpRect2.set(mBounds);
  break;
case Surface.ROTATION_90:
mTmpRect2.top=mTmpRect.bottom - mBounds.right;
mTmpRect2.left=mBounds.top;
mTmpRect2.right=mTmpRect2.left + mBounds.height();
mTmpRect2.bottom=mTmpRect2.top + mBounds.width();
break;
case Surface.ROTATION_180:
mTmpRect2.top=mTmpRect.bottom - mBounds.bottom;
mTmpRect2.left=mTmpRect.right - mBounds.right;
mTmpRect2.right=mTmpRect2.left + mBounds.width();
mTmpRect2.bottom=mTmpRect2.top + mBounds.height();
break;
case Surface.ROTATION_270:
mTmpRect2.top=mBounds.left;
mTmpRect2.left=mTmpRect.right - mBounds.bottom;
mTmpRect2.right=mTmpRect2.left + mBounds.height();
mTmpRect2.bottom=mTmpRect2.top + mBounds.width();
break;
}
setBounds(mTmpRect2,mOverrideConfig);
}","void updateDisplayInfo(final DisplayContent displayContent){
  if (displayContent == null) {
    return;
  }
  if (mFullscreen) {
    setBounds(null,Configuration.EMPTY);
    return;
  }
  final int newRotation=displayContent.getDisplayInfo().rotation;
  if (mRotation == newRotation) {
    return;
  }
  mTmpRect2.set(mBounds);
  displayContent.rotateBounds(mRotation,newRotation,mTmpRect2);
  setBounds(mTmpRect2,mOverrideConfig);
}",0.4537712895377129
193622,"private boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      if (!bounds.intersect(mTmpRect)) {
        return false;
      }
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen) {
    return false;
  }
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  return true;
}","private boolean setBounds(Rect bounds){
  boolean oldFullscreen=mFullscreen;
  int rotation=Surface.ROTATION_0;
  if (mDisplayContent != null) {
    mDisplayContent.getLogicalDisplayRect(mTmpRect);
    rotation=mDisplayContent.getDisplayInfo().rotation;
    if (bounds == null) {
      bounds=mTmpRect;
      mFullscreen=true;
    }
 else {
      if (!bounds.intersect(mTmpRect)) {
        return false;
      }
      mFullscreen=mTmpRect.equals(bounds);
    }
  }
  if (bounds == null) {
    return false;
  }
  if (mBounds.equals(bounds) && oldFullscreen == mFullscreen && mRotation == rotation) {
    return false;
  }
  mAnimationBackgroundSurface.setBounds(bounds);
  mBounds.set(bounds);
  mRotation=rotation;
  return true;
}",0.8959276018099548
193623,"void updateDisplayInfo(Rect bounds){
  if (mDisplayContent != null) {
    if (bounds != null) {
      setBounds(bounds);
    }
 else {
      setBounds(mFullscreen ? null : mBounds);
    }
    for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
      mTasks.get(taskNdx).updateDisplayInfo(mDisplayContent);
    }
  }
}","void updateDisplayInfo(Rect bounds){
  if (mDisplayContent != null) {
    if (bounds != null) {
      setBounds(bounds);
    }
 else     if (mFullscreen) {
      setBounds(null);
    }
 else {
      TmpRect2.set(mBounds);
      mDisplayContent.rotateBounds(mRotation,mDisplayContent.getDisplayInfo().rotation,TmpRect2);
      setBounds(TmpRect2);
    }
    for (int taskNdx=mTasks.size() - 1; taskNdx >= 0; --taskNdx) {
      mTasks.get(taskNdx).updateDisplayInfo(mDisplayContent);
    }
  }
}",0.730816077953715
193624,"void setTouchExcludeRegion(Task focusedTask){
  mTouchExcludeRegion.set(mBaseDisplayRect);
  WindowList windows=getWindowList();
  final int delta=mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP,mDisplayMetrics);
  for (int i=windows.size() - 1; i >= 0; --i) {
    final WindowState win=windows.get(i);
    final Task task=win.mAppToken != null ? win.getTask() : null;
    if (win.isVisibleLw() && task != null) {
      final boolean isFreeformed=task.inFreeformWorkspace();
      if (task != focusedTask || isFreeformed) {
        mTmpRect.set(win.mVisibleFrame);
        mTmpRect.intersect(win.mVisibleInsets);
        if (isFreeformed) {
          mTmpRect.inset(-delta,-delta);
        }
        mTouchExcludeRegion.op(mTmpRect,Region.Op.DIFFERENCE);
      }
      if (task == focusedTask && isFreeformed) {
        mTmpRect.inset(delta,delta);
        mTouchExcludeRegion.op(mTmpRect,Region.Op.UNION);
      }
    }
  }
  if (mTapDetector != null) {
    mTapDetector.setTouchExcludeRegion(mTouchExcludeRegion);
  }
}","void setTouchExcludeRegion(Task focusedTask){
  mTouchExcludeRegion.set(mBaseDisplayRect);
  WindowList windows=getWindowList();
  final int delta=mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP,mDisplayMetrics);
  for (int i=windows.size() - 1; i >= 0; --i) {
    final WindowState win=windows.get(i);
    final Task task=win.getTask();
    if (win.isVisibleLw() && task != null) {
      final boolean isFreeformed=task.inFreeformWorkspace();
      if (task != focusedTask || isFreeformed) {
        mTmpRect.set(win.mVisibleFrame);
        mTmpRect.intersect(win.mVisibleInsets);
        if (isFreeformed) {
          mTmpRect.inset(-delta,-delta);
        }
        mTouchExcludeRegion.op(mTmpRect,Region.Op.DIFFERENCE);
      }
      if (task == focusedTask && isFreeformed) {
        mTmpRect.inset(delta,delta);
        mTouchExcludeRegion.op(mTmpRect,Region.Op.UNION);
      }
    }
  }
  if (mTapDetector != null) {
    mTapDetector.setTouchExcludeRegion(mTouchExcludeRegion);
  }
}",0.9755854509217738
193625,"@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf,Rect osf){
  if (mAppToken != null && mAppToken.mReplacingWindow && (mExiting || !mAppToken.mReplacingRemoveRequested)) {
    return;
  }
  mHaveFrame=true;
  final Task task=mAppToken != null ? getTask() : null;
  final boolean nonFullscreenTask=task != null && !task.isFullscreen();
  final boolean freeformWorkspace=task != null && task.inFreeformWorkspace();
  if (nonFullscreenTask) {
    task.getBounds(mContainingFrame);
    final WindowState imeWin=mService.mInputMethodWindow;
    if (imeWin != null && imeWin.isVisibleNow() && mService.mInputMethodTarget == this && mContainingFrame.bottom > cf.bottom) {
      mContainingFrame.top-=mContainingFrame.bottom - cf.bottom;
    }
    if (freeformWorkspace) {
      if (mContainingFrame.isEmpty()) {
        mContainingFrame.set(cf);
      }
    }
 else {
      if (!mContainingFrame.intersect(cf)) {
        mContainingFrame.set(cf);
      }
    }
    mDisplayFrame.set(mContainingFrame);
  }
 else {
    mContainingFrame.set(pf);
    mDisplayFrame.set(df);
  }
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final boolean hasOutsets=osf != null;
  if (hasOutsets) {
    mOutsetFrame.set(osf);
  }
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  if (nonFullscreenTask) {
    w=Math.min(w,pw);
    h=Math.min(h,ph);
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,mDisplayFrame,mFrame);
  if (hasOutsets) {
    mOutsets.set(Math.max(mContentFrame.left - mOutsetFrame.left,0),Math.max(mContentFrame.top - mOutsetFrame.top,0),Math.max(mOutsetFrame.right - mContentFrame.right,0),Math.max(mOutsetFrame.bottom - mContentFrame.bottom,0));
  }
 else {
    mOutsets.set(0,0,0,0);
  }
  if (freeformWorkspace && !mFrame.isEmpty()) {
    final int height=Math.min(mFrame.height(),mContentFrame.height());
    final int width=Math.min(mContentFrame.width(),mFrame.width());
    final DisplayMetrics displayMetrics=getDisplayContent().getDisplayMetrics();
    final int minVisibleHeight=mService.dipToPixel(MINIMUM_VISIBLE_HEIGHT_IN_DP,displayMetrics);
    final int minVisibleWidth=mService.dipToPixel(MINIMUM_VISIBLE_WIDTH_IN_DP,displayMetrics);
    final int top=Math.max(mContentFrame.top,Math.min(mFrame.top,mContentFrame.bottom - minVisibleHeight));
    final int left=Math.max(mContentFrame.left + minVisibleWidth - width,Math.min(mFrame.left,mContentFrame.right - minVisibleWidth));
    mFrame.set(left,top,left + width,top + height);
    mContentFrame.set(mFrame);
    mVisibleFrame.set(mContentFrame);
    mStableFrame.set(mContentFrame);
  }
 else {
    mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
    mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
    mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  }
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mOutsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.mWallpaperControllerLocked.updateWallpaperOffset(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString()+ ""String_Node_Str""+ mOutsets.toShortString());
}","@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf,Rect osf){
  if (mAppToken != null && mAppToken.mReplacingWindow && (mExiting || !mAppToken.mReplacingRemoveRequested)) {
    return;
  }
  mHaveFrame=true;
  final Task task=getTask();
  final boolean nonFullscreenTask=task != null && !task.isFullscreen();
  final boolean freeformWorkspace=task != null && task.inFreeformWorkspace();
  if (nonFullscreenTask) {
    task.getBounds(mContainingFrame);
    final WindowState imeWin=mService.mInputMethodWindow;
    if (imeWin != null && imeWin.isVisibleNow() && mService.mInputMethodTarget == this && mContainingFrame.bottom > cf.bottom) {
      mContainingFrame.top-=mContainingFrame.bottom - cf.bottom;
    }
    if (freeformWorkspace) {
      if (mContainingFrame.isEmpty()) {
        mContainingFrame.set(cf);
      }
    }
 else {
      if (!mContainingFrame.intersect(cf)) {
        mContainingFrame.set(cf);
      }
    }
    mDisplayFrame.set(mContainingFrame);
  }
 else {
    mContainingFrame.set(pf);
    mDisplayFrame.set(df);
  }
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final boolean hasOutsets=osf != null;
  if (hasOutsets) {
    mOutsetFrame.set(osf);
  }
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  if (nonFullscreenTask) {
    w=Math.min(w,pw);
    h=Math.min(h,ph);
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,mDisplayFrame,mFrame);
  if (hasOutsets) {
    mOutsets.set(Math.max(mContentFrame.left - mOutsetFrame.left,0),Math.max(mContentFrame.top - mOutsetFrame.top,0),Math.max(mOutsetFrame.right - mContentFrame.right,0),Math.max(mOutsetFrame.bottom - mContentFrame.bottom,0));
  }
 else {
    mOutsets.set(0,0,0,0);
  }
  if (freeformWorkspace && !mFrame.isEmpty()) {
    final int height=Math.min(mFrame.height(),mContentFrame.height());
    final int width=Math.min(mContentFrame.width(),mFrame.width());
    final DisplayMetrics displayMetrics=getDisplayContent().getDisplayMetrics();
    final int minVisibleHeight=mService.dipToPixel(MINIMUM_VISIBLE_HEIGHT_IN_DP,displayMetrics);
    final int minVisibleWidth=mService.dipToPixel(MINIMUM_VISIBLE_WIDTH_IN_DP,displayMetrics);
    final int top=Math.max(mContentFrame.top,Math.min(mFrame.top,mContentFrame.bottom - minVisibleHeight));
    final int left=Math.max(mContentFrame.left + minVisibleWidth - width,Math.min(mFrame.left,mContentFrame.right - minVisibleWidth));
    mFrame.set(left,top,left + width,top + height);
    mContentFrame.set(mFrame);
    mVisibleFrame.set(mContentFrame);
    mStableFrame.set(mContentFrame);
  }
 else {
    mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
    mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
    mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  }
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mOutsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.mWallpaperControllerLocked.updateWallpaperOffset(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString()+ ""String_Node_Str""+ mOutsets.toShortString());
}",0.9969295289448064
193626,"boolean inFreeformWorkspace(){
  final Task task=mAppToken != null ? getTask() : null;
  return task != null && task.inFreeformWorkspace();
}","boolean inFreeformWorkspace(){
  final Task task=getTask();
  return task != null && task.inFreeformWorkspace();
}",0.8941176470588236
193627,"boolean isDragResizing(){
  final Task task=mAppToken != null ? getTask() : null;
  return mService.mTaskPositioner != null && mService.mTaskPositioner.isTaskResizing(task);
}","boolean isDragResizing(){
  final Task task=getTask();
  return mService.mTaskPositioner != null && mService.mTaskPositioner.isTaskResizing(task);
}",0.9164086687306502
193628,"TaskStack getStack(){
  Task task=getTask();
  if (task != null) {
    if (task.mStack != null) {
      return task.mStack;
    }
  }
  return mDisplayContent.getHomeStack();
}","TaskStack getStack(){
  Task task=getTask();
  if (task != null) {
    if (task.mStack != null) {
      return task.mStack;
    }
  }
  return null;
}",0.901840490797546
193629,"Task getTask(){
  AppWindowToken wtoken=mAppToken == null ? mService.mFocusedApp : mAppToken;
  if (wtoken == null) {
    return null;
  }
  final Task task=wtoken.mTask;
  return task;
}","Task getTask(){
  return mAppToken != null ? mAppToken.mTask : null;
}",0.4747081712062256
193630,"private void applySurfaceChangesTransaction(boolean recoveringMemory,int numDisplays,int defaultDw,int defaultDh){
  if (mService.mWatermark != null) {
    mService.mWatermark.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mStrictModeFlash != null) {
    mService.mStrictModeFlash.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mCircularDisplayMask != null) {
    mService.mCircularDisplayMask.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  if (mService.mEmulatorDisplayOverlay != null) {
    mService.mEmulatorDisplayOverlay.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  boolean focusDisplayed=false;
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    boolean updateAllDrawn=false;
    WindowList windows=displayContent.getWindowList();
    DisplayInfo displayInfo=displayContent.getDisplayInfo();
    final int displayId=displayContent.getDisplayId();
    final int dw=displayInfo.logicalWidth;
    final int dh=displayInfo.logicalHeight;
    final int innerDw=displayInfo.appWidth;
    final int innerDh=displayInfo.appHeight;
    final boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
    mDisplayHasContent=false;
    mPreferredRefreshRate=0;
    mPreferredModeId=0;
    int repeats=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,""String_Node_Str"");
        displayContent.layoutNeeded=false;
        break;
      }
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_WALLPAPER) != 0 && mWallpaperControllerLocked.adjustWallpaperWindows()) {
        mService.assignLayersLocked(windows);
        displayContent.layoutNeeded=true;
      }
      if (isDefaultDisplay && (displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mService.updateOrientationFromAppTokensLocked(true)) {
          displayContent.layoutNeeded=true;
          mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
        }
      }
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        displayContent.layoutNeeded=true;
      }
      if (repeats < LAYOUT_REPEAT_THRESHOLD) {
        performLayoutLockedInner(displayContent,repeats == 1,false);
      }
 else {
        Slog.w(TAG,""String_Node_Str"");
      }
      displayContent.pendingLayoutChanges=0;
      if (isDefaultDisplay) {
        mService.mPolicy.beginPostLayoutPolicyLw(dw,dh);
        for (int i=windows.size() - 1; i >= 0; i--) {
          WindowState w=windows.get(i);
          if (w.mHasSurface) {
            mService.mPolicy.applyPostLayoutPolicyLw(w,w.mAttrs,w.mAttachedWindow);
          }
        }
        displayContent.pendingLayoutChanges|=mService.mPolicy.finishPostLayoutPolicyLw();
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      }
    }
 while (displayContent.pendingLayoutChanges != 0);
    mObscured=false;
    mSyswin=false;
    displayContent.resetDimming();
    final boolean someoneLosingFocus=!mService.mLosingFocus.isEmpty();
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState w=windows.get(i);
      final Task task=w.getTask();
      if (task == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION) {
        continue;
      }
      final boolean obscuredChanged=w.mObscured != mObscured;
      w.mObscured=mObscured;
      if (!mObscured) {
        handleNotObscuredLocked(w,innerDw,innerDh);
      }
      if (task != null && !task.getContinueDimming()) {
        w.handleFlagDimBehind();
      }
      if (isDefaultDisplay && obscuredChanged && mWallpaperControllerLocked.isWallpaperTarget(w)&& w.isVisibleLw()) {
        mWallpaperControllerLocked.updateWallpaperVisibility();
      }
      final WindowStateAnimator winAnimator=w.mWinAnimator;
      if (w.hasMoved()) {
        final int left=w.mFrame.left;
        final int top=w.mFrame.top;
        if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
          Animation a=AnimationUtils.loadAnimation(mService.mContext,com.android.internal.R.anim.window_move_from_decor);
          winAnimator.setAnimation(a);
          winAnimator.mAnimDw=w.mLastFrame.left - left;
          winAnimator.mAnimDh=w.mLastFrame.top - top;
          winAnimator.mAnimateMove=true;
          winAnimator.mAnimatingMove=true;
        }
        if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
          mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
        try {
          w.mClient.moved(left,top);
        }
 catch (        RemoteException e) {
        }
      }
      w.mContentChanged=false;
      if (w.mHasSurface) {
        final boolean committed=winAnimator.commitFinishDrawingLocked();
        if (isDefaultDisplay && committed) {
          if (w.mAttrs.type == TYPE_DREAM) {
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
          if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
            if (DEBUG_WALLPAPER_LIGHT)             Slog.v(TAG,""String_Node_Str"" + w);
            mWallpaperMayChange=true;
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
        }
        winAnimator.computeShownFrameLocked();
        winAnimator.setSurfaceBoundariesLocked(recoveringMemory);
      }
      final AppWindowToken atoken=w.mAppToken;
      if (DEBUG_STARTING_WINDOW && atoken != null && w == atoken.startingWindow) {
        Slog.d(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isOnScreen()+ ""String_Node_Str""+ atoken.allDrawn+ ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen);
      }
      if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
        if (atoken.lastTransactionSequence != mService.mTransactionSequence) {
          atoken.lastTransactionSequence=mService.mTransactionSequence;
          atoken.numInterestingWindows=atoken.numDrawnWindows=0;
          atoken.startingDisplayed=false;
        }
        if ((w.isOnScreenIgnoringKeyguard() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
          if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
            Slog.v(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isDrawnLw()+ ""String_Node_Str""+ winAnimator.isAnimating());
            if (!w.isDrawnLw()) {
              Slog.v(TAG,""String_Node_Str"" + winAnimator.mSurfaceControl + ""String_Node_Str""+ w.mPolicyVisibility+ ""String_Node_Str""+ winAnimator.drawStateToString()+ ""String_Node_Str""+ w.mAttachedHidden+ ""String_Node_Str""+ atoken.hiddenRequested+ ""String_Node_Str""+ winAnimator.mAnimating);
            }
          }
          if (w != atoken.startingWindow) {
            if (!atoken.mAppAnimator.freezingScreen || !w.mAppFreezing) {
              atoken.numInterestingWindows++;
              if (w.isDrawnLw()) {
                atoken.numDrawnWindows++;
                if (DEBUG_VISIBILITY || DEBUG_ORIENTATION)                 Slog.v(TAG,""String_Node_Str"" + atoken + ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen+ ""String_Node_Str""+ w.mAppFreezing);
                updateAllDrawn=true;
              }
            }
          }
 else           if (w.isDrawnLw()) {
            atoken.startingDisplayed=true;
          }
        }
      }
      if (isDefaultDisplay && someoneLosingFocus && w == mService.mCurrentFocus && w.isDisplayedLw()) {
        focusDisplayed=true;
      }
      mService.updateResizingWindows(w);
    }
    mService.mDisplayManagerInternal.setDisplayProperties(displayId,mDisplayHasContent,mPreferredRefreshRate,mPreferredModeId,true);
    mService.getDisplayContentLocked(displayId).stopDimmingIfNeeded();
    if (updateAllDrawn) {
      updateAllDrawnLocked(displayContent);
    }
  }
  if (focusDisplayed) {
    mService.mH.sendEmptyMessage(REPORT_LOSING_FOCUS);
  }
  mService.mDisplayManagerInternal.performTraversalInTransactionFromWindowManager();
}","private void applySurfaceChangesTransaction(boolean recoveringMemory,int numDisplays,int defaultDw,int defaultDh){
  if (mService.mWatermark != null) {
    mService.mWatermark.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mStrictModeFlash != null) {
    mService.mStrictModeFlash.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mCircularDisplayMask != null) {
    mService.mCircularDisplayMask.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  if (mService.mEmulatorDisplayOverlay != null) {
    mService.mEmulatorDisplayOverlay.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  boolean focusDisplayed=false;
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    boolean updateAllDrawn=false;
    WindowList windows=displayContent.getWindowList();
    DisplayInfo displayInfo=displayContent.getDisplayInfo();
    final int displayId=displayContent.getDisplayId();
    final int dw=displayInfo.logicalWidth;
    final int dh=displayInfo.logicalHeight;
    final int innerDw=displayInfo.appWidth;
    final int innerDh=displayInfo.appHeight;
    final boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
    mDisplayHasContent=false;
    mPreferredRefreshRate=0;
    mPreferredModeId=0;
    int repeats=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,""String_Node_Str"");
        displayContent.layoutNeeded=false;
        break;
      }
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_WALLPAPER) != 0 && mWallpaperControllerLocked.adjustWallpaperWindows()) {
        mService.assignLayersLocked(windows);
        displayContent.layoutNeeded=true;
      }
      if (isDefaultDisplay && (displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mService.updateOrientationFromAppTokensLocked(true)) {
          displayContent.layoutNeeded=true;
          mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
        }
      }
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        displayContent.layoutNeeded=true;
      }
      if (repeats < LAYOUT_REPEAT_THRESHOLD) {
        performLayoutLockedInner(displayContent,repeats == 1,false);
      }
 else {
        Slog.w(TAG,""String_Node_Str"");
      }
      displayContent.pendingLayoutChanges=0;
      if (isDefaultDisplay) {
        mService.mPolicy.beginPostLayoutPolicyLw(dw,dh);
        for (int i=windows.size() - 1; i >= 0; i--) {
          WindowState w=windows.get(i);
          if (w.mHasSurface) {
            mService.mPolicy.applyPostLayoutPolicyLw(w,w.mAttrs,w.mAttachedWindow);
          }
        }
        displayContent.pendingLayoutChanges|=mService.mPolicy.finishPostLayoutPolicyLw();
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      }
    }
 while (displayContent.pendingLayoutChanges != 0);
    mObscured=false;
    mSyswin=false;
    displayContent.resetDimming();
    final boolean someoneLosingFocus=!mService.mLosingFocus.isEmpty();
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState w=windows.get(i);
      Task task=w.getTask();
      if (task == null && w.getDisplayContent().getHomeStack() == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION) {
        continue;
      }
      final boolean obscuredChanged=w.mObscured != mObscured;
      w.mObscured=mObscured;
      if (!mObscured) {
        handleNotObscuredLocked(w,innerDw,innerDh);
      }
      if (task != null && !task.getContinueDimming()) {
        w.handleFlagDimBehind();
      }
      if (isDefaultDisplay && obscuredChanged && mWallpaperControllerLocked.isWallpaperTarget(w)&& w.isVisibleLw()) {
        mWallpaperControllerLocked.updateWallpaperVisibility();
      }
      final WindowStateAnimator winAnimator=w.mWinAnimator;
      if (w.hasMoved()) {
        final int left=w.mFrame.left;
        final int top=w.mFrame.top;
        if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
          Animation a=AnimationUtils.loadAnimation(mService.mContext,com.android.internal.R.anim.window_move_from_decor);
          winAnimator.setAnimation(a);
          winAnimator.mAnimDw=w.mLastFrame.left - left;
          winAnimator.mAnimDh=w.mLastFrame.top - top;
          winAnimator.mAnimateMove=true;
          winAnimator.mAnimatingMove=true;
        }
        if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
          mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
        try {
          w.mClient.moved(left,top);
        }
 catch (        RemoteException e) {
        }
      }
      w.mContentChanged=false;
      if (w.mHasSurface) {
        final boolean committed=winAnimator.commitFinishDrawingLocked();
        if (isDefaultDisplay && committed) {
          if (w.mAttrs.type == TYPE_DREAM) {
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
          if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
            if (DEBUG_WALLPAPER_LIGHT)             Slog.v(TAG,""String_Node_Str"" + w);
            mWallpaperMayChange=true;
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
        }
        winAnimator.computeShownFrameLocked();
        winAnimator.setSurfaceBoundariesLocked(recoveringMemory);
      }
      final AppWindowToken atoken=w.mAppToken;
      if (DEBUG_STARTING_WINDOW && atoken != null && w == atoken.startingWindow) {
        Slog.d(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isOnScreen()+ ""String_Node_Str""+ atoken.allDrawn+ ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen);
      }
      if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
        if (atoken.lastTransactionSequence != mService.mTransactionSequence) {
          atoken.lastTransactionSequence=mService.mTransactionSequence;
          atoken.numInterestingWindows=atoken.numDrawnWindows=0;
          atoken.startingDisplayed=false;
        }
        if ((w.isOnScreenIgnoringKeyguard() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
          if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
            Slog.v(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isDrawnLw()+ ""String_Node_Str""+ winAnimator.isAnimating());
            if (!w.isDrawnLw()) {
              Slog.v(TAG,""String_Node_Str"" + winAnimator.mSurfaceControl + ""String_Node_Str""+ w.mPolicyVisibility+ ""String_Node_Str""+ winAnimator.drawStateToString()+ ""String_Node_Str""+ w.mAttachedHidden+ ""String_Node_Str""+ atoken.hiddenRequested+ ""String_Node_Str""+ winAnimator.mAnimating);
            }
          }
          if (w != atoken.startingWindow) {
            if (!atoken.mAppAnimator.freezingScreen || !w.mAppFreezing) {
              atoken.numInterestingWindows++;
              if (w.isDrawnLw()) {
                atoken.numDrawnWindows++;
                if (DEBUG_VISIBILITY || DEBUG_ORIENTATION)                 Slog.v(TAG,""String_Node_Str"" + atoken + ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen+ ""String_Node_Str""+ w.mAppFreezing);
                updateAllDrawn=true;
              }
            }
          }
 else           if (w.isDrawnLw()) {
            atoken.startingDisplayed=true;
          }
        }
      }
      if (isDefaultDisplay && someoneLosingFocus && w == mService.mCurrentFocus && w.isDisplayedLw()) {
        focusDisplayed=true;
      }
      mService.updateResizingWindows(w);
    }
    mService.mDisplayManagerInternal.setDisplayProperties(displayId,mDisplayHasContent,mPreferredRefreshRate,mPreferredModeId,true);
    mService.getDisplayContentLocked(displayId).stopDimmingIfNeeded();
    if (updateAllDrawn) {
      updateAllDrawnLocked(displayContent);
    }
  }
  if (focusDisplayed) {
    mService.mH.sendEmptyMessage(REPORT_LOSING_FOCUS);
  }
  mService.mDisplayManagerInternal.performTraversalInTransactionFromWindowManager();
}",0.996842105263158
193631,"void setTouchExcludeRegion(Task focusedTask){
  mTouchExcludeRegion.set(mBaseDisplayRect);
  WindowList windows=getWindowList();
  final int delta=mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP,mDisplayMetrics);
  for (int i=windows.size() - 1; i >= 0; --i) {
    final WindowState win=windows.get(i);
    final Task task=win.mAppToken != null ? win.getTask() : null;
    if (win.isVisibleLw() && task != null) {
      final boolean isFreeformed=task.inFreeformWorkspace();
      if (task != focusedTask || isFreeformed) {
        mTmpRect.set(win.mVisibleFrame);
        mTmpRect.intersect(win.mVisibleInsets);
        if (isFreeformed) {
          mTmpRect.inset(-delta,-delta);
        }
        mTouchExcludeRegion.op(mTmpRect,Region.Op.DIFFERENCE);
      }
      if (task == focusedTask && isFreeformed) {
        mTmpRect.inset(delta,delta);
        mTouchExcludeRegion.op(mTmpRect,Region.Op.UNION);
      }
    }
  }
  if (mTapDetector != null) {
    mTapDetector.setTouchExcludeRegion(mTouchExcludeRegion);
  }
}","void setTouchExcludeRegion(Task focusedTask){
  mTouchExcludeRegion.set(mBaseDisplayRect);
  WindowList windows=getWindowList();
  final int delta=mService.dipToPixel(RESIZE_HANDLE_WIDTH_IN_DP,mDisplayMetrics);
  for (int i=windows.size() - 1; i >= 0; --i) {
    final WindowState win=windows.get(i);
    final Task task=win.getTask();
    if (win.isVisibleLw() && task != null) {
      final boolean isFreeformed=task.inFreeformWorkspace();
      if (task != focusedTask || isFreeformed) {
        mTmpRect.set(win.mVisibleFrame);
        mTmpRect.intersect(win.mVisibleInsets);
        if (isFreeformed) {
          mTmpRect.inset(-delta,-delta);
        }
        mTouchExcludeRegion.op(mTmpRect,Region.Op.DIFFERENCE);
      }
      if (task == focusedTask && isFreeformed) {
        mTmpRect.inset(delta,delta);
        mTouchExcludeRegion.op(mTmpRect,Region.Op.UNION);
      }
    }
  }
  if (mTapDetector != null) {
    mTapDetector.setTouchExcludeRegion(mTouchExcludeRegion);
  }
}",0.9755854509217738
193632,"@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf,Rect osf){
  if (mAppToken != null && mAppToken.mReplacingWindow && (mExiting || !mAppToken.mReplacingRemoveRequested)) {
    return;
  }
  mHaveFrame=true;
  final Task task=mAppToken != null ? getTask() : null;
  final boolean nonFullscreenTask=task != null && !task.isFullscreen();
  final boolean freeformWorkspace=task != null && task.inFreeformWorkspace();
  if (nonFullscreenTask) {
    task.getBounds(mContainingFrame);
    final WindowState imeWin=mService.mInputMethodWindow;
    if (imeWin != null && imeWin.isVisibleNow() && mService.mInputMethodTarget == this && mContainingFrame.bottom > cf.bottom) {
      mContainingFrame.top-=mContainingFrame.bottom - cf.bottom;
    }
    if (freeformWorkspace) {
      if (mContainingFrame.isEmpty()) {
        mContainingFrame.set(cf);
      }
    }
 else {
      if (!mContainingFrame.intersect(cf)) {
        mContainingFrame.set(cf);
      }
    }
    mDisplayFrame.set(mContainingFrame);
  }
 else {
    mContainingFrame.set(pf);
    mDisplayFrame.set(df);
  }
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final boolean hasOutsets=osf != null;
  if (hasOutsets) {
    mOutsetFrame.set(osf);
  }
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  if (nonFullscreenTask) {
    w=Math.min(w,pw);
    h=Math.min(h,ph);
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,mDisplayFrame,mFrame);
  if (hasOutsets) {
    mOutsets.set(Math.max(mContentFrame.left - mOutsetFrame.left,0),Math.max(mContentFrame.top - mOutsetFrame.top,0),Math.max(mOutsetFrame.right - mContentFrame.right,0),Math.max(mOutsetFrame.bottom - mContentFrame.bottom,0));
  }
 else {
    mOutsets.set(0,0,0,0);
  }
  if (freeformWorkspace && !mFrame.isEmpty()) {
    final int height=Math.min(mFrame.height(),mContentFrame.height());
    final int width=Math.min(mContentFrame.width(),mFrame.width());
    final DisplayMetrics displayMetrics=getDisplayContent().getDisplayMetrics();
    final int minVisibleHeight=mService.dipToPixel(MINIMUM_VISIBLE_HEIGHT_IN_DP,displayMetrics);
    final int minVisibleWidth=mService.dipToPixel(MINIMUM_VISIBLE_WIDTH_IN_DP,displayMetrics);
    final int top=Math.max(mContentFrame.top,Math.min(mFrame.top,mContentFrame.bottom - minVisibleHeight));
    final int left=Math.max(mContentFrame.left + minVisibleWidth - width,Math.min(mFrame.left,mContentFrame.right - minVisibleWidth));
    mFrame.set(left,top,left + width,top + height);
    mContentFrame.set(mFrame);
    mVisibleFrame.set(mContentFrame);
    mStableFrame.set(mContentFrame);
  }
 else {
    mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
    mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
    mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  }
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mOutsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.mWallpaperControllerLocked.updateWallpaperOffset(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString()+ ""String_Node_Str""+ mOutsets.toShortString());
}","@Override public void computeFrameLw(Rect pf,Rect df,Rect of,Rect cf,Rect vf,Rect dcf,Rect sf,Rect osf){
  if (mAppToken != null && mAppToken.mReplacingWindow && (mExiting || !mAppToken.mReplacingRemoveRequested)) {
    return;
  }
  mHaveFrame=true;
  final Task task=getTask();
  final boolean nonFullscreenTask=task != null && !task.isFullscreen();
  final boolean freeformWorkspace=task != null && task.inFreeformWorkspace();
  if (nonFullscreenTask) {
    task.getBounds(mContainingFrame);
    final WindowState imeWin=mService.mInputMethodWindow;
    if (imeWin != null && imeWin.isVisibleNow() && mService.mInputMethodTarget == this && mContainingFrame.bottom > cf.bottom) {
      mContainingFrame.top-=mContainingFrame.bottom - cf.bottom;
    }
    if (freeformWorkspace) {
      if (mContainingFrame.isEmpty()) {
        mContainingFrame.set(cf);
      }
    }
 else {
      if (!mContainingFrame.intersect(cf)) {
        mContainingFrame.set(cf);
      }
    }
    mDisplayFrame.set(mContainingFrame);
  }
 else {
    mContainingFrame.set(pf);
    mDisplayFrame.set(df);
  }
  final int pw=mContainingFrame.width();
  final int ph=mContainingFrame.height();
  int w, h;
  if ((mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0) {
    if (mAttrs.width < 0) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mAttrs.width * mGlobalScale + .5f);
    }
 else {
      w=mAttrs.width;
    }
    if (mAttrs.height < 0) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mAttrs.height * mGlobalScale + .5f);
    }
 else {
      h=mAttrs.height;
    }
  }
 else {
    if (mAttrs.width == WindowManager.LayoutParams.MATCH_PARENT) {
      w=pw;
    }
 else     if (mEnforceSizeCompat) {
      w=(int)(mRequestedWidth * mGlobalScale + .5f);
    }
 else {
      w=mRequestedWidth;
    }
    if (mAttrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
      h=ph;
    }
 else     if (mEnforceSizeCompat) {
      h=(int)(mRequestedHeight * mGlobalScale + .5f);
    }
 else {
      h=mRequestedHeight;
    }
  }
  if (!mParentFrame.equals(pf)) {
    mParentFrame.set(pf);
    mContentChanged=true;
  }
  if (mRequestedWidth != mLastRequestedWidth || mRequestedHeight != mLastRequestedHeight) {
    mLastRequestedWidth=mRequestedWidth;
    mLastRequestedHeight=mRequestedHeight;
    mContentChanged=true;
  }
  mOverscanFrame.set(of);
  mContentFrame.set(cf);
  mVisibleFrame.set(vf);
  mDecorFrame.set(dcf);
  mStableFrame.set(sf);
  final boolean hasOutsets=osf != null;
  if (hasOutsets) {
    mOutsetFrame.set(osf);
  }
  final int fw=mFrame.width();
  final int fh=mFrame.height();
  float x, y;
  if (mEnforceSizeCompat) {
    x=mAttrs.x * mGlobalScale;
    y=mAttrs.y * mGlobalScale;
  }
 else {
    x=mAttrs.x;
    y=mAttrs.y;
  }
  if (nonFullscreenTask) {
    w=Math.min(w,pw);
    h=Math.min(h,ph);
  }
  Gravity.apply(mAttrs.gravity,w,h,mContainingFrame,(int)(x + mAttrs.horizontalMargin * pw),(int)(y + mAttrs.verticalMargin * ph),mFrame);
  Gravity.applyDisplay(mAttrs.gravity,mDisplayFrame,mFrame);
  if (hasOutsets) {
    mOutsets.set(Math.max(mContentFrame.left - mOutsetFrame.left,0),Math.max(mContentFrame.top - mOutsetFrame.top,0),Math.max(mOutsetFrame.right - mContentFrame.right,0),Math.max(mOutsetFrame.bottom - mContentFrame.bottom,0));
  }
 else {
    mOutsets.set(0,0,0,0);
  }
  if (freeformWorkspace && !mFrame.isEmpty()) {
    final int height=Math.min(mFrame.height(),mContentFrame.height());
    final int width=Math.min(mContentFrame.width(),mFrame.width());
    final DisplayMetrics displayMetrics=getDisplayContent().getDisplayMetrics();
    final int minVisibleHeight=mService.dipToPixel(MINIMUM_VISIBLE_HEIGHT_IN_DP,displayMetrics);
    final int minVisibleWidth=mService.dipToPixel(MINIMUM_VISIBLE_WIDTH_IN_DP,displayMetrics);
    final int top=Math.max(mContentFrame.top,Math.min(mFrame.top,mContentFrame.bottom - minVisibleHeight));
    final int left=Math.max(mContentFrame.left + minVisibleWidth - width,Math.min(mFrame.left,mContentFrame.right - minVisibleWidth));
    mFrame.set(left,top,left + width,top + height);
    mContentFrame.set(mFrame);
    mVisibleFrame.set(mContentFrame);
    mStableFrame.set(mContentFrame);
  }
 else {
    mContentFrame.set(Math.max(mContentFrame.left,mFrame.left),Math.max(mContentFrame.top,mFrame.top),Math.min(mContentFrame.right,mFrame.right),Math.min(mContentFrame.bottom,mFrame.bottom));
    mVisibleFrame.set(Math.max(mVisibleFrame.left,mFrame.left),Math.max(mVisibleFrame.top,mFrame.top),Math.min(mVisibleFrame.right,mFrame.right),Math.min(mVisibleFrame.bottom,mFrame.bottom));
    mStableFrame.set(Math.max(mStableFrame.left,mFrame.left),Math.max(mStableFrame.top,mFrame.top),Math.min(mStableFrame.right,mFrame.right),Math.min(mStableFrame.bottom,mFrame.bottom));
  }
  mOverscanInsets.set(Math.max(mOverscanFrame.left - mFrame.left,0),Math.max(mOverscanFrame.top - mFrame.top,0),Math.max(mFrame.right - mOverscanFrame.right,0),Math.max(mFrame.bottom - mOverscanFrame.bottom,0));
  mContentInsets.set(mContentFrame.left - mFrame.left,mContentFrame.top - mFrame.top,mFrame.right - mContentFrame.right,mFrame.bottom - mContentFrame.bottom);
  mVisibleInsets.set(mVisibleFrame.left - mFrame.left,mVisibleFrame.top - mFrame.top,mFrame.right - mVisibleFrame.right,mFrame.bottom - mVisibleFrame.bottom);
  mStableInsets.set(Math.max(mStableFrame.left - mFrame.left,0),Math.max(mStableFrame.top - mFrame.top,0),Math.max(mFrame.right - mStableFrame.right,0),Math.max(mFrame.bottom - mStableFrame.bottom,0));
  mCompatFrame.set(mFrame);
  if (mEnforceSizeCompat) {
    mOverscanInsets.scale(mInvGlobalScale);
    mContentInsets.scale(mInvGlobalScale);
    mVisibleInsets.scale(mInvGlobalScale);
    mStableInsets.scale(mInvGlobalScale);
    mOutsets.scale(mInvGlobalScale);
    mCompatFrame.scale(mInvGlobalScale);
  }
  if (mIsWallpaper && (fw != mFrame.width() || fh != mFrame.height())) {
    final DisplayContent displayContent=getDisplayContent();
    if (displayContent != null) {
      final DisplayInfo displayInfo=displayContent.getDisplayInfo();
      mService.mWallpaperControllerLocked.updateWallpaperOffset(this,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
  }
  if (DEBUG_LAYOUT || WindowManagerService.localLOGV)   Slog.v(TAG,""String_Node_Str"" + mRequestedWidth + ""String_Node_Str""+ mRequestedHeight+ ""String_Node_Str""+ ""String_Node_Str""+ pw+ ""String_Node_Str""+ ph+ ""String_Node_Str""+ mFrame.toShortString()+ ""String_Node_Str""+ mContentInsets.toShortString()+ ""String_Node_Str""+ mVisibleInsets.toShortString()+ ""String_Node_Str""+ mStableInsets.toShortString()+ ""String_Node_Str""+ mOutsets.toShortString());
}",0.9969295289448064
193633,"boolean inFreeformWorkspace(){
  final Task task=mAppToken != null ? getTask() : null;
  return task != null && task.inFreeformWorkspace();
}","boolean inFreeformWorkspace(){
  final Task task=getTask();
  return task != null && task.inFreeformWorkspace();
}",0.8941176470588236
193634,"boolean isDragResizing(){
  final Task task=mAppToken != null ? getTask() : null;
  return mService.mTaskPositioner != null && mService.mTaskPositioner.isTaskResizing(task);
}","boolean isDragResizing(){
  final Task task=getTask();
  return mService.mTaskPositioner != null && mService.mTaskPositioner.isTaskResizing(task);
}",0.9164086687306502
193635,"TaskStack getStack(){
  Task task=getTask();
  if (task != null) {
    if (task.mStack != null) {
      return task.mStack;
    }
  }
  return mDisplayContent.getHomeStack();
}","TaskStack getStack(){
  Task task=getTask();
  if (task != null) {
    if (task.mStack != null) {
      return task.mStack;
    }
  }
  return null;
}",0.901840490797546
193636,"Task getTask(){
  AppWindowToken wtoken=mAppToken == null ? mService.mFocusedApp : mAppToken;
  if (wtoken == null) {
    return null;
  }
  final Task task=wtoken.mTask;
  return task;
}","Task getTask(){
  return mAppToken != null ? mAppToken.mTask : null;
}",0.4747081712062256
193637,"private void applySurfaceChangesTransaction(boolean recoveringMemory,int numDisplays,int defaultDw,int defaultDh){
  if (mService.mWatermark != null) {
    mService.mWatermark.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mStrictModeFlash != null) {
    mService.mStrictModeFlash.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mCircularDisplayMask != null) {
    mService.mCircularDisplayMask.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  if (mService.mEmulatorDisplayOverlay != null) {
    mService.mEmulatorDisplayOverlay.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  boolean focusDisplayed=false;
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    boolean updateAllDrawn=false;
    WindowList windows=displayContent.getWindowList();
    DisplayInfo displayInfo=displayContent.getDisplayInfo();
    final int displayId=displayContent.getDisplayId();
    final int dw=displayInfo.logicalWidth;
    final int dh=displayInfo.logicalHeight;
    final int innerDw=displayInfo.appWidth;
    final int innerDh=displayInfo.appHeight;
    final boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
    mDisplayHasContent=false;
    mPreferredRefreshRate=0;
    mPreferredModeId=0;
    int repeats=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,""String_Node_Str"");
        displayContent.layoutNeeded=false;
        break;
      }
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_WALLPAPER) != 0 && mWallpaperControllerLocked.adjustWallpaperWindows()) {
        mService.assignLayersLocked(windows);
        displayContent.layoutNeeded=true;
      }
      if (isDefaultDisplay && (displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mService.updateOrientationFromAppTokensLocked(true)) {
          displayContent.layoutNeeded=true;
          mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
        }
      }
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        displayContent.layoutNeeded=true;
      }
      if (repeats < LAYOUT_REPEAT_THRESHOLD) {
        performLayoutLockedInner(displayContent,repeats == 1,false);
      }
 else {
        Slog.w(TAG,""String_Node_Str"");
      }
      displayContent.pendingLayoutChanges=0;
      if (isDefaultDisplay) {
        mService.mPolicy.beginPostLayoutPolicyLw(dw,dh);
        for (int i=windows.size() - 1; i >= 0; i--) {
          WindowState w=windows.get(i);
          if (w.mHasSurface) {
            mService.mPolicy.applyPostLayoutPolicyLw(w,w.mAttrs,w.mAttachedWindow);
          }
        }
        displayContent.pendingLayoutChanges|=mService.mPolicy.finishPostLayoutPolicyLw();
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      }
    }
 while (displayContent.pendingLayoutChanges != 0);
    mObscured=false;
    mSyswin=false;
    displayContent.resetDimming();
    final boolean someoneLosingFocus=!mService.mLosingFocus.isEmpty();
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState w=windows.get(i);
      final Task task=w.getTask();
      if (task == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION) {
        continue;
      }
      final boolean obscuredChanged=w.mObscured != mObscured;
      w.mObscured=mObscured;
      if (!mObscured) {
        handleNotObscuredLocked(w,innerDw,innerDh);
      }
      if (task != null && !task.getContinueDimming()) {
        w.handleFlagDimBehind();
      }
      if (isDefaultDisplay && obscuredChanged && mWallpaperControllerLocked.isWallpaperTarget(w)&& w.isVisibleLw()) {
        mWallpaperControllerLocked.updateWallpaperVisibility();
      }
      final WindowStateAnimator winAnimator=w.mWinAnimator;
      if (w.hasMoved()) {
        final int left=w.mFrame.left;
        final int top=w.mFrame.top;
        if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
          Animation a=AnimationUtils.loadAnimation(mService.mContext,com.android.internal.R.anim.window_move_from_decor);
          winAnimator.setAnimation(a);
          winAnimator.mAnimDw=w.mLastFrame.left - left;
          winAnimator.mAnimDh=w.mLastFrame.top - top;
          winAnimator.mAnimateMove=true;
          winAnimator.mAnimatingMove=true;
        }
        if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
          mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
        try {
          w.mClient.moved(left,top);
        }
 catch (        RemoteException e) {
        }
      }
      w.mContentChanged=false;
      if (w.mHasSurface) {
        final boolean committed=winAnimator.commitFinishDrawingLocked();
        if (isDefaultDisplay && committed) {
          if (w.mAttrs.type == TYPE_DREAM) {
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
          if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
            if (DEBUG_WALLPAPER_LIGHT)             Slog.v(TAG,""String_Node_Str"" + w);
            mWallpaperMayChange=true;
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
        }
        winAnimator.computeShownFrameLocked();
        winAnimator.setSurfaceBoundariesLocked(recoveringMemory);
      }
      final AppWindowToken atoken=w.mAppToken;
      if (DEBUG_STARTING_WINDOW && atoken != null && w == atoken.startingWindow) {
        Slog.d(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isOnScreen()+ ""String_Node_Str""+ atoken.allDrawn+ ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen);
      }
      if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
        if (atoken.lastTransactionSequence != mService.mTransactionSequence) {
          atoken.lastTransactionSequence=mService.mTransactionSequence;
          atoken.numInterestingWindows=atoken.numDrawnWindows=0;
          atoken.startingDisplayed=false;
        }
        if ((w.isOnScreenIgnoringKeyguard() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
          if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
            Slog.v(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isDrawnLw()+ ""String_Node_Str""+ winAnimator.isAnimating());
            if (!w.isDrawnLw()) {
              Slog.v(TAG,""String_Node_Str"" + winAnimator.mSurfaceControl + ""String_Node_Str""+ w.mPolicyVisibility+ ""String_Node_Str""+ winAnimator.drawStateToString()+ ""String_Node_Str""+ w.mAttachedHidden+ ""String_Node_Str""+ atoken.hiddenRequested+ ""String_Node_Str""+ winAnimator.mAnimating);
            }
          }
          if (w != atoken.startingWindow) {
            if (!atoken.mAppAnimator.freezingScreen || !w.mAppFreezing) {
              atoken.numInterestingWindows++;
              if (w.isDrawnLw()) {
                atoken.numDrawnWindows++;
                if (DEBUG_VISIBILITY || DEBUG_ORIENTATION)                 Slog.v(TAG,""String_Node_Str"" + atoken + ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen+ ""String_Node_Str""+ w.mAppFreezing);
                updateAllDrawn=true;
              }
            }
          }
 else           if (w.isDrawnLw()) {
            atoken.startingDisplayed=true;
          }
        }
      }
      if (isDefaultDisplay && someoneLosingFocus && w == mService.mCurrentFocus && w.isDisplayedLw()) {
        focusDisplayed=true;
      }
      mService.updateResizingWindows(w);
    }
    mService.mDisplayManagerInternal.setDisplayProperties(displayId,mDisplayHasContent,mPreferredRefreshRate,mPreferredModeId,true);
    mService.getDisplayContentLocked(displayId).stopDimmingIfNeeded();
    if (updateAllDrawn) {
      updateAllDrawnLocked(displayContent);
    }
  }
  if (focusDisplayed) {
    mService.mH.sendEmptyMessage(REPORT_LOSING_FOCUS);
  }
  mService.mDisplayManagerInternal.performTraversalInTransactionFromWindowManager();
}","private void applySurfaceChangesTransaction(boolean recoveringMemory,int numDisplays,int defaultDw,int defaultDh){
  if (mService.mWatermark != null) {
    mService.mWatermark.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mStrictModeFlash != null) {
    mService.mStrictModeFlash.positionSurface(defaultDw,defaultDh);
  }
  if (mService.mCircularDisplayMask != null) {
    mService.mCircularDisplayMask.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  if (mService.mEmulatorDisplayOverlay != null) {
    mService.mEmulatorDisplayOverlay.positionSurface(defaultDw,defaultDh,mService.mRotation);
  }
  boolean focusDisplayed=false;
  for (int displayNdx=0; displayNdx < numDisplays; ++displayNdx) {
    final DisplayContent displayContent=mService.mDisplayContents.valueAt(displayNdx);
    boolean updateAllDrawn=false;
    WindowList windows=displayContent.getWindowList();
    DisplayInfo displayInfo=displayContent.getDisplayInfo();
    final int displayId=displayContent.getDisplayId();
    final int dw=displayInfo.logicalWidth;
    final int dh=displayInfo.logicalHeight;
    final int innerDw=displayInfo.appWidth;
    final int innerDh=displayInfo.appHeight;
    final boolean isDefaultDisplay=(displayId == Display.DEFAULT_DISPLAY);
    mDisplayHasContent=false;
    mPreferredRefreshRate=0;
    mPreferredModeId=0;
    int repeats=0;
    do {
      repeats++;
      if (repeats > 6) {
        Slog.w(TAG,""String_Node_Str"");
        displayContent.layoutNeeded=false;
        break;
      }
      if (DEBUG_LAYOUT_REPEATS)       debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_WALLPAPER) != 0 && mWallpaperControllerLocked.adjustWallpaperWindows()) {
        mService.assignLayersLocked(windows);
        displayContent.layoutNeeded=true;
      }
      if (isDefaultDisplay && (displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_CONFIG) != 0) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"");
        if (mService.updateOrientationFromAppTokensLocked(true)) {
          displayContent.layoutNeeded=true;
          mService.mH.sendEmptyMessage(SEND_NEW_CONFIGURATION);
        }
      }
      if ((displayContent.pendingLayoutChanges & FINISH_LAYOUT_REDO_LAYOUT) != 0) {
        displayContent.layoutNeeded=true;
      }
      if (repeats < LAYOUT_REPEAT_THRESHOLD) {
        performLayoutLockedInner(displayContent,repeats == 1,false);
      }
 else {
        Slog.w(TAG,""String_Node_Str"");
      }
      displayContent.pendingLayoutChanges=0;
      if (isDefaultDisplay) {
        mService.mPolicy.beginPostLayoutPolicyLw(dw,dh);
        for (int i=windows.size() - 1; i >= 0; i--) {
          WindowState w=windows.get(i);
          if (w.mHasSurface) {
            mService.mPolicy.applyPostLayoutPolicyLw(w,w.mAttrs,w.mAttachedWindow);
          }
        }
        displayContent.pendingLayoutChanges|=mService.mPolicy.finishPostLayoutPolicyLw();
        if (DEBUG_LAYOUT_REPEATS)         debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
      }
    }
 while (displayContent.pendingLayoutChanges != 0);
    mObscured=false;
    mSyswin=false;
    displayContent.resetDimming();
    final boolean someoneLosingFocus=!mService.mLosingFocus.isEmpty();
    for (int i=windows.size() - 1; i >= 0; i--) {
      WindowState w=windows.get(i);
      Task task=w.getTask();
      if (task == null && w.getDisplayContent().getHomeStack() == null && w.getAttrs().type != TYPE_PRIVATE_PRESENTATION) {
        continue;
      }
      final boolean obscuredChanged=w.mObscured != mObscured;
      w.mObscured=mObscured;
      if (!mObscured) {
        handleNotObscuredLocked(w,innerDw,innerDh);
      }
      if (task != null && !task.getContinueDimming()) {
        w.handleFlagDimBehind();
      }
      if (isDefaultDisplay && obscuredChanged && mWallpaperControllerLocked.isWallpaperTarget(w)&& w.isVisibleLw()) {
        mWallpaperControllerLocked.updateWallpaperVisibility();
      }
      final WindowStateAnimator winAnimator=w.mWinAnimator;
      if (w.hasMoved()) {
        final int left=w.mFrame.left;
        final int top=w.mFrame.top;
        if ((w.mAttrs.privateFlags & PRIVATE_FLAG_NO_MOVE_ANIMATION) == 0) {
          Animation a=AnimationUtils.loadAnimation(mService.mContext,com.android.internal.R.anim.window_move_from_decor);
          winAnimator.setAnimation(a);
          winAnimator.mAnimDw=w.mLastFrame.left - left;
          winAnimator.mAnimDh=w.mLastFrame.top - top;
          winAnimator.mAnimateMove=true;
          winAnimator.mAnimatingMove=true;
        }
        if (mService.mAccessibilityController != null && displayId == Display.DEFAULT_DISPLAY) {
          mService.mAccessibilityController.onSomeWindowResizedOrMovedLocked();
        }
        try {
          w.mClient.moved(left,top);
        }
 catch (        RemoteException e) {
        }
      }
      w.mContentChanged=false;
      if (w.mHasSurface) {
        final boolean committed=winAnimator.commitFinishDrawingLocked();
        if (isDefaultDisplay && committed) {
          if (w.mAttrs.type == TYPE_DREAM) {
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_LAYOUT;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
          if ((w.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0) {
            if (DEBUG_WALLPAPER_LIGHT)             Slog.v(TAG,""String_Node_Str"" + w);
            mWallpaperMayChange=true;
            displayContent.pendingLayoutChanges|=FINISH_LAYOUT_REDO_WALLPAPER;
            if (DEBUG_LAYOUT_REPEATS) {
              debugLayoutRepeats(""String_Node_Str"",displayContent.pendingLayoutChanges);
            }
          }
        }
        winAnimator.computeShownFrameLocked();
        winAnimator.setSurfaceBoundariesLocked(recoveringMemory);
      }
      final AppWindowToken atoken=w.mAppToken;
      if (DEBUG_STARTING_WINDOW && atoken != null && w == atoken.startingWindow) {
        Slog.d(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isOnScreen()+ ""String_Node_Str""+ atoken.allDrawn+ ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen);
      }
      if (atoken != null && (!atoken.allDrawn || atoken.mAppAnimator.freezingScreen)) {
        if (atoken.lastTransactionSequence != mService.mTransactionSequence) {
          atoken.lastTransactionSequence=mService.mTransactionSequence;
          atoken.numInterestingWindows=atoken.numDrawnWindows=0;
          atoken.startingDisplayed=false;
        }
        if ((w.isOnScreenIgnoringKeyguard() || winAnimator.mAttrType == TYPE_BASE_APPLICATION) && !w.mExiting && !w.mDestroying) {
          if (DEBUG_VISIBILITY || DEBUG_ORIENTATION) {
            Slog.v(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ w.isDrawnLw()+ ""String_Node_Str""+ winAnimator.isAnimating());
            if (!w.isDrawnLw()) {
              Slog.v(TAG,""String_Node_Str"" + winAnimator.mSurfaceControl + ""String_Node_Str""+ w.mPolicyVisibility+ ""String_Node_Str""+ winAnimator.drawStateToString()+ ""String_Node_Str""+ w.mAttachedHidden+ ""String_Node_Str""+ atoken.hiddenRequested+ ""String_Node_Str""+ winAnimator.mAnimating);
            }
          }
          if (w != atoken.startingWindow) {
            if (!atoken.mAppAnimator.freezingScreen || !w.mAppFreezing) {
              atoken.numInterestingWindows++;
              if (w.isDrawnLw()) {
                atoken.numDrawnWindows++;
                if (DEBUG_VISIBILITY || DEBUG_ORIENTATION)                 Slog.v(TAG,""String_Node_Str"" + atoken + ""String_Node_Str""+ atoken.mAppAnimator.freezingScreen+ ""String_Node_Str""+ w.mAppFreezing);
                updateAllDrawn=true;
              }
            }
          }
 else           if (w.isDrawnLw()) {
            atoken.startingDisplayed=true;
          }
        }
      }
      if (isDefaultDisplay && someoneLosingFocus && w == mService.mCurrentFocus && w.isDisplayedLw()) {
        focusDisplayed=true;
      }
      mService.updateResizingWindows(w);
    }
    mService.mDisplayManagerInternal.setDisplayProperties(displayId,mDisplayHasContent,mPreferredRefreshRate,mPreferredModeId,true);
    mService.getDisplayContentLocked(displayId).stopDimmingIfNeeded();
    if (updateAllDrawn) {
      updateAllDrawnLocked(displayContent);
    }
  }
  if (focusDisplayed) {
    mService.mH.sendEmptyMessage(REPORT_LOSING_FOCUS);
  }
  mService.mDisplayManagerInternal.performTraversalInTransactionFromWindowManager();
}",0.996842105263158
193638,"/** 
 * Returns true if the stack is considered visible. 
 */
private boolean isStackVisibleLocked(){
  if (!isAttached()) {
    return false;
  }
  if (mStackSupervisor.isFrontStack(this)) {
    return true;
  }
  final int stackIndex=mStacks.indexOf(this);
  if (stackIndex == mStacks.size() - 1) {
    Slog.wtf(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    return false;
  }
  if (isHiddenByDockedStack()) {
    return false;
  }
  for (int i=stackIndex + 1; i < mStacks.size(); i++) {
    final ActivityStack stack=mStacks.get(i);
    final ArrayList<TaskRecord> tasks=stack.getAllTasks();
    if (!stack.mFullscreen && !stack.hasFullscreenTask()) {
      continue;
    }
    if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID || stack.mStackId == HOME_STACK_ID) {
      return false;
    }
    for (int taskNdx=tasks.size() - 1; taskNdx >= 0; --taskNdx) {
      final TaskRecord task=tasks.get(taskNdx);
      if (!task.mFullscreen) {
        continue;
      }
      final ArrayList<ActivityRecord> activities=task.mActivities;
      for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
        final ActivityRecord r=activities.get(activityNdx);
        if (!r.finishing && r.visible && (r.fullscreen || (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()))) {
          return false;
        }
      }
    }
  }
  return true;
}","/** 
 * Returns true if the stack is considered visible. 
 */
private boolean isStackVisibleLocked(){
  if (!isAttached()) {
    return false;
  }
  if (mStackSupervisor.isFrontStack(this)) {
    return true;
  }
  final int stackIndex=mStacks.indexOf(this);
  if (stackIndex == mStacks.size() - 1) {
    Slog.wtf(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    return false;
  }
  final ActivityStack focusedStack=mStackSupervisor.getFocusedStack();
  final int focusedStackId=focusedStack.mStackId;
  if (mStackId == DOCKED_STACK_ID) {
    if (focusedStackId != HOME_STACK_ID) {
      return true;
    }
    ActivityRecord topHomeActivity=focusedStack.topRunningActivityLocked(null);
    return topHomeActivity == null || !topHomeActivity.isHomeActivity();
  }
  if (focusedStackId == DOCKED_STACK_ID && stackIndex == (mStacks.indexOf(focusedStack) - 1)) {
    return true;
  }
  if (mStackId == HOME_STACK_ID && focusedStackId == FULLSCREEN_WORKSPACE_STACK_ID) {
    return hasTranslucentActivity(focusedStack);
  }
  if (mStackId >= FIRST_STATIC_STACK_ID && mStackId <= LAST_STATIC_STACK_ID) {
    return false;
  }
  for (int i=stackIndex + 1; i < mStacks.size(); i++) {
    final ActivityStack stack=mStacks.get(i);
    if (!stack.mFullscreen && !stack.hasFullscreenTask()) {
      continue;
    }
    if (stack.mStackId == FREEFORM_WORKSPACE_STACK_ID || stack.mStackId == HOME_STACK_ID || stack.mStackId == FULLSCREEN_WORKSPACE_STACK_ID) {
      return false;
    }
    if (!hasTranslucentActivity(stack)) {
      return false;
    }
  }
  return true;
}",0.4898097826086957
193639,"/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}","/** 
 * Paroled here means temporary pardon from being inactive 
 */
void setAppIdleParoled(boolean paroled){
synchronized (mLock) {
    if (mAppIdleParoled != paroled) {
      mAppIdleParoled=paroled;
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + mAppIdleParoled);
      if (paroled) {
        postParoleEndTimeout();
      }
 else {
        mLastAppIdleParoledTime=checkAndGetTimeLocked();
        postNextParoleTimeout();
      }
      postParoleStateChanged();
    }
  }
}",0.9478260869565216
193640,"/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
        postParoleEndTimeout();
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}","/** 
 * Check if it's been a while since last parole and let idle apps do some work 
 */
void checkParoleTimeout(){
synchronized (mLock) {
    if (!mAppIdleParoled) {
      final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
      if (timeSinceLastParole > mAppIdleParoleIntervalMillis) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        setAppIdleParoled(true);
      }
 else {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"");
        postNextParoleTimeout();
      }
    }
  }
}",0.9710144927536232
193641,"void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      postNextParoleTimeout();
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}","void onDeviceIdleModeChanged(){
  final boolean deviceIdle=mPowerManager.isDeviceIdleMode();
  if (DEBUG)   Slog.i(TAG,""String_Node_Str"" + deviceIdle);
synchronized (mLock) {
    final long timeSinceLastParole=checkAndGetTimeLocked() - mLastAppIdleParoledTime;
    if (!deviceIdle && timeSinceLastParole >= mAppIdleParoleIntervalMillis) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(true);
    }
 else     if (deviceIdle) {
      if (DEBUG)       Slog.i(TAG,""String_Node_Str"");
      setAppIdleParoled(false);
    }
  }
}",0.9728308501314636
193642,"private static void addCommand(Path path,float[] current,char previousCmd,char cmd,float[] val){
  int incr=2;
  float currentX=current[0];
  float currentY=current[1];
  float ctrlPointX=current[2];
  float ctrlPointY=current[3];
  float currentSegmentStartX=current[4];
  float currentSegmentStartY=current[5];
  float reflectiveCtrlPointX;
  float reflectiveCtrlPointY;
switch (cmd) {
case 'z':
case 'Z':
    path.close();
  currentX=currentSegmentStartX;
currentY=currentSegmentStartY;
ctrlPointX=currentSegmentStartX;
ctrlPointY=currentSegmentStartY;
path.moveTo(currentX,currentY);
break;
case 'm':
case 'M':
case 'l':
case 'L':
case 't':
case 'T':
incr=2;
break;
case 'h':
case 'H':
case 'v':
case 'V':
incr=1;
break;
case 'c':
case 'C':
incr=6;
break;
case 's':
case 'S':
case 'q':
case 'Q':
incr=4;
break;
case 'a':
case 'A':
incr=7;
break;
}
for (int k=0; k < val.length; k+=incr) {
switch (cmd) {
case 'm':
path.rMoveTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
break;
case 'M':
path.moveTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
break;
case 'l':
path.rLineTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'L':
path.lineTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'h':
path.rLineTo(val[k + 0],0);
currentX+=val[k + 0];
break;
case 'H':
path.lineTo(val[k + 0],currentY);
currentX=val[k + 0];
break;
case 'v':
path.rLineTo(0,val[k + 0]);
currentY+=val[k + 0];
break;
case 'V':
path.lineTo(currentX,val[k + 0]);
currentY=val[k + 0];
break;
case 'c':
path.rCubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
ctrlPointX=currentX + val[k + 2];
ctrlPointY=currentY + val[k + 3];
currentX+=val[k + 4];
currentY+=val[k + 5];
break;
case 'C':
path.cubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
currentX=val[k + 4];
currentY=val[k + 5];
ctrlPointX=val[k + 2];
ctrlPointY=val[k + 3];
break;
case 's':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rCubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'S':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.cubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 'q':
path.rQuadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'Q':
path.quadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 't':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rQuadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=currentX + reflectiveCtrlPointX;
ctrlPointY=currentY + reflectiveCtrlPointY;
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'T':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.quadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=reflectiveCtrlPointX;
ctrlPointY=reflectiveCtrlPointY;
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'a':
drawArc(path,currentX,currentY,val[k + 5] + currentX,val[k + 6] + currentY,val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX+=val[k + 5];
currentY+=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
case 'A':
drawArc(path,currentX,currentY,val[k + 5],val[k + 6],val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX=val[k + 5];
currentY=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
}
previousCmd=cmd;
}
current[0]=currentX;
current[1]=currentY;
current[2]=ctrlPointX;
current[3]=ctrlPointY;
current[4]=currentSegmentStartX;
current[5]=currentSegmentStartY;
}","private static void addCommand(Path path,float[] current,char previousCmd,char cmd,float[] val){
  int incr=2;
  float currentX=current[0];
  float currentY=current[1];
  float ctrlPointX=current[2];
  float ctrlPointY=current[3];
  float currentSegmentStartX=current[4];
  float currentSegmentStartY=current[5];
  float reflectiveCtrlPointX;
  float reflectiveCtrlPointY;
switch (cmd) {
case 'z':
case 'Z':
    path.close();
  currentX=currentSegmentStartX;
currentY=currentSegmentStartY;
ctrlPointX=currentSegmentStartX;
ctrlPointY=currentSegmentStartY;
path.moveTo(currentX,currentY);
break;
case 'm':
case 'M':
case 'l':
case 'L':
case 't':
case 'T':
incr=2;
break;
case 'h':
case 'H':
case 'v':
case 'V':
incr=1;
break;
case 'c':
case 'C':
incr=6;
break;
case 's':
case 'S':
case 'q':
case 'Q':
incr=4;
break;
case 'a':
case 'A':
incr=7;
break;
}
for (int k=0; k < val.length; k+=incr) {
switch (cmd) {
case 'm':
currentX+=val[k + 0];
currentY+=val[k + 1];
if (k > 0) {
path.rLineTo(val[k + 0],val[k + 1]);
}
 else {
path.rMoveTo(val[k + 0],val[k + 1]);
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
}
break;
case 'M':
currentX=val[k + 0];
currentY=val[k + 1];
if (k > 0) {
path.lineTo(val[k + 0],val[k + 1]);
}
 else {
path.moveTo(val[k + 0],val[k + 1]);
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
}
break;
case 'l':
path.rLineTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'L':
path.lineTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'h':
path.rLineTo(val[k + 0],0);
currentX+=val[k + 0];
break;
case 'H':
path.lineTo(val[k + 0],currentY);
currentX=val[k + 0];
break;
case 'v':
path.rLineTo(0,val[k + 0]);
currentY+=val[k + 0];
break;
case 'V':
path.lineTo(currentX,val[k + 0]);
currentY=val[k + 0];
break;
case 'c':
path.rCubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
ctrlPointX=currentX + val[k + 2];
ctrlPointY=currentY + val[k + 3];
currentX+=val[k + 4];
currentY+=val[k + 5];
break;
case 'C':
path.cubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
currentX=val[k + 4];
currentY=val[k + 5];
ctrlPointX=val[k + 2];
ctrlPointY=val[k + 3];
break;
case 's':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rCubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'S':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.cubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 'q':
path.rQuadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'Q':
path.quadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 't':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rQuadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=currentX + reflectiveCtrlPointX;
ctrlPointY=currentY + reflectiveCtrlPointY;
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'T':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.quadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=reflectiveCtrlPointX;
ctrlPointY=reflectiveCtrlPointY;
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'a':
drawArc(path,currentX,currentY,val[k + 5] + currentX,val[k + 6] + currentY,val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX+=val[k + 5];
currentY+=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
case 'A':
drawArc(path,currentX,currentY,val[k + 5],val[k + 6],val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX=val[k + 5];
currentY=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
}
previousCmd=cmd;
}
current[0]=currentX;
current[1]=currentY;
current[2]=ctrlPointX;
current[3]=ctrlPointY;
current[4]=currentSegmentStartX;
current[5]=currentSegmentStartY;
}",0.97037855206346
193643,"/** 
 * Make sure that all activities that need to be visible (that is, they currently can be seen by the user) actually are.
 */
final void ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges){
  ActivityRecord top=topRunningActivityLocked(null);
  if (top == null) {
    return;
  }
  if (DEBUG_VISIBILITY)   Slog.v(TAG_VISIBILITY,""String_Node_Str"" + top + ""String_Node_Str""+ Integer.toHexString(configChanges));
  if (mTranslucentActivityWaiting != top) {
    mUndrawnActivitiesBelowTopTranslucent.clear();
    if (mTranslucentActivityWaiting != null) {
      notifyActivityDrawnLocked(null);
      mTranslucentActivityWaiting=null;
    }
    mHandler.removeMessages(TRANSLUCENT_TIMEOUT_MSG);
  }
  boolean aboveTop=true;
  boolean behindFullscreen=!isStackVisibleLocked();
  boolean noStackActivityResumed=(isInStackLocked(starting) == null);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    boolean behindFullscreenActivity=behindFullscreen;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ActivityRecord r=activities.get(activityNdx);
      if (r.finishing) {
        continue;
      }
      if (aboveTop && r != top) {
        continue;
      }
      aboveTop=false;
      if (!behindFullscreenActivity || r.mLaunchTaskBehind) {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state);
        if (r != starting) {
          ensureActivityConfigurationLocked(r,0);
        }
        if (r.app == null || r.app.thread == null) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          if (r != starting) {
            r.startFreezingScreenLocked(r.app,configChanges);
          }
          if (!r.visible || r.mLaunchTaskBehind) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            setVisible(r,true);
          }
          if (r != starting) {
            mStackSupervisor.startSpecificActivityLocked(r,noStackActivityResumed,false);
            if (activityNdx >= activities.size()) {
              activityNdx=activities.size() - 1;
            }
 else {
              noStackActivityResumed=false;
            }
          }
        }
 else         if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          r.stopFreezingScreenLocked(false);
          try {
            if (r.returningOptions != null) {
              r.app.thread.scheduleOnNewActivityOptions(r.appToken,r.returningOptions);
            }
          }
 catch (          RemoteException e) {
          }
          if (r.state == ActivityState.RESUMED) {
            noStackActivityResumed=false;
          }
        }
 else {
          r.visible=true;
          if (r.state != ActivityState.RESUMED && r != starting) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            try {
              if (mTranslucentActivityWaiting != null) {
                r.updateOptionsLocked(r.returningOptions);
                mUndrawnActivitiesBelowTopTranslucent.add(r);
              }
              setVisible(r,true);
              r.sleeping=false;
              r.app.pendingUiClean=true;
              r.app.thread.scheduleWindowVisibility(r.appToken,true);
              r.stopFreezingScreenLocked(false);
            }
 catch (            Exception e) {
              Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
            }
          }
        }
        configChanges|=r.configChangeFlags;
        if (r.fullscreen) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        }
 else         if (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        }
      }
 else {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state+ ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          try {
            setVisible(r,false);
switch (r.state) {
case STOPPING:
case STOPPED:
              if (r.app != null && r.app.thread != null) {
                if (DEBUG_VISIBILITY)                 Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
                r.app.thread.scheduleWindowVisibility(r.appToken,false);
              }
            break;
case INITIALIZING:
case RESUMED:
case PAUSING:
case PAUSED:
          if (getVisibleBehindActivity() == r) {
            releaseBackgroundResources(r);
          }
 else {
            if (!mStackSupervisor.mStoppingActivities.contains(r)) {
              mStackSupervisor.mStoppingActivities.add(r);
            }
            mStackSupervisor.scheduleIdleLocked();
          }
        break;
default :
      break;
  }
}
 catch (Exception e) {
  Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
}
}
 else {
if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
}
}
}
behindFullscreen|=task.mFullscreen;
}
if (mTranslucentActivityWaiting != null && mUndrawnActivitiesBelowTopTranslucent.isEmpty()) {
notifyActivityDrawnLocked(null);
}
}","/** 
 * Make sure that all activities that need to be visible (that is, they currently can be seen by the user) actually are.
 */
final void ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges){
  ActivityRecord top=topRunningActivityLocked(null);
  if (top == null) {
    return;
  }
  if (DEBUG_VISIBILITY)   Slog.v(TAG_VISIBILITY,""String_Node_Str"" + top + ""String_Node_Str""+ Integer.toHexString(configChanges));
  if (mTranslucentActivityWaiting != top) {
    mUndrawnActivitiesBelowTopTranslucent.clear();
    if (mTranslucentActivityWaiting != null) {
      notifyActivityDrawnLocked(null);
      mTranslucentActivityWaiting=null;
    }
    mHandler.removeMessages(TRANSLUCENT_TIMEOUT_MSG);
  }
  boolean aboveTop=true;
  final boolean stackInvisible=!isStackVisibleLocked();
  boolean behindFullscreenActivity=stackInvisible;
  boolean noStackActivityResumed=(isInStackLocked(starting) == null);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ActivityRecord r=activities.get(activityNdx);
      if (r.finishing) {
        continue;
      }
      if (aboveTop && r != top) {
        continue;
      }
      aboveTop=false;
      if (!behindFullscreenActivity || r.mLaunchTaskBehind) {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state);
        if (r != starting) {
          ensureActivityConfigurationLocked(r,0);
        }
        if (r.app == null || r.app.thread == null) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          if (r != starting) {
            r.startFreezingScreenLocked(r.app,configChanges);
          }
          if (!r.visible || r.mLaunchTaskBehind) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            setVisible(r,true);
          }
          if (r != starting) {
            mStackSupervisor.startSpecificActivityLocked(r,noStackActivityResumed,false);
            if (activityNdx >= activities.size()) {
              activityNdx=activities.size() - 1;
            }
 else {
              noStackActivityResumed=false;
            }
          }
        }
 else         if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          r.stopFreezingScreenLocked(false);
          try {
            if (r.returningOptions != null) {
              r.app.thread.scheduleOnNewActivityOptions(r.appToken,r.returningOptions);
            }
          }
 catch (          RemoteException e) {
          }
          if (r.state == ActivityState.RESUMED) {
            noStackActivityResumed=false;
          }
        }
 else {
          r.visible=true;
          if (r.state != ActivityState.RESUMED && r != starting) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            try {
              if (mTranslucentActivityWaiting != null) {
                r.updateOptionsLocked(r.returningOptions);
                mUndrawnActivitiesBelowTopTranslucent.add(r);
              }
              setVisible(r,true);
              r.sleeping=false;
              r.app.pendingUiClean=true;
              r.app.thread.scheduleWindowVisibility(r.appToken,true);
              r.stopFreezingScreenLocked(false);
            }
 catch (            Exception e) {
              Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
            }
          }
        }
        configChanges|=r.configChangeFlags;
        if (r.fullscreen) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        }
 else         if (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        }
      }
 else {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state+ ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          try {
            setVisible(r,false);
switch (r.state) {
case STOPPING:
case STOPPED:
              if (r.app != null && r.app.thread != null) {
                if (DEBUG_VISIBILITY)                 Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
                r.app.thread.scheduleWindowVisibility(r.appToken,false);
              }
            break;
case INITIALIZING:
case RESUMED:
case PAUSING:
case PAUSED:
          if (getVisibleBehindActivity() == r) {
            releaseBackgroundResources(r);
          }
 else {
            if (!mStackSupervisor.mStoppingActivities.contains(r)) {
              mStackSupervisor.mStoppingActivities.add(r);
            }
            mStackSupervisor.scheduleIdleLocked();
          }
        break;
default :
      break;
  }
}
 catch (Exception e) {
  Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
}
}
 else {
if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
}
}
}
if (mStackId == FREEFORM_WORKSPACE_STACK_ID) {
behindFullscreenActivity=stackInvisible;
}
}
if (mTranslucentActivityWaiting != null && mUndrawnActivitiesBelowTopTranslucent.isEmpty()) {
notifyActivityDrawnLocked(null);
}
}",0.9732418524871356
193644,"/** 
 * Make sure that all activities that need to be visible (that is, they currently can be seen by the user) actually are.
 */
final void ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges){
  ActivityRecord top=topRunningActivityLocked(null);
  if (top == null) {
    return;
  }
  if (DEBUG_VISIBILITY)   Slog.v(TAG_VISIBILITY,""String_Node_Str"" + top + ""String_Node_Str""+ Integer.toHexString(configChanges));
  if (mTranslucentActivityWaiting != top) {
    mUndrawnActivitiesBelowTopTranslucent.clear();
    if (mTranslucentActivityWaiting != null) {
      notifyActivityDrawnLocked(null);
      mTranslucentActivityWaiting=null;
    }
    mHandler.removeMessages(TRANSLUCENT_TIMEOUT_MSG);
  }
  boolean aboveTop=true;
  boolean behindFullscreen=!isStackVisibleLocked();
  boolean noStackActivityResumed=(isInStackLocked(starting) == null);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    boolean behindFullscreenActivity=behindFullscreen;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ActivityRecord r=activities.get(activityNdx);
      if (r.finishing) {
        continue;
      }
      if (aboveTop && r != top) {
        continue;
      }
      aboveTop=false;
      if (!behindFullscreenActivity || r.mLaunchTaskBehind) {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state);
        if (r != starting) {
          ensureActivityConfigurationLocked(r,0);
        }
        if (r.app == null || r.app.thread == null) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          if (r != starting) {
            r.startFreezingScreenLocked(r.app,configChanges);
          }
          if (!r.visible || r.mLaunchTaskBehind) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            setVisible(r,true);
          }
          if (r != starting) {
            mStackSupervisor.startSpecificActivityLocked(r,noStackActivityResumed,false);
            if (activityNdx >= activities.size()) {
              activityNdx=activities.size() - 1;
            }
 else {
              noStackActivityResumed=false;
            }
          }
        }
 else         if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          r.stopFreezingScreenLocked(false);
          try {
            if (r.returningOptions != null) {
              r.app.thread.scheduleOnNewActivityOptions(r.appToken,r.returningOptions);
            }
          }
 catch (          RemoteException e) {
          }
          if (r.state == ActivityState.RESUMED) {
            noStackActivityResumed=false;
          }
        }
 else {
          r.visible=true;
          if (r.state != ActivityState.RESUMED && r != starting) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            try {
              if (mTranslucentActivityWaiting != null) {
                r.updateOptionsLocked(r.returningOptions);
                mUndrawnActivitiesBelowTopTranslucent.add(r);
              }
              setVisible(r,true);
              r.sleeping=false;
              r.app.pendingUiClean=true;
              r.app.thread.scheduleWindowVisibility(r.appToken,true);
              r.stopFreezingScreenLocked(false);
            }
 catch (            Exception e) {
              Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
            }
          }
        }
        configChanges|=r.configChangeFlags;
        if (r.fullscreen) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        }
 else         if (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        }
      }
 else {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state+ ""String_Node_Str""+ behindFullscreen+ ""String_Node_Str""+ behindFullscreenActivity);
        if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          try {
            setVisible(r,false);
switch (r.state) {
case STOPPING:
case STOPPED:
              if (r.app != null && r.app.thread != null) {
                if (DEBUG_VISIBILITY)                 Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
                r.app.thread.scheduleWindowVisibility(r.appToken,false);
              }
            break;
case INITIALIZING:
case RESUMED:
case PAUSING:
case PAUSED:
          if (getVisibleBehindActivity() == r) {
            releaseBackgroundResources(r);
          }
 else {
            if (!mStackSupervisor.mStoppingActivities.contains(r)) {
              mStackSupervisor.mStoppingActivities.add(r);
            }
            mStackSupervisor.scheduleIdleLocked();
          }
        break;
default :
      break;
  }
}
 catch (Exception e) {
  Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
}
}
 else {
if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
}
}
}
behindFullscreen|=task.mFullscreen;
}
if (mTranslucentActivityWaiting != null && mUndrawnActivitiesBelowTopTranslucent.isEmpty()) {
notifyActivityDrawnLocked(null);
}
}","/** 
 * Make sure that all activities that need to be visible (that is, they currently can be seen by the user) actually are.
 */
final void ensureActivitiesVisibleLocked(ActivityRecord starting,int configChanges){
  ActivityRecord top=topRunningActivityLocked(null);
  if (top == null) {
    return;
  }
  if (DEBUG_VISIBILITY)   Slog.v(TAG_VISIBILITY,""String_Node_Str"" + top + ""String_Node_Str""+ Integer.toHexString(configChanges));
  if (mTranslucentActivityWaiting != top) {
    mUndrawnActivitiesBelowTopTranslucent.clear();
    if (mTranslucentActivityWaiting != null) {
      notifyActivityDrawnLocked(null);
      mTranslucentActivityWaiting=null;
    }
    mHandler.removeMessages(TRANSLUCENT_TIMEOUT_MSG);
  }
  boolean aboveTop=true;
  final boolean stackInvisible=!isStackVisibleLocked();
  boolean behindFullscreenActivity=stackInvisible;
  boolean noStackActivityResumed=(isInStackLocked(starting) == null);
  for (int taskNdx=mTaskHistory.size() - 1; taskNdx >= 0; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    final ArrayList<ActivityRecord> activities=task.mActivities;
    for (int activityNdx=activities.size() - 1; activityNdx >= 0; --activityNdx) {
      final ActivityRecord r=activities.get(activityNdx);
      if (r.finishing) {
        continue;
      }
      if (aboveTop && r != top) {
        continue;
      }
      aboveTop=false;
      if (!behindFullscreenActivity || r.mLaunchTaskBehind) {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state);
        if (r != starting) {
          ensureActivityConfigurationLocked(r,0);
        }
        if (r.app == null || r.app.thread == null) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          if (r != starting) {
            r.startFreezingScreenLocked(r.app,configChanges);
          }
          if (!r.visible || r.mLaunchTaskBehind) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            setVisible(r,true);
          }
          if (r != starting) {
            mStackSupervisor.startSpecificActivityLocked(r,noStackActivityResumed,false);
            if (activityNdx >= activities.size()) {
              activityNdx=activities.size() - 1;
            }
 else {
              noStackActivityResumed=false;
            }
          }
        }
 else         if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          r.stopFreezingScreenLocked(false);
          try {
            if (r.returningOptions != null) {
              r.app.thread.scheduleOnNewActivityOptions(r.appToken,r.returningOptions);
            }
          }
 catch (          RemoteException e) {
          }
          if (r.state == ActivityState.RESUMED) {
            noStackActivityResumed=false;
          }
        }
 else {
          r.visible=true;
          if (r.state != ActivityState.RESUMED && r != starting) {
            if (DEBUG_VISIBILITY)             Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
            try {
              if (mTranslucentActivityWaiting != null) {
                r.updateOptionsLocked(r.returningOptions);
                mUndrawnActivitiesBelowTopTranslucent.add(r);
              }
              setVisible(r,true);
              r.sleeping=false;
              r.app.pendingUiClean=true;
              r.app.thread.scheduleWindowVisibility(r.appToken,true);
              r.stopFreezingScreenLocked(false);
            }
 catch (            Exception e) {
              Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
            }
          }
        }
        configChanges|=r.configChangeFlags;
        if (r.fullscreen) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        }
 else         if (!isHomeStack() && r.frontOfTask && task.isOverHomeStack()) {
          behindFullscreenActivity=true;
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        }
      }
 else {
        if (DEBUG_VISIBILITY)         Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r + ""String_Node_Str""+ r.finishing+ ""String_Node_Str""+ r.state+ ""String_Node_Str""+ stackInvisible+ ""String_Node_Str""+ behindFullscreenActivity);
        if (r.visible) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
          try {
            setVisible(r,false);
switch (r.state) {
case STOPPING:
case STOPPED:
              if (r.app != null && r.app.thread != null) {
                if (DEBUG_VISIBILITY)                 Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
                r.app.thread.scheduleWindowVisibility(r.appToken,false);
              }
            break;
case INITIALIZING:
case RESUMED:
case PAUSING:
case PAUSED:
          if (getVisibleBehindActivity() == r) {
            releaseBackgroundResources(r);
          }
 else {
            if (!mStackSupervisor.mStoppingActivities.contains(r)) {
              mStackSupervisor.mStoppingActivities.add(r);
            }
            mStackSupervisor.scheduleIdleLocked();
          }
        break;
default :
      break;
  }
}
 catch (Exception e) {
  Slog.w(TAG,""String_Node_Str"" + r.intent.getComponent(),e);
}
}
 else {
if (DEBUG_VISIBILITY) Slog.v(TAG_VISIBILITY,""String_Node_Str"" + r);
}
}
}
if (mStackId == FREEFORM_WORKSPACE_STACK_ID) {
behindFullscreenActivity=stackInvisible;
}
}
if (mTranslucentActivityWaiting != null && mUndrawnActivitiesBelowTopTranslucent.isEmpty()) {
notifyActivityDrawnLocked(null);
}
}",0.9732418524871356
193645,"/** 
 * The Device owner can only be set by adb or an app with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission. The device owner can only be set before the setup phase of the primary user has completed, except for adb if no accounts or additional users are present on the device.
 */
private void enforceCanSetDeviceOwner(int userId){
  if (mOwners.hasDeviceOwner()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  int callingUid=Binder.getCallingUid();
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID) {
    if (!hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      return;
    }
    if (!UserManager.isSplitSystemUser()) {
      if (mUserManager.getUserCount() > 1) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (AccountManager.get(mContext).getAccounts().length > 0) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    return;
  }
 else {
  }
  if (mUserManager.isUserRunning(new UserHandle(userId))) {
    throw new IllegalStateException(""String_Node_Str"" + userId);
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,null);
  if (!UserManager.isSplitSystemUser()) {
    if (hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","/** 
 * The Device owner can only be set by adb or an app with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission. The device owner can only be set before the setup phase of the primary user has completed, except for adb if no accounts or additional users are present on the device.
 */
private void enforceCanSetDeviceOwner(int userId){
  if (mOwners.hasDeviceOwner()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  int callingUid=Binder.getCallingUid();
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID) {
    if (!hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      return;
    }
    if (!UserManager.isSplitSystemUser()) {
      if (mUserManager.getUserCount() > 1) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (AccountManager.get(mContext).getAccounts().length > 0) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    return;
  }
  if (!mUserManager.isUserRunning(new UserHandle(userId))) {
    throw new IllegalStateException(""String_Node_Str"" + userId);
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,null);
  if (!UserManager.isSplitSystemUser()) {
    if (hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.991949597479874
193646,"/** 
 * The Device owner can only be set by adb or an app with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission. The device owner can only be set before the setup phase of the primary user has completed, except for adb if no accounts or additional users are present on the device.
 */
private void enforceCanSetDeviceOwner(int userId){
  if (mOwners.hasDeviceOwner()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  int callingUid=Binder.getCallingUid();
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID) {
    if (!hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      return;
    }
    if (!UserManager.isSplitSystemUser()) {
      if (mUserManager.getUserCount() > 1) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (AccountManager.get(mContext).getAccounts().length > 0) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    return;
  }
 else {
  }
  if (mUserManager.isUserRunning(new UserHandle(userId))) {
    throw new IllegalStateException(""String_Node_Str"" + userId);
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,null);
  if (!UserManager.isSplitSystemUser()) {
    if (hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","/** 
 * The Device owner can only be set by adb or an app with the MANAGE_PROFILE_AND_DEVICE_OWNERS permission. The device owner can only be set before the setup phase of the primary user has completed, except for adb if no accounts or additional users are present on the device.
 */
private void enforceCanSetDeviceOwner(int userId){
  if (mOwners.hasDeviceOwner()) {
    throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
  }
  int callingUid=Binder.getCallingUid();
  if (callingUid == Process.SHELL_UID || callingUid == Process.ROOT_UID) {
    if (!hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      return;
    }
    if (!UserManager.isSplitSystemUser()) {
      if (mUserManager.getUserCount() > 1) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
      if (AccountManager.get(mContext).getAccounts().length > 0) {
        throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    return;
  }
  if (!mUserManager.isUserRunning(new UserHandle(userId))) {
    throw new IllegalStateException(""String_Node_Str"" + userId);
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.MANAGE_PROFILE_AND_DEVICE_OWNERS,null);
  if (!UserManager.isSplitSystemUser()) {
    if (hasUserSetupCompleted(UserHandle.USER_OWNER)) {
      throw new IllegalStateException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.991949597479874
193647,"private static void addCommand(Path path,float[] current,char previousCmd,char cmd,float[] val){
  int incr=2;
  float currentX=current[0];
  float currentY=current[1];
  float ctrlPointX=current[2];
  float ctrlPointY=current[3];
  float currentSegmentStartX=current[4];
  float currentSegmentStartY=current[5];
  float reflectiveCtrlPointX;
  float reflectiveCtrlPointY;
switch (cmd) {
case 'z':
case 'Z':
    path.close();
  currentX=currentSegmentStartX;
currentY=currentSegmentStartY;
ctrlPointX=currentSegmentStartX;
ctrlPointY=currentSegmentStartY;
path.moveTo(currentX,currentY);
break;
case 'm':
case 'M':
case 'l':
case 'L':
case 't':
case 'T':
incr=2;
break;
case 'h':
case 'H':
case 'v':
case 'V':
incr=1;
break;
case 'c':
case 'C':
incr=6;
break;
case 's':
case 'S':
case 'q':
case 'Q':
incr=4;
break;
case 'a':
case 'A':
incr=7;
break;
}
for (int k=0; k < val.length; k+=incr) {
switch (cmd) {
case 'm':
path.rMoveTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
break;
case 'M':
path.moveTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
break;
case 'l':
path.rLineTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'L':
path.lineTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'h':
path.rLineTo(val[k + 0],0);
currentX+=val[k + 0];
break;
case 'H':
path.lineTo(val[k + 0],currentY);
currentX=val[k + 0];
break;
case 'v':
path.rLineTo(0,val[k + 0]);
currentY+=val[k + 0];
break;
case 'V':
path.lineTo(currentX,val[k + 0]);
currentY=val[k + 0];
break;
case 'c':
path.rCubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
ctrlPointX=currentX + val[k + 2];
ctrlPointY=currentY + val[k + 3];
currentX+=val[k + 4];
currentY+=val[k + 5];
break;
case 'C':
path.cubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
currentX=val[k + 4];
currentY=val[k + 5];
ctrlPointX=val[k + 2];
ctrlPointY=val[k + 3];
break;
case 's':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rCubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'S':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.cubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 'q':
path.rQuadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'Q':
path.quadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 't':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rQuadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=currentX + reflectiveCtrlPointX;
ctrlPointY=currentY + reflectiveCtrlPointY;
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'T':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.quadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=reflectiveCtrlPointX;
ctrlPointY=reflectiveCtrlPointY;
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'a':
drawArc(path,currentX,currentY,val[k + 5] + currentX,val[k + 6] + currentY,val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX+=val[k + 5];
currentY+=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
case 'A':
drawArc(path,currentX,currentY,val[k + 5],val[k + 6],val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX=val[k + 5];
currentY=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
}
previousCmd=cmd;
}
current[0]=currentX;
current[1]=currentY;
current[2]=ctrlPointX;
current[3]=ctrlPointY;
current[4]=currentSegmentStartX;
current[5]=currentSegmentStartY;
}","private static void addCommand(Path path,float[] current,char previousCmd,char cmd,float[] val){
  int incr=2;
  float currentX=current[0];
  float currentY=current[1];
  float ctrlPointX=current[2];
  float ctrlPointY=current[3];
  float currentSegmentStartX=current[4];
  float currentSegmentStartY=current[5];
  float reflectiveCtrlPointX;
  float reflectiveCtrlPointY;
switch (cmd) {
case 'z':
case 'Z':
    path.close();
  currentX=currentSegmentStartX;
currentY=currentSegmentStartY;
ctrlPointX=currentSegmentStartX;
ctrlPointY=currentSegmentStartY;
path.moveTo(currentX,currentY);
break;
case 'm':
case 'M':
case 'l':
case 'L':
case 't':
case 'T':
incr=2;
break;
case 'h':
case 'H':
case 'v':
case 'V':
incr=1;
break;
case 'c':
case 'C':
incr=6;
break;
case 's':
case 'S':
case 'q':
case 'Q':
incr=4;
break;
case 'a':
case 'A':
incr=7;
break;
}
for (int k=0; k < val.length; k+=incr) {
switch (cmd) {
case 'm':
currentX+=val[k + 0];
currentY+=val[k + 1];
if (k > 0) {
path.rLineTo(val[k + 0],val[k + 1]);
}
 else {
path.rMoveTo(val[k + 0],val[k + 1]);
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
}
break;
case 'M':
currentX=val[k + 0];
currentY=val[k + 1];
if (k > 0) {
path.lineTo(val[k + 0],val[k + 1]);
}
 else {
path.moveTo(val[k + 0],val[k + 1]);
currentSegmentStartX=currentX;
currentSegmentStartY=currentY;
}
break;
case 'l':
path.rLineTo(val[k + 0],val[k + 1]);
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'L':
path.lineTo(val[k + 0],val[k + 1]);
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'h':
path.rLineTo(val[k + 0],0);
currentX+=val[k + 0];
break;
case 'H':
path.lineTo(val[k + 0],currentY);
currentX=val[k + 0];
break;
case 'v':
path.rLineTo(0,val[k + 0]);
currentY+=val[k + 0];
break;
case 'V':
path.lineTo(currentX,val[k + 0]);
currentY=val[k + 0];
break;
case 'c':
path.rCubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
ctrlPointX=currentX + val[k + 2];
ctrlPointY=currentY + val[k + 3];
currentX+=val[k + 4];
currentY+=val[k + 5];
break;
case 'C':
path.cubicTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3],val[k + 4],val[k + 5]);
currentX=val[k + 4];
currentY=val[k + 5];
ctrlPointX=val[k + 2];
ctrlPointY=val[k + 3];
break;
case 's':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rCubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'S':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'c' || previousCmd == 's' || previousCmd == 'C' || previousCmd == 'S') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.cubicTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 'q':
path.rQuadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=currentX + val[k + 0];
ctrlPointY=currentY + val[k + 1];
currentX+=val[k + 2];
currentY+=val[k + 3];
break;
case 'Q':
path.quadTo(val[k + 0],val[k + 1],val[k + 2],val[k + 3]);
ctrlPointX=val[k + 0];
ctrlPointY=val[k + 1];
currentX=val[k + 2];
currentY=val[k + 3];
break;
case 't':
reflectiveCtrlPointX=0;
reflectiveCtrlPointY=0;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=currentX - ctrlPointX;
reflectiveCtrlPointY=currentY - ctrlPointY;
}
path.rQuadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=currentX + reflectiveCtrlPointX;
ctrlPointY=currentY + reflectiveCtrlPointY;
currentX+=val[k + 0];
currentY+=val[k + 1];
break;
case 'T':
reflectiveCtrlPointX=currentX;
reflectiveCtrlPointY=currentY;
if (previousCmd == 'q' || previousCmd == 't' || previousCmd == 'Q' || previousCmd == 'T') {
reflectiveCtrlPointX=2 * currentX - ctrlPointX;
reflectiveCtrlPointY=2 * currentY - ctrlPointY;
}
path.quadTo(reflectiveCtrlPointX,reflectiveCtrlPointY,val[k + 0],val[k + 1]);
ctrlPointX=reflectiveCtrlPointX;
ctrlPointY=reflectiveCtrlPointY;
currentX=val[k + 0];
currentY=val[k + 1];
break;
case 'a':
drawArc(path,currentX,currentY,val[k + 5] + currentX,val[k + 6] + currentY,val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX+=val[k + 5];
currentY+=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
case 'A':
drawArc(path,currentX,currentY,val[k + 5],val[k + 6],val[k + 0],val[k + 1],val[k + 2],val[k + 3] != 0,val[k + 4] != 0);
currentX=val[k + 5];
currentY=val[k + 6];
ctrlPointX=currentX;
ctrlPointY=currentY;
break;
}
previousCmd=cmd;
}
current[0]=currentX;
current[1]=currentY;
current[2]=ctrlPointX;
current[3]=ctrlPointY;
current[4]=currentSegmentStartX;
current[5]=currentSegmentStartY;
}",0.97037855206346
193648,"protected KeepalivePacketData(InetAddress srcAddress,int srcPort,InetAddress dstAddress,int dstPort,byte[] data) throws InvalidPacketException {
  this.srcAddress=srcAddress;
  this.dstAddress=dstAddress;
  this.srcPort=srcPort;
  this.dstPort=dstPort;
  this.data=data;
  if (srcAddress == null || dstAddress == null || !srcAddress.getClass().getName().equals(dstAddress.getClass().getName())) {
  }
  if (this.dstAddress instanceof Inet4Address) {
    this.protocol=OsConstants.ETH_P_IP;
  }
 else   if (this.dstAddress instanceof Inet6Address) {
    this.protocol=OsConstants.ETH_P_IPV6;
  }
 else {
    throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
  }
  if (!IpUtils.isValidUdpOrTcpPort(srcPort) || !IpUtils.isValidUdpOrTcpPort(dstPort)) {
    throw new InvalidPacketException(ERROR_INVALID_PORT);
  }
}","protected KeepalivePacketData(InetAddress srcAddress,int srcPort,InetAddress dstAddress,int dstPort,byte[] data) throws InvalidPacketException {
  this.srcAddress=srcAddress;
  this.dstAddress=dstAddress;
  this.srcPort=srcPort;
  this.dstPort=dstPort;
  this.data=data;
  if (srcAddress == null || dstAddress == null || !srcAddress.getClass().getName().equals(dstAddress.getClass().getName())) {
    throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
  }
  if (this.dstAddress instanceof Inet4Address) {
    this.protocol=OsConstants.ETH_P_IP;
  }
 else   if (this.dstAddress instanceof Inet6Address) {
    this.protocol=OsConstants.ETH_P_IPV6;
  }
 else {
    throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
  }
  if (!IpUtils.isValidUdpOrTcpPort(srcPort) || !IpUtils.isValidUdpOrTcpPort(dstPort)) {
    throw new InvalidPacketException(ERROR_INVALID_PORT);
  }
}",0.9625292740046838
193649,"/** 
 * Creates an IPsec NAT-T keepalive packet with the specified parameters.
 */
public static KeepalivePacketData nattKeepalivePacket(InetAddress srcAddress,int srcPort,InetAddress dstAddress,int dstPort) throws InvalidPacketException {
  if (!(srcAddress instanceof Inet4Address)) {
    throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
  }
  if (dstPort != NATT_PORT) {
    throw new InvalidPacketException(ERROR_INVALID_PORT);
  }
  int length=IPV4_HEADER_LENGTH + UDP_HEADER_LENGTH + 1;
  ByteBuffer buf=ByteBuffer.allocate(length);
  buf.order(ByteOrder.BIG_ENDIAN);
  buf.putShort((short)0x4500);
  buf.putShort((short)length);
  buf.putInt(0);
  buf.put((byte)64);
  buf.put((byte)OsConstants.IPPROTO_UDP);
  int ipChecksumOffset=buf.position();
  buf.putShort((short)0);
  buf.put(srcAddress.getAddress());
  buf.put(dstAddress.getAddress());
  buf.putShort((short)srcPort);
  buf.putShort((short)dstPort);
  buf.putShort((short)(length - 20));
  int udpChecksumOffset=buf.position();
  buf.putShort((short)0);
  buf.put((byte)0xff);
  buf.putShort(ipChecksumOffset,IpUtils.ipChecksum(buf,0));
  buf.putShort(udpChecksumOffset,IpUtils.udpChecksum(buf,0,IPV4_HEADER_LENGTH));
  return new KeepalivePacketData(srcAddress,srcPort,dstAddress,dstPort,buf.array());
}","/** 
 * Creates an IPsec NAT-T keepalive packet with the specified parameters.
 */
public static KeepalivePacketData nattKeepalivePacket(InetAddress srcAddress,int srcPort,InetAddress dstAddress,int dstPort) throws InvalidPacketException {
  if (!(srcAddress instanceof Inet4Address) || !(dstAddress instanceof Inet4Address)) {
    throw new InvalidPacketException(ERROR_INVALID_IP_ADDRESS);
  }
  if (dstPort != NATT_PORT) {
    throw new InvalidPacketException(ERROR_INVALID_PORT);
  }
  int length=IPV4_HEADER_LENGTH + UDP_HEADER_LENGTH + 1;
  ByteBuffer buf=ByteBuffer.allocate(length);
  buf.order(ByteOrder.BIG_ENDIAN);
  buf.putShort((short)0x4500);
  buf.putShort((short)length);
  buf.putInt(0);
  buf.put((byte)64);
  buf.put((byte)OsConstants.IPPROTO_UDP);
  int ipChecksumOffset=buf.position();
  buf.putShort((short)0);
  buf.put(srcAddress.getAddress());
  buf.put(dstAddress.getAddress());
  buf.putShort((short)srcPort);
  buf.putShort((short)dstPort);
  buf.putShort((short)(length - 20));
  int udpChecksumOffset=buf.position();
  buf.putShort((short)0);
  buf.put((byte)0xff);
  buf.putShort(ipChecksumOffset,IpUtils.ipChecksum(buf,0));
  buf.putShort(udpChecksumOffset,IpUtils.udpChecksum(buf,0,IPV4_HEADER_LENGTH));
  return new KeepalivePacketData(srcAddress,srcPort,dstAddress,dstPort,buf.array());
}",0.9842610364683302
193650,"public void startNattKeepalive(NetworkAgentInfo nai,int intervalSeconds,Messenger messenger,IBinder binder,String srcAddrString,int srcPort,String dstAddrString,int dstPort){
  InetAddress srcAddress, dstAddress;
  try {
    srcAddress=NetworkUtils.numericToInetAddress(srcAddrString);
    dstAddress=NetworkUtils.numericToInetAddress(dstAddrString);
  }
 catch (  IllegalArgumentException e) {
    notifyMessenger(messenger,NO_KEEPALIVE,ERROR_INVALID_IP_ADDRESS);
    return;
  }
  KeepalivePacketData packet;
  try {
    packet=KeepalivePacketData.nattKeepalivePacket(srcAddress,srcPort,dstAddress,NATT_PORT);
  }
 catch (  KeepalivePacketData.InvalidPacketException e) {
    notifyMessenger(messenger,NO_KEEPALIVE,e.error);
    return;
  }
  KeepaliveInfo ki=new KeepaliveInfo(messenger,binder,nai,packet,intervalSeconds);
  Log.d(TAG,""String_Node_Str"" + ki.toString());
  mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE,ki).sendToTarget();
}","public void startNattKeepalive(NetworkAgentInfo nai,int intervalSeconds,Messenger messenger,IBinder binder,String srcAddrString,int srcPort,String dstAddrString,int dstPort){
  if (nai == null) {
    notifyMessenger(messenger,NO_KEEPALIVE,ERROR_INVALID_NETWORK);
    return;
  }
  InetAddress srcAddress, dstAddress;
  try {
    srcAddress=NetworkUtils.numericToInetAddress(srcAddrString);
    dstAddress=NetworkUtils.numericToInetAddress(dstAddrString);
  }
 catch (  IllegalArgumentException e) {
    notifyMessenger(messenger,NO_KEEPALIVE,ERROR_INVALID_IP_ADDRESS);
    return;
  }
  KeepalivePacketData packet;
  try {
    packet=KeepalivePacketData.nattKeepalivePacket(srcAddress,srcPort,dstAddress,NATT_PORT);
  }
 catch (  KeepalivePacketData.InvalidPacketException e) {
    notifyMessenger(messenger,NO_KEEPALIVE,e.error);
    return;
  }
  KeepaliveInfo ki=new KeepaliveInfo(messenger,binder,nai,packet,intervalSeconds);
  Log.d(TAG,""String_Node_Str"" + ki.toString());
  mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE,ki).sendToTarget();
}",0.7449078564500485
193651,"public void handleStopKeepalive(NetworkAgentInfo nai,int slot,int reason){
  HashMap<Integer,KeepaliveInfo> networkKeepalives=mKeepalives.get(nai);
  if (networkKeepalives == null) {
    Log.e(TAG,""String_Node_Str"" + nai.name());
    return;
  }
  KeepaliveInfo ki=networkKeepalives.get(slot);
  if (ki == null) {
    Log.e(TAG,""String_Node_Str"" + slot + ""String_Node_Str""+ nai.name());
    return;
  }
  ki.stop(reason);
  networkKeepalives.remove(slot);
  if (networkKeepalives.isEmpty()) {
    mKeepalives.remove(nai);
  }
}","public void handleStopKeepalive(NetworkAgentInfo nai,int slot,int reason){
  String networkName=(nai == null) ? ""String_Node_Str"" : nai.name();
  HashMap<Integer,KeepaliveInfo> networkKeepalives=mKeepalives.get(nai);
  if (networkKeepalives == null) {
    Log.e(TAG,""String_Node_Str"" + networkName);
    return;
  }
  KeepaliveInfo ki=networkKeepalives.get(slot);
  if (ki == null) {
    Log.e(TAG,""String_Node_Str"" + slot + ""String_Node_Str""+ networkName);
    return;
  }
  ki.stop(reason);
  networkKeepalives.remove(slot);
  if (networkKeepalives.isEmpty()) {
    mKeepalives.remove(nai);
  }
}",0.9048888888888889
193652,"private int findFirstFreeSlot(NetworkAgentInfo nai){
  HashMap networkKeepalives=mKeepalives.get(nai);
  if (networkKeepalives == null) {
    networkKeepalives=new HashMap<Integer,KeepaliveInfo>();
    mKeepalives.put(nai,networkKeepalives);
  }
  int slot;
  for (slot=0; slot < networkKeepalives.size(); slot++) {
    if (networkKeepalives.get(slot) == null) {
      return slot;
    }
  }
  if (slot == 0)   slot=1;
  return slot;
}","private int findFirstFreeSlot(NetworkAgentInfo nai){
  HashMap networkKeepalives=mKeepalives.get(nai);
  if (networkKeepalives == null) {
    networkKeepalives=new HashMap<Integer,KeepaliveInfo>();
    mKeepalives.put(nai,networkKeepalives);
  }
  int slot;
  for (slot=1; slot <= networkKeepalives.size(); slot++) {
    if (networkKeepalives.get(slot) == null) {
      return slot;
    }
  }
  return slot;
}",0.9644549763033176
193653,"/** 
 * Handles copying a single file.
 * @param srcUri URI of the file to copy from.
 * @param dstUri URI of the *file* to copy to. Must be created beforehand.
 * @throws RemoteException
 */
private void copyFileHelper(Uri srcUri,Uri dstUri,int mode) throws RemoteException {
  CancellationSignal canceller=new CancellationSignal();
  ParcelFileDescriptor srcFile=null;
  ParcelFileDescriptor dstFile=null;
  InputStream src=null;
  OutputStream dst=null;
  IOException copyError=null;
  try {
    srcFile=mSrcClient.openFile(srcUri,""String_Node_Str"",canceller);
    dstFile=mDstClient.openFile(dstUri,""String_Node_Str"",canceller);
    src=new ParcelFileDescriptor.AutoCloseInputStream(srcFile);
    dst=new ParcelFileDescriptor.AutoCloseOutputStream(dstFile);
    byte[] buffer=new byte[8192];
    int len;
    while (!mIsCancelled && ((len=src.read(buffer)) != -1)) {
      dst.write(buffer,0,len);
      makeProgress(len);
    }
    srcFile.checkError();
  }
 catch (  IOException e) {
    copyError=e;
    try {
      dstFile.closeWithError(copyError.getMessage());
    }
 catch (    IOException closeError) {
      Log.e(TAG,""String_Node_Str"",closeError);
    }
  }
 finally {
    IoUtils.closeQuietly(src);
    IoUtils.closeQuietly(dst);
  }
  if (copyError != null) {
    Log.e(TAG,""String_Node_Str"" + srcUri.toString(),copyError);
    try {
      mFailedFiles.add(DocumentInfo.fromUri(getContentResolver(),srcUri));
    }
 catch (    FileNotFoundException ignore) {
      Log.w(TAG,""String_Node_Str"" + srcUri,copyError);
    }
  }
  if (copyError != null || mIsCancelled) {
    canceller.cancel();
    try {
      DocumentsContract.deleteDocument(mDstClient,dstUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + dstUri,e);
      throw e;
    }
  }
 else   if (mode == TRANSFER_MODE_MOVE) {
    try {
      DocumentsContract.deleteDocument(mSrcClient,srcUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + srcUri,e);
      throw e;
    }
  }
}","/** 
 * Handles copying a single file.
 * @param srcUri URI of the file to copy from.
 * @param dstUri URI of the *file* to copy to. Must be created beforehand.
 * @throws RemoteException
 */
private void copyFileHelper(Uri srcUri,Uri dstUri,int mode) throws RemoteException {
  CancellationSignal canceller=new CancellationSignal();
  ParcelFileDescriptor srcFile=null;
  ParcelFileDescriptor dstFile=null;
  InputStream src=null;
  OutputStream dst=null;
  IOException copyError=null;
  try {
    srcFile=mSrcClient.openFile(srcUri,""String_Node_Str"",canceller);
    dstFile=mDstClient.openFile(dstUri,""String_Node_Str"",canceller);
    src=new ParcelFileDescriptor.AutoCloseInputStream(srcFile);
    dst=new ParcelFileDescriptor.AutoCloseOutputStream(dstFile);
    byte[] buffer=new byte[8192];
    int len;
    while (!mIsCancelled && ((len=src.read(buffer)) != -1)) {
      dst.write(buffer,0,len);
      makeProgress(len);
    }
    srcFile.checkError();
  }
 catch (  IOException e) {
    copyError=e;
    try {
      DocumentInfo info=DocumentInfo.fromUri(getContentResolver(),srcUri);
      mFailedFiles.add(info);
      Log.e(TAG,""String_Node_Str"" + info.displayName + ""String_Node_Str""+ info.derivedUri+ ""String_Node_Str"",copyError);
    }
 catch (    FileNotFoundException ignore) {
      DocumentInfo info=new DocumentInfo();
      info.derivedUri=srcUri;
      info.displayName=""String_Node_Str"" + srcUri + ""String_Node_Str"";
      mFailedFiles.add(info);
      Log.e(TAG,""String_Node_Str"" + srcUri,copyError);
    }
    if (dstFile != null) {
      try {
        dstFile.closeWithError(copyError.getMessage());
      }
 catch (      IOException closeError) {
        Log.e(TAG,""String_Node_Str"",closeError);
      }
    }
  }
 finally {
    IoUtils.closeQuietly(src);
    IoUtils.closeQuietly(dst);
  }
  if (copyError != null || mIsCancelled) {
    canceller.cancel();
    try {
      DocumentsContract.deleteDocument(mDstClient,dstUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + dstUri,e);
      throw e;
    }
  }
 else   if (mode == TRANSFER_MODE_MOVE) {
    try {
      DocumentsContract.deleteDocument(mSrcClient,srcUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + srcUri,e);
      throw e;
    }
  }
}",0.7742085661080075
193654,"@Override protected void onHandleIntent(Intent intent){
  if (intent.hasExtra(EXTRA_CANCEL)) {
    handleCancel(intent);
    return;
  }
  final ArrayList<DocumentInfo> srcs=intent.getParcelableArrayListExtra(EXTRA_SRC_LIST);
  final DocumentStack stack=intent.getParcelableExtra(EXTRA_STACK);
  final int transferMode=intent.getIntExtra(EXTRA_TRANSFER_MODE,TRANSFER_MODE_COPY);
  try {
    mSrcClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),srcs.get(0).authority);
    mDstClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),stack.peek().authority);
    setupCopyJob(srcs,stack,transferMode);
    for (int i=0; i < srcs.size() && !mIsCancelled; ++i) {
      copy(srcs.get(i),stack.peek(),transferMode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    ContentProviderClient.releaseQuietly(mSrcClient);
    ContentProviderClient.releaseQuietly(mDstClient);
    mNotificationManager.cancel(mJobId,0);
    if (mFailedFiles.size() > 0) {
      final Context context=getApplicationContext();
      final Intent navigateIntent=new Intent(context,FilesActivity.class);
      navigateIntent.putExtra(EXTRA_STACK,(Parcelable)stack);
      navigateIntent.putExtra(EXTRA_FAILURE,FAILURE_COPY);
      navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST,mFailedFiles);
      final int titleResourceId=(transferMode == TRANSFER_MODE_COPY ? R.plurals.copy_error_notification_title : R.plurals.move_error_notification_title);
      final Notification.Builder errorBuilder=new Notification.Builder(this).setContentTitle(context.getResources().getQuantityString(titleResourceId,mFailedFiles.size(),mFailedFiles.size())).setContentText(getString(R.string.notification_touch_for_details)).setContentIntent(PendingIntent.getActivity(context,0,navigateIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setCategory(Notification.CATEGORY_ERROR).setSmallIcon(R.drawable.ic_menu_copy).setAutoCancel(true);
      mNotificationManager.notify(mJobId,0,errorBuilder.build());
    }
  }
}","@Override protected void onHandleIntent(Intent intent){
  if (intent.hasExtra(EXTRA_CANCEL)) {
    handleCancel(intent);
    return;
  }
  final ArrayList<DocumentInfo> srcs=intent.getParcelableArrayListExtra(EXTRA_SRC_LIST);
  final DocumentStack stack=intent.getParcelableExtra(EXTRA_STACK);
  final int transferMode=intent.getIntExtra(EXTRA_TRANSFER_MODE,TRANSFER_MODE_COPY);
  try {
    mSrcClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),srcs.get(0).authority);
    mDstClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),stack.peek().authority);
    setupCopyJob(srcs,stack,transferMode);
    for (int i=0; i < srcs.size() && !mIsCancelled; ++i) {
      copy(srcs.get(i),stack.peek(),transferMode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    ContentProviderClient.releaseQuietly(mSrcClient);
    ContentProviderClient.releaseQuietly(mDstClient);
    mNotificationManager.cancel(mJobId,0);
    if (mFailedFiles.size() > 0) {
      Log.e(TAG,mFailedFiles.size() + ""String_Node_Str"");
      final Context context=getApplicationContext();
      final Intent navigateIntent=new Intent(context,FilesActivity.class);
      navigateIntent.putExtra(EXTRA_STACK,(Parcelable)stack);
      navigateIntent.putExtra(EXTRA_FAILURE,FAILURE_COPY);
      navigateIntent.putExtra(EXTRA_TRANSFER_MODE,transferMode);
      navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST,mFailedFiles);
      final int titleResourceId=(transferMode == TRANSFER_MODE_COPY ? R.plurals.copy_error_notification_title : R.plurals.move_error_notification_title);
      final Notification.Builder errorBuilder=new Notification.Builder(this).setContentTitle(context.getResources().getQuantityString(titleResourceId,mFailedFiles.size(),mFailedFiles.size())).setContentText(getString(R.string.notification_touch_for_details)).setContentIntent(PendingIntent.getActivity(context,0,navigateIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setCategory(Notification.CATEGORY_ERROR).setSmallIcon(R.drawable.ic_menu_copy).setAutoCancel(true);
      mNotificationManager.notify(mJobId,0,errorBuilder.build());
    }
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
  }
}",0.907933621277563
193655,"/** 
 * Copies a the given documents to the given location.
 * @param srcInfo DocumentInfos for the documents to copy.
 * @param dstDirInfo The destination directory.
 * @throws RemoteException
 */
private void copy(DocumentInfo srcInfo,DocumentInfo dstDirInfo,int mode) throws RemoteException {
  final Uri dstUri=DocumentsContract.createDocument(mDstClient,dstDirInfo.derivedUri,srcInfo.mimeType,srcInfo.displayName);
  if (dstUri == null) {
    Log.e(TAG,""String_Node_Str"" + srcInfo.displayName);
    mFailedFiles.add(srcInfo);
    return;
  }
  if (Document.MIME_TYPE_DIR.equals(srcInfo.mimeType)) {
    copyDirectoryHelper(srcInfo.derivedUri,dstUri,mode);
  }
 else {
    copyFileHelper(srcInfo.derivedUri,dstUri,mode);
  }
}","/** 
 * Copies a the given documents to the given location.
 * @param srcInfo DocumentInfos for the documents to copy.
 * @param dstDirInfo The destination directory.
 * @throws RemoteException
 */
private void copy(DocumentInfo srcInfo,DocumentInfo dstDirInfo,int mode) throws RemoteException {
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + srcInfo.displayName + ""String_Node_Str""+ srcInfo.derivedUri+ ""String_Node_Str""+ ""String_Node_Str""+ dstDirInfo.displayName+ ""String_Node_Str""+ dstDirInfo.derivedUri+ ""String_Node_Str"");
  final Uri dstUri=DocumentsContract.createDocument(mDstClient,dstDirInfo.derivedUri,srcInfo.mimeType,srcInfo.displayName);
  if (dstUri == null) {
    Log.e(TAG,""String_Node_Str"" + srcInfo.displayName);
    mFailedFiles.add(srcInfo);
    return;
  }
  if (Document.MIME_TYPE_DIR.equals(srcInfo.mimeType)) {
    copyDirectoryHelper(srcInfo.derivedUri,dstUri,mode);
  }
 else {
    copyFileHelper(srcInfo.derivedUri,dstUri,mode);
  }
}",0.863905325443787
193656,"/** 
 * Handles copying a single file.
 * @param srcUri URI of the file to copy from.
 * @param dstUri URI of the *file* to copy to. Must be created beforehand.
 * @throws RemoteException
 */
private void copyFileHelper(Uri srcUri,Uri dstUri,int mode) throws RemoteException {
  CancellationSignal canceller=new CancellationSignal();
  ParcelFileDescriptor srcFile=null;
  ParcelFileDescriptor dstFile=null;
  InputStream src=null;
  OutputStream dst=null;
  IOException copyError=null;
  try {
    srcFile=mSrcClient.openFile(srcUri,""String_Node_Str"",canceller);
    dstFile=mDstClient.openFile(dstUri,""String_Node_Str"",canceller);
    src=new ParcelFileDescriptor.AutoCloseInputStream(srcFile);
    dst=new ParcelFileDescriptor.AutoCloseOutputStream(dstFile);
    byte[] buffer=new byte[8192];
    int len;
    while (!mIsCancelled && ((len=src.read(buffer)) != -1)) {
      dst.write(buffer,0,len);
      makeProgress(len);
    }
    srcFile.checkError();
  }
 catch (  IOException e) {
    copyError=e;
    try {
      dstFile.closeWithError(copyError.getMessage());
    }
 catch (    IOException closeError) {
      Log.e(TAG,""String_Node_Str"",closeError);
    }
  }
 finally {
    IoUtils.closeQuietly(src);
    IoUtils.closeQuietly(dst);
  }
  if (copyError != null) {
    Log.e(TAG,""String_Node_Str"" + srcUri.toString(),copyError);
    try {
      mFailedFiles.add(DocumentInfo.fromUri(getContentResolver(),srcUri));
    }
 catch (    FileNotFoundException ignore) {
      Log.w(TAG,""String_Node_Str"" + srcUri,copyError);
    }
  }
  if (copyError != null || mIsCancelled) {
    canceller.cancel();
    try {
      DocumentsContract.deleteDocument(mDstClient,dstUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + dstUri,e);
      throw e;
    }
  }
 else   if (mode == TRANSFER_MODE_MOVE) {
    try {
      DocumentsContract.deleteDocument(mSrcClient,srcUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + srcUri,e);
      throw e;
    }
  }
}","/** 
 * Handles copying a single file.
 * @param srcUri URI of the file to copy from.
 * @param dstUri URI of the *file* to copy to. Must be created beforehand.
 * @throws RemoteException
 */
private void copyFileHelper(Uri srcUri,Uri dstUri,int mode) throws RemoteException {
  CancellationSignal canceller=new CancellationSignal();
  ParcelFileDescriptor srcFile=null;
  ParcelFileDescriptor dstFile=null;
  InputStream src=null;
  OutputStream dst=null;
  IOException copyError=null;
  try {
    srcFile=mSrcClient.openFile(srcUri,""String_Node_Str"",canceller);
    dstFile=mDstClient.openFile(dstUri,""String_Node_Str"",canceller);
    src=new ParcelFileDescriptor.AutoCloseInputStream(srcFile);
    dst=new ParcelFileDescriptor.AutoCloseOutputStream(dstFile);
    byte[] buffer=new byte[8192];
    int len;
    while (!mIsCancelled && ((len=src.read(buffer)) != -1)) {
      dst.write(buffer,0,len);
      makeProgress(len);
    }
    srcFile.checkError();
  }
 catch (  IOException e) {
    copyError=e;
    try {
      DocumentInfo info=DocumentInfo.fromUri(getContentResolver(),srcUri);
      mFailedFiles.add(info);
      Log.e(TAG,""String_Node_Str"" + info.displayName + ""String_Node_Str""+ info.derivedUri+ ""String_Node_Str"",copyError);
    }
 catch (    FileNotFoundException ignore) {
      DocumentInfo info=new DocumentInfo();
      info.derivedUri=srcUri;
      info.displayName=""String_Node_Str"" + srcUri + ""String_Node_Str"";
      mFailedFiles.add(info);
      Log.e(TAG,""String_Node_Str"" + srcUri,copyError);
    }
    if (dstFile != null) {
      try {
        dstFile.closeWithError(copyError.getMessage());
      }
 catch (      IOException closeError) {
        Log.e(TAG,""String_Node_Str"",closeError);
      }
    }
  }
 finally {
    IoUtils.closeQuietly(src);
    IoUtils.closeQuietly(dst);
  }
  if (copyError != null || mIsCancelled) {
    canceller.cancel();
    try {
      DocumentsContract.deleteDocument(mDstClient,dstUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + dstUri,e);
      throw e;
    }
  }
 else   if (mode == TRANSFER_MODE_MOVE) {
    try {
      DocumentsContract.deleteDocument(mSrcClient,srcUri);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"" + srcUri,e);
      throw e;
    }
  }
}",0.7742085661080075
193657,"@Override protected void onHandleIntent(Intent intent){
  if (intent.hasExtra(EXTRA_CANCEL)) {
    handleCancel(intent);
    return;
  }
  final ArrayList<DocumentInfo> srcs=intent.getParcelableArrayListExtra(EXTRA_SRC_LIST);
  final DocumentStack stack=intent.getParcelableExtra(EXTRA_STACK);
  final int transferMode=intent.getIntExtra(EXTRA_TRANSFER_MODE,TRANSFER_MODE_COPY);
  try {
    mSrcClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),srcs.get(0).authority);
    mDstClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),stack.peek().authority);
    setupCopyJob(srcs,stack,transferMode);
    for (int i=0; i < srcs.size() && !mIsCancelled; ++i) {
      copy(srcs.get(i),stack.peek(),transferMode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    ContentProviderClient.releaseQuietly(mSrcClient);
    ContentProviderClient.releaseQuietly(mDstClient);
    mNotificationManager.cancel(mJobId,0);
    if (mFailedFiles.size() > 0) {
      final Context context=getApplicationContext();
      final Intent navigateIntent=new Intent(context,FilesActivity.class);
      navigateIntent.putExtra(EXTRA_STACK,(Parcelable)stack);
      navigateIntent.putExtra(EXTRA_FAILURE,FAILURE_COPY);
      navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST,mFailedFiles);
      final int titleResourceId=(transferMode == TRANSFER_MODE_COPY ? R.plurals.copy_error_notification_title : R.plurals.move_error_notification_title);
      final Notification.Builder errorBuilder=new Notification.Builder(this).setContentTitle(context.getResources().getQuantityString(titleResourceId,mFailedFiles.size(),mFailedFiles.size())).setContentText(getString(R.string.notification_touch_for_details)).setContentIntent(PendingIntent.getActivity(context,0,navigateIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setCategory(Notification.CATEGORY_ERROR).setSmallIcon(R.drawable.ic_menu_copy).setAutoCancel(true);
      mNotificationManager.notify(mJobId,0,errorBuilder.build());
    }
  }
}","@Override protected void onHandleIntent(Intent intent){
  if (intent.hasExtra(EXTRA_CANCEL)) {
    handleCancel(intent);
    return;
  }
  final ArrayList<DocumentInfo> srcs=intent.getParcelableArrayListExtra(EXTRA_SRC_LIST);
  final DocumentStack stack=intent.getParcelableExtra(EXTRA_STACK);
  final int transferMode=intent.getIntExtra(EXTRA_TRANSFER_MODE,TRANSFER_MODE_COPY);
  try {
    mSrcClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),srcs.get(0).authority);
    mDstClient=DocumentsApplication.acquireUnstableProviderOrThrow(getContentResolver(),stack.peek().authority);
    setupCopyJob(srcs,stack,transferMode);
    for (int i=0; i < srcs.size() && !mIsCancelled; ++i) {
      copy(srcs.get(i),stack.peek(),transferMode);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
 finally {
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
    ContentProviderClient.releaseQuietly(mSrcClient);
    ContentProviderClient.releaseQuietly(mDstClient);
    mNotificationManager.cancel(mJobId,0);
    if (mFailedFiles.size() > 0) {
      Log.e(TAG,mFailedFiles.size() + ""String_Node_Str"");
      final Context context=getApplicationContext();
      final Intent navigateIntent=new Intent(context,FilesActivity.class);
      navigateIntent.putExtra(EXTRA_STACK,(Parcelable)stack);
      navigateIntent.putExtra(EXTRA_FAILURE,FAILURE_COPY);
      navigateIntent.putExtra(EXTRA_TRANSFER_MODE,transferMode);
      navigateIntent.putParcelableArrayListExtra(EXTRA_SRC_LIST,mFailedFiles);
      final int titleResourceId=(transferMode == TRANSFER_MODE_COPY ? R.plurals.copy_error_notification_title : R.plurals.move_error_notification_title);
      final Notification.Builder errorBuilder=new Notification.Builder(this).setContentTitle(context.getResources().getQuantityString(titleResourceId,mFailedFiles.size(),mFailedFiles.size())).setContentText(getString(R.string.notification_touch_for_details)).setContentIntent(PendingIntent.getActivity(context,0,navigateIntent,PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_ONE_SHOT)).setCategory(Notification.CATEGORY_ERROR).setSmallIcon(R.drawable.ic_menu_copy).setAutoCancel(true);
      mNotificationManager.notify(mJobId,0,errorBuilder.build());
    }
    if (DEBUG)     Log.d(TAG,""String_Node_Str"");
  }
}",0.907933621277563
193658,"/** 
 * Copies a the given documents to the given location.
 * @param srcInfo DocumentInfos for the documents to copy.
 * @param dstDirInfo The destination directory.
 * @throws RemoteException
 */
private void copy(DocumentInfo srcInfo,DocumentInfo dstDirInfo,int mode) throws RemoteException {
  final Uri dstUri=DocumentsContract.createDocument(mDstClient,dstDirInfo.derivedUri,srcInfo.mimeType,srcInfo.displayName);
  if (dstUri == null) {
    Log.e(TAG,""String_Node_Str"" + srcInfo.displayName);
    mFailedFiles.add(srcInfo);
    return;
  }
  if (Document.MIME_TYPE_DIR.equals(srcInfo.mimeType)) {
    copyDirectoryHelper(srcInfo.derivedUri,dstUri,mode);
  }
 else {
    copyFileHelper(srcInfo.derivedUri,dstUri,mode);
  }
}","/** 
 * Copies a the given documents to the given location.
 * @param srcInfo DocumentInfos for the documents to copy.
 * @param dstDirInfo The destination directory.
 * @throws RemoteException
 */
private void copy(DocumentInfo srcInfo,DocumentInfo dstDirInfo,int mode) throws RemoteException {
  if (DEBUG)   Log.d(TAG,""String_Node_Str"" + srcInfo.displayName + ""String_Node_Str""+ srcInfo.derivedUri+ ""String_Node_Str""+ ""String_Node_Str""+ dstDirInfo.displayName+ ""String_Node_Str""+ dstDirInfo.derivedUri+ ""String_Node_Str"");
  final Uri dstUri=DocumentsContract.createDocument(mDstClient,dstDirInfo.derivedUri,srcInfo.mimeType,srcInfo.displayName);
  if (dstUri == null) {
    Log.e(TAG,""String_Node_Str"" + srcInfo.displayName);
    mFailedFiles.add(srcInfo);
    return;
  }
  if (Document.MIME_TYPE_DIR.equals(srcInfo.mimeType)) {
    copyDirectoryHelper(srcInfo.derivedUri,dstUri,mode);
  }
 else {
    copyFileHelper(srcInfo.derivedUri,dstUri,mode);
  }
}",0.863905325443787
193659,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193660,"void readFromFileLocked(){
  if (!mFile.exists()) {
    return;
  }
  final AtomicFile f=new AtomicFile(mFile);
  InputStream input=null;
  try {
    input=f.openRead();
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(input,StandardCharsets.UTF_8.name());
    int type;
    int depth=0;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
switch (type) {
case XmlPullParser.START_TAG:
        depth++;
      break;
case XmlPullParser.END_TAG:
    depth--;
default :
  continue;
}
final String tag=parser.getName();
if (depth == 1) {
if (!TAG_ROOT.equals(tag)) {
  Slog.e(TAG,""String_Node_Str"" + tag);
  return;
}
}
if (!readInner(parser,depth,tag)) {
return;
}
}
}
 catch (XmlPullParserException|IOException e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
IoUtils.closeQuietly(input);
}
}","void readFromFileLocked(){
  if (!mFile.exists()) {
    return;
  }
  final AtomicFile f=new AtomicFile(mFile);
  InputStream input=null;
  try {
    input=f.openRead();
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(input,StandardCharsets.UTF_8.name());
    int type;
    int depth=0;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
switch (type) {
case XmlPullParser.START_TAG:
        depth++;
      break;
case XmlPullParser.END_TAG:
    depth--;
default :
  continue;
}
final String tag=parser.getName();
if (depth == 1) {
if (!TAG_ROOT.equals(tag)) {
  Slog.e(TAG,""String_Node_Str"" + tag);
  return;
}
continue;
}
if (!readInner(parser,depth,tag)) {
return;
}
}
}
 catch (XmlPullParserException|IOException e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
IoUtils.closeQuietly(input);
}
}",0.9939975990396158
193661,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193662,"void readFromFileLocked(){
  if (!mFile.exists()) {
    return;
  }
  final AtomicFile f=new AtomicFile(mFile);
  InputStream input=null;
  try {
    input=f.openRead();
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(input,StandardCharsets.UTF_8.name());
    int type;
    int depth=0;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
switch (type) {
case XmlPullParser.START_TAG:
        depth++;
      break;
case XmlPullParser.END_TAG:
    depth--;
default :
  continue;
}
final String tag=parser.getName();
if (depth == 1) {
if (!TAG_ROOT.equals(tag)) {
  Slog.e(TAG,""String_Node_Str"" + tag);
  return;
}
}
if (!readInner(parser,depth,tag)) {
return;
}
}
}
 catch (XmlPullParserException|IOException e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
IoUtils.closeQuietly(input);
}
}","void readFromFileLocked(){
  if (!mFile.exists()) {
    return;
  }
  final AtomicFile f=new AtomicFile(mFile);
  InputStream input=null;
  try {
    input=f.openRead();
    final XmlPullParser parser=Xml.newPullParser();
    parser.setInput(input,StandardCharsets.UTF_8.name());
    int type;
    int depth=0;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT) {
switch (type) {
case XmlPullParser.START_TAG:
        depth++;
      break;
case XmlPullParser.END_TAG:
    depth--;
default :
  continue;
}
final String tag=parser.getName();
if (depth == 1) {
if (!TAG_ROOT.equals(tag)) {
  Slog.e(TAG,""String_Node_Str"" + tag);
  return;
}
continue;
}
if (!readInner(parser,depth,tag)) {
return;
}
}
}
 catch (XmlPullParserException|IOException e) {
Slog.e(TAG,""String_Node_Str"",e);
}
 finally {
IoUtils.closeQuietly(input);
}
}",0.9939975990396158
193663,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193664,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193665,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193666,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193667,"/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && win.isDrawnLw()) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}","/** 
 * {@inheritDoc} 
 */
@Override public void applyPostLayoutPolicyLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (DEBUG_LAYOUT)   Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.isVisibleOrBehindKeyguardLw());
  final int fl=PolicyControl.getWindowFlags(win,attrs);
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleLw() && attrs.type == TYPE_INPUT_METHOD) {
    mForcingShowNavBar=true;
    mForcingShowNavBarLayer=win.getSurfaceLayer();
  }
  if (attrs.type == TYPE_STATUS_BAR) {
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mForceStatusBarFromKeyguard=true;
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_FORCE_STATUS_BAR_VISIBLE_TRANSPARENT) != 0) {
      mForceStatusBarTransparent=true;
    }
  }
  boolean appWindow=attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type < FIRST_SYSTEM_WINDOW;
  final boolean showWhenLocked=(fl & FLAG_SHOW_WHEN_LOCKED) != 0;
  final boolean dismissKeyguard=(fl & FLAG_DISMISS_KEYGUARD) != 0;
  if (mTopFullscreenOpaqueWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw()) {
    if ((fl & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
        mForceStatusBarFromKeyguard=true;
      }
 else {
        mForceStatusBar=true;
      }
    }
    if ((attrs.privateFlags & PRIVATE_FLAG_KEYGUARD) != 0) {
      mShowingLockscreen=true;
    }
    if (attrs.type == TYPE_DREAM) {
      if (!mDreamingLockscreen || (win.isVisibleLw() && win.hasDrawnLw())) {
        mShowingDream=true;
        appWindow=true;
      }
    }
    final IApplicationToken appToken=win.getAppToken();
    if (appWindow && attached == null) {
      if (showWhenLocked) {
        mAppsToBeHidden.remove(appToken);
        mAppsThatDismissKeyguard.remove(appToken);
        if (mAppsToBeHidden.isEmpty()) {
          if (dismissKeyguard && !mKeyguardSecure) {
            mAppsThatDismissKeyguard.add(appToken);
          }
 else           if (win.isDrawnLw() || win.hasAppShownWindows()) {
            mWinShowWhenLocked=win;
            mHideLockScreen=true;
            mForceStatusBarFromKeyguard=false;
          }
        }
      }
 else       if (dismissKeyguard) {
        if (mKeyguardSecure) {
          mAppsToBeHidden.add(appToken);
        }
 else {
          mAppsToBeHidden.remove(appToken);
        }
        mAppsThatDismissKeyguard.add(appToken);
      }
 else {
        mAppsToBeHidden.add(appToken);
      }
      if (attrs.x == 0 && attrs.y == 0 && attrs.width == WindowManager.LayoutParams.MATCH_PARENT && attrs.height == WindowManager.LayoutParams.MATCH_PARENT) {
        if (DEBUG_LAYOUT)         Slog.v(TAG,""String_Node_Str"" + win);
        mTopFullscreenOpaqueWindowState=win;
        if (mTopFullscreenOpaqueOrDimmingWindowState == null) {
          mTopFullscreenOpaqueOrDimmingWindowState=win;
        }
        if (!mAppsThatDismissKeyguard.isEmpty() && mDismissKeyguard == DISMISS_KEYGUARD_NONE) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mDismissKeyguard=(mWinDismissingKeyguard == win && mSecureDismissingKeyguard == mKeyguardSecure) ? DISMISS_KEYGUARD_CONTINUE : DISMISS_KEYGUARD_START;
          mWinDismissingKeyguard=win;
          mSecureDismissingKeyguard=mKeyguardSecure;
          mForceStatusBarFromKeyguard=mShowingLockscreen && mKeyguardSecure;
        }
 else         if (mAppsToBeHidden.isEmpty() && showWhenLocked && (win.isDrawnLw() || win.hasAppShownWindows())) {
          if (DEBUG_LAYOUT)           Slog.v(TAG,""String_Node_Str"" + win);
          mHideLockScreen=true;
          mForceStatusBarFromKeyguard=false;
        }
        if ((fl & FLAG_ALLOW_LOCK_WHILE_SCREEN_ON) != 0) {
          mAllowLockscreenWhenOn=true;
        }
      }
      if (mWinShowWhenLocked != null && mWinShowWhenLocked.getAppToken() != win.getAppToken() && (attrs.flags & FLAG_SHOW_WHEN_LOCKED) == 0) {
        win.hideLw(false);
      }
    }
  }
 else   if (mTopFullscreenOpaqueWindowState == null && mWinShowWhenLocked == null) {
    if (win.isAnimatingLw() && appWindow && showWhenLocked&& mKeyguardHidden) {
      mHideLockScreen=true;
      mWinShowWhenLocked=win;
    }
  }
  if (mTopFullscreenOpaqueOrDimmingWindowState == null && win.isVisibleOrBehindKeyguardLw() && !win.isGoneForLayoutLw() && win.isDimming()) {
    mTopFullscreenOpaqueOrDimmingWindowState=win;
  }
}",0.993406093678945
193668,"public <T extends BandManagerHelper & BandModelHelper>BandSelectManager(T helper){
  mHelper=helper;
  mModel=new BandSelectModel(helper);
  mModel.addOnSelectionChangedListener(this);
}","public <T extends BandManagerHelper & BandModelHelper>BandSelectManager(T helper){
  mHelper=helper;
  mHelper.addOnScrollListener(this);
  mModel=new BandSelectModel(helper);
  mModel.addOnSelectionChangedListener(this);
}",0.9095354523227384
193669,"@Override public void run(){
  int pixelsPastView=0;
  if (mPointer.y <= 0) {
    pixelsPastView=mPointer.y - 1;
  }
 else   if (mPointer.y >= mHelper.getHeight() - 1) {
    pixelsPastView=mPointer.y - mHelper.getHeight() + 1;
  }
  if (!mIsActive || pixelsPastView == 0) {
    mScrollStartTime=NOT_SET;
    return;
  }
  if (mScrollStartTime == NOT_SET) {
    mScrollStartTime=System.currentTimeMillis();
  }
  final int numPixels=computeScrollDistance(pixelsPastView,System.currentTimeMillis() - mScrollStartTime);
  mHelper.scrollBy(numPixels);
  mOrigin.y-=numPixels;
  resizeBandSelectRectangle();
  mHelper.removeCallback(mViewScroller);
  mHelper.postRunnable(this);
}","@Override public void run(){
  int pixelsPastView=0;
  if (mPointer.y <= 0) {
    pixelsPastView=mPointer.y - 1;
  }
 else   if (mPointer.y >= mHelper.getHeight() - 1) {
    pixelsPastView=mPointer.y - mHelper.getHeight() + 1;
  }
  if (!mIsActive || pixelsPastView == 0) {
    mScrollStartTime=NOT_SET;
    return;
  }
  if (mScrollStartTime == NOT_SET) {
    mScrollStartTime=System.currentTimeMillis();
  }
  final int numPixels=computeScrollDistance(pixelsPastView,System.currentTimeMillis() - mScrollStartTime);
  mHelper.scrollBy(numPixels);
  mHelper.removeCallback(mViewScroller);
  mHelper.postRunnable(this);
}",0.8725868725868726
193670,"public <T extends BandManagerHelper & BandModelHelper>BandSelectManager(T helper){
  mHelper=helper;
  mModel=new BandSelectModel(helper);
  mModel.addOnSelectionChangedListener(this);
}","public <T extends BandManagerHelper & BandModelHelper>BandSelectManager(T helper){
  mHelper=helper;
  mHelper.addOnScrollListener(this);
  mModel=new BandSelectModel(helper);
  mModel.addOnSelectionChangedListener(this);
}",0.9095354523227384
193671,"@Override public void run(){
  int pixelsPastView=0;
  if (mPointer.y <= 0) {
    pixelsPastView=mPointer.y - 1;
  }
 else   if (mPointer.y >= mHelper.getHeight() - 1) {
    pixelsPastView=mPointer.y - mHelper.getHeight() + 1;
  }
  if (!mIsActive || pixelsPastView == 0) {
    mScrollStartTime=NOT_SET;
    return;
  }
  if (mScrollStartTime == NOT_SET) {
    mScrollStartTime=System.currentTimeMillis();
  }
  final int numPixels=computeScrollDistance(pixelsPastView,System.currentTimeMillis() - mScrollStartTime);
  mHelper.scrollBy(numPixels);
  mOrigin.y-=numPixels;
  resizeBandSelectRectangle();
  mHelper.removeCallback(mViewScroller);
  mHelper.postRunnable(this);
}","@Override public void run(){
  int pixelsPastView=0;
  if (mPointer.y <= 0) {
    pixelsPastView=mPointer.y - 1;
  }
 else   if (mPointer.y >= mHelper.getHeight() - 1) {
    pixelsPastView=mPointer.y - mHelper.getHeight() + 1;
  }
  if (!mIsActive || pixelsPastView == 0) {
    mScrollStartTime=NOT_SET;
    return;
  }
  if (mScrollStartTime == NOT_SET) {
    mScrollStartTime=System.currentTimeMillis();
  }
  final int numPixels=computeScrollDistance(pixelsPastView,System.currentTimeMillis() - mScrollStartTime);
  mHelper.scrollBy(numPixels);
  mHelper.removeCallback(mViewScroller);
  mHelper.postRunnable(this);
}",0.8725868725868726
193672,"/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}","/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}",0.9696969696969696
193673,"/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}","/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}",0.90481522956327
193674,"/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}","/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}",0.9696969696969696
193675,"/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}","/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}",0.90481522956327
193676,"/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}","/** 
 * Initializes and acquires the scene, creating various Android objects such as context, inflater, and parser.
 * @param timeout the time to wait if another rendering is happening.
 * @return whether the scene was prepared
 * @see #acquire(long)
 * @see #release()
 */
public Result init(long timeout){
  Result result=acquireLock(timeout);
  if (result != null) {
    return result;
  }
  HardwareConfig hardwareConfig=mParams.getHardwareConfig();
  DisplayMetrics metrics=new DisplayMetrics();
  metrics.densityDpi=metrics.noncompatDensityDpi=hardwareConfig.getDensity().getDpiValue();
  metrics.density=metrics.noncompatDensity=metrics.densityDpi / (float)DisplayMetrics.DENSITY_DEFAULT;
  metrics.scaledDensity=metrics.noncompatScaledDensity=metrics.density;
  metrics.widthPixels=metrics.noncompatWidthPixels=hardwareConfig.getScreenWidth();
  metrics.heightPixels=metrics.noncompatHeightPixels=hardwareConfig.getScreenHeight();
  metrics.xdpi=metrics.noncompatXdpi=hardwareConfig.getXdpi();
  metrics.ydpi=metrics.noncompatYdpi=hardwareConfig.getYdpi();
  RenderResources resources=mParams.getResources();
  mContext=new BridgeContext(mParams.getProjectKey(),metrics,resources,mParams.getAssets(),mParams.getLayoutlibCallback(),getConfiguration(),mParams.getTargetSdkVersion(),mParams.isRtlSupported());
  setUp();
  return SUCCESS.createResult();
}",0.9696969696969696
193677,"/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}","/** 
 * Sets up the session for rendering. <p/> The counterpart is   {@link #tearDown()}.
 */
private void setUp(){
  ParserFactory.setParserFactory(mParams.getLayoutlibCallback().getParserFactory());
  mContext.initResources();
  sCurrentContext=mContext;
  InputMethodManager.getInstance();
  LayoutLog currentLog=mParams.getLog();
  Bridge.setLog(currentLog);
  mContext.getRenderResources().setFrameworkResourceIdProvider(this);
  mContext.getRenderResources().setLogger(currentLog);
}",0.90481522956327
193678,"@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK:
case MODE_WAKE_AND_UNLOCK_PULSING:
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}","@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK_PULSING:
mPhoneStatusBar.updateMediaMetaData(false);
case MODE_WAKE_AND_UNLOCK:
mStatusBarWindowManager.setStatusBarFocusable(false);
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}",0.939538583929992
193679,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      boolean animate=mFingerprintUnlockController == null || (mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK);
      mIconController.setIconsDark(allowLight && light,animate);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9503731343283582
193680,"/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
        @Override public void run(){
          mBackdrop.setVisibility(View.GONE);
          mBackdropFront.animate().cancel();
          mBackdropBack.animate().cancel();
          mHandler.post(mHideBackdropFront);
        }
      }
);
      if (mKeyguardFadingAway) {
        mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
      }
    }
  }
}","/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      if (mFingerprintUnlockController.getMode() == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
        mBackdrop.setVisibility(View.GONE);
      }
 else {
        mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
          @Override public void run(){
            mBackdrop.setVisibility(View.GONE);
            mBackdropFront.animate().cancel();
            mBackdropBack.animate().cancel();
            mHandler.post(mHideBackdropFront);
          }
        }
);
        if (mKeyguardFadingAway) {
          mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
        }
      }
    }
  }
}",0.9547619047619048
193681,"@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}","@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway && duration > 0) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}",0.9706959706959708
193682,"public void setIconsDark(boolean dark){
  if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}","public void setIconsDark(boolean dark,boolean animate){
  if (!animate) {
    setIconTintInternal(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}",0.8966318234610917
193683,"@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          statusbar.appTransitionStarting(startTime,TRANSITION_DURATION);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}","@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          long duration=closeAnimation != null || openAnimation != null ? TRANSITION_DURATION : 0;
          statusbar.appTransitionStarting(startTime,duration);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}",0.8768328445747801
193684,"@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK:
case MODE_WAKE_AND_UNLOCK_PULSING:
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}","@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK_PULSING:
mPhoneStatusBar.updateMediaMetaData(false);
case MODE_WAKE_AND_UNLOCK:
mStatusBarWindowManager.setStatusBarFocusable(false);
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}",0.939538583929992
193685,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      boolean animate=mFingerprintUnlockController == null || (mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK);
      mIconController.setIconsDark(allowLight && light,animate);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9503731343283582
193686,"/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
        @Override public void run(){
          mBackdrop.setVisibility(View.GONE);
          mBackdropFront.animate().cancel();
          mBackdropBack.animate().cancel();
          mHandler.post(mHideBackdropFront);
        }
      }
);
      if (mKeyguardFadingAway) {
        mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
      }
    }
  }
}","/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      if (mFingerprintUnlockController.getMode() == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
        mBackdrop.setVisibility(View.GONE);
      }
 else {
        mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
          @Override public void run(){
            mBackdrop.setVisibility(View.GONE);
            mBackdropFront.animate().cancel();
            mBackdropBack.animate().cancel();
            mHandler.post(mHideBackdropFront);
          }
        }
);
        if (mKeyguardFadingAway) {
          mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
        }
      }
    }
  }
}",0.9547619047619048
193687,"@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}","@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway && duration > 0) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}",0.9706959706959708
193688,"public void setIconsDark(boolean dark){
  if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}","public void setIconsDark(boolean dark,boolean animate){
  if (!animate) {
    setIconTintInternal(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}",0.8966318234610917
193689,"@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          statusbar.appTransitionStarting(startTime,TRANSITION_DURATION);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}","@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          long duration=closeAnimation != null || openAnimation != null ? TRANSITION_DURATION : 0;
          statusbar.appTransitionStarting(startTime,duration);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}",0.8768328445747801
193690,"@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK:
case MODE_WAKE_AND_UNLOCK_PULSING:
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}","@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK_PULSING:
mPhoneStatusBar.updateMediaMetaData(false);
case MODE_WAKE_AND_UNLOCK:
mStatusBarWindowManager.setStatusBarFocusable(false);
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}",0.939538583929992
193691,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      boolean animate=mFingerprintUnlockController == null || (mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK);
      mIconController.setIconsDark(allowLight && light,animate);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9503731343283582
193692,"/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
        @Override public void run(){
          mBackdrop.setVisibility(View.GONE);
          mBackdropFront.animate().cancel();
          mBackdropBack.animate().cancel();
          mHandler.post(mHideBackdropFront);
        }
      }
);
      if (mKeyguardFadingAway) {
        mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
      }
    }
  }
}","/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      if (mFingerprintUnlockController.getMode() == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
        mBackdrop.setVisibility(View.GONE);
      }
 else {
        mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
          @Override public void run(){
            mBackdrop.setVisibility(View.GONE);
            mBackdropFront.animate().cancel();
            mBackdropBack.animate().cancel();
            mHandler.post(mHideBackdropFront);
          }
        }
);
        if (mKeyguardFadingAway) {
          mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
        }
      }
    }
  }
}",0.9547619047619048
193693,"@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}","@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway && duration > 0) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}",0.9706959706959708
193694,"public void setIconsDark(boolean dark){
  if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}","public void setIconsDark(boolean dark,boolean animate){
  if (!animate) {
    setIconTintInternal(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}",0.8966318234610917
193695,"@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          statusbar.appTransitionStarting(startTime,TRANSITION_DURATION);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}","@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          long duration=closeAnimation != null || openAnimation != null ? TRANSITION_DURATION : 0;
          statusbar.appTransitionStarting(startTime,duration);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}",0.8768328445747801
193696,"@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK:
case MODE_WAKE_AND_UNLOCK_PULSING:
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}","@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK_PULSING:
mPhoneStatusBar.updateMediaMetaData(false);
case MODE_WAKE_AND_UNLOCK:
mStatusBarWindowManager.setStatusBarFocusable(false);
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}",0.939538583929992
193697,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      boolean animate=mFingerprintUnlockController == null || (mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK);
      mIconController.setIconsDark(allowLight && light,animate);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9503731343283582
193698,"/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
        @Override public void run(){
          mBackdrop.setVisibility(View.GONE);
          mBackdropFront.animate().cancel();
          mBackdropBack.animate().cancel();
          mHandler.post(mHideBackdropFront);
        }
      }
);
      if (mKeyguardFadingAway) {
        mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
      }
    }
  }
}","/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      if (mFingerprintUnlockController.getMode() == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
        mBackdrop.setVisibility(View.GONE);
      }
 else {
        mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
          @Override public void run(){
            mBackdrop.setVisibility(View.GONE);
            mBackdropFront.animate().cancel();
            mBackdropBack.animate().cancel();
            mHandler.post(mHideBackdropFront);
          }
        }
);
        if (mKeyguardFadingAway) {
          mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
        }
      }
    }
  }
}",0.9547619047619048
193699,"@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}","@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway && duration > 0) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}",0.9706959706959708
193700,"public void setIconsDark(boolean dark){
  if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}","public void setIconsDark(boolean dark,boolean animate){
  if (!animate) {
    setIconTintInternal(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}",0.8966318234610917
193701,"@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          statusbar.appTransitionStarting(startTime,TRANSITION_DURATION);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}","@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          long duration=closeAnimation != null || openAnimation != null ? TRANSITION_DURATION : 0;
          statusbar.appTransitionStarting(startTime,duration);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}",0.8768328445747801
193702,"@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK:
case MODE_WAKE_AND_UNLOCK_PULSING:
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}","@Override public void onFingerprintAuthenticated(int userId){
  boolean wasDeviceInteractive=mUpdateMonitor.isDeviceInteractive();
  mMode=calculateMode();
  if (!wasDeviceInteractive) {
    if (DEBUG_FP_WAKELOCK) {
      Log.i(TAG,""String_Node_Str"");
    }
    mPowerManager.wakeUp(SystemClock.uptimeMillis());
  }
  releaseFingerprintWakeLock();
switch (mMode) {
case MODE_DISMISS_BOUNCER:
    mStatusBarKeyguardViewManager.notifyKeyguardAuthenticated(false);
  break;
case MODE_UNLOCK:
case MODE_SHOW_BOUNCER:
if (!wasDeviceInteractive) {
  mStatusBarKeyguardViewManager.notifyDeviceWakeUpRequested();
}
mStatusBarKeyguardViewManager.animateCollapsePanels(FINGERPRINT_COLLAPSE_SPEEDUP_FACTOR);
break;
case MODE_WAKE_AND_UNLOCK_PULSING:
mPhoneStatusBar.updateMediaMetaData(false);
case MODE_WAKE_AND_UNLOCK:
mStatusBarWindowManager.setStatusBarFocusable(false);
mDozeScrimController.abortPulsing();
mKeyguardViewMediator.onWakeAndUnlocking();
mScrimController.setWakeAndUnlocking();
if (mPhoneStatusBar.getNavigationBarView() != null) {
mPhoneStatusBar.getNavigationBarView().setWakeAndUnlocking(true);
}
break;
case MODE_ONLY_WAKE:
case MODE_NONE:
break;
}
if (mMode != MODE_WAKE_AND_UNLOCK_PULSING) {
mStatusBarWindowManager.setForceDozeBrightness(false);
}
mPhoneStatusBar.notifyFpAuthModeChanged();
}",0.939538583929992
193703,"@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      mIconController.setIconsDark(allowLight && light);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}","@Override public void setSystemUiVisibility(int vis,int mask){
  final int oldVal=mSystemUiVisibility;
  final int newVal=(oldVal & ~mask) | (vis & mask);
  final int diff=newVal ^ oldVal;
  if (DEBUG)   Log.d(TAG,String.format(""String_Node_Str"",Integer.toHexString(vis),Integer.toHexString(mask),Integer.toHexString(oldVal),Integer.toHexString(newVal),Integer.toHexString(diff)));
  if (diff != 0) {
    final boolean wasRecentsVisible=(mSystemUiVisibility & View.RECENT_APPS_VISIBLE) > 0;
    mSystemUiVisibility=newVal;
    if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
      final boolean lightsOut=(vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0;
      if (lightsOut) {
        animateCollapsePanels();
      }
      setAreThereNotifications();
    }
    if ((vis & View.STATUS_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.STATUS_BAR_UNHIDE;
      mNoAnimationOnNextBarModeChange=true;
    }
    final int sbMode=computeBarMode(oldVal,newVal,mStatusBarView.getBarTransitions(),View.STATUS_BAR_TRANSIENT,View.STATUS_BAR_TRANSLUCENT);
    final int nbMode=mNavigationBarView == null ? -1 : computeBarMode(oldVal,newVal,mNavigationBarView.getBarTransitions(),View.NAVIGATION_BAR_TRANSIENT,View.NAVIGATION_BAR_TRANSLUCENT);
    final boolean sbModeChanged=sbMode != -1;
    final boolean nbModeChanged=nbMode != -1;
    boolean checkBarModes=false;
    if (sbModeChanged && sbMode != mStatusBarMode) {
      mStatusBarMode=sbMode;
      checkBarModes=true;
    }
    if (nbModeChanged && nbMode != mNavigationBarMode) {
      mNavigationBarMode=nbMode;
      checkBarModes=true;
    }
    if (checkBarModes) {
      checkBarModes();
    }
    if (sbModeChanged || nbModeChanged) {
      if (mStatusBarMode == MODE_SEMI_TRANSPARENT || mNavigationBarMode == MODE_SEMI_TRANSPARENT) {
        scheduleAutohide();
      }
 else {
        cancelAutohide();
      }
    }
    if ((vis & View.NAVIGATION_BAR_UNHIDE) != 0) {
      mSystemUiVisibility&=~View.NAVIGATION_BAR_UNHIDE;
    }
    if ((diff & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0 || sbModeChanged) {
      boolean isTransparentBar=(mStatusBarMode == MODE_TRANSPARENT || mStatusBarMode == MODE_LIGHTS_OUT_TRANSPARENT);
      boolean allowLight=isTransparentBar && !mBatteryController.isPowerSave();
      boolean light=(vis & View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR) != 0;
      boolean animate=mFingerprintUnlockController == null || (mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK);
      mIconController.setIconsDark(allowLight && light,animate);
    }
    if (wasRecentsVisible) {
      mSystemUiVisibility|=View.RECENT_APPS_VISIBLE;
    }
    notifyUiVisibilityChanged(mSystemUiVisibility);
  }
}",0.9503731343283582
193704,"/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED)) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
        @Override public void run(){
          mBackdrop.setVisibility(View.GONE);
          mBackdropFront.animate().cancel();
          mBackdropBack.animate().cancel();
          mHandler.post(mHideBackdropFront);
        }
      }
);
      if (mKeyguardFadingAway) {
        mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
      }
    }
  }
}","/** 
 * Refresh or remove lockscreen artwork from media metadata.
 */
public void updateMediaMetaData(boolean metaDataChanged){
  if (!SHOW_LOCKSCREEN_MEDIA_ARTWORK)   return;
  if (mBackdrop == null)   return;
  if (mLaunchTransitionFadingAway) {
    mBackdrop.setVisibility(View.INVISIBLE);
    return;
  }
  if (DEBUG_MEDIA) {
    Log.v(TAG,""String_Node_Str"" + mMediaNotificationKey + ""String_Node_Str""+ mMediaMetadata+ ""String_Node_Str""+ metaDataChanged+ ""String_Node_Str""+ mState);
  }
  Bitmap artworkBitmap=null;
  if (mMediaMetadata != null) {
    artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ART);
    if (artworkBitmap == null) {
      artworkBitmap=mMediaMetadata.getBitmap(MediaMetadata.METADATA_KEY_ALBUM_ART);
    }
  }
  final boolean hasArtwork=artworkBitmap != null;
  if ((hasArtwork || DEBUG_MEDIA_FAKE_ARTWORK) && (mState == StatusBarState.KEYGUARD || mState == StatusBarState.SHADE_LOCKED) && mFingerprintUnlockController.getMode() != FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
    if (mBackdrop.getVisibility() != View.VISIBLE) {
      mBackdrop.setVisibility(View.VISIBLE);
      mBackdrop.animate().alpha(1f);
      metaDataChanged=true;
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
    if (metaDataChanged) {
      if (mBackdropBack.getDrawable() != null) {
        Drawable drawable=mBackdropBack.getDrawable().getConstantState().newDrawable().mutate();
        mBackdropFront.setImageDrawable(drawable);
        if (mScrimSrcModeEnabled) {
          mBackdropFront.getDrawable().mutate().setXfermode(mSrcOverXferMode);
        }
        mBackdropFront.setAlpha(1f);
        mBackdropFront.setVisibility(View.VISIBLE);
      }
 else {
        mBackdropFront.setVisibility(View.INVISIBLE);
      }
      if (DEBUG_MEDIA_FAKE_ARTWORK) {
        final int c=0xFF000000 | (int)(Math.random() * 0xFFFFFF);
        Log.v(TAG,String.format(""String_Node_Str"",c));
        mBackdropBack.setBackgroundColor(0xFFFFFFFF);
        mBackdropBack.setImageDrawable(new ColorDrawable(c));
      }
 else {
        mBackdropBack.setImageBitmap(artworkBitmap);
      }
      if (mScrimSrcModeEnabled) {
        mBackdropBack.getDrawable().mutate().setXfermode(mSrcXferMode);
      }
      if (mBackdropFront.getVisibility() == View.VISIBLE) {
        if (DEBUG_MEDIA) {
          Log.v(TAG,""String_Node_Str"" + mBackdropFront.getDrawable() + ""String_Node_Str""+ mBackdropBack.getDrawable());
        }
        mBackdropFront.animate().setDuration(250).alpha(0f).withEndAction(mHideBackdropFront);
      }
    }
  }
 else {
    if (mBackdrop.getVisibility() != View.GONE) {
      if (DEBUG_MEDIA) {
        Log.v(TAG,""String_Node_Str"");
      }
      if (mFingerprintUnlockController.getMode() == FingerprintUnlockController.MODE_WAKE_AND_UNLOCK_PULSING) {
        mBackdrop.setVisibility(View.GONE);
      }
 else {
        mBackdrop.animate().alpha(0.002f).setInterpolator(mBackdropInterpolator).setDuration(300).setStartDelay(0).withEndAction(new Runnable(){
          @Override public void run(){
            mBackdrop.setVisibility(View.GONE);
            mBackdropFront.animate().cancel();
            mBackdropBack.animate().cancel();
            mHandler.post(mHideBackdropFront);
          }
        }
);
        if (mKeyguardFadingAway) {
          mBackdrop.animate().setDuration(mKeyguardFadingAwayDuration / 2).setStartDelay(mKeyguardFadingAwayDelay).setInterpolator(mLinearInterpolator).start();
        }
      }
    }
  }
}",0.9547619047619048
193705,"@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}","@Override public void appTransitionStarting(long startTime,long duration){
  if (!mKeyguardFadingAway && duration > 0) {
    mIconController.appTransitionStarting(startTime,duration);
  }
  if (mIconPolicy != null) {
    mIconPolicy.appTransitionStarting(startTime,duration);
  }
}",0.9706959706959708
193706,"public void setIconsDark(boolean dark){
  if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}","public void setIconsDark(boolean dark,boolean animate){
  if (!animate) {
    setIconTintInternal(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionPending) {
    deferIconTintChange(dark ? 1.0f : 0.0f);
  }
 else   if (mTransitionDeferring) {
    animateIconTint(dark ? 1.0f : 0.0f,Math.max(0,mTransitionDeferringStartTime - SystemClock.uptimeMillis()),mTransitionDeferringDuration);
  }
 else {
    animateIconTint(dark ? 1.0f : 0.0f,0,DEFAULT_TINT_ANIMATION_DURATION);
  }
}",0.8966318234610917
193707,"@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          statusbar.appTransitionStarting(startTime,TRANSITION_DURATION);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}","@Override public void onAppTransitionStartingLocked(IBinder openToken,IBinder closeToken,final Animation openAnimation,final Animation closeAnimation){
  mHandler.post(new Runnable(){
    @Override public void run(){
      try {
        IStatusBarService statusbar=getStatusBarService();
        if (statusbar != null) {
          long startTime=calculateStatusBarTransitionStartTime(openAnimation,closeAnimation);
          long duration=closeAnimation != null || openAnimation != null ? TRANSITION_DURATION : 0;
          statusbar.appTransitionStarting(startTime,duration);
        }
      }
 catch (      RemoteException e) {
        Slog.e(mTag,""String_Node_Str"",e);
        mStatusBarService=null;
      }
    }
  }
);
}",0.8768328445747801
193708,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193709,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193710,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193711,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193712,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193713,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193714,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193715,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193716,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193717,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193718,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193719,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193720,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193721,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193722,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193723,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193724,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193725,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193726,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193727,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193728,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193729,"@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
  }
  return pae.extras;
}","@Override public Bundle getAssistContextExtras(int requestType){
  PendingAssistExtras pae=enqueueAssistContext(requestType,null,null,null,null,UserHandle.getCallingUserId(),null,PENDING_ASSIST_EXTRAS_TIMEOUT);
  if (pae == null) {
    return null;
  }
synchronized (pae) {
    while (!pae.haveResult) {
      try {
        pae.wait();
      }
 catch (      InterruptedException e) {
      }
    }
  }
synchronized (this) {
    buildAssistBundleLocked(pae,pae.result);
    mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
  }
  return pae.extras;
}",0.9982425307557118
193730,"public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}","public void reportAssistContextExtras(IBinder token,Bundle extras,AssistStructure structure,AssistContent content,Uri referrer){
  PendingAssistExtras pae=(PendingAssistExtras)token;
synchronized (pae) {
    pae.result=extras;
    pae.structure=structure;
    pae.content=content;
    if (referrer != null) {
      pae.extras.putParcelable(Intent.EXTRA_REFERRER,referrer);
    }
    pae.haveResult=true;
    pae.notifyAll();
    if (pae.intent == null && pae.receiver == null) {
      return;
    }
  }
  IResultReceiver sendReceiver=null;
  Bundle sendBundle=null;
synchronized (this) {
    buildAssistBundleLocked(pae,extras);
    boolean exists=mPendingAssistExtras.remove(pae);
    mUiHandler.removeCallbacks(pae);
    if (!exists) {
      return;
    }
    if ((sendReceiver=pae.receiver) != null) {
      sendBundle=new Bundle();
      sendBundle.putBundle(""String_Node_Str"",pae.extras);
      sendBundle.putParcelable(""String_Node_Str"",pae.structure);
      sendBundle.putParcelable(""String_Node_Str"",pae.content);
    }
  }
  if (sendReceiver != null) {
    try {
      sendReceiver.send(0,sendBundle);
    }
 catch (    RemoteException e) {
    }
    return;
  }
  long ident=Binder.clearCallingIdentity();
  try {
    pae.intent.replaceExtras(pae.extras);
    pae.intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_SINGLE_TOP | Intent.FLAG_ACTIVITY_CLEAR_TOP);
    closeSystemDialogs(""String_Node_Str"");
    try {
      mContext.startActivityAsUser(pae.intent,new UserHandle(pae.userHandle));
    }
 catch (    ActivityNotFoundException e) {
      Slog.w(TAG,""String_Node_Str"",e);
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
}",0.9994036970781156
193731,"private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}","private PendingAssistExtras enqueueAssistContext(int requestType,Intent intent,String hint,IResultReceiver receiver,IBinder activityToken,int userHandle,Bundle args,long timeout){
  enforceCallingPermission(android.Manifest.permission.GET_TOP_ACTIVITY_INFO,""String_Node_Str"");
synchronized (this) {
    ActivityRecord activity=getFocusedStack().topActivity();
    if (activity == null) {
      Slog.w(TAG,""String_Node_Str"");
      return null;
    }
    if (activity.app == null || activity.app.thread == null) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    if (activityToken != null) {
      ActivityRecord caller=ActivityRecord.forTokenLocked(activityToken);
      if (activity != caller) {
        Slog.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ activity);
        return null;
      }
    }
    PendingAssistExtras pae;
    Bundle extras=new Bundle();
    if (args != null) {
      extras.putAll(args);
    }
    extras.putString(Intent.EXTRA_ASSIST_PACKAGE,activity.packageName);
    extras.putInt(Intent.EXTRA_ASSIST_UID,activity.app.uid);
    pae=new PendingAssistExtras(activity,extras,intent,hint,receiver,userHandle);
    try {
      activity.app.thread.requestAssistContextExtras(activity.appToken,pae,requestType);
      mPendingAssistExtras.add(pae);
      mUiHandler.postDelayed(pae,timeout);
    }
 catch (    RemoteException e) {
      Slog.w(TAG,""String_Node_Str"" + activity);
      return null;
    }
    return pae;
  }
}",0.9993252361673416
193732,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193733,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193734,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193735,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193736,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193737,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193738,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193739,"private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}","private void dumpHelp(PrintWriter pw){
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
  pw.println(""String_Node_Str"");
}",0.9569190600522192
193740,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193741,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193742,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193743,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193744,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193745,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193746,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193747,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193748,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193749,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193750,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193751,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193752,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193753,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193754,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193755,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193756,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193757,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193758,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193759,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193760,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193761,"public AnyMotionDetector(AlarmManager am,PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mAlarmManager=am;
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}","public AnyMotionDetector(PowerManager pm,Handler handler,SensorManager sm,DeviceIdleCallback callback){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"");
  mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,TAG);
  mWakeLock.setReferenceCounted(false);
  mHandler=handler;
  mSensorManager=sm;
  mAccelSensor=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
  mMeasurementInProgress=false;
  mState=STATE_INACTIVE;
  mCallback=callback;
  mRunningStats=new RunningSignalStats();
  mNumSufficientSamples=(int)Math.ceil(((double)ORIENTATION_MEASUREMENT_DURATION_MILLIS / SAMPLING_INTERVAL_MILLIS));
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mNumSufficientSamples);
}",0.943952802359882
193762,"private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mDetectionStartTime=SystemClock.elapsedRealtime();
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}","private void startOrientationMeasurement(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress + ""String_Node_Str""+ (mAccelSensor != null));
  if (!mMeasurementInProgress && mAccelSensor != null) {
    if (mSensorManager.registerListener(mListener,mAccelSensor,SAMPLING_INTERVAL_MILLIS * 1000)) {
      mWakeLock.acquire();
      mMeasurementInProgress=true;
      mRunningStats.reset();
    }
    Message msg=Message.obtain(mHandler,mMeasurementTimeout);
    msg.setAsynchronous(true);
    mHandler.sendMessageDelayed(msg,ACCELEROMETER_DATA_TIMEOUT_MILLIS);
  }
}",0.9533169533169532
193763,"private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    if (mWakeLock.isHeld()) {
      mWakeLock.release();
    }
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}","private int stopOrientationMeasurementLocked(){
  if (DEBUG)   Slog.d(TAG,""String_Node_Str"" + mMeasurementInProgress);
  int status=RESULT_UNKNOWN;
  if (mMeasurementInProgress) {
    mSensorManager.unregisterListener(mListener);
    mHandler.removeCallbacks(mMeasurementTimeout);
    mWakeLock.release();
    long detectionEndTime=SystemClock.elapsedRealtime();
    mMeasurementInProgress=false;
    mPreviousGravityVector=mCurrentGravityVector;
    mCurrentGravityVector=mRunningStats.getRunningAverage();
    if (DEBUG) {
      Slog.d(TAG,""String_Node_Str"" + mRunningStats.toString());
      String currentGravityVectorString=(mCurrentGravityVector == null) ? ""String_Node_Str"" : mCurrentGravityVector.toString();
      String previousGravityVectorString=(mPreviousGravityVector == null) ? ""String_Node_Str"" : mPreviousGravityVector.toString();
      Slog.d(TAG,""String_Node_Str"" + currentGravityVectorString);
      Slog.d(TAG,""String_Node_Str"" + previousGravityVectorString);
    }
    mRunningStats.reset();
    status=getStationaryStatus();
    if (DEBUG)     Slog.d(TAG,""String_Node_Str"" + status);
    if (status != RESULT_UNKNOWN) {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + status);
      mState=STATE_INACTIVE;
    }
 else {
      if (DEBUG)       Slog.d(TAG,""String_Node_Str"" + ""String_Node_Str"" + ORIENTATION_MEASUREMENT_INTERVAL_MILLIS + ""String_Node_Str"");
      Message msg=Message.obtain(mHandler,mSensorRestart);
      msg.setAsynchronous(true);
      mHandler.sendMessageDelayed(msg,ORIENTATION_MEASUREMENT_INTERVAL_MILLIS);
    }
  }
  return status;
}",0.9819201995012468
193764,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193765,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193766,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193767,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193768,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193769,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193770,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193771,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193772,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193773,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193774,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193775,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193776,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193777,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193778,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193779,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193780,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193781,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193782,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193783,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193784,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193785,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193786,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193787,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193788,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193789,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193790,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193791,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193792,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193793,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193794,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193795,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193796,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193797,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193798,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193799,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193800,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193801,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193802,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193803,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193804,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193805,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193806,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193807,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193808,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193809,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193810,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193811,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193812,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193813,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  WindowInsets insets=getRootWindowInsets();
  int systemMargin=insets.getSystemWindowInsetTop();
  final int leftPos=getPaddingLeft();
  final int rightPos=right - left - getPaddingRight();
  final int topPos=getPaddingTop();
  final int bottomPos=bottom - top - getPaddingBottom();
  final int width=rightPos - leftPos;
  final View caption=getChildAt(0);
  updateElevation();
  mAllowUpdateElevation=true;
  final int captionHeight=(isFillingScreen() || !mShowDecor) ? 0 : caption.getMeasuredHeight();
  caption.layout(leftPos,topPos + systemMargin,leftPos + width,topPos + systemMargin + captionHeight);
  if (getChildCount() > 1) {
    getChildAt(1).layout(leftPos,topPos + captionHeight,leftPos + width,bottomPos);
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  updateElevation();
  mAllowUpdateElevation=true;
  super.onLayout(changed,left,top,right,bottom);
}",0.3535253227408143
193814,"@Override public void addView(View child,int index,LayoutParams params){
  if (index >= 2 || getChildCount() >= 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  super.addView(child,index,params);
}","@Override public void addView(View child,int index,ViewGroup.LayoutParams params){
  if (index >= 2 || getChildCount() >= 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  super.addView(child,index,params);
}",0.9772727272727272
193815,"public void setPhoneWindow(PhoneWindow owner,boolean showDecor,boolean windowHasShadow){
  mOwner=owner;
  mWindowHasShadow=windowHasShadow;
  mShowDecor=showDecor;
  if (mWindowHasShadow) {
    initializeElevation();
  }
  mOwner.getDecorView().setOutlineProvider(ViewOutlineProvider.BOUNDS);
  findViewById(R.id.maximize_window).setOnClickListener(this);
  findViewById(R.id.close_window).setOnClickListener(this);
}","public void setPhoneWindow(PhoneWindow owner,boolean showDecor,boolean windowHasShadow){
  mOwner=owner;
  mWindowHasShadow=windowHasShadow;
  mShowDecor=showDecor;
  updateCaptionVisibility();
  if (mWindowHasShadow) {
    initializeElevation();
  }
  mOwner.getDecorView().setOutlineProvider(ViewOutlineProvider.BOUNDS);
  findViewById(R.id.maximize_window).setOnClickListener(this);
  findViewById(R.id.close_window).setOnClickListener(this);
}",0.9664739884393064
193816,"/** 
 * The phone window configuration has changed and the decor needs to be updated.
 * @param showDecor True if the decor should be shown.
 * @param windowHasShadow True when the window should show a shadow.
 */
public void phoneWindowUpdated(boolean showDecor,boolean windowHasShadow){
  mShowDecor=showDecor;
  if (windowHasShadow != mWindowHasShadow) {
    mWindowHasShadow=windowHasShadow;
    initializeElevation();
  }
}","/** 
 * The phone window configuration has changed and the decor needs to be updated.
 * @param showDecor True if the decor should be shown.
 * @param windowHasShadow True when the window should show a shadow.
 */
public void phoneWindowUpdated(boolean showDecor,boolean windowHasShadow){
  mShowDecor=showDecor;
  updateCaptionVisibility();
  if (windowHasShadow != mWindowHasShadow) {
    mWindowHasShadow=windowHasShadow;
    initializeElevation();
  }
}",0.7322033898305085
193817,"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  WindowInsets insets=getRootWindowInsets();
  int systemMargin=insets.getSystemWindowInsetTop();
  final int leftPos=getPaddingLeft();
  final int rightPos=right - left - getPaddingRight();
  final int topPos=getPaddingTop();
  final int bottomPos=bottom - top - getPaddingBottom();
  final int width=rightPos - leftPos;
  final View caption=getChildAt(0);
  updateElevation();
  mAllowUpdateElevation=true;
  final int captionHeight=(isFillingScreen() || !mShowDecor) ? 0 : caption.getMeasuredHeight();
  caption.layout(leftPos,topPos + systemMargin,leftPos + width,topPos + systemMargin + captionHeight);
  if (getChildCount() > 1) {
    getChildAt(1).layout(leftPos,topPos + captionHeight,leftPos + width,bottomPos);
  }
}","@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  updateElevation();
  mAllowUpdateElevation=true;
  super.onLayout(changed,left,top,right,bottom);
}",0.3535253227408143
193818,"@Override public void addView(View child,int index,LayoutParams params){
  if (index >= 2 || getChildCount() >= 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  super.addView(child,index,params);
}","@Override public void addView(View child,int index,ViewGroup.LayoutParams params){
  if (index >= 2 || getChildCount() >= 2) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  super.addView(child,index,params);
}",0.9772727272727272
193819,"public void setPhoneWindow(PhoneWindow owner,boolean showDecor,boolean windowHasShadow){
  mOwner=owner;
  mWindowHasShadow=windowHasShadow;
  mShowDecor=showDecor;
  if (mWindowHasShadow) {
    initializeElevation();
  }
  mOwner.getDecorView().setOutlineProvider(ViewOutlineProvider.BOUNDS);
  findViewById(R.id.maximize_window).setOnClickListener(this);
  findViewById(R.id.close_window).setOnClickListener(this);
}","public void setPhoneWindow(PhoneWindow owner,boolean showDecor,boolean windowHasShadow){
  mOwner=owner;
  mWindowHasShadow=windowHasShadow;
  mShowDecor=showDecor;
  updateCaptionVisibility();
  if (mWindowHasShadow) {
    initializeElevation();
  }
  mOwner.getDecorView().setOutlineProvider(ViewOutlineProvider.BOUNDS);
  findViewById(R.id.maximize_window).setOnClickListener(this);
  findViewById(R.id.close_window).setOnClickListener(this);
}",0.9664739884393064
193820,"/** 
 * The phone window configuration has changed and the decor needs to be updated.
 * @param showDecor True if the decor should be shown.
 * @param windowHasShadow True when the window should show a shadow.
 */
public void phoneWindowUpdated(boolean showDecor,boolean windowHasShadow){
  mShowDecor=showDecor;
  if (windowHasShadow != mWindowHasShadow) {
    mWindowHasShadow=windowHasShadow;
    initializeElevation();
  }
}","/** 
 * The phone window configuration has changed and the decor needs to be updated.
 * @param showDecor True if the decor should be shown.
 * @param windowHasShadow True when the window should show a shadow.
 */
public void phoneWindowUpdated(boolean showDecor,boolean windowHasShadow){
  mShowDecor=showDecor;
  updateCaptionVisibility();
  if (windowHasShadow != mWindowHasShadow) {
    mWindowHasShadow=windowHasShadow;
    initializeElevation();
  }
}",0.7322033898305085
193821,"@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}","@Override public void revokeRuntimePermission(String packageName,String name,int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REVOKE_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int appId;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    SettingBase sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.revokeInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    if (permissionsState.revokeRuntimePermission(bp,userId) == PermissionsState.PERMISSION_OPERATION_FAILURE) {
      return;
    }
    mOnPermissionChangeListeners.onPermissionsChanged(pkg.applicationInfo.uid);
    mSettings.writeRuntimePermissionsForUserLPr(userId,true);
    appId=UserHandle.getAppId(pkg.applicationInfo.uid);
  }
  killUid(appId,userId,KILL_APP_REASON_PERMISSIONS_REVOKED);
}",0.9178581440986824
193822,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.DUMP);
    return;
  }
  DumpState dumpState=new DumpState();
  boolean fullPreferred=false;
  boolean checkin=false;
  String packageName=null;
  ArraySet<String> permissionNames=null;
  int opti=0;
  while (opti < args.length) {
    String opt=args[opti];
    if (opt == null || opt.length() <= 0 || opt.charAt(0) != '-') {
      break;
    }
    opti++;
    if (""String_Node_Str"".equals(opt)) {
    }
 else     if (""String_Node_Str"".equals(opt)) {
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      pw.println(""String_Node_Str"");
      return;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      checkin=true;
    }
 else     if (""String_Node_Str"".equals(opt)) {
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else {
      pw.println(""String_Node_Str"" + opt + ""String_Node_Str"");
    }
  }
  if (opti < args.length) {
    String cmd=args[opti];
    opti++;
    if (""String_Node_Str"".equals(cmd) || cmd.contains(""String_Node_Str"")) {
      packageName=cmd;
      dumpState.setOptionEnabled(DumpState.OPTION_SHOW_FILTERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String perm=args[opti];
      opti++;
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      String pkg=args[opti];
      opti++;
      int user=UserHandle.getUserId(Binder.getCallingUid());
      if (opti < args.length) {
        try {
          user=Integer.parseInt(args[opti]);
        }
 catch (        NumberFormatException e) {
          pw.println(""String_Node_Str"" + args[opti]);
          return;
        }
      }
      pw.println(checkPermission(perm,pkg,user));
      return;
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_LIBS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_FEATURES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_RESOLVERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PERMISSIONS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      if (opti >= args.length) {
        pw.println(""String_Node_Str"");
        return;
      }
      permissionNames=new ArraySet<>();
      while (opti < args.length) {
        permissionNames.add(args[opti]);
        opti++;
      }
      dumpState.setDump(DumpState.DUMP_PERMISSIONS | DumpState.DUMP_PACKAGES | DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PREFERRED_XML);
      if (opti < args.length && ""String_Node_Str"".equals(args[opti])) {
        fullPreferred=true;
        opti++;
      }
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_DOMAIN_PREFERRED);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PACKAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_SHARED_USERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_PROVIDERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_MESSAGES);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INTENT_FILTER_VERIFIERS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_VERSION);
    }
 else     if (""String_Node_Str"".equals(cmd) || ""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_KEYSETS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
      dumpState.setDump(DumpState.DUMP_INSTALLS);
    }
 else     if (""String_Node_Str"".equals(cmd)) {
synchronized (mPackages) {
        mSettings.writeLPr();
        pw.println(""String_Node_Str"");
        return;
      }
    }
  }
  if (checkin) {
    pw.println(""String_Node_Str"");
  }
synchronized (mPackages) {
    if (dumpState.isDumping(DumpState.DUMP_VERSION) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        mSettings.dumpVersionLPr(new IndentingPrintWriter(pw,""String_Node_Str""));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_VERIFIERS) && packageName == null) {
      if (!checkin) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.print(getPackageUid(mRequiredVerifierPackage,0));
        pw.println(""String_Node_Str"");
      }
 else       if (mRequiredVerifierPackage != null) {
        pw.print(""String_Node_Str"");
        pw.print(mRequiredVerifierPackage);
        pw.print(""String_Node_Str"");
        pw.println(getPackageUid(mRequiredVerifierPackage,0));
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_INTENT_FILTER_VERIFIERS) && packageName == null) {
      if (mIntentFilterVerifierComponent != null) {
        String verifierPackageName=mIntentFilterVerifierComponent.getPackageName();
        if (!checkin) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.print(getPackageUid(verifierPackageName,0));
          pw.println(""String_Node_Str"");
        }
 else         if (verifierPackageName != null) {
          pw.print(""String_Node_Str"");
          pw.print(verifierPackageName);
          pw.print(""String_Node_Str"");
          pw.println(getPackageUid(verifierPackageName,0));
        }
      }
 else {
        pw.println();
        pw.println(""String_Node_Str"");
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_LIBS) && packageName == null) {
      boolean printedHeader=false;
      final Iterator<String> it=mSharedLibraries.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        SharedLibraryEntry ent=mSharedLibraries.get(name);
        if (!checkin) {
          if (!printedHeader) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
            printedHeader=true;
          }
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.print(name);
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
        if (ent.path != null) {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.path);
          }
        }
 else {
          if (!checkin) {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
 else {
            pw.print(""String_Node_Str"");
            pw.print(ent.apk);
          }
        }
        pw.println();
      }
    }
    if (dumpState.isDumping(DumpState.DUMP_FEATURES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      if (!checkin) {
        pw.println(""String_Node_Str"");
      }
      Iterator<String> it=mAvailableFeatures.keySet().iterator();
      while (it.hasNext()) {
        String name=it.next();
        if (!checkin) {
          pw.print(""String_Node_Str"");
        }
 else {
          pw.print(""String_Node_Str"");
        }
        pw.println(name);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_RESOLVERS)) {
      if (mActivities.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mReceivers.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mServices.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
      if (mProviders.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" : ""String_Node_Str"",""String_Node_Str"",packageName,dumpState.isOptionEnabled(DumpState.OPTION_SHOW_FILTERS),true)) {
        dumpState.setTitlePrinted(true);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED)) {
      for (int i=0; i < mSettings.mPreferredActivities.size(); i++) {
        PreferredIntentResolver pir=mSettings.mPreferredActivities.valueAt(i);
        int user=mSettings.mPreferredActivities.keyAt(i);
        if (pir.dump(pw,dumpState.getTitlePrinted() ? ""String_Node_Str"" + user + ""String_Node_Str"" : ""String_Node_Str"" + user + ""String_Node_Str"",""String_Node_Str"",packageName,true,false)) {
          dumpState.setTitlePrinted(true);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PREFERRED_XML)) {
      pw.flush();
      FileOutputStream fout=new FileOutputStream(fd);
      BufferedOutputStream str=new BufferedOutputStream(fout);
      XmlSerializer serializer=new FastXmlSerializer();
      try {
        serializer.setOutput(str,StandardCharsets.UTF_8.name());
        serializer.startDocument(null,true);
        serializer.setFeature(""String_Node_Str"",true);
        mSettings.writePreferredActivitiesLPr(serializer,0,fullPreferred);
        serializer.endDocument();
        serializer.flush();
      }
 catch (      IllegalArgumentException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IllegalStateException e) {
        pw.println(""String_Node_Str"" + e);
      }
catch (      IOException e) {
        pw.println(""String_Node_Str"" + e);
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_DOMAIN_PREFERRED) && packageName == null) {
      pw.println();
      int count=mSettings.mPackages.size();
      if (count == 0) {
        pw.println(""String_Node_Str"");
        pw.println();
      }
 else {
        final String prefix=""String_Node_Str"";
        Collection<PackageSetting> allPackageSettings=mSettings.mPackages.values();
        if (allPackageSettings.size() == 0) {
          pw.println(""String_Node_Str"");
          pw.println();
        }
 else {
          pw.println(""String_Node_Str"");
          pw.println();
          count=0;
          for (          PackageSetting ps : allPackageSettings) {
            IntentFilterVerificationInfo ivi=ps.getIntentFilterVerificationInfo();
            if (ivi == null || ivi.getPackageName() == null)             continue;
            pw.println(prefix + ""String_Node_Str"" + ivi.getPackageName());
            pw.println(prefix + ""String_Node_Str"" + ivi.getDomainsString());
            pw.println(prefix + ""String_Node_Str"" + ivi.getStatusString());
            pw.println();
            count++;
          }
          if (count == 0) {
            pw.println(prefix + ""String_Node_Str"");
            pw.println();
          }
          for (          int userId : sUserManager.getUserIds()) {
            pw.println(""String_Node_Str"" + userId + ""String_Node_Str"");
            pw.println();
            count=0;
            for (            PackageSetting ps : allPackageSettings) {
              final long status=ps.getDomainVerificationStatusForUser(userId);
              if (status >> 32 == INTENT_FILTER_DOMAIN_VERIFICATION_STATUS_UNDEFINED) {
                continue;
              }
              pw.println(prefix + ""String_Node_Str"" + ps.name);
              pw.println(prefix + ""String_Node_Str"" + dumpDomainString(ps.name));
              String statusStr=IntentFilterVerificationInfo.getStatusStringFromValue(status);
              pw.println(prefix + ""String_Node_Str"" + statusStr);
              pw.println();
              count++;
            }
            if (count == 0) {
              pw.println(prefix + ""String_Node_Str"");
              pw.println();
            }
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PERMISSIONS)) {
      mSettings.dumpPermissionsLPr(pw,packageName,permissionNames,dumpState);
      if (packageName == null && permissionNames == null) {
        for (int iperm=0; iperm < mAppOpPermissionPackages.size(); iperm++) {
          if (iperm == 0) {
            if (dumpState.onTitlePrinted())             pw.println();
            pw.println(""String_Node_Str"");
          }
          pw.print(""String_Node_Str"");
          pw.print(mAppOpPermissionPackages.keyAt(iperm));
          pw.println(""String_Node_Str"");
          ArraySet<String> pkgs=mAppOpPermissionPackages.valueAt(iperm);
          for (int ipkg=0; ipkg < pkgs.size(); ipkg++) {
            pw.print(""String_Node_Str"");
            pw.println(pkgs.valueAt(ipkg));
          }
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_PROVIDERS)) {
      boolean printedSomething=false;
      for (      PackageParser.Provider p : mProviders.mProviders.values()) {
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        p.printComponentShortName(pw);
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
      }
      printedSomething=false;
      for (      Map.Entry<String,PackageParser.Provider> entry : mProvidersByAuthority.entrySet()) {
        PackageParser.Provider p=entry.getValue();
        if (packageName != null && !packageName.equals(p.info.packageName)) {
          continue;
        }
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
        pw.print(entry.getKey());
        pw.println(""String_Node_Str"");
        pw.print(""String_Node_Str"");
        pw.println(p.toString());
        if (p.info != null && p.info.applicationInfo != null) {
          final String appInfo=p.info.applicationInfo.toString();
          pw.print(""String_Node_Str"");
          pw.println(appInfo);
        }
      }
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_KEYSETS)) {
      mSettings.mKeySetManagerService.dumpLPr(pw,packageName,dumpState);
    }
    if (dumpState.isDumping(DumpState.DUMP_PACKAGES)) {
      mSettings.dumpPackagesLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (dumpState.isDumping(DumpState.DUMP_SHARED_USERS)) {
      mSettings.dumpSharedUsersLPr(pw,packageName,permissionNames,dumpState,checkin);
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_INSTALLS) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mInstallerService.dump(new IndentingPrintWriter(pw,""String_Node_Str"",120));
    }
    if (!checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES) && packageName == null) {
      if (dumpState.onTitlePrinted())       pw.println();
      mSettings.dumpReadMessagesLPr(pw,dumpState);
      pw.println();
      pw.println(""String_Node_Str"");
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
    if (checkin && dumpState.isDumping(DumpState.DUMP_MESSAGES)) {
      BufferedReader in=null;
      String line=null;
      try {
        in=new BufferedReader(new FileReader(getSettingsProblemFile()));
        while ((line=in.readLine()) != null) {
          if (line.contains(""String_Node_Str""))           continue;
          pw.print(""String_Node_Str"");
          pw.println(line);
        }
      }
 catch (      IOException ignored) {
      }
 finally {
        IoUtils.closeQuietly(in);
      }
    }
  }
}",0.9798527702440916
193823,"@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimePermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}","@Override public void grantRuntimePermission(String packageName,String name,final int userId){
  if (!sUserManager.exists(userId)) {
    Log.e(TAG,""String_Node_Str"" + userId);
    return;
  }
  mContext.enforceCallingOrSelfPermission(android.Manifest.permission.GRANT_RUNTIME_PERMISSIONS,""String_Node_Str"");
  enforceCrossUserPermission(Binder.getCallingUid(),userId,true,false,""String_Node_Str"");
  final int uid;
  final SettingBase sb;
synchronized (mPackages) {
    final PackageParser.Package pkg=mPackages.get(packageName);
    if (pkg == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final BasePermission bp=mSettings.mPermissions.get(name);
    if (bp == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + name);
    }
    enforceDeclaredAsUsedAndRuntimeOrDevelopmentPermission(pkg,bp);
    uid=UserHandle.getUid(userId,pkg.applicationInfo.uid);
    sb=(SettingBase)pkg.mExtras;
    if (sb == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + packageName);
    }
    final PermissionsState permissionsState=sb.getPermissionsState();
    final int flags=permissionsState.getPermissionFlags(name,userId);
    if ((flags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
      throw new SecurityException(""String_Node_Str"" + name + ""String_Node_Str""+ packageName);
    }
    if (bp.isDevelopment()) {
      if (permissionsState.grantInstallPermission(bp) != PermissionsState.PERMISSION_OPERATION_FAILURE) {
        scheduleWriteSettingsLocked();
      }
      return;
    }
    final int result=permissionsState.grantRuntimePermission(bp,userId);
switch (result) {
case PermissionsState.PERMISSION_OPERATION_FAILURE:
{
        return;
      }
case PermissionsState.PERMISSION_OPERATION_SUCCESS_GIDS_CHANGED:
{
      final int appId=UserHandle.getAppId(pkg.applicationInfo.uid);
      mHandler.post(new Runnable(){
        @Override public void run(){
          killUid(appId,userId,KILL_APP_REASON_GIDS_CHANGED);
        }
      }
);
    }
  break;
}
mOnPermissionChangeListeners.onPermissionsChanged(uid);
mSettings.writeRuntimePermissionsForUserLPr(userId,false);
}
if (READ_EXTERNAL_STORAGE.equals(name) || WRITE_EXTERNAL_STORAGE.equals(name)) {
final long token=Binder.clearCallingIdentity();
try {
if (sUserManager.isInitialized(userId)) {
  MountServiceInternal mountServiceInternal=LocalServices.getService(MountServiceInternal.class);
  mountServiceInternal.onExternalStoragePolicyChanged(uid,packageName);
}
}
  finally {
Binder.restoreCallingIdentity(token);
}
}
}",0.9560975609756096
193824,"void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}","void dumpSharedUsersLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  boolean printedSomething=false;
  for (  SharedUserSetting su : mSharedUsers.values()) {
    if (packageName != null && su != dumpState.getSharedUser()) {
      continue;
    }
    if (permissionNames != null && !su.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin) {
      if (!printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      pw.print(""String_Node_Str"");
      pw.print(su.name);
      pw.print(""String_Node_Str"");
      pw.print(Integer.toHexString(System.identityHashCode(su)));
      pw.println(""String_Node_Str"");
      String prefix=""String_Node_Str"";
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(su.userId);
      PermissionsState permissionsState=su.getPermissionsState();
      dumpInstallPermissionsLPr(pw,prefix,permissionNames,permissionsState);
      for (      int userId : UserManagerService.getInstance().getUserIds()) {
        final int[] gids=permissionsState.computeGids(userId);
        List<PermissionState> permissions=permissionsState.getRuntimePermissionStates(userId);
        if (!ArrayUtils.isEmpty(gids) || !permissions.isEmpty()) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.print(userId);
          pw.println(""String_Node_Str"");
          dumpGidsLPr(pw,prefix + ""String_Node_Str"",gids);
          dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissions,packageName != null);
        }
      }
    }
 else {
      pw.print(""String_Node_Str"");
      pw.print(su.userId);
      pw.print(""String_Node_Str"");
      pw.println(su.name);
    }
  }
}",0.9946380697050938
193825,"void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates){
  if (!permissionStates.isEmpty()) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}","void dumpRuntimePermissionsLPr(PrintWriter pw,String prefix,ArraySet<String> permissionNames,List<PermissionState> permissionStates,boolean dumpAll){
  if (!permissionStates.isEmpty() || dumpAll) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (    PermissionState permissionState : permissionStates) {
      if (permissionNames != null && !permissionNames.contains(permissionState.getName())) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(permissionState.getName());
      pw.print(""String_Node_Str"");
      pw.print(permissionState.isGranted());
      pw.println(permissionFlagsToString(""String_Node_Str"",permissionState.getFlags()));
    }
  }
}",0.9809725158562368
193826,"void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if (ps.sharedUser == null || permissionNames != null) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id));
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}","void dumpPackageLPr(PrintWriter pw,String prefix,String checkinTag,ArraySet<String> permissionNames,PackageSetting ps,SimpleDateFormat sdf,Date date,List<UserInfo> users,boolean dumpAll){
  if (checkinTag != null) {
    pw.print(checkinTag);
    pw.print(""String_Node_Str"");
    pw.print(ps.realName != null ? ps.realName : ps.name);
    pw.print(""String_Node_Str"");
    pw.print(ps.appId);
    pw.print(""String_Node_Str"");
    pw.print(ps.versionCode);
    pw.print(""String_Node_Str"");
    pw.print(ps.firstInstallTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.lastUpdateTime);
    pw.print(""String_Node_Str"");
    pw.print(ps.installerPackageName != null ? ps.installerPackageName : ""String_Node_Str"");
    pw.println();
    if (ps.pkg != null) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.println(ps.pkg.baseRevisionCode);
      if (ps.pkg.splitNames != null) {
        for (int i=0; i < ps.pkg.splitNames.length; i++) {
          pw.print(checkinTag);
          pw.print(""String_Node_Str"");
          pw.print(""String_Node_Str"");
          pw.print(ps.pkg.splitNames[i]);
          pw.print(""String_Node_Str"");
          pw.println(ps.pkg.splitRevisionCodes[i]);
        }
      }
    }
    for (    UserInfo user : users) {
      pw.print(checkinTag);
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(user.id);
      pw.print(""String_Node_Str"");
      pw.print(ps.getInstalled(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getHidden(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getStopped(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(ps.getNotLaunched(user.id) ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.print(""String_Node_Str"");
      pw.print(ps.getEnabled(user.id));
      String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
      pw.print(""String_Node_Str"");
      pw.print(lastDisabledAppCaller != null ? lastDisabledAppCaller : ""String_Node_Str"");
      pw.println();
    }
    return;
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.realName != null ? ps.realName : ps.name);
  pw.print(""String_Node_Str"");
  pw.print(Integer.toHexString(System.identityHashCode(ps)));
  pw.println(""String_Node_Str"");
  if (ps.frozen) {
    pw.print(prefix);
    pw.println(""String_Node_Str"");
  }
  if (ps.realName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.name);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.appId);
  if (ps.sharedUser != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.sharedUser);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.pkg);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.codePathString);
  if (permissionNames == null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.resourcePathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.legacyNativeLibraryPathString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.primaryCpuAbiString);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.secondaryCpuAbiString);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.versionCode);
  if (ps.pkg != null) {
    pw.print(""String_Node_Str"");
    pw.print(ps.pkg.applicationInfo.targetSdkVersion);
  }
  pw.println();
  if (ps.pkg != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.mVersionName);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    dumpSplitNames(pw,ps.pkg);
    pw.println();
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.toString());
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    printFlags(pw,ps.pkg.applicationInfo.flags,FLAG_DUMP_SPEC);
    pw.println();
    if (ps.pkg.applicationInfo.privateFlags != 0) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      printFlags(pw,ps.pkg.applicationInfo.privateFlags,PRIVATE_FLAG_DUMP_SPEC);
      pw.println();
    }
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.pkg.applicationInfo.dataDir);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    boolean first=true;
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    if ((ps.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES) != 0) {
      if (!first)       pw.print(""String_Node_Str"");
      first=false;
      pw.print(""String_Node_Str"");
    }
    pw.println(""String_Node_Str"");
    if (ps.pkg.libraryNames != null && ps.pkg.libraryNames.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.libraryNames.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.libraryNames.get(i));
      }
    }
    if (ps.pkg.usesLibraries != null && ps.pkg.usesLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraries.get(i));
      }
    }
    if (ps.pkg.usesOptionalLibraries != null && ps.pkg.usesOptionalLibraries.size() > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesOptionalLibraries.size(); i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesOptionalLibraries.get(i));
      }
    }
    if (ps.pkg.usesLibraryFiles != null && ps.pkg.usesLibraryFiles.length > 0) {
      pw.print(prefix);
      pw.println(""String_Node_Str"");
      for (int i=0; i < ps.pkg.usesLibraryFiles.length; i++) {
        pw.print(prefix);
        pw.print(""String_Node_Str"");
        pw.println(ps.pkg.usesLibraryFiles[i]);
      }
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.timeStamp);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.firstInstallTime);
  pw.println(sdf.format(date));
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  date.setTime(ps.lastUpdateTime);
  pw.println(sdf.format(date));
  if (ps.installerPackageName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.installerPackageName);
  }
  if (ps.volumeUuid != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(ps.volumeUuid);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(ps.signatures);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(ps.installPermissionsFixed);
  pw.print(""String_Node_Str"");
  pw.println(ps.installStatus);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  printFlags(pw,ps.pkgFlags,FLAG_DUMP_SPEC);
  pw.println();
  if (ps.pkg != null && ps.pkg.permissions != null && ps.pkg.permissions.size() > 0) {
    final ArrayList<PackageParser.Permission> perms=ps.pkg.permissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      PackageParser.Permission perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm.info.name)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.print(perm.info.name);
      pw.print(""String_Node_Str"");
      pw.print(PermissionInfo.protectionToString(perm.info.protectionLevel));
      if ((perm.info.flags & PermissionInfo.FLAG_COSTS_MONEY) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_HIDDEN) != 0) {
        pw.print(""String_Node_Str"");
      }
      if ((perm.info.flags & PermissionInfo.FLAG_INSTALLED) != 0) {
        pw.print(""String_Node_Str"");
      }
      pw.println();
    }
  }
  if ((permissionNames != null || dumpAll) && ps.pkg.requestedPermissions != null && ps.pkg.requestedPermissions.size() > 0) {
    final ArrayList<String> perms=ps.pkg.requestedPermissions;
    pw.print(prefix);
    pw.println(""String_Node_Str"");
    for (int i=0; i < perms.size(); i++) {
      String perm=perms.get(i);
      if (permissionNames != null && !permissionNames.contains(perm)) {
        continue;
      }
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(perm);
    }
  }
  if (ps.sharedUser == null || permissionNames != null || dumpAll) {
    PermissionsState permissionsState=ps.getPermissionsState();
    dumpInstallPermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState);
  }
  for (  UserInfo user : users) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(user.id);
    pw.print(""String_Node_Str"");
    pw.print(""String_Node_Str"");
    pw.print(ps.getInstalled(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getHidden(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getStopped(user.id));
    pw.print(""String_Node_Str"");
    pw.print(ps.getNotLaunched(user.id));
    pw.print(""String_Node_Str"");
    pw.println(ps.getEnabled(user.id));
    String lastDisabledAppCaller=ps.getLastDisabledAppCaller(user.id);
    if (lastDisabledAppCaller != null) {
      pw.print(prefix);
      pw.print(""String_Node_Str"");
      pw.println(lastDisabledAppCaller);
    }
    if (ps.sharedUser == null) {
      PermissionsState permissionsState=ps.getPermissionsState();
      dumpGidsLPr(pw,prefix + ""String_Node_Str"",permissionsState.computeGids(user.id));
      dumpRuntimePermissionsLPr(pw,prefix + ""String_Node_Str"",permissionNames,permissionsState.getRuntimePermissionStates(user.id),dumpAll);
    }
    if (permissionNames == null) {
      ArraySet<String> cmp=ps.getDisabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
      cmp=ps.getEnabledComponents(user.id);
      if (cmp != null && cmp.size() > 0) {
        pw.print(prefix);
        pw.println(""String_Node_Str"");
        for (        String s : cmp) {
          pw.print(prefix);
          pw.print(""String_Node_Str"");
          pw.println(s);
        }
      }
    }
  }
}",0.9755378984019284
193827,"void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
  }
  printedSomething=false;
  if (!checkin && mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users);
    }
  }
}","void dumpPackagesLPr(PrintWriter pw,String packageName,ArraySet<String> permissionNames,DumpState dumpState,boolean checkin){
  final SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  final Date date=new Date();
  boolean printedSomething=false;
  List<UserInfo> users=getAllUsers();
  for (  final PackageSetting ps : mPackages.values()) {
    if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
      continue;
    }
    if (permissionNames != null && !ps.getPermissionsState().hasRequestedPermission(permissionNames)) {
      continue;
    }
    if (!checkin && packageName != null) {
      dumpState.setSharedUser(ps.sharedUser);
    }
    if (!checkin && !printedSomething) {
      if (dumpState.onTitlePrinted())       pw.println();
      pw.println(""String_Node_Str"");
      printedSomething=true;
    }
    dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
  }
  printedSomething=false;
  if (mRenamedPackages.size() > 0 && permissionNames == null) {
    for (    final Map.Entry<String,String> e : mRenamedPackages.entrySet()) {
      if (packageName != null && !packageName.equals(e.getKey()) && !packageName.equals(e.getValue())) {
        continue;
      }
      if (!checkin) {
        if (!printedSomething) {
          if (dumpState.onTitlePrinted())           pw.println();
          pw.println(""String_Node_Str"");
          printedSomething=true;
        }
        pw.print(""String_Node_Str"");
      }
 else {
        pw.print(""String_Node_Str"");
      }
      pw.print(e.getKey());
      pw.print(checkin ? ""String_Node_Str"" : ""String_Node_Str"");
      pw.println(e.getValue());
    }
  }
  printedSomething=false;
  if (mDisabledSysPackages.size() > 0 && permissionNames == null) {
    for (    final PackageSetting ps : mDisabledSysPackages.values()) {
      if (packageName != null && !packageName.equals(ps.realName) && !packageName.equals(ps.name)) {
        continue;
      }
      if (!checkin && !printedSomething) {
        if (dumpState.onTitlePrinted())         pw.println();
        pw.println(""String_Node_Str"");
        printedSomething=true;
      }
      dumpPackageLPr(pw,""String_Node_Str"",checkin ? ""String_Node_Str"" : null,permissionNames,ps,sdf,date,users,packageName != null);
    }
  }
}",0.9889220281210056
193828,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193829,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193830,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193831,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193832,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193833,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193834,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193835,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193836,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193837,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193838,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193839,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193840,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193841,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193842,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193843,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193844,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193845,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193846,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193847,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193848,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193849,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193850,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193851,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193852,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193853,"/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
  mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
  mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : configurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}","/** 
 * Create a new   {@link StreamConfigurationMap}. <p>The array parameters ownership is passed to this object after creation; do not write to them after this constructor is invoked.</p>
 * @param configurations a non-{@code null} array of {@link StreamConfiguration}
 * @param minFrameDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param stallDurations a non-{@code null} array of {@link StreamConfigurationDuration}
 * @param highSpeedVideoConfigurations an array of {@link HighSpeedVideoConfiguration}, null if camera device does not support high speed video recording
 * @param listHighResolution a flag indicating whether the device supports BURST_CAPTUREand thus needs a separate list of slow high-resolution output sizes
 * @throws NullPointerException if any of the arguments except highSpeedVideoConfigurationswere  {@code null} or any subelements were {@code null}
 * @hide
 */
public StreamConfigurationMap(StreamConfiguration[] configurations,StreamConfigurationDuration[] minFrameDurations,StreamConfigurationDuration[] stallDurations,StreamConfiguration[] depthConfigurations,StreamConfigurationDuration[] depthMinFrameDurations,StreamConfigurationDuration[] depthStallDurations,HighSpeedVideoConfiguration[] highSpeedVideoConfigurations,ReprocessFormatsMap inputOutputFormatsMap,boolean listHighResolution){
  if (configurations == null) {
    checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mConfigurations=new StreamConfiguration[0];
    mMinFrameDurations=new StreamConfigurationDuration[0];
    mStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mConfigurations=checkArrayElementsNotNull(configurations,""String_Node_Str"");
    mMinFrameDurations=checkArrayElementsNotNull(minFrameDurations,""String_Node_Str"");
    mStallDurations=checkArrayElementsNotNull(stallDurations,""String_Node_Str"");
  }
  mListHighResolution=listHighResolution;
  if (depthConfigurations == null) {
    mDepthConfigurations=new StreamConfiguration[0];
    mDepthMinFrameDurations=new StreamConfigurationDuration[0];
    mDepthStallDurations=new StreamConfigurationDuration[0];
  }
 else {
    mDepthConfigurations=checkArrayElementsNotNull(depthConfigurations,""String_Node_Str"");
    mDepthMinFrameDurations=checkArrayElementsNotNull(depthMinFrameDurations,""String_Node_Str"");
    mDepthStallDurations=checkArrayElementsNotNull(depthStallDurations,""String_Node_Str"");
  }
  if (highSpeedVideoConfigurations == null) {
    mHighSpeedVideoConfigurations=new HighSpeedVideoConfiguration[0];
  }
 else {
    mHighSpeedVideoConfigurations=checkArrayElementsNotNull(highSpeedVideoConfigurations,""String_Node_Str"");
  }
  for (  StreamConfiguration config : mConfigurations) {
    int fmt=config.getFormat();
    SparseIntArray map=null;
    if (config.isOutput()) {
      mAllOutputFormats.put(fmt,mAllOutputFormats.get(fmt) + 1);
      long duration=0;
      if (mListHighResolution) {
        for (        StreamConfigurationDuration configurationDuration : mMinFrameDurations) {
          if (configurationDuration.getFormat() == fmt && configurationDuration.getWidth() == config.getSize().getWidth() && configurationDuration.getHeight() == config.getSize().getHeight()) {
            duration=configurationDuration.getDuration();
            break;
          }
        }
      }
      map=duration <= DURATION_20FPS_NS ? mOutputFormats : mHighResOutputFormats;
    }
 else {
      map=mInputFormats;
    }
    map.put(fmt,map.get(fmt) + 1);
  }
  for (  StreamConfiguration config : mDepthConfigurations) {
    if (!config.isOutput()) {
      continue;
    }
    mDepthOutputFormats.put(config.getFormat(),mDepthOutputFormats.get(config.getFormat()) + 1);
  }
  if (configurations != null && mOutputFormats.indexOfKey(HAL_PIXEL_FORMAT_IMPLEMENTATION_DEFINED) < 0) {
    throw new AssertionError(""String_Node_Str"");
  }
  for (  HighSpeedVideoConfiguration config : mHighSpeedVideoConfigurations) {
    Size size=config.getSize();
    Range<Integer> fpsRange=config.getFpsRange();
    Integer fpsRangeCount=mHighSpeedVideoSizeMap.get(size);
    if (fpsRangeCount == null) {
      fpsRangeCount=0;
    }
    mHighSpeedVideoSizeMap.put(size,fpsRangeCount + 1);
    Integer sizeCount=mHighSpeedVideoFpsRangeMap.get(fpsRange);
    if (sizeCount == null) {
      sizeCount=0;
    }
    mHighSpeedVideoFpsRangeMap.put(fpsRange,sizeCount + 1);
  }
  mInputOutputFormatsMap=inputOutputFormatsMap;
}",0.8736327670467768
193854,"@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  mWidth=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getWidth() : nativeGetWidth(mFormat);
  return mWidth;
}","@Override public int getWidth(){
  throwISEIfImageIsInvalid();
  int width;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    width=ImageReader.this.getWidth();
  break;
default :
width=nativeGetWidth(mFormat);
}
return width;
}",0.6741573033707865
193855,"@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  mHeight=(getFormat() == ImageFormat.JPEG) ? ImageReader.this.getHeight() : nativeGetHeight(mFormat);
  return mHeight;
}","@Override public int getHeight(){
  throwISEIfImageIsInvalid();
  int height;
switch (getFormat()) {
case ImageFormat.JPEG:
case ImageFormat.DEPTH_POINT_CLOUD:
    height=ImageReader.this.getHeight();
  break;
default :
height=nativeGetHeight(mFormat);
}
return height;
}",0.6739606126914661
193856,"/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  if (tr.isOverHomeStack()) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || task == tr && tr.isOverHomeStack() || numTasks <= 1 && isOnHomeDisplay()) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}","/** 
 * Worker method for rearranging history stack. Implements the function of moving all activities for a specific task (gathering them if disjoint) into a single group at the bottom of the stack. If a watcher is installed, the action is preflighted and the watcher has an opportunity to premeptively cancel the move.
 * @param taskId The taskId to collect and move to the bottom.
 * @return Returns true if the move completed, false if not.
 */
final boolean moveTaskToBackLocked(int taskId){
  final TaskRecord tr=taskForIdLocked(taskId);
  if (tr == null) {
    Slog.i(TAG,""String_Node_Str"" + taskId);
    return false;
  }
  Slog.i(TAG,""String_Node_Str"" + tr);
  mStackSupervisor.removeLockedTaskLocked(tr);
  if (mStackSupervisor.isFrontStack(this) && mService.mController != null) {
    ActivityRecord next=topRunningActivityLocked(null,taskId);
    if (next == null) {
      next=topRunningActivityLocked(null,0);
    }
    if (next != null) {
      boolean moveOK=true;
      try {
        moveOK=mService.mController.activityResuming(next.packageName);
      }
 catch (      RemoteException e) {
        mService.mController=null;
        Watchdog.getInstance().setActivityController(null);
      }
      if (!moveOK) {
        return false;
      }
    }
  }
  if (DEBUG_TRANSITION)   Slog.v(TAG_TRANSITION,""String_Node_Str"" + taskId);
  boolean prevIsHome=false;
  final boolean canGoHome=!tr.isHomeTask() && tr.isOverHomeStack();
  if (canGoHome) {
    final TaskRecord nextTask=getNextTask(tr);
    if (nextTask != null) {
      nextTask.setTaskToReturnTo(tr.getTaskToReturnTo());
    }
 else {
      prevIsHome=true;
    }
  }
  mTaskHistory.remove(tr);
  mTaskHistory.add(0,tr);
  updateTaskMovement(tr,false);
  int numTasks=mTaskHistory.size();
  for (int taskNdx=numTasks - 1; taskNdx >= 1; --taskNdx) {
    final TaskRecord task=mTaskHistory.get(taskNdx);
    if (task.isOverHomeStack()) {
      break;
    }
    if (taskNdx == 1) {
      task.setTaskToReturnTo(HOME_ACTIVITY_TYPE);
    }
  }
  mWindowManager.prepareAppTransition(AppTransition.TRANSIT_TASK_TO_BACK,false);
  mWindowManager.moveTaskToBottom(taskId);
  if (VALIDATE_TOKENS) {
    validateAppTokensLocked();
  }
  final TaskRecord task=mResumedActivity != null ? mResumedActivity.task : null;
  if (prevIsHome || (task == tr && canGoHome) || (numTasks <= 1 && isOnHomeDisplay())) {
    if (!mService.mBooting && !mService.mBooted) {
      return false;
    }
    final int taskToReturnTo=tr.getTaskToReturnTo();
    tr.setTaskToReturnTo(APPLICATION_ACTIVITY_TYPE);
    return mStackSupervisor.resumeHomeStackTask(taskToReturnTo,null,""String_Node_Str"");
  }
  mStackSupervisor.resumeTopActivitiesLocked();
  return true;
}",0.9835943325876212
193857,"private void adjustFocusedActivityLocked(ActivityRecord r,String reason){
  if (mStackSupervisor.isFrontStack(this) && mService.mFocusedActivity == r) {
    ActivityRecord next=topRunningActivityLocked(null);
    final String myReason=reason + ""String_Node_Str"";
    if (next != r) {
      final TaskRecord task=r.task;
      if (r.frontOfTask && task == topTask() && task.isOverHomeStack()) {
        if (!mFullscreen && adjustFocusToNextVisibleStackLocked(null,myReason)) {
          return;
        }
        if (mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(),myReason)) {
          return;
        }
      }
    }
    final ActivityRecord top=mStackSupervisor.topRunningActivityLocked();
    if (top != null) {
      mService.setFocusedActivityLocked(top,myReason);
    }
  }
}","private void adjustFocusedActivityLocked(ActivityRecord r,String reason){
  if (mStackSupervisor.isFrontStack(this) && mService.mFocusedActivity == r) {
    ActivityRecord next=topRunningActivityLocked(null);
    final String myReason=reason + ""String_Node_Str"";
    if (next != r) {
      if (next != null && mStackId == FREEFORM_WORKSPACE_STACK_ID) {
        mService.setFocusedActivityLocked(next,myReason);
        return;
      }
 else {
        final TaskRecord task=r.task;
        if (r.frontOfTask && task == topTask() && task.isOverHomeStack()) {
          if (!mFullscreen && adjustFocusToNextVisibleStackLocked(null,myReason)) {
            return;
          }
          if (mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(),myReason)) {
            return;
          }
        }
      }
    }
    final ActivityRecord top=mStackSupervisor.topRunningActivityLocked();
    if (top != null) {
      mService.setFocusedActivityLocked(top,myReason);
    }
  }
}",0.7661245092540662
193858,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193859,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193860,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193861,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193862,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193863,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193864,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193865,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193866,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193867,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193868,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193869,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193870,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193871,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193872,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193873,"@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}","@Override protected void dump(FileDescriptor fd,PrintWriter pw,String[] args){
  if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP) != PackageManager.PERMISSION_GRANTED) {
    pw.println(""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid());
    return;
  }
  if (args != null) {
    for (int i=0; i < args.length; i++) {
      String arg=args[i];
      if (""String_Node_Str"".equals(arg)) {
        dumpHelp(pw);
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
synchronized (this) {
            mHandler.removeCallbacks(mWriteRunner);
          }
          writeState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (""String_Node_Str"".equals(arg)) {
        long token=Binder.clearCallingIdentity();
        try {
          readState();
          pw.println(""String_Node_Str"");
        }
  finally {
          Binder.restoreCallingIdentity(token);
        }
        return;
      }
 else       if (arg.length() > 0 && arg.charAt(0) == '-') {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
 else {
        pw.println(""String_Node_Str"" + arg);
        return;
      }
    }
  }
synchronized (this) {
    pw.println(""String_Node_Str"");
    final long now=System.currentTimeMillis();
    boolean needSep=false;
    if (mOpModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mOpModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(AppOpsManager.opToName(mOpModeWatchers.keyAt(i)));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mOpModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mPackageModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mPackageModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mPackageModeWatchers.keyAt(i));
        pw.println(""String_Node_Str"");
        ArrayList<Callback> callbacks=mPackageModeWatchers.valueAt(i);
        for (int j=0; j < callbacks.size(); j++) {
          pw.print(""String_Node_Str"");
          pw.print(j);
          pw.print(""String_Node_Str"");
          pw.println(callbacks.get(j));
        }
      }
    }
    if (mModeWatchers.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mModeWatchers.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mModeWatchers.keyAt(i));
        pw.print(""String_Node_Str"");
        pw.println(mModeWatchers.valueAt(i));
      }
    }
    if (mClients.size() > 0) {
      needSep=true;
      pw.println(""String_Node_Str"");
      for (int i=0; i < mClients.size(); i++) {
        pw.print(""String_Node_Str"");
        pw.print(mClients.keyAt(i));
        pw.println(""String_Node_Str"");
        ClientState cs=mClients.valueAt(i);
        pw.print(""String_Node_Str"");
        pw.println(cs);
        if (cs.mStartedOps != null && cs.mStartedOps.size() > 0) {
          pw.println(""String_Node_Str"");
          for (int j=0; j < cs.mStartedOps.size(); j++) {
            Op op=cs.mStartedOps.get(j);
            pw.print(""String_Node_Str"");
            pw.print(""String_Node_Str"");
            pw.print(op.uid);
            pw.print(""String_Node_Str"");
            pw.print(op.packageName);
            pw.print(""String_Node_Str"");
            pw.println(AppOpsManager.opToName(op.op));
          }
        }
      }
    }
    if (mAudioRestrictions.size() > 0) {
      boolean printedHeader=false;
      for (int o=0; o < mAudioRestrictions.size(); o++) {
        final String op=AppOpsManager.opToName(mAudioRestrictions.keyAt(o));
        final SparseArray<Restriction> restrictions=mAudioRestrictions.valueAt(o);
        for (int i=0; i < restrictions.size(); i++) {
          if (!printedHeader) {
            pw.println(""String_Node_Str"");
            printedHeader=true;
            needSep=true;
          }
          final int usage=restrictions.keyAt(i);
          pw.print(""String_Node_Str"");
          pw.print(op);
          pw.print(""String_Node_Str"");
          pw.print(AudioAttributes.usageToString(usage));
          Restriction r=restrictions.valueAt(i);
          pw.print(""String_Node_Str"");
          pw.println(r.mode);
          if (!r.exceptionPackages.isEmpty()) {
            pw.println(""String_Node_Str"");
            for (int j=0; j < r.exceptionPackages.size(); j++) {
              pw.print(""String_Node_Str"");
              pw.println(r.exceptionPackages.valueAt(j));
            }
          }
        }
      }
    }
    if (needSep) {
      pw.println();
    }
    for (int i=0; i < mUidStates.size(); i++) {
      UidState uidState=mUidStates.valueAt(i);
      pw.print(""String_Node_Str"");
      UserHandle.formatUid(pw,uidState.uid);
      pw.println(""String_Node_Str"");
      SparseIntArray opModes=uidState.opModes;
      if (opModes != null) {
        final int opModeCount=opModes.size();
        for (int j=0; j < opModeCount; j++) {
          final int code=opModes.keyAt(j);
          final int mode=opModes.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(code));
          pw.print(""String_Node_Str"");
          pw.println(mode);
        }
      }
      ArrayMap<String,Ops> pkgOps=uidState.pkgOps;
      if (pkgOps == null) {
        continue;
      }
      for (      Ops ops : pkgOps.values()) {
        pw.print(""String_Node_Str"");
        pw.print(ops.packageName);
        pw.println(""String_Node_Str"");
        for (int j=0; j < ops.size(); j++) {
          Op op=ops.valueAt(j);
          pw.print(""String_Node_Str"");
          pw.print(AppOpsManager.opToName(op.op));
          pw.print(""String_Node_Str"");
          pw.print(op.mode);
          if (op.time != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.time,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.rejectTime != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(now - op.rejectTime,pw);
            pw.print(""String_Node_Str"");
          }
          if (op.duration == -1) {
            pw.print(""String_Node_Str"");
          }
 else           if (op.duration != 0) {
            pw.print(""String_Node_Str"");
            TimeUtils.formatDuration(op.duration,pw);
          }
          pw.println();
        }
      }
    }
  }
}",0.917077045274027
193874,"void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}","void readState(){
synchronized (mFile) {
synchronized (this) {
      FileInputStream stream;
      try {
        stream=mFile.openRead();
      }
 catch (      FileNotFoundException e) {
        Slog.i(TAG,""String_Node_Str"" + mFile.getBaseFile() + ""String_Node_Str"");
        return;
      }
      boolean success=false;
      mUidStates.clear();
      try {
        XmlPullParser parser=Xml.newPullParser();
        parser.setInput(stream,StandardCharsets.UTF_8.name());
        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG && type != XmlPullParser.END_DOCUMENT) {
          ;
        }
        if (type != XmlPullParser.START_TAG) {
          throw new IllegalStateException(""String_Node_Str"");
        }
        int outerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String tagName=parser.getName();
          if (tagName.equals(""String_Node_Str"")) {
            readPackage(parser);
          }
 else           if (tagName.equals(""String_Node_Str"")) {
            readUidOps(parser);
          }
 else {
            Slog.w(TAG,""String_Node_Str"" + parser.getName());
            XmlUtils.skipCurrentTag(parser);
          }
        }
        success=true;
      }
 catch (      IllegalStateException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NullPointerException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      NumberFormatException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      XmlPullParserException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IOException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
catch (      IndexOutOfBoundsException e) {
        Slog.w(TAG,""String_Node_Str"" + e);
      }
 finally {
        if (!success) {
          mUidStates.clear();
        }
        try {
          stream.close();
        }
 catch (        IOException e) {
        }
      }
    }
  }
}",0.9939478584729982
193875,"private void adjustFocusedActivityLocked(ActivityRecord r,String reason){
  if (mStackSupervisor.isFrontStack(this) && mService.mFocusedActivity == r) {
    ActivityRecord next=topRunningActivityLocked(null);
    final String myReason=reason + ""String_Node_Str"";
    if (next != r) {
      final TaskRecord task=r.task;
      if (r.frontOfTask && task == topTask() && task.isOverHomeStack()) {
        if (!mFullscreen && adjustFocusToNextVisibleStackLocked(null,myReason)) {
          return;
        }
        if (mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(),myReason)) {
          return;
        }
      }
    }
    final ActivityRecord top=mStackSupervisor.topRunningActivityLocked();
    if (top != null) {
      mService.setFocusedActivityLocked(top,myReason);
    }
  }
}","private void adjustFocusedActivityLocked(ActivityRecord r,String reason){
  if (mStackSupervisor.isFrontStack(this) && mService.mFocusedActivity == r) {
    ActivityRecord next=topRunningActivityLocked(null);
    final String myReason=reason + ""String_Node_Str"";
    if (next != r) {
      if (next != null && mStackId == FREEFORM_WORKSPACE_STACK_ID) {
        mService.setFocusedActivityLocked(next,myReason);
        return;
      }
 else {
        final TaskRecord task=r.task;
        if (r.frontOfTask && task == topTask() && task.isOverHomeStack()) {
          if (!mFullscreen && adjustFocusToNextVisibleStackLocked(null,myReason)) {
            return;
          }
          if (mStackSupervisor.moveHomeStackTaskToTop(task.getTaskToReturnTo(),myReason)) {
            return;
          }
        }
      }
    }
    final ActivityRecord top=mStackSupervisor.topRunningActivityLocked();
    if (top != null) {
      mService.setFocusedActivityLocked(top,myReason);
    }
  }
}",0.7661245092540662
193876,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193877,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193878,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193879,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193880,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193881,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193882,"/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        final ArrayList<View> preorderedList=buildOrderedChildList();
        final boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          final int childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}","/** 
 * Dispatch creation of   {@link ViewStructure} down the hierarchy.  This implementationadds in all child views of the view group, in addition to calling the default View implementation.
 */
public void dispatchProvideStructure(ViewStructure structure){
  super.dispatchProvideStructure(structure);
  if (!isAssistBlocked()) {
    if (structure.getChildCount() == 0) {
      final int childrenCount=getChildCount();
      if (childrenCount > 0) {
        structure.setChildCount(childrenCount);
        ArrayList<View> preorderedList=buildOrderedChildList();
        boolean customOrder=preorderedList == null && isChildrenDrawingOrderEnabled();
        final View[] children=mChildren;
        for (int i=0; i < childrenCount; i++) {
          int childIndex;
          try {
            childIndex=customOrder ? getChildDrawingOrder(childrenCount,i) : i;
          }
 catch (          IndexOutOfBoundsException e) {
            childIndex=i;
            if (mContext.getApplicationInfo().targetSdkVersion < Build.VERSION_CODES.M) {
              Log.w(TAG,""String_Node_Str"" + i + ""String_Node_Str""+ childrenCount,e);
              customOrder=false;
              if (i > 0) {
                int[] permutation=new int[childrenCount];
                SparseBooleanArray usedIndices=new SparseBooleanArray();
                for (int j=0; j < i; j++) {
                  permutation[j]=getChildDrawingOrder(childrenCount,j);
                  usedIndices.put(permutation[j],true);
                }
                int nextIndex=0;
                for (int j=i; j < childrenCount; j++) {
                  while (usedIndices.get(nextIndex,false)) {
                    nextIndex++;
                  }
                  permutation[j]=nextIndex;
                  nextIndex++;
                }
                preorderedList=new ArrayList<>(childrenCount);
                for (int j=0; j < childrenCount; j++) {
                  preorderedList.add(children[permutation[j]]);
                }
              }
            }
 else {
              throw e;
            }
          }
          final View child=(preorderedList == null) ? children[childIndex] : preorderedList.get(childIndex);
          ViewStructure cstructure=structure.newChild(i);
          child.dispatchProvideStructure(cstructure);
        }
      }
    }
  }
}",0.6235053951589384
193883,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193884,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193885,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193886,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193887,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193888,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193889,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193890,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193891,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193892,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193893,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193894,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193895,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193896,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193897,"@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  if (mConfig.launchedHasConfigurationChanged) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}","@Override protected void onStart(){
  super.onStart();
  MetricsLogger.visible(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,true);
  IntentFilter filter=new IntentFilter();
  filter.addAction(Recents.ACTION_HIDE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_TOGGLE_RECENTS_ACTIVITY);
  filter.addAction(Recents.ACTION_START_ENTER_ANIMATION);
  registerReceiver(mServiceBroadcastReceiver,filter);
  loader.registerReceivers(this,mRecentsView);
  updateRecentsTasks();
  boolean wasLaunchedByAm=!mConfig.launchedFromHome && !mConfig.launchedFromAppWithThumbnail;
  if (mConfig.launchedHasConfigurationChanged || wasLaunchedByAm) {
    onEnterAnimationTriggered();
  }
  if (!mConfig.launchedHasConfigurationChanged) {
    mRecentsView.disableLayersForOneFrame();
  }
}",0.8871060171919771
193898,"@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
}","@Override protected void onStop(){
  super.onStop();
  MetricsLogger.hidden(this,MetricsLogger.OVERVIEW_ACTIVITY);
  RecentsTaskLoader loader=RecentsTaskLoader.getInstance();
  SystemServicesProxy ssp=loader.getSystemServicesProxy();
  Recents.notifyVisibilityChanged(this,ssp,false);
  mRecentsView.onRecentsHidden();
  unregisterReceiver(mServiceBroadcastReceiver);
  loader.unregisterReceivers();
  mConfig.launchedFromHome=false;
  mConfig.launchedFromSearchHome=false;
  mConfig.launchedFromAppWithThumbnail=false;
  mConfig.launchedToTaskId=-1;
  mConfig.launchedWithAltTab=false;
  mConfig.launchedHasConfigurationChanged=false;
}",0.7726396917148363
193899,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193900,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193901,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193902,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193903,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193904,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193905,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193906,"@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    return mPM.queryContentProviders(processName,uid,flags);
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","@Override public List<ProviderInfo> queryContentProviders(String processName,int uid,int flags){
  try {
    ParceledListSlice<ProviderInfo> slice=mPM.queryContentProviders(processName,uid,flags);
    return slice != null ? slice.getList() : null;
  }
 catch (  RemoteException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}",0.84
193907,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193908,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193909,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193910,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193911,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193912,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193913,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193914,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193915,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193916,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193917,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193918,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193919,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193920,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193921,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193922,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193923,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193924,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193925,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193926,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193927,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193928,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193929,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193930,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193931,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193932,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193933,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193934,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193935,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193936,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193937,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193938,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193939,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193940,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193941,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193942,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193943,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193944,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193945,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193946,"private void updateClipping(){
  mClipRect.set(0,mClipTopOptimization,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}","private void updateClipping(){
  int top=mClipTopOptimization;
  if (top >= getActualHeight()) {
    top=getActualHeight() - 1;
  }
  mClipRect.set(0,top,getWidth(),getActualHeight());
  setClipBounds(mClipRect);
}",0.6395348837209303
193947,"/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=(int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}","/** 
 * Determine the positions for the views. This is the main part of the algorithm.
 * @param resultState The result state to update if a change to the properties of a child occurs
 * @param algorithmState The state in which the current pass of the algorithm is currently in
 * @param ambientState The current ambient state
 */
private void updatePositionsForState(StackScrollState resultState,StackScrollAlgorithmState algorithmState,AmbientState ambientState){
  float bottomPeekStart=ambientState.getInnerHeight() - mBottomStackPeekSize;
  float bottomStackStart=bottomPeekStart - mBottomStackSlowDownLength;
  float currentYPosition=0.0f;
  float yPositionInScrollView=0.0f;
  ExpandableNotificationRow topHeadsUpEntry=ambientState.getTopHeadsUpEntry();
  int childCount=algorithmState.visibleChildren.size();
  int numberOfElementsCompletelyIn=algorithmState.partialInTop == 1.0f ? algorithmState.lastTopStackIndex : (int)algorithmState.itemsInTopStack;
  for (int i=0; i < childCount; i++) {
    ExpandableView child=algorithmState.visibleChildren.get(i);
    StackViewState childViewState=resultState.getViewStateForView(child);
    childViewState.location=StackViewState.LOCATION_UNKNOWN;
    int childHeight=getMaxAllowedChildHeight(child,ambientState);
    float yPositionInScrollViewAfterElement=yPositionInScrollView + childHeight + mPaddingBetweenElements;
    float scrollOffset=yPositionInScrollView - algorithmState.scrollY + mCollapsedSize;
    if (i == algorithmState.lastTopStackIndex + 1) {
      currentYPosition=Math.min(scrollOffset,bottomStackStart);
    }
    childViewState.yTranslation=currentYPosition;
    float nextYPosition=currentYPosition + childHeight + mPaddingBetweenElements;
    if (i <= algorithmState.lastTopStackIndex) {
      updateStateForTopStackChild(algorithmState,numberOfElementsCompletelyIn,i,childHeight,childViewState,scrollOffset);
      clampPositionToTopStackEnd(childViewState,childHeight);
      if (childViewState.yTranslation + childHeight + mPaddingBetweenElements >= bottomStackStart && !mIsExpansionChanging && i != 0 && mIsSmallScreen) {
        int newSize=(int)Math.max(bottomStackStart - mPaddingBetweenElements - childViewState.yTranslation,mCollapsedSize);
        childViewState.height=newSize;
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,childViewState.yTranslation,childViewState,childHeight);
      }
      clampPositionToBottomStackStart(childViewState,childViewState.height,ambientState);
    }
 else     if (nextYPosition >= bottomStackStart) {
      if (currentYPosition >= bottomStackStart) {
        updateStateForChildFullyInBottomStack(algorithmState,bottomStackStart,childViewState,childHeight,ambientState);
      }
 else {
        updateStateForChildTransitioningInBottom(algorithmState,bottomStackStart,bottomPeekStart,currentYPosition,childViewState,childHeight);
      }
    }
 else {
      childViewState.location=StackViewState.LOCATION_MAIN_AREA;
      clampYTranslation(childViewState,childHeight,ambientState);
    }
    if (i == 0) {
      childViewState.alpha=1.0f;
      childViewState.yTranslation=Math.max(mCollapsedSize - algorithmState.scrollY,0);
      if (childViewState.yTranslation + childViewState.height > bottomPeekStart - mCollapseSecondCardPadding) {
        childViewState.height=(int)Math.max(bottomPeekStart - mCollapseSecondCardPadding - childViewState.yTranslation,mCollapsedSize);
      }
      childViewState.location=StackViewState.LOCATION_FIRST_CARD;
    }
    if (childViewState.location == StackViewState.LOCATION_UNKNOWN) {
      Log.wtf(LOG_TAG,""String_Node_Str"" + i);
    }
    currentYPosition=childViewState.yTranslation + childHeight + mPaddingBetweenElements;
    yPositionInScrollView=yPositionInScrollViewAfterElement;
    if (ambientState.isShadeExpanded() && topHeadsUpEntry != null && child != topHeadsUpEntry) {
      childViewState.yTranslation+=topHeadsUpEntry.getHeadsUpHeight() - mCollapsedSize;
    }
    childViewState.yTranslation+=ambientState.getTopPadding() + ambientState.getStackTranslation();
  }
  updateHeadsUpStates(resultState,algorithmState,ambientState);
}",0.9911525875651436
193948,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193949,"@LayoutlibDelegate static float[] native_approximate(long nPath,float error){
  Bridge.getLog().warning(LayoutLog.TAG_UNSUPPORTED,""String_Node_Str"",null);
  Path_Delegate pathDelegate=sManager.getDelegate(nPath);
  if (pathDelegate == null) {
    return null;
  }
  PathIterator pathIterator=pathDelegate.mPath.getPathIterator(null);
  float[] tmp=new float[6];
  float[] coords=new float[6];
  boolean isFirstPoint=true;
  while (!pathIterator.isDone()) {
    int type=pathIterator.currentSegment(tmp);
switch (type) {
case PathIterator.SEG_MOVETO:
case PathIterator.SEG_LINETO:
      store(coords,tmp,1,isFirstPoint);
    break;
case PathIterator.SEG_QUADTO:
  store(coords,tmp,2,isFirstPoint);
break;
case PathIterator.SEG_CUBICTO:
store(coords,tmp,3,isFirstPoint);
break;
case PathIterator.SEG_CLOSE:
}
isFirstPoint=false;
pathIterator.next();
}
if (isFirstPoint) {
return new float[0];
}
 else {
return coords;
}
}","@LayoutlibDelegate static float[] native_approximate(long nPath,float error){
  Bridge.getLog().warning(LayoutLog.TAG_UNSUPPORTED,""String_Node_Str"",null);
  Path_Delegate pathDelegate=sManager.getDelegate(nPath);
  if (pathDelegate == null) {
    return null;
  }
  PathIterator pathIterator=pathDelegate.mPath.getPathIterator(null);
  float[] tmp=new float[6];
  float[] coords=new float[6];
  boolean isFirstPoint=true;
  while (!pathIterator.isDone()) {
    int type=pathIterator.currentSegment(tmp);
switch (type) {
case PathIterator.SEG_MOVETO:
case PathIterator.SEG_LINETO:
      store(tmp,coords,1,isFirstPoint);
    break;
case PathIterator.SEG_QUADTO:
  store(tmp,coords,2,isFirstPoint);
break;
case PathIterator.SEG_CUBICTO:
store(tmp,coords,3,isFirstPoint);
break;
case PathIterator.SEG_CLOSE:
}
isFirstPoint=false;
pathIterator.next();
}
if (isFirstPoint) {
return new float[0];
}
 else {
return coords;
}
}",0.9869423286180632
193950,"private static void store(float[] src,float[] dst,int count,boolean isFirst){
  if (isFirst) {
    dst[0]=0;
    dst[1]=src[0];
    dst[2]=src[1];
  }
  if (count > 1 || !isFirst) {
    dst[3]=1;
    dst[4]=src[2 * count];
    dst[5]=src[2 * count + 1];
  }
}","private static void store(float[] src,float[] dst,int count,boolean isFirst){
  if (isFirst) {
    dst[0]=0;
    dst[1]=src[0];
    dst[2]=src[1];
  }
  if (count > 1 || !isFirst) {
    dst[3]=1;
    dst[4]=src[2 * count - 2];
    dst[5]=src[2 * count - 1];
  }
}",0.9885057471264368
193951,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193952,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193953,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193954,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193955,"@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? 0 : ViewNode.FLAGS_ASSIST_BLOCKED);
}","@Override public void setAssistBlocked(boolean state){
  mNode.mFlags=(mNode.mFlags & ~ViewNode.FLAGS_ASSIST_BLOCKED) | (state ? ViewNode.FLAGS_ASSIST_BLOCKED : 0);
}",0.9759036144578314
193956,"void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}","void dump(String prefix,ViewNode node){
  Log.i(TAG,prefix + ""String_Node_Str"" + node.getLeft()+ ""String_Node_Str""+ node.getTop()+ ""String_Node_Str""+ node.getWidth()+ ""String_Node_Str""+ node.getHeight()+ ""String_Node_Str""+ ""String_Node_Str""+ node.getClassName());
  int id=node.getId();
  if (id != 0) {
    StringBuilder sb=new StringBuilder();
    sb.append(prefix);
    sb.append(""String_Node_Str"");
    sb.append(Integer.toHexString(id));
    String entry=node.getIdEntry();
    if (entry != null) {
      String type=node.getIdType();
      String pkg=node.getIdPackage();
      sb.append(""String_Node_Str"");
      sb.append(pkg);
      sb.append(""String_Node_Str"");
      sb.append(type);
      sb.append(""String_Node_Str"");
      sb.append(entry);
    }
    Log.i(TAG,sb.toString());
  }
  int scrollX=node.getScrollX();
  int scrollY=node.getScrollY();
  if (scrollX != 0 || scrollY != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + scrollX+ ""String_Node_Str""+ scrollY);
  }
  Matrix matrix=node.getTransformation();
  if (matrix != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + matrix);
  }
  float elevation=node.getElevation();
  if (elevation != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  float alpha=node.getAlpha();
  if (alpha != 0) {
    Log.i(TAG,prefix + ""String_Node_Str"" + elevation);
  }
  CharSequence contentDescription=node.getContentDescription();
  if (contentDescription != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + contentDescription);
  }
  CharSequence text=node.getText();
  if (text != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSelectionStart()+ ""String_Node_Str""+ node.getTextSelectionEnd()+ ""String_Node_Str""+ text);
    Log.i(TAG,prefix + ""String_Node_Str"" + node.getTextSize()+ ""String_Node_Str""+ node.getTextStyle());
    Log.i(TAG,prefix + ""String_Node_Str"" + Integer.toHexString(node.getTextColor())+ ""String_Node_Str""+ Integer.toHexString(node.getTextBackgroundColor()));
  }
  String hint=node.getHint();
  if (hint != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + hint);
  }
  Bundle extras=node.getExtras();
  if (extras != null) {
    Log.i(TAG,prefix + ""String_Node_Str"" + extras);
  }
  if (node.isAssistBlocked()) {
    Log.i(TAG,prefix + ""String_Node_Str"");
  }
  final int NCHILDREN=node.getChildCount();
  if (NCHILDREN > 0) {
    Log.i(TAG,prefix + ""String_Node_Str"");
    String cprefix=prefix + ""String_Node_Str"";
    for (int i=0; i < NCHILDREN; i++) {
      ViewNode cnode=node.getChildAt(i);
      dump(cprefix,cnode);
    }
  }
}",0.9842660824536944
193957,"public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}","public int relayoutWindow(Session session,IWindow client,int seq,WindowManager.LayoutParams attrs,int requestedWidth,int requestedHeight,int viewVisibility,int flags,Rect outFrame,Rect outOverscanInsets,Rect outContentInsets,Rect outVisibleInsets,Rect outStableInsets,Rect outOutsets,Configuration outConfig,Surface outSurface){
  boolean toBeDisplayed=false;
  boolean inTouchMode;
  boolean configChanged;
  boolean surfaceChanged=false;
  boolean animating;
  boolean hasStatusBarPermission=mContext.checkCallingOrSelfPermission(android.Manifest.permission.STATUS_BAR) == PackageManager.PERMISSION_GRANTED;
  long origId=Binder.clearCallingIdentity();
synchronized (mWindowMap) {
    WindowState win=windowForClientLocked(session,client,false);
    if (win == null) {
      return 0;
    }
    WindowStateAnimator winAnimator=win.mWinAnimator;
    if (viewVisibility != View.GONE && (win.mRequestedWidth != requestedWidth || win.mRequestedHeight != requestedHeight)) {
      win.mLayoutNeeded=true;
      win.mRequestedWidth=requestedWidth;
      win.mRequestedHeight=requestedHeight;
    }
    if (attrs != null) {
      mPolicy.adjustWindowParamsLw(attrs);
    }
    int systemUiVisibility=0;
    if (attrs != null) {
      systemUiVisibility=(attrs.systemUiVisibility | attrs.subtreeSystemUiVisibility);
      if ((systemUiVisibility & StatusBarManager.DISABLE_MASK) != 0) {
        if (!hasStatusBarPermission) {
          systemUiVisibility&=~StatusBarManager.DISABLE_MASK;
        }
      }
    }
    if (attrs != null && seq == win.mSeq) {
      win.mSystemUiVisibility=systemUiVisibility;
    }
    winAnimator.mSurfaceDestroyDeferred=(flags & WindowManagerGlobal.RELAYOUT_DEFER_SURFACE_DESTROY) != 0;
    int attrChanges=0;
    int flagChanges=0;
    if (attrs != null) {
      if (win.mAttrs.type != attrs.type) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      flagChanges=win.mAttrs.flags^=attrs.flags;
      attrChanges=win.mAttrs.copyFrom(attrs);
      if ((attrChanges & (WindowManager.LayoutParams.LAYOUT_CHANGED | WindowManager.LayoutParams.SYSTEM_UI_VISIBILITY_CHANGED)) != 0) {
        win.mLayoutNeeded=true;
      }
    }
    if (DEBUG_LAYOUT)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ win.mAttrs);
    win.mEnforceSizeCompat=(win.mAttrs.privateFlags & PRIVATE_FLAG_COMPATIBLE_WINDOW) != 0;
    if ((attrChanges & WindowManager.LayoutParams.ALPHA_CHANGED) != 0) {
      winAnimator.mAlpha=attrs.alpha;
    }
    final boolean scaledWindow=((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_SCALED) != 0);
    if (scaledWindow) {
      win.mHScale=(attrs.width != requestedWidth) ? (attrs.width / (float)requestedWidth) : 1.0f;
      win.mVScale=(attrs.height != requestedHeight) ? (attrs.height / (float)requestedHeight) : 1.0f;
    }
 else {
      win.mHScale=win.mVScale=1;
    }
    boolean imMayMove=(flagChanges & (FLAG_ALT_FOCUSABLE_IM | FLAG_NOT_FOCUSABLE)) != 0;
    final boolean isDefaultDisplay=win.isDefaultDisplay();
    boolean focusMayChange=isDefaultDisplay && (win.mViewVisibility != viewVisibility || ((flagChanges & FLAG_NOT_FOCUSABLE) != 0) || (!win.mRelayoutCalled));
    boolean wallpaperMayMove=win.mViewVisibility != viewVisibility && (win.mAttrs.flags & FLAG_SHOW_WALLPAPER) != 0;
    wallpaperMayMove|=(flagChanges & FLAG_SHOW_WALLPAPER) != 0;
    if ((flagChanges & FLAG_SECURE) != 0 && winAnimator.mSurfaceControl != null) {
      winAnimator.mSurfaceControl.setSecure(isSecureLocked(win));
    }
    win.mRelayoutCalled=true;
    final int oldVisibility=win.mViewVisibility;
    win.mViewVisibility=viewVisibility;
    if (DEBUG_SCREEN_ON) {
      RuntimeException stack=new RuntimeException();
      stack.fillInStackTrace();
      Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ oldVisibility+ ""String_Node_Str""+ viewVisibility,stack);
    }
    if (viewVisibility == View.VISIBLE && (win.mAppToken == null || !win.mAppToken.clientHidden)) {
      toBeDisplayed=!win.isVisibleLw();
      if (win.mExiting) {
        winAnimator.cancelExitAnimationForNextAnimationLocked();
        win.mExiting=false;
      }
      if (win.mDestroying) {
        win.mDestroying=false;
        mDestroySurface.remove(win);
      }
      if (oldVisibility == View.GONE) {
        winAnimator.mEnterAnimationPending=true;
      }
      winAnimator.mEnteringAnimation=true;
      if (toBeDisplayed) {
        if ((win.mAttrs.softInputMode & SOFT_INPUT_MASK_ADJUST) == SOFT_INPUT_ADJUST_RESIZE) {
          win.mLayoutNeeded=true;
        }
        if (win.isDrawnLw() && okToDisplay()) {
          winAnimator.applyEnterAnimationLocked();
        }
        if ((win.mAttrs.flags & WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON) != 0) {
          if (DEBUG_VISIBILITY)           Slog.v(TAG,""String_Node_Str"" + win);
          win.mTurnOnScreen=true;
        }
        if (win.isConfigChanged()) {
          if (DEBUG_CONFIGURATION)           Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ mCurConfiguration);
          outConfig.setTo(mCurConfiguration);
        }
      }
      if ((attrChanges & WindowManager.LayoutParams.FORMAT_CHANGED) != 0) {
        if (!winAnimator.tryChangeFormatInPlaceLocked()) {
          winAnimator.destroySurfaceLocked();
          toBeDisplayed=true;
          surfaceChanged=true;
        }
      }
      try {
        if (!win.mHasSurface) {
          surfaceChanged=true;
        }
        SurfaceControl surfaceControl=winAnimator.createSurfaceLocked();
        if (surfaceControl != null) {
          outSurface.copyFrom(surfaceControl);
          if (SHOW_TRANSACTIONS)           Slog.i(TAG,""String_Node_Str"" + outSurface + ""String_Node_Str"");
        }
 else {
          outSurface.release();
        }
      }
 catch (      Exception e) {
        mInputMonitor.updateInputWindowsLw(true);
        Slog.w(TAG,""String_Node_Str"" + client + ""String_Node_Str""+ win.mAttrs.getTitle()+ ""String_Node_Str"",e);
        Binder.restoreCallingIdentity(origId);
        return 0;
      }
      if (toBeDisplayed) {
        focusMayChange=isDefaultDisplay;
      }
      if (win.mAttrs.type == TYPE_INPUT_METHOD && mInputMethodWindow == null) {
        mInputMethodWindow=win;
        imMayMove=true;
      }
      if (win.mAttrs.type == TYPE_BASE_APPLICATION && win.mAppToken != null && win.mAppToken.startingWindow != null) {
        final int mask=WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
        WindowManager.LayoutParams sa=win.mAppToken.startingWindow.mAttrs;
        sa.flags=(sa.flags & ~mask) | (win.mAttrs.flags & mask);
      }
    }
 else {
      winAnimator.mEnterAnimationPending=false;
      winAnimator.mEnteringAnimation=false;
      if (winAnimator.mSurfaceControl != null) {
        if (DEBUG_VISIBILITY)         Slog.i(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ win.mExiting);
        if (!win.mExiting) {
          surfaceChanged=true;
          int transit=WindowManagerPolicy.TRANSIT_EXIT;
          if (win.mAttrs.type == TYPE_APPLICATION_STARTING) {
            transit=WindowManagerPolicy.TRANSIT_PREVIEW_DONE;
          }
          if (win.isWinVisibleLw() && winAnimator.applyAnimationLocked(transit,false)) {
            focusMayChange=isDefaultDisplay;
            win.mExiting=true;
          }
 else           if (win.mWinAnimator.isAnimating()) {
            win.mExiting=true;
          }
 else           if (win == mWallpaperTarget) {
            win.mExiting=true;
            win.mWinAnimator.mAnimating=true;
          }
 else {
            if (mInputMethodWindow == win) {
              mInputMethodWindow=null;
            }
            winAnimator.destroySurfaceLocked();
          }
          if (mAccessibilityController != null && win.getDisplayId() == Display.DEFAULT_DISPLAY) {
            mAccessibilityController.onWindowTransitionLocked(win,transit);
          }
        }
      }
      outSurface.release();
      if (DEBUG_VISIBILITY)       Slog.i(TAG,""String_Node_Str"" + win);
    }
    if (focusMayChange) {
      if (updateFocusedWindowLocked(UPDATE_FOCUS_WILL_PLACE_SURFACES,false)) {
        imMayMove=false;
      }
    }
    if (imMayMove && (moveInputMethodWindowsIfNeededLocked(false) || toBeDisplayed)) {
      assignLayersLocked(win.getWindowList());
    }
    if (wallpaperMayMove) {
      getDefaultDisplayContentLocked().pendingLayoutChanges|=WindowManagerPolicy.FINISH_LAYOUT_REDO_WALLPAPER;
    }
    final DisplayContent displayContent=win.getDisplayContent();
    if (displayContent != null) {
      displayContent.layoutNeeded=true;
    }
    win.mGivenInsetsPending=(flags & WindowManagerGlobal.RELAYOUT_INSETS_PENDING) != 0;
    configChanged=updateOrientationFromAppTokensLocked(false);
    performLayoutAndPlaceSurfacesLocked();
    if (toBeDisplayed && win.mIsWallpaper) {
      DisplayInfo displayInfo=getDefaultDisplayInfoLocked();
      updateWallpaperOffsetLocked(win,displayInfo.logicalWidth,displayInfo.logicalHeight,false);
    }
    if (win.mAppToken != null) {
      win.mAppToken.updateReportedVisibilityLocked();
    }
    outFrame.set(win.mCompatFrame);
    outOverscanInsets.set(win.mOverscanInsets);
    outContentInsets.set(win.mContentInsets);
    outVisibleInsets.set(win.mVisibleInsets);
    outStableInsets.set(win.mStableInsets);
    outOutsets.set(win.mOutsets);
    if (localLOGV)     Slog.v(TAG,""String_Node_Str"" + client.asBinder() + ""String_Node_Str""+ requestedWidth+ ""String_Node_Str""+ requestedHeight+ ""String_Node_Str""+ viewVisibility+ ""String_Node_Str""+ outFrame+ ""String_Node_Str""+ outSurface);
    if (localLOGV || DEBUG_FOCUS)     Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ focusMayChange);
    inTouchMode=mInTouchMode;
    mInputMonitor.updateInputWindowsLw(true);
    if (DEBUG_LAYOUT) {
      Slog.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ outFrame.toShortString());
    }
  }
  if (configChanged) {
    sendNewConfiguration();
  }
  Binder.restoreCallingIdentity(origId);
  return (inTouchMode ? WindowManagerGlobal.RELAYOUT_RES_IN_TOUCH_MODE : 0) | (toBeDisplayed ? WindowManagerGlobal.RELAYOUT_RES_FIRST_TIME : 0) | (surfaceChanged ? WindowManagerGlobal.RELAYOUT_RES_SURFACE_CHANGED : 0);
}",0.9924826616227752
193958,"SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if ((attrs.flags & WindowManager.LayoutParams.FLAG_SECURE) != 0) {
      flags|=SurfaceControl.SECURE;
    }
    if (mService.isScreenCaptureDisabledLocked(UserHandle.getUserId(mWin.mOwnerUid))) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}","SurfaceControl createSurfaceLocked(){
  final WindowState w=mWin;
  if (mSurfaceControl == null) {
    if (DEBUG_ANIM || DEBUG_ORIENTATION)     Slog.i(TAG,""String_Node_Str"" + this + ""String_Node_Str"");
    mDrawState=DRAW_PENDING;
    if (w.mAppToken != null) {
      if (w.mAppToken.mAppAnimator.animation == null) {
        w.mAppToken.allDrawn=false;
        w.mAppToken.deferClearAllDrawn=false;
      }
 else {
        w.mAppToken.deferClearAllDrawn=true;
      }
    }
    mService.makeWindowFreezingScreenIfNeededLocked(w);
    int flags=SurfaceControl.HIDDEN;
    final WindowManager.LayoutParams attrs=w.mAttrs;
    if (mService.isSecureLocked(w)) {
      flags|=SurfaceControl.SECURE;
    }
    int width;
    int height;
    if ((attrs.flags & LayoutParams.FLAG_SCALED) != 0) {
      width=w.mRequestedWidth;
      height=w.mRequestedHeight;
    }
 else {
      width=w.mCompatFrame.width();
      height=w.mCompatFrame.height();
    }
    if (width <= 0) {
      width=1;
    }
    if (height <= 0) {
      height=1;
    }
    float left=w.mFrame.left + w.mXOffset;
    float top=w.mFrame.top + w.mYOffset;
    width+=attrs.surfaceInsets.left + attrs.surfaceInsets.right;
    height+=attrs.surfaceInsets.top + attrs.surfaceInsets.bottom;
    left-=attrs.surfaceInsets.left;
    top-=attrs.surfaceInsets.top;
    if (DEBUG_VISIBILITY) {
      Slog.v(TAG,""String_Node_Str"" + mSession.mSurfaceSession + ""String_Node_Str""+ this+ ""String_Node_Str""+ width+ ""String_Node_Str""+ height+ ""String_Node_Str""+ left+ ""String_Node_Str""+ top+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ flags);
    }
    mSurfaceShown=false;
    mSurfaceLayer=0;
    mSurfaceAlpha=0;
    mSurfaceX=0;
    mSurfaceY=0;
    w.mLastSystemDecorRect.set(0,0,0,0);
    mLastClipRect.set(0,0,0,0);
    try {
      mSurfaceW=width;
      mSurfaceH=height;
      final boolean isHwAccelerated=(attrs.flags & WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED) != 0;
      final int format=isHwAccelerated ? PixelFormat.TRANSLUCENT : attrs.format;
      if (!PixelFormat.formatHasAlpha(attrs.format) && attrs.surfaceInsets.left == 0 && attrs.surfaceInsets.top == 0 && attrs.surfaceInsets.right == 0 && attrs.surfaceInsets.bottom == 0) {
        flags|=SurfaceControl.OPAQUE;
      }
      mSurfaceFormat=format;
      if (DEBUG_SURFACE_TRACE) {
        mSurfaceControl=new SurfaceTrace(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
 else {
        mSurfaceControl=new SurfaceControl(mSession.mSurfaceSession,attrs.getTitle().toString(),width,height,format,flags);
      }
      w.mHasSurface=true;
      if (SHOW_TRANSACTIONS || SHOW_SURFACE_ALLOC) {
        Slog.i(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ mSession.mSurfaceSession+ ""String_Node_Str""+ mSession.mPid+ ""String_Node_Str""+ attrs.format+ ""String_Node_Str""+ Integer.toHexString(flags)+ ""String_Node_Str""+ this);
      }
    }
 catch (    OutOfResourcesException e) {
      w.mHasSurface=false;
      Slog.w(TAG,""String_Node_Str"");
      mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      mDrawState=NO_SURFACE;
      return null;
    }
catch (    Exception e) {
      w.mHasSurface=false;
      Slog.e(TAG,""String_Node_Str"",e);
      mDrawState=NO_SURFACE;
      return null;
    }
    if (WindowManagerService.localLOGV) {
      Slog.v(TAG,""String_Node_Str"" + mSurfaceControl + ""String_Node_Str""+ w.mFrame.left+ ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ mAnimLayer);
    }
    if (SHOW_LIGHT_TRANSACTIONS) {
      Slog.i(TAG,""String_Node_Str"");
      WindowManagerService.logSurface(w,""String_Node_Str"" + w.mFrame.left + ""String_Node_Str""+ w.mFrame.top+ ""String_Node_Str""+ w.mCompatFrame.width()+ ""String_Node_Str""+ w.mCompatFrame.height()+ ""String_Node_Str""+ mAnimLayer+ ""String_Node_Str"",null);
    }
    SurfaceControl.openTransaction();
    try {
      mSurfaceX=left;
      mSurfaceY=top;
      try {
        mSurfaceControl.setPosition(left,top);
        mSurfaceLayer=mAnimLayer;
        final DisplayContent displayContent=w.getDisplayContent();
        if (displayContent != null) {
          mSurfaceControl.setLayerStack(displayContent.getDisplay().getLayerStack());
        }
        mSurfaceControl.setLayer(mAnimLayer);
        mSurfaceControl.setAlpha(0);
        mSurfaceShown=false;
      }
 catch (      RuntimeException e) {
        Slog.w(TAG,""String_Node_Str"" + w,e);
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
      mLastHidden=true;
    }
  finally {
      SurfaceControl.closeTransaction();
      if (SHOW_LIGHT_TRANSACTIONS)       Slog.i(TAG,""String_Node_Str"");
    }
    if (WindowManagerService.localLOGV)     Slog.v(TAG,""String_Node_Str"" + this);
  }
  return mSurfaceControl;
}",0.9795708859460014
193959,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193960,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193961,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193962,"private final void sendServiceArgsLocked(ServiceRecord r,boolean execInFg,boolean oomAdjusted) throws TransactionTooLargeException {
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    Exception caughtException=null;
    ServiceRecord.StartItem si;
    try {
      si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null && N > 1) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.neededGrants != null) {
        mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,si.getUriPermissionsLocked());
      }
      bumpServiceExecutingLocked(r,execInFg,""String_Node_Str"");
      if (!oomAdjusted) {
        oomAdjusted=true;
        mAm.updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 1) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.taskRemoved,si.id,flags,si.intent);
    }
 catch (    TransactionTooLargeException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + si.intent);
      caughtException=e;
    }
catch (    RemoteException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r);
      caughtException=e;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      caughtException=e;
    }
    if (caughtException != null) {
      final boolean inDestroying=mDestroyingServices.contains(r);
      serviceDoneExecutingLocked(r,inDestroying,inDestroying);
      if (caughtException instanceof TransactionTooLargeException) {
        throw (TransactionTooLargeException)caughtException;
      }
      break;
    }
  }
}","private final void sendServiceArgsLocked(ServiceRecord r,boolean execInFg,boolean oomAdjusted) throws TransactionTooLargeException {
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    Exception caughtException=null;
    ServiceRecord.StartItem si=null;
    try {
      si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null && N > 1) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.neededGrants != null) {
        mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,si.getUriPermissionsLocked());
      }
      bumpServiceExecutingLocked(r,execInFg,""String_Node_Str"");
      if (!oomAdjusted) {
        oomAdjusted=true;
        mAm.updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 1) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.taskRemoved,si.id,flags,si.intent);
    }
 catch (    TransactionTooLargeException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + si.intent);
      caughtException=e;
    }
catch (    RemoteException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r);
      caughtException=e;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      caughtException=e;
    }
    if (caughtException != null) {
      final boolean inDestroying=mDestroyingServices.contains(r);
      serviceDoneExecutingLocked(r,inDestroying,inDestroying);
      if (caughtException instanceof TransactionTooLargeException) {
        throw (TransactionTooLargeException)caughtException;
      }
      break;
    }
  }
}",0.9987364164771292
193963,"private final void sendServiceArgsLocked(ServiceRecord r,boolean execInFg,boolean oomAdjusted) throws TransactionTooLargeException {
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    Exception caughtException=null;
    ServiceRecord.StartItem si;
    try {
      si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null && N > 1) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.neededGrants != null) {
        mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,si.getUriPermissionsLocked());
      }
      bumpServiceExecutingLocked(r,execInFg,""String_Node_Str"");
      if (!oomAdjusted) {
        oomAdjusted=true;
        mAm.updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 1) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.taskRemoved,si.id,flags,si.intent);
    }
 catch (    TransactionTooLargeException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + si.intent);
      caughtException=e;
    }
catch (    RemoteException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r);
      caughtException=e;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      caughtException=e;
    }
    if (caughtException != null) {
      final boolean inDestroying=mDestroyingServices.contains(r);
      serviceDoneExecutingLocked(r,inDestroying,inDestroying);
      if (caughtException instanceof TransactionTooLargeException) {
        throw (TransactionTooLargeException)caughtException;
      }
      break;
    }
  }
}","private final void sendServiceArgsLocked(ServiceRecord r,boolean execInFg,boolean oomAdjusted) throws TransactionTooLargeException {
  final int N=r.pendingStarts.size();
  if (N == 0) {
    return;
  }
  while (r.pendingStarts.size() > 0) {
    Exception caughtException=null;
    ServiceRecord.StartItem si=null;
    try {
      si=r.pendingStarts.remove(0);
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r + ""String_Node_Str""+ r.intent+ ""String_Node_Str""+ si.intent);
      if (si.intent == null && N > 1) {
        continue;
      }
      si.deliveredTime=SystemClock.uptimeMillis();
      r.deliveredStarts.add(si);
      si.deliveryCount++;
      if (si.neededGrants != null) {
        mAm.grantUriPermissionUncheckedFromIntentLocked(si.neededGrants,si.getUriPermissionsLocked());
      }
      bumpServiceExecutingLocked(r,execInFg,""String_Node_Str"");
      if (!oomAdjusted) {
        oomAdjusted=true;
        mAm.updateOomAdjLocked(r.app);
      }
      int flags=0;
      if (si.deliveryCount > 1) {
        flags|=Service.START_FLAG_RETRY;
      }
      if (si.doneExecutingCount > 0) {
        flags|=Service.START_FLAG_REDELIVERY;
      }
      r.app.thread.scheduleServiceArgs(r,si.taskRemoved,si.id,flags,si.intent);
    }
 catch (    TransactionTooLargeException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + si.intent);
      caughtException=e;
    }
catch (    RemoteException e) {
      if (DEBUG_SERVICE)       Slog.v(TAG_SERVICE,""String_Node_Str"" + r);
      caughtException=e;
    }
catch (    Exception e) {
      Slog.w(TAG,""String_Node_Str"",e);
      caughtException=e;
    }
    if (caughtException != null) {
      final boolean inDestroying=mDestroyingServices.contains(r);
      serviceDoneExecutingLocked(r,inDestroying,inDestroying);
      if (caughtException instanceof TransactionTooLargeException) {
        throw (TransactionTooLargeException)caughtException;
      }
      break;
    }
  }
}",0.9987364164771292
193964,"void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    final DisplayInfo displayInfo=displayContent.getDisplayInfo();
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}","void updateSurfaceWindowCrop(final boolean recoveringMemory){
  final WindowState w=mWin;
  final DisplayContent displayContent=w.getDisplayContent();
  if (displayContent == null) {
    return;
  }
  final DisplayInfo displayInfo=displayContent.getDisplayInfo();
  if ((w.mAttrs.flags & LayoutParams.FLAG_SCALED) != 0) {
    w.mSystemDecorRect.set(0,0,w.mRequestedWidth,w.mRequestedHeight);
  }
 else   if (!w.isDefaultDisplay()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
    w.mSystemDecorRect.intersect(-w.mCompatFrame.left,-w.mCompatFrame.top,displayInfo.logicalWidth - w.mCompatFrame.left,displayInfo.logicalHeight - w.mCompatFrame.top);
  }
 else   if (w.mLayer >= mService.mSystemDecorLayer) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mDecorFrame.isEmpty()) {
    w.mSystemDecorRect.set(0,0,w.mCompatFrame.width(),w.mCompatFrame.height());
  }
 else   if (w.mAttrs.type == LayoutParams.TYPE_WALLPAPER && mAnimator.mAnimating) {
    mTmpClipRect.set(w.mSystemDecorRect);
    applyDecorRect(w.mDecorFrame);
    w.mSystemDecorRect.union(mTmpClipRect);
  }
 else {
    applyDecorRect(w.mDecorFrame);
  }
  final boolean fullscreen=w.isFullscreen(displayInfo.appWidth,displayInfo.appHeight);
  final Rect clipRect=mTmpClipRect;
  clipRect.set((mHasClipRect && !fullscreen) ? mClipRect : w.mSystemDecorRect);
  final WindowManager.LayoutParams attrs=w.mAttrs;
  clipRect.left-=attrs.surfaceInsets.left;
  clipRect.top-=attrs.surfaceInsets.top;
  clipRect.right+=attrs.surfaceInsets.right;
  clipRect.bottom+=attrs.surfaceInsets.bottom;
  if (mHasClipRect && fullscreen) {
    clipRect.intersect(mClipRect);
  }
  clipRect.offset(attrs.surfaceInsets.left,attrs.surfaceInsets.top);
  if (!clipRect.equals(mLastClipRect)) {
    mLastClipRect.set(clipRect);
    try {
      if (WindowManagerService.SHOW_TRANSACTIONS)       WindowManagerService.logSurface(w,""String_Node_Str"" + clipRect.toShortString(),null);
      mSurfaceControl.setWindowCrop(clipRect);
    }
 catch (    RuntimeException e) {
      Slog.w(TAG,""String_Node_Str"" + w + ""String_Node_Str""+ clipRect.toShortString(),e);
      if (!recoveringMemory) {
        mService.reclaimSomeSurfaceMemoryLocked(this,""String_Node_Str"",true);
      }
    }
  }
}",0.9245665390677776
193965,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193966,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193967,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193968,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193969,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193970,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193971,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193972,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193973,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193974,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193975,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193976,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193977,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193978,"void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      if (mTargetPackage == null && (mCurrentPackage.applicationInfo.flags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}","void keyValueAgentCleanup(){
  mBackupDataName.delete();
  mStageName.delete();
  try {
    if (mBackupData != null)     mBackupData.close();
  }
 catch (  IOException e) {
  }
  try {
    if (mNewState != null)     mNewState.close();
  }
 catch (  IOException e) {
  }
  mBackupData=mNewState=null;
  mNewStateName.delete();
  if (mCurrentPackage.applicationInfo != null) {
    try {
      mActivityManager.unbindBackupAgent(mCurrentPackage.applicationInfo);
      final int appFlags=mCurrentPackage.applicationInfo.flags;
      final boolean killAfterRestore=(mRestoreDescription.getDataType() == RestoreDescription.TYPE_FULL_STREAM) || ((appFlags & ApplicationInfo.FLAG_KILL_AFTER_RESTORE) != 0);
      if (mTargetPackage == null && killAfterRestore) {
        if (DEBUG)         Slog.d(TAG,""String_Node_Str"" + mCurrentPackage.applicationInfo.processName);
        mActivityManager.killApplicationProcess(mCurrentPackage.applicationInfo.processName,mCurrentPackage.applicationInfo.uid);
      }
    }
 catch (    RemoteException e) {
    }
  }
  mBackupHandler.removeMessages(MSG_TIMEOUT,this);
synchronized (mCurrentOpLock) {
    mCurrentOperations.clear();
  }
}",0.8678373382624769
193979,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193980,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193981,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193982,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193983,"/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      return postResult(doInBackground(mParams));
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}","/** 
 * Creates a new asynchronous task. This constructor must be invoked on the UI thread.
 */
public AsyncTask(){
  mWorker=new WorkerRunnable<Params,Result>(){
    public Result call() throws Exception {
      mTaskInvoked.set(true);
      Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
      Result result=doInBackground(mParams);
      Binder.flushPendingCommands();
      return postResult(result);
    }
  }
;
  mFuture=new FutureTask<Result>(mWorker){
    @Override protected void done(){
      try {
        postResultIfNotInvoked(get());
      }
 catch (      InterruptedException e) {
        android.util.Log.w(LOG_TAG,e);
      }
catch (      ExecutionException e) {
        throw new RuntimeException(""String_Node_Str"",e.getCause());
      }
catch (      CancellationException e) {
        postResultIfNotInvoked(null);
      }
    }
  }
;
}",0.939773404889684
193984,"public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  return postResult(doInBackground(mParams));
}","public Result call() throws Exception {
  mTaskInvoked.set(true);
  Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
  Result result=doInBackground(mParams);
  Binder.flushPendingCommands();
  return postResult(result);
}",0.774818401937046
193985,"public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
}","public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
  mScrimHandler=new Handler();
}",0.8669527896995708
193986,"public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrim.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}","public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrimHandler.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}",0.9859154929577464
193987,"public void hideScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}","public void hideScrim(){
  mScrimHandler.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}",0.9757785467128028
193988,"public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
}","public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
  mScrimHandler=new Handler();
}",0.8669527896995708
193989,"public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrim.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}","public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrimHandler.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}",0.9859154929577464
193990,"public void hideScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}","public void hideScrim(){
  mScrimHandler.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}",0.9757785467128028
193991,"public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
}","public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
  mScrimHandler=new Handler();
}",0.8669527896995708
193992,"public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrim.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}","public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrimHandler.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}",0.9859154929577464
193993,"public void hideScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}","public void hideScrim(){
  mScrimHandler.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}",0.9757785467128028
193994,"public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
}","public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
  mScrimHandler=new Handler();
}",0.8669527896995708
193995,"public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrim.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}","public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrimHandler.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}",0.9859154929577464
193996,"public void hideScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}","public void hideScrim(){
  mScrimHandler.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}",0.9757785467128028
193997,"public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
}","public KeyguardServiceDelegate(Context context){
  mContext=context;
  mScrim=createScrim(context);
  mScrimHandler=new Handler();
}",0.8669527896995708
193998,"public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrim.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}","public void showScrim(){
synchronized (mKeyguardState) {
    if (!mKeyguardState.deviceHasKeyguard)     return;
    mScrimHandler.post(new Runnable(){
      @Override public void run(){
        mScrim.setVisibility(View.VISIBLE);
      }
    }
);
  }
}",0.9859154929577464
193999,"public void hideScrim(){
  mScrim.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}","public void hideScrim(){
  mScrimHandler.post(new Runnable(){
    @Override public void run(){
      mScrim.setVisibility(View.GONE);
    }
  }
);
}",0.9757785467128028
194000,"ActivityRecord(ActivityManagerService _service,ProcessRecord _caller,int _launchedFromUid,String _launchedFromPackage,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified,ActivityStackSupervisor supervisor,ActivityContainer container,Bundle options){
  service=_service;
  appToken=new Token(this,service);
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  launchedFromPackage=_launchedFromPackage;
  userId=UserHandle.getUserId(aInfo.applicationInfo.uid);
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  stackConfigOverride=(container != null) ? container.mStack.mOverrideConfig : Configuration.EMPTY;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  visible=true;
  nowVisible=false;
  idle=false;
  hasBeenLaunched=false;
  mStackSupervisor=supervisor;
  mInitialActivityContainer=container;
  if (options != null) {
    pendingOptions=new ActivityOptions(options);
    mLaunchTaskBehind=pendingOptions.getLaunchTaskBehind();
    PendingIntent usageReport=pendingOptions.getUsageTimeReport();
    if (usageReport != null) {
      appTimeTracker=new AppTimeTracker(usageReport);
    }
  }
  haveState=true;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    appInfo=aInfo.applicationInfo;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    logo=aInfo.getLogoResource();
    theme=aInfo.getThemeResource();
    realTheme=theme;
    if (realTheme == 0) {
      realTheme=aInfo.applicationInfo.targetSdkVersion < Build.VERSION_CODES.HONEYCOMB ? android.R.style.Theme : android.R.style.Theme_Holo;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0) {
      windowFlags|=WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,realTheme,com.android.internal.R.styleable.Window,userId);
    final boolean translucent=ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) || (!ent.array.hasValue(com.android.internal.R.styleable.Window_windowIsTranslucent) && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowSwipeToDismiss,false));
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !translucent;
    noDisplay=ent != null && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowNoDisplay,false);
    if ((!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) && Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME)&& _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && isNotResolverActivity()) {
      mActivityType=HOME_ACTIVITY_TYPE;
    }
 else     if (realActivity.getClassName().contains(RECENTS_PACKAGE_NAME)) {
      mActivityType=RECENTS_ACTIVITY_TYPE;
    }
 else {
      mActivityType=APPLICATION_ACTIVITY_TYPE;
    }
    immersive=(aInfo.flags & ActivityInfo.FLAG_IMMERSIVE) != 0;
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    appInfo=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    noDisplay=false;
    mActivityType=APPLICATION_ACTIVITY_TYPE;
    immersive=false;
  }
}","ActivityRecord(ActivityManagerService _service,ProcessRecord _caller,int _launchedFromUid,String _launchedFromPackage,Intent _intent,String _resolvedType,ActivityInfo aInfo,Configuration _configuration,ActivityRecord _resultTo,String _resultWho,int _reqCode,boolean _componentSpecified,ActivityStackSupervisor supervisor,ActivityContainer container,Bundle options){
  service=_service;
  appToken=new Token(this,service);
  info=aInfo;
  launchedFromUid=_launchedFromUid;
  launchedFromPackage=_launchedFromPackage;
  userId=UserHandle.getUserId(aInfo.applicationInfo.uid);
  intent=_intent;
  shortComponentName=_intent.getComponent().flattenToShortString();
  resolvedType=_resolvedType;
  componentSpecified=_componentSpecified;
  configuration=_configuration;
  stackConfigOverride=(container != null) ? container.mStack.mOverrideConfig : Configuration.EMPTY;
  resultTo=_resultTo;
  resultWho=_resultWho;
  requestCode=_reqCode;
  state=ActivityState.INITIALIZING;
  frontOfTask=false;
  launchFailed=false;
  stopped=false;
  delayedResume=false;
  finishing=false;
  configDestroy=false;
  keysPaused=false;
  inHistory=false;
  visible=true;
  nowVisible=false;
  idle=false;
  hasBeenLaunched=false;
  mStackSupervisor=supervisor;
  mInitialActivityContainer=container;
  if (options != null) {
    pendingOptions=new ActivityOptions(options);
    mLaunchTaskBehind=pendingOptions.getLaunchTaskBehind();
    PendingIntent usageReport=pendingOptions.getUsageTimeReport();
    if (usageReport != null) {
      appTimeTracker=new AppTimeTracker(usageReport);
    }
  }
  haveState=true;
  if (aInfo != null) {
    if (aInfo.targetActivity == null || aInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE || aInfo.launchMode == ActivityInfo.LAUNCH_SINGLE_TOP) {
      realActivity=_intent.getComponent();
    }
 else {
      realActivity=new ComponentName(aInfo.packageName,aInfo.targetActivity);
    }
    taskAffinity=aInfo.taskAffinity;
    stateNotNeeded=(aInfo.flags & ActivityInfo.FLAG_STATE_NOT_NEEDED) != 0;
    appInfo=aInfo.applicationInfo;
    nonLocalizedLabel=aInfo.nonLocalizedLabel;
    labelRes=aInfo.labelRes;
    if (nonLocalizedLabel == null && labelRes == 0) {
      ApplicationInfo app=aInfo.applicationInfo;
      nonLocalizedLabel=app.nonLocalizedLabel;
      labelRes=app.labelRes;
    }
    icon=aInfo.getIconResource();
    logo=aInfo.getLogoResource();
    theme=aInfo.getThemeResource();
    realTheme=theme;
    if (realTheme == 0) {
      realTheme=aInfo.applicationInfo.targetSdkVersion < Build.VERSION_CODES.HONEYCOMB ? android.R.style.Theme : android.R.style.Theme_Holo;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0) {
      windowFlags|=WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED;
    }
    if ((aInfo.flags & ActivityInfo.FLAG_MULTIPROCESS) != 0 && _caller != null && (aInfo.applicationInfo.uid == Process.SYSTEM_UID || aInfo.applicationInfo.uid == _caller.info.uid)) {
      processName=_caller.processName;
    }
 else {
      processName=aInfo.processName;
    }
    if (intent != null && (aInfo.flags & ActivityInfo.FLAG_EXCLUDE_FROM_RECENTS) != 0) {
      intent.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);
    }
    packageName=aInfo.applicationInfo.packageName;
    launchMode=aInfo.launchMode;
    AttributeCache.Entry ent=AttributeCache.instance().get(packageName,realTheme,com.android.internal.R.styleable.Window,userId);
    final boolean translucent=ent != null && (ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsTranslucent,false) || (!ent.array.hasValue(com.android.internal.R.styleable.Window_windowIsTranslucent) && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowSwipeToDismiss,false)));
    fullscreen=ent != null && !ent.array.getBoolean(com.android.internal.R.styleable.Window_windowIsFloating,false) && !translucent;
    noDisplay=ent != null && ent.array.getBoolean(com.android.internal.R.styleable.Window_windowNoDisplay,false);
    if ((!_componentSpecified || _launchedFromUid == Process.myUid() || _launchedFromUid == 0) && Intent.ACTION_MAIN.equals(_intent.getAction()) && _intent.hasCategory(Intent.CATEGORY_HOME)&& _intent.getCategories().size() == 1 && _intent.getData() == null && _intent.getType() == null && (intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0 && isNotResolverActivity()) {
      mActivityType=HOME_ACTIVITY_TYPE;
    }
 else     if (realActivity.getClassName().contains(RECENTS_PACKAGE_NAME)) {
      mActivityType=RECENTS_ACTIVITY_TYPE;
    }
 else {
      mActivityType=APPLICATION_ACTIVITY_TYPE;
    }
    immersive=(aInfo.flags & ActivityInfo.FLAG_IMMERSIVE) != 0;
  }
 else {
    realActivity=null;
    taskAffinity=null;
    stateNotNeeded=false;
    appInfo=null;
    processName=null;
    packageName=null;
    fullscreen=true;
    noDisplay=false;
    mActivityType=APPLICATION_ACTIVITY_TYPE;
    immersive=false;
  }
}",0.9982647749311012
