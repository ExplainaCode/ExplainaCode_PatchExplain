record_number,buggy_code,fixed_code,code_similarity
187001,"public int measure(){
  return m.mac1(mac_size,array1,array2) - expect;
}","public static void measure(){
  m.mac1(hwm.max_test_size,hwm.test_vector,hwm.test_vector);
}",0.5333333333333333
187002,"public static void main(String[] args){
  MacTestHW mt=new MacTestHW();
  mt.measure();
}","public static void main(String[] args){
  hwm=new HWMethTest();
  hwm.Prepare_Noisy_Vector(hwm.max_test_size);
  m=mac_coprocessor.getInstance();
  measure();
}",0.5943775100401606
187003,"private void updateReport(WcetKey key,LocalWCETSolution sol){
  Map<CFGNode,WcetCost> nodeCosts=sol.getNodeCostMap();
  Hashtable<CFGNode,String> nodeFlowCostDescrs=new Hashtable<CFGNode,String>();
  MethodInfo m=key.m;
  for (  Entry<CFGNode,WcetCost> entry : nodeCosts.entrySet()) {
    CFGNode n=entry.getKey();
    WcetCost cost=entry.getValue();
    if (sol.getNodeFlow(n) > 0) {
      nodeFlowCostDescrs.put(n,cost.toString());
      BasicBlock basicBlock=n.getBasicBlock();
      if (basicBlock != null) {
        int pos=basicBlock.getFirstInstruction().getPosition();
        ClassInfo cli=basicBlock.getClassInfo();
        LineNumberTable lineNumberTable=basicBlock.getMethodInfo().getMethod().getLineNumberTable();
        int sourceLine=lineNumberTable.getSourceLine(pos);
        ClassReport cr=project.getReport().getClassReport(cli);
        Long oldCost=(Long)cr.getLineProperty(sourceLine,""String_Node_Str"");
        if (oldCost == null)         oldCost=0L;
        cr.addLineProperty(sourceLine,""String_Node_Str"",oldCost + sol.getNodeFlow(n) * nodeCosts.get(n).getCost());
        for (        InstructionHandle ih : basicBlock.getInstructions()) {
          sourceLine=lineNumberTable.getSourceLine(ih.getPosition());
          cr.addLineProperty(sourceLine,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      nodeFlowCostDescrs.put(n,""String_Node_Str"" + nodeCosts.get(n).getCost());
    }
  }
  logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ sol.getCost());
  Map<String,Object> stats=new Hashtable<String,Object>();
  stats.put(""String_Node_Str"",sol.getCost());
  stats.put(""String_Node_Str"",key.ctx);
  stats.put(""String_Node_Str"",project.getProcessorModel().getMethodCache().allFit(m));
  project.getReport().addDetailedReport(m,""String_Node_Str"" + key.ctx.toString(),stats,nodeFlowCostDescrs,sol.getEdgeFlow());
}","private void updateReport(WcetKey key,LocalWCETSolution sol){
  Map<CFGNode,WcetCost> nodeCosts=sol.getNodeCostMap();
  Hashtable<CFGNode,String> nodeFlowCostDescrs=new Hashtable<CFGNode,String>();
  MethodInfo m=key.m;
  for (  Entry<CFGNode,WcetCost> entry : nodeCosts.entrySet()) {
    CFGNode n=entry.getKey();
    WcetCost cost=entry.getValue();
    if (sol.getNodeFlow(n) > 0) {
      nodeFlowCostDescrs.put(n,cost.toString());
      BasicBlock basicBlock=n.getBasicBlock();
      if (basicBlock != null) {
        TreeSet<Integer> lineRange=basicBlock.getSourceLineRange();
        if (lineRange.isEmpty()) {
          Project.logger.error(""String_Node_Str"");
        }
        ClassInfo cli=basicBlock.getClassInfo();
        ClassReport cr=project.getReport().getClassReport(cli);
        Long oldCost=(Long)cr.getLineProperty(lineRange.first(),""String_Node_Str"");
        if (oldCost == null)         oldCost=0L;
        cr.addLineProperty(lineRange.first(),""String_Node_Str"",oldCost + sol.getNodeFlow(n) * nodeCosts.get(n).getCost());
        for (        int i : lineRange) {
          cr.addLineProperty(i,""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
 else {
      nodeFlowCostDescrs.put(n,""String_Node_Str"" + nodeCosts.get(n).getCost());
    }
  }
  logger.info(""String_Node_Str"" + key + ""String_Node_Str""+ sol.getCost());
  Map<String,Object> stats=new Hashtable<String,Object>();
  stats.put(""String_Node_Str"",sol.getCost());
  stats.put(""String_Node_Str"",key.ctx);
  stats.put(""String_Node_Str"",project.getProcessorModel().getMethodCache().allFit(m));
  project.getReport().addDetailedReport(m,""String_Node_Str"" + key.ctx.toString(),stats,nodeFlowCostDescrs,sol.getEdgeFlow());
}",0.7274755927475592
187004,"/** 
 * <p>Compact, human-readable String representation of the basic block.</p> <p>Mixed Stack notation, with at most one side-effect statement per line.</p>  Example:<br/>  {@code local_0 <- sipush[3] sipush[4] dup add add} <br/>{@code local_1 <- load[local_0] load[local_0] mul}
 */
public String dump(){
  StringBuilder sb=new StringBuilder();
  LineNumberTable lnt=methodInfo.getMethod().getLineNumberTable();
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  Iterator<InstructionHandle> ihIter=this.instructions.iterator();
  StringBuilder lineBuilder=new StringBuilder();
  InstructionHandle first=null;
  while (ihIter.hasNext()) {
    InstructionHandle ih=ihIter.next();
    String line=null;
    if (first == null) {
      first=ih;
    }
 else {
      lineBuilder.append(""String_Node_Str"");
    }
    Instruction ii=ih.getInstruction();
    if (ii instanceof ReturnInstruction) {
      line=ii.getName() + ""String_Node_Str"" + lineBuilder.toString();
    }
 else     if (ii instanceof StoreInstruction) {
      line=""String_Node_Str"" + ((StoreInstruction)ii).getIndex() + ""String_Node_Str""+ lineBuilder.toString();
    }
 else     if (ii instanceof FieldInstruction && ii.getName().startsWith(""String_Node_Str"")) {
      line=""String_Node_Str"" + ((FieldInstruction)ii).getFieldName(cpg) + ""String_Node_Str""+ lineBuilder.toString();
    }
 else {
      lineBuilder.append(ii.getName());
    }
    if (!ihIter.hasNext()) {
      line=lineBuilder.toString();
    }
    if (line != null) {
      int l1=lnt.getSourceLine(first.getPosition());
      int l2=lnt.getSourceLine(ih.getPosition());
      if (l1 != l2)       sb.append(""String_Node_Str"" + l1 + ""String_Node_Str""+ l2+ ""String_Node_Str"");
 else       sb.append(""String_Node_Str"" + l1 + ""String_Node_Str"");
      sb.append(line + ""String_Node_Str"");
      first=null;
      lineBuilder=new StringBuilder();
    }
  }
  return sb.toString();
}","/** 
 * <p>Compact, human-readable String representation of the basic block.</p> <p>Mixed Stack notation, with at most one side-effect statement per line.</p>  Example:<br/>  {@code local_0 <- sipush[3] sipush[4] dup add add} <br/>{@code local_1 <- load[local_0] load[local_0] mul}
 */
public String dump(){
  StringBuilder sb=new StringBuilder();
  LineNumberTable lnt=methodInfo.getMethod().getLineNumberTable();
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  Iterator<InstructionHandle> ihIter=this.instructions.iterator();
  StringBuilder lineBuilder=new StringBuilder();
  InstructionHandle first=null;
  while (ihIter.hasNext()) {
    InstructionHandle ih=ihIter.next();
    String line=null;
    if (first == null) {
      first=ih;
    }
 else {
      lineBuilder.append(""String_Node_Str"");
    }
    Instruction ii=ih.getInstruction();
    if (ii instanceof ReturnInstruction) {
      line=ii.getName() + ""String_Node_Str"" + lineBuilder.toString();
    }
 else     if (ii instanceof StoreInstruction) {
      line=""String_Node_Str"" + ((StoreInstruction)ii).getIndex() + ""String_Node_Str""+ lineBuilder.toString();
    }
 else     if (ii instanceof FieldInstruction && ii.getName().startsWith(""String_Node_Str"")) {
      line=""String_Node_Str"" + ((FieldInstruction)ii).getFieldName(cpg) + ""String_Node_Str""+ lineBuilder.toString();
    }
 else {
      lineBuilder.append(ii.getName());
    }
    if (!ihIter.hasNext()) {
      line=lineBuilder.toString();
    }
    if (line != null) {
      int l1=lnt.getSourceLine(first.getPosition());
      int l2=lnt.getSourceLine(ih.getPosition());
      if (l1 != l2)       sb.append(""String_Node_Str"" + (l1 < 0 ? ""String_Node_Str"" : l1) + ""String_Node_Str""+ (l2 < 0 ? ""String_Node_Str"" : l2)+ ""String_Node_Str"");
 else       sb.append(""String_Node_Str"" + (l1 < 0 ? ""String_Node_Str"" : l1) + ""String_Node_Str"");
      sb.append(line + ""String_Node_Str"");
      first=null;
      lineBuilder=new StringBuilder();
    }
  }
  return sb.toString();
}",0.976257339800868
187005,"private void computeMethodNestingDepths(){
  this.methodMNDs=new HashMap<MethodInfo,Integer>();
  for (  MethodInfo m : project.getCallGraph().getImplementedMethods()) {
    int maxCaller=0;
    ControlFlowGraph cfgInvoked=project.getFlowGraph(m);
    for (    Pair<SuperInvokeEdge,SuperReturnEdge> callSite : superGraph.getCallSites(cfgInvoked)) {
      InvokeNode callSiteNode=callSite.fst().getInvokeNode();
      ControlFlowGraph cfgInvoker=callSiteNode.invokerFlowGraph();
      int callerRootDepth=methodMNDs.get(cfgInvoker.getMethodInfo());
      int nestingDepth=cfgInvoker.getLoopColoring().getLoopColor(callSiteNode).size();
      maxCaller=Math.max(maxCaller,callerRootDepth + nestingDepth);
    }
    methodMNDs.put(m,maxCaller);
  }
  if (config.debug)   MiscUtils.printMap(System.out,methodMNDs,30);
}","private void computeMethodNestingDepths(){
  this.methodMNDs=new HashMap<MethodInfo,Integer>();
  for (  MethodInfo m : project.getCallGraph().getImplementedMethods(project.getTargetMethod())) {
    int maxCaller=0;
    ControlFlowGraph cfgInvoked=project.getFlowGraph(m);
    for (    Pair<SuperInvokeEdge,SuperReturnEdge> callSite : superGraph.getCallSites(cfgInvoked)) {
      InvokeNode callSiteNode=callSite.fst().getInvokeNode();
      ControlFlowGraph cfgInvoker=callSiteNode.invokerFlowGraph();
      int callerRootDepth=methodMNDs.get(cfgInvoker.getMethodInfo());
      int nestingDepth=cfgInvoker.getLoopColoring().getLoopColor(callSiteNode).size();
      maxCaller=Math.max(maxCaller,callerRootDepth + nestingDepth);
    }
    methodMNDs.put(m,maxCaller);
  }
  if (config.debug)   MiscUtils.printMap(System.out,methodMNDs,30);
}",0.9848942598187312
187006,"private void calculateDepthAndHeight(){
  if (this.maxDistanceToRoot != null)   return;
  this.maxDistanceToRoot=new HashMap<CallGraphNode,Integer>();
  this.maxCallStackLeaf=this.getRootNode();
  this.maxCallstackDAG=new HashMap<CallGraphNode,CallGraphNode>();
  this.subgraphHeight=new HashMap<CallGraphNode,Integer>();
  Vector<CallGraphNode> toList=new Vector<CallGraphNode>();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  int globalMaxDist=0;
  while (toIter.hasNext()) {
    CallGraphNode node=toIter.next();
    toList.add(node);
    int maxDist=0;
    CallGraphNode maxCallStackPred=null;
    for (    DefaultEdge e : callGraph.incomingEdgesOf(node)) {
      CallGraphNode pred=callGraph.getEdgeSource(e);
      int distViaPred=maxDistanceToRoot.get(pred) + 1;
      if (distViaPred > maxDist) {
        maxDist=distViaPred;
        maxCallStackPred=pred;
      }
    }
    this.maxDistanceToRoot.put(node,maxDist);
    if (maxCallStackPred != null)     this.maxCallstackDAG.put(node,maxCallStackPred);
    if (maxDist > globalMaxDist)     this.maxCallStackLeaf=node;
  }
  Collections.reverse(toList);
  for (  CallGraphNode n : toList) {
    int maxHeight=0;
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      int predHeight=subgraphHeight.get(callGraph.getEdgeTarget(e));
      maxHeight=Math.max(maxHeight,predHeight);
    }
    subgraphHeight.put(n,maxHeight);
  }
}","private void calculateDepthAndHeight(){
  if (this.maxDistanceToRoot != null)   return;
  this.maxDistanceToRoot=new HashMap<CallGraphNode,Integer>();
  this.maxCallStackLeaf=this.getRootNode();
  this.maxCallstackDAG=new HashMap<CallGraphNode,CallGraphNode>();
  this.subgraphHeight=new HashMap<CallGraphNode,Integer>();
  Vector<CallGraphNode> toList=new Vector<CallGraphNode>();
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  int globalMaxDist=0;
  while (toIter.hasNext()) {
    CallGraphNode node=toIter.next();
    toList.add(node);
    int maxDist=0;
    CallGraphNode maxCallStackPred=null;
    for (    DefaultEdge e : callGraph.incomingEdgesOf(node)) {
      CallGraphNode pred=callGraph.getEdgeSource(e);
      int distViaPred=maxDistanceToRoot.get(pred) + 1;
      if (distViaPred > maxDist) {
        maxDist=distViaPred;
        maxCallStackPred=pred;
      }
    }
    this.maxDistanceToRoot.put(node,maxDist);
    if (maxCallStackPred != null)     this.maxCallstackDAG.put(node,maxCallStackPred);
    if (maxDist > globalMaxDist)     this.maxCallStackLeaf=node;
  }
  Collections.reverse(toList);
  for (  CallGraphNode n : toList) {
    int maxHeight=0;
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      int predHeight=subgraphHeight.get(callGraph.getEdgeTarget(e));
      maxHeight=Math.max(maxHeight,predHeight + 1);
    }
    subgraphHeight.put(n,maxHeight);
  }
}",0.9986513823331086
187007,"/** 
 * Get the maximum height of the call stack. <p>A leaf method has height 1, an abstract method's height is the maximum height of its children, and the height of an implemented method is the maximum height of its children + 1. <p>
 * @return
 */
public Vector<CallGraphNode> getMaximalCallStack(){
  Map<CallGraphNode,Integer> depth=new HashMap<CallGraphNode,Integer>();
  HashMap<CallGraphNode,CallGraphNode> prev=new HashMap<CallGraphNode,CallGraphNode>();
  CallGraphNode deepestLeaf=rootNode;
  TopologicalOrderIterator<CallGraphNode,DefaultEdge> toIter=new TopologicalOrderIterator<CallGraphNode,DefaultEdge>(callGraph);
  depth.put(rootNode,0);
  int maxDepth=0;
  Set<CallGraphNode> visited=new HashSet<CallGraphNode>();
  while (toIter.hasNext()) {
    CallGraphNode n=toIter.next();
    visited.add(n);
    int thisDepth=depth.get(n);
    for (    DefaultEdge e : callGraph.outgoingEdgesOf(n)) {
      CallGraphNode target=callGraph.getEdgeTarget(e);
      if (visited.contains(target)) {
        throw new AssertionError(""String_Node_Str"");
      }
      int oldDepth;
{
        Integer tmp=depth.get(target);
        oldDepth=tmp == null ? 0 : tmp.intValue();
      }
      if (thisDepth + 1 > oldDepth) {
        depth.put(target,thisDepth + 1);
        prev.put(target,n);
        if (thisDepth + 1 > maxDepth) {
          maxDepth=thisDepth + 1;
          deepestLeaf=target;
        }
      }
    }
  }
  Vector<CallGraphNode> maxCallStack=new Vector<CallGraphNode>();
  CallGraphNode n=deepestLeaf;
  while (prev.containsKey(n)) {
    maxCallStack.add(n);
    n=prev.get(n);
  }
  maxCallStack.add(n);
  Collections.reverse(maxCallStack);
  return maxCallStack;
}","/** 
 * Get the maximum height of the call stack. <p>A leaf method has height 1, an abstract method's height is the maximum height of its children, and the height of an implemented method is the maximum height of its children + 1. <p>
 * @return
 */
public Vector<CallGraphNode> getMaximalCallStack(){
  if (maxCallStackLeaf == null)   calculateDepthAndHeight();
  CallGraphNode n=this.maxCallStackLeaf;
  Vector<CallGraphNode> maxCallStack=new Vector<CallGraphNode>();
  maxCallStack.add(n);
  while (maxCallstackDAG.containsKey(n)) {
    n=maxCallstackDAG.get(n);
    maxCallStack.add(n);
  }
  Collections.reverse(maxCallStack);
  return maxCallStack;
}",0.2796066695168875
187008,"/** 
 * Build a callgraph rooted at the given method
 * @param cli The class loader (with classes loaded)
 * @param className The class where the root method of the callgraph is located
 * @param methodSig The root method of the call graph. Either a plain method name(e.g. ""measure""), if unique, or a method with signature (e.g. ""measure()Z"")
 * @throws MethodNotFoundException 
 */
public static CallGraph buildCallGraph(WcetAppInfo cli,String className,String methodSig) throws MethodNotFoundException {
  MethodInfo rootMethod=cli.searchMethod(className,methodSig);
  CallGraph cg=new CallGraph(cli,rootMethod);
  cg.build();
  return cg;
}","/** 
 * Build a callgraph rooted at the given method
 * @param appInfo   The application (with classes loaded)
 * @param className The class where the root method of the callgraph is located
 * @param methodSig The root method of the call graph. Either a plain method name(e.g. ""measure""), if unique, or a method with signature (e.g. ""measure()Z"")
 * @throws MethodNotFoundException 
 */
public static CallGraph buildCallGraph(WcetAppInfo appInfo,String className,String methodSig) throws MethodNotFoundException {
  MethodInfo rootMethod=appInfo.searchMethod(className,methodSig);
  CallGraph cg=new CallGraph(appInfo,rootMethod);
  cg.build();
  return cg;
}",0.9501151189562548
187009,"public void exportDOT(Writer w) throws IOException {
  new AdvancedDOTExporter<CallGraphNode,DefaultEdge>().exportDOT(w,this.callGraph);
}","/** 
 * Export callgraph as .dot file
 * @param w
 * @throws IOException
 */
public void exportDOT(Writer w) throws IOException {
  new AdvancedDOTExporter<CallGraphNode,DefaultEdge>().exportDOT(w,this.callGraph);
}",0.7818696883852692
187010,"/** 
 * get non-abstract methods reachable from the given method, in DFS order
 * @return
 */
public List<MethodInfo> getReachableImplementations(MethodInfo rootMethod){
  List<MethodInfo> implemented=new Vector<MethodInfo>();
  CallGraphNode root=this.getNode(rootMethod);
  DepthFirstIterator<CallGraphNode,DefaultEdge> ti=new DepthFirstIterator<CallGraphNode,DefaultEdge>(callGraph,root);
  ti.setCrossComponentTraversal(false);
  while (ti.hasNext()) {
    MethodInfo m=ti.next().getMethodImpl();
    if (m != null)     implemented.add(m);
  }
  return implemented;
}","/** 
 * get non-abstract methods reachable from the given method, in DFS order
 * @return
 */
public List<MethodInfo> getReachableImplementations(MethodInfo rootMethod){
  List<MethodInfo> implemented=new Vector<MethodInfo>();
  CallGraphNode root=this.getNode(rootMethod);
  DepthFirstIterator<CallGraphNode,DefaultEdge> ti=new DepthFirstIterator<CallGraphNode,DefaultEdge>(callGraph,root);
  ti.setCrossComponentTraversal(false);
  while (ti.hasNext()) {
    MethodInfo m=ti.next().getMethodImpl();
    if (m == null)     throw new AssertionError(""String_Node_Str"");
    implemented.add(m);
  }
  return implemented;
}",0.9571788413098236
187011,"public int getMaxHeight(){
  return this.getMaximalCallStack().size();
}","public int getMaxHeight(){
  calculateDepthAndHeight();
  return this.subgraphHeight.get(this.rootNode);
}",0.5730337078651685
187012,"/** 
 * Initialize a CallGraph object.
 * @param appInfo
 * @param rootMethod The root method of the callgraph. Must not be abstract.
 */
protected CallGraph(WcetAppInfo appInfo,MethodInfo rootMethod){
  this.appInfo=appInfo;
  this.callGraph=new DefaultDirectedGraph<CallGraphNode,DefaultEdge>(DefaultEdge.class);
  this.rootNode=new CallGraphNode(rootMethod);
  this.callGraph.addVertex(rootNode);
}","/** 
 * Initialize a CallGraph object.
 * @param appInfo    Uplink to the application info.
 * @param rootMethod The root method of the callgraph (not abstract).
 */
protected CallGraph(WcetAppInfo appInfo,MethodInfo rootMethod){
  this.appInfo=appInfo;
  this.callGraph=new DefaultDirectedGraph<CallGraphNode,DefaultEdge>(DefaultEdge.class);
  this.rootNode=new CallGraphNode(rootMethod);
  this.callGraph.addVertex(rootNode);
}",0.9156626506024096
187013,"private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
}","private void build() throws MethodNotFoundException {
  this.buildGraph();
  classInfos=new HashSet<ClassInfo>();
  for (  CallGraphNode cgn : callGraph.vertexSet()) {
    classInfos.add(cgn.getReferencedMethod().getReceiver());
  }
  Pair<List<CallGraphNode>,List<CallGraphNode>> cycle=DirectedCycleDetector.findCycle(callGraph,rootNode);
  if (cycle != null) {
    throw new AssertionError(cyclicCallGraphMsg(cycle));
  }
  invalidate();
}",0.9815242494226328
187014,"protected CallGraphNode getNode(MethodInfo m){
  return nodeMap.get(m);
}","private CallGraphNode getNode(MethodInfo m){
  return nodeMap.get(m);
}",0.9444444444444444
187015,"/** 
 * Compute the maximal total cache-miss penalty for <strong>invoking and executing</strong> m. <p> Precondition: The set of all methods reachable from <code>m</code> fit into the cache </p><p> Algorithm: If all methods reachable from <code>m</code> (including <code>m</code>) fit  into the cache, we can compute the WCET of <m> using the   {@link ALWAYS_HIT@} cacheapproximation, and then add the sum of cache miss penalties for every reachable method. </p><p> Note that when using this approximation, we attribute the total cache miss cost to the invocation of that method. </p><p> Explanation: We know that there is only one cache miss per method, but for FIFO caches we do not know when the cache miss will occur (on return or invoke), except for leaf methods. Let <code>h</code> be the number of cycles hidden by <strong>any</strong> return or  invoke instructions. Then the cache miss penalty is bounded by <code>(b-h)</code> per  method. </p>
 * @param m The method invoked
 * @return the cache miss penalty
 */
public long getMissOnceCummulativeCacheCost(MethodInfo m){
  long miss=0;
  Iterator<CallGraphNode> iter=project.getCallGraph().getReachableMethods(m);
  while (iter.hasNext()) {
    CallGraphNode n=iter.next();
    miss+=missOnceCost(n.getMethodImpl());
  }
  return miss;
}","/** 
 * Compute the maximal total cache-miss penalty for <strong>invoking and executing</strong> m. <p> Precondition: The set of all methods reachable from <code>m</code> fit into the cache </p><p> Algorithm: If all methods reachable from <code>m</code> (including <code>m</code>) fit  into the cache, we can compute the WCET of <m> using the   {@link ALWAYS_HIT@} cacheapproximation, and then add the sum of cache miss penalties for every reachable method. </p><p> Note that when using this approximation, we attribute the total cache miss cost to the invocation of that method. </p><p> Explanation: We know that there is only one cache miss per method, but for FIFO caches we do not know when the cache miss will occur (on return or invoke), except for leaf methods. Let <code>h</code> be the number of cycles hidden by <strong>any</strong> return or  invoke instructions. Then the cache miss penalty is bounded by <code>(b-h)</code> per  method. </p>
 * @param m The method invoked
 * @return the cache miss penalty
 */
public long getMissOnceCummulativeCacheCost(MethodInfo m){
  long miss=0;
  for (  MethodInfo reachable : project.getCallGraph().getReachableImplementations(m)) {
    miss+=missOnceCost(reachable);
  }
  return miss;
}",0.91453328081922
187016,"/** 
 * Compute the number of cache blocks which might be needed when calling this method
 * @param mi
 * @return the maximum number of cache blocks needed, s.t. we won't run out of cacheblocks when invoking the given method
 * @throws TypeException 
 */
public long getAllFitCacheBlocks(MethodInfo mi){
  int size=0;
  Iterator<CallGraphNode> iter=project.getCallGraph().getReachableMethods(mi);
  while (iter.hasNext()) {
    CallGraphNode n=iter.next();
    size+=requiredNumberOfBlocks(project.getSizeInWords(n.getMethodImpl()));
  }
  return size;
}","/** 
 * Compute the number of cache blocks which might be needed when calling this method
 * @param invoked
 * @return the maximum number of cache blocks needed, s.t. we won't run out of cacheblocks when invoking the given method
 * @throws TypeException 
 */
public long getAllFitCacheBlocks(MethodInfo invoked){
  int size=0;
  for (  MethodInfo mi : project.getCallGraph().getReachableImplementations(invoked)) {
    size+=requiredNumberOfBlocks(project.getSizeInWords(mi));
  }
  return size;
}",0.8060836501901141
187017,"/** 
 * Check that cache is big enough to hold any method possibly invoked Return largest method 
 */
public MethodInfo checkCache() throws Exception {
  int maxWords=0;
  MethodInfo largestMethod=null;
  for (  MethodInfo mi : project.getCallGraph().getImplementedMethods()) {
    Code code=mi.getCode();
    if (code == null)     continue;
    int size=code.getLength();
    int words=MiscUtils.bytesToWords(size);
    if (!this.fitsInCache(words)) {
      throw new Exception(""String_Node_Str"" + mi.getFQMethodName() + ""String_Node_Str""+ words+ ""String_Node_Str"");
    }
    if (words >= maxWords) {
      largestMethod=mi;
      maxWords=words;
    }
  }
  return largestMethod;
}","/** 
 * Check that cache is big enough to hold any method possibly invoked Return largest method 
 */
public MethodInfo checkCache() throws Exception {
  int maxWords=0;
  MethodInfo largestMethod=null;
  for (  MethodInfo mi : project.getCallGraph().getImplementedMethods()) {
    Code code=mi.getCode();
    if (code == null)     continue;
    int size=code.getCode().length;
    int words=MiscUtils.bytesToWords(size);
    if (!this.fitsInCache(words)) {
      throw new Exception(""String_Node_Str"" + mi.getFQMethodName() + ""String_Node_Str""+ words+ ""String_Node_Str"");
    }
    if (words >= maxWords) {
      largestMethod=mi;
      maxWords=words;
    }
  }
  return largestMethod;
}",0.9847050254916242
187018,"public String getTargetName(){
  return Config.sanitizeFileName(projectConfig.getAppClassName() + ""String_Node_Str"" + projectConfig.getTargetMethodName());
}","public String getTargetName(){
  return MiscUtils.sanitizeFileName(projectConfig.getAppClassName() + ""String_Node_Str"" + projectConfig.getTargetMethodName());
}",0.9589905362776026
187019,"public String getProjectName(){
  return config.getOptionWithDefault(PROJECT_NAME,Config.sanitizeFileName(getAppClassName() + ""String_Node_Str"" + getTargetMethodName()));
}","public String getProjectName(){
  return config.getOptionWithDefault(PROJECT_NAME,MiscUtils.sanitizeFileName(getAppClassName() + ""String_Node_Str"" + getTargetMethodName()));
}",0.962536023054755
187020,"/** 
 * If no instance of project is available, us this one to get a path for writing a file (not recommended, but sometimes useful for debugging stuff)
 * @param subdir
 * @param name 
 */
public static File getOutFile(String subdir,String name){
  return new File(getOutDir(subdir),Config.sanitizeFileName(name));
}","/** 
 * If no instance of project is available, us this one to get a path for writing a file (not recommended, but sometimes useful for debugging stuff)
 * @param subdir
 * @param name 
 */
public static File getOutFile(String subdir,String name){
  return new File(getOutDir(subdir),MiscUtils.sanitizeFileName(name));
}",0.976452119309262
187021,"public UppaalAnalysis(Logger logger,Project project,File outDir){
  this.logger=logger;
  this.project=project;
  this.outDir=outDir;
}","public UppaalAnalysis(Logger logger,Project project,File outDir){
  this.uppaalConfig=new UppAalConfig(project.getConfig(),outDir);
  this.logger=logger;
  this.project=project;
}",0.7197452229299363
187022,"public WcetCost calculateWCET(MethodInfo m,long ub) throws IOException, DuplicateKeyException, XmlSerializationException {
  Long upperBound=null;
  if (ub > 0)   upperBound=ub;
  logger.info(""String_Node_Str"" + m.getFQMethodName());
  Translator translator=new Translator(project,outDir);
  translator.translateProgram(m);
  translator.writeOutput();
  logger.info(""String_Node_Str"" + outDir);
  logger.info(""String_Node_Str"" + translator.getModelFile());
  if (UppAalConfig.hasVerifier(project.getConfig())) {
    logger.info(""String_Node_Str"");
    WcetSearch search=new WcetSearch(project.getConfig(),translator.getModelFile());
    long start=System.nanoTime();
    long wcet=search.searchWCET(upperBound);
    long end=System.nanoTime();
    searchtime+=((double)(end - start)) / 1E9;
    solvertimemax=Math.max(solvertimemax,search.getMaxSolverTime());
    return WcetCost.totalCost(wcet);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
}","public WcetCost calculateWCET(MethodInfo m,long ub) throws IOException, DuplicateKeyException, XmlSerializationException {
  Long upperBound=null;
  if (ub > 0)   upperBound=ub;
  logger.info(""String_Node_Str"" + m.getFQMethodName());
  Translator translator=new Translator(uppaalConfig,project);
  translator.translateProgram(m);
  translator.writeOutput();
  logger.info(""String_Node_Str"" + uppaalConfig.outDir);
  logger.info(""String_Node_Str"" + translator.getModelFile());
  if (uppaalConfig.hasVerifier()) {
    logger.info(""String_Node_Str"");
    WcetSearch search=new WcetSearch(project.getConfig(),translator.getModelFile());
    long start=System.nanoTime();
    long wcet=search.searchWCET(upperBound);
    long end=System.nanoTime();
    searchtime+=((double)(end - start)) / 1E9;
    solvertimemax=Math.max(solvertimemax,search.getMaxSolverTime());
    return WcetCost.totalCost(wcet);
  }
 else {
    throw new IOException(""String_Node_Str"");
  }
}",0.96875
187023,"private static String pageOf(MethodInfo i){
  return sanitizeFileName(i.getFQMethodName()) + ""String_Node_Str"";
}","private static String pageOf(MethodInfo i){
  return MiscUtils.sanitizeFileName(i.getFQMethodName()) + ""String_Node_Str"";
}",0.9576271186440678
187024,"private void generateDetailedReport(MethodInfo method){
  String page=pageOf(method);
  Hashtable<String,Object> ctx=new Hashtable<String,Object>();
  ctx.put(""String_Node_Str"",method);
  ctx.put(""String_Node_Str"",this.detailedReports.get(method));
  for (  DetailedMethodReport m : this.detailedReports.get(method)) {
    m.getGraph();
  }
  try {
    this.generateFile(""String_Node_Str"",config.getOutFile(page),ctx);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  this.addPage(""String_Node_Str"" + method.getCli().clazz.getClassName() + ""String_Node_Str""+ sanitizePageKey(method.methodId),page);
}","private void generateDetailedReport(MethodInfo method){
  String page=pageOf(method);
  Hashtable<String,Object> ctx=new Hashtable<String,Object>();
  ctx.put(""String_Node_Str"",method);
  ctx.put(""String_Node_Str"",project.getFlowGraph(method).dumpDFA());
  ctx.put(""String_Node_Str"",this.detailedReports.get(method));
  for (  DetailedMethodReport m : this.detailedReports.get(method)) {
    m.getGraph();
  }
  try {
    this.generateFile(""String_Node_Str"",config.getOutFile(page),ctx);
  }
 catch (  Exception e) {
    logger.error(e);
  }
  this.addPage(""String_Node_Str"" + method.getCli().clazz.getClassName() + ""String_Node_Str""+ sanitizePageKey(method.methodId),page);
}",0.946219797349961
187025,"/** 
 * get the filename for output files
 * @param method the method the outputfile should be created for
 * @param extension the filename extension (e.g. .xml)
 * @return the filename
 */
public File getOutFile(MethodInfo method,String extension){
  return new File(outDir,sanitizeFileName(method.getFQMethodName() + extension));
}","/** 
 * get the filename for output files
 * @param method the method the outputfile should be created for
 * @param extension the filename extension (e.g. .xml)
 * @return the filename
 */
public File getOutFile(MethodInfo method,String extension){
  return new File(outDir,MiscUtils.sanitizeFileName(method.getFQMethodName() + extension));
}",0.985207100591716
187026,"private boolean run(ExecHelper exec){
  project=null;
  ProjectConfig pConfig=new ProjectConfig(config);
  try {
    project=new Project(pConfig);
    project.setTopLevelLooger(tlLogger);
    Report.initVelocity(config);
    tlLogger.info(""String_Node_Str"");
    project.load();
    MethodInfo largestMethod=project.getProcessorModel().getMethodCache().checkCache();
    int minWords=MiscUtils.bytesToWords(largestMethod.getCode().getLength());
    System.out.println(""String_Node_Str"" + minWords + ""String_Node_Str""+ largestMethod.getFQMethodName());
    project.recordMetric(""String_Node_Str"",largestMethod.getFQMethodName(),minWords);
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  boolean succeed=false;
  try {
    project.setGenerateWCETReport(false);
    tlLogger.info(""String_Node_Str"" + project.computeCyclomaticComplexity(project.getTargetMethod()));
    WcetCost mincachecost, ah, am, wcet;
{
      long start, stop;
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,new RecursiveAnalysis.LocalIPETStrategy());
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      ah=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_HIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",ah,start,stop,LpSolveWrapper.getSolverTime());
      if (project.getProjectConfig().useUppaal() || project.getConfig().getOption(CacheConfig.STATIC_CACHE_APPROX).needsInterProcIPET()) {
        project.setGenerateWCETReport(true);
      }
      am=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_MISS);
      reportSpecial(""String_Node_Str"",am,0,0,0);
      project.setGenerateWCETReport(false);
      boolean missOnceOnInvoke=config.getOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE);
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,true);
      GlobalAnalysis gb=new GlobalAnalysis(project);
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      mincachecost=gb.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALL_FIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",mincachecost,start,stop,LpSolveWrapper.getSolverTime());
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,missOnceOnInvoke);
    }
    tlLogger.info(""String_Node_Str"");
    project.setGenerateWCETReport(true);
    if (project.getProjectConfig().useUppaal()) {
      UppaalAnalysis an=new UppaalAnalysis(tlLogger,project,project.getOutDir(""String_Node_Str""));
      config.checkPresent(UppAalConfig.UPPAAL_VERIFYTA_BINARY);
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),am.getCost());
      long stop=System.nanoTime();
      reportUppaal(wcet,start,stop,an.getSearchtime(),an.getSolvertimemax());
    }
 else {
      StaticCacheApproximation staticCacheApprox=config.getOption(CacheConfig.STATIC_CACHE_APPROX);
      RecursiveWCETStrategy<StaticCacheApproximation> recStrategy;
      if (staticCacheApprox == StaticCacheApproximation.ALL_FIT) {
        recStrategy=new GlobalAnalysis.GlobalIPETStrategy();
      }
 else {
        recStrategy=new RecursiveAnalysis.LocalIPETStrategy();
      }
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,recStrategy);
      LpSolveWrapper.resetSolverTime();
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),config.getOption(CacheConfig.STATIC_CACHE_APPROX));
      long stop=System.nanoTime();
      report(wcet,start,stop,LpSolveWrapper.getSolverTime());
    }
    tlLogger.info(""String_Node_Str"" + wcet);
    succeed=true;
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
  }
  if (!project.doWriteReport()) {
    tlLogger.info(""String_Node_Str"");
    return succeed;
  }
  try {
    tlLogger.info(""String_Node_Str"");
    project.getReport().generateInfoPages();
    tlLogger.info(""String_Node_Str"");
    project.writeReport();
    tlLogger.info(""String_Node_Str"" + pConfig.getOutDir());
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  return succeed;
}","private boolean run(ExecHelper exec){
  project=null;
  ProjectConfig pConfig=new ProjectConfig(config);
  try {
    project=new Project(pConfig);
    project.setTopLevelLooger(tlLogger);
    Report.initVelocity(config);
    tlLogger.info(""String_Node_Str"");
    project.load();
    MethodInfo largestMethod=project.getProcessorModel().getMethodCache().checkCache();
    int minWords=MiscUtils.bytesToWords(largestMethod.getCode().getCode().length);
    System.out.println(""String_Node_Str"" + minWords + ""String_Node_Str""+ largestMethod.getFQMethodName());
    project.recordMetric(""String_Node_Str"",largestMethod.getFQMethodName(),minWords);
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  boolean succeed=false;
  try {
    project.setGenerateWCETReport(false);
    tlLogger.info(""String_Node_Str"" + project.computeCyclomaticComplexity(project.getTargetMethod()));
    WcetCost mincachecost, ah, am, wcet;
{
      long start, stop;
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,new RecursiveAnalysis.LocalIPETStrategy());
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      ah=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_HIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",ah,start,stop,LpSolveWrapper.getSolverTime());
      if (project.getProjectConfig().useUppaal() || project.getConfig().getOption(CacheConfig.STATIC_CACHE_APPROX).needsInterProcIPET()) {
        project.setGenerateWCETReport(true);
      }
      am=an.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALWAYS_MISS);
      reportSpecial(""String_Node_Str"",am,0,0,0);
      project.setGenerateWCETReport(false);
      boolean missOnceOnInvoke=config.getOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE);
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,true);
      GlobalAnalysis gb=new GlobalAnalysis(project);
      LpSolveWrapper.resetSolverTime();
      start=System.nanoTime();
      mincachecost=gb.computeWCET(project.getTargetMethod(),StaticCacheApproximation.ALL_FIT);
      stop=System.nanoTime();
      reportSpecial(""String_Node_Str"",mincachecost,start,stop,LpSolveWrapper.getSolverTime());
      config.setOption(CacheConfig.ASSUME_MISS_ONCE_ON_INVOKE,missOnceOnInvoke);
    }
    tlLogger.info(""String_Node_Str"");
    project.setGenerateWCETReport(true);
    if (project.getProjectConfig().useUppaal()) {
      UppaalAnalysis an=new UppaalAnalysis(tlLogger,project,project.getOutDir(""String_Node_Str""));
      config.checkPresent(UppAalConfig.UPPAAL_VERIFYTA_BINARY);
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),am.getCost());
      long stop=System.nanoTime();
      reportUppaal(wcet,start,stop,an.getSearchtime(),an.getSolvertimemax());
    }
 else {
      StaticCacheApproximation staticCacheApprox=config.getOption(CacheConfig.STATIC_CACHE_APPROX);
      RecursiveWCETStrategy<StaticCacheApproximation> recStrategy;
      if (staticCacheApprox == StaticCacheApproximation.ALL_FIT) {
        recStrategy=new GlobalAnalysis.GlobalIPETStrategy();
      }
 else {
        recStrategy=new RecursiveAnalysis.LocalIPETStrategy();
      }
      RecursiveAnalysis<StaticCacheApproximation> an=new RecursiveAnalysis<StaticCacheApproximation>(project,recStrategy);
      LpSolveWrapper.resetSolverTime();
      long start=System.nanoTime();
      wcet=an.computeWCET(project.getTargetMethod(),config.getOption(CacheConfig.STATIC_CACHE_APPROX));
      long stop=System.nanoTime();
      report(wcet,start,stop,LpSolveWrapper.getSolverTime());
    }
    tlLogger.info(""String_Node_Str"" + wcet);
    succeed=true;
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
  }
  if (!project.doWriteReport()) {
    tlLogger.info(""String_Node_Str"");
    return succeed;
  }
  try {
    tlLogger.info(""String_Node_Str"");
    project.getReport().generateInfoPages();
    tlLogger.info(""String_Node_Str"");
    project.writeReport();
    tlLogger.info(""String_Node_Str"" + pConfig.getOutDir());
  }
 catch (  Exception e) {
    exec.logException(""String_Node_Str"",e);
    return false;
  }
  return succeed;
}",0.997527375485694
187027,"private void buildEdge(CFGEdge edge){
  FlowGraph<CFGNode,CFGEdge> graph=cfg.getGraph();
  Set<CFGNode> hols=cfg.getLoopColoring().getHeadOfLoops();
  Set<CFGEdge> backEdges=cfg.getLoopColoring().getBackEdges();
  Map<CFGEdge,IterationBranchLabel<CFGNode>> edgeColoring=cfg.getLoopColoring().getIterationBranchEdges();
  CFGNode src=graph.getEdgeSource(edge);
  CFGNode target=graph.getEdgeTarget(edge);
  Transition transition=tBuilder.createTransition(nodeTemplates.get(src).snd(),nodeTemplates.get(target).fst());
  TransitionAttributes attrs=transition.getAttrs();
  IterationBranchLabel<CFGNode> edgeColor=edgeColoring.get(edge);
  if (edgeColor != null) {
    for (    CFGNode loop : edgeColor.getContinues()) {
      attrs.appendGuard(tBuilder.contLoopGuard(loop));
      attrs.appendUpdate(tBuilder.incrLoopCounter(loop));
    }
    for (    CFGNode loop : edgeColor.getExits()) {
      attrs.appendGuard(tBuilder.exitLoopGuard(loop));
      attrs.appendUpdate(tBuilder.resetLoopCounter(loop));
    }
  }
  if (hols.contains(target) && !backEdges.contains(edge)) {
    attrs.appendUpdate(tBuilder.resetLoopCounter(target));
  }
}","private void buildEdge(CFGEdge edge){
  FlowGraph<CFGNode,CFGEdge> graph=cfg.getGraph();
  Set<CFGNode> hols=cfg.getLoopColoring().getHeadOfLoops();
  Set<CFGEdge> backEdges=cfg.getLoopColoring().getBackEdges();
  Map<CFGEdge,IterationBranchLabel<CFGNode>> edgeColoring=cfg.getLoopColoring().getIterationBranchEdges();
  CFGNode src=graph.getEdgeSource(edge);
  CFGNode target=graph.getEdgeTarget(edge);
  if (src == cfg.getEntry() && target == cfg.getExit())   return;
  Transition transition=tBuilder.createTransition(nodeTemplates.get(src).snd(),nodeTemplates.get(target).fst());
  TransitionAttributes attrs=transition.getAttrs();
  IterationBranchLabel<CFGNode> edgeColor=edgeColoring.get(edge);
  if (edgeColor != null) {
    for (    CFGNode loop : edgeColor.getContinues()) {
      attrs.appendGuard(tBuilder.contLoopGuard(loop));
      attrs.appendUpdate(tBuilder.incrLoopCounter(loop));
    }
    for (    CFGNode loop : edgeColor.getExits()) {
      attrs.appendGuard(tBuilder.exitLoopGuard(loop));
      attrs.appendUpdate(tBuilder.resetLoopCounter(loop));
    }
  }
  if (hols.contains(target) && !backEdges.contains(edge)) {
    attrs.appendUpdate(tBuilder.resetLoopCounter(target));
  }
}",0.9717948717948718
187028,"private StringBuilder initCache(String NUM_METHODS){
  Vector<Object> cacheElems=new Vector<Object>();
  cacheElems.add(0);
  int i;
  for (i=1; i < blocksOf(0); i++)   cacheElems.add(0);
  for (; i < cache.getNumBlocks(); i++)   cacheElems.add(NUM_METHODS);
  return CacheSimBuilder.constArray(cacheElems);
}","private StringBuilder initCache(String NUM_METHODS){
  Vector<Object> cacheElems=new Vector<Object>();
  for (int i=0; i < cache.getNumBlocks(); i++)   cacheElems.add(NUM_METHODS);
  cacheElems.set(blocksOf(0) - 1,0);
  return CacheSimBuilder.constArray(cacheElems);
}",0.7140381282495667
187029,"@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9786995515695068
187030,"public void established(Packet p){
  Ip.setData(p,Tcp.DATA,""String_Node_Str"");
}","public Packet established(Packet p){
  Ip.setData(p,Tcp.DATA,""String_Node_Str"");
  return p;
}",0.8735632183908046
187031,"public void request(Packet p){
  StringBuffer hello=new StringBuffer(""String_Node_Str"");
  Ip.getData(p,Tcp.DATA,sb);
  StringBuffer resp=null;
  if (sb.length() != 0) {
    System.out.print(""String_Node_Str"");
    System.out.println(sb);
    for (int i=0; i < sb.length(); ++i) {
      char ch=sb.charAt(i);
      if (ch != '\n' && ch != '\r') {
        cmd.append(ch);
      }
 else {
        String s=cmd.toString();
        if (s.equals(""String_Node_Str"")) {
          resp=hello;
        }
        cmd.setLength(0);
      }
    }
  }
  if (resp != null) {
    Ip.setData(p,Tcp.DATA,resp);
  }
 else {
    p.len=Tcp.DATA << 2;
  }
}","public Packet request(Packet p){
  StringBuffer hello=new StringBuffer(""String_Node_Str"");
  Ip.getData(p,Tcp.DATA,sb);
  StringBuffer resp=null;
  if (sb.length() != 0) {
    System.out.print(""String_Node_Str"");
    System.out.println(sb);
    for (int i=0; i < sb.length(); ++i) {
      char ch=sb.charAt(i);
      if (ch != '\n' && ch != '\r') {
        cmd.append(ch);
      }
 else {
        String s=cmd.toString();
        if (s.equals(""String_Node_Str"")) {
          resp=hello;
        }
        cmd.setLength(0);
      }
    }
  }
  if (resp != null) {
    Ip.setData(p,Tcp.DATA,resp);
  }
 else {
    p.len=Tcp.DATA << 2;
  }
  return p;
}",0.9813374805598756
187032,"@Override public boolean finished(){
  return false;
}","public boolean finished(){
  return false;
}",0.8979591836734694
187033,"/** 
 * Sends one datagram
 * @param p
 * @throws IOException
 */
public void send(Datagram p) throws IOException {
  Payload pay=null;
  int dgRemPort=StringFunctions.getPortFromConnectorStr(p.getAddress());
  int dgRemAddr=dgRemPort > -1 ? StringFunctions.getAddrFromConnectorStr(p.getAddress()) : 0;
  while (true) {
    pay=UDP.preparePayload((short)dgRemPort,(short)localPort);
    if (pay != null)     break;
    Thread.sleep(100);
  }
  UDPPacket.setData(pay,((DatagramPacket)p).getBuffer(),0,p.getLength());
  UDPPacket.setLength(pay,(short)pay.length);
  if (Debug.enabled)   Debug.println(""String_Node_Str"",Debug.DBG_UDP);
  IP.asyncSendPayload(pay,dgRemAddr,IP.PROT_UDP);
}","/** 
 * Sends one datagram
 * @param p
 * @throws IOException
 */
public void send(Datagram p) throws IOException {
  Payload pay=null;
  int dgRemPort=StringFunctions.getPortFromConnectorStr(p.getAddress());
  int dgRemAddr=dgRemPort > -1 ? StringFunctions.getAddrFromConnectorStr(p.getAddress()) : 0;
  while (true) {
    pay=UDP.preparePayload((short)dgRemPort,(short)localPort);
    if (pay != null)     break;
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  UDPPacket.setData(pay,((DatagramPacket)p).getBuffer(),0,p.getLength());
  UDPPacket.setLength(pay,(short)pay.length);
  if (Debug.enabled)   Debug.println(""String_Node_Str"",Debug.DBG_UDP);
  IP.asyncSendPayload(pay,dgRemAddr,IP.PROT_UDP);
}",0.9389155799588196
187034,"public void exitUsage(boolean dumpConfig){
  System.err.println(MessageFormat.format(""String_Node_Str"" + ""String_Node_Str"",configFile,execClass.getCanonicalName()));
  System.err.println(MessageFormat.format(""String_Node_Str"",configFile,WCETAnalysis.class.getName(),ProjectConfig.APP_CLASS_NAME.getKey(),""String_Node_Str""));
  System.err.println(""String_Node_Str"" + ""String_Node_Str"");
  for (  Option<?> o : Config.instance().availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  if (dumpConfig)   System.err.println(""String_Node_Str"" + Config.instance().dumpConfiguration(4));
  System.exit(1);
}","public void exitUsage(boolean dumpConfig){
  printUsage(dumpConfig);
  System.exit(1);
}",0.228646517739816
187035,"@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public void appendDeclarations(NTASystem system,String NUM_METHODS){
  super.appendDeclarations(system,NUM_METHODS);
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,initNumBlocks()));
  system.appendDeclaration(String.format(""String_Node_Str"",NUM_METHODS,cache.getNumBlocks(),initCache(NUM_METHODS)));
  system.appendDeclaration(String.format(""String_Node_Str""));
  system.appendDeclaration(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"" + cache.getNumBlocks() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ (cache.getNumBlocks() - 1)+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ NUM_METHODS+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}",0.9705712637045586
187036,"public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}","public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  rt.printResult(program);
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}",0.9808646350106308
187037,"private void doIf(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 1) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IFEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          m.constrained.setLb(0);
          m.constrained.setUb(0);
        }
      break;
case Constants.IFNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      m.constrained.setLb(0);
      m.constrained.setUb(0);
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IFLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  m.constrained.setLb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  m.constrained.setUb(-1);
}
break;
case Constants.IFGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(-1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(0);
}
break;
case Constants.IFLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setLb(1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setUb(0);
}
break;
case Constants.IFGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(1);
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,m);
result.put(in.get(l).source,m);
}
}
}","private void doIf(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 1) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IFEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          m.constrained.setLb(0);
          m.constrained.setUb(0);
        }
      break;
case Constants.IFNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      m.constrained.setLb(0);
      m.constrained.setUb(0);
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IFLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  m.constrained.setLb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  m.constrained.setUb(-1);
}
break;
case Constants.IFGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(-1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(0);
}
break;
case Constants.IFLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setLb(1);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setUb(0);
}
break;
case Constants.IFGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
m.constrained.setUb(0);
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
m.constrained.setLb(1);
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,new ValueMapping(m,true));
m.softinc=true;
result.put(in.get(l).source,m);
}
}
}",0.977255302836698
187038,"public ValueMapping(ValueMapping val,boolean full){
  assigned=new Interval(val.assigned);
  constrained=new Interval(val.constrained);
  if (full) {
    if (val.increment != null) {
      increment=new Interval(val.increment);
    }
 else {
      increment=null;
    }
    source=val.source;
    cnt=val.cnt;
  }
 else {
    increment=null;
    source=null;
    cnt=0;
  }
}","public ValueMapping(ValueMapping val,boolean full){
  assigned=new Interval(val.assigned);
  constrained=new Interval(val.constrained);
  if (full) {
    if (val.increment != null) {
      increment=new Interval(val.increment);
    }
 else {
      increment=null;
    }
    source=val.source;
    cnt=val.cnt;
    defscope=val.defscope;
    softinc=val.softinc;
  }
 else {
    increment=null;
    source=null;
    cnt=0;
    defscope=scope;
    softinc=false;
  }
}",0.89179548156956
187039,"public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str""+ scopes.get(instr)+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=getBound(program,instr);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.965742251223491
187040,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
ValueMapping v=new ValueMapping(in.get(l),true);
if (in.get(l).source == null || in.get(l).source.stackLoc != index) {
v.defscope=ValueMapping.scope;
}
result.put(new Location(index),v);
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc < 0 && !receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
Interval operand=new Interval(increment,increment);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null && !m.softinc) {
m.increment.join(operand);
}
 else if (m.increment != null && m.softinc) {
if ((m.increment.getLb() < 0 && operand.getUb() > 0) || (m.increment.getUb() > 0 && operand.getLb() < 0)) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
m.softinc=false;
}
 else {
m.increment=operand;
m.softinc=false;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
if (scopes.get(stmt) == null) {
ValueMapping.scope=++ValueMapping.scopeCnt;
scopes.put(stmt,new Integer(ValueMapping.scope));
}
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9671934245542968
187041,"public boolean equals(Object o){
  ValueMapping m=(ValueMapping)o;
  boolean inceq=false;
  if (increment == null && m.increment == null) {
    inceq=true;
  }
 else   if (increment == null || m.increment == null) {
    inceq=false;
  }
 else {
    inceq=increment.equals(m.increment);
  }
  return assigned.equals(m.assigned) && constrained.equals(m.constrained) && inceq;
}","public boolean equals(Object o){
  ValueMapping m=(ValueMapping)o;
  boolean inceq=false;
  if (increment == null && m.increment == null) {
    inceq=true;
  }
 else   if (increment == null || m.increment == null) {
    inceq=false;
  }
 else {
    inceq=increment.equals(m.increment);
  }
  return assigned.equals(m.assigned) && constrained.equals(m.constrained) && inceq&& softinc == m.softinc;
}",0.9702457956015524
187042,"public static int computeBound(ValueMapping first,ValueMapping second){
  if (first.increment == null || second.increment == null) {
    return -1;
  }
  if (!first.assigned.hasLb() || !first.assigned.hasUb() || !second.assigned.hasLb()|| !second.assigned.hasUb()) {
    return -1;
  }
  if (first.increment.getLb() * first.increment.getUb() <= 0 || second.increment.getLb() * second.increment.getUb() <= 0) {
    return -1;
  }
  int firstRange=first.assigned.getUb() - first.assigned.getLb() + 1;
  int secondRange=second.assigned.getUb() - second.assigned.getLb() + 1;
  if (firstRange < 0 || secondRange < 0) {
    return -1;
  }
  int firstBound;
  if (first.assigned.getUb() < first.assigned.getLb()) {
    firstBound=0;
  }
 else {
    firstBound=(int)Math.ceil((double)firstRange / Math.min(Math.abs(first.increment.getUb()),Math.abs(first.increment.getLb())));
  }
  int secondBound;
  if (second.assigned.getUb() < second.assigned.getLb()) {
    secondBound=0;
  }
 else {
    secondBound=(int)Math.ceil((double)secondRange / Math.min(Math.abs(second.increment.getUb()),Math.abs(second.increment.getLb())));
  }
  return Math.max(firstBound,secondBound);
}","public static int computeBound(ValueMapping first,ValueMapping second){
  if (first.increment == null || second.increment == null) {
    return -1;
  }
  if (!first.assigned.hasLb() || !first.assigned.hasUb() || !second.assigned.hasLb()|| !second.assigned.hasUb()) {
    return -1;
  }
  if (first.increment.getLb() * first.increment.getUb() <= 0 || second.increment.getLb() * second.increment.getUb() <= 0) {
    return -1;
  }
  int firstRange=first.assigned.getUb() - first.assigned.getLb() + 1;
  int secondRange=second.assigned.getUb() - second.assigned.getLb() + 1;
  int firstBound;
  if (first.assigned.getUb() < first.assigned.getLb()) {
    firstBound=0;
  }
 else {
    firstBound=(int)Math.ceil((double)firstRange / Math.min(Math.abs(first.increment.getUb()),Math.abs(first.increment.getLb())));
  }
  int secondBound;
  if (second.assigned.getUb() < second.assigned.getLb()) {
    secondBound=0;
  }
 else {
    secondBound=(int)Math.ceil((double)secondRange / Math.min(Math.abs(second.increment.getUb()),Math.abs(second.increment.getLb())));
  }
  return Math.max(firstBound,secondBound);
}",0.9726872246696036
187043,"public String toString(){
  return ""String_Node_Str"" + assigned + ""String_Node_Str""+ constrained+ ""String_Node_Str""+ source+ ""String_Node_Str""+ cnt+ ""String_Node_Str""+ increment+ ""String_Node_Str"";
}","public String toString(){
  return ""String_Node_Str"" + assigned + ""String_Node_Str""+ constrained+ ""String_Node_Str""+ source+ ""String_Node_Str""+ cnt+ ""String_Node_Str""+ increment+ ""String_Node_Str""+ defscope+ ""String_Node_Str""+ softinc+ ""String_Node_Str"";
}",0.8747252747252747
187044,"private void doIfIcmp(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  Interval constraint=null;
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1) {
      constraint=in.get(l).assigned;
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 2) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 2 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IF_ICMPEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          if (constraint.hasLb()) {
            m.constrained.setLb(constraint.getLb());
          }
          if (constraint.hasUb()) {
            m.constrained.setUb(constraint.getUb());
          }
        }
      break;
case Constants.IF_ICMPNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      if (constraint.hasLb()) {
        m.constrained.setLb(constraint.getLb());
      }
      if (constraint.hasUb()) {
        m.constrained.setUb(constraint.getUb());
      }
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IF_ICMPLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  if (constraint.hasLb()) {
    m.constrained.setLb(constraint.getLb());
  }
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  if (constraint.hasUb()) {
    m.constrained.setUb(constraint.getUb() - 1);
  }
}
break;
case Constants.IF_ICMPGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb());
}
}
break;
case Constants.IF_ICMPGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() + 1);
}
}
break;
case Constants.IF_ICMPLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,m);
result.put(in.get(l).source,m);
}
}
}","private void doIfIcmp(InstructionHandle stmt,FlowEdge edge,Context context,Map<Location,ValueMapping> in,Map<Location,ValueMapping> result){
  Interval constraint=null;
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 1) {
      constraint=in.get(l).assigned;
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc < context.stackPtr - 2) {
      result.put(l,in.get(l));
    }
  }
  for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
    Location l=i.next();
    if (l.stackLoc == context.stackPtr - 2 && in.get(l).source != null) {
      ValueMapping m=new ValueMapping(in.get(l),true);
switch (stmt.getInstruction().getOpcode()) {
case Constants.IF_ICMPEQ:
        if (edge.getType() == FlowEdge.FALSE_EDGE) {
        }
 else         if (edge.getType() == FlowEdge.TRUE_EDGE) {
          if (constraint.hasLb()) {
            m.constrained.setLb(constraint.getLb());
          }
          if (constraint.hasUb()) {
            m.constrained.setUb(constraint.getUb());
          }
        }
      break;
case Constants.IF_ICMPNE:
    if (edge.getType() == FlowEdge.FALSE_EDGE) {
      if (constraint.hasLb()) {
        m.constrained.setLb(constraint.getLb());
      }
      if (constraint.hasUb()) {
        m.constrained.setUb(constraint.getUb());
      }
    }
 else     if (edge.getType() == FlowEdge.TRUE_EDGE) {
    }
  break;
case Constants.IF_ICMPLT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
  if (constraint.hasLb()) {
    m.constrained.setLb(constraint.getLb());
  }
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
  if (constraint.hasUb()) {
    m.constrained.setUb(constraint.getUb() - 1);
  }
}
break;
case Constants.IF_ICMPGE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb());
}
}
break;
case Constants.IF_ICMPGT:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() + 1);
}
}
break;
case Constants.IF_ICMPLE:
if (edge.getType() == FlowEdge.FALSE_EDGE) {
if (constraint.hasLb()) {
m.constrained.setLb(constraint.getLb() - 1);
}
}
 else if (edge.getType() == FlowEdge.TRUE_EDGE) {
if (constraint.hasUb()) {
m.constrained.setUb(constraint.getUb());
}
}
break;
}
if (m.assigned.getLb() > m.constrained.getUb() || m.assigned.getUb() < m.constrained.getLb()) {
}
m.assigned.constrain(m.constrained);
recordBound(stmt,context,edge,new ValueMapping(m,true));
m.softinc=true;
result.put(in.get(l).source,m);
}
}
}",0.992790574995604
187045,"public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}","public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    if (scopes.get(instr).intValue() <= first.defscope || scopes.get(instr).intValue() <= second.defscope) {
      return -1;
    }
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}",0.8188202247191011
187046,"private void buildPrologue(String mainClass,List<InstructionHandle> statements,Flow flow,List<String> clinits){
  InstructionList prologue=new InstructionList();
  ConstantPoolGen prologueCP=new ConstantPoolGen();
  Instruction instr;
  int idx;
  instr=new ICONST(0);
  prologue.append(instr);
  instr=new ICONST(0);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  for (Iterator<String> i=clinits.iterator(); i.hasNext(); ) {
    String clinit=i.next();
    String className=clinit.substring(0,clinit.lastIndexOf(""String_Node_Str""));
    idx=prologueCP.addMethodref(className,clinitName,clinitSig);
    instr=new INVOKESPECIAL(idx);
    prologue.append(instr);
  }
  instr=new ACONST_NULL();
  prologue.append(instr);
  idx=prologueCP.addMethodref(mainClass,mainName,mainSig);
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  instr=new NOP();
  prologue.append(instr);
  prologue.setPositions(true);
  for (Iterator l=prologue.iterator(); l.hasNext(); ) {
    InstructionHandle handle=(InstructionHandle)l.next();
    statements.add(handle);
    if (handle.getNext() != null) {
      flow.addEdge(new FlowEdge(handle,handle.getNext(),FlowEdge.NORMAL_EDGE));
    }
  }
  MethodGen mg=new MethodGen(Constants.ACC_PRIVATE,Type.VOID,Type.NO_ARGS,null,mainClass + ""String_Node_Str"" + prologueName+ prologueSig,""String_Node_Str"",prologue,prologueCP);
  MethodInfo mi=new MethodInfo(cliMap.get(mainClass),prologueName + prologueSig);
  mi.setMethodGen(mg);
  cliMap.get(mainClass).getMethodInfoMap().put(prologueName + prologueSig,mi);
}","private void buildPrologue(String mainClass,List<InstructionHandle> statements,Flow flow,List<String> clinits){
  InstructionList prologue=new InstructionList();
  ConstantPoolGen prologueCP=new ConstantPoolGen();
  Instruction instr;
  int idx;
  instr=new ICONST(0);
  prologue.append(instr);
  instr=new ICONST(0);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  idx=prologueCP.addMethodref(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  for (Iterator<String> i=clinits.iterator(); i.hasNext(); ) {
    String clinit=i.next();
    String className=clinit.substring(0,clinit.lastIndexOf(""String_Node_Str""));
    idx=prologueCP.addMethodref(className,clinitName,clinitSig);
    instr=new INVOKESTATIC(idx);
    prologue.append(instr);
  }
  instr=new ACONST_NULL();
  prologue.append(instr);
  idx=prologueCP.addMethodref(mainClass,mainName,mainSig);
  instr=new INVOKESTATIC(idx);
  prologue.append(instr);
  instr=new NOP();
  prologue.append(instr);
  prologue.setPositions(true);
  for (Iterator l=prologue.iterator(); l.hasNext(); ) {
    InstructionHandle handle=(InstructionHandle)l.next();
    statements.add(handle);
    if (handle.getNext() != null) {
      flow.addEdge(new FlowEdge(handle,handle.getNext(),FlowEdge.NORMAL_EDGE));
    }
  }
  MethodGen mg=new MethodGen(Constants.ACC_PRIVATE,Type.VOID,Type.NO_ARGS,null,mainClass + ""String_Node_Str"" + prologueName+ prologueSig,""String_Node_Str"",prologue,prologueCP);
  MethodInfo mi=new MethodInfo(cliMap.get(mainClass),prologueName + prologueSig);
  mi.setMethodGen(mg);
  cliMap.get(mainClass).getMethodInfoMap().put(prologueName + prologueSig,mi);
}",0.9975089952947688
187047,"public static void main(String[] args){
  AppInfo program=new AppInfo(new ClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
}","public static void main(String[] args){
  DFAAppInfo program=new DFAAppInfo(new DFAClassInfo());
  program.parseOptions(args);
  try {
    program.load();
  }
 catch (  IOException exc) {
    exc.printStackTrace();
  }
  System.out.println(""String_Node_Str"");
  long startTime=System.currentTimeMillis();
  ReceiverTypes rt=new ReceiverTypes();
  program.setReceivers(program.runAnalysis(rt));
  long rtTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (rtTime - startTime));
  LoopBounds lb=new LoopBounds();
  program.runAnalysis(lb);
  lb.printResult(program);
  long lbTime=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (lbTime - rtTime));
}",0.7185185185185186
187048,"private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  AppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(tmpresult,state.get(entry)));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,Context context,Map<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state,Map<List<HashedString>,Map<Location,ValueMapping>> result){
  DFAAppInfo p=interpreter.getProgram();
  MethodInfo mi=p.getMethod(methodName);
  MethodGen method=mi.getMethodGen();
  methodName=method.getClassName() + ""String_Node_Str"" + method.getName()+ method.getSignature();
  if (method.isNative()) {
    handleNative(method,context,input,result);
  }
 else {
    int varPtr=context.stackPtr - MethodHelper.getArgSize(method);
    Context c=new Context(context);
    c.stackPtr=method.getMaxLocals();
    c.constPool=method.getConstantPool();
    if (method.isSynchronized()) {
      c.syncLevel=context.syncLevel + 1;
    }
    c.method=methodName;
    c.callString=new LinkedList<HashedString>(context.callString);
    c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
    while (c.callString.size() > CALLSTRING_LENGTH) {
      c.callString.removeFirst();
    }
    Map<Location,ValueMapping> in=input.get(context.callString);
    Map<Location,ValueMapping> out=new HashMap<Location,ValueMapping>();
    for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
      Location l=k.next();
      if (l.stackLoc < 0) {
        out.put(l,in.get(l));
      }
      if (l.stackLoc >= varPtr) {
        out.put(new Location(l.stackLoc - varPtr),new ValueMapping(in.get(l),false));
      }
    }
    ContextMap<List<HashedString>,Map<Location,ValueMapping>> tmpresult=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(c,new HashMap<List<HashedString>,Map<Location,ValueMapping>>());
    tmpresult.put(c.callString,out);
    InstructionHandle entry=mi.getMethodGen().getInstructionList().getStart();
    state.put(entry,join(tmpresult,state.get(entry)));
    Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> r=interpreter.interpret(c,entry,state,false);
    InstructionHandle exit=mi.getMethodGen().getInstructionList().getEnd();
    if (r.get(exit) != null) {
      Map<Location,ValueMapping> returned=r.get(exit).get(c.callString);
      if (returned != null) {
        for (Iterator<Location> i=returned.keySet().iterator(); i.hasNext(); ) {
          Location l=i.next();
          if (l.stackLoc < 0) {
            ValueMapping m=new ValueMapping(returned.get(l),true);
            m.join(result.get(context.callString).get(l));
            result.get(context.callString).put(l,m);
          }
          if (l.stackLoc >= 0) {
            ValueMapping m=new ValueMapping(returned.get(l),false);
            Location loc=new Location(l.stackLoc + varPtr);
            m.join(result.get(context.callString).get(loc));
            result.get(context.callString).put(loc,m);
          }
        }
      }
    }
    for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
      Location l=i.next();
      if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - MethodHelper.getArgSize(method)) {
        result.get(context.callString).put(l,new ValueMapping(in.get(l),true));
      }
    }
  }
}",0.9995444191343964
187049,"public void printResult(AppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}","public void printResult(DFAAppInfo program){
  for (Iterator<InstructionHandle> i=bounds.keySet().iterator(); i.hasNext(); ) {
    InstructionHandle instr=i.next();
    ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
    Context c=r.getContext();
    LineNumberTable lines=program.getMethod(c.method).getMethod().getLineNumberTable();
    int sourceLine=lines.getSourceLine(instr.getPosition());
    for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
      List<HashedString> callString=k.next();
      Pair<ValueMapping> bounds=r.get(callString);
      LoopBounds.ValueMapping first=bounds.getFirst();
      LoopBounds.ValueMapping second=bounds.getSecond();
      System.out.println(c.method + ""String_Node_Str"" + sourceLine+ ""String_Node_Str""+ callString+ ""String_Node_Str"");
      System.out.print(""String_Node_Str"");
      System.out.println(first);
      System.out.print(""String_Node_Str"");
      System.out.println(second);
      System.out.print(""String_Node_Str"");
      int val=ValueMapping.computeBound(first,second);
      if (val >= 0) {
        System.out.println(val);
      }
 else {
        System.out.println(""String_Node_Str"");
      }
    }
  }
}",0.9987639060568604
187050,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  HashMap<Location,ValueMapping> in=(HashMap<Location,ValueMapping>)input.get(context.callString);
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  HashMap<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result=new HashMap<Location,ValueMapping>(in);
      retval.put(context.callString,result);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result=in;
retval.put(context.callString,result);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result=in;
retval.put(context.callString,result);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result=in;
retval.put(context.callString,result);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result=in;
retval.put(context.callString,result);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result=new HashMap<Location,ValueMapping>(in);
retval.put(context.callString,result);
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result=in;
retval.put(context.callString,result);
break;
case Constants.MONITORENTER:
result=in;
retval.put(context.callString,result);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result=in;
retval.put(context.callString,result);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result=in;
retval.put(context.callString,result);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result=in;
retval.put(context.callString,result);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result=in;
retval.put(context.callString,result);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result=in;
retval.put(context.callString,result);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
DFAAppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
result=in;
retval.put(context.callString,result);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9987630666246272
187051,"public int getBound(AppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}","public int getBound(DFAAppInfo program,InstructionHandle instr){
  ContextMap<List<HashedString>,Pair<ValueMapping>> r=bounds.get(instr);
  if (r == null) {
    return -1;
  }
  int maxValue=-1;
  for (Iterator<List<HashedString>> k=r.keySet().iterator(); k.hasNext(); ) {
    List<HashedString> callString=k.next();
    Pair<ValueMapping> bounds=r.get(callString);
    LoopBounds.ValueMapping first=bounds.getFirst();
    LoopBounds.ValueMapping second=bounds.getSecond();
    int val=ValueMapping.computeBound(first,second);
    if (val < 0) {
      return -1;
    }
 else {
      maxValue=Math.max(maxValue,val);
    }
  }
  return maxValue;
}",0.9976726144297904
187052,"private void doInvoke(String methodName,InstructionHandle stmt,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state,ContextMap<List<HashedString>,CacheMapping> result){
  Context context=new Context(input.getContext());
  AppInfo p=interpreter.getProgram();
  MethodGen method=p.getMethod(methodName).getMethodGen();
  if (method == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  if (method.isNative()) {
    result.putAll(input);
    return;
  }
  Context c=new Context(context);
  c.constPool=method.getConstantPool();
  c.method=methodName;
  c.callString=new LinkedList<HashedString>(context.callString);
  c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
  ContextMap<List<HashedString>,CacheMapping> tmpresult=new ContextMap<List<HashedString>,CacheMapping>(c,new HashMap<List<HashedString>,CacheMapping>());
  CacheMapping mapping=new CacheMapping(input.get(context.callString));
  InstructionHandle last=method.getInstructionList().getEnd();
  mapping.fetch(methodName,last.getPosition());
  tmpresult.put(c.callString,mapping);
  while (c.callString.size() > CALLSTRING_LENGTH) {
    c.callString.removeFirst();
  }
  System.out.println(""String_Node_Str"" + stmt + ""String_Node_Str""+ context.callString+ ""String_Node_Str""+ context.method+ ""String_Node_Str""+ methodName);
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    MethodGen returnMethod=p.getMethod(context.method).getMethodGen();
    mapping=new CacheMapping(r.get(exit).get(c.callString));
    last=returnMethod.getInstructionList().getEnd();
    mapping.fetch(context.method,last.getPosition());
    result.put(context.callString,mapping);
  }
  if (result.isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
}","private void doInvoke(String methodName,InstructionHandle stmt,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state,ContextMap<List<HashedString>,CacheMapping> result){
  Context context=new Context(input.getContext());
  DFAAppInfo p=interpreter.getProgram();
  MethodGen method=p.getMethod(methodName).getMethodGen();
  if (method == null) {
    System.out.println(context.method + ""String_Node_Str"" + stmt+ ""String_Node_Str""+ methodName);
    return;
  }
  if (method.isNative()) {
    result.putAll(input);
    return;
  }
  Context c=new Context(context);
  c.constPool=method.getConstantPool();
  c.method=methodName;
  c.callString=new LinkedList<HashedString>(context.callString);
  c.callString.add(new HashedString(context.method + ""String_Node_Str"" + stmt.getPosition()));
  ContextMap<List<HashedString>,CacheMapping> tmpresult=new ContextMap<List<HashedString>,CacheMapping>(c,new HashMap<List<HashedString>,CacheMapping>());
  CacheMapping mapping=new CacheMapping(input.get(context.callString));
  InstructionHandle last=method.getInstructionList().getEnd();
  mapping.fetch(methodName,last.getPosition());
  tmpresult.put(c.callString,mapping);
  while (c.callString.size() > CALLSTRING_LENGTH) {
    c.callString.removeFirst();
  }
  System.out.println(""String_Node_Str"" + stmt + ""String_Node_Str""+ context.callString+ ""String_Node_Str""+ context.method+ ""String_Node_Str""+ methodName);
  InstructionHandle entry=method.getInstructionList().getStart();
  state.put(entry,join(tmpresult,state.get(entry)));
  Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> r=interpreter.interpret(c,entry,state,false);
  InstructionHandle exit=method.getInstructionList().getEnd();
  if (r.get(exit) != null) {
    MethodGen returnMethod=p.getMethod(context.method).getMethodGen();
    mapping=new CacheMapping(r.get(exit).get(c.callString));
    last=returnMethod.getInstructionList().getEnd();
    mapping.fetch(context.method,last.getPosition());
    result.put(context.callString,mapping);
  }
  if (result.isEmpty()) {
    System.out.println(""String_Node_Str"");
  }
}",0.999322951929587
187053,"public void printResult(AppInfo program){
  System.out.println(""String_Node_Str"");
}","public void printResult(DFAAppInfo program){
  System.out.println(""String_Node_Str"");
}",0.9824561403508772
187054,"public ContextMap<List<HashedString>,CacheMapping> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state){
  Context context=new Context(input.getContext());
  ContextMap<List<HashedString>,CacheMapping> result;
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESPECIAL:
case Constants.INVOKESTATIC:
{
      result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
      AppInfo p=interpreter.getProgram();
      ContextMap<String,String> receivers=p.getReceivers().get(stmt);
      if (receivers == null) {
        System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
        break;
      }
      for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
        String methodName=i.next();
        doInvoke(methodName,stmt,input,interpreter,state,result);
      }
    }
  return result;
case Constants.PUTFIELD:
{
  FieldInstruction instr=(FieldInstruction)instruction;
  if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
    result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
    String methodName=""String_Node_Str"";
    doInvoke(methodName,stmt,input,interpreter,state,result);
    return result;
  }
}
break;
case Constants.PUTSTATIC:
{
FieldInstruction instr=(FieldInstruction)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
return result;
}
}
break;
case Constants.AASTORE:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEW:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEWARRAY:
case Constants.ANEWARRAY:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LADD:
case Constants.LAND:
case Constants.LOR:
case Constants.LXOR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSUB:
case Constants.LMUL:
case Constants.LDIV:
case Constants.LREM:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSHL:
case Constants.LSHR:
case Constants.LUSHR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
}
return input;
}","public ContextMap<List<HashedString>,CacheMapping> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,CacheMapping> input,Interpreter<List<HashedString>,CacheMapping> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,CacheMapping>> state){
  Context context=new Context(input.getContext());
  ContextMap<List<HashedString>,CacheMapping> result;
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESPECIAL:
case Constants.INVOKESTATIC:
{
      result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
      DFAAppInfo p=interpreter.getProgram();
      ContextMap<String,String> receivers=p.getReceivers().get(stmt);
      if (receivers == null) {
        System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
        break;
      }
      for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
        String methodName=i.next();
        doInvoke(methodName,stmt,input,interpreter,state,result);
      }
    }
  return result;
case Constants.PUTFIELD:
{
  FieldInstruction instr=(FieldInstruction)instruction;
  if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
    result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
    String methodName=""String_Node_Str"";
    doInvoke(methodName,stmt,input,interpreter,state,result);
    return result;
  }
}
break;
case Constants.PUTSTATIC:
{
FieldInstruction instr=(FieldInstruction)instruction;
if (instr.getFieldType(context.constPool) instanceof ReferenceType) {
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
return result;
}
}
break;
case Constants.AASTORE:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEW:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.NEWARRAY:
case Constants.ANEWARRAY:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LADD:
case Constants.LAND:
case Constants.LOR:
case Constants.LXOR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSUB:
case Constants.LMUL:
case Constants.LDIV:
case Constants.LREM:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
case Constants.LSHL:
case Constants.LSHR:
case Constants.LUSHR:
{
result=new ContextMap<List<HashedString>,CacheMapping>(context,new HashMap<List<HashedString>,CacheMapping>());
String methodName=""String_Node_Str"" + stmt.getInstruction().getName() + ""String_Node_Str"";
doInvoke(methodName,stmt,input,interpreter,state,result);
}
return result;
}
return input;
}",0.99962410725473
187055,"private void updateThreads(Map<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state){
  DFAAppInfo p=interpreter.getProgram();
  boolean modified=true;
  while (modified) {
    modified=false;
    for (Iterator<String> k=threads.keySet().iterator(); k.hasNext(); ) {
      String methodName=k.next();
      MethodGen method=p.getMethod(methodName).getMethodGen();
      InstructionHandle entry=method.getInstructionList().getStart();
      Context c=state.get(entry).getContext();
      int varPtr=c.stackPtr - MethodHelper.getArgSize(method);
      ContextMap<TypeMapping,TypeMapping> threadInput=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      filterSet(input,threadInput,0);
      state.put(entry,join(state.get(entry),threadInput));
      ContextMap<TypeMapping,TypeMapping> savedResult=threads.get(methodName);
      Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
      InstructionHandle exit=method.getInstructionList().getEnd();
      ContextMap<TypeMapping,TypeMapping> threadResult;
      if (r.get(exit) != null) {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
        filterReturnSet(r.get(exit),threadResult,varPtr);
      }
 else {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      }
      if (!threadResult.equals(savedResult)) {
        modified=true;
      }
      threads.put(methodName,threadResult);
    }
  }
}","private void updateThreads(Map<TypeMapping,TypeMapping> input,Interpreter<TypeMapping,TypeMapping> interpreter,Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> state){
  DFAAppInfo p=interpreter.getProgram();
  boolean modified=true;
  while (modified) {
    modified=false;
    Map<String,ContextMap<TypeMapping,TypeMapping>> tmpThreads=new LinkedHashMap<String,ContextMap<TypeMapping,TypeMapping>>();
    for (Iterator<String> k=threads.keySet().iterator(); k.hasNext(); ) {
      String methodName=k.next();
      MethodGen method=p.getMethod(methodName).getMethodGen();
      InstructionHandle entry=method.getInstructionList().getStart();
      Context c=state.get(entry).getContext();
      int varPtr=c.stackPtr - MethodHelper.getArgSize(method);
      ContextMap<TypeMapping,TypeMapping> threadInput=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      filterSet(input,threadInput,0);
      state.put(entry,join(state.get(entry),threadInput));
      ContextMap<TypeMapping,TypeMapping> savedResult=threads.get(methodName);
      Map<InstructionHandle,ContextMap<TypeMapping,TypeMapping>> r=interpreter.interpret(c,entry,state,false);
      InstructionHandle exit=method.getInstructionList().getEnd();
      ContextMap<TypeMapping,TypeMapping> threadResult;
      if (r.get(exit) != null) {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
        filterReturnSet(r.get(exit),threadResult,varPtr);
      }
 else {
        threadResult=new ContextMap<TypeMapping,TypeMapping>(c,new HashMap<TypeMapping,TypeMapping>());
      }
      if (!threadResult.equals(savedResult)) {
        modified=true;
      }
      tmpThreads.put(methodName,threadResult);
    }
    threads=tmpThreads;
  }
}",0.9548499854354792
187056,"public void printHelp(PrintStream out){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}","public void printHelp(PrintStream out){
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
  out.println(""String_Node_Str"");
}",0.9812775330396476
187057,"/** 
 * exec a command.
 * @param args the command as args[0] and its options
 * @param out the printstream to print the output to.
 * @return true if this is an exit command, else false.
 */
public boolean execCmd(String[] args,PrintStream out){
  if (""String_Node_Str"".equals(args[0])) {
    return true;
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    printHelp(out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2 || ""String_Node_Str"".equals(args[1])) {
      printConfig(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printActions(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printOptions(args.length < 3 ? null : args[2],out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      List actions=joptimizer.getActionFactory().createConfiguredActions();
      printExecActions(""String_Node_Str"",actions,out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      out.println(""String_Node_Str"" + joptimizer.getAppStruct().getClassInfos().size() + ""String_Node_Str"");
      for (Iterator it=joptimizer.getAppStruct().getClassInfos().iterator(); it.hasNext(); ) {
        ClassInfo classInfo=(ClassInfo)it.next();
        out.println(classInfo.getClassName());
      }
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    loadConfigFile(args[1],out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    for (int i=1; i < args.length; i++) {
      printClassInfo(args[i],out);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getJopConfig().setMainClassName(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getAppStruct().setClassPath(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    Set rootClasses=new HashSet(args.length + 2);
    JopConfig jopConfig=joptimizer.getJopConfig();
    rootClasses.add(jopConfig.getMainClassName());
    rootClasses.addAll(jopConfig.getArchConfig().getSystemClasses());
    rootClasses.addAll(Arrays.asList(args).subList(1,args.length));
    jopConfig.setRootClasses(rootClasses);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],args[2]);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    for (int i=1; i < args.length; i++) {
      String value=joptimizer.getJopConfig().getOption(args[i]);
      if (value != null) {
        out.println(ArgOption.formatOption(""String_Node_Str"",args[i],value));
      }
 else {
        out.println(""String_Node_Str"" + args[i]);
      }
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],null);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Action action=joptimizer.getActionFactory().createAction(args[1]);
    if (action != null) {
      runAction(action,args,2,out);
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.executeActions();
    }
 catch (    ActionException e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.loadTransitiveHull(joptimizer.getJopConfig().getRootClasses());
      joptimizer.reloadClassInfos();
    }
 catch (    Exception e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else {
    out.println(""String_Node_Str"" + args[0]);
  }
  return false;
}","/** 
 * exec a command.
 * @param args the command as args[0] and its options
 * @param out the printstream to print the output to.
 * @return true if this is an exit command, else false.
 */
public boolean execCmd(String[] args,PrintStream out){
  if (""String_Node_Str"".equals(args[0])) {
    return true;
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    printHelp(out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2 || ""String_Node_Str"".equals(args[1])) {
      printConfig(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printActions(out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      printOptions(args.length < 3 ? null : args[2],out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      List actions=joptimizer.getActionFactory().createConfiguredActions();
      printExecActions(""String_Node_Str"",actions,out);
    }
 else     if (""String_Node_Str"".equals(args[1])) {
      out.println(""String_Node_Str"" + joptimizer.getAppStruct().getClassInfos().size() + ""String_Node_Str"");
      for (Iterator it=joptimizer.getAppStruct().getClassInfos().iterator(); it.hasNext(); ) {
        ClassInfo classInfo=(ClassInfo)it.next();
        out.println(classInfo.getClassName());
      }
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
      return false;
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    loadConfigFile(args[1],out);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    for (int i=1; i < args.length; i++) {
      printClassInfo(args[i],out);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getJopConfig().setMainClassName(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    joptimizer.getAppStruct().setClassPath(args[1]);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    Set rootClasses=new HashSet(args.length + 2);
    JopConfig jopConfig=joptimizer.getJopConfig();
    rootClasses.add(jopConfig.getMainClassName());
    rootClasses.addAll(jopConfig.getArchConfig().getSystemClasses());
    rootClasses.addAll(Arrays.asList(args).subList(1,args.length));
    jopConfig.setRootClasses(rootClasses);
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],args[2]);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    for (int i=1; i < args.length; i++) {
      String value=joptimizer.getJopConfig().getOption(args[i]);
      if (value != null) {
        out.println(ArgOption.formatOption(""String_Node_Str"",args[i],value));
      }
 else {
        out.println(""String_Node_Str"" + args[i]);
      }
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    try {
      joptimizer.getJopConfig().setOption(args[1],null);
    }
 catch (    ConfigurationException e) {
      out.println(""String_Node_Str"" + e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length != 3 && args.length != 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Level level=Level.toLevel(args[1]);
    if (args.length == 2) {
      out.println(""String_Node_Str"" + level.toString());
      Logger.getRootLogger().setLevel(level);
    }
 else {
      out.println(""String_Node_Str"" + level.toString() + ""String_Node_Str""+ args[2]);
      Logger.getLogger(args[2]).setLevel(level);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    if (args.length < 2) {
      out.println(""String_Node_Str"");
      return false;
    }
    Action action=joptimizer.getActionFactory().createAction(args[1]);
    if (action != null) {
      runAction(action,args,2,out);
    }
 else {
      out.println(""String_Node_Str"" + args[1]);
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.executeActions();
    }
 catch (    ActionException e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
    }
  }
 else   if (""String_Node_Str"".equals(args[0])) {
    try {
      joptimizer.loadTransitiveHull(joptimizer.getJopConfig().getRootClasses());
      joptimizer.reloadClassInfos();
    }
 catch (    Exception e) {
      out.print(""String_Node_Str"");
      out.println(e.getMessage());
      logger.info(""String_Node_Str"",e);
    }
  }
 else {
    out.println(""String_Node_Str"" + args[0]);
  }
  return false;
}",0.9375582479030756
187058,"/** 
 * Link returns and exceptionhandler of inlined blocks. This assumes that the next codeblock has the same exceptionhandler set as the original invoke statement.
 * @param graph the current graph.
 * @param firstBlock the index of the first inlined block.
 * @param next the next block after the inlined code.
 * @param invokeStmt the invocation statement.
 */
private void linkBlocks(ControlFlowGraph graph,int firstBlock,BasicBlock next,InvokeStmt invokeStmt){
  int nextIndex=next.getBlockIndex();
  List exHandler=next.getExceptionHandlers();
  Variable resultVar=null;
  if (graph.getType() == ControlFlowGraph.TYPE_QUAD) {
    resultVar=((QuadInvoke)invokeStmt).getAssignedVar();
  }
  for (int i=firstBlock; i < nextIndex; i++) {
    BasicBlock block=graph.getBlock(i);
    for (Iterator it=exHandler.iterator(); it.hasNext(); ) {
      BasicBlock.ExceptionHandler handler=(BasicBlock.ExceptionHandler)it.next();
      block.addExceptionHandler(handler);
    }
    ControlFlowStmt cf=block.getControlFlowStmt();
    if (cf != null && cf instanceof ReturnStmt) {
      CodeBlock code=block.getCodeBlock();
      code.deleteStatement(code.size() - 1);
      if (resultVar != null) {
        QuadReturn ret=(QuadReturn)cf;
        block.getQuadCode().addStatement(new QuadCopy(ret.getType(),resultVar,ret.getReturnVar()));
      }
      block.setNextBlock(next);
    }
  }
}","/** 
 * Link returns and exceptionhandler of inlined blocks. This assumes that the next codeblock has the same exceptionhandler set as the original invoke statement.
 * @param graph the current graph.
 * @param firstBlock the index of the first inlined block.
 * @param next the next block after the inlined code.
 * @param invokeStmt the invocation statement.
 * @param offset local variable slot offset
 * @throws com.jopdesign.libgraph.cfg.GraphException if calculating the stackdepth fails
 */
private void linkBlocks(ControlFlowGraph graph,int firstBlock,BasicBlock next,InvokeStmt invokeStmt,int offset) throws GraphException {
  int nextIndex=next.getBlockIndex();
  List exHandler=next.getExceptionHandlers();
  Variable resultVar=null;
  if (graph.getType() == ControlFlowGraph.TYPE_QUAD) {
    resultVar=((QuadInvoke)invokeStmt).getAssignedVar();
  }
 else {
    boolean error;
    StackWalker stackWalker=new StackWalker();
    CFGWalker walker=new CFGWalker(graph,stackWalker,firstBlock,nextIndex - 1);
    stackWalker.setStack(((StackInvoke)invokeStmt).getPopTypes());
    error=walker.walkDFS(firstBlock);
    if (error) {
      throw new GraphException(""String_Node_Str"");
    }
    if (!walker.allVisited()) {
      throw new GraphException(""String_Node_Str"");
    }
  }
  for (int i=firstBlock; i < nextIndex; i++) {
    BasicBlock block=graph.getBlock(i);
    for (Iterator it=exHandler.iterator(); it.hasNext(); ) {
      BasicBlock.ExceptionHandler handler=(BasicBlock.ExceptionHandler)it.next();
      block.addExceptionHandler(handler);
    }
    ControlFlowStmt cf=block.getControlFlowStmt();
    if (cf != null && cf instanceof ReturnStmt) {
      CodeBlock code=block.getCodeBlock();
      code.deleteStatement(code.size() - 1);
      if (resultVar != null) {
        QuadReturn ret=(QuadReturn)cf;
        block.getQuadCode().addStatement(new QuadCopy(ret.getType(),resultVar,ret.getReturnVar()));
      }
 else       if (graph.getType() == ControlFlowGraph.TYPE_STACK) {
        StackCode stackCode=block.getStackCode();
        if (stackCode.getEndStack().length != 0) {
          createStackReturnCleanup(stackCode,((ReturnStmt)cf).getType(),offset);
        }
      }
      block.setNextBlock(next);
    }
  }
}",0.7595914987579354
187059,"/** 
 * Do the actual inlining.
 * @param stmt the invoke statement. This must be a handle of an {@link InvokeStmt}.
 * @param srcGraph the graph of the invoked method which will be inlined.
 * @param offset the variable offset to use for new variables of the inlined method.
 * @param unsafeInline true if checkcode should be created if enabled.
 * @return an inlineresult containing informations about the new code.
 * @throws GraphException if anything goes wrong.
 */
public InlineResult doInline(StmtHandle stmt,ControlFlowGraph srcGraph,int offset,boolean unsafeInline) throws GraphException {
  BasicBlock block=stmt.getBlock();
  InvokeStmt invokeStmt=(InvokeStmt)stmt.getStatement();
  ControlFlowGraph graph=block.getGraph();
  int newBlocks=0;
  Collection checkBlocks=new ArrayList();
  BasicBlock next=stmt.splitBefore();
  next.getCodeBlock().deleteStatement(0);
  int firstBlock=block.getBlockIndex() + 1;
  BlockCloner cloner=new BlockCloner(srcGraph,new OffsetVariableMapper(offset));
  newBlocks+=cloner.copyBlocks(graph,firstBlock);
  checkBlocks.addAll(linkFirstBlock(block,graph.getBlock(firstBlock),invokeStmt,offset));
  linkBlocks(graph,firstBlock,next,invokeStmt);
  if (insertCheckCode && unsafeInline) {
    checkBlocks.addAll(createCheckCode(block,next,invokeStmt));
  }
  int diff=getDeltaBytecode(invokeStmt,unsafeInline);
  int maxLocals=offset + srcGraph.getVariableTable().size();
  int[] checkBlockIds=new int[checkBlocks.size()];
  newBlocks+=checkBlocks.size();
  int i=0;
  for (Iterator it=checkBlocks.iterator(); it.hasNext(); ) {
    BasicBlock checkBlock=(BasicBlock)it.next();
    checkBlockIds[i]=checkBlock.getBlockIndex();
    i++;
  }
  Arrays.sort(checkBlockIds);
  return new InlineResult(firstBlock,newBlocks,checkBlockIds,diff,maxLocals);
}","/** 
 * Do the actual inlining.
 * @param stmt the invoke statement. This must be a handle of an {@link InvokeStmt}.
 * @param srcGraph the graph of the invoked method which will be inlined.
 * @param offset the variable offset to use for new variables of the inlined method.
 * @param unsafeInline true if checkcode should be created if enabled.
 * @return an inlineresult containing informations about the new code.
 * @throws GraphException if anything goes wrong.
 */
public InlineResult doInline(StmtHandle stmt,ControlFlowGraph srcGraph,int offset,boolean unsafeInline) throws GraphException {
  BasicBlock block=stmt.getBlock();
  InvokeStmt invokeStmt=(InvokeStmt)stmt.getStatement();
  ControlFlowGraph graph=block.getGraph();
  int newBlocks=0;
  Collection checkBlocks=new ArrayList();
  BasicBlock next=stmt.splitBefore();
  next.getCodeBlock().deleteStatement(0);
  int firstBlock=block.getBlockIndex() + 1;
  BlockCloner cloner=new BlockCloner(srcGraph,new OffsetVariableMapper(offset));
  newBlocks+=cloner.copyBlocks(graph,firstBlock);
  checkBlocks.addAll(linkFirstBlock(block,graph.getBlock(firstBlock),invokeStmt,offset));
  linkBlocks(graph,firstBlock,next,invokeStmt,offset);
  if (insertCheckCode && unsafeInline) {
    checkBlocks.addAll(createCheckCode(block,next,invokeStmt));
  }
  int diff=getDeltaBytecode(invokeStmt,unsafeInline);
  int maxLocals=offset + srcGraph.getVariableTable().size();
  int[] checkBlockIds=new int[checkBlocks.size()];
  newBlocks+=checkBlocks.size();
  int i=0;
  for (Iterator it=checkBlocks.iterator(); it.hasNext(); ) {
    BasicBlock checkBlock=(BasicBlock)it.next();
    checkBlockIds[i]=checkBlock.getBlockIndex();
    i++;
  }
  Arrays.sort(checkBlockIds);
  return new InlineResult(firstBlock,newBlocks,checkBlockIds,diff,maxLocals);
}",0.9980485085029271
187060,"/** 
 * Inline an invocation. This also sets the accessed fields to public if needed. The graph modified flag must be set, and the graph features must be updated correctly. This can be done by calling   {@link #setGraphModified(com.jopdesign.libgraph.cfg.ControlFlowGraph)}.
 * @see #findInlines
 * @see #checkSize(CheckResult,int)
 * @see #changeToPublic(java.util.Collection)
 * @param check the checkresult of the invocation to inline.
 * @return an inlineresult.
 */
public InlineResult doInline(CheckResult check) throws ActionException {
  changeToPublic(check.getChangePublic());
  InlineResult result;
  try {
    result=inliner.doInline(check);
  }
 catch (  GraphException e) {
    throw new ActionException(""String_Node_Str"",e);
  }
  return result;
}","/** 
 * Inline an invocation. This also sets the accessed fields to public if needed. The graph modified flag must be set, and the graph features must be updated correctly. This can be done by calling   {@link #setGraphModified(com.jopdesign.libgraph.cfg.ControlFlowGraph)}.
 * @see #findInlines
 * @see #checkSize(CheckResult,int)
 * @see #changeToPublic(java.util.Collection)
 * @param check the checkresult of the invocation to inline.
 * @return an inlineresult.
 */
public InlineResult doInline(CheckResult check) throws ActionException {
  changeToPublic(check.getChangePublic());
  InlineResult result;
  try {
    result=inliner.doInline(check);
  }
 catch (  GraphException e) {
    throw new ActionException(""String_Node_Str"" + check.getInvokedMethod().getFQMethodName() + ""String_Node_Str"",e);
  }
  return result;
}",0.9590937696664568
187061,"/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, and we add the pair to our properties, consuming both arguments. The first non-option or the argument string   {@code --} terminates the option list.
 * @param argv The argument list
 * @param options The properties to update
 * @return An array of unconsumed arguments
 */
public String[] consumeOptions(String[] argv){
  int i=0;
  Vector<String> rest=new Vector<String>();
  while (i + 1 < argv.length && argv[i].startsWith(""String_Node_Str"") && !(argv[i].equals(""String_Node_Str"") || argv[i].equals(""String_Node_Str""))) {
    String key, val;
    if (argv[i].charAt(1) == '-')     key=argv[i].substring(2);
 else     key=argv[i].substring(1);
    val=argv[i + 1];
    if (optionSet.containsKey(key)) {
      options.put(key,val);
    }
 else {
      rest.add(argv[i]);
      rest.add(argv[i + 1]);
    }
    i+=2;
  }
  for (; i < argv.length; i++)   rest.add(argv[i]);
  return rest.toArray(argv);
}","/** 
 * Consume all command line options and turn them into properties.<br/> <p>The arguments are processed as follows: If an argument is of the form ""-option"" or ""--option"", it is considered to be an option. If an argument is an option, the next argument is considered to be the parameter, and we add the pair to our properties, consuming both arguments. The first non-option or the argument string   {@code --} terminates the option list.
 * @param argv The argument list
 * @param options The properties to update
 * @return An array of unconsumed arguments
 */
public String[] consumeOptions(String[] argv){
  int i=0;
  Vector<String> rest=new Vector<String>();
  while (i + 1 < argv.length && argv[i].startsWith(""String_Node_Str"") && !(argv[i].equals(""String_Node_Str"") || argv[i].equals(""String_Node_Str""))) {
    String key, val;
    if (argv[i].charAt(1) == '-')     key=argv[i].substring(2);
 else     key=argv[i].substring(1);
    val=argv[i + 1];
    if (optionSet.containsKey(key)) {
      options.put(key,val);
    }
 else {
      System.err.println(""String_Node_Str"" + key + ""String_Node_Str""+ Arrays.toString(argv));
      rest.add(key);
      rest.add(val);
    }
    i+=2;
  }
  for (; i < argv.length; i++)   rest.add(argv[i]);
  String[] restArray=new String[rest.size()];
  return rest.toArray(restArray);
}",0.8989298454221165
187062,"private static void exitUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getCanonicalName()+ ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getName()+ ""String_Node_Str""+ CacheConfig.BLOCK_SIZE+ ""String_Node_Str""+ ""String_Node_Str""+ Config.ROOT_CLASS_NAME+ ""String_Node_Str"");
  System.err.print(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  for (  Option o : Config.availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + Config.instance().getOptions());
  System.err.println(""String_Node_Str"" + System.getProperties());
  System.exit(1);
}","private static void exitUsage(){
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getCanonicalName()+ ""String_Node_Str"");
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + CONFIG_FILE_PROP + ""String_Node_Str""+ WCETAnalysis.class.getName()+ ""String_Node_Str""+ CacheConfig.BLOCK_SIZE+ ""String_Node_Str""+ ""String_Node_Str""+ Config.ROOT_CLASS_NAME+ ""String_Node_Str"");
  System.err.print(""String_Node_Str"");
  System.err.println(""String_Node_Str"");
  for (  Option o : Config.availableOptions()) {
    System.err.println(""String_Node_Str"" + o.toString(15));
  }
  System.err.println(""String_Node_Str"");
  System.err.println(""String_Node_Str"" + Config.instance().getOptions());
  System.exit(1);
}",0.9527950310559006
187063,"/** 
 * @param args
 */
private static void loadConfig(String[] args){
  try {
    String[] argsrest=Config.load(System.getProperty(CONFIG_FILE_PROP),args);
    Config c=Config.instance();
    if (argsrest.length != 0 || c.helpRequested())     exitUsage();
    tlLogger.info(""String_Node_Str"" + Config.instance().getOptions());
    c.checkOptions();
    if (Config.instance().hasReportDir()) {
      tlLogger.info(""String_Node_Str"");
      Config.instance().initializeReport();
    }
  }
 catch (  MissingConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  BadConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}","/** 
 * @param args
 */
private static void loadConfig(String[] args){
  try {
    String[] argsrest=Config.load(System.getProperty(CONFIG_FILE_PROP),args);
    Config c=Config.instance();
    if (c.helpRequested())     exitUsage();
    if (argsrest.length != 0) {
      System.err.println(""String_Node_Str"" + Arrays.toString(argsrest));
      exitUsage();
    }
    tlLogger.info(""String_Node_Str"" + Config.instance().getOptions());
    c.checkOptions();
    if (Config.instance().hasReportDir()) {
      tlLogger.info(""String_Node_Str"");
      Config.instance().initializeReport();
    }
  }
 catch (  MissingConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  BadConfigurationError e) {
    System.err.println(""String_Node_Str"" + e.getMessage());
    exitUsage();
  }
catch (  Exception e) {
    e.printStackTrace();
    System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(1);
  }
}",0.9202127659574468
187064,"public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  Map<Location,ValueMapping> in=input.get(context.callString);
  Map<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result.putAll(in);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result.putAll(in);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result.putAll(in);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result.putAll(in);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),false));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result.putAll(in);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result.putAll(in);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result.putAll(in);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result.putAll(in);
break;
case Constants.MONITORENTER:
result.putAll(in);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result.putAll(in);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result.putAll(in);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result.putAll(in);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result.putAll(in);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result.putAll(in);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
System.out.println(""String_Node_Str"" + stmt);
result.putAll(in);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}","public ContextMap<List<HashedString>,Map<Location,ValueMapping>> transfer(InstructionHandle stmt,FlowEdge edge,ContextMap<List<HashedString>,Map<Location,ValueMapping>> input,Interpreter<List<HashedString>,Map<Location,ValueMapping>> interpreter,Map<InstructionHandle,ContextMap<List<HashedString>,Map<Location,ValueMapping>>> state){
  Context context=new Context(input.getContext());
  Map<Location,ValueMapping> in=input.get(context.callString);
  Map<Location,ValueMapping> result=new HashMap<Location,ValueMapping>();
  ContextMap<List<HashedString>,Map<Location,ValueMapping>> retval=new ContextMap<List<HashedString>,Map<Location,ValueMapping>>(context,input);
  retval.put(context.callString,result);
  Instruction instruction=stmt.getInstruction();
switch (instruction.getOpcode()) {
case Constants.ICONST_M1:
case Constants.ICONST_0:
case Constants.ICONST_1:
case Constants.ICONST_2:
case Constants.ICONST_3:
case Constants.ICONST_4:
case Constants.ICONST_5:
case Constants.BIPUSH:
case Constants.SIPUSH:
{
      ConstantPushInstruction instr=(ConstantPushInstruction)instruction;
      result.putAll(in);
      int value=instr.getValue().intValue();
      result.put(new Location(context.stackPtr),new ValueMapping(value));
    }
  break;
case Constants.ACONST_NULL:
result.putAll(in);
break;
case Constants.LDC:
case Constants.LDC_W:
{
LDC instr=(LDC)instruction;
result.putAll(in);
Type type=instr.getType(context.constPool);
if (type.equals(Type.INT)) {
Integer value=(Integer)instr.getValue(context.constPool);
result.put(new Location(context.stackPtr),new ValueMapping(value.intValue()));
}
 else if (type.equals(Type.STRING)) {
String value=(String)instr.getValue(context.constPool);
String name=""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
result.put(new Location(name + ""String_Node_Str""),new ValueMapping(value.length()));
}
}
break;
case Constants.LDC2_W:
result.putAll(in);
break;
case Constants.ISTORE_0:
case Constants.ISTORE_1:
case Constants.ISTORE_2:
case Constants.ISTORE_3:
case Constants.ISTORE:
{
StoreInstruction instr=(StoreInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1 && l.stackLoc != index) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(index),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.ASTORE_0:
case Constants.ASTORE_1:
case Constants.ASTORE_2:
case Constants.ASTORE_3:
case Constants.ASTORE:
result.putAll(in);
break;
case Constants.ILOAD_0:
case Constants.ILOAD_1:
case Constants.ILOAD_2:
case Constants.ILOAD_3:
case Constants.ILOAD:
{
LoadInstruction instr=(LoadInstruction)instruction;
int index=instr.getIndex();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.source=l;
result.put(new Location(context.stackPtr),m);
}
}
}
break;
case Constants.ALOAD_0:
case Constants.ALOAD_1:
case Constants.ALOAD_2:
case Constants.ALOAD_3:
case Constants.ALOAD:
result.putAll(in);
break;
case Constants.ARRAYLENGTH:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String arrayName=i.next();
ValueMapping m=in.get(new Location(arrayName + ""String_Node_Str""));
if (m != null) {
ValueMapping value=new ValueMapping(m,false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 1),new ValueMapping());
}
}
break;
case Constants.PUTFIELD:
{
PUTFIELD instr=(PUTFIELD)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 1 - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETFIELD:
{
GETFIELD instr=(GETFIELD)instruction;
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 1);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
String f=fieldName.substring(fieldName.lastIndexOf(""String_Node_Str""),fieldName.length());
String strippedName;
if (fieldName.indexOf(""String_Node_Str"") >= 0) {
strippedName=fieldName.split(""String_Node_Str"")[0] + f;
}
 else {
strippedName=fieldName;
}
if (p.containsField(strippedName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(0));
}
}
break;
case Constants.PUTSTATIC:
{
PUTSTATIC instr=(PUTSTATIC)instruction;
int fieldSize=instr.getFieldType(context.constPool).getSize();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - fieldSize) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(fieldName),new ValueMapping(in.get(l),false));
}
}
}
}
}
break;
case Constants.GETSTATIC:
{
GETSTATIC instr=(GETSTATIC)instruction;
result.putAll(in);
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr);
boolean valid=false;
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String fieldName=i.next();
if (p.containsField(fieldName)) {
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(fieldName)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid && !(instr.getFieldType(context.constPool) instanceof ReferenceType)) {
result.put(new Location(context.stackPtr),new ValueMapping());
}
}
break;
case Constants.IASTORE:
case Constants.CASTORE:
case Constants.SASTORE:
case Constants.BASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc >= 0 && l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (!receivers.containsKey(l.heapLoc)) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name),new ValueMapping(in.get(l),false));
}
}
}
}
break;
case Constants.AASTORE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 3) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IALOAD:
case Constants.CALOAD:
case Constants.SALOAD:
case Constants.BALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
Location location=new Location(context.stackPtr - 2);
boolean valid=false;
if (receivers != null) {
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String name=i.next();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.heapLoc.equals(name)) {
ValueMapping value=new ValueMapping(in.get(l),false);
value.join(result.get(location));
result.put(location,value);
valid=true;
}
}
}
}
if (!valid) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(0));
}
}
break;
case Constants.AALOAD:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.DUP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP_X1:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr - 2),new ValueMapping(in.get(l),true));
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr - 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.DUP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
result.put(l,in.get(l));
if (l.stackLoc == context.stackPtr - 2) {
result.put(new Location(context.stackPtr),new ValueMapping(in.get(l),true));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(context.stackPtr + 1),new ValueMapping(in.get(l),true));
}
}
}
break;
case Constants.POP:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.POP2:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IINC:
{
IINC instr=(IINC)instruction;
int index=instr.getIndex();
int increment=instr.getIncrement();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr) {
result.put(l,in.get(l));
}
if (l.stackLoc == index) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(increment);
m.constrained.add(increment);
if (m.increment != null) {
m.increment.join(new Interval(increment,increment));
}
 else {
m.increment=new Interval(increment,increment);
}
result.put(l,m);
}
}
}
break;
case Constants.IADD:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.add(operand);
m.constrained.add(operand);
if (m.increment != null) {
m.increment.join(operand);
}
 else {
m.increment=operand;
}
result.put(l,m);
}
}
}
break;
case Constants.ISUB:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.sub(operand);
m.constrained.sub(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.INEG:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 1) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.neg();
m.constrained.neg();
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IUSHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.ushr(operand);
m.constrained.ushr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.ISHR:
{
Interval operand=new Interval();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc == context.stackPtr - 1) {
operand=in.get(l).assigned;
}
}
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping(in.get(l),true);
m.assigned.shr(operand);
m.constrained.shr(operand);
m.increment=new Interval();
result.put(l,m);
}
}
}
break;
case Constants.IAND:
case Constants.IOR:
case Constants.IXOR:
case Constants.IMUL:
case Constants.IDIV:
case Constants.IREM:
case Constants.ISHL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
 else if (l.stackLoc == context.stackPtr - 2) {
ValueMapping m=new ValueMapping();
result.put(l,m);
}
}
}
break;
case Constants.I2B:
case Constants.I2C:
case Constants.I2S:
result.putAll(in);
break;
case Constants.MONITORENTER:
result.putAll(in);
context.syncLevel++;
break;
case Constants.MONITOREXIT:
result.putAll(in);
context.syncLevel--;
if (context.syncLevel < 0) {
System.err.println(""String_Node_Str"");
System.exit(-1);
}
break;
case Constants.CHECKCAST:
result.putAll(in);
break;
case Constants.INSTANCEOF:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
ValueMapping bool=new ValueMapping();
bool.assigned.setLb(0);
bool.assigned.setUb(1);
result.put(new Location(context.stackPtr - 1),bool);
}
break;
case Constants.NEW:
result.putAll(in);
break;
case Constants.NEWARRAY:
{
NEWARRAY instr=(NEWARRAY)instruction;
String name=instr.getType().toString();
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.ANEWARRAY:
{
ANEWARRAY instr=(ANEWARRAY)instruction;
String name=instr.getType(context.constPool).toString() + ""String_Node_Str"";
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
break;
case Constants.MULTIANEWARRAY:
{
MULTIANEWARRAY instr=(MULTIANEWARRAY)instruction;
int dim=instr.getDimensions();
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - dim) {
result.put(l,in.get(l));
}
}
String type=instr.getType(context.constPool).toString();
type=type.substring(0,type.indexOf(""String_Node_Str""));
for (int i=1; i <= dim; i++) {
String name=type;
for (int k=0; k < i; k++) {
name+=""String_Node_Str"";
}
name+=""String_Node_Str"" + context.method + ""String_Node_Str""+ stmt.getPosition();
for (Iterator<Location> k=in.keySet().iterator(); k.hasNext(); ) {
Location l=k.next();
if (l.stackLoc == context.stackPtr - i) {
result.put(new Location(name + ""String_Node_Str""),in.get(l));
}
}
}
}
break;
case Constants.GOTO:
result.putAll(in);
break;
case Constants.IFNULL:
case Constants.IFNONNULL:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 1) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IF_ACMPEQ:
case Constants.IF_ACMPNE:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < context.stackPtr - 2) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IFEQ:
case Constants.IFNE:
case Constants.IFLT:
case Constants.IFGE:
case Constants.IFLE:
case Constants.IFGT:
doIf(stmt,edge,context,in,result);
break;
case Constants.IF_ICMPEQ:
case Constants.IF_ICMPNE:
case Constants.IF_ICMPLT:
case Constants.IF_ICMPGE:
case Constants.IF_ICMPGT:
case Constants.IF_ICMPLE:
doIfIcmp(stmt,edge,context,in,result);
break;
case Constants.LOOKUPSWITCH:
case Constants.TABLESWITCH:
result.putAll(in);
break;
case Constants.INVOKEVIRTUAL:
case Constants.INVOKEINTERFACE:
case Constants.INVOKESTATIC:
case Constants.INVOKESPECIAL:
{
AppInfo p=interpreter.getProgram();
ContextMap<String,String> receivers=p.getReceivers().get(stmt);
if (receivers == null) {
System.out.println(context.method + ""String_Node_Str"" + instruction.toString(context.constPool.getConstantPool())+ ""String_Node_Str"");
break;
}
for (Iterator<String> i=receivers.keySet().iterator(); i.hasNext(); ) {
String methodName=i.next();
doInvoke(methodName,stmt,context,input,interpreter,state,retval);
}
}
break;
case Constants.ARETURN:
case Constants.RETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
}
}
break;
case Constants.IRETURN:
{
for (Iterator<Location> i=in.keySet().iterator(); i.hasNext(); ) {
Location l=i.next();
if (l.stackLoc < 0) {
result.put(l,in.get(l));
}
if (l.stackLoc == context.stackPtr - 1) {
result.put(new Location(0),new ValueMapping(in.get(l),false));
}
}
}
break;
default :
System.out.println(""String_Node_Str"" + stmt);
result.putAll(in);
break;
}
context.stackPtr+=instruction.produceStack(context.constPool) - instruction.consumeStack(context.constPool);
return retval;
}",0.9998251529911328
187065,"/** 
 * Find a local variable based on an entry in the LocalVariableTable attribute.
 * @see http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#5956
 * @param index
 * @param pc
 * @return local variable type and name or ""NA""
 */
public String getLocalVarName(int index,int pc){
  LocalVariableTable lvt=mi.getMethod().getLocalVariableTable();
  String lvName=""String_Node_Str"";
  boolean match=false;
  if (lvt != null) {
    LocalVariable[] lva=lvt.getLocalVariableTable();
    for (int i=0; i < lva.length; i++) {
      LocalVariable lv=lva[i];
      if (lv.getIndex() == index) {
        if (pc >= lv.getStartPC()) {
          if (pc <= lv.getStartPC() + lv.getLength()) {
            lvName=lv.getSignature() + ""String_Node_Str"" + lv.getName();
            if (match) {
              System.out.println(""String_Node_Str"");
              System.exit(-1);
            }
            match=true;
          }
        }
      }
    }
  }
  return lvName;
}","/** 
 * Find a local variable based on an entry in the LocalVariableTable attribute.
 * @see http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#5956
 * @param index
 * @param pc
 * @return local variable type and name or ""NA""
 */
public String getLocalVarName(int index,int pc){
  LocalVariableTable lvt=mi.getMethod().getLocalVariableTable();
  String lvName=""String_Node_Str"";
  boolean match=false;
  if (lvt != null) {
    LocalVariable[] lva=lvt.getLocalVariableTable();
    for (int i=0; i < lva.length; i++) {
      LocalVariable lv=lva[i];
      if (lv.getIndex() == index) {
        if (pc >= lv.getStartPC()) {
          if (pc <= lv.getStartPC() + lv.getLength()) {
            if (match && !lvName.equals(lv.getSignature() + ""String_Node_Str"" + lv.getName())) {
              System.out.println(""String_Node_Str"");
              System.exit(-1);
            }
            lvName=lv.getSignature() + ""String_Node_Str"" + lv.getName();
            match=true;
          }
        }
      }
    }
  }
  return lvName;
}",0.9230769230769232
187066,"/** 
 * Method getFunctionOutput, which will return the functional output for point represented by a input vector only.
 * @param xtest -the input vector
 * @return the functinal output
 */
static public int getFunctionOutputTestPointFP(int[] xtest){
  int functionalOutput_fp=0;
  int[][] data_fp_local=data_fp;
  int m=data_fp_local.length;
  int n=xtest.length;
  for (int i=0; i < m; i++) {
    if (alpha_fp[i] > 0) {
      while (n != 0) {
        n=n - 1;
        functionalOutput_fp+=(data_fp_local[m][n] >> 8) * (xtest[n] >> 8);
      }
    }
  }
  functionalOutput_fp-=bias_fp;
  return functionalOutput_fp;
}","/** 
 * Method getFunctionOutput, which will return the functional output for point represented by a input vector only.
 * @param xtest -the input vector
 * @return the functinal output
 */
static public int getFunctionOutputTestPointFP(int[] xtest){
  int functionalOutput_fp=0;
  int[][] data_fp_local=data_fp;
  int m=data_fp_local.length;
  int n=xtest.length;
  int n2=data_fp_local[0].length;
  for (int i=0; i < m; i++) {
    if (alpha_fp[i] > 0) {
      n=xtest.length;
      while (n != 0) {
        n=n - 1;
        functionalOutput_fp+=(data_fp_local[i][n] >> 8) * (xtest[n] >> 8);
      }
    }
  }
  functionalOutput_fp-=bias_fp;
  return functionalOutput_fp;
}",0.955108359133127
187067,"public Method compile(ControlFlowGraph graph,MethodGen method) throws GraphException {
  if (!graph.getFeatures().hasFeature(Features.FEATURE_VAR_ALLOC)) {
    throw new GraphException(""String_Node_Str"");
  }
  if (graph.getExceptionTable().getExceptionHandlers().size() > 0) {
    throw new GraphException(""String_Node_Str"");
  }
  InstructionList il=new InstructionList();
  method.setInstructionList(il);
  List targetList=buildTargetList(graph,il);
  BcelStmtFactory factory=new BcelStmtFactory(classInfo.getAppStruct(),classInfo.getConstantPoolInfo());
  for (Iterator it=graph.getBlocks().iterator(); it.hasNext(); ) {
    BasicBlock block=(BasicBlock)it.next();
    InstructionHandle ih=((InstructionHandle)targetList.get(block.getBlockIndex()));
    try {
      appendCode(factory,block,il,ih,targetList);
    }
 catch (    TypeException e) {
      throw new GraphException(""String_Node_Str"",e);
    }
  }
  method.removeNOPs();
  method.setMaxLocals();
  method.setMaxStack();
  method.stripAttributes(true);
  Method newMethod=method.getMethod();
  newMethod.setModifiers(method.getModifiers());
  il.dispose();
  return newMethod;
}","public Method compile(ControlFlowGraph graph,MethodGen method) throws GraphException {
  if (!graph.getFeatures().hasFeature(Features.FEATURE_VAR_ALLOC)) {
    throw new GraphException(""String_Node_Str"");
  }
  InstructionList il=new InstructionList();
  method.setInstructionList(il);
  List targetList=buildTargetList(graph,il);
  BcelStmtFactory factory=new BcelStmtFactory(classInfo.getAppStruct(),classInfo.getConstantPoolInfo());
  for (Iterator it=graph.getBlocks().iterator(); it.hasNext(); ) {
    BasicBlock block=(BasicBlock)it.next();
    InstructionHandle ih=((InstructionHandle)targetList.get(block.getBlockIndex()));
    try {
      appendCode(factory,block,il,ih,targetList);
    }
 catch (    TypeException e) {
      throw new GraphException(""String_Node_Str"",e);
    }
  }
  ExceptionTable exceptionTable=graph.getExceptionTable();
  List exceptionHandlers=exceptionTable.getExceptionHandlers();
  for (Iterator it=exceptionHandlers.iterator(); it.hasNext(); ) {
    BasicBlock.ExceptionHandler eh=(BasicBlock.ExceptionHandler)it.next();
    for (Iterator k=eh.getHandledBlocks().iterator(); k.hasNext(); ) {
      BasicBlock bb=(BasicBlock)k.next();
      int srcIndex=bb.getBlockIndex();
      InstructionHandle srcStart=(InstructionHandle)bbStarts.get(srcIndex);
      InstructionHandle srcEnd=(InstructionHandle)bbEnds.get(srcIndex);
      int dstIndex=eh.getExceptionBlock().getBlockIndex();
      InstructionHandle dstStart=(InstructionHandle)bbStarts.get(dstIndex);
      ObjectType type;
      if (eh.getExceptionClass() == null) {
        type=null;
      }
 else {
        type=new ObjectType(eh.getExceptionClass().getClassName());
      }
      method.addExceptionHandler(srcStart,srcEnd,dstStart,type);
    }
  }
  CodeExceptionGen[] cg=method.getExceptionHandlers();
  for (int i=0; i < cg.length - 1; i++) {
    if (cg[i].getEndPC().getNext() == cg[i + 1].getStartPC() && cg[i].getHandlerPC() == cg[i + 1].getHandlerPC() && cg[i].getCatchType() == cg[i + 1].getCatchType()) {
      InstructionHandle srcStart=cg[i].getStartPC();
      InstructionHandle srcEnd=cg[i + 1].getEndPC();
      InstructionHandle dstStart=cg[i].getHandlerPC();
      ObjectType type=cg[i].getCatchType();
      method.removeExceptionHandler(cg[i]);
      method.removeExceptionHandler(cg[i + 1]);
      method.addExceptionHandler(srcStart,srcEnd,dstStart,type);
    }
  }
  method.removeNOPs();
  method.setMaxLocals();
  method.setMaxStack();
  method.stripAttributes(true);
  Method newMethod=method.getMethod();
  newMethod.setModifiers(method.getModifiers());
  il.dispose();
  return newMethod;
}",0.5439531166755461
187068,"/** 
 * Insert code of block into the instruction list.
 * @param factory factory to create instructions.
 * @param block the block  to add.
 * @param il the instruction list to add the code to.
 * @param ih the last instruction before the block code.
 * @param targetList the first instruction handle per block.
 */
private void appendCode(BcelStmtFactory factory,BasicBlock block,InstructionList il,InstructionHandle ih,List targetList) throws TypeException, GraphException {
  StackCode code=block.getStackCode();
  VariableTable varTable=block.getGraph().getVariableTable();
  InstructionHandle[] targets=new InstructionHandle[block.getTargetCount()];
  for (int i=0; i < block.getTargetCount(); i++) {
    BasicBlock.Edge edge=block.getTargetEdge(i);
    if (edge != null) {
      targets[i]=(InstructionHandle)targetList.get(edge.getTargetBlock().getBlockIndex());
    }
  }
  for (Iterator it=code.getStatements().iterator(); it.hasNext(); ) {
    StackStatement stmt=(StackStatement)it.next();
    Instruction is=factory.getInstruction(stmt,varTable,targets);
    if (is == null) {
      continue;
    }
    if (is.getOpcode() != stmt.getOpcode()) {
      throw new GraphException(""String_Node_Str"" + is.getOpcode() + ""String_Node_Str""+ stmt.getOpcode()+ ""String_Node_Str"");
    }
    if (is instanceof BranchInstruction) {
      ih=il.append(ih,(BranchInstruction)is);
    }
 else {
      ih=il.append(ih,is);
    }
  }
  BasicBlock.Edge next=block.getNextBlockEdge();
  if (next != null) {
    int targetNr=next.getTargetBlock().getBlockIndex();
    if (targetNr != block.getBlockIndex() + 1) {
      il.append(ih,new GOTO((InstructionHandle)targetList.get(targetNr)));
    }
  }
}","/** 
 * Insert code of block into the instruction list.
 * @param factory factory to create instructions.
 * @param block the block  to add.
 * @param il the instruction list to add the code to.
 * @param ih the last instruction before the block code.
 * @param targetList the first instruction handle per block.
 */
private void appendCode(BcelStmtFactory factory,BasicBlock block,InstructionList il,InstructionHandle ih,List targetList) throws TypeException, GraphException {
  StackCode code=block.getStackCode();
  VariableTable varTable=block.getGraph().getVariableTable();
  InstructionHandle[] targets=new InstructionHandle[block.getTargetCount()];
  for (int i=0; i < block.getTargetCount(); i++) {
    BasicBlock.Edge edge=block.getTargetEdge(i);
    if (edge != null) {
      targets[i]=(InstructionHandle)targetList.get(edge.getTargetBlock().getBlockIndex());
    }
  }
  bbStarts.put(block.getBlockIndex(),ih);
  bbEnds.put(block.getBlockIndex(),ih);
  for (Iterator it=code.getStatements().iterator(); it.hasNext(); ) {
    StackStatement stmt=(StackStatement)it.next();
    Instruction is=factory.getInstruction(stmt,varTable,targets);
    if (is == null) {
      continue;
    }
    if (is.getOpcode() != stmt.getOpcode()) {
      throw new GraphException(""String_Node_Str"" + is.getOpcode() + ""String_Node_Str""+ stmt.getOpcode()+ ""String_Node_Str"");
    }
    if (is instanceof BranchInstruction) {
      ih=il.append(ih,(BranchInstruction)is);
    }
 else {
      ih=il.append(ih,is);
    }
    bbEnds.put(block.getBlockIndex(),ih);
  }
  BasicBlock.Edge next=block.getNextBlockEdge();
  if (next != null) {
    int targetNr=next.getTargetBlock().getBlockIndex();
    if (targetNr != block.getBlockIndex() + 1) {
      ih=il.append(ih,new GOTO((InstructionHandle)targetList.get(targetNr)));
      bbEnds.put(block.getBlockIndex(),ih);
    }
  }
}",0.9518716577540108
187069,"public Instruction getInstruction(StackStatement stmt,VariableTable varTable,InstructionHandle[] targets) throws TypeException {
  if (stmt instanceof StackArrayLength) {
    return new ARRAYLENGTH();
  }
  if (stmt instanceof StackArrayLoad) {
    Instruction is;
    if (((StackArrayLoad)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
      is=new AALOAD();
    }
 else {
switch (((StackArrayLoad)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
        is=new BALOAD();
      break;
case TypeInfo.TYPE_BYTE:
    is=new BALOAD();
  break;
case TypeInfo.TYPE_CHAR:
is=new CALOAD();
break;
case TypeInfo.TYPE_SHORT:
is=new SALOAD();
break;
case TypeInfo.TYPE_INT:
is=new IALOAD();
break;
case TypeInfo.TYPE_LONG:
is=new LALOAD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FALOAD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DALOAD();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayLoad)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackArrayStore) {
Instruction is;
if (((StackArrayStore)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new AASTORE();
}
 else {
switch (((StackArrayStore)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
is=new BASTORE();
break;
case TypeInfo.TYPE_BYTE:
is=new BASTORE();
break;
case TypeInfo.TYPE_CHAR:
is=new CASTORE();
break;
case TypeInfo.TYPE_SHORT:
is=new SASTORE();
break;
case TypeInfo.TYPE_INT:
is=new IASTORE();
break;
case TypeInfo.TYPE_LONG:
is=new LASTORE();
break;
case TypeInfo.TYPE_FLOAT:
is=new FASTORE();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DASTORE();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayStore)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackBinop) {
StackBinop binop=(StackBinop)stmt;
Instruction is=null;
switch (binop.getOperand()) {
case StackBinop.OP_ADD:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IADD();
break;
case TypeInfo.TYPE_LONG:
is=new LADD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FADD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DADD();
break;
}
break;
case StackBinop.OP_AND:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IAND();
break;
case TypeInfo.TYPE_LONG:
is=new LAND();
break;
}
break;
case StackBinop.OP_CMP:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_LONG:
is=new LCMP();
break;
}
break;
case StackBinop.OP_CMPG:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPG();
break;
}
break;
case StackBinop.OP_CMPL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPL();
break;
}
break;
case StackBinop.OP_DIV:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IDIV();
break;
case TypeInfo.TYPE_LONG:
is=new LDIV();
break;
case TypeInfo.TYPE_FLOAT:
is=new FDIV();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DDIV();
break;
}
break;
case StackBinop.OP_LOGIC_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IUSHR();
break;
case TypeInfo.TYPE_LONG:
is=new LUSHR();
break;
}
break;
case StackBinop.OP_MUL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IMUL();
break;
case TypeInfo.TYPE_LONG:
is=new LMUL();
break;
case TypeInfo.TYPE_FLOAT:
is=new FMUL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DMUL();
break;
}
break;
case StackBinop.OP_OR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IOR();
break;
case TypeInfo.TYPE_LONG:
is=new LOR();
break;
}
break;
case StackBinop.OP_REMINDER:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IREM();
break;
case TypeInfo.TYPE_LONG:
is=new LREM();
break;
case TypeInfo.TYPE_FLOAT:
is=new FREM();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DREM();
break;
}
break;
case StackBinop.OP_SHIFT_LEFT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHL();
break;
case TypeInfo.TYPE_LONG:
is=new LSHL();
break;
}
break;
case StackBinop.OP_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHR();
break;
case TypeInfo.TYPE_LONG:
is=new LSHR();
break;
}
break;
case StackBinop.OP_SUB:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISUB();
break;
case TypeInfo.TYPE_LONG:
is=new LSUB();
break;
case TypeInfo.TYPE_FLOAT:
is=new FSUB();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSUB();
break;
}
break;
case StackBinop.OP_XOR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IXOR();
break;
case TypeInfo.TYPE_LONG:
is=new LXOR();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackBreakpoint) {
return new BREAKPOINT();
}
if (stmt instanceof StackCheckcast) {
StackCheckcast cast=(StackCheckcast)stmt;
return new CHECKCAST(cp.addConstant(cast.getClassConstant()));
}
if (stmt instanceof StackConvert) {
StackConvert convert=(StackConvert)stmt;
Instruction is=null;
switch (convert.getFromType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (convert.getToType().getType()) {
case TypeInfo.TYPE_LONG:
is=new I2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new I2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new I2D();
break;
case TypeInfo.TYPE_SHORT:
is=new I2S();
break;
case TypeInfo.TYPE_BYTE:
is=new I2B();
break;
case TypeInfo.TYPE_BOOL:
is=new I2B();
break;
case TypeInfo.TYPE_CHAR:
is=new I2C();
break;
}
break;
case TypeInfo.TYPE_LONG:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new L2I();
break;
case TypeInfo.TYPE_FLOAT:
is=new L2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new L2D();
break;
}
break;
case TypeInfo.TYPE_FLOAT:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new F2I();
break;
case TypeInfo.TYPE_LONG:
is=new F2L();
break;
case TypeInfo.TYPE_DOUBLE:
is=new F2D();
break;
}
break;
case TypeInfo.TYPE_DOUBLE:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new D2I();
break;
case TypeInfo.TYPE_LONG:
is=new D2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new D2F();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackDup) {
StackDup dup=(StackDup)stmt;
Instruction is=null;
switch (dup.getTypeLength()) {
case 1:
switch (dup.getDownLength()) {
case 0:
is=new DUP();
break;
case 1:
is=new DUP_X1();
break;
case 2:
is=new DUP_X2();
break;
}
break;
case 2:
switch (dup.getDownLength()) {
case 0:
is=new DUP2();
break;
case 1:
is=new DUP2_X1();
break;
case 2:
is=new DUP2_X2();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + dup.getTypeLength() + ""String_Node_Str""+ dup.getDownLength()+ ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackEntermonitor) {
return new MONITORENTER();
}
if (stmt instanceof StackExitmonitor) {
return new MONITOREXIT();
}
if (stmt instanceof StackGetField) {
StackGetField getfield=(StackGetField)stmt;
Instruction is;
if (getfield.isStatic()) {
is=new GETSTATIC(cp.addConstant(getfield.getConstantField()));
}
 else {
is=new GETFIELD(cp.addConstant(getfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackGoto) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
return new GOTO(targets[0]);
}
if (stmt instanceof StackIfCmp) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfCmp cmp=(StackIfCmp)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ICMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ICMPNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IF_ICMPGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IF_ICMPGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IF_ICMPLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IF_ICMPLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ACMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ACMPNE(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIfZero) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfZero cmp=(StackIfZero)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IFGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IFGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IFLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IFLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFNULL(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNONNULL(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIInc) {
StackIInc inc=(StackIInc)stmt;
return new IINC(varTable.getIndex(inc.getIncVariable()),inc.getIncrement());
}
if (stmt instanceof StackInstanceof) {
return new INSTANCEOF(cp.addConstant(((StackInstanceof)stmt).getClassConstant()));
}
if (stmt instanceof StackInvoke) {
StackInvoke invoke=(StackInvoke)stmt;
int cls=cp.addConstant(invoke.getMethodConstant());
Instruction is=null;
switch (invoke.getInvokeType()) {
case StackInvoke.TYPE_INTERFACE:
int count=invoke.getParamSlotCount();
is=new INVOKEINTERFACE(cls,count);
break;
case StackInvoke.TYPE_SPECIAL:
is=new INVOKESPECIAL(cls);
break;
case StackInvoke.TYPE_STATIC:
is=new INVOKESTATIC(cls);
break;
case StackInvoke.TYPE_VIRTUAL:
is=new INVOKEVIRTUAL(cls);
break;
}
return is;
}
if (stmt instanceof StackJSR) {
return new JSR(null);
}
if (stmt instanceof StackJSRReturn) {
return new RET(varTable.getIndex(((StackJSRReturn)stmt).getRetAddressVar()));
}
if (stmt instanceof StackLoad) {
StackLoad load=(StackLoad)stmt;
int index=varTable.getIndex(load.getVariable());
Instruction is=null;
switch (load.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ILOAD(index);
break;
case TypeInfo.TYPE_LONG:
is=new LLOAD(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FLOAD(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DLOAD(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ALOAD(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackLookupswitch) {
StackLookupswitch ls=(StackLookupswitch)stmt;
int[] matchs=ls.getMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new LOOKUPSWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackNegate) {
Instruction is=null;
switch (((StackNegate)stmt).getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new INEG();
break;
case TypeInfo.TYPE_LONG:
is=new LNEG();
break;
case TypeInfo.TYPE_FLOAT:
is=new FNEG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DNEG();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackNew) {
return new NEW(cp.addConstant(((StackNew)stmt).getObjectClass()));
}
if (stmt instanceof StackNewArray) {
StackNewArray newArray=(StackNewArray)stmt;
Instruction is;
if (newArray.getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new ANEWARRAY(cp.addConstant(((RefTypeInfo)newArray.getArrayType()).getClassConstant()));
}
 else {
is=new NEWARRAY(getBcelType(newArray.getArrayType()).getType());
}
return is;
}
if (stmt instanceof StackNewMultiArray) {
StackNewMultiArray ma=(StackNewMultiArray)stmt;
return new MULTIANEWARRAY(cp.addConstant(ma.getArrayClass()),ma.getDimensions());
}
if (stmt instanceof StackNop) {
return new NOP();
}
if (stmt instanceof StackPop) {
Instruction is=null;
switch (((StackPop)stmt).getPopSize()) {
case 1:
is=new POP();
break;
case 2:
is=new POP2();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + ((StackPop)stmt).getPopSize() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPush) {
StackPush push=(StackPush)stmt;
ConstantValue value=push.getValue();
Instruction is=null;
switch (value.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
int iValue=value.getIntValue();
if (iValue >= -1 && iValue <= 5) {
is=InstructionConstants.INSTRUCTIONS[Constants.ICONST_0 + iValue];
}
 else if (iValue >= -128 && iValue <= 127) {
is=new BIPUSH((byte)iValue);
}
 else if (iValue >= -32768 && iValue <= 32767) {
is=new SIPUSH((short)iValue);
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_LONG:
long lValue=value.getLongValue();
if (lValue == 0) {
is=InstructionConstants.LCONST_0;
}
 else if (lValue == 1) {
is=InstructionConstants.LCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_FLOAT:
float fValue=value.getFloatValue();
if (fValue == 0.0f) {
is=InstructionConstants.FCONST_0;
}
 else if (fValue == 1.0f) {
is=InstructionConstants.FCONST_1;
}
 else if (fValue == 2.0f) {
is=InstructionConstants.FCONST_2;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_DOUBLE:
double dValue=value.getDoubleValue();
if (dValue == 0.0) {
is=InstructionConstants.DCONST_0;
}
 else if (dValue == 1.0) {
is=InstructionConstants.DCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_REFERENCE:
String txt=value.getTxtValue();
if (txt == null) {
is=InstructionConstants.ACONST_NULL;
}
 else {
is=new LDC(cp.addConstant(value));
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + push.getType().getTypeName() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPutField) {
StackPutField putfield=(StackPutField)stmt;
Instruction is;
if (putfield.isStatic()) {
is=new PUTSTATIC(cp.addConstant(putfield.getConstantField()));
}
 else {
is=new PUTFIELD(cp.addConstant(putfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackReturn) {
StackReturn ret=(StackReturn)stmt;
Instruction is=null;
if (ret.getType() == null) {
is=new RETURN();
}
 else {
switch (ret.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IRETURN();
break;
case TypeInfo.TYPE_LONG:
is=new LRETURN();
break;
case TypeInfo.TYPE_FLOAT:
is=new FRETURN();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DRETURN();
break;
case TypeInfo.TYPE_REFERENCE:
is=new ARETURN();
break;
}
}
return is;
}
if (stmt instanceof StackStore) {
StackStore store=(StackStore)stmt;
int index=varTable.getIndex(store.getVariable());
Instruction is=null;
switch (store.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISTORE(index);
break;
case TypeInfo.TYPE_LONG:
is=new LSTORE(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FSTORE(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSTORE(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ASTORE(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackSwap) {
return new SWAP();
}
if (stmt instanceof StackTableswitch) {
int[] matchs=((StackTableswitch)stmt).createMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new TABLESWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackThrow) {
return new ATHROW();
}
if (stmt instanceof IdentityStmt) {
return null;
}
return null;
}","public Instruction getInstruction(StackStatement stmt,VariableTable varTable,InstructionHandle[] targets) throws TypeException {
  if (stmt instanceof StackArrayLength) {
    return new ARRAYLENGTH();
  }
  if (stmt instanceof StackArrayLoad) {
    Instruction is;
    if (((StackArrayLoad)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
      is=new AALOAD();
    }
 else {
switch (((StackArrayLoad)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
        is=new BALOAD();
      break;
case TypeInfo.TYPE_BYTE:
    is=new BALOAD();
  break;
case TypeInfo.TYPE_CHAR:
is=new CALOAD();
break;
case TypeInfo.TYPE_SHORT:
is=new SALOAD();
break;
case TypeInfo.TYPE_INT:
is=new IALOAD();
break;
case TypeInfo.TYPE_LONG:
is=new LALOAD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FALOAD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DALOAD();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayLoad)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackArrayStore) {
Instruction is;
if (((StackArrayStore)stmt).getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new AASTORE();
}
 else {
switch (((StackArrayStore)stmt).getArrayType().getType()) {
case TypeInfo.TYPE_BOOL:
is=new BASTORE();
break;
case TypeInfo.TYPE_BYTE:
is=new BASTORE();
break;
case TypeInfo.TYPE_CHAR:
is=new CASTORE();
break;
case TypeInfo.TYPE_SHORT:
is=new SASTORE();
break;
case TypeInfo.TYPE_INT:
is=new IASTORE();
break;
case TypeInfo.TYPE_LONG:
is=new LASTORE();
break;
case TypeInfo.TYPE_FLOAT:
is=new FASTORE();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DASTORE();
break;
default :
throw new TypeException(""String_Node_Str"" + ((StackArrayStore)stmt).getArrayType().getTypeName() + ""String_Node_Str"");
}
}
return is;
}
if (stmt instanceof StackBinop) {
StackBinop binop=(StackBinop)stmt;
Instruction is=null;
switch (binop.getOperand()) {
case StackBinop.OP_ADD:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IADD();
break;
case TypeInfo.TYPE_LONG:
is=new LADD();
break;
case TypeInfo.TYPE_FLOAT:
is=new FADD();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DADD();
break;
}
break;
case StackBinop.OP_AND:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IAND();
break;
case TypeInfo.TYPE_LONG:
is=new LAND();
break;
}
break;
case StackBinop.OP_CMP:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_LONG:
is=new LCMP();
break;
}
break;
case StackBinop.OP_CMPG:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPG();
break;
}
break;
case StackBinop.OP_CMPL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_FLOAT:
is=new FCMPL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DCMPL();
break;
}
break;
case StackBinop.OP_DIV:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IDIV();
break;
case TypeInfo.TYPE_LONG:
is=new LDIV();
break;
case TypeInfo.TYPE_FLOAT:
is=new FDIV();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DDIV();
break;
}
break;
case StackBinop.OP_LOGIC_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IUSHR();
break;
case TypeInfo.TYPE_LONG:
is=new LUSHR();
break;
}
break;
case StackBinop.OP_MUL:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IMUL();
break;
case TypeInfo.TYPE_LONG:
is=new LMUL();
break;
case TypeInfo.TYPE_FLOAT:
is=new FMUL();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DMUL();
break;
}
break;
case StackBinop.OP_OR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IOR();
break;
case TypeInfo.TYPE_LONG:
is=new LOR();
break;
}
break;
case StackBinop.OP_REMINDER:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IREM();
break;
case TypeInfo.TYPE_LONG:
is=new LREM();
break;
case TypeInfo.TYPE_FLOAT:
is=new FREM();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DREM();
break;
}
break;
case StackBinop.OP_SHIFT_LEFT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHL();
break;
case TypeInfo.TYPE_LONG:
is=new LSHL();
break;
}
break;
case StackBinop.OP_SHIFT_RIGHT:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISHR();
break;
case TypeInfo.TYPE_LONG:
is=new LSHR();
break;
}
break;
case StackBinop.OP_SUB:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISUB();
break;
case TypeInfo.TYPE_LONG:
is=new LSUB();
break;
case TypeInfo.TYPE_FLOAT:
is=new FSUB();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSUB();
break;
}
break;
case StackBinop.OP_XOR:
switch (binop.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IXOR();
break;
case TypeInfo.TYPE_LONG:
is=new LXOR();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackBreakpoint) {
return new BREAKPOINT();
}
if (stmt instanceof StackCheckcast) {
StackCheckcast cast=(StackCheckcast)stmt;
return new CHECKCAST(cp.addConstant(cast.getClassConstant()));
}
if (stmt instanceof StackConvert) {
StackConvert convert=(StackConvert)stmt;
Instruction is=null;
switch (convert.getFromType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (convert.getToType().getType()) {
case TypeInfo.TYPE_LONG:
is=new I2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new I2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new I2D();
break;
case TypeInfo.TYPE_SHORT:
is=new I2S();
break;
case TypeInfo.TYPE_BYTE:
is=new I2B();
break;
case TypeInfo.TYPE_BOOL:
is=new I2B();
break;
case TypeInfo.TYPE_CHAR:
is=new I2C();
break;
}
break;
case TypeInfo.TYPE_LONG:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new L2I();
break;
case TypeInfo.TYPE_FLOAT:
is=new L2F();
break;
case TypeInfo.TYPE_DOUBLE:
is=new L2D();
break;
}
break;
case TypeInfo.TYPE_FLOAT:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new F2I();
break;
case TypeInfo.TYPE_LONG:
is=new F2L();
break;
case TypeInfo.TYPE_DOUBLE:
is=new F2D();
break;
}
break;
case TypeInfo.TYPE_DOUBLE:
switch (convert.getToType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new D2I();
break;
case TypeInfo.TYPE_LONG:
is=new D2L();
break;
case TypeInfo.TYPE_FLOAT:
is=new D2F();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackDup) {
StackDup dup=(StackDup)stmt;
Instruction is=null;
switch (dup.getTypeLength()) {
case 1:
switch (dup.getDownLength()) {
case 0:
is=new DUP();
break;
case 1:
is=new DUP_X1();
break;
case 2:
is=new DUP_X2();
break;
}
break;
case 2:
switch (dup.getDownLength()) {
case 0:
is=new DUP2();
break;
case 1:
is=new DUP2_X1();
break;
case 2:
is=new DUP2_X2();
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + dup.getTypeLength() + ""String_Node_Str""+ dup.getDownLength()+ ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackEntermonitor) {
return new MONITORENTER();
}
if (stmt instanceof StackExitmonitor) {
return new MONITOREXIT();
}
if (stmt instanceof StackGetField) {
StackGetField getfield=(StackGetField)stmt;
Instruction is;
if (getfield.isStatic()) {
is=new GETSTATIC(cp.addConstant(getfield.getConstantField()));
}
 else {
is=new GETFIELD(cp.addConstant(getfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackGoto) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
return new GOTO(targets[0]);
}
if (stmt instanceof StackIfCmp) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfCmp cmp=(StackIfCmp)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ICMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ICMPNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IF_ICMPGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IF_ICMPGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IF_ICMPLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IF_ICMPLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IF_ACMPEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IF_ACMPNE(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIfZero) {
if (targets.length < 1) {
throw new TypeException(""String_Node_Str"");
}
StackIfZero cmp=(StackIfZero)stmt;
Instruction is=null;
switch (cmp.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFEQ(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNE(targets[0]);
break;
case StackIfCmp.OP_GREATER:
is=new IFGT(targets[0]);
break;
case StackIfCmp.OP_GREATER_OR_EQUAL:
is=new IFGE(targets[0]);
break;
case StackIfCmp.OP_LESS:
is=new IFLT(targets[0]);
break;
case StackIfCmp.OP_LESS_OR_EQUAL:
is=new IFLE(targets[0]);
break;
}
break;
case TypeInfo.TYPE_REFERENCE:
switch (cmp.getOperand()) {
case StackIfCmp.OP_EQUAL:
is=new IFNULL(targets[0]);
break;
case StackIfCmp.OP_NOTEQUAL:
is=new IFNONNULL(targets[0]);
break;
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackIInc) {
StackIInc inc=(StackIInc)stmt;
return new IINC(varTable.getIndex(inc.getIncVariable()),inc.getIncrement());
}
if (stmt instanceof StackInstanceof) {
return new INSTANCEOF(cp.addConstant(((StackInstanceof)stmt).getClassConstant()));
}
if (stmt instanceof StackInvoke) {
StackInvoke invoke=(StackInvoke)stmt;
int cls=cp.addConstant(invoke.getMethodConstant());
Instruction is=null;
switch (invoke.getInvokeType()) {
case StackInvoke.TYPE_INTERFACE:
int count=invoke.getParamSlotCount();
is=new INVOKEINTERFACE(cls,count);
break;
case StackInvoke.TYPE_SPECIAL:
is=new INVOKESPECIAL(cls);
break;
case StackInvoke.TYPE_STATIC:
is=new INVOKESTATIC(cls);
break;
case StackInvoke.TYPE_VIRTUAL:
is=new INVOKEVIRTUAL(cls);
break;
}
return is;
}
if (stmt instanceof StackJSR) {
return new JSR(null);
}
if (stmt instanceof StackJSRReturn) {
return new RET(varTable.getIndex(((StackJSRReturn)stmt).getRetAddressVar()));
}
if (stmt instanceof StackLoad) {
StackLoad load=(StackLoad)stmt;
int index=varTable.getIndex(load.getVariable());
Instruction is=null;
switch (load.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ILOAD(index);
break;
case TypeInfo.TYPE_LONG:
is=new LLOAD(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FLOAD(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DLOAD(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ALOAD(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackLookupswitch) {
StackLookupswitch ls=(StackLookupswitch)stmt;
int[] matchs=ls.getMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new LOOKUPSWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackNegate) {
Instruction is=null;
switch (((StackNegate)stmt).getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new INEG();
break;
case TypeInfo.TYPE_LONG:
is=new LNEG();
break;
case TypeInfo.TYPE_FLOAT:
is=new FNEG();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DNEG();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackNew) {
return new NEW(cp.addConstant(((StackNew)stmt).getObjectClass()));
}
if (stmt instanceof StackNewArray) {
StackNewArray newArray=(StackNewArray)stmt;
Instruction is;
if (newArray.getArrayType().getMachineType() == TypeInfo.TYPE_REFERENCE) {
is=new ANEWARRAY(cp.addConstant(((RefTypeInfo)newArray.getArrayType()).getClassConstant()));
}
 else {
is=new NEWARRAY(getBcelType(newArray.getArrayType()).getType());
}
return is;
}
if (stmt instanceof StackNewMultiArray) {
StackNewMultiArray ma=(StackNewMultiArray)stmt;
return new MULTIANEWARRAY(cp.addConstant(ma.getArrayClass()),ma.getDimensions());
}
if (stmt instanceof StackNop) {
return new NOP();
}
if (stmt instanceof StackPop) {
Instruction is=null;
switch (((StackPop)stmt).getPopSize()) {
case 1:
is=new POP();
break;
case 2:
is=new POP2();
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + ((StackPop)stmt).getPopSize() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPush) {
StackPush push=(StackPush)stmt;
ConstantValue value=push.getValue();
Instruction is=null;
switch (value.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
int iValue=value.getIntValue();
if (iValue >= -1 && iValue <= 5) {
is=InstructionConstants.INSTRUCTIONS[Constants.ICONST_0 + iValue];
}
 else if (iValue >= -128 && iValue <= 127) {
is=new BIPUSH((byte)iValue);
}
 else if (iValue >= -32768 && iValue <= 32767) {
is=new SIPUSH((short)iValue);
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_LONG:
long lValue=value.getLongValue();
if (lValue == 0) {
is=InstructionConstants.LCONST_0;
}
 else if (lValue == 1) {
is=InstructionConstants.LCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_FLOAT:
float fValue=value.getFloatValue();
if (fValue == 0.0f) {
is=InstructionConstants.FCONST_0;
}
 else if (fValue == 1.0f) {
is=InstructionConstants.FCONST_1;
}
 else if (fValue == 2.0f) {
is=InstructionConstants.FCONST_2;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
case TypeInfo.TYPE_DOUBLE:
double dValue=value.getDoubleValue();
if (dValue == 0.0) {
is=InstructionConstants.DCONST_0;
}
 else if (dValue == 1.0) {
is=InstructionConstants.DCONST_1;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC2_W(index);
}
break;
case TypeInfo.TYPE_REFERENCE:
String txt=value.getTxtValue();
if (txt == null) {
is=InstructionConstants.ACONST_NULL;
}
 else {
int index=cp.addConstant(value);
push.setPoolIndex(index);
is=new LDC(index);
}
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"" + push.getType().getTypeName() + ""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackPutField) {
StackPutField putfield=(StackPutField)stmt;
Instruction is;
if (putfield.isStatic()) {
is=new PUTSTATIC(cp.addConstant(putfield.getConstantField()));
}
 else {
is=new PUTFIELD(cp.addConstant(putfield.getConstantField()));
}
return is;
}
if (stmt instanceof StackReturn) {
StackReturn ret=(StackReturn)stmt;
Instruction is=null;
if (ret.getType() == null) {
is=new RETURN();
}
 else {
switch (ret.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new IRETURN();
break;
case TypeInfo.TYPE_LONG:
is=new LRETURN();
break;
case TypeInfo.TYPE_FLOAT:
is=new FRETURN();
break;
case TypeInfo.TYPE_DOUBLE:
is=new DRETURN();
break;
case TypeInfo.TYPE_REFERENCE:
is=new ARETURN();
break;
}
}
return is;
}
if (stmt instanceof StackStore) {
StackStore store=(StackStore)stmt;
int index=varTable.getIndex(store.getVariable());
Instruction is=null;
switch (store.getType().getMachineType()) {
case TypeInfo.TYPE_INT:
is=new ISTORE(index);
break;
case TypeInfo.TYPE_LONG:
is=new LSTORE(index);
break;
case TypeInfo.TYPE_FLOAT:
is=new FSTORE(index);
break;
case TypeInfo.TYPE_DOUBLE:
is=new DSTORE(index);
break;
case TypeInfo.TYPE_REFERENCE:
is=new ASTORE(index);
break;
}
if (is == null) {
throw new TypeException(""String_Node_Str"");
}
return is;
}
if (stmt instanceof StackSwap) {
return new SWAP();
}
if (stmt instanceof StackTableswitch) {
int[] matchs=((StackTableswitch)stmt).createMatchs();
if (targets.length < matchs.length + 1) {
throw new TypeException(""String_Node_Str"");
}
InstructionHandle[] mTargets=new InstructionHandle[matchs.length];
System.arraycopy(targets,1,mTargets,0,mTargets.length);
return new TABLESWITCH(matchs,mTargets,targets[0]);
}
if (stmt instanceof StackThrow) {
return new ATHROW();
}
if (stmt instanceof IdentityStmt) {
return null;
}
return null;
}",0.9980477828390816
187070,"public int size(){
  return variables.size();
}","public int size(){
  return variables.size() + 1;
}",0.9591836734693876
187071,"protected void compileGraph(ControlFlowGraph graph) throws GraphException {
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  BcelGraphCompiler compiler=new BcelGraphCompiler(methodInfo.getClassInfo(),cpg);
  method=compiler.compile(graph,methodInfo.getClassInfo().getClassName(),method);
  methodInfo.setMethod(method);
}","protected void compileGraph(ControlFlowGraph graph) throws GraphException {
  ConstantPoolGen cpg=methodInfo.getConstantPoolGen();
  ClassInfo classInfo=methodInfo.getClassInfo();
  BcelGraphCompiler compiler=new BcelGraphCompiler(classInfo,cpg);
  method=compiler.compile(graph,classInfo.getClassName(),method);
  methodInfo.setMethod(method);
}",0.8266666666666667
187072,"private Method replace(Method method){
  MethodGen mg=new MethodGen(method,clazz.getClassName(),cpoolgen);
  InstructionList il=mg.getInstructionList();
  InstructionFinder f=new InstructionFinder(il);
  String methodId=method.getName() + method.getSignature();
  MethodInfo mi=cli.getMethodInfo(methodId);
  String invokeStr=""String_Node_Str"";
  for (Iterator i=f.search(invokeStr); i.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])i.next();
    InstructionHandle first=match[0];
    InvokeInstruction ii=(InvokeInstruction)first.getInstruction();
    if (ii.getClassName(cpoolgen).equals(JOPizer.nativeClass)) {
      short opid=(short)JopInstr.getNative(ii.getMethodName(cpoolgen));
      if (opid == -1) {
        System.err.println(method.getName() + ""String_Node_Str"" + ii.getMethodName(cpoolgen)+ ""String_Node_Str"");
        first.setInstruction(new NOP());
      }
 else {
        first.setInstruction(new NativeInstruction(opid,(short)1));
        jz.outTxt.println(""String_Node_Str"" + first.getPosition());
        if (JOPizer.dumpMgci) {
          il.setPositions();
          int pc=first.getPosition();
          GCRTMethodInfo.removePC(pc + 2,mi);
          GCRTMethodInfo.removePC(pc + 1,mi);
        }
      }
    }
    if (ii instanceof INVOKESPECIAL) {
      if (!ii.getMethodName(cpoolgen).equals(""String_Node_Str"")) {
        if (!cli.clazz.getClassName().equals(ii.getClassName(cpoolgen))) {
          first.setInstruction(new JOPSYS_INVOKESUPER((short)ii.getIndex()));
        }
      }
    }
  }
  f=new InstructionFinder(il);
  String cpInstr=""String_Node_Str"";
  for (Iterator it=f.search(cpInstr); it.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])it.next();
    InstructionHandle ih=match[0];
    CPInstruction cpii=(CPInstruction)ih.getInstruction();
    int index=cpii.getIndex();
    FieldInstruction fi=null;
    Type ft=null;
    if (cpii instanceof FieldInstruction) {
      fi=(FieldInstruction)ih.getInstruction();
      ft=fi.getFieldType(cpoolgen);
    }
    Integer idx=new Integer(index);
    int pos=cli.cpoolUsed.indexOf(idx);
    int new_index=pos + 1;
    if (pos == -1) {
      System.out.println(""String_Node_Str"" + index + ""String_Node_Str""+ cpoolgen.getConstant(index)+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + cli.cpoolUsed);
      System.out.println(""String_Node_Str"" + cpoolgen);
      System.exit(-1);
    }
 else {
      if (cpii instanceof GETFIELD || cpii instanceof PUTFIELD) {
        int offset=getFieldOffset(cp,index);
        new_index=offset;
      }
      cpii.setIndex(new_index);
    }
    if (cpii instanceof FieldInstruction) {
      boolean isRef=ft instanceof ReferenceType;
      boolean isLong=ft == BasicType.LONG || ft == BasicType.DOUBLE;
      if (fi instanceof GETSTATIC) {
        if (isRef) {
          ih.setInstruction(new GETSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTSTATIC) {
        if (isRef) {
          ih.setInstruction(new PUTSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof GETFIELD) {
        if (isRef) {
          ih.setInstruction(new GETFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETFIELD_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTFIELD) {
        if (isRef) {
          ih.setInstruction(new PUTFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTFIELD_LONG((short)new_index));
        }
      }
    }
  }
  Method m=mg.getMethod();
  il.dispose();
  return m;
}","private Method replace(Method method){
  MethodGen mg=new MethodGen(method,clazz.getClassName(),cpoolgen);
  InstructionList il=mg.getInstructionList();
  InstructionFinder f=new InstructionFinder(il);
  String methodId=method.getName() + method.getSignature();
  MethodInfo mi=cli.getMethodInfo(methodId);
  String invokeStr=""String_Node_Str"";
  for (Iterator i=f.search(invokeStr); i.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])i.next();
    InstructionHandle first=match[0];
    InvokeInstruction ii=(InvokeInstruction)first.getInstruction();
    if (ii.getClassName(cpoolgen).equals(JOPizer.nativeClass)) {
      short opid=(short)JopInstr.getNative(ii.getMethodName(cpoolgen));
      if (opid == -1) {
        System.err.println(method.getName() + ""String_Node_Str"" + ii.getMethodName(cpoolgen)+ ""String_Node_Str"");
        first.setInstruction(new NOP());
      }
 else {
        first.setInstruction(new NativeInstruction(opid,(short)1));
        jz.outTxt.println(""String_Node_Str"" + first.getPosition());
        if (JOPizer.dumpMgci) {
          il.setPositions();
          int pc=first.getPosition();
          GCRTMethodInfo.removePC(pc + 2,mi);
          GCRTMethodInfo.removePC(pc + 1,mi);
        }
      }
    }
    if (ii instanceof INVOKESPECIAL) {
      if (!ii.getMethodName(cpoolgen).equals(""String_Node_Str"")) {
        if (!cli.clazz.getClassName().equals(ii.getClassName(cpoolgen))) {
          Integer idx=new Integer(ii.getIndex());
          int new_index=cli.cpoolUsed.indexOf(idx) + 1;
          first.setInstruction(new JOPSYS_INVOKESUPER((short)new_index));
        }
      }
    }
  }
  f=new InstructionFinder(il);
  String cpInstr=""String_Node_Str"";
  for (Iterator it=f.search(cpInstr); it.hasNext(); ) {
    InstructionHandle[] match=(InstructionHandle[])it.next();
    InstructionHandle ih=match[0];
    CPInstruction cpii=(CPInstruction)ih.getInstruction();
    int index=cpii.getIndex();
    FieldInstruction fi=null;
    Type ft=null;
    if (cpii instanceof FieldInstruction) {
      fi=(FieldInstruction)ih.getInstruction();
      ft=fi.getFieldType(cpoolgen);
    }
    Integer idx=new Integer(index);
    int pos=cli.cpoolUsed.indexOf(idx);
    int new_index=pos + 1;
    if (pos == -1) {
      System.out.println(""String_Node_Str"" + index + ""String_Node_Str""+ cpoolgen.getConstant(index)+ ""String_Node_Str"");
      System.out.println(""String_Node_Str"" + cli.cpoolUsed);
      System.out.println(""String_Node_Str"" + cpoolgen);
      System.exit(-1);
    }
 else {
      if (cpii instanceof GETFIELD || cpii instanceof PUTFIELD) {
        int offset=getFieldOffset(cp,index);
        new_index=offset;
      }
      cpii.setIndex(new_index);
    }
    if (cpii instanceof FieldInstruction) {
      boolean isRef=ft instanceof ReferenceType;
      boolean isLong=ft == BasicType.LONG || ft == BasicType.DOUBLE;
      if (fi instanceof GETSTATIC) {
        if (isRef) {
          ih.setInstruction(new GETSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTSTATIC) {
        if (isRef) {
          ih.setInstruction(new PUTSTATIC_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTSTATIC_LONG((short)new_index));
        }
      }
 else       if (fi instanceof GETFIELD) {
        if (isRef) {
          ih.setInstruction(new GETFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new GETFIELD_LONG((short)new_index));
        }
      }
 else       if (fi instanceof PUTFIELD) {
        if (isRef) {
          ih.setInstruction(new PUTFIELD_REF((short)new_index));
        }
 else         if (isLong) {
          ih.setInstruction(new PUTFIELD_LONG((short)new_index));
        }
      }
    }
  }
  Method m=mg.getMethod();
  il.dispose();
  return m;
}",0.984579799537394
187073,"public StmtHandle processStatement(StmtHandle stmt){
  PutfieldStmt put=(PutfieldStmt)stmt.getStatement();
  StmtHandle nextStmt=stmt.getNext();
  if (nextStmt == null || !(nextStmt.getStatement() instanceof GetfieldStmt)) {
    return null;
  }
  GetfieldStmt get=(GetfieldStmt)nextStmt.getStatement();
  if (!get.getConstantField().equals(put.getConstantField())) {
    return null;
  }
  if (get.getConstantField().isAnonymous() || get.getConstantField().getFieldInfo().isVolatile()) {
    return null;
  }
  stmt.setStatement(new StackDup(put.getConstantField().getFieldInfo().getType()));
  nextStmt.setStatement(put);
  return nextStmt;
}","public StmtHandle processStatement(StmtHandle stmt){
  PutfieldStmt put=(PutfieldStmt)stmt.getStatement();
  StmtHandle nextStmt=stmt.getNext();
  if (nextStmt == null || !(nextStmt.getStatement() instanceof GetfieldStmt)) {
    return null;
  }
  GetfieldStmt get=(GetfieldStmt)nextStmt.getStatement();
  if (!get.getConstantField().equals(put.getConstantField())) {
    return null;
  }
  if (get.getConstantField().isAnonymous() || get.getConstantField().getFieldInfo().isVolatile()) {
    return null;
  }
  if (!get.isStatic() || !put.isStatic()) {
    return null;
  }
  stmt.setStatement(new StackDup(put.getConstantField().getFieldInfo().getType()));
  nextStmt.setStatement(put);
  return nextStmt;
}",0.9519586104951958
187074,"static void markAndCopy(){
  int i, ref;
  getStaticRoots();
  if (!concurrentGc) {
    getStackRoots();
  }
  for (; ; ) {
synchronized (mutex) {
      ref=greyList;
      if (ref == GREY_END) {
        break;
      }
      greyList=Native.rdMem(ref + OFF_GREY);
      Native.wrMem(0,ref + OFF_GREY);
    }
    if (Native.rdMem(ref + OFF_SPACE) == toSpace) {
      continue;
    }
    int addr=Native.rdMem(ref);
    int flags=Native.rdMem(ref + OFF_TYPE);
    if (flags == IS_REFARR) {
      int size=Native.rdMem(ref + OFF_MTAB_ALEN);
      for (i=0; i < size; ++i) {
        push(Native.rdMem(addr + i));
      }
    }
 else     if (flags == IS_OBJ) {
      flags=Native.rdMem(ref + OFF_MTAB_ALEN);
      flags=Native.rdMem(flags + Const.MTAB2GC_INFO);
      for (i=0; flags != 0; ++i) {
        if ((flags & 1) != 0) {
          push(Native.rdMem(addr + i));
        }
        flags>>>=1;
      }
    }
    int size;
    int dest;
synchronized (mutex) {
      size=Native.rdMem(ref + OFF_SIZE);
      dest=copyPtr;
      copyPtr+=size;
      Native.wrMem(toSpace,ref + OFF_SPACE);
    }
    if (size > 0) {
      for (i=0; i < size; i++) {
        Native.memCopy(dest,addr,i);
      }
    }
    Native.wrMem(dest,ref + OFF_PTR);
    for (i=0; i < 10; i++)     ;
    Native.memCopy(dest,dest,-1);
  }
}","static void markAndCopy(){
  int i, ref;
  if (!concurrentGc) {
    getStackRoots();
  }
  getStaticRoots();
  for (; ; ) {
synchronized (mutex) {
      ref=greyList;
      if (ref == GREY_END) {
        break;
      }
      greyList=Native.rdMem(ref + OFF_GREY);
      Native.wrMem(0,ref + OFF_GREY);
    }
    if (Native.rdMem(ref + OFF_SPACE) == toSpace) {
      continue;
    }
    int addr=Native.rdMem(ref);
    int flags=Native.rdMem(ref + OFF_TYPE);
    if (flags == IS_REFARR) {
      int size=Native.rdMem(ref + OFF_MTAB_ALEN);
      for (i=0; i < size; ++i) {
        push(Native.rdMem(addr + i));
      }
    }
 else     if (flags == IS_OBJ) {
      flags=Native.rdMem(ref + OFF_MTAB_ALEN);
      flags=Native.rdMem(flags + Const.MTAB2GC_INFO);
      for (i=0; flags != 0; ++i) {
        if ((flags & 1) != 0) {
          push(Native.rdMem(addr + i));
        }
        flags>>>=1;
      }
    }
    int size;
    int dest;
synchronized (mutex) {
      size=Native.rdMem(ref + OFF_SIZE);
      dest=copyPtr;
      copyPtr+=size;
      Native.wrMem(toSpace,ref + OFF_SPACE);
    }
    if (size > 0) {
      for (i=0; i < size; i++) {
        Native.memCopy(dest,addr,i);
      }
    }
    Native.wrMem(dest,ref + OFF_PTR);
    for (i=0; i < 10; i++)     ;
    Native.memCopy(dest,dest,-1);
  }
}",0.98468606431853
187075,"public void initArchitecture(String arch) throws ConfigurationException {
  if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    setArchConfig(config);
  }
 else   if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    setArchConfig(config);
    if (!isSet(CONF_LIBRARY_PATH)) {
      setOption(CONF_LIBRARY_PATH,""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + arch + ""String_Node_Str"");
  }
}","public void initArchitecture(String arch) throws ConfigurationException {
  if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    if (config == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    setArchConfig(config);
  }
 else   if (""String_Node_Str"".equals(arch)) {
    URL config=getClass().getResource(""String_Node_Str"");
    if (config == null) {
      throw new ConfigurationException(""String_Node_Str"");
    }
    setArchConfig(config);
    if (!isSet(CONF_LIBRARY_PATH)) {
      setOption(CONF_LIBRARY_PATH,""String_Node_Str"");
    }
  }
 else {
    throw new ConfigurationException(""String_Node_Str"" + arch + ""String_Node_Str"");
  }
}",0.8539325842696629
187076,"/** 
 * Check if a method call can be inlined, depending on the configuration and the class structs. The invoked method must be resolved first, and it must be ensured that this method is the only (known) method which can be called (p.e. by calling invoked.  {@link com.jopdesign.libgraph.struct.MethodInfo#isOverwritten()}) as this is not checked here to allow for more sophisticated devirtualization techniques. <p> This depends on the flags and classinfos of the called method, and on the configuration. This function does not check for resulting code sizes etc. </p><p> Here the correct method is determined and the safety criteria for inlining are checked as described in 'Practial Techniques For Virtual Call Resolution In Java' by Vijay Sundaresan and the Java Virtual Machine Specification Second Edition. </p>
 * @param caller the calling method
 * @param invoked the resolved, invoked method.
 * @param stmt the invoke stmt handle, must be a handle of an {@link InvokeStmt}.
 * @param localsOffset the variable offset to use for the inlined method.
 * @param parentInlines a set of {@link com.jopdesign.libgraph.struct.MethodInfo}s of already inlined method which contain this statement.
 * @return null if no inlining should be performed, else a checkresult.
 */
public CheckResult checkInvocation(MethodInfo caller,MethodInfo invoked,StmtHandle stmt,int localsOffset,List parentInlines){
  if (invoked == null || caller == null || !(stmt.getStatement() instanceof InvokeStmt)) {
    return null;
  }
  InvokeStmt invoke=(InvokeStmt)stmt.getStatement();
  if (!checkPreliminaries(caller,invoke.getClassInfo(),invoked,parentInlines)) {
    return null;
  }
  boolean unsafeInline=!(invoked.isStatic() || invoked.isPrivate() || invoked.isFinal()|| !assumeDynLoading);
  if (unsafeInline && !useCheckCode) {
    return null;
  }
  CheckResult rs=null;
  try {
    MethodCode code=invoked.getMethodCode();
    ControlFlowGraph srcGraph=code.createGraph();
    if (!checkCodesize(code.getCodeSize(),srcGraph,localsOffset)) {
      return null;
    }
    Set makePublic=checkGraph(caller,invoked,srcGraph);
    if (makePublic != null) {
      rs=new CheckResult(stmt,invoked,srcGraph,unsafeInline,code.getCodeSize(),srcGraph.getVariableTable().size(),localsOffset);
      rs.setChangePublic(makePublic);
      rs.setParentInlines(parentInlines);
    }
  }
 catch (  GraphException e) {
    logger.warn(""String_Node_Str"" + invoked.getFQMethodName() + ""String_Node_Str"");
    return null;
  }
  return rs;
}","/** 
 * Check if a method call can be inlined, depending on the configuration and the class structs. The invoked method must be resolved first, and it must be ensured that this method is the only (known) method which can be called (p.e. by calling invoked.  {@link com.jopdesign.libgraph.struct.MethodInfo#isOverwritten()}) as this is not checked here to allow for more sophisticated devirtualization techniques. <p> This depends on the flags and classinfos of the called method, and on the configuration. This function does not check for resulting code sizes etc. </p><p> Here the correct method is determined and the safety criteria for inlining are checked as described in 'Practial Techniques For Virtual Call Resolution In Java' by Vijay Sundaresan and the Java Virtual Machine Specification Second Edition. </p>
 * @param caller the calling method
 * @param invoked the resolved, invoked method.
 * @param stmt the invoke stmt handle, must be a handle of an {@link InvokeStmt}.
 * @param localsOffset the variable offset to use for the inlined method.
 * @param parentInlines a set of {@link com.jopdesign.libgraph.struct.MethodInfo}s of already inlined method which contain this statement.
 * @return null if no inlining should be performed, else a checkresult.
 */
public CheckResult checkInvocation(MethodInfo caller,MethodInfo invoked,StmtHandle stmt,int localsOffset,List parentInlines){
  if (invoked == null || caller == null || !(stmt.getStatement() instanceof InvokeStmt)) {
    return null;
  }
  InvokeStmt invoke=(InvokeStmt)stmt.getStatement();
  if (!checkPreliminaries(caller,invoke.getClassInfo(),invoked,parentInlines)) {
    return null;
  }
  boolean unsafeInline=!(invoked.isStatic() || invoked.isPrivate() || invoked.isFinal()|| !assumeDynLoading);
  if (unsafeInline && !useCheckCode) {
    return null;
  }
  CheckResult rs=null;
  try {
    MethodCode code=invoked.getMethodCode();
    ControlFlowGraph srcGraph=code.getGraph();
    if (!checkCodesize(code.getCodeSize(),srcGraph,localsOffset)) {
      return null;
    }
    Set makePublic=checkGraph(caller,invoked,srcGraph);
    if (makePublic != null) {
      rs=new CheckResult(stmt,invoked,srcGraph,unsafeInline,code.getCodeSize(),srcGraph.getVariableTable().size(),localsOffset);
      rs.setChangePublic(makePublic);
      rs.setParentInlines(parentInlines);
    }
  }
 catch (  GraphException e) {
    logger.warn(""String_Node_Str"" + invoked.getFQMethodName() + ""String_Node_Str"");
    return null;
  }
  return rs;
}",0.9982053838484546
187077,"public void changeToPublic(Collection changePublic){
  for (Iterator it=changePublic.iterator(); it.hasNext(); ) {
    ModifierInfo mod=(ModifierInfo)it.next();
    if (mod instanceof MethodInfo && mod.isPrivate() && !((MethodInfo)mod).getName().equals(""String_Node_Str"")) {
      mod.setFinal(true);
    }
    mod.setAccessType(ModifierInfo.ACC_PUBLIC);
  }
}","public boolean changeToPublic(Collection changePublic){
  for (Iterator it=changePublic.iterator(); it.hasNext(); ) {
    ModifierInfo mod=(ModifierInfo)it.next();
    if (mod instanceof MethodInfo && mod.isPrivate() && !((MethodInfo)mod).getName().equals(""String_Node_Str"")) {
      try {
        setVirtual((MethodInfo)mod);
      }
 catch (      GraphException e) {
        return false;
      }
      mod.setFinal(true);
    }
    mod.setAccessType(ModifierInfo.ACC_PUBLIC);
  }
  return true;
}",0.8288707799767171
187078,"public void dump(PrintWriter out,ClassInfo strcli,int arrygcinfo){
  int addr=stringTableAddress + startAddress;
  commentary(string,addr,out);
  out.println(""String_Node_Str"" + (addr + 4) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + strcli.methodsAddress + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 5) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + string.length() + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 2) + ""String_Node_Str"");
  byte chrsp[]=string.getBytes();
  out.print(""String_Node_Str"");
  for (int i=0; i < chrsp.length; i++) {
    out.print(chrsp[i] + ""String_Node_Str"");
    if ((i & 0x07) == 7) {
      out.println();
      out.print(""String_Node_Str"");
    }
  }
  out.println();
}","public void dump(PrintWriter out,ClassInfo strcli,int arrygcinfo){
  int addr=stringTableAddress + startAddress;
  commentary(string,addr,out);
  out.println(""String_Node_Str"" + (addr + 4) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + strcli.methodsAddress + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 5) + ""String_Node_Str"");
  out.println(""String_Node_Str"" + string.length() + ""String_Node_Str"");
  out.println(""String_Node_Str"" + (addr + 2) + ""String_Node_Str"");
  byte chrsp[]=null;
  try {
    chrsp=string.getBytes(""String_Node_Str"");
  }
 catch (  java.io.UnsupportedEncodingException e) {
    System.err.println(e);
    System.exit(-1);
  }
  out.print(""String_Node_Str"");
  for (int i=0; i < chrsp.length; i++) {
    out.print(chrsp[i] + ""String_Node_Str"");
    if ((i & 0x07) == 7) {
      out.println();
      out.print(""String_Node_Str"");
    }
  }
  out.println();
}",0.9082183563287344
187079,"/** 
 * Scan all thread stacks atomic.
 */
static void getStackRoots(){
  int i, j, cnt;
synchronized (mutex) {
    i=Native.getSP();
    for (j=128; j <= i; ++j) {
      push(Native.rdIntMem(j));
    }
    cnt=RtThreadImpl.getCnt();
    for (i=0; i < cnt; ++i) {
      if (i != RtThreadImpl.getActive()) {
        int[] mem=RtThreadImpl.getStack(i);
        int sp=RtThreadImpl.getSP(i) - 128;
        for (j=0; j <= sp; ++j) {
          push(mem[j]);
        }
      }
    }
  }
}","/** 
 * Scan all thread stacks atomic.
 */
static void getStackRoots(){
  int i, j, cnt;
synchronized (mutex) {
    i=Native.getSP();
    for (j=Const.STACK_OFF; j <= i; ++j) {
      push(Native.rdIntMem(j));
    }
    cnt=RtThreadImpl.getCnt();
    for (i=0; i < cnt; ++i) {
      if (i != RtThreadImpl.getActive()) {
        int[] mem=RtThreadImpl.getStack(i);
        int sp=RtThreadImpl.getSP(i) - Const.STACK_OFF;
        for (j=0; j <= sp; ++j) {
          push(mem[j]);
        }
      }
    }
  }
}",0.9635627530364372
187080,"public static void debug(){
synchronized (monitor) {
    int i, j;
    for (i=cnt - 1; i >= 0; --i) {
      util.Dbg.wr('\n');
      util.Dbg.intVal(ref[i].sp);
      util.Dbg.wr('\n');
      for (j=0; j <= ref[i].sp - 128; ++j) {
        util.Dbg.intVal(ref[i].stack[j]);
      }
      util.Dbg.wr('\n');
      trace(ref[i].stack,ref[i].sp);
    }
  }
}","public static void debug(){
synchronized (monitor) {
    int i, j;
    for (i=cnt - 1; i >= 0; --i) {
      util.Dbg.wr('\n');
      util.Dbg.intVal(ref[i].sp);
      util.Dbg.wr('\n');
      for (j=0; j <= ref[i].sp - Const.STACK_OFF; ++j) {
        util.Dbg.intVal(ref[i].stack[j]);
      }
      util.Dbg.wr('\n');
      trace(ref[i].stack,ref[i].sp);
    }
  }
}",0.975
187081,"static void trace(int[] stack,int sp){
  int fp, mp, vp, addr, loc, args;
  int val;
  fp=sp - 4;
  while (fp > 128 + 5) {
    mp=stack[fp + 4 - 128];
    vp=stack[fp + 2 - 128];
    val=Native.rdMem(mp);
    addr=val >>> 10;
    util.Dbg.intVal(addr);
    val=Native.rdMem(mp + 1);
    args=val & 0x1f;
    loc=(val >>> 5) & 0x1f;
    fp=vp + args + loc;
  }
}","static void trace(int[] stack,int sp){
  int fp, mp, vp, addr, loc, args;
  int val;
  fp=sp - 4;
  while (fp > Const.STACK_OFF + 5) {
    mp=stack[fp + 4 - Const.STACK_OFF];
    vp=stack[fp + 2 - Const.STACK_OFF];
    val=Native.rdMem(mp);
    addr=val >>> 10;
    util.Dbg.intVal(addr);
    val=Native.rdMem(mp + 1);
    args=val & 0x1f;
    loc=(val >>> 5) & 0x1f;
    fp=vp + args + loc;
  }
}",0.9287598944591028
187082,"/** 
 * Set the ""flags"" field.
 * @param value
 */
public synchronized void setFlags(int value){
  arrayOutputStream.overwriteInt(value,FLAGS_INDEX);
}","/** 
 * Set the ""flags"" field.
 * @param value
 */
public synchronized void setFlags(int value){
  arrayOutputStream.overwriteByte(value,FLAGS_INDEX);
}",0.9834983498349836
187083,"/** 
 * Read a set of bytes from the stream. Limited from 1 until 4 bytes.
 * @param location
 * @param size
 * @return
 */
private synchronized int readBytes(int location,int size){
  int value;
  int i;
  if ((size < 1) || (size > 4) || (location + size >= buf.length)) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + location);
  }
  value=0;
  for (i=0; i < size; i++) {
    value<<=8;
    value=value | buf[location];
    location++;
  }
  return value;
}","/** 
 * Read a set of bytes from the stream. Limited from 1 until 4 bytes.
 * @param location
 * @param size
 * @return
 */
private synchronized int readBytes(int location,int size){
  int value;
  int i;
  if ((size < 1) || (size > 4) || (location + size > buf.length)) {
    throw new ArrayIndexOutOfBoundsException(""String_Node_Str"" + location + ""String_Node_Str""+ size+ ""String_Node_Str"");
  }
  value=0;
  for (i=0; i < size; i++) {
    value<<=8;
    value=value | (buf[location] & 0x00ff);
    location++;
  }
  return value;
}",0.9437314906219152
187084,"/** 
 * Add a method to the table. Return its method ID.
 * @param method
 * @return
 */
public int addMethod(MethodInfo method){
  int methodId=method.getCodeAddress();
  if (isValidIndex(methodId) == false) {
    methodList.setSize(methodId + 1);
  }
  methodList.setElementAt(method,methodId);
  return methodId;
}","/** 
 * Add a method to the table. Return its method ID.
 * @param method
 * @return
 */
public int addMethod(MethodInfo method){
  int methodId=getMethodId(method);
  if (isValidIndex(methodId) == false) {
    methodList.setSize(methodId + 1);
  }
  methodList.setElementAt(method,methodId);
  return methodId;
}",0.946031746031746
187085,"public int getMethodStructPointer(String className,String methodSignature){
  int methodId;
  MethodInfo methodInfo;
  methodInfo=getMethodInfo(className,methodSignature);
  methodId=methodInfo.getStructAddress();
  return methodId;
}","public int getMethodStructPointer(String className,String methodSignature){
  int methodStructPointer;
  MethodInfo methodInfo;
  methodInfo=getMethodInfo(className,methodSignature);
  methodStructPointer=methodInfo.getStructAddress();
  return methodStructPointer;
}",0.9101796407185628
187086,"private int getMethodId(MethodInfo methodInfo){
  return methodInfo.getCodeAddress();
}","private int getMethodId(MethodInfo methodInfo){
  return MethodTable.getMethodId(methodInfo);
}",0.7802197802197802
187087,"/** 
 * writes data to nand at the address given returns true if error occurred
 */
public boolean writeChunkToNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int chunkInNAND,byte[] data,int dataIndex,byte[] spare,int spareIndex){
  if (data != null) {
    int column=0, pointer=0, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < devicenDataBytesPerChunk; i++)     Native.wrMem(data[dataIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  if (spare != null) {
    int column=0, pointer=80, addr0, addr1;
    addr0=0;
    addr1=0;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < DebugSettings.SPARE_SERIALIZED_LENGTH; i++)     Native.wrMem(spare[spareIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  return true;
}","/** 
 * writes data to nand at the address given returns true if error occurred
 */
public boolean writeChunkToNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int chunkInNAND,byte[] data,int dataIndex,byte[] spare,int spareIndex){
  if (data != null) {
    int column=0, pointer=0, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < devicenDataBytesPerChunk; i++)     Native.wrMem(data[dataIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  if (spare != null) {
    int column=0, pointer=80, addr0, addr1;
    addr0=(chunkInNAND % 32) & 0x1f;
    addr0=(addr0 & 0x1f) | (((chunkInNAND / 32) << 5) & 0xe0);
    addr1=((chunkInNAND / 32) >>> 3) & 0xff;
    Native.wrMem(pointer,IO_NAND + CLE);
    Native.wrMem(COMMAND_PROGRAM,IO_NAND + CLE);
    Native.wrMem(column,IO_NAND + ALE);
    Native.wrMem(addr0,IO_NAND + ALE);
    Native.wrMem(addr1,IO_NAND + ALE);
    for (int i=0; i < DebugSettings.SPARE_SERIALIZED_LENGTH; i++)     Native.wrMem(spare[spareIndex + i],IO_NAND + 0);
    Native.wrMem(COMMAND_PROGRAM_CONFIRM,IO_NAND + CLE);
    waitForNandReady(""String_Node_Str"");
    if (errorOccurred())     return false;
  }
  return true;
}",0.9602841459476912
187088,"public boolean eraseBlockInNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int blockNumber){
  int addr0=(blockNumber & 0x07) << 5;
  int addr1=(blockNumber >>> 3) & 0xff;
  System.out.print(""String_Node_Str"");
  System.out.println(blockNumber);
  System.out.print(""String_Node_Str"");
  System.out.println(Integer.toHexString(addr0));
  System.out.print(""String_Node_Str"");
  System.out.println(Integer.toHexString(addr1));
  Native.wrMem(COMMAND_ERASE,IO_NAND + CLE);
  Native.wrMem(addr0,IO_NAND + ALE);
  Native.wrMem(addr1,IO_NAND + ALE);
  Native.wrMem(COMMAND_ERASE_CONFIRM,IO_NAND + CLE);
  waitForNandReady(""String_Node_Str"");
  return !errorOccurred();
}","public boolean eraseBlockInNAND(int deviceGenericDevice,int devicenDataBytesPerChunk,int blockNumber){
  int addr0=(blockNumber & 0x07) << 5;
  int addr1=(blockNumber >>> 3) & 0xff;
  Native.wrMem(COMMAND_ERASE,IO_NAND + CLE);
  Native.wrMem(addr0,IO_NAND + ALE);
  Native.wrMem(addr1,IO_NAND + ALE);
  Native.wrMem(COMMAND_ERASE_CONFIRM,IO_NAND + CLE);
  waitForNandReady(""String_Node_Str"");
  return !errorOccurred();
}",0.4296160877513711
187089,"/** 
 * waits until the nand is ready
 */
static int waitForNandReady(String msg){
  int i=0;
  int j;
  while (((j=Native.rdMem(0x100000)) & 0x100) != 0x100) {
    i++;
  }
  System.out.print(msg);
  System.out.println(i);
  return j;
}","/** 
 * waits until the nand is ready
 */
static int waitForNandReady(String msg){
  int i=0;
  int j;
  while (((j=Native.rdMem(0x100000)) & 0x100) != 0x100) {
    i++;
  }
  return j;
}",0.8820754716981132
187090,"/** 
 * @param args
 */
public static void main(String[] args){
  new MyRtThread(10,1 * 100){
    public void run(){
      up=true;
      flag=false;
      value=10;
      speed=0x400;
      while (true) {
        if (state == STATE_ALL) {
          counter++;
          if ((counter % value) == 0) {
            if (flag) {
              flag=false;
            }
 else {
              flag=true;
            }
          }
          counter1++;
          if ((counter1 % speed) == 0) {
            if (speaker_up) {
              value++;
              if (value >= 50) {
                speaker_up=false;
                value--;
              }
            }
 else {
              value--;
              if (value <= 10) {
                speaker_up=true;
                value++;
              }
            }
          }
        }
 else {
          flag=false;
        }
        if (flag) {
          Speaker.write(true);
        }
 else         Speaker.write(false);
        waitForNextPeriod();
      }
    }
  }
;
  new RtThread(10,100 * 1000){
    public void run(){
      val=LED0;
      up=true;
      while (true) {
        if (state == STATE_ALL) {
          if (up) {
switch (val) {
case LED0:
              val=LED1;
            break;
case LED1:
          val=LED2;
        break;
case LED2:
      val=LED3;
    break;
case LED3:
{
    up=false;
    val=LED2;
    break;
  }
default :
val=LED0;
break;
}
}
 else {
switch (val) {
case LED0:
{
up=true;
val=LED1;
break;
}
case LED1:
val=LED0;
break;
case LED2:
val=LED1;
break;
default :
val=LED0;
break;
}
}
}
 else if (state != STATE_LINEFOLLOWER) {
val=0;
}
FutureUse.writePins(val);
waitForNextPeriod();
}
}
}
;
new RtThread(10,50 * 1000){
public void run(){
int forwardCount=0;
System.out.println(""String_Node_Str"");
MOTORS=new Motor[]{new Motor(0),new Motor(1)};
freeValue=0;
stop=true;
while (true) {
for (int i=0; i < 4; i++) if (Buttons.getButton(i)) {
state=i + 1;
Leds.setLed(1,(i & 1) != 0);
Leds.setLed(2,(i & 2) != 0);
break;
}
stop=!DigitalInputs.getDigitalInput(2);
if ((Buttons.getButtons() != 0) || stop) freeValue=Sensors.readSensor(IR_SENSOR);
if (stop) for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
switch (state) {
case STATE_OFF:
{
for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
break;
}
case STATE_LINEFOLLOWER:
{
if (!stop) {
int val=Sensors.readSensor(IR_SENSOR);
boolean black=val > 285;
MOTORS[MOTOR_LEFT].setDutyCyclePercentage(60);
MOTORS[MOTOR_RIGHT].setDutyCyclePercentage(60);
if (black) {
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_LEFT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED0 | LED3);
}
 else {
MOTORS[MOTOR_LEFT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED1 | LED2);
}
}
break;
}
case STATE_TOUCHSENSOR:
case STATE_IRSENSOR:
case STATE_ALL:
{
if (!stop) {
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_FORWARD,true,40);
int totalDifference=Sensors.readSensor(IR_SENSOR) - freeValue;
if (forwardCount >= 60) {
if (MOTORS[0].readNormalizedBackEMF()[1] <= 5) {
Leds.setLeds(0x9);
turnback(false);
}
}
if (((state == STATE_IRSENSOR) || (state == STATE_ALL)) && (Math.abs(totalDifference) >= IR_SENSOR_THRESHOLD)) {
turnback(true);
}
 else if ((state == STATE_TOUCHSENSOR || state == STATE_ALL) && (forwardCount >= 6) && (DigitalInputs.getDigitalInput(1))) {
turnback(false);
}
}
break;
}
}
{
boolean goingForward=false;
for (int i=0; i < 2; i++) {
if (MOTORS[i].getState() == Motor.STATE_FORWARD) {
goingForward=true;
break;
}
}
forwardCount=goingForward ? forwardCount + 1 : 0;
}
waitForNextPeriod();
}
}
void turnback(boolean fast){
int turnspeed, turnsleep;
boolean dirLeft=false;
if (fast) {
turnspeed=80;
turnsleep=300;
}
 else {
turnspeed=70;
turnsleep=400;
}
speed=!fast ? 0x400 : 0x50;
dirLeft=(Native.rd(Const.IO_US_CNT) & 1) != 0;
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,100);
RtThread.sleepMs(100);
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,turnspeed);
RtThread.sleepMs(turnsleep - 100);
MOTORS[dirLeft ? MOTOR_LEFT : MOTOR_RIGHT].setMotorPercentage(Motor.STATE_BACKWARD,false,70);
MOTORS[dirLeft ? MOTOR_RIGHT : MOTOR_LEFT].setState(Motor.STATE_OFF);
RtThread.sleepMs(600);
speed=0x400;
Leds.setLed(0,false);
Leds.setLed(3,false);
}
}
;
RtThread.startMission();
}","/** 
 * @param args
 */
public static void main(String[] args){
  new RtThread(10,1 * 100){
    public void run(){
      up=true;
      flag=false;
      value=10;
      speed=0x400;
      while (true) {
        if (state == STATE_ALL) {
          counter++;
          if ((counter % value) == 0) {
            if (flag) {
              flag=false;
            }
 else {
              flag=true;
            }
          }
          counter1++;
          if ((counter1 % speed) == 0) {
            if (speaker_up) {
              value++;
              if (value >= 50) {
                speaker_up=false;
                value--;
              }
            }
 else {
              value--;
              if (value <= 10) {
                speaker_up=true;
                value++;
              }
            }
          }
        }
 else {
          flag=false;
        }
        if (flag) {
          Speaker.write(true);
        }
 else         Speaker.write(false);
        waitForNextPeriod();
      }
    }
  }
;
  new RtThread(10,100 * 1000){
    public void run(){
      val=LED0;
      up=true;
      while (true) {
        if (state == STATE_ALL) {
          if (up) {
switch (val) {
case LED0:
              val=LED1;
            break;
case LED1:
          val=LED2;
        break;
case LED2:
      val=LED3;
    break;
case LED3:
{
    up=false;
    val=LED2;
    break;
  }
default :
val=LED0;
break;
}
}
 else {
switch (val) {
case LED0:
{
up=true;
val=LED1;
break;
}
case LED1:
val=LED0;
break;
case LED2:
val=LED1;
break;
default :
val=LED0;
break;
}
}
}
 else if (state != STATE_LINEFOLLOWER) {
val=0;
}
FutureUse.writePins(val);
waitForNextPeriod();
}
}
}
;
new RtThread(10,50 * 1000){
public void run(){
int forwardCount=0;
System.out.println(""String_Node_Str"");
MOTORS=new Motor[]{new Motor(0),new Motor(1)};
freeValue=0;
stop=true;
while (true) {
for (int i=0; i < 4; i++) if (Buttons.getButton(i)) {
state=i + 1;
Leds.setLed(1,(i & 1) != 0);
Leds.setLed(2,(i & 2) != 0);
break;
}
stop=!DigitalInputs.getDigitalInput(2);
if ((Buttons.getButtons() != 0) || stop) freeValue=Sensors.readSensor(IR_SENSOR);
if (stop) for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
switch (state) {
case STATE_OFF:
{
for (int i=0; i < 2; i++) MOTORS[i].setState(Motor.STATE_OFF);
break;
}
case STATE_LINEFOLLOWER:
{
if (!stop) {
int val=Sensors.readSensor(IR_SENSOR);
boolean black=val > 285;
MOTORS[MOTOR_LEFT].setDutyCyclePercentage(60);
MOTORS[MOTOR_RIGHT].setDutyCyclePercentage(60);
if (black) {
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_LEFT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED0 | LED3);
}
 else {
MOTORS[MOTOR_LEFT].setState(Motor.STATE_FORWARD);
MOTORS[MOTOR_RIGHT].setState(Motor.STATE_BRAKE);
FutureUse.writePins(LED1 | LED2);
}
}
break;
}
case STATE_TOUCHSENSOR:
case STATE_IRSENSOR:
case STATE_ALL:
{
if (!stop) {
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_FORWARD,true,40);
int totalDifference=Sensors.readSensor(IR_SENSOR) - freeValue;
if (forwardCount >= 60) {
if (MOTORS[0].readNormalizedBackEMF()[1] <= 5) {
Leds.setLeds(0x9);
turnback(false);
}
}
if (((state == STATE_IRSENSOR) || (state == STATE_ALL)) && (Math.abs(totalDifference) >= IR_SENSOR_THRESHOLD)) {
turnback(true);
}
 else if ((state == STATE_TOUCHSENSOR || state == STATE_ALL) && (forwardCount >= 6) && (DigitalInputs.getDigitalInput(1))) {
turnback(false);
}
}
break;
}
}
{
boolean goingForward=false;
for (int i=0; i < 2; i++) {
if (MOTORS[i].getState() == Motor.STATE_FORWARD) {
goingForward=true;
break;
}
}
forwardCount=goingForward ? forwardCount + 1 : 0;
}
waitForNextPeriod();
}
}
void turnback(boolean fast){
int turnspeed, turnsleep;
boolean dirLeft=false;
if (fast) {
turnspeed=80;
turnsleep=300;
}
 else {
turnspeed=70;
turnsleep=400;
}
speed=!fast ? 0x400 : 0x50;
dirLeft=(Native.rd(Const.IO_US_CNT) & 1) != 0;
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,100);
RtThread.sleepMs(100);
for (int i=0; i < 2; i++) MOTORS[i].setMotorPercentage(Motor.STATE_BACKWARD,false,turnspeed);
RtThread.sleepMs(turnsleep - 100);
MOTORS[dirLeft ? MOTOR_LEFT : MOTOR_RIGHT].setMotorPercentage(Motor.STATE_BACKWARD,false,70);
MOTORS[dirLeft ? MOTOR_RIGHT : MOTOR_LEFT].setState(Motor.STATE_OFF);
RtThread.sleepMs(600);
speed=0x400;
Leds.setLed(0,false);
Leds.setLed(3,false);
}
}
;
RtThread.startMission();
}",0.9997728305315764
187091,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9902549861146176
187092,"public void init(InstructionHandle stih,InstructionHandle endih){
  WCETBasicBlock wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.BNODE);
  S.sucbb=wcbb;
  bbs.put(new Integer(wcbb.getStart()),wcbb);
}","public void init(InstructionHandle stih,InstructionHandle endih){
  WCETBasicBlock wcbb=null;
  if (stih.getInstruction() instanceof InvokeInstruction && (((InvokeInstruction)stih.getInstruction()).getClassName(getCpg())).indexOf(""String_Node_Str"") == -1) {
    wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.INODE);
  }
 else {
    wcbb=new WCETBasicBlock(stih,endih,this,WCETBasicBlock.BNODE);
  }
  S.sucbb=wcbb;
  bbs.put(new Integer(wcbb.getStart()),wcbb);
}",0.611764705882353
187093,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + tStr+ ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        String lcStr=""String_Node_Str"";
        if (loopcontroller) {
          lcStr+=""String_Node_Str"" + loopid + ""String_Node_Str"";
          if (loopdriver)           lcStr+=""String_Node_Str"";
        }
        if (loopdriver)         lcStr+=""String_Node_Str"";
        if (nodetype == BNODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
 else         if (nodetype == INODE)         sb.append(WU.postpad(getIDS() + ""String_Node_Str"" + lcStr+ ""String_Node_Str""+ tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          cacheInvokeMiss=(invokemiss - invokehit);
          cacheReturnMiss=(retmiss - rethit);
          blockcyc=invokehit;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9962336162306032
187094,"public void visitJavaClass(JavaClass clazz){
  super.visitJavaClass(clazz);
  Method[] methods=clazz.getMethods();
  if (wca.init) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=new WCETMethodBlock(m,clazz,wca);
        wca.msigtowcmb.put(methodId,wcmb);
        wca.wcmbs.add(wcmb);
        wcmb.controlFlowGraph();
        wcmb.directedGraph();
        if (m.getName().equalsIgnoreCase(""String_Node_Str"") || m.getName().equalsIgnoreCase(""String_Node_Str"")) {
          wca.wcmbapp=wcmb;
        }
      }
 else       System.out.println(""String_Node_Str"" + m.getName());
    }
  }
  if (wca.analyze) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=(WCETMethodBlock)wca.mtowcmb.get(m);
        wca.wcasb.append(wcmb.toString());
        wcmb.link();
        wca.dotout.print(""String_Node_Str"" + wcmb.dotf + ""String_Node_Str""+ wcmb.dotf.substring(0,wcmb.dotf.length() - 4)+ ""String_Node_Str"");
      }
    }
  }
}","public void visitJavaClass(JavaClass clazz){
  super.visitJavaClass(clazz);
  Method[] methods=clazz.getMethods();
  if (wca.init) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=new WCETMethodBlock(m,clazz,wca);
        wca.msigtowcmb.put(methodId,wcmb);
        wca.wcmbs.add(wcmb);
        wcmb.controlFlowGraph();
        wcmb.directedGraph();
        System.out.println(""String_Node_Str"" + (clazz.getClassName() + ""String_Node_Str"" + m.getName()) + ""String_Node_Str""+ wca.appmethod);
        if ((clazz.getClassName() + ""String_Node_Str"" + m.getName()).equalsIgnoreCase(wca.appmethod)) {
          wca.wcmbapp=wcmb;
        }
      }
 else       System.out.println(""String_Node_Str"" + m.getName());
    }
  }
  if (wca.analyze) {
    for (int i=0; i < methods.length; i++) {
      Method m=methods[i];
      String methodId=m.getName() + m.getSignature();
      if (!m.isAbstract()) {
        WCETMethodBlock wcmb=(WCETMethodBlock)wca.mtowcmb.get(m);
        wca.wcasb.append(wcmb.toString());
        wcmb.link();
        wca.dotout.print(""String_Node_Str"" + wcmb.dotf + ""String_Node_Str""+ wcmb.dotf.substring(0,wcmb.dotf.length() - 4)+ ""String_Node_Str"");
      }
    }
  }
}",0.885611797528896
187095,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(wcmb.wca.las);
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      sb.append(wcmb.wca.las);
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      sb.append(wcmb.wca.las);
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          int cacheInvokeMiss=(invokemiss - invokehit);
          int cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(wcmb.wca.las + cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(wcmb.wca.las + cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(wcmb.wca.las + ""String_Node_Str"");
        sb.append(wcmb.wca.las + ""String_Node_Str"");
      }
      sb.append(wcmb.wca.las);
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(wcmb.wca.lae + ""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  if (nodetype == WCETBasicBlock.SNODE) {
    sb.append(WU.postpad(getIDS() + ""String_Node_Str"",6));
  }
 else   if (nodetype == WCETBasicBlock.TNODE) {
    String tStr=""String_Node_Str"";
    for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
      Integer keyInt=(Integer)iter.next();
      WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
      tStr+=wcbb.getIDS();
      if (iter.hasNext())       tStr+=""String_Node_Str"";
    }
    tStr+=""String_Node_Str"";
    sb.append(WU.postpad(getIDS() + tStr + ""String_Node_Str"",6));
  }
 else {
    InstructionHandle ih=stih;
    blockcyc=0;
    LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
    int prevLine=-1;
    int srcLine=-1;
    do {
      if (wcmb.wca.jline) {
        srcLine=lnt.getSourceLine(ih.getPosition());
        if (srcLine > prevLine) {
          int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
          String c=""String_Node_Str"";
          if (ai != -1) {
            c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
            sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
          }
 else           sb.append(WU.postpad(""String_Node_Str"" + srcLine + ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim(),62) + ""String_Node_Str"");
        }
        prevLine=srcLine;
      }
      if (ih == stih) {
        String tStr=""String_Node_Str"";
        for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
          Integer keyInt=(Integer)iter.next();
          WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
          tStr+=wcbb.getIDS();
          if (iter.hasNext())           tStr+=""String_Node_Str"";
        }
        tStr+=""String_Node_Str"";
        sb.append(WU.postpad(getIDS() + tStr,6));
      }
 else {
        sb.append(""String_Node_Str"");
      }
      sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
      if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))       sb.append(""String_Node_Str"");
 else       sb.append(""String_Node_Str"");
      StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        int tarpos=ihtar.getPosition();
        ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
      }
      sb.append(WU.postpad(ihs.toString(),20));
      String invoStr=""String_Node_Str"";
      if (ih.getInstruction() instanceof InvokeInstruction) {
        String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
        String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
        bbinvo=methodid;
        Method m=wcmb.wca.getMethod(methodid);
        if (methodid.startsWith(""String_Node_Str"")) {
          int opcode=wcmb.wca.getNativeOpcode(m.getName());
          if (opcode == -1) {
            sb.append(WU.prepad(""String_Node_Str"",10));
            invoStr=methodid + ""String_Node_Str"";
          }
 else {
            int cycles=WCETInstruction.getCycles(opcode,false,0);
            blockcyc+=cycles;
            sb.append(WU.prepad(Integer.toString(cycles),10));
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            invoStr=methodid;
          }
        }
 else         if (m != null && !m.isAbstract()) {
          int invon=-1;
          if (m.getCode() != null) {
            invon=(m.getCode().getCode().length + 3) / 4;
          }
 else {
            invon=0;
          }
          int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,invon);
          int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,invon);
          int rethit=-1;
          int retmiss=-1;
          if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,wcmb.n);
          }
 else           if (retsig.equals(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,wcmb.n);
          }
 else           if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
            rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,wcmb.n);
            retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,wcmb.n);
          }
 else {
            System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
            System.exit(-1);
          }
          int cacheInvokeMiss=(invokemiss - invokehit);
          int cacheReturnMiss=(retmiss - rethit);
          blockcyc+=invokehit;
          blockcyc+=cacheInvokeMiss;
          blockcyc+=cacheReturnMiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            sb.append(WU.prepad(""String_Node_Str"",10));
          }
 else {
            sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
            sb.append(WU.prepad(cacheInvokeMiss + ""String_Node_Str"",8));
            sb.append(WU.prepad(cacheReturnMiss + ""String_Node_Str"",8));
          }
          sb.append(""String_Node_Str"");
          invoStr=methodid + ""String_Node_Str"" + invon+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
          if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
            invoStr=methodid;
          }
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
 else {
        int wcetih;
        if (ih.getInstruction() instanceof ReturnInstruction) {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
 else {
          wcetih=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
          sb.append(WU.prepad(Integer.toString(wcetih),10));
        }
        blockcyc+=wcetih;
        sb.append(""String_Node_Str"");
        sb.append(""String_Node_Str"");
      }
      sb.append(invoStr);
      if (ih.getInstruction() instanceof FieldInstruction) {
        String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
        sb.append(fieStrType + ""String_Node_Str"");
        if (ih.getInstruction() instanceof FieldOrMethod) {
          String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
          sb.append(fieStrClass + ""String_Node_Str"");
        }
        String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
        sb.append(fieStrName);
      }
      if (ih.getInstruction() instanceof LocalVariableInstruction) {
        if (ih.getInstruction() instanceof StoreInstruction) {
          StoreInstruction si=(StoreInstruction)ih.getInstruction();
          String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
          if (siStr.length() > 0)           sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
        }
 else {
          LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
          String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
          if (lvStr.length() > 0)           sb.append(lvStr + ""String_Node_Str"");
        }
      }
      if (ih.getInstruction() instanceof ArrayInstruction) {
        String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
        sb.append(aType + ""String_Node_Str"");
      }
      if (ih == endih) {
        sb.append(""String_Node_Str"" + bid + ""String_Node_Str"");
        sb.append(WU.prepad(""String_Node_Str"" + blockcyc,7));
      }
      sb.append(""String_Node_Str"");
    }
 while (ih != endih && (ih=ih.getNext()) != null);
  }
  return sb.toString();
}",0.9720261707279376
187096,"public static void main(String[] args){
  WCETAnalyser wca=new WCETAnalyser();
  HashSet clsArgs=new HashSet();
  outFile=null;
  boolean latex=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  dot=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  jline=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  ls=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  if (latex) {
    las=""String_Node_Str"";
    lae=""String_Node_Str"";
  }
 else {
    las=""String_Node_Str"";
    lae=""String_Node_Str"";
  }
  String srcPath=""String_Node_Str"";
  try {
    if (args.length == 0) {
      System.err.println(""String_Node_Str"");
    }
 else {
      for (int i=0; i < args.length; i++) {
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          wca.classpath=new org.apache.bcel.util.ClassPath(args[i]);
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          outFile=args[i];
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          srcPath=args[i];
          continue;
        }
        clsArgs.add(args[i]);
        mainClass=args[i].replace('/','.');
      }
      StringTokenizer st=new StringTokenizer(srcPath,""String_Node_Str"");
      while (st.hasMoreTokens()) {
        String srcDir=st.nextToken();
        File sDir=new File(srcDir);
        if (sDir.isDirectory()) {
          wca.visitAllFiles(sDir);
        }
      }
      wca.out=new PrintWriter(new FileOutputStream(outFile));
      String ds=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"";
      wca.dotout=new PrintWriter(new FileOutputStream(ds));
      wca.dotout.print(""String_Node_Str"");
      wca.load(clsArgs);
      wca.global=false;
      wca.iterate(new SetWCETAnalysis(wca));
      wca.init=false;
      wca.analyze=true;
      wca.iterate(new SetWCETAnalysis(wca));
      StringBuffer wcasbtemp=new StringBuffer();
      if (wca.analyze) {
        wca.global=true;
        wcasbtemp.append(wca.wcmbapp.toLS(true,true,null));
        wcasbtemp.append(wca.toDot());
        wcasbtemp.insert(0,""String_Node_Str"" + wca.wcmbapp.wcetlp + ""String_Node_Str"");
        wca.out.println(wcasbtemp.toString());
        wca.dotout.print(""String_Node_Str"" + wca.dotf + ""String_Node_Str""+ wca.dotf.substring(0,wca.dotf.length() - 4)+ ""String_Node_Str"");
      }
      wca.out.println(""String_Node_Str"");
      wca.out.println(wca.wcasb.toString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(WCETInstruction.toWCAString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(""String_Node_Str"");
      wca.out.close();
      wca.dotout.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  WCETAnalyser wca=new WCETAnalyser();
  HashSet clsArgs=new HashSet();
  outFile=null;
  jline=System.getProperty(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"");
  appmethod=System.getProperty(""String_Node_Str"");
  if (appmethod == null) {
    System.out.println(""String_Node_Str"");
    System.exit(-1);
  }
  String srcPath=""String_Node_Str"";
  try {
    if (args.length == 0) {
      System.err.println(""String_Node_Str"");
    }
 else {
      for (int i=0; i < args.length; i++) {
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          wca.classpath=new org.apache.bcel.util.ClassPath(args[i]);
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          outFile=args[i];
          continue;
        }
        if (args[i].equals(""String_Node_Str"")) {
          i++;
          srcPath=args[i];
          continue;
        }
        clsArgs.add(args[i]);
        mainClass=args[i].replace('/','.');
      }
      StringTokenizer st=new StringTokenizer(srcPath,""String_Node_Str"");
      while (st.hasMoreTokens()) {
        String srcDir=st.nextToken();
        File sDir=new File(srcDir);
        if (sDir.isDirectory()) {
          wca.visitAllFiles(sDir);
        }
      }
      wca.out=new PrintWriter(new FileOutputStream(outFile));
      String ds=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"";
      wca.dotout=new PrintWriter(new FileOutputStream(ds));
      wca.dotout.print(""String_Node_Str"");
      wca.load(clsArgs);
      wca.global=false;
      wca.iterate(new SetWCETAnalysis(wca));
      wca.init=false;
      wca.analyze=true;
      wca.iterate(new SetWCETAnalysis(wca));
      StringBuffer wcasbtemp=new StringBuffer();
      if (wca.analyze) {
        wca.global=true;
        wcasbtemp.append(wca.wcmbapp.toLS(true,true,null));
        wcasbtemp.append(wca.toDot());
        wcasbtemp.insert(0,""String_Node_Str"" + wca.wcmbapp.wcetlp + ""String_Node_Str"");
        wca.out.println(wcasbtemp.toString());
        wca.dotout.print(""String_Node_Str"" + wca.dotf + ""String_Node_Str""+ wca.dotf.substring(0,wca.dotf.length() - 4)+ ""String_Node_Str"");
      }
      wca.out.println(""String_Node_Str"");
      wca.out.println(wca.wcasb.toString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(WCETInstruction.toWCAString());
      wca.out.println(""String_Node_Str"");
      wca.out.println(""String_Node_Str"");
      wca.out.close();
      wca.dotout.close();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.8682820185826198
187097,"/** 
 * Fill in the destination MAC address. If not in the cache use this packet for a ARP request. The IP packet get's lost.
 * @param p
 */
static void fillETH(Packet p){
  Entry e=Entry.find(p.buf[4]);
  if (e == null) {
    sendRequest(p);
  }
 else {
    int[] mac=e.mac;
    p.llh[0]=mac[0] << 8 | mac[1];
    p.llh[1]=mac[2] << 8 | mac[3];
    p.llh[2]=mac[4] << 8 | mac[5];
    p.llh[6]=0x0800;
  }
}","/** 
 * Fill in the destination MAC address. If not in the cache use this packet for a ARP request. The IP packet get's lost.
 * @param p
 */
static void fillETH(Packet p){
  Entry e=Entry.find(p.buf[4]);
  if (p.llh[6] == 0x0806)   e=Entry.find(p.buf[6]);
  if (e == null) {
    sendRequest(p);
  }
 else {
    int[] mac=e.mac;
    p.llh[0]=mac[0] << 8 | mac[1];
    p.llh[1]=mac[2] << 8 | mac[3];
    p.llh[2]=mac[4] << 8 | mac[5];
  }
}",0.5478158205430933
187098,"/** 
 * very simple generation of IP header. just swap source and destination.
 */
private static void doIp(Packet p,int prot){
  int[] buf=p.buf;
  int len=p.len;
  int i;
  if (len == 0) {
    p.setStatus(Packet.FREE);
  }
 else {
    buf[0]=0x45000000 + len;
    buf[1]=getId();
    buf[2]=(0x20 << 24) + (prot << 16);
    i=buf[3];
    buf[3]=buf[4];
    buf[4]=i;
    buf[2]|=chkSum(buf,0,20);
    p.setStatus(Packet.SND);
  }
}","/** 
 * very simple generation of IP header. just swap source and destination.
 */
private static void doIp(Packet p,int prot){
  int[] buf=p.buf;
  int len=p.len;
  int i;
  if (len == 0) {
    p.setStatus(Packet.FREE);
  }
 else {
    buf[0]=0x45000000 + len;
    buf[1]=getId();
    buf[2]=(0x20 << 24) + (prot << 16);
    i=buf[3];
    buf[3]=buf[4];
    buf[4]=i;
    buf[2]|=chkSum(buf,0,20);
    p.llh[6]=0x0800;
    p.setStatus(Packet.SND);
  }
}",0.9763246899661782
187099,"/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  InstructionHandle ih=stih;
  blockcychit=0;
  blockcycmiss=0;
  LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
  int prevLine=-1;
  int srcLine=-1;
  do {
    if (wcmb.wca.jline) {
      srcLine=lnt.getSourceLine(ih.getPosition());
      if (srcLine > prevLine) {
        int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
        String c=""String_Node_Str"";
        if (ai != -1) {
          c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
          sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
 else         sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
      }
      prevLine=srcLine;
    }
    if (ih == stih) {
      String tStr=""String_Node_Str"";
      for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
        Integer keyInt=(Integer)iter.next();
        WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
        tStr+=""String_Node_Str"" + wcbb.getId() + ""String_Node_Str"";
      }
      tStr+=""String_Node_Str"";
      sb.append(WU.postpad(""String_Node_Str"" + id + tStr,6));
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
    if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(wcmb.wca.las);
    StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
    if (ih.getInstruction() instanceof BranchInstruction) {
      InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
      int tarpos=ihtar.getPosition();
      ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
    }
    sb.append(WU.postpad(ihs.toString(),20));
    sb.append(wcmb.wca.las);
    String invoStr=""String_Node_Str"";
    if (ih.getInstruction() instanceof InvokeInstruction) {
      int wcetihMiss=-1;
      int wcetihHit=-1;
      String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
      String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
      Method m=wcmb.wca.getMethod(methodid);
      if (methodid.startsWith(""String_Node_Str"")) {
        int opcode=wcmb.wca.getNativeOpcode(m.getName());
        if (opcode == -1) {
          sb.append(WU.prepad(""String_Node_Str"",10));
          invoStr=methodid + ""String_Node_Str"";
        }
 else {
          int cycles=WCETInstruction.getCycles(opcode,false,0);
          wcetihMiss=cycles;
          wcetihHit=cycles;
          blockcycmiss+=wcetihMiss;
          blockcychit+=wcetihHit;
          sb.append(WU.prepad(Integer.toString(wcetihHit),10));
          sb.append(""String_Node_Str"");
          sb.append(""String_Node_Str"");
          invoStr=methodid;
        }
      }
 else       if (m != null && !m.isAbstract()) {
        int n=-1;
        if (m.getCode() != null) {
          n=(m.getCode().getCode().length + 3) / 4;
        }
 else {
          n=0;
        }
        int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,n);
        int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,n);
        int rethit=-1;
        int retmiss=-1;
        if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,n);
        }
 else         if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,n);
        }
 else {
          System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
          System.exit(-1);
        }
        wcetihMiss=invokemiss + retmiss;
        blockcycmiss+=wcetihMiss;
        wcetihHit=invokehit + rethit;
        blockcychit+=wcetihHit;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          sb.append(WU.prepad(""String_Node_Str"",10));
        }
 else {
          sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
          sb.append(WU.prepad(wcmb.wca.las + (invokemiss - invokehit) + ""String_Node_Str"",8));
          sb.append(WU.prepad(wcmb.wca.las + (retmiss - rethit) + ""String_Node_Str"",8));
        }
        sb.append(""String_Node_Str"");
        invoStr=methodid + ""String_Node_Str"" + n+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss+ ""String_Node_Str""+ wcmb.getN()+ ""String_Node_Str""+ rethit+ ""String_Node_Str""+ retmiss;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          invoStr+=""String_Node_Str"";
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      int wcetihMiss;
      int wcetihHit;
      if (ih.getInstruction() instanceof ReturnInstruction) {
        wcetihMiss=0;
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
 else {
        wcetihMiss=WCETInstruction.getCyclesFromHandle(ih,true,wcmb.getN());
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
      blockcycmiss+=wcetihMiss;
      blockcychit+=wcetihHit;
      sb.append(wcmb.wca.las + ""String_Node_Str"");
      sb.append(wcmb.wca.las + ""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(invoStr);
    if (ih.getInstruction() instanceof FieldInstruction) {
      String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
      sb.append(fieStrType + ""String_Node_Str"");
      if (ih.getInstruction() instanceof FieldOrMethod) {
        String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
        sb.append(fieStrClass + ""String_Node_Str"");
      }
      String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
      sb.append(fieStrName);
    }
    if (ih.getInstruction() instanceof LocalVariableInstruction) {
      if (ih.getInstruction() instanceof StoreInstruction) {
        StoreInstruction si=(StoreInstruction)ih.getInstruction();
        String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
        if (siStr.length() > 0)         sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
      }
 else {
        LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
        String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
        if (lvStr.length() > 0)         sb.append(lvStr + ""String_Node_Str"");
      }
    }
    if (ih.getInstruction() instanceof ArrayInstruction) {
      String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
      sb.append(aType + ""String_Node_Str"");
    }
    if (ih == endih) {
      sb.append(""String_Node_Str"" + id + ""String_Node_Str"");
      if (ih.getInstruction() instanceof ReturnInstruction) {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"",7));
      }
 else {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"" + blockcycmiss,7));
      }
    }
    sb.append(wcmb.wca.lae + ""String_Node_Str"");
  }
 while (ih != endih && (ih=ih.getNext()) != null);
  if (blockcycmiss < blockcychit)   blockcycmiss=blockcychit;
  return sb.toString();
}","/** 
 * Outputs in the format similar to Table 1 in the DATE paper.
 * @return the formatted string
 */
public String toCodeString(){
  StringBuffer sb=new StringBuffer();
  InstructionHandle ih=stih;
  blockcychit=0;
  blockcycmiss=0;
  LineNumberTable lnt=wcmb.methodbcel.getLineNumberTable();
  int prevLine=-1;
  int srcLine=-1;
  do {
    if (wcmb.wca.jline) {
      srcLine=lnt.getSourceLine(ih.getPosition());
      if (srcLine > prevLine) {
        int ai=wcmb.codeLines[srcLine - 1].trim().indexOf(""String_Node_Str"");
        String c=""String_Node_Str"";
        if (ai != -1) {
          c=wcmb.codeLines[srcLine - 1].trim().substring(ai);
          sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
        }
 else         sb.append(WU.postpad(wcmb.wca.las + wcmb.wca.las + wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ wcmb.wca.las+ ""String_Node_Str""+ srcLine+ ""String_Node_Str""+ wcmb.codeLines[srcLine - 1].trim()+ wcmb.wca.lae,62) + ""String_Node_Str"");
      }
      prevLine=srcLine;
    }
    if (ih == stih) {
      String tStr=""String_Node_Str"";
      for (Iterator iter=inbbs.keySet().iterator(); iter.hasNext(); ) {
        Integer keyInt=(Integer)iter.next();
        WCETBasicBlock wcbb=(WCETBasicBlock)inbbs.get(keyInt);
        tStr+=""String_Node_Str"" + wcbb.getId() + ""String_Node_Str"";
      }
      tStr+=""String_Node_Str"";
      sb.append(WU.postpad(""String_Node_Str"" + id + tStr,6));
    }
 else {
      sb.append(""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(WU.postpad(ih.getPosition() + ""String_Node_Str"",6));
    if (!WCETInstruction.wcetAvailable(ih.getInstruction().getOpcode()))     sb.append(""String_Node_Str"");
 else     sb.append(""String_Node_Str"");
    sb.append(wcmb.wca.las);
    StringBuffer ihs=new StringBuffer(ih.getInstruction().getName() + ""String_Node_Str"" + ih.getInstruction().getOpcode()+ ""String_Node_Str"");
    if (ih.getInstruction() instanceof BranchInstruction) {
      InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
      int tarpos=ihtar.getPosition();
      ihs.append(""String_Node_Str"" + tarpos + ""String_Node_Str"");
    }
    sb.append(WU.postpad(ihs.toString(),20));
    sb.append(wcmb.wca.las);
    String invoStr=""String_Node_Str"";
    if (ih.getInstruction() instanceof InvokeInstruction) {
      int wcetihMiss=-1;
      int wcetihHit=-1;
      String methodid=((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg()) + ""String_Node_Str"" + ((InvokeInstruction)ih.getInstruction()).getMethodName(wcmb.getCpg())+ ((InvokeInstruction)ih.getInstruction()).getSignature(wcmb.getCpg());
      String retsig=((InvokeInstruction)ih.getInstruction()).getReturnType(wcmb.getCpg()).getSignature();
      Method m=wcmb.wca.getMethod(methodid);
      if (methodid.startsWith(""String_Node_Str"")) {
        int opcode=wcmb.wca.getNativeOpcode(m.getName());
        if (opcode == -1) {
          sb.append(WU.prepad(""String_Node_Str"",10));
          invoStr=methodid + ""String_Node_Str"";
        }
 else {
          int cycles=WCETInstruction.getCycles(opcode,false,0);
          wcetihMiss=cycles;
          wcetihHit=cycles;
          blockcycmiss+=wcetihMiss;
          blockcychit+=wcetihHit;
          sb.append(WU.prepad(Integer.toString(wcetihHit),10));
          sb.append(""String_Node_Str"");
          sb.append(""String_Node_Str"");
          invoStr=methodid;
        }
      }
 else       if (m != null && !m.isAbstract()) {
        int n=-1;
        if (m.getCode() != null) {
          n=(m.getCode().getCode().length + 3) / 4;
        }
 else {
          n=0;
        }
        int invokehit=WCETInstruction.getCyclesFromHandle(ih,false,n);
        int invokemiss=WCETInstruction.getCyclesFromHandle(ih,true,n);
        int rethit=-1;
        int retmiss=-1;
        if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.RETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"") || retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")|| retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.IRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.LRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.DRETURN,true,n);
        }
 else         if (retsig.equals(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.FRETURN,true,n);
        }
 else         if (retsig.startsWith(""String_Node_Str"") || retsig.startsWith(""String_Node_Str"")) {
          rethit=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,false,n);
          retmiss=WCETInstruction.getCycles(org.apache.bcel.Constants.ARETURN,true,n);
        }
 else {
          System.out.println(""String_Node_Str"" + retsig + ""String_Node_Str"");
          System.exit(-1);
        }
        wcetihMiss=invokemiss;
        blockcycmiss+=wcetihMiss;
        wcetihHit=invokehit;
        blockcychit+=wcetihHit;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          sb.append(WU.prepad(""String_Node_Str"",10));
        }
 else {
          sb.append(WU.prepad(invokehit + ""String_Node_Str"",10));
          sb.append(WU.prepad(wcmb.wca.las + (invokemiss - invokehit) + ""String_Node_Str"",8));
          sb.append(WU.prepad(wcmb.wca.las + (retmiss - rethit) + ""String_Node_Str"",8));
        }
        sb.append(""String_Node_Str"");
        invoStr=methodid + ""String_Node_Str"" + n+ ""String_Node_Str""+ invokehit+ ""String_Node_Str""+ invokemiss;
        if ((((InvokeInstruction)ih.getInstruction()).getClassName(wcmb.getCpg())).equals(wcmb.wca.nativeClass)) {
          invoStr+=""String_Node_Str"";
        }
      }
 else {
        sb.append(""String_Node_Str"");
      }
    }
 else {
      int wcetihMiss;
      int wcetihHit;
      if (ih.getInstruction() instanceof ReturnInstruction) {
        wcetihMiss=0;
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
 else {
        wcetihMiss=WCETInstruction.getCyclesFromHandle(ih,true,wcmb.getN());
        wcetihHit=WCETInstruction.getCyclesFromHandle(ih,false,wcmb.getN());
        sb.append(WU.prepad(Integer.toString(wcetihHit),10));
      }
      blockcycmiss+=wcetihMiss;
      blockcychit+=wcetihHit;
      sb.append(wcmb.wca.las + ""String_Node_Str"");
      sb.append(wcmb.wca.las + ""String_Node_Str"");
    }
    sb.append(wcmb.wca.las);
    sb.append(invoStr);
    if (ih.getInstruction() instanceof FieldInstruction) {
      String fieStrType=((FieldInstruction)ih.getInstruction()).getFieldType(wcmb.getCpg()).toString();
      sb.append(fieStrType + ""String_Node_Str"");
      if (ih.getInstruction() instanceof FieldOrMethod) {
        String fieStrClass=((FieldOrMethod)ih.getInstruction()).getClassName(wcmb.getCpg());
        sb.append(fieStrClass + ""String_Node_Str"");
      }
      String fieStrName=((FieldInstruction)ih.getInstruction()).getFieldName(wcmb.cpg);
      sb.append(fieStrName);
    }
    if (ih.getInstruction() instanceof LocalVariableInstruction) {
      if (ih.getInstruction() instanceof StoreInstruction) {
        StoreInstruction si=(StoreInstruction)ih.getInstruction();
        String siStr=wcmb.getLocalVarName(si.getIndex(),ih.getPosition() + ih.getInstruction().getLength());
        if (siStr.length() > 0)         sb.append(""String_Node_Str"" + siStr + ""String_Node_Str"");
      }
 else {
        LocalVariableInstruction lvi=(LocalVariableInstruction)ih.getInstruction();
        String lvStr=wcmb.getLocalVarName(lvi.getIndex(),ih.getPosition());
        if (lvStr.length() > 0)         sb.append(lvStr + ""String_Node_Str"");
      }
    }
    if (ih.getInstruction() instanceof ArrayInstruction) {
      String aType=((ArrayInstruction)ih.getInstruction()).getType(wcmb.getCpg()).getSignature();
      sb.append(aType + ""String_Node_Str"");
    }
    if (ih == endih) {
      sb.append(""String_Node_Str"" + id + ""String_Node_Str"");
      if (ih.getInstruction() instanceof ReturnInstruction) {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"",7));
      }
 else {
        sb.append(WU.prepad(blockcychit + ""String_Node_Str"" + blockcycmiss,7));
      }
    }
    sb.append(wcmb.wca.lae + ""String_Node_Str"");
  }
 while (ih != endih && (ih=ih.getNext()) != null);
  if (blockcycmiss < blockcychit)   blockcycmiss=blockcychit;
  return sb.toString();
}",0.9943436499466382
187100,"public String toLS(){
  StringBuffer ls=new StringBuffer();
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"");
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    WCETBasicBlock wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id);
    if (iter.hasNext())     ls.append(""String_Node_Str"");
  }
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  WCETBasicBlock wcbb=null;
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"");
        if (tinbbs.size() > 0) {
          ls.append(""String_Node_Str"");
        }
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(""String_Node_Str"" + w.id + ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
      ls.append(""String_Node_Str"");
      if (wcbb.sucbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.sucbb.id);
      if (wcbb.sucbb != null && wcbb.tarbb != null)       ls.append(""String_Node_Str"");
      if (wcbb.tarbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.tarbb.id);
      if (wcbb.sucbb == null && wcbb.tarbb == null)       ls.append(""String_Node_Str"");
      ls.append(""String_Node_Str"");
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    if (wcbb.loopcontroller) {
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
 else {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ (wcbb.loopid - 1)+ ""String_Node_Str""+ wcbb.loopid+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      if (wcbb.id == 0) {
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"");
        if (tinbbs.size() > 0)         ls.append(""String_Node_Str"");
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"" + w.id+ ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
    }
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
  }
  try {
    lpf=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"" + jc.getClassName()+ ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"";
    lpf=lpf.replace('<','_');
    lpf=lpf.replace('>','_');
    PrintWriter lsout=new PrintWriter(new FileOutputStream(lpf));
    lsout.write(ls.toString());
    lsout.close();
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  try {
    wcetvars=new HashMap();
    LpSolve problem=LpSolve.readLp(lpf,LpSolve.NORMAL,jc.getClassName() + ""String_Node_Str"" + methodbcel.getName());
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.solve();
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.printObjective();
    problem.printSolution(1);
    wcetlp=(int)problem.getObjective();
    try {
      BufferedReader in=new BufferedReader(new FileReader(lpf + ""String_Node_Str""));
      String str;
      while ((str=in.readLine()) != null) {
        ls.append(str + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(str);
        if (st.countTokens() == 2) {
          wcetvars.put(st.nextToken(),st.nextToken());
        }
      }
      in.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  LpSolveException e) {
    System.out.println(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName());
  }
  return ls.toString();
}","public String toLS(){
  StringBuffer ls=new StringBuffer();
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"");
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    WCETBasicBlock wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id);
    if (iter.hasNext())     ls.append(""String_Node_Str"");
  }
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  ls.append(""String_Node_Str"");
  WCETBasicBlock wcbb=null;
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"");
        if (tinbbs.size() > 0) {
          ls.append(""String_Node_Str"");
        }
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(""String_Node_Str"" + w.id + ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
      ls.append(""String_Node_Str"");
      if (wcbb.sucbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.sucbb.id);
      if (wcbb.sucbb != null && wcbb.tarbb != null)       ls.append(""String_Node_Str"");
      if (wcbb.tarbb != null)       ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.tarbb.id);
      if (wcbb.sucbb == null && wcbb.tarbb == null)       ls.append(""String_Node_Str"");
      ls.append(""String_Node_Str"");
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    if (wcbb.loopcontroller) {
      if (wcbb.id == 0) {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ wcbb.id+ ""String_Node_Str"");
      }
 else {
        ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str""+ wcbb.id+ ""String_Node_Str""+ wcbb.sucbb.id+ ""String_Node_Str""+ wcbb.loop+ ""String_Node_Str""+ (wcbb.loopid - 1)+ ""String_Node_Str""+ wcbb.loopid+ ""String_Node_Str"");
      }
    }
  }
  ls.append(""String_Node_Str"");
  for (Iterator iter=bbs.keySet().iterator(); iter.hasNext(); ) {
    Integer keyInt=(Integer)iter.next();
    wcbb=(WCETBasicBlock)bbs.get(keyInt);
    ls.append(""String_Node_Str"" + wcbb.id + ""String_Node_Str"");
    HashMap tinbbs=wcbb.getInbbs();
    if (tinbbs.size() > 0 || wcbb.id == 0) {
      if (wcbb.id == 0) {
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"");
        if (tinbbs.size() > 0)         ls.append(""String_Node_Str"");
      }
      for (Iterator titer=tinbbs.keySet().iterator(); titer.hasNext(); ) {
        Integer tkeyInt=(Integer)titer.next();
        WCETBasicBlock w=(WCETBasicBlock)tinbbs.get(tkeyInt);
        ls.append(wcbb.blockcycmiss + ""String_Node_Str"" + w.id+ ""String_Node_Str""+ wcbb.id);
        if (titer.hasNext())         ls.append(""String_Node_Str"");
      }
    }
    ls.append(""String_Node_Str"");
  }
  try {
    lpf=new File(WCETAnalyser.outFile).getParentFile().getAbsolutePath() + ""String_Node_Str"" + jc.getClassName()+ ""String_Node_Str""+ methodbcel.getName()+ ""String_Node_Str"";
    lpf=lpf.replace('<','_');
    lpf=lpf.replace('>','_');
    PrintWriter lsout=new PrintWriter(new FileOutputStream(lpf));
    lsout.write(ls.toString());
    lsout.close();
  }
 catch (  FileNotFoundException e1) {
    e1.printStackTrace();
  }
  try {
    wcetvars=new HashMap();
    LpSolve problem=LpSolve.readLp(lpf,LpSolve.NORMAL,jc.getClassName() + ""String_Node_Str"" + methodbcel.getName());
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.solve();
    problem.setOutputfile(lpf + ""String_Node_Str"");
    problem.printObjective();
    problem.printSolution(1);
    wcetlp=(int)problem.getObjective();
    try {
      BufferedReader in=new BufferedReader(new FileReader(lpf + ""String_Node_Str""));
      String str;
      while ((str=in.readLine()) != null) {
        ls.append(str + ""String_Node_Str"");
        StringTokenizer st=new StringTokenizer(str);
        if (st.countTokens() == 2) {
          wcetvars.put(st.nextToken(),st.nextToken());
        }
      }
      in.close();
    }
 catch (    IOException e) {
    }
  }
 catch (  LpSolveException e) {
    System.out.println(""String_Node_Str"" + jc.getClassName() + ""String_Node_Str""+ methodbcel.getName());
  }
  return ls.toString();
}",0.99131488588164
187101,"/** 
 * Control flow analysis for one nonabstract-method.
 */
public void controlFlowGraph(){
  cpg=new ConstantPoolGen(jc.getConstantPool());
  InstConstraintVisitor icv=new AnInstConstraintVisitor();
  icv.setConstantPoolGen(cpg);
  ExecutionVisitor ev=new ExecutionVisitor();
  ev.setConstantPoolGen(cpg);
  mg=new MethodGen(methodbcel,jc.getClassName(),cpg);
  mg.getInstructionList().setPositions(true);
  icv.setMethodGen(mg);
  if (!(mg.isAbstract() || mg.isNative())) {
    InstructionHandle ih=mg.getInstructionList().getStart();
    InstructionHandle ihend=mg.getInstructionList().getEnd();
    init(ih,ihend);
    do {
      Instruction ins=ih.getInstruction();
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        InstructionHandle ihnext=ih.getNext();
        createBasicBlock(ihtar);
        if (ihnext != null) {
          createBasicBlock(ihnext);
        }
      }
    }
 while ((ih=ih.getNext()) != null);
    int id=0;
    for (Iterator iter=getBbs().keySet().iterator(); iter.hasNext(); ) {
      WCETBasicBlock wbb=(WCETBasicBlock)getBbs().get((Integer)iter.next());
      wbb.calculateWcet();
      wbb.setId(id);
      id++;
      ih=wbb.getEndih();
      WCETBasicBlock wbbthis=getCoveringBB(ih);
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        WCETBasicBlock wbbtar=getCoveringBB(ihtar);
        wbbthis.setTarbb(wbbtar);
        wbbtar.addTargeter(wbbthis);
        if (ih.getInstruction() instanceof IfInstruction) {
          InstructionHandle ihnext=ih.getNext();
          if (ihnext != null) {
            WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
            wbbthis.setSucbb(wbbnxt);
          }
        }
      }
 else {
        InstructionHandle ihnext=ih.getNext();
        if (ihnext != null) {
          WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
          wbbthis.setSucbb(wbbnxt);
        }
      }
    }
  }
}","/** 
 * Control flow analysis for one nonabstract-method.
 */
public void controlFlowGraph(){
  cpg=new ConstantPoolGen(jc.getConstantPool());
  InstConstraintVisitor icv=new AnInstConstraintVisitor();
  icv.setConstantPoolGen(cpg);
  ExecutionVisitor ev=new ExecutionVisitor();
  ev.setConstantPoolGen(cpg);
  mg=new MethodGen(methodbcel,jc.getClassName(),cpg);
  mg.getInstructionList().setPositions(true);
  icv.setMethodGen(mg);
  if (!(mg.isAbstract() || mg.isNative())) {
    InstructionHandle ih=mg.getInstructionList().getStart();
    InstructionHandle ihend=mg.getInstructionList().getEnd();
    init(ih,ihend);
    do {
      Instruction ins=ih.getInstruction();
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        InstructionHandle ihnext=ih.getNext();
        createBasicBlock(ihtar);
        if (ihnext != null) {
          createBasicBlock(ihnext);
        }
      }
    }
 while ((ih=ih.getNext()) != null);
    int id=0;
    for (Iterator iter=getBbs().keySet().iterator(); iter.hasNext(); ) {
      WCETBasicBlock wbb=(WCETBasicBlock)getBbs().get((Integer)iter.next());
      wbb.calculateWcet();
      wbb.setId(id);
      id++;
      ih=wbb.getEndih();
      WCETBasicBlock wbbthis=getCoveringBB(ih);
      if (ih.getInstruction() instanceof BranchInstruction) {
        InstructionHandle ihtar=((BranchInstruction)ih.getInstruction()).getTarget();
        WCETBasicBlock wbbtar=getCoveringBB(ihtar);
        wbbthis.setTarbb(wbbtar);
        wbbtar.addTargeter(wbbthis);
        if (ih.getInstruction() instanceof IfInstruction) {
          InstructionHandle ihnext=ih.getNext();
          if (ihnext != null) {
            WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
            wbbthis.setSucbb(wbbnxt);
          }
        }
      }
 else       if (ih.getInstruction() instanceof ReturnInstruction) {
      }
 else {
        InstructionHandle ihnext=ih.getNext();
        if (ihnext != null) {
          WCETBasicBlock wbbnxt=getCoveringBB(ihnext);
          wbbthis.setSucbb(wbbnxt);
        }
      }
    }
  }
}",0.9819391634980988
187102,"public EXIFIFDPointer(){
  super(""String_Node_Str"",TAG_EXIF_IFD_POINTER,1 << TIFFTag.TIFF_LONG,EXIFTIFFTagSet.getInstance());
}","public EXIFIFDPointer(){
  super(""String_Node_Str"",TAG_EXIF_IFD_POINTER,1 << TIFFTag.TIFF_LONG | 1 << TIFFTag.TIFF_IFD_POINTER,EXIFTIFFTagSet.getInstance());
}",0.8881118881118881
187103,"/** 
 * Constructs a <code>TIFFTagSet</code>, given a <code>List</code> of <code>TIFFTag</code> objects.
 * @param tags a <code>List</code> object containing<code>TIFFTag</code> objects to be added to this tag set.
 * @throws IllegalArgumentException if <code>tags</code> is<code>null</code>, or contains objects that are not instances of the <code>TIFFTag</code> class.
 */
public TIFFTagSet(List tags){
  if (tags == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator iter=tags.iterator();
  while (iter.hasNext()) {
    Object o=iter.next();
    if (!(o instanceof TIFFTag)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    TIFFTag tag=(TIFFTag)o;
    allowedTagsByNumber.put(new Integer(tag.getNumber()),tag);
    allowedTagsByName.put(tag.getName(),tag);
  }
}","/** 
 * Constructs a <code>TIFFTagSet</code>, given a <code>List</code> of <code>TIFFTag</code> objects.
 * @param tags a <code>List</code> object containing<code>TIFFTag</code> objects to be added to this tag set.
 * @throws IllegalArgumentException if <code>tags</code> is<code>null</code>, or contains objects that are not instances of the <code>TIFFTag</code> class.
 */
public TIFFTagSet(List tags){
  if (tags == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  Iterator iter=tags.iterator();
  while (iter.hasNext()) {
    Object o=iter.next();
    if (!(o instanceof TIFFTag)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    TIFFTag tag=(TIFFTag)o;
    allowedTagsByNumber.put(Integer.valueOf(tag.getNumber()),tag);
    allowedTagsByName.put(tag.getName(),tag);
  }
}",0.9841849148418492
187104,"@Test public void readFromFileDirect() throws IOException {
  final File file=TestData.file(this,""String_Node_Str"");
  final ImageReadParam param=new ImageReadParam();
  param.setSourceRegion(new Rectangle(0,0,2,2));
  final TIFFImageReader reader=(TIFFImageReader)new TIFFImageReaderSpi().createReaderInstance();
  reader.setInput(new FileImageInputStream(file));
  BufferedImage image=reader.read(0,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  image=reader.read(1,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  image=reader.read(2,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  image=reader.read(1,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  image=reader.read(3,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  image=reader.read(0,param);
  Assert.assertEquals(2,image.getWidth());
  Assert.assertEquals(2,image.getHeight());
  image.flush();
  image=null;
  reader.dispose();
}","@Test public void readFromFileDirect() throws IOException {
  final File file=TestData.file(this,""String_Node_Str"");
  final ImageReadParam param=new ImageReadParam();
  param.setSourceRegion(new Rectangle(0,0,2,2));
  final TIFFImageReader reader=(TIFFImageReader)new TIFFImageReaderSpi().createReaderInstance();
  FileImageInputStream inputStream=new FileImageInputStream(file);
  try {
    reader.setInput(inputStream);
    BufferedImage image=reader.read(0,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
    image=reader.read(1,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
    image=reader.read(2,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
    image=reader.read(1,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
    image=reader.read(3,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
    image=reader.read(0,param);
    Assert.assertEquals(2,image.getWidth());
    Assert.assertEquals(2,image.getHeight());
    image.flush();
    image=null;
  }
 catch (  Exception e) {
    logger.log(Level.SEVERE,e.getMessage(),e);
  }
 finally {
    if (inputStream != null) {
      inputStream.flush();
      inputStream.close();
    }
    if (reader != null) {
      reader.dispose();
    }
  }
}",0.7386831275720165
187105,"/** 
 * Read data from the required region of the raster.
 * @param item a <code>GDALCommonIIOImageMetadata</code> related to the actual dataset
 * @param srcRegion the source Region to be read
 * @param dstRegion the destination Region of the image read
 * @param selectedBands an array specifying the requested bands
 * @return the read <code>Raster</code>
 */
private Raster readDatasetRaster(GDALCommonIIOImageMetadata item,Rectangle srcRegion,Rectangle dstRegion,int[] selectedBands,SampleModel destSampleModel) throws IOException {
  SampleModel destSm=destSampleModel != null ? destSampleModel : item.getSampleModel();
  SampleModel sampleModel=null;
  DataBuffer imgBuffer=null;
  final String datasetName=item.getDatasetName();
  final Dataset dataset=GDALUtilities.acquireDataSet(datasetName,gdalconst.GA_ReadOnly);
  Band pBand=null;
  if (dataset == null)   throw new IOException(""String_Node_Str"" + datasetName);
  try {
    int dstWidth=dstRegion.width;
    int dstHeight=dstRegion.height;
    int srcRegionXOffset=srcRegion.x;
    int srcRegionYOffset=srcRegion.y;
    int srcRegionWidth=srcRegion.width;
    int srcRegionHeight=srcRegion.height;
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine(""String_Node_Str"" + srcRegion.toString());
    final int nBands=selectedBands != null ? selectedBands.length : destSm.getNumBands();
    int[] banks=new int[nBands];
    int[] offsets=new int[nBands];
    final int pixels=dstWidth * dstHeight;
    int bufferType=0, bufferSize=0;
    int typeSizeInBytes=0;
    pBand=dataset.GetRasterBand(1);
    bufferType=pBand.getDataType();
    typeSizeInBytes=gdal.GetDataTypeSize(bufferType) / 8;
    bufferSize=nBands * pixels * typeSizeInBytes;
    boolean splitBands=false;
    if (bufferSize < 0 || destSm instanceof BandedSampleModel) {
      bufferSize=pixels * typeSizeInBytes;
      splitBands=true;
    }
    int dataBufferType=-1;
    byte[][] byteBands=new byte[nBands][];
    for (int k=0; k < nBands; k++) {
      if (k > 0 && !splitBands)       break;
      final byte[] dataBuffer=new byte[bufferSize];
      final int returnVal;
      if (!splitBands) {
        final int bandsMap[]=new int[nBands];
        if (selectedBands != null) {
          for (int i=0; i < nBands; i++)           bandsMap[i]=selectedBands[i] + 1;
        }
 else {
          for (int i=0; i < nBands; i++)           bandsMap[i]=i + 1;
        }
        returnVal=dataset.ReadRaster(srcRegionXOffset,srcRegionYOffset,srcRegionWidth,srcRegionHeight,dstWidth,dstHeight,bufferType,dataBuffer,bandsMap,nBands * typeSizeInBytes,dstWidth * nBands * typeSizeInBytes,typeSizeInBytes);
        byteBands[k]=dataBuffer;
      }
 else {
        Band rBand=null;
        try {
          rBand=dataset.GetRasterBand(k + 1);
          returnVal=rBand.ReadRaster(srcRegionXOffset,srcRegionYOffset,srcRegionWidth,srcRegionHeight,dstWidth,dstHeight,bufferType,dataBuffer);
          byteBands[k]=dataBuffer;
        }
  finally {
          if (rBand != null) {
            try {
              rBand.delete();
            }
 catch (            Throwable e) {
              if (LOGGER.isLoggable(Level.FINEST))               LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
            }
          }
        }
      }
      if (returnVal == gdalconstConstants.CE_None) {
        if (!splitBands)         for (int band=0; band < nBands; band++) {
          banks[band]=band;
          offsets[band]=band;
        }
 else {
          banks[k]=k;
          offsets[k]=0;
        }
      }
 else {
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorMsg()).toString());
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorNo()).toString());
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorType()).toString());
        GDALUtilities.closeDataSet(dataset);
        throw new RuntimeException(gdal.GetLastErrorMsg());
      }
    }
    if (bufferType == gdalconstConstants.GDT_Byte) {
      if (!splitBands) {
        imgBuffer=new DataBufferByte(byteBands[0],nBands * pixels);
      }
 else {
        imgBuffer=new DataBufferByte(byteBands,pixels);
      }
      dataBufferType=DataBuffer.TYPE_BYTE;
    }
 else {
      ByteBuffer bands[]=new ByteBuffer[nBands];
      for (int k=0; k < nBands; k++) {
        bands[k]=ByteBuffer.wrap(byteBands[k],0,byteBands[k].length);
      }
      if (bufferType == gdalconstConstants.GDT_Int16 || bufferType == gdalconstConstants.GDT_UInt16) {
        if (!splitBands) {
          short[] shorts=new short[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final ShortBuffer buff=bands[0].asShortBuffer();
          buff.get(shorts,0,nBands * pixels);
          if (bufferType == gdalconstConstants.GDT_Int16)           imgBuffer=new DataBufferShort(shorts,nBands * pixels);
 else           imgBuffer=new DataBufferUShort(shorts,nBands * pixels);
        }
 else {
          short[][] shorts=new short[nBands][];
          for (int i=0; i < nBands; i++) {
            shorts[i]=new short[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asShortBuffer().get(shorts[i],0,pixels);
          }
          if (bufferType == gdalconstConstants.GDT_Int16)           imgBuffer=new DataBufferShort(shorts,pixels);
 else           imgBuffer=new DataBufferUShort(shorts,pixels);
        }
        if (bufferType == gdalconstConstants.GDT_UInt16)         dataBufferType=DataBuffer.TYPE_USHORT;
 else         dataBufferType=DataBuffer.TYPE_SHORT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Int32 || bufferType == gdalconstConstants.GDT_UInt32) {
        if (!splitBands) {
          int[] ints=new int[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final IntBuffer buff=bands[0].asIntBuffer();
          buff.get(ints,0,nBands * pixels);
          imgBuffer=new DataBufferInt(ints,nBands * pixels);
        }
 else {
          int[][] ints=new int[nBands][];
          for (int i=0; i < nBands; i++) {
            ints[i]=new int[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asIntBuffer().get(ints[i],0,pixels);
          }
          imgBuffer=new DataBufferInt(ints,pixels);
        }
        dataBufferType=DataBuffer.TYPE_INT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Float32) {
        if (!splitBands) {
          float[] floats=new float[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final FloatBuffer buff=bands[0].asFloatBuffer();
          buff.get(floats,0,nBands * pixels);
          imgBuffer=new DataBufferFloat(floats,nBands * pixels);
        }
 else {
          float[][] floats=new float[nBands][];
          for (int i=0; i < nBands; i++) {
            floats[i]=new float[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asFloatBuffer().get(floats[i],0,pixels);
          }
          imgBuffer=new DataBufferFloat(floats,pixels);
        }
        dataBufferType=DataBuffer.TYPE_FLOAT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Float64) {
        if (!splitBands) {
          double[] doubles=new double[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final DoubleBuffer buff=bands[0].asDoubleBuffer();
          buff.get(doubles,0,nBands * pixels);
          imgBuffer=new DataBufferDouble(doubles,nBands * pixels);
        }
 else {
          double[][] doubles=new double[nBands][];
          for (int i=0; i < nBands; i++) {
            doubles[i]=new double[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asDoubleBuffer().get(doubles[i],0,pixels);
          }
          imgBuffer=new DataBufferDouble(doubles,pixels);
        }
        dataBufferType=DataBuffer.TYPE_DOUBLE;
      }
 else {
        LOGGER.info(""String_Node_Str"" + bufferType);
      }
    }
    if (splitBands)     sampleModel=new BandedSampleModel(dataBufferType,dstWidth,dstHeight,dstWidth,banks,offsets);
 else     sampleModel=new PixelInterleavedSampleModel(dataBufferType,dstWidth,dstHeight,nBands,dstWidth * nBands,offsets);
  }
  finally {
    if (pBand != null) {
      try {
        pBand.delete();
      }
 catch (      Throwable e) {
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
      }
    }
    if (dataset != null) {
      try {
        GDALUtilities.closeDataSet(dataset);
      }
 catch (      Throwable e) {
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
      }
    }
  }
  return Raster.createWritableRaster(sampleModel,imgBuffer,null);
}","/** 
 * Read data from the required region of the raster.
 * @param item a <code>GDALCommonIIOImageMetadata</code> related to the actual dataset
 * @param srcRegion the source Region to be read
 * @param dstRegion the destination Region of the image read
 * @param selectedBands an array specifying the requested bands
 * @return the read <code>Raster</code>
 */
private Raster readDatasetRaster(GDALCommonIIOImageMetadata item,Rectangle srcRegion,Rectangle dstRegion,int[] selectedBands,SampleModel destSampleModel) throws IOException {
  SampleModel destSm=destSampleModel != null ? destSampleModel : item.getSampleModel();
  SampleModel sampleModel=null;
  DataBuffer imgBuffer=null;
  final String datasetName=item.getDatasetName();
  final Dataset dataset=GDALUtilities.acquireDataSet(datasetName,gdalconst.GA_ReadOnly);
  Band pBand=null;
  if (dataset == null)   throw new IOException(""String_Node_Str"" + datasetName);
  try {
    int dstWidth=dstRegion.width;
    int dstHeight=dstRegion.height;
    int srcRegionXOffset=srcRegion.x;
    int srcRegionYOffset=srcRegion.y;
    int srcRegionWidth=srcRegion.width;
    int srcRegionHeight=srcRegion.height;
    if (LOGGER.isLoggable(Level.FINE))     LOGGER.fine(""String_Node_Str"" + srcRegion.toString());
    final int nBands=selectedBands != null ? selectedBands.length : destSm.getNumBands();
    int[] banks=new int[nBands];
    int[] offsets=new int[nBands];
    final int pixels=dstWidth * dstHeight;
    int bufferType=0, bufferSize=0;
    int typeSizeInBytes=0;
    pBand=dataset.GetRasterBand(1);
    bufferType=pBand.getDataType();
    typeSizeInBytes=gdal.GetDataTypeSize(bufferType) / 8;
    bufferSize=nBands * pixels * typeSizeInBytes;
    boolean splitBands=false;
    if (bufferSize < 0 || destSm instanceof BandedSampleModel) {
      bufferSize=pixels * typeSizeInBytes;
      splitBands=true;
    }
    int dataBufferType=-1;
    byte[][] byteBands=new byte[nBands][];
    for (int k=0; k < nBands; k++) {
      if (k > 0 && !splitBands)       break;
      final byte[] dataBuffer=new byte[bufferSize];
      final int returnVal;
      if (!splitBands) {
        final int bandsMap[]=new int[nBands];
        if (selectedBands != null) {
          for (int i=0; i < nBands; i++)           bandsMap[i]=selectedBands[i] + 1;
        }
 else {
          for (int i=0; i < nBands; i++)           bandsMap[i]=i + 1;
        }
        returnVal=dataset.ReadRaster(srcRegionXOffset,srcRegionYOffset,srcRegionWidth,srcRegionHeight,dstWidth,dstHeight,bufferType,dataBuffer,bandsMap,nBands * typeSizeInBytes,dstWidth * nBands * typeSizeInBytes,typeSizeInBytes);
        byteBands[k]=dataBuffer;
      }
 else {
        Band rBand=null;
        try {
          rBand=dataset.GetRasterBand(k + 1);
          returnVal=rBand.ReadRaster(srcRegionXOffset,srcRegionYOffset,srcRegionWidth,srcRegionHeight,dstWidth,dstHeight,bufferType,dataBuffer);
          byteBands[k]=dataBuffer;
        }
  finally {
          if (rBand != null) {
            try {
              rBand.delete();
            }
 catch (            Throwable e) {
              if (LOGGER.isLoggable(Level.FINEST))               LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
            }
          }
        }
      }
      if (returnVal == gdalconstConstants.CE_None) {
        if (!splitBands)         for (int band=0; band < nBands; band++) {
          banks[band]=band;
          offsets[band]=band;
        }
 else {
          banks[k]=k;
          offsets[k]=0;
        }
      }
 else {
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorMsg()).toString());
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorNo()).toString());
        LOGGER.info(new StringBuilder(""String_Node_Str"").append(gdal.GetLastErrorType()).toString());
        GDALUtilities.closeDataSet(dataset);
        throw new RuntimeException(gdal.GetLastErrorMsg());
      }
    }
    if (bufferType == gdalconstConstants.GDT_Byte) {
      if (!splitBands) {
        imgBuffer=new DataBufferByte(byteBands[0],nBands * pixels);
      }
 else {
        imgBuffer=new DataBufferByte(byteBands,pixels);
      }
      dataBufferType=DataBuffer.TYPE_BYTE;
    }
 else {
      ByteBuffer bands[]=new ByteBuffer[nBands];
      for (int k=0; (splitBands && k < nBands) || (k < 1 && !splitBands); k++) {
        bands[k]=ByteBuffer.wrap(byteBands[k],0,byteBands[k].length);
      }
      if (bufferType == gdalconstConstants.GDT_Int16 || bufferType == gdalconstConstants.GDT_UInt16) {
        if (!splitBands) {
          short[] shorts=new short[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final ShortBuffer buff=bands[0].asShortBuffer();
          buff.get(shorts,0,nBands * pixels);
          if (bufferType == gdalconstConstants.GDT_Int16)           imgBuffer=new DataBufferShort(shorts,nBands * pixels);
 else           imgBuffer=new DataBufferUShort(shorts,nBands * pixels);
        }
 else {
          short[][] shorts=new short[nBands][];
          for (int i=0; i < nBands; i++) {
            shorts[i]=new short[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asShortBuffer().get(shorts[i],0,pixels);
          }
          if (bufferType == gdalconstConstants.GDT_Int16)           imgBuffer=new DataBufferShort(shorts,pixels);
 else           imgBuffer=new DataBufferUShort(shorts,pixels);
        }
        if (bufferType == gdalconstConstants.GDT_UInt16)         dataBufferType=DataBuffer.TYPE_USHORT;
 else         dataBufferType=DataBuffer.TYPE_SHORT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Int32 || bufferType == gdalconstConstants.GDT_UInt32) {
        if (!splitBands) {
          int[] ints=new int[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final IntBuffer buff=bands[0].asIntBuffer();
          buff.get(ints,0,nBands * pixels);
          imgBuffer=new DataBufferInt(ints,nBands * pixels);
        }
 else {
          int[][] ints=new int[nBands][];
          for (int i=0; i < nBands; i++) {
            ints[i]=new int[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asIntBuffer().get(ints[i],0,pixels);
          }
          imgBuffer=new DataBufferInt(ints,pixels);
        }
        dataBufferType=DataBuffer.TYPE_INT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Float32) {
        if (!splitBands) {
          float[] floats=new float[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final FloatBuffer buff=bands[0].asFloatBuffer();
          buff.get(floats,0,nBands * pixels);
          imgBuffer=new DataBufferFloat(floats,nBands * pixels);
        }
 else {
          float[][] floats=new float[nBands][];
          for (int i=0; i < nBands; i++) {
            floats[i]=new float[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asFloatBuffer().get(floats[i],0,pixels);
          }
          imgBuffer=new DataBufferFloat(floats,pixels);
        }
        dataBufferType=DataBuffer.TYPE_FLOAT;
      }
 else       if (bufferType == gdalconstConstants.GDT_Float64) {
        if (!splitBands) {
          double[] doubles=new double[nBands * pixels];
          bands[0].order(ByteOrder.nativeOrder());
          final DoubleBuffer buff=bands[0].asDoubleBuffer();
          buff.get(doubles,0,nBands * pixels);
          imgBuffer=new DataBufferDouble(doubles,nBands * pixels);
        }
 else {
          double[][] doubles=new double[nBands][];
          for (int i=0; i < nBands; i++) {
            doubles[i]=new double[pixels];
            bands[i].order(ByteOrder.nativeOrder());
            bands[i].asDoubleBuffer().get(doubles[i],0,pixels);
          }
          imgBuffer=new DataBufferDouble(doubles,pixels);
        }
        dataBufferType=DataBuffer.TYPE_DOUBLE;
      }
 else {
        LOGGER.info(""String_Node_Str"" + bufferType);
      }
    }
    if (splitBands)     sampleModel=new BandedSampleModel(dataBufferType,dstWidth,dstHeight,dstWidth,banks,offsets);
 else     sampleModel=new PixelInterleavedSampleModel(dataBufferType,dstWidth,dstHeight,nBands,dstWidth * nBands,offsets);
  }
  finally {
    if (pBand != null) {
      try {
        pBand.delete();
      }
 catch (      Throwable e) {
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
      }
    }
    if (dataset != null) {
      try {
        GDALUtilities.closeDataSet(dataset);
      }
 catch (      Throwable e) {
        if (LOGGER.isLoggable(Level.FINEST))         LOGGER.log(Level.FINEST,e.getLocalizedMessage(),e);
      }
    }
  }
  return Raster.createWritableRaster(sampleModel,imgBuffer,null);
}",0.9976002742543708
187106,"private void write(IIOMetadata sm,IIOImage iioimage,ImageWriteParam p,boolean writeHeader,boolean writeData) throws IOException {
  if (stream == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (iioimage == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (iioimage.hasRaster() && !canWriteRasters()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  this.image=iioimage.getRenderedImage();
  SampleModel sampleModel=image.getSampleModel();
  this.sourceXOffset=image.getMinX();
  this.sourceYOffset=image.getMinY();
  this.sourceWidth=image.getWidth();
  this.sourceHeight=image.getHeight();
  Rectangle imageBounds=new Rectangle(sourceXOffset,sourceYOffset,sourceWidth,sourceHeight);
  ColorModel colorModel=null;
  if (p == null) {
    this.param=getDefaultWriteParam();
    this.sourceBands=null;
    this.periodX=1;
    this.periodY=1;
    this.numBands=sampleModel.getNumBands();
    colorModel=image.getColorModel();
  }
 else {
    this.param=p;
    Rectangle sourceRegion=param.getSourceRegion();
    if (sourceRegion != null) {
      sourceRegion=sourceRegion.intersection(imageBounds);
      sourceXOffset=sourceRegion.x;
      sourceYOffset=sourceRegion.y;
      sourceWidth=sourceRegion.width;
      sourceHeight=sourceRegion.height;
    }
    int gridX=param.getSubsamplingXOffset();
    int gridY=param.getSubsamplingYOffset();
    this.sourceXOffset+=gridX;
    this.sourceYOffset+=gridY;
    this.sourceWidth-=gridX;
    this.sourceHeight-=gridY;
    this.periodX=param.getSourceXSubsampling();
    this.periodY=param.getSourceYSubsampling();
    int[] sBands=param.getSourceBands();
    if (sBands != null) {
      sourceBands=sBands;
      this.numBands=sourceBands.length;
    }
 else {
      this.numBands=sampleModel.getNumBands();
    }
    ImageTypeSpecifier destType=p.getDestinationType();
    if (destType != null) {
      ColorModel cm=destType.getColorModel();
      if (cm.getNumComponents() == numBands) {
        colorModel=cm;
      }
    }
    if (colorModel == null) {
      colorModel=image.getColorModel();
    }
  }
  this.imageType=new ImageTypeSpecifier(colorModel,sampleModel);
  ImageUtil.canEncodeImage(this,this.imageType);
  int destWidth=(sourceWidth + periodX - 1) / periodX;
  int destHeight=(sourceHeight + periodY - 1) / periodY;
  if (destWidth <= 0 || destHeight <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  clearAbortRequest();
  processImageStarted(0);
  int[] sampleSize=sampleModel.getSampleSize();
  long tot=0;
  for (int i=0; i < this.numBands; i++)   tot+=sampleSize[i];
  long sizeImage=(tot * this.sourceHeight * this.sourceWidth) / 8;
  long var=4294967296L;
  boolean isForceToBigTIFF=false;
  if (p instanceof TIFFImageWriteParam) {
    isForceToBigTIFF=((TIFFImageWriteParam)p).isForceToBigTIFF();
  }
  if (sizeImage > var || isForceToBigTIFF || isBtiff == true)   isBtiff=true;
 else   isBtiff=false;
  if (writeHeader) {
    this.streamMetadata=null;
    if (sm != null) {
      this.streamMetadata=(TIFFStreamMetadata)convertStreamMetadata(sm,param);
    }
    if (this.streamMetadata == null) {
      this.streamMetadata=(TIFFStreamMetadata)getDefaultStreamMetadata(param);
    }
    writeHeader();
    if (!isBtiff) {
      stream.seek(headerPosition + 4);
      nextSpace=(nextSpace + 3) & ~0x3;
      stream.writeInt((int)nextSpace);
    }
 else {
      stream.seek(headerPosition + 8);
      nextSpace=(nextSpace + 7) & ~0x7;
      stream.writeLong(nextSpace);
    }
  }
  this.imageMetadata=null;
  IIOMetadata im=iioimage.getMetadata();
  if (im != null) {
    if (im instanceof TIFFImageMetadata) {
      this.imageMetadata=((TIFFImageMetadata)im).getShallowClone();
    }
 else     if (Arrays.asList(im.getMetadataFormatNames()).contains(TIFFImageMetadata.nativeMetadataFormatName)) {
      this.imageMetadata=convertNativeImageMetadata(im);
    }
 else     if (im.isStandardMetadataFormatSupported()) {
      try {
        this.imageMetadata=convertStandardImageMetadata(im);
      }
 catch (      IIOInvalidTreeException e) {
      }
    }
  }
  if (this.imageMetadata == null) {
    this.imageMetadata=(TIFFImageMetadata)getDefaultImageMetadata(this.imageType,this.param);
  }
  setupMetadata(colorModel,sampleModel,destWidth,destHeight);
  compressor.setWriter(this);
  compressor.setMetadata(imageMetadata);
  compressor.setStream(stream);
  initializeScaleTables(sampleModel.getSampleSize());
  this.isBilevel=ImageUtil.isBinary(this.image.getSampleModel());
  this.isInverted=(nativePhotometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO && photometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO) || (nativePhotometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO && photometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO);
  this.isImageSimple=(isBilevel || (!isInverted && ImageUtil.imageIsContiguous(this.image))) && !isRescaling && sourceBands == null && periodX == 1 && periodY == 1 && colorConverter == null;
  TIFFIFD rootIFD=imageMetadata.getRootIFD();
  rootIFD.writeToStream(stream,isBtiff);
  this.nextIFDPointerPos=stream.getStreamPosition();
  stream.writeLong(0);
  long lastIFDPosition=rootIFD.getLastPosition();
  stream.seek(lastIFDPosition);
  if (lastIFDPosition > this.nextSpace) {
    this.nextSpace=lastIFDPosition;
  }
  if (!writeData) {
    return;
  }
  long stripOrTileByteCountsPosition=rootIFD.getStripOrTileByteCountsPosition();
  long stripOrTileOffsetsPosition=rootIFD.getStripOrTileOffsetsPosition();
  this.totalPixels=tileWidth * tileLength * tilesDown* tilesAcross;
  this.pixelsDone=0;
  for (int tj=0; tj < tilesDown; tj++) {
    for (int ti=0; ti < tilesAcross; ti++) {
      long pos=stream.getStreamPosition();
      Rectangle tileRect=new Rectangle(sourceXOffset + ti * tileWidth * periodX,sourceYOffset + tj * tileLength * periodY,tileWidth * periodX,tileLength * periodY);
      try {
        int byteCount=writeTile(tileRect,compressor);
        if (pos + byteCount > nextSpace) {
          nextSpace=pos + byteCount;
        }
        pixelsDone+=tileRect.width * tileRect.height;
        processImageProgress(100.0F * pixelsDone / totalPixels);
        stream.mark();
        stream.seek(stripOrTileOffsetsPosition);
        if (!isBtiff) {
          stream.writeInt((int)pos);
          stripOrTileOffsetsPosition+=4;
          stream.seek(stripOrTileByteCountsPosition);
          stream.writeInt(byteCount);
          stripOrTileByteCountsPosition+=4;
        }
 else {
          stream.writeLong(pos);
          stripOrTileOffsetsPosition+=8;
          stream.seek(stripOrTileByteCountsPosition);
          stream.writeLong(byteCount);
          stripOrTileByteCountsPosition+=8;
        }
        stream.reset();
      }
 catch (      IOException e) {
        throw new IIOException(""String_Node_Str"",e);
      }
      if (abortRequested()) {
        processWriteAborted();
        return;
      }
    }
  }
  processImageComplete();
}","private void write(IIOMetadata sm,IIOImage iioimage,ImageWriteParam p,boolean writeHeader,boolean writeData) throws IOException {
  if (stream == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  if (iioimage == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (iioimage.hasRaster() && !canWriteRasters()) {
    throw new UnsupportedOperationException(""String_Node_Str"");
  }
  this.image=iioimage.getRenderedImage();
  SampleModel sampleModel=image.getSampleModel();
  this.sourceXOffset=image.getMinX();
  this.sourceYOffset=image.getMinY();
  this.sourceWidth=image.getWidth();
  this.sourceHeight=image.getHeight();
  Rectangle imageBounds=new Rectangle(sourceXOffset,sourceYOffset,sourceWidth,sourceHeight);
  ColorModel colorModel=null;
  if (p == null) {
    this.param=getDefaultWriteParam();
    this.sourceBands=null;
    this.periodX=1;
    this.periodY=1;
    this.numBands=sampleModel.getNumBands();
    colorModel=image.getColorModel();
  }
 else {
    this.param=p;
    Rectangle sourceRegion=param.getSourceRegion();
    if (sourceRegion != null) {
      sourceRegion=sourceRegion.intersection(imageBounds);
      sourceXOffset=sourceRegion.x;
      sourceYOffset=sourceRegion.y;
      sourceWidth=sourceRegion.width;
      sourceHeight=sourceRegion.height;
    }
    int gridX=param.getSubsamplingXOffset();
    int gridY=param.getSubsamplingYOffset();
    this.sourceXOffset+=gridX;
    this.sourceYOffset+=gridY;
    this.sourceWidth-=gridX;
    this.sourceHeight-=gridY;
    this.periodX=param.getSourceXSubsampling();
    this.periodY=param.getSourceYSubsampling();
    int[] sBands=param.getSourceBands();
    if (sBands != null) {
      sourceBands=sBands;
      this.numBands=sourceBands.length;
    }
 else {
      this.numBands=sampleModel.getNumBands();
    }
    ImageTypeSpecifier destType=p.getDestinationType();
    if (destType != null) {
      ColorModel cm=destType.getColorModel();
      if (cm.getNumComponents() == numBands) {
        colorModel=cm;
      }
    }
    if (colorModel == null) {
      colorModel=image.getColorModel();
    }
  }
  this.imageType=new ImageTypeSpecifier(colorModel,sampleModel);
  ImageUtil.canEncodeImage(this,this.imageType);
  int destWidth=(sourceWidth + periodX - 1) / periodX;
  int destHeight=(sourceHeight + periodY - 1) / periodY;
  if (destWidth <= 0 || destHeight <= 0) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  clearAbortRequest();
  processImageStarted(0);
  int[] sampleSize=sampleModel.getSampleSize();
  long tot=0;
  for (int i=0; i < this.numBands; i++)   tot+=sampleSize[i];
  long sizeImage=(tot * this.sourceHeight * this.sourceWidth) / 8;
  long var=4294967296L;
  boolean isForceToBigTIFF=false;
  if (p instanceof TIFFImageWriteParam) {
    isForceToBigTIFF=((TIFFImageWriteParam)p).isForceToBigTIFF();
  }
  if (sizeImage > var || isForceToBigTIFF || isBtiff == true)   isBtiff=true;
 else   isBtiff=false;
  if (writeHeader) {
    this.streamMetadata=null;
    if (sm != null) {
      this.streamMetadata=(TIFFStreamMetadata)convertStreamMetadata(sm,param);
    }
    if (this.streamMetadata == null) {
      this.streamMetadata=(TIFFStreamMetadata)getDefaultStreamMetadata(param);
    }
    writeHeader();
    if (!isBtiff) {
      stream.seek(headerPosition + 4);
      nextSpace=(nextSpace + 3) & ~0x3;
      stream.writeInt((int)nextSpace);
    }
 else {
      stream.seek(headerPosition + 8);
      nextSpace=(nextSpace + 7) & ~0x7;
      stream.writeLong(nextSpace);
    }
  }
  this.imageMetadata=null;
  IIOMetadata im=iioimage.getMetadata();
  if (im != null) {
    if (im instanceof TIFFImageMetadata) {
      this.imageMetadata=((TIFFImageMetadata)im).getShallowClone();
    }
 else     if (Arrays.asList(im.getMetadataFormatNames()).contains(TIFFImageMetadata.nativeMetadataFormatName)) {
      this.imageMetadata=convertNativeImageMetadata(im);
    }
 else     if (im.isStandardMetadataFormatSupported()) {
      try {
        this.imageMetadata=convertStandardImageMetadata(im);
      }
 catch (      IIOInvalidTreeException e) {
      }
    }
  }
  if (this.imageMetadata == null) {
    this.imageMetadata=(TIFFImageMetadata)getDefaultImageMetadata(this.imageType,this.param);
  }
  setupMetadata(colorModel,sampleModel,destWidth,destHeight);
  compressor.setWriter(this);
  compressor.setMetadata(imageMetadata);
  compressor.setStream(stream);
  initializeScaleTables(sampleModel.getSampleSize());
  this.isBilevel=ImageUtil.isBinary(this.image.getSampleModel());
  this.isInverted=(nativePhotometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO && photometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO) || (nativePhotometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_WHITE_IS_ZERO && photometricInterpretation == BaselineTIFFTagSet.PHOTOMETRIC_INTERPRETATION_BLACK_IS_ZERO);
  this.isImageSimple=(isBilevel || (!isInverted && ImageUtil.imageIsContiguous(this.image))) && !isRescaling && sourceBands == null && periodX == 1 && periodY == 1 && colorConverter == null;
  TIFFIFD rootIFD=imageMetadata.getRootIFD();
  rootIFD.writeToStream(stream,isBtiff);
  this.nextIFDPointerPos=stream.getStreamPosition();
  if (!isBtiff) {
    stream.writeInt(0);
  }
 else {
    stream.writeLong(0);
  }
  long lastIFDPosition=rootIFD.getLastPosition();
  stream.seek(lastIFDPosition);
  if (lastIFDPosition > this.nextSpace) {
    this.nextSpace=lastIFDPosition;
  }
  if (!writeData) {
    return;
  }
  long stripOrTileByteCountsPosition=rootIFD.getStripOrTileByteCountsPosition();
  long stripOrTileOffsetsPosition=rootIFD.getStripOrTileOffsetsPosition();
  this.totalPixels=tileWidth * tileLength * tilesDown* tilesAcross;
  this.pixelsDone=0;
  for (int tj=0; tj < tilesDown; tj++) {
    for (int ti=0; ti < tilesAcross; ti++) {
      long pos=stream.getStreamPosition();
      Rectangle tileRect=new Rectangle(sourceXOffset + ti * tileWidth * periodX,sourceYOffset + tj * tileLength * periodY,tileWidth * periodX,tileLength * periodY);
      try {
        int byteCount=writeTile(tileRect,compressor);
        if (pos + byteCount > nextSpace) {
          nextSpace=pos + byteCount;
        }
        pixelsDone+=tileRect.width * tileRect.height;
        processImageProgress(100.0F * pixelsDone / totalPixels);
        stream.mark();
        stream.seek(stripOrTileOffsetsPosition);
        if (!isBtiff) {
          stream.writeInt((int)pos);
          stripOrTileOffsetsPosition+=4;
          stream.seek(stripOrTileByteCountsPosition);
          stream.writeInt(byteCount);
          stripOrTileByteCountsPosition+=4;
        }
 else {
          stream.writeLong(pos);
          stripOrTileOffsetsPosition+=8;
          stream.seek(stripOrTileByteCountsPosition);
          stream.writeLong(byteCount);
          stripOrTileByteCountsPosition+=8;
        }
        stream.reset();
      }
 catch (      IOException e) {
        throw new IIOException(""String_Node_Str"",e);
      }
      if (abortRequested()) {
        processWriteAborted();
        return;
      }
    }
  }
  processImageComplete();
}",0.9957977307746184
187107,"/** 
 * Sets the input for the specialized reader.
 * @throws IllegalArgumentException if the provided input is <code>null</code>
 */
public void setInput(Object input,boolean seekForwardOnly,boolean ignoreMetadata){
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine(""String_Node_Str"");
  if (this.imageInputStream != null) {
    reset();
    imageInputStream=null;
  }
  if (input == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (input instanceof File) {
    datasetSource=(File)input;
    try {
      imageInputStream=ImageIO.createImageInputStream(input);
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else   if (input instanceof FileImageInputStreamExt) {
    datasetSource=((FileImageInputStreamExt)input).getFile();
    imageInputStream=(ImageInputStream)input;
  }
 else   if (input instanceof URL) {
    final URL tempURL=(URL)input;
    if (tempURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        datasetSource=new File(URLDecoder.decode(tempURL.getFile(),""String_Node_Str""));
        imageInputStream=ImageIO.createImageInputStream(input);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
 else   if (input instanceof URIImageInputStream) {
    imageInputStream=(URIImageInputStream)input;
    datasetSource=null;
    uriSource=((URIImageInputStream)input).getUri();
  }
  boolean isInputDecodable=false;
  if (imageInputStream != null) {
    Dataset dataSet=null;
    if (datasetSource != null) {
      dataSet=GDALUtilities.acquireDataSet(datasetSource.getAbsolutePath(),gdalconstConstants.GA_ReadOnly);
    }
 else     if (uriSource != null) {
      final String urisource=uriSource.toString();
      dataSet=GDALUtilities.acquireDataSet(urisource,gdalconstConstants.GA_ReadOnly);
    }
    if (dataSet != null) {
      isInputDecodable=((GDALImageReaderSpi)this.getOriginatingProvider()).isDecodable(dataSet);
      GDALUtilities.closeDataSet(dataSet);
    }
 else     isInputDecodable=false;
  }
  if (isInputDecodable)   super.setInput(imageInputStream,seekForwardOnly,ignoreMetadata);
 else {
    StringBuilder sb=new StringBuilder();
    if (imageInputStream == null) {
      sb.append(""String_Node_Str"");
      sb.append(GDALUtilities.NEWLINE);
      sb.append(input.toString());
    }
 else     sb.append(""String_Node_Str"");
    throw new RuntimeException(sb.toString());
  }
}","/** 
 * Sets the input for the specialized reader.
 * @throws IllegalArgumentException if the provided input is <code>null</code>
 */
public void setInput(Object input,boolean seekForwardOnly,boolean ignoreMetadata){
  if (LOGGER.isLoggable(Level.FINE))   LOGGER.fine(""String_Node_Str"");
  if (this.imageInputStream != null) {
    reset();
    imageInputStream=null;
  }
  if (input == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (input instanceof File) {
    datasetSource=(File)input;
    try {
      imageInputStream=ImageIO.createImageInputStream(input);
    }
 catch (    IOException e) {
      throw new RuntimeException(""String_Node_Str"",e);
    }
  }
 else   if (input instanceof FileImageInputStreamExt) {
    datasetSource=((FileImageInputStreamExt)input).getFile();
    imageInputStream=(ImageInputStream)input;
  }
 else   if (input instanceof URL) {
    final URL tempURL=(URL)input;
    if (tempURL.getProtocol().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        datasetSource=Utilities.urlToFile(tempURL);
        imageInputStream=ImageIO.createImageInputStream(input);
      }
 catch (      IOException e) {
        throw new RuntimeException(""String_Node_Str"",e);
      }
    }
  }
 else   if (input instanceof URIImageInputStream) {
    imageInputStream=(URIImageInputStream)input;
    datasetSource=null;
    uriSource=((URIImageInputStream)input).getUri();
  }
  boolean isInputDecodable=false;
  if (imageInputStream != null) {
    Dataset dataSet=null;
    if (datasetSource != null) {
      dataSet=GDALUtilities.acquireDataSet(datasetSource.getAbsolutePath(),gdalconstConstants.GA_ReadOnly);
    }
 else     if (uriSource != null) {
      final String urisource=uriSource.toString();
      dataSet=GDALUtilities.acquireDataSet(urisource,gdalconstConstants.GA_ReadOnly);
    }
    if (dataSet != null) {
      isInputDecodable=((GDALImageReaderSpi)this.getOriginatingProvider()).isDecodable(dataSet);
      GDALUtilities.closeDataSet(dataSet);
    }
 else     isInputDecodable=false;
  }
  if (isInputDecodable)   super.setInput(imageInputStream,seekForwardOnly,ignoreMetadata);
 else {
    StringBuilder sb=new StringBuilder();
    if (imageInputStream == null) {
      sb.append(""String_Node_Str"");
      sb.append(GDALUtilities.NEWLINE);
      sb.append(input.toString());
    }
 else     sb.append(""String_Node_Str"");
    throw new RuntimeException(sb.toString());
  }
}",0.9848856209150328
187108,"/** 
 * This is a small utility method used to build an ImageInputStream from a URL.
 * @param url URL to be used in order to build an ImageInputStream.
 * @return The built ImageInputStream.
 * @throws IOException In case an IOError occurs.
 * @throws UnsupportedEncodingException In case hte URL is encoded with an unsupported encoding.
 * @throws FileNotFoundException In case the url points to a file but the provided path is invalid.
 */
static ImageInputStream checkURL(final URL url) throws FileNotFoundException, UnsupportedEncodingException, IOException {
  ensureNotNull(""String_Node_Str"",url);
  final String protocol=url.getProtocol();
  if (protocol.equalsIgnoreCase(""String_Node_Str""))   return new FileImageInputStream(new File(URLDecoder.decode(url.getFile(),""String_Node_Str"")));
 else   if (protocol.equalsIgnoreCase(""String_Node_Str""))   return new MemoryCacheImageInputStream(url.openStream());
  return null;
}","/** 
 * This is a small utility method used to build an ImageInputStream from a URL.
 * @param url URL to be used in order to build an ImageInputStream.
 * @return The built ImageInputStream.
 * @throws IOException In case an IOError occurs.
 * @throws UnsupportedEncodingException In case hte URL is encoded with an unsupported encoding.
 * @throws FileNotFoundException In case the url points to a file but the provided path is invalid.
 */
static ImageInputStream checkURL(final URL url) throws FileNotFoundException, UnsupportedEncodingException, IOException {
  ensureNotNull(""String_Node_Str"",url);
  final String protocol=url.getProtocol();
  if (protocol.equalsIgnoreCase(""String_Node_Str""))   return new FileImageInputStream(Utilities.urlToFile(url));
 else   if (protocol.equalsIgnoreCase(""String_Node_Str""))   return new MemoryCacheImageInputStream(url.openStream());
  return null;
}",0.9145673603504928
187109,"@Test public void testGrib() throws FileNotFoundException, IOException {
  GribFile gribFile1=null;
  final File test_dir=TestData.file(GriBTest.class,""String_Node_Str"");
  final File files[]=test_dir.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (!new File(dir.getAbsolutePath() + File.separator + name).isDirectory() && (name.toLowerCase().endsWith(""String_Node_Str"") || name.toLowerCase().endsWith(""String_Node_Str"")))       return true;
      return false;
    }
  }
);
  final int length=files.length;
  for (int i=0; i < length; i++) {
    final StringBuilder buffer=new StringBuilder(""String_Node_Str"").append(files[i]).append(""String_Node_Str"");
    gribFile=GribFile.open(files[i],AccessType.R);
    gribFile.parseGribFile();
    final GribFile file=GribFile.open(null,AccessType.RW);
    final int recordCount=gribFile.getRecordCount();
    buffer.append(""String_Node_Str"").append(recordCount).append(""String_Node_Str"");
    LOGGER.info(buffer.toString());
    for (int j=1; j <= recordCount; j++) {
      LOGGER.info(""String_Node_Str"" + j);
      final GribRecord oldRecord=gribFile.getRecord(j);
      Assert.assertNotNull((oldRecord));
      final GribRecord record=new GribRecord();
      final GribRecordPDS oldPDS=oldRecord.getPDS();
      record.setPDS(new GribRecordPDS(oldPDS.getTableVersion(),oldPDS.getOriginatingCenterID(),oldPDS.getGeneratingProcessID(),oldPDS.getGridID(),true,oldPDS.bmsExists(),oldPDS.getParameter().getNumber(),oldPDS.getLevel().getIndex(),oldPDS.getLevel().getValue1(),oldPDS.getLevel().getValue2(),oldPDS.getGMTBaseTime(),oldPDS.getForecastTimeUnit(),oldPDS.getP1(),oldPDS.getP2(),oldPDS.getTimeRangeIndicator(),0,0,oldPDS.getSubcenterID(),oldPDS.getDecimalScale()));
      Assert.assertTrue(record.getPDS().equals(gribFile.getRecord(j).getPDS()));
      final GribRecordGDS oldGDS=oldRecord.getGDS();
      final GribRecordGDS gds=GribGDSFactory.getGDS(oldGDS.getGridType());
      gds.setGridType(oldGDS.getGridType());
      gds.setGridMode(oldGDS.getGridMode());
      gds.setLength(oldGDS.getLength());
      gds.setGridNX(oldGDS.getGridNX());
      gds.setGridNY(oldGDS.getGridNY());
      gds.setGridLat2(oldGDS.getGridLat2());
      gds.setGridLat1(oldGDS.getGridLat1());
      gds.setGridLon1(oldGDS.getGridLon1());
      gds.setGridLon2(oldGDS.getGridLon2());
      gds.setGridScanmode(oldGDS.getGridDX() > 0,oldGDS.getGridDY() > 0,oldGDS.isAdiacent_i_Or_j());
      gds.setGridDX(oldGDS.getGridDX());
      gds.setGridDY(oldGDS.getGridDY());
      gds.setGridMode(oldGDS.getGridMode());
      gds.setGridLatSP(oldGDS.getGridLatSP());
      gds.setGridLonSP(oldGDS.getGridLonSP());
      gds.setGridRotAngle(oldGDS.getGridRotAngle());
switch (oldGDS.getGridType()) {
case GribGDSRotatedLatLon.ROTATED_LATLON_GRID_TYPE:
        ((GribGDSRotatedLatLon)gds).setGridLatSPST(((GribGDSRotatedLatLon)oldGDS).getGridLatSPST());
      ((GribGDSRotatedLatLon)gds).setGridLonSPST(((GribGDSRotatedLatLon)oldGDS).getGridLonSPST());
    ((GribGDSRotatedLatLon)gds).setGridStretchingFactor(((GribGDSRotatedLatLon)oldGDS).getGridStretchingFactor());
  break;
case GribGDSPolarStereo.POLAR_STEREO_GRID_TYPE:
break;
case GribGDSLambert.LAMBERT_GRID_TYPE:
((GribGDSLambert)gds).setGridLatin1(((GribGDSLambert)oldGDS).getGridLatin1());
((GribGDSLambert)gds).setGridLatin2(((GribGDSLambert)oldGDS).getGridLatin2());
((GribGDSLambert)gds).setProjCenter(((GribGDSLambert)oldGDS).getProjCenter());
((GribGDSLambert)gds).setRhoRef(((GribGDSLambert)oldGDS).getRhoRef());
break;
default :
break;
}
record.setGDS(gds);
Assert.assertTrue(record.getGDS().equals(oldGDS));
final GribRecordBMS oldBMS=gribFile.getRecord(j).getBMS();
if (oldPDS.bmsExists()) {
record.setBMS(new GribRecordBMS(oldBMS.getBitmap()));
Assert.assertTrue(record.getBMS().equals(oldBMS));
}
final GribRecordBDS oldBDS=oldRecord.getBDS();
record.setBDS(new GribRecordBDS(oldPDS.getDecimalScale(),oldBDS.getNumBits(),oldBDS.getValues(),oldBDS.getIsConstant(),oldBDS.getMaxValue(),oldBDS.getMinValue(),oldBDS.getNumValidValues(),oldGDS,oldBMS));
Assert.assertTrue(""String_Node_Str"",record.getBDS().equals(gribFile.getRecord(j).getBDS()));
final GribRecordIS oldIS=oldRecord.getIS();
record.setIS(new GribRecordIS(oldIS.getGribEdition(),oldPDS.getLength(),oldGDS.getLength(),oldBMS == null ? 0 : oldBMS.getLength(),oldBDS.getLength()));
file.addRecord(record);
}
Assert.assertTrue(file.equals(gribFile));
final File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
tempFile.deleteOnExit();
final BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(tempFile),4096);
file.writeTo(out);
out.flush();
out.close();
gribFile1=GribFile.open(tempFile,AccessType.R);
gribFile1.parseGribFile();
if (!gribFile1.equals(gribFile)) {
LOGGER.severe(""String_Node_Str"" + files[i].getName());
throw new RuntimeException(""String_Node_Str"" + files[i].getName());
}
gribFile1.dispose();
gribFile1=null;
gribFile.dispose();
gribFile=null;
}
}","@Test public void testGrib() throws FileNotFoundException, IOException {
  GribFile gribFile1=null;
  final File test_dir=new File(""String_Node_Str"");
  final File files[]=test_dir.listFiles(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      if (!new File(dir.getAbsolutePath() + File.separator + name).isDirectory() && (name.toLowerCase().endsWith(""String_Node_Str"") || name.toLowerCase().endsWith(""String_Node_Str"")))       return true;
      return false;
    }
  }
);
  final int length=files.length;
  for (int i=0; i < length; i++) {
    final StringBuilder buffer=new StringBuilder(""String_Node_Str"").append(files[i]).append(""String_Node_Str"");
    gribFile=GribFile.open(files[i],AccessType.R);
    gribFile.parseGribFile();
    final GribFile file=GribFile.open(null,AccessType.RW);
    final int recordCount=gribFile.getRecordCount();
    buffer.append(""String_Node_Str"").append(recordCount).append(""String_Node_Str"");
    LOGGER.info(buffer.toString());
    for (int j=1; j <= recordCount; j++) {
      LOGGER.info(""String_Node_Str"" + j);
      final GribRecord oldRecord=gribFile.getRecord(j);
      Assert.assertNotNull((oldRecord));
      final GribRecord record=new GribRecord();
      final GribRecordPDS oldPDS=oldRecord.getPDS();
      record.setPDS(new GribRecordPDS(oldPDS.getTableVersion(),oldPDS.getOriginatingCenterID(),oldPDS.getGeneratingProcessID(),oldPDS.getGridID(),true,oldPDS.bmsExists(),oldPDS.getParameter().getNumber(),oldPDS.getLevel().getIndex(),oldPDS.getLevel().getValue1(),oldPDS.getLevel().getValue2(),oldPDS.getGMTBaseTime(),oldPDS.getForecastTimeUnit(),oldPDS.getP1(),oldPDS.getP2(),oldPDS.getTimeRangeIndicator(),0,0,oldPDS.getSubcenterID(),oldPDS.getDecimalScale()));
      Assert.assertTrue(record.getPDS().equals(gribFile.getRecord(j).getPDS()));
      final GribRecordGDS oldGDS=oldRecord.getGDS();
      final GribRecordGDS gds=GribGDSFactory.getGDS(oldGDS.getGridType());
      gds.setGridType(oldGDS.getGridType());
      gds.setGridMode(oldGDS.getGridMode());
      gds.setLength(oldGDS.getLength());
      gds.setGridNX(oldGDS.getGridNX());
      gds.setGridNY(oldGDS.getGridNY());
      gds.setGridLat2(oldGDS.getGridLat2());
      gds.setGridLat1(oldGDS.getGridLat1());
      gds.setGridLon1(oldGDS.getGridLon1());
      gds.setGridLon2(oldGDS.getGridLon2());
      gds.setGridScanmode(oldGDS.getGridDX() > 0,oldGDS.getGridDY() > 0,oldGDS.isAdiacent_i_Or_j());
      gds.setGridDX(oldGDS.getGridDX());
      gds.setGridDY(oldGDS.getGridDY());
      gds.setGridMode(oldGDS.getGridMode());
      gds.setGridLatSP(oldGDS.getGridLatSP());
      gds.setGridLonSP(oldGDS.getGridLonSP());
      gds.setGridRotAngle(oldGDS.getGridRotAngle());
switch (oldGDS.getGridType()) {
case GribGDSRotatedLatLon.ROTATED_LATLON_GRID_TYPE:
        ((GribGDSRotatedLatLon)gds).setGridLatSPST(((GribGDSRotatedLatLon)oldGDS).getGridLatSPST());
      ((GribGDSRotatedLatLon)gds).setGridLonSPST(((GribGDSRotatedLatLon)oldGDS).getGridLonSPST());
    ((GribGDSRotatedLatLon)gds).setGridStretchingFactor(((GribGDSRotatedLatLon)oldGDS).getGridStretchingFactor());
  break;
case GribGDSPolarStereo.POLAR_STEREO_GRID_TYPE:
break;
case GribGDSLambert.LAMBERT_GRID_TYPE:
((GribGDSLambert)gds).setGridLatin1(((GribGDSLambert)oldGDS).getGridLatin1());
((GribGDSLambert)gds).setGridLatin2(((GribGDSLambert)oldGDS).getGridLatin2());
((GribGDSLambert)gds).setProjCenter(((GribGDSLambert)oldGDS).getProjCenter());
((GribGDSLambert)gds).setRhoRef(((GribGDSLambert)oldGDS).getRhoRef());
break;
default :
break;
}
record.setGDS(gds);
Assert.assertTrue(record.getGDS().equals(oldGDS));
final GribRecordBMS oldBMS=gribFile.getRecord(j).getBMS();
if (oldPDS.bmsExists()) {
record.setBMS(new GribRecordBMS(oldBMS.getBitmap()));
Assert.assertTrue(record.getBMS().equals(oldBMS));
}
final GribRecordBDS oldBDS=oldRecord.getBDS();
record.setBDS(new GribRecordBDS(oldPDS.getDecimalScale(),oldBDS.getNumBits(),oldBDS.getValues(),oldBDS.getIsConstant(),oldBDS.getMaxValue(),oldBDS.getMinValue(),oldBDS.getNumValidValues(),oldGDS,oldBMS));
Assert.assertTrue(""String_Node_Str"",record.getBDS().equals(gribFile.getRecord(j).getBDS()));
final GribRecordIS oldIS=oldRecord.getIS();
record.setIS(new GribRecordIS(oldIS.getGribEdition(),oldPDS.getLength(),oldGDS.getLength(),oldBMS == null ? 0 : oldBMS.getLength(),oldBDS.getLength()));
file.addRecord(record);
}
Assert.assertTrue(file.equals(gribFile));
final File tempFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
tempFile.deleteOnExit();
final BufferedOutputStream out=new BufferedOutputStream(new FileOutputStream(tempFile),4096);
file.writeTo(out);
out.flush();
out.close();
gribFile1=GribFile.open(tempFile,AccessType.R);
gribFile1.parseGribFile();
if (!gribFile1.equals(gribFile)) {
LOGGER.severe(""String_Node_Str"" + files[i].getName());
throw new RuntimeException(""String_Node_Str"" + files[i].getName());
}
gribFile1.dispose();
gribFile1=null;
gribFile.dispose();
gribFile=null;
}
}",0.996194672541558
187110,"/** 
 * Allows to customize kakadu error management.
 * @param errorManagement
 */
public final static void setKakaduInputErrorManagement(final int errorManagement){
switch (errorManagement) {
case KakaduErrorManagement.FAST:
    gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
  break;
case KakaduErrorManagement.FUSSY:
gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
break;
case KakaduErrorManagement.RESILIENT:
gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + errorManagement);
}
}","/** 
 * Allows to customize kakadu error management.
 * @param errorManagement
 */
public final static void setKakaduInputErrorManagement(final KakaduErrorManagementType errorManagement){
switch (errorManagement) {
case FAST:
    gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
  break;
case FUSSY:
gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
break;
case RESILIENT:
gdal.SetConfigOption(""String_Node_Str"",""String_Node_Str"");
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + errorManagement);
}
}",0.9169611307420494
187111,"protected void setUp() throws Exception {
  super.setUp();
}","protected void setUp() throws Exception {
  super.setUp();
  JAI.getDefaultInstance().getTileScheduler().setParallelism(2);
  JAI.getDefaultInstance().getTileScheduler().setPriority(6);
  JAI.getDefaultInstance().getTileScheduler().setPrefetchPriority(2);
  JAI.getDefaultInstance().getTileScheduler().setPrefetchParallelism(1);
  JAI.getDefaultInstance().getTileCache().setMemoryCapacity(64 * 1024 * 1024);
  JAI.getDefaultInstance().getTileCache().setMemoryThreshold(1.0f);
}",0.2234636871508379
187112,"public void testBoxInfo() throws IOException {
  File file=new File(fileName);
  if (!file.exists()) {
    file=TestData.file(this,fileName);
  }
  JP2KKakaduImageReader reader=new JP2KKakaduImageReader(new JP2KKakaduImageReaderSpi());
  reader.setInput(file);
  IIOMetadata imageMetadata=reader.getImageMetadata(0);
  IIOMetadata streamMetadata=reader.getStreamMetadata();
  reader.dispose();
  if (TestData.isInteractiveTest()) {
    if (imageMetadata != null)     displayImageIOMetadata(imageMetadata.getAsTree(JP2KImageMetadata.nativeMetadataFormatName));
    if (streamMetadata != null)     displayImageIOMetadata(streamMetadata.getAsTree(JP2KStreamMetadata.nativeMetadataFormatName));
  }
}","public void testBoxInfo() throws IOException {
  if (!runTests)   return;
  File file=new File(fileName);
  if (!file.exists()) {
    file=TestData.file(this,fileName);
  }
  JP2KKakaduImageReader reader=new JP2KKakaduImageReader(new JP2KKakaduImageReaderSpi());
  reader.setInput(file);
  IIOMetadata imageMetadata=reader.getImageMetadata(0);
  IIOMetadata streamMetadata=reader.getStreamMetadata();
  reader.dispose();
  if (TestData.isInteractiveTest()) {
    if (imageMetadata != null)     displayImageIOMetadata(imageMetadata.getAsTree(JP2KImageMetadata.nativeMetadataFormatName));
    if (streamMetadata != null)     displayImageIOMetadata(streamMetadata.getAsTree(JP2KStreamMetadata.nativeMetadataFormatName));
  }
}",0.9809725158562368
187113,"public static void main(java.lang.String[] args){
  junit.textui.TestRunner.run(suite());
}","public static void main(java.lang.String[] args){
  if (!runTests)   return;
  junit.textui.TestRunner.run(suite());
}",0.8708133971291866
187114,"/** 
 * Test Read without exploiting JAI-ImageIO Tools
 * @throws IOException
 */
public void testManualRead() throws IOException {
  final File file=TestData.file(this,""String_Node_Str"");
  JP2KKakaduImageReader reader=new JP2KKakaduImageReader(new JP2KKakaduImageReaderSpi());
  reader.setInput(file);
  ImageReadParam param=new ImageReadParam();
  param.setSourceSubsampling(4,4,0,0);
  RenderedImage image=reader.read(0,param);
  if (TestData.isInteractiveTest())   visualize(image,""String_Node_Str"");
 else   assertNotNull(image.getData());
}","/** 
 * Test Read without exploiting JAI-ImageIO Tools
 * @throws IOException
 */
public void testManualRead() throws IOException {
  if (!runTests)   return;
  final File file=TestData.file(this,""String_Node_Str"");
  JP2KKakaduImageReader reader=new JP2KKakaduImageReader(new JP2KKakaduImageReaderSpi());
  reader.setInput(file);
  RenderedImage image=reader.read(0);
  if (TestData.isInteractiveTest())   ImageIOUtilities.visualize(image,""String_Node_Str"");
 else   assertNotNull(image.getData());
  assertEquals(361,image.getWidth());
  assertEquals(488,image.getHeight());
}",0.6951111111111111
187115,"public static void main(java.lang.String[] args){
  junit.textui.TestRunner.run(suite());
}","public static void main(java.lang.String[] args){
  if (!runTests)   return;
  junit.textui.TestRunner.run(suite());
}",0.8708133971291866
187116,"public void testJaiReadFromFile() throws IOException {
  final File file=TestData.file(this,""String_Node_Str"");
  ImageReadDescriptorMT.register(JAI.getDefaultInstance());
  final ParameterBlockJAI pbjImageRead=new ParameterBlockJAI(""String_Node_Str"");
  ImageLayout l=new ImageLayout();
  l.setTileHeight(256);
  l.setTileWidth(256);
  ImageReadParam rp=new JP2KKakaduImageReadParam();
  rp.setSourceSubsampling(1,1,0,0);
  pbjImageRead.setParameter(""String_Node_Str"",rp);
  pbjImageRead.setParameter(""String_Node_Str"",file);
  pbjImageRead.setParameter(""String_Node_Str"",0);
  RenderedOp image=JAI.create(""String_Node_Str"",pbjImageRead,new RenderingHints(JAI.KEY_IMAGE_LAYOUT,l));
  if (TestData.isInteractiveTest())   visualize(image,800,600);
 else   assertNotNull(image.getTiles());
}","public void testJaiReadFromFile() throws IOException {
  if (!runTests)   return;
  final File file=TestData.file(this,""String_Node_Str"");
  ImageReadDescriptorMT.register(JAI.getDefaultInstance());
  final ParameterBlockJAI pbjImageRead=new ParameterBlockJAI(""String_Node_Str"");
  ImageLayout l=new ImageLayout();
  l.setTileHeight(256);
  l.setTileWidth(256);
  ImageReadParam rp=new JP2KKakaduImageReadParam();
  rp.setSourceSubsampling(1,1,0,0);
  pbjImageRead.setParameter(""String_Node_Str"",rp);
  pbjImageRead.setParameter(""String_Node_Str"",file);
  pbjImageRead.setParameter(""String_Node_Str"",0);
  RenderedOp image=JAI.create(""String_Node_Str"",pbjImageRead,new RenderingHints(JAI.KEY_IMAGE_LAYOUT,l));
  if (TestData.isInteractiveTest())   ImageIOUtilities.visualize(image);
 else   assertNotNull(image.getTiles());
}",0.9677819083023544
187117,"/** 
 * Constructs a   {@link FileImageInputStreamExtImpl} that will read from agiven  {@link File}. <p> The eraf contents must not change between the time this object is constructed and the time of the last call to a read method.
 * @param f a  {@link File} to read from.
 * @param bufferSize size of the underlying buffer.
 * @exception NullPointerException if <code>f</code> is <code>null</code>.
 * @exception SecurityException if a security manager exists and does not allow read access to the eraf.
 * @exception FileNotFoundException if <code>f</code> is a directory or cannot be opened for reading for any other reason.
 * @exception IOException if an I/O error occurs.
 */
public FileImageInputStreamExtImpl(File f,int bufferSize) throws FileNotFoundException, IOException {
  if (f == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  if (!f.exists() || f.isDirectory() || !f.canRead()) {
    final StringBuilder buff=new StringBuilder(""String_Node_Str"");
    buff.append(""String_Node_Str"").append(f.exists()).append(""String_Node_Str"");
    buff.append(""String_Node_Str"").append(f.isDirectory()).append(""String_Node_Str"");
    buff.append(""String_Node_Str"").append(f.canRead()).append(""String_Node_Str"");
    throw new IllegalArgumentException(buff.toString());
  }
  this.file=f;
  this.eraf=bufferSize <= 0 ? new EnhancedRandomAccessFile(f,""String_Node_Str"") : new EnhancedRandomAccessFile(f,""String_Node_Str"",bufferSize);
  this.eraf.setByteOrder(ByteOrder.BIG_ENDIAN);
}","/** 
 * Constructs a   {@link FileImageInputStreamExtImpl} that will read from agiven  {@link File}. <p> The eraf contents must not change between the time this object is constructed and the time of the last call to a read method.
 * @param f a  {@link File} to read from.
 * @param bufferSize size of the underlying buffer.
 * @exception NullPointerException if <code>f</code> is <code>null</code>.
 * @exception SecurityException if a security manager exists and does not allow read access to the eraf.
 * @exception FileNotFoundException if <code>f</code> is a directory or cannot be opened for reading for any other reason.
 * @exception IOException if an I/O error occurs.
 */
public FileImageInputStreamExtImpl(File f,int bufferSize) throws FileNotFoundException, IOException {
  if (f == null) {
    throw new NullPointerException(""String_Node_Str"");
  }
  final StringBuilder buff=new StringBuilder(""String_Node_Str"");
  if (!f.exists() || f.isDirectory()) {
    buff.append(""String_Node_Str"").append(f.exists()).append(""String_Node_Str"");
    buff.append(""String_Node_Str"").append(f.isDirectory()).append(""String_Node_Str"");
    throw new FileNotFoundException(buff.toString());
  }
  if (!f.exists() || f.isDirectory() || !f.canRead()) {
    buff.append(""String_Node_Str"").append(f.canRead()).append(""String_Node_Str"");
    throw new IOException(buff.toString());
  }
  this.file=f;
  this.eraf=bufferSize <= 0 ? new EnhancedRandomAccessFile(f,""String_Node_Str"") : new EnhancedRandomAccessFile(f,""String_Node_Str"",bufferSize);
  this.eraf.setByteOrder(ByteOrder.BIG_ENDIAN);
}",0.7581741663968922
187118,"/** 
 * Return attribute values as a <code>String</code>.
 * @return a <code>String</code> containing attribute values.
 */
public String getValuesAsString(){
  if (values != null)   return H4DatatypeUtilities.getValuesAsString(datatype,values);
 else   return ""String_Node_Str"";
}","/** 
 * Return attribute values as a <code>String</code>.
 * @return a <code>String</code> containing attribute values.
 */
public String getValuesAsString() throws HDFException {
  return H4DatatypeUtilities.getValuesAsString(datatype,getValues());
}",0.8233082706766918
187119,"private H4SDS(H4SDSCollection h4SdsCollection,int index,int identifier) throws HDFException {
  h4SDSCollectionOwner=h4SdsCollection;
  this.index=index;
  this.identifier=identifier;
  isOpened=true;
}","private H4SDS(H4SDSCollection h4SdsCollection,int index,int identifier) throws HDFException {
  h4SDSCollectionOwner=h4SdsCollection;
  this.index=index;
  this.identifier=identifier;
  init();
  isOpened=true;
}",0.9758454106280192
187120,"/** 
 * CSonstructor which builds and initialize a <code>H4SDSCollection</code> given an input   {@link H4File}.
 * @param h4file the input  {@link H4File}
 */
public H4SDSCollection(H4File h4file){
  this.h4File=h4file;
  final String filePath=h4file.getFilePath();
  try {
    identifier=HDFLibrary.SDstart(filePath,HDFConstants.DFACC_RDONLY | HDFConstants.DFACC_PARALLEL);
    if (identifier != HDFConstants.FAIL) {
      final int[] sdsFileInfo=new int[2];
      if (HDFLibrary.SDfileinfo(identifier,sdsFileInfo)) {
        numAttributes=sdsFileInfo[1];
        initDecorated();
        final int sdsTotalNum=sdsFileInfo[0];
        sdsList=new ArrayList(sdsTotalNum);
        sdsNamesToIndexes=Collections.synchronizedMap(new HashMap(sdsTotalNum));
        for (int i=0; i < sdsTotalNum; i++) {
          H4SDS candidateSds=H4SDS.buildH4SDS(this,i);
          if (candidateSds != null) {
            sdsList.add(numSDS,candidateSds);
            final String name=candidateSds.getName();
            sdsNamesToIndexes.put(name,new Integer(numSDS));
            numSDS++;
            candidateSds.close();
          }
        }
      }
    }
 else {
    }
  }
 catch (  HDFException e) {
    throw new RuntimeException(""String_Node_Str"" + h4file.getFilePath(),e);
  }
}","/** 
 * Constructor which builds and initialize a <code>H4SDSCollection</code> given an input   {@link H4File}.
 * @param h4file the input  {@link H4File}
 */
public H4SDSCollection(H4File h4file){
  this.h4File=h4file;
  final String filePath=h4file.getFilePath();
  try {
    identifier=HDFLibrary.SDstart(filePath,HDFConstants.DFACC_RDONLY | HDFConstants.DFACC_PARALLEL);
    if (identifier != HDFConstants.FAIL) {
      final int[] sdsFileInfo=new int[2];
      if (HDFLibrary.SDfileinfo(identifier,sdsFileInfo)) {
        numAttributes=sdsFileInfo[1];
        initDecorated();
        final int sdsTotalNum=sdsFileInfo[0];
        sdsList=new ArrayList(sdsTotalNum);
        sdsNamesToIndexes=Collections.synchronizedMap(new HashMap(sdsTotalNum));
        for (int i=0; i < sdsTotalNum; i++) {
          H4SDS candidateSds=H4SDS.buildH4SDS(this,i);
          if (candidateSds != null) {
            sdsList.add(numSDS,candidateSds);
            final String name=candidateSds.getName();
            sdsNamesToIndexes.put(name,new Integer(numSDS));
            numSDS++;
            candidateSds.close();
          }
        }
      }
    }
 else {
    }
  }
 catch (  HDFException e) {
    throw new RuntimeException(""String_Node_Str"" + h4file.getFilePath(),e);
  }
}",0.999607072691552
187121,"private static void visualizeWithTextArea(RenderedImage ri,String title,final int textFields,final int index,final boolean displayImage){
  StringBuffer sb=new StringBuffer();
switch (textFields) {
case TextType.ONLY_IMAGE_METADATA:
    sb.append(""String_Node_Str"").append(title);
  break;
case TextType.ONLY_STREAM_METADATA:
sb.append(""String_Node_Str"");
break;
case TextType.STREAM_AND_IMAGE_METADATA:
sb.append(""String_Node_Str"").append(title);
break;
case TextType.PROJECT_AND_GEOTRANSF:
sb.append(""String_Node_Str"").append(title);
break;
case TextType.EVERYTHING:
sb.append(""String_Node_Str"").append(title);
break;
}
final JFrame frame=new JFrame(title);
frame.getContentPane().setLayout(new BorderLayout());
String textPosition=BorderLayout.PAGE_START;
if (displayImage) {
frame.getContentPane().add(new ScrollingImagePanel(ri,1024,768));
textPosition=BorderLayout.LINE_START;
}
JLabel label=new JLabel(sb.toString());
frame.getContentPane().add(label,textPosition);
JTextArea textArea=new JTextArea();
if (textFields == TextType.PROJECT_AND_GEOTRANSF) textArea.setText(buildCRSProperties(ri,index));
 else if (textFields != TextType.EVERYTHING) textArea.setText(buildMetadataText(ri,textFields,index));
 else textArea.setText(new StringBuffer(buildMetadataText(ri,textFields,index).toString()).append(newLine).append(buildCRSProperties(ri,index)).toString());
textArea.setEditable(false);
frame.getContentPane().add(textArea);
frame.getContentPane().add(new JScrollPane(textArea),BorderLayout.PAGE_END);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
SwingUtilities.invokeLater(new Runnable(){
public void run(){
frame.pack();
frame.setSize(1024,768);
frame.setVisible(true);
}
}
);
}","private static void visualizeWithTextArea(RenderedImage ri,String title,final int textFields,final int index,final boolean displayImage){
  StringBuffer sb=new StringBuffer();
switch (textFields) {
case TextType.ONLY_IMAGE_METADATA:
    sb.append(""String_Node_Str"").append(title);
  break;
case TextType.ONLY_STREAM_METADATA:
sb.append(""String_Node_Str"");
break;
case TextType.STREAM_AND_IMAGE_METADATA:
sb.append(""String_Node_Str"").append(title);
break;
case TextType.PROJECT_AND_GEOTRANSF:
sb.append(""String_Node_Str"").append(title);
break;
case TextType.EVERYTHING:
sb.append(""String_Node_Str"").append(title);
break;
}
final JFrame frame=new JFrame(title);
frame.getContentPane().setLayout(new BorderLayout());
String textPosition=BorderLayout.PAGE_START;
if (displayImage) {
frame.getContentPane().add(new ScrollingImagePanel(ri,640,480));
textPosition=BorderLayout.LINE_START;
}
JLabel label=new JLabel(sb.toString());
frame.getContentPane().add(label,textPosition);
JTextArea textArea=new JTextArea();
if (textFields == TextType.PROJECT_AND_GEOTRANSF) textArea.setText(buildCRSProperties(ri,index));
 else if (textFields != TextType.EVERYTHING) textArea.setText(buildMetadataText(ri,textFields,index));
 else textArea.setText(new StringBuffer(buildMetadataText(ri,textFields,index).toString()).append(newLine).append(buildCRSProperties(ri,index)).toString());
textArea.setEditable(false);
frame.getContentPane().add(textArea);
frame.getContentPane().add(new JScrollPane(textArea),BorderLayout.PAGE_END);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
SwingUtilities.invokeLater(new Runnable(){
public void run(){
frame.pack();
frame.setSize(1024,768);
frame.setVisible(true);
}
}
);
}",0.5001472754050074
187122,"protected void setUp() throws Exception {
  super.setUp();
}","/** 
 * @see junit.framework.TestCase#setUp()
 */
protected void setUp() throws Exception {
  super.setUp();
}",0.7058823529411765
187123,"protected void tearDown() throws Exception {
  super.tearDown();
}","/** 
 * @see junit.framework.TestCase#tearDown()
 */
protected void tearDown() throws Exception {
  super.tearDown();
}",0.7135135135135136
187124,"private boolean handleFile(File tempFile){
  File appendedFile=null;
  File actualFile=new File(tempFile.getPath().substring(0,tempFile.getPath().lastIndexOf(""String_Node_Str"")));
  Timber.d(""String_Node_Str"" + actualFile.getAbsolutePath());
  long fileSize=0;
  if (tempFile.getName().contains(scal.io.liger.Constants.MAIN)) {
    fileSize=indexItem.getExpansionFileSize();
  }
 else   if (tempFile.getName().contains(scal.io.liger.Constants.PATCH)) {
    fileSize=indexItem.getPatchFileSize();
  }
 else {
    Timber.e(""String_Node_Str"" + tempFile.getName() + ""String_Node_Str"");
    return false;
  }
  if (tempFile.exists()) {
    if (tempFile.length() == 0) {
      Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
      return false;
    }
 else     if (tempFile.length() < fileSize) {
      Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str""+ Long.toString(tempFile.length())+ ""String_Node_Str""+ Long.toString(fileSize));
      appendedFile=managePartialFile(tempFile);
      if (appendedFile == null) {
        Timber.e(""String_Node_Str"" + tempFile.getPath());
        return false;
      }
 else       if (appendedFile.length() < fileSize) {
        Timber.e(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str""+ Long.toString(appendedFile.length())+ ""String_Node_Str""+ Long.toString(fileSize));
        return false;
      }
 else {
        Timber.d(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str"");
      }
    }
 else {
      Timber.d(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
      Utils.toastOnUiThread((Activity)context,context.getString(R.string.finished_downloading) + ""String_Node_Str"" + indexItem.getTitle()+ ""String_Node_Str"",false);
      sendDownloadCompleteMessage(indexItem.getExpansionId());
    }
  }
 else {
    Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
    return false;
  }
  try {
    File directory=new File(actualFile.getParent());
    String nameFilter=""String_Node_Str"";
    if (actualFile.getName().contains(indexItem.getExpansionFileVersion())) {
      nameFilter=actualFile.getName().replace(indexItem.getExpansionFileVersion(),""String_Node_Str"");
    }
 else {
      nameFilter=actualFile.getName();
    }
    Timber.d(""String_Node_Str"" + nameFilter + ""String_Node_Str""+ directory.getPath());
    WildcardFileFilter oldFileFilter=new WildcardFileFilter(nameFilter);
    for (    File oldFile : FileUtils.listFiles(directory,oldFileFilter,null)) {
      Timber.d(""String_Node_Str"" + oldFile.getPath() + ""String_Node_Str"");
      FileUtils.deleteQuietly(oldFile);
    }
    if ((appendedFile != null) && appendedFile.exists()) {
      FileUtils.moveFile(appendedFile,actualFile);
      FileUtils.deleteQuietly(appendedFile);
      FileUtils.deleteQuietly(tempFile);
      Timber.d(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str""+ actualFile.getPath());
    }
 else     if (tempFile.exists()) {
      FileUtils.moveFile(tempFile,actualFile);
      FileUtils.deleteQuietly(tempFile);
      Timber.d(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str""+ actualFile.getPath());
    }
 else {
      Timber.e(""String_Node_Str"" + tempFile.getPath());
      return false;
    }
  }
 catch (  IOException ioe) {
    Timber.e(""String_Node_Str"" + ioe.getMessage());
    return false;
  }
  ZipHelper.clearCache();
  return true;
}","private boolean handleFile(File tempFile){
  File appendedFile=null;
  File actualFile=new File(tempFile.getPath().substring(0,tempFile.getPath().lastIndexOf(""String_Node_Str"")));
  Timber.d(""String_Node_Str"" + actualFile.getAbsolutePath());
  long fileSize=0;
  if (tempFile.getName().contains(scal.io.liger.Constants.MAIN)) {
    fileSize=indexItem.getExpansionFileSize();
  }
 else   if (tempFile.getName().contains(scal.io.liger.Constants.PATCH)) {
    fileSize=indexItem.getPatchFileSize();
  }
 else {
    Timber.e(""String_Node_Str"" + tempFile.getName() + ""String_Node_Str"");
    return false;
  }
  if (tempFile.exists()) {
    if (tempFile.length() == 0) {
      Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
      return false;
    }
 else     if (tempFile.length() < fileSize) {
      Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str""+ Long.toString(tempFile.length())+ ""String_Node_Str""+ Long.toString(fileSize));
      appendedFile=managePartialFile(tempFile);
      if (appendedFile == null) {
        Timber.e(""String_Node_Str"" + tempFile.getPath());
        return false;
      }
 else       if (appendedFile.length() < fileSize) {
        Timber.e(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str""+ Long.toString(appendedFile.length())+ ""String_Node_Str""+ Long.toString(fileSize));
        return false;
      }
 else {
        Timber.d(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str"");
        Utils.toastOnUiThread((Activity)context,context.getString(R.string.finished_downloading) + ""String_Node_Str"" + indexItem.getTitle()+ ""String_Node_Str"",false);
        sendDownloadCompleteMessage(indexItem.getExpansionId());
      }
    }
 else {
      Timber.d(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
      Utils.toastOnUiThread((Activity)context,context.getString(R.string.finished_downloading) + ""String_Node_Str"" + indexItem.getTitle()+ ""String_Node_Str"",false);
      sendDownloadCompleteMessage(indexItem.getExpansionId());
    }
  }
 else {
    Timber.e(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str"");
    return false;
  }
  try {
    File directory=new File(actualFile.getParent());
    String nameFilter=""String_Node_Str"";
    if (actualFile.getName().contains(indexItem.getExpansionFileVersion())) {
      nameFilter=actualFile.getName().replace(indexItem.getExpansionFileVersion(),""String_Node_Str"");
    }
 else {
      nameFilter=actualFile.getName();
    }
    Timber.d(""String_Node_Str"" + nameFilter + ""String_Node_Str""+ directory.getPath());
    WildcardFileFilter oldFileFilter=new WildcardFileFilter(nameFilter);
    for (    File oldFile : FileUtils.listFiles(directory,oldFileFilter,null)) {
      Timber.d(""String_Node_Str"" + oldFile.getPath() + ""String_Node_Str"");
      FileUtils.deleteQuietly(oldFile);
    }
    if ((appendedFile != null) && appendedFile.exists()) {
      FileUtils.moveFile(appendedFile,actualFile);
      FileUtils.deleteQuietly(appendedFile);
      FileUtils.deleteQuietly(tempFile);
      Timber.d(""String_Node_Str"" + appendedFile.getPath() + ""String_Node_Str""+ actualFile.getPath());
    }
 else     if (tempFile.exists()) {
      FileUtils.moveFile(tempFile,actualFile);
      FileUtils.deleteQuietly(tempFile);
      Timber.d(""String_Node_Str"" + tempFile.getPath() + ""String_Node_Str""+ actualFile.getPath());
    }
 else {
      Timber.e(""String_Node_Str"" + tempFile.getPath());
      return false;
    }
  }
 catch (  IOException ioe) {
    Timber.e(""String_Node_Str"" + ioe.getMessage());
    return false;
  }
  ZipHelper.clearCache();
  return true;
}",0.966876070816676
187125,"private void downloadWithTor(boolean useTor,Uri uri,String title,String desc,File targetFile){
  initNotificationManager();
  String nTag=indexItem.getExpansionId();
  int nId=0;
  if (fileName.contains(scal.io.liger.Constants.MAIN)) {
    nId=Integer.parseInt(indexItem.getExpansionFileVersion());
  }
 else   if (fileName.contains(scal.io.liger.Constants.PATCH)) {
    nId=Integer.parseInt(indexItem.getPatchFileVersion());
  }
  OkHttpClient httpClient=new OkHttpClient();
  if (useTor) {
    if (checkTor(context)) {
      Timber.d(""String_Node_Str"" + scal.io.liger.Constants.TOR_PROXY_HOST + ""String_Node_Str""+ scal.io.liger.Constants.TOR_PROXY_PORT);
      SocketAddress torSocket=new InetSocketAddress(scal.io.liger.Constants.TOR_PROXY_HOST,scal.io.liger.Constants.TOR_PROXY_PORT);
      Proxy torProxy=new Proxy(Proxy.Type.HTTP,torSocket);
      httpClient.setProxy(torProxy);
    }
 else {
      Timber.e(""String_Node_Str"");
      if (context instanceof Activity) {
        Utils.toastOnUiThread((Activity)context,""String_Node_Str"",true);
      }
      StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
      return;
    }
  }
  httpClient.setRetryOnConnectionFailure(false);
  httpClient.setConnectTimeout(3000,TimeUnit.MILLISECONDS);
  String actualFileName=targetFile.getName().substring(0,targetFile.getName().lastIndexOf(""String_Node_Str""));
  Timber.d(""String_Node_Str"" + uri.toString());
  try {
    Request request=new Request.Builder().url(uri.toString()).build();
    File partFile=new File(targetFile.getPath().replace(""String_Node_Str"",""String_Node_Str""));
    if (partFile.exists()) {
      long partBytes=partFile.length();
      Timber.d(""String_Node_Str"" + partFile.getPath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ Long.toString(partBytes)+ ""String_Node_Str"");
      request=new Request.Builder().url(uri.toString()).addHeader(""String_Node_Str"",""String_Node_Str"" + Long.toString(partBytes) + ""String_Node_Str"").build();
    }
 else {
      Timber.d(""String_Node_Str"" + partFile.getPath() + ""String_Node_Str"");
    }
    Response response=httpClient.newCall(request).execute();
    int statusCode=response.code();
    if ((statusCode == 200) || (statusCode == 206)) {
      Timber.d(""String_Node_Str"" + statusCode);
      Date startTime=new Date();
      long queueId=0 - startTime.getTime();
      StorymakerQueueManager.addToQueue(context,queueId,targetFile.getName(),queueDao);
      targetFile.getParentFile().mkdirs();
      Timber.d(""String_Node_Str"");
      BufferedInputStream responseInput=new BufferedInputStream(response.body().byteStream());
      try {
        FileOutputStream targetOutput=new FileOutputStream(targetFile);
        byte[] buf=new byte[1024];
        int i;
        int oldPercent=0;
        long thisTime;
        long lastTime=-1;
        int lastPercent=0;
        while ((i=responseInput.read(buf)) > 0) {
          int nPercent=StorymakerDownloadHelper.getDownloadPercent(context,fileName,installedDao);
          thisTime=System.currentTimeMillis();
          if (oldPercent == nPercent) {
          }
 else {
            if (nPercent % 10 == 0 && nPercent != lastPercent) {
              if (lastTime == -1 || (thisTime - lastTime) > 1000) {
                lastPercent=nPercent;
                oldPercent=nPercent;
                lastTime=thisTime;
                Notification nProgress=new Notification.Builder(context).setContentTitle(mAppTitle + ""String_Node_Str"").setContentText(indexItem.getTitle() + ""String_Node_Str"" + (nPercent / 10.0)+ ""String_Node_Str"").setSmallIcon(android.R.drawable.arrow_down_float).setProgress(100,(nPercent / 10),false).setWhen(startTime.getTime()).build();
                nManager.notify(nTag,nId,nProgress);
              }
            }
          }
          targetOutput.write(buf,0,i);
        }
        targetOutput.close();
        responseInput.close();
        Timber.d(""String_Node_Str"" + targetFile);
      }
 catch (      ConnectTimeoutException cte) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        cte.printStackTrace();
      }
catch (      SocketTimeoutException ste) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        ste.printStackTrace();
      }
catch (      IOException ioe) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        ioe.printStackTrace();
      }
      StorymakerQueueManager.removeFromQueue(context,queueId,queueDao);
      nManager.cancel(nTag,nId);
      if (!handleFile(targetFile)) {
        Timber.e(""String_Node_Str"" + actualFileName);
      }
    }
 else {
      Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str""+ statusCode);
      StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
    }
  }
 catch (  IOException ioe) {
    Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
    ioe.printStackTrace();
    StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
  }
}","private void downloadWithTor(boolean useTor,Uri uri,String title,String desc,File targetFile){
  initNotificationManager();
  String nTag=indexItem.getExpansionId();
  int nId=0;
  if (fileName.contains(scal.io.liger.Constants.MAIN)) {
    nId=Integer.parseInt(indexItem.getExpansionFileVersion());
  }
 else   if (fileName.contains(scal.io.liger.Constants.PATCH)) {
    nId=Integer.parseInt(indexItem.getPatchFileVersion());
  }
  OkHttpClient httpClient=new OkHttpClient();
  if (useTor) {
    if (checkTor(context)) {
      Timber.d(""String_Node_Str"" + scal.io.liger.Constants.TOR_PROXY_HOST + ""String_Node_Str""+ scal.io.liger.Constants.TOR_PROXY_PORT);
      SocketAddress torSocket=new InetSocketAddress(scal.io.liger.Constants.TOR_PROXY_HOST,scal.io.liger.Constants.TOR_PROXY_PORT);
      Proxy torProxy=new Proxy(Proxy.Type.HTTP,torSocket);
      httpClient.setProxy(torProxy);
    }
 else {
      Timber.e(""String_Node_Str"");
      if (context instanceof Activity) {
        Utils.toastOnUiThread((Activity)context,""String_Node_Str"",true);
      }
      StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
      return;
    }
  }
  httpClient.setRetryOnConnectionFailure(false);
  httpClient.setConnectTimeout(3000,TimeUnit.MILLISECONDS);
  String actualFileName=targetFile.getName().substring(0,targetFile.getName().lastIndexOf(""String_Node_Str""));
  Timber.d(""String_Node_Str"" + uri.toString());
  try {
    Request request=new Request.Builder().url(uri.toString()).addHeader(""String_Node_Str"",""String_Node_Str"").build();
    File partFile=new File(targetFile.getPath().replace(""String_Node_Str"",""String_Node_Str""));
    if (partFile.exists()) {
      long partBytes=partFile.length();
      Timber.d(""String_Node_Str"" + partFile.getPath() + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ Long.toString(partBytes)+ ""String_Node_Str"");
      request=new Request.Builder().url(uri.toString()).addHeader(""String_Node_Str"",""String_Node_Str"").addHeader(""String_Node_Str"",""String_Node_Str"" + Long.toString(partBytes) + ""String_Node_Str"").build();
    }
 else {
      Timber.d(""String_Node_Str"" + partFile.getPath() + ""String_Node_Str"");
    }
    Response response=httpClient.newCall(request).execute();
    int statusCode=response.code();
    if ((statusCode == 200) || (statusCode == 206)) {
      Timber.d(""String_Node_Str"" + statusCode);
      Date startTime=new Date();
      long queueId=0 - startTime.getTime();
      StorymakerQueueManager.addToQueue(context,queueId,targetFile.getName(),queueDao);
      targetFile.getParentFile().mkdirs();
      Timber.d(""String_Node_Str"");
      BufferedInputStream responseInput=new BufferedInputStream(response.body().byteStream());
      try {
        FileOutputStream targetOutput=new FileOutputStream(targetFile);
        byte[] buf=new byte[1024];
        int i;
        int oldPercent=0;
        long thisTime;
        long lastTime=-1;
        int lastPercent=0;
        while ((i=responseInput.read(buf)) > 0) {
          int nPercent=StorymakerDownloadHelper.getDownloadPercent(context,fileName,installedDao);
          thisTime=System.currentTimeMillis();
          if (oldPercent == nPercent) {
          }
 else {
            if (nPercent % 10 == 0 && nPercent != lastPercent) {
              if (lastTime == -1 || (thisTime - lastTime) > 1000) {
                lastPercent=nPercent;
                oldPercent=nPercent;
                lastTime=thisTime;
                Notification nProgress=new Notification.Builder(context).setContentTitle(mAppTitle + ""String_Node_Str"").setContentText(indexItem.getTitle() + ""String_Node_Str"" + (nPercent / 10.0)+ ""String_Node_Str"").setSmallIcon(android.R.drawable.arrow_down_float).setProgress(100,(nPercent / 10),false).setWhen(startTime.getTime()).build();
                nManager.notify(nTag,nId,nProgress);
              }
            }
          }
          targetOutput.write(buf,0,i);
        }
        targetOutput.close();
        responseInput.close();
        Timber.d(""String_Node_Str"" + targetFile);
      }
 catch (      ConnectTimeoutException cte) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        cte.printStackTrace();
      }
catch (      SocketTimeoutException ste) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        ste.printStackTrace();
      }
catch (      IOException ioe) {
        Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
        ioe.printStackTrace();
      }
      StorymakerQueueManager.removeFromQueue(context,queueId,queueDao);
      nManager.cancel(nTag,nId);
      if (!handleFile(targetFile)) {
        Timber.e(""String_Node_Str"" + actualFileName);
      }
    }
 else {
      Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str""+ statusCode);
      StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
    }
  }
 catch (  IOException ioe) {
    Timber.e(""String_Node_Str"" + actualFileName + ""String_Node_Str"");
    ioe.printStackTrace();
    StorymakerQueueManager.checkQueueFinished(context,targetFile.getName());
  }
}",0.990758946126622
187126,"@Override public void onClick(DialogInterface dialog,int which){
  Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
  ((InstanceIndexItem)item).deleteAssociatedFiles(context,true);
  mDataset.remove(position);
  notifyItemRemoved(position);
}","@Override public void onClick(DialogInterface dialog,int which){
  Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
  ((InstanceIndexItem)item).deleteAssociatedFiles(context,true);
  mDataset.remove(safePosition);
  notifyItemRemoved(safePosition);
}",0.9785714285714284
187127,"@Override public boolean onLongClick(View v){
  if (item instanceof InstanceIndexItem) {
    new AlertDialog.Builder(context).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + item.getTitle() + ""String_Node_Str""+ sdf.format(new Date(((InstanceIndexItem)item).getStoryCreationDate()))+ ""String_Node_Str"").setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
        ((InstanceIndexItem)item).deleteAssociatedFiles(context,false);
        mDataset.remove(position);
        notifyItemRemoved(position);
      }
    }
).setNeutralButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
        ((InstanceIndexItem)item).deleteAssociatedFiles(context,true);
        mDataset.remove(position);
        notifyItemRemoved(position);
      }
    }
).setPositiveButton(""String_Node_Str"",null).show();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  return true;
}","@Override public boolean onLongClick(View v){
  safePosition=InstanceIndexItemAdapter.this.mDataset.indexOf(item);
  if (item instanceof InstanceIndexItem) {
    new AlertDialog.Builder(context).setTitle(""String_Node_Str"").setMessage(""String_Node_Str"" + item.getTitle() + ""String_Node_Str""+ sdf.format(new Date(((InstanceIndexItem)item).getStoryCreationDate()))+ ""String_Node_Str"").setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
        ((InstanceIndexItem)item).deleteAssociatedFiles(context,false);
        mDataset.remove(safePosition);
        notifyItemRemoved(safePosition);
      }
    }
).setNeutralButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        Log.d(""String_Node_Str"",""String_Node_Str"" + ((InstanceIndexItem)item).getTitle());
        ((InstanceIndexItem)item).deleteAssociatedFiles(context,true);
        mDataset.remove(safePosition);
        notifyItemRemoved(safePosition);
      }
    }
).setPositiveButton(""String_Node_Str"",null).show();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  return true;
}",0.9642719938532462
187128,"public DeleteListener(Context context,BaseIndexItem item,int position){
  this.context=context;
  this.item=item;
  this.position=position;
}","public DeleteListener(Context context,BaseIndexItem item){
  this.context=context;
  this.item=item;
}",0.8395061728395061
187129,"@Override public void onBindViewHolder(ViewHolder holder,int position){
  Context context=holder.card.getContext();
  final BaseIndexItem baseItem=mDataset.get(position);
  String description=baseItem.getDescription();
  if (baseItem instanceof InstanceIndexItem) {
    final InstanceIndexItem instanceItem=(InstanceIndexItem)baseItem;
    holder.title.setText(String.format(""String_Node_Str"",!TextUtils.isEmpty(instanceItem.getTitle()) ? instanceItem.getTitle() : context.getString(R.string.no_title),instanceItem.getStoryCreationDate() == 0 ? ""String_Node_Str"" : sdf.format(new Date(instanceItem.getStoryCreationDate()))));
    int mediumStringResId;
    String storyType=TextUtils.isEmpty(instanceItem.getStoryType()) ? ""String_Node_Str"" : instanceItem.getStoryType();
switch (storyType) {
case ""String_Node_Str"":
      mediumStringResId=R.string.lbl_video;
    break;
case ""String_Node_Str"":
  mediumStringResId=R.string.lbl_audio;
break;
case ""String_Node_Str"":
mediumStringResId=R.string.lbl_photo;
break;
default :
mediumStringResId=R.string.no_medium;
break;
}
description=context.getString(mediumStringResId) + ""String_Node_Str"" + context.getString(org.storymaker.app.R.string.last_modified)+ ""String_Node_Str"";
if (!TextUtils.isEmpty(instanceItem.getInstanceFilePath())) {
description+=sdf.format(new Date(new File(instanceItem.getInstanceFilePath()).lastModified()));
}
String thumbnailPath=baseItem.getThumbnailPath();
if (!TextUtils.isEmpty(thumbnailPath)) {
if (thumbnailPath.startsWith(""String_Node_Str"")) {
Picasso.with(context).load(thumbnailPath).into(holder.thumb);
}
 else {
Picasso.with(context).load(new File(thumbnailPath)).into(holder.thumb);
}
}
 else {
Picasso.with(context).load(R.drawable.no_thumbnail).into(holder.thumb);
}
}
 else {
ExpansionIndexItem expansionIndexItem=(ExpansionIndexItem)baseItem;
HashMap<String,ExpansionIndexItem> installedIds=IndexManager.loadInstalledIdIndex(context);
holder.title.setText(baseItem.getTitle());
File contentCheck=new File(IndexManager.buildFilePath(expansionIndexItem),IndexManager.buildFileName(expansionIndexItem,Constants.MAIN));
String contentPath=expansionIndexItem.getPackageName() + File.separator + expansionIndexItem.getExpansionId();
if (installedIds.containsKey(expansionIndexItem.getExpansionId()) && contentCheck.exists() && baseItem.getThumbnailPath().startsWith(contentPath)) {
holder.thumb.setImageBitmap(BitmapFactory.decodeStream(ZipHelper.getFileInputStream(baseItem.getThumbnailPath(),context)));
}
 else {
String thumbnailPath=baseItem.getThumbnailPath();
if (!TextUtils.isEmpty(thumbnailPath)) {
if (thumbnailPath.startsWith(""String_Node_Str"")) {
Picasso.with(context).load(thumbnailPath).into(holder.thumb);
}
 else {
File file=IndexManager.copyThumbnail(context,expansionIndexItem.getThumbnailPath());
Picasso.with(context).load(file).into(holder.thumb);
}
}
 else {
Picasso.with(context).load(R.drawable.no_thumbnail).into(holder.thumb);
}
}
}
holder.card.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mListener != null) {
mListener.onStorySelected(baseItem);
}
}
}
);
holder.card.setOnLongClickListener(new DeleteListener(context,baseItem,position));
holder.description.setText(description);
}","@Override public void onBindViewHolder(ViewHolder holder,int position){
  Context context=holder.card.getContext();
  final BaseIndexItem baseItem=mDataset.get(position);
  String description=baseItem.getDescription();
  if (baseItem instanceof InstanceIndexItem) {
    final InstanceIndexItem instanceItem=(InstanceIndexItem)baseItem;
    holder.title.setText(String.format(""String_Node_Str"",!TextUtils.isEmpty(instanceItem.getTitle()) ? instanceItem.getTitle() : context.getString(R.string.no_title),instanceItem.getStoryCreationDate() == 0 ? ""String_Node_Str"" : sdf.format(new Date(instanceItem.getStoryCreationDate()))));
    int mediumStringResId;
    String storyType=TextUtils.isEmpty(instanceItem.getStoryType()) ? ""String_Node_Str"" : instanceItem.getStoryType();
switch (storyType) {
case ""String_Node_Str"":
      mediumStringResId=R.string.lbl_video;
    break;
case ""String_Node_Str"":
  mediumStringResId=R.string.lbl_audio;
break;
case ""String_Node_Str"":
mediumStringResId=R.string.lbl_photo;
break;
default :
mediumStringResId=R.string.no_medium;
break;
}
description=context.getString(mediumStringResId) + ""String_Node_Str"" + context.getString(org.storymaker.app.R.string.last_modified)+ ""String_Node_Str"";
if (!TextUtils.isEmpty(instanceItem.getInstanceFilePath())) {
description+=sdf.format(new Date(new File(instanceItem.getInstanceFilePath()).lastModified()));
}
String thumbnailPath=baseItem.getThumbnailPath();
if (!TextUtils.isEmpty(thumbnailPath)) {
if (thumbnailPath.startsWith(""String_Node_Str"")) {
Picasso.with(context).load(thumbnailPath).into(holder.thumb);
}
 else {
Picasso.with(context).load(new File(thumbnailPath)).into(holder.thumb);
}
}
 else {
Picasso.with(context).load(R.drawable.no_thumbnail).into(holder.thumb);
}
}
 else {
ExpansionIndexItem expansionIndexItem=(ExpansionIndexItem)baseItem;
HashMap<String,ExpansionIndexItem> installedIds=IndexManager.loadInstalledIdIndex(context);
holder.title.setText(baseItem.getTitle());
File contentCheck=new File(IndexManager.buildFilePath(expansionIndexItem),IndexManager.buildFileName(expansionIndexItem,Constants.MAIN));
String contentPath=expansionIndexItem.getPackageName() + File.separator + expansionIndexItem.getExpansionId();
if (installedIds.containsKey(expansionIndexItem.getExpansionId()) && contentCheck.exists() && baseItem.getThumbnailPath().startsWith(contentPath)) {
holder.thumb.setImageBitmap(BitmapFactory.decodeStream(ZipHelper.getFileInputStream(baseItem.getThumbnailPath(),context)));
}
 else {
String thumbnailPath=baseItem.getThumbnailPath();
if (!TextUtils.isEmpty(thumbnailPath)) {
if (thumbnailPath.startsWith(""String_Node_Str"")) {
Picasso.with(context).load(thumbnailPath).into(holder.thumb);
}
 else {
File file=IndexManager.copyThumbnail(context,expansionIndexItem.getThumbnailPath());
Picasso.with(context).load(file).into(holder.thumb);
}
}
 else {
Picasso.with(context).load(R.drawable.no_thumbnail).into(holder.thumb);
}
}
}
holder.card.setOnClickListener(new View.OnClickListener(){
@Override public void onClick(View v){
if (mListener != null) {
mListener.onStorySelected(baseItem);
}
}
}
);
holder.card.setOnLongClickListener(new DeleteListener(context,baseItem));
holder.description.setText(description);
}",0.9986065954482118
187130,"public static void launchLiger(Context context,String splId,String instancePath,String splPath){
  if (splId.equals(""String_Node_Str"")) {
    boolean readyToOpen=DownloadHelper.checkAndDownloadNew(context);
    if (!readyToOpen) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return;
    }
  }
  Intent ligerIntent=new Intent(context,MainActivity.class);
  ligerIntent.putExtra(MainActivity.INTENT_KEY_WINDOW_TITLE,context.getString(R.string.app_name));
  String lang=StoryMakerApp.getCurrentLocale().getLanguage();
  ligerIntent.putExtra(""String_Node_Str"",lang);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
  int pslideduration=Integer.parseInt(settings.getString(""String_Node_Str"",""String_Node_Str""));
  ligerIntent.putExtra(""String_Node_Str"",pslideduration * 1000);
  if (splId != null && !splId.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_LIBRARY_ID,splId);
  }
 else   if (splPath != null && !splPath.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_LIBRARY_PATH,splPath);
  }
 else   if (instancePath != null && !instancePath.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_INSTANCE_PATH,instancePath);
  }
  context.startActivity(ligerIntent);
}","public static void launchLiger(Context context,String splId,String instancePath,String splPath){
  if ((splId != null) && (splId.equals(""String_Node_Str""))) {
    boolean readyToOpen=DownloadHelper.checkAndDownloadNew(context);
    if (!readyToOpen) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
      return;
    }
  }
  Intent ligerIntent=new Intent(context,MainActivity.class);
  ligerIntent.putExtra(MainActivity.INTENT_KEY_WINDOW_TITLE,context.getString(R.string.app_name));
  String lang=StoryMakerApp.getCurrentLocale().getLanguage();
  ligerIntent.putExtra(""String_Node_Str"",lang);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
  int pslideduration=Integer.parseInt(settings.getString(""String_Node_Str"",""String_Node_Str""));
  ligerIntent.putExtra(""String_Node_Str"",pslideduration * 1000);
  if (splId != null && !splId.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_LIBRARY_ID,splId);
  }
 else   if (splPath != null && !splPath.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_LIBRARY_PATH,splPath);
  }
 else   if (instancePath != null && !instancePath.isEmpty()) {
    ligerIntent.putExtra(MainActivity.INTENT_KEY_STORYPATH_INSTANCE_PATH,instancePath);
  }
  context.startActivity(ligerIntent);
}",0.9924324324324324
187131,"/** 
 * Calculated object level methods 
 */
protected ContentValues getValues(){
  ContentValues values=new ContentValues();
  values.put(StoryMakerDB.Schema.AudioClip.COL_PATH,path);
  values.put(StoryMakerDB.Schema.AudioClip.COL_POSITION_CLIP_ID,positionClipId);
  values.put(StoryMakerDB.Schema.AudioClip.COL_POSITION_INDEX,positionIndex);
  values.put(StoryMakerDB.Schema.AudioClip.COL_VOLUME,volume);
  values.put(StoryMakerDB.Schema.AudioClip.COL_CLIP_SPAN,clipSpan);
  values.put(StoryMakerDB.Schema.AudioClip.COL_TRUNCATE,truncate);
  values.put(StoryMakerDB.Schema.AudioClip.COL_OVERLAP,overlap);
  values.put(StoryMakerDB.Schema.AudioClip.COL_FILL_REPEAT,fillRepeat);
  if (createdAt != null) {
    values.put(StoryMakerDB.Schema.Media.COL_CREATED_AT,createdAt.getTime());
  }
  if (updatedAt != null) {
    values.put(StoryMakerDB.Schema.Media.COL_UPDATED_AT,updatedAt.getTime());
  }
  return values;
}","/** 
 * Calculated object level methods 
 */
protected ContentValues getValues(){
  ContentValues values=new ContentValues();
  values.put(StoryMakerDB.Schema.AudioClip.COL_SCENE_ID,sceneId);
  values.put(StoryMakerDB.Schema.AudioClip.COL_PATH,path);
  values.put(StoryMakerDB.Schema.AudioClip.COL_POSITION_CLIP_ID,positionClipId);
  values.put(StoryMakerDB.Schema.AudioClip.COL_POSITION_INDEX,positionIndex);
  values.put(StoryMakerDB.Schema.AudioClip.COL_VOLUME,volume);
  values.put(StoryMakerDB.Schema.AudioClip.COL_CLIP_SPAN,clipSpan);
  values.put(StoryMakerDB.Schema.AudioClip.COL_TRUNCATE,truncate);
  values.put(StoryMakerDB.Schema.AudioClip.COL_OVERLAP,overlap);
  values.put(StoryMakerDB.Schema.AudioClip.COL_FILL_REPEAT,fillRepeat);
  if (createdAt != null) {
    values.put(StoryMakerDB.Schema.Media.COL_CREATED_AT,createdAt.getTime());
  }
  if (updatedAt != null) {
    values.put(StoryMakerDB.Schema.Media.COL_UPDATED_AT,updatedAt.getTime());
  }
  return values;
}",0.9651898734177216
187132,"/** 
 * getters and setters 
 */
public String getPath(){
  return path;
}","public String getPath(){
  return path;
}",0.7130434782608696
187133,"@Override public void onTabSelected(ActionBar.Tab tab,android.app.FragmentTransaction ft){
}","@Override public void onTabSelected(ActionBar.Tab tab,android.app.FragmentTransaction ft){
  mViewPager.setCurrentItem(tab.getPosition());
}",0.7931034482758621
187134,"@Override public void onTabUnselected(ActionBar.Tab tab,android.app.FragmentTransaction ft){
  mViewPager.setCurrentItem(tab.getPosition());
}","@Override public void onTabUnselected(ActionBar.Tab tab,android.app.FragmentTransaction ft){
}",0.7966101694915254
187135,"@Override public void onRemove(Account account){
  authTable.delete(getApplicationContext(),Integer.parseInt(account.getId()));
}","@Override public void onRemove(Account account){
  authTable.delete(getApplicationContext(),account.getId());
}",0.925
187136,"public void addChooseAccountFragment(Bundle bundle){
  FragmentManager fragManager=getSupportFragmentManager();
  FragmentTransaction fragTrans=fragManager.beginTransaction();
  List<Account> accounts=new ArrayList<Account>();
  final AuthTable authTable=new AuthTable();
  String[] siteAvailableNames=Account.CONTROLLER_SITE_NAMES;
  String[] siteAvailableKeys=Account.CONTROLLER_SITE_KEYS;
  Auth auth;
  for (int i=0; i < siteAvailableKeys.length; i++) {
    auth=authTable.getAuthDefault(this,siteAvailableKeys[i]);
    if (auth == null) {
      accounts.add(new Account(null,siteAvailableNames[i],siteAvailableKeys[i],""String_Node_Str"",""String_Node_Str"",null,false,false));
    }
 else {
      accounts.add(auth.convertToAccountObject());
    }
  }
  caFragment=new ChooseAccountFragment();
  caFragment.setArguments(bundle);
  caFragment.setAccountsList(accounts);
  caFragment.setOnEventListener(new OnEventListener(){
    @Override public void onSuccess(    Account account){
      Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
      if (auth == null) {
        auth=new Auth(getApplicationContext(),-1,account.getName(),account.getSite(),null,null,null,null,null);
        auth.insert();
      }
      auth.setCredentials(account.getCredentials());
      auth.setData(account.getData());
      auth.setUserName(account.getUserName());
      auth.setExpires(null);
      authTable.updateLastLogin(getApplicationContext(),account.getSite(),auth.getUserName());
      auth.update();
    }
    @Override public void onFailure(    Account account,    String failureMessage){
      Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
      if (auth != null) {
        auth.setCredentials(account.getCredentials());
        auth.setUserName(account.getName());
        auth.setData(account.getData());
        auth.setExpires(new Date());
        auth.update();
      }
    }
    @Override public void onRemove(    Account account){
      authTable.delete(getApplicationContext(),Integer.parseInt(account.getId()));
    }
  }
);
  fragTrans.add(R.id.fragmentLayout,caFragment);
  fragTrans.commit();
}","public void addChooseAccountFragment(Bundle bundle){
  FragmentManager fragManager=getSupportFragmentManager();
  FragmentTransaction fragTrans=fragManager.beginTransaction();
  List<Account> accounts=new ArrayList<Account>();
  final AuthTable authTable=new AuthTable();
  String[] siteAvailableNames=Account.CONTROLLER_SITE_NAMES;
  String[] siteAvailableKeys=Account.CONTROLLER_SITE_KEYS;
  Auth auth;
  for (int i=0; i < siteAvailableKeys.length; i++) {
    auth=authTable.getAuthDefault(this,siteAvailableKeys[i]);
    if (auth == null) {
      accounts.add(new Account(-1,siteAvailableNames[i],siteAvailableKeys[i],""String_Node_Str"",""String_Node_Str"",null,false,false));
    }
 else {
      accounts.add(auth.convertToAccountObject());
    }
  }
  caFragment=new ChooseAccountFragment();
  caFragment.setArguments(bundle);
  caFragment.setAccountsList(accounts);
  caFragment.setOnEventListener(new OnEventListener(){
    @Override public void onSuccess(    Account account){
      Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
      if (auth == null) {
        auth=new Auth(getApplicationContext(),-1,account.getName(),account.getSite(),null,null,null,null,null);
        auth.insert();
      }
      account.setId(auth.getId());
      auth.setCredentials(account.getCredentials());
      auth.setData(account.getData());
      auth.setUserName(account.getUserName());
      auth.setExpires(null);
      authTable.updateLastLogin(getApplicationContext(),account.getSite(),auth.getUserName());
      auth.update();
    }
    @Override public void onFailure(    Account account,    String failureMessage){
      Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
      if (auth != null) {
        auth.setCredentials(account.getCredentials());
        auth.setUserName(account.getName());
        auth.setData(account.getData());
        auth.setExpires(new Date());
        auth.update();
      }
    }
    @Override public void onRemove(    Account account){
      authTable.delete(getApplicationContext(),account.getId());
    }
  }
);
  fragTrans.add(R.id.fragmentLayout,caFragment);
  fragTrans.commit();
}",0.9804192582354296
187137,"@Override public void onSuccess(Account account){
  Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
  if (auth == null) {
    auth=new Auth(getApplicationContext(),-1,account.getName(),account.getSite(),null,null,null,null,null);
    auth.insert();
  }
  auth.setCredentials(account.getCredentials());
  auth.setData(account.getData());
  auth.setUserName(account.getUserName());
  auth.setExpires(null);
  authTable.updateLastLogin(getApplicationContext(),account.getSite(),auth.getUserName());
  auth.update();
}","@Override public void onSuccess(Account account){
  Auth auth=authTable.getAuthDefault(getApplicationContext(),account.getSite());
  if (auth == null) {
    auth=new Auth(getApplicationContext(),-1,account.getName(),account.getSite(),null,null,null,null,null);
    auth.insert();
  }
  account.setId(auth.getId());
  auth.setCredentials(account.getCredentials());
  auth.setData(account.getData());
  auth.setUserName(account.getUserName());
  auth.setExpires(null);
  authTable.updateLastLogin(getApplicationContext(),account.getSite(),auth.getUserName());
  auth.update();
}",0.9723461195361284
187138,"public Account convertToAccountObject(){
  return new Account(Integer.toString(this.id),this.name,this.site,this.userName,this.credentials,this.data,this.credentialsExist(),this.credentialsAreValid());
}","public Account convertToAccountObject(){
  return new Account(this.id,this.name,this.site,this.userName,this.credentials,this.data,this.credentialsExist(),this.credentialsAreValid());
}",0.9536082474226804
187139,"public Cursor getJobsAsCursor(String type,String site,String spec){
  String selection=StoryMakerDB.Schema.Jobs.COL_PUBLISH_JOB_ID + ""String_Node_Str"";
  ArrayList<String> selArgs=new ArrayList<String>();
  selArgs.add(""String_Node_Str"" + id);
  if (Utils.stringNotBlank(type)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_TYPE + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + type);
  }
 else   if (Utils.stringNotBlank(site)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_SITE + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + site);
  }
 else   if (Utils.stringNotBlank(spec)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_SPEC + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + spec);
  }
  String[] selectionArgs=selArgs.toArray(new String[]{});
  if (mDB == null) {
    return context.getContentResolver().query((new JobTable()).getURI(),null,selection,selectionArgs,null);
  }
 else {
    return mDB.query((new JobTable()).getTableName(),null,selection,selectionArgs,null,null,null);
  }
}","public Cursor getJobsAsCursor(String type,String site,String spec){
  String selection=StoryMakerDB.Schema.Jobs.COL_PUBLISH_JOB_ID + ""String_Node_Str"";
  ArrayList<String> selArgs=new ArrayList<String>();
  selArgs.add(""String_Node_Str"" + id);
  if (Utils.stringNotBlank(type)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_TYPE + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + type);
  }
  if (Utils.stringNotBlank(site)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_SITE + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + site);
  }
  if (Utils.stringNotBlank(spec)) {
    selection+=""String_Node_Str"" + StoryMakerDB.Schema.Jobs.COL_SPEC + ""String_Node_Str"";
    selArgs.add(""String_Node_Str"" + spec);
  }
  String[] selectionArgs=selArgs.toArray(new String[]{});
  if (mDB == null) {
    return context.getContentResolver().query((new JobTable()).getURI(),null,selection,selectionArgs,null);
  }
 else {
    return mDB.query((new JobTable()).getTableName(),null,selection,selectionArgs,null,null,null);
  }
}",0.9944029850746268
187140,"@Override public void insert(){
  Cursor cursorDupes=(new MediaTable(mDB)).getAsCursor(context,sceneId,clipIndex);
  if ((cursorDupes.getCount() > 0) && cursorDupes.moveToFirst()) {
    do {
      (new Media(mDB,context,cursorDupes)).delete();
    }
 while (cursorDupes.moveToNext());
  }
  ContentValues values=getValues();
  if (mDB == null) {
    Uri uri=context.getContentResolver().insert(ProjectsProvider.MEDIA_CONTENT_URI,values);
    String lastSegment=uri.getLastPathSegment();
    int newId=Integer.parseInt(lastSegment);
    this.setId(newId);
  }
 else {
    int newId=(int)mDB.insert((new MediaTable(mDB)).getTableName(),null,values);
    this.setId(newId);
  }
  cursorDupes.close();
  super.insert();
}","@Override public void insert(){
  Cursor cursorDupes=(new MediaTable(mDB)).getAsCursor(context,sceneId,clipIndex);
  if ((cursorDupes.getCount() > 0) && cursorDupes.moveToFirst()) {
    do {
      (new Media(mDB,context,cursorDupes)).delete();
    }
 while (cursorDupes.moveToNext());
  }
  ContentValues values=getValues();
  if (mDB == null) {
    Uri uri=context.getContentResolver().insert(ProjectsProvider.MEDIA_CONTENT_URI,values);
    String lastSegment=uri.getLastPathSegment();
    int newId=Integer.parseInt(lastSegment);
    this.setId(newId);
  }
 else {
    int newId=(int)mDB.insert((new MediaTable(mDB)).getTableName(),null,values);
    this.setId(newId);
  }
  cursorDupes.close();
}",0.9872881355932204
187141,"public void onChooseAccountDialogResult(int resultCode,Intent intent){
  if (resultCode == Activity.RESULT_OK) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    if (intent.hasExtra(ChooseAccountFragment.EXTRAS_ACCOUNT_KEYS)) {
      ArrayList<String> siteKeys=intent.getStringArrayListExtra(ChooseAccountFragment.EXTRAS_ACCOUNT_KEYS);
      if (!siteKeys.isEmpty()) {
        Log.d(TAG,""String_Node_Str"" + siteKeys);
        mSiteKeys=siteKeys.toArray(new String[siteKeys.size()]);
        boolean useTor=intent.getBooleanExtra(ChooseAccountFragment.EXTRAS_USE_TOR,false);
        boolean publishToStoryMaker=intent.getBooleanExtra(ChooseAccountFragment.EXTRAS_PUBLISH_TO_STORYMAKER,false);
        showUploadSpinner(true);
        mUploading=true;
        mPlaying=false;
        if (mFileLastExport != null && mFileLastExport.exists()) {
          startUpload(mActivity.mMPM.mProject,mSiteKeys,useTor,publishToStoryMaker);
        }
 else {
          startRender(mActivity.mMPM.mProject,mSiteKeys,useTor,publishToStoryMaker);
        }
      }
 else {
        Utils.toastOnUiThread(mActivity,""String_Node_Str"");
      }
    }
 else {
      Utils.toastOnUiThread(mActivity,""String_Node_Str"");
    }
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    showPlayAndUpload(true);
  }
}","public void onChooseAccountDialogResult(int resultCode,Intent intent){
  if (resultCode == Activity.RESULT_OK) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    if (intent.hasExtra(ChooseAccountFragment.EXTRAS_ACCOUNT_KEYS)) {
      ArrayList<String> siteKeys=intent.getStringArrayListExtra(ChooseAccountFragment.EXTRAS_ACCOUNT_KEYS);
      if (!siteKeys.isEmpty()) {
        Log.d(TAG,""String_Node_Str"" + siteKeys);
        mSiteKeys=siteKeys.toArray(new String[siteKeys.size()]);
        boolean useTor=intent.getBooleanExtra(ChooseAccountFragment.EXTRAS_USE_TOR,false);
        boolean publishToStoryMaker=intent.getBooleanExtra(ChooseAccountFragment.EXTRAS_PUBLISH_TO_STORYMAKER,false);
        showUploadSpinner(true);
        mUploading=true;
        mPlaying=false;
        if (mMatchingRenderJob != null) {
          PublishJob publishJob=PublishController.getMatchingPublishJob(getActivity().getApplicationContext(),mActivity.mMPM.mProject,mSiteKeys,useTor,publishToStoryMaker);
          Job newJob=JobTable.cloneJob(getActivity().getApplicationContext(),mMatchingRenderJob);
          newJob.setPublishJobId(publishJob.getId());
          newJob.save();
          mMatchingRenderJob=newJob;
          startUpload(mActivity.mMPM.mProject,mSiteKeys,useTor,publishToStoryMaker);
        }
 else {
          startRender(mActivity.mMPM.mProject,mSiteKeys,useTor,publishToStoryMaker);
        }
      }
 else {
        Utils.toastOnUiThread(mActivity,""String_Node_Str"");
      }
    }
 else {
      Utils.toastOnUiThread(mActivity,""String_Node_Str"");
    }
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    showPlayAndUpload(true);
  }
}",0.8154158215010142
187142,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  initFragment();
  int layout=getArguments().getInt(""String_Node_Str"");
  mView=inflater.inflate(layout,null);
  if (layout == R.layout.fragment_complete_story) {
    ProjectInfoFragment infoFrag=ProjectInfoFragment.newInstance(mActivity.getProject().getId(),false,false);
    this.getChildFragmentManager().beginTransaction().replace(R.id.fl_info_container,infoFrag).commit();
    View view=mView.findViewById(R.id.fl_info_container);
    view.findViewById(R.id.fl_info_container).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        launchStoryInfoEditMode();
      }
    }
);
    ImageView ivThumb=(ImageView)mView.findViewById(R.id.storyThumb);
    Media[] medias=mActivity.mMPM.mScene.getMediaAsArray();
    if (medias.length > 0) {
      Bitmap bitmap=Media.getThumbnail(mActivity,medias[0],mActivity.mMPM.mProject);
      if (bitmap != null) {
        ivThumb.setImageBitmap(bitmap);
      }
    }
    Job job=(new JobTable()).getMatchingFinishedJob(getActivity(),mActivity.mMPM.mProject.getId(),""String_Node_Str"",""String_Node_Str"",mActivity.mMPM.mProject.getUpdatedAt());
    if (job != null) {
      mFileLastExport=new File(job.getResult());
    }
    mProgressText=(TextView)mView.findViewById(R.id.textViewProgress);
    mProgressText.setText(""String_Node_Str"");
    ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(mActivity,R.array.story_sections,android.R.layout.simple_spinner_item);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    mButtonPlay=(ToggleImageButton)mView.findViewById(R.id.btnPlay);
    mButtonPlay.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        playClicked();
      }
    }
);
    mButtonUpload=(ToggleImageButton)mView.findViewById(R.id.btnUpload);
    mButtonUpload.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        uploadClicked();
      }
    }
);
  }
  return mView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  initFragment();
  int layout=getArguments().getInt(""String_Node_Str"");
  mView=inflater.inflate(layout,null);
  if (layout == R.layout.fragment_complete_story) {
    ProjectInfoFragment infoFrag=ProjectInfoFragment.newInstance(mActivity.getProject().getId(),false,false);
    this.getChildFragmentManager().beginTransaction().replace(R.id.fl_info_container,infoFrag).commit();
    View view=mView.findViewById(R.id.fl_info_container);
    view.findViewById(R.id.fl_info_container).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        launchStoryInfoEditMode();
      }
    }
);
    ImageView ivThumb=(ImageView)mView.findViewById(R.id.storyThumb);
    Media[] medias=mActivity.mMPM.mScene.getMediaAsArray();
    if (medias.length > 0) {
      Bitmap bitmap=Media.getThumbnail(mActivity,medias[0],mActivity.mMPM.mProject);
      if (bitmap != null) {
        ivThumb.setImageBitmap(bitmap);
      }
    }
    mMatchingRenderJob=(new JobTable()).getMatchingFinishedJob(getActivity(),mActivity.mMPM.mProject.getId(),""String_Node_Str"",""String_Node_Str"",mActivity.mMPM.mProject.getUpdatedAt());
    if (mMatchingRenderJob != null) {
      mFileLastExport=new File(mMatchingRenderJob.getResult());
    }
    mProgressText=(TextView)mView.findViewById(R.id.textViewProgress);
    mProgressText.setText(""String_Node_Str"");
    ArrayAdapter<CharSequence> adapter=ArrayAdapter.createFromResource(mActivity,R.array.story_sections,android.R.layout.simple_spinner_item);
    adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
    mButtonPlay=(ToggleImageButton)mView.findViewById(R.id.btnPlay);
    mButtonPlay.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        playClicked();
      }
    }
);
    mButtonUpload=(ToggleImageButton)mView.findViewById(R.id.btnUpload);
    mButtonUpload.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        uploadClicked();
      }
    }
);
  }
  return mView;
}",0.9876715515236102
187143,"public Job getNextUnfinished(Context context,String type,String site){
  ArrayList<Job> jobs=getUnfinishedAsList(context,type,site);
  if (jobs != null) {
    return jobs.get(0);
  }
 else {
    return null;
  }
}","public Job getNextUnfinished(Context context,String type,PublishJob publishJob,String site){
  ArrayList<Job> jobs=getUnfinishedAsList(context,type,publishJob,site);
  if (jobs != null) {
    return jobs.get(0);
  }
 else {
    return null;
  }
}",0.9281045751633988
187144,"public ArrayList<Job> getUnfinishedAsList(Context context,String type,String site){
  ArrayList<Job> jobs=(ArrayList<Job>)getAllAsList(context);
  ArrayList<Job> purgedList=null;
  if (jobs != null) {
    for (    Job job : jobs) {
      if ((job.getFinishedAt() == null) && job.getType().equals(type) && (site == null ? true : job.getSite().equals(site))) {
        if (purgedList == null) {
          purgedList=new ArrayList<Job>();
        }
        purgedList.add(job);
      }
    }
  }
  return purgedList;
}","public ArrayList<Job> getUnfinishedAsList(Context context,String type,PublishJob publishJob,String site){
  ArrayList<Job> jobs=(ArrayList<Job>)getAllAsList(context);
  ArrayList<Job> purgedList=null;
  if (jobs != null) {
    for (    Job job : jobs) {
      if ((job.getFinishedAt() == null) && job.getType().equals(type) && job.getPublishJobId() == publishJob.getId() && (site == null ? true : job.getSite().equals(site))) {
        if (purgedList == null) {
          purgedList=new ArrayList<Job>();
        }
        purgedList.add(job);
      }
    }
  }
  return purgedList;
}",0.9372156505914468
187145,"private PublishJob getPublishJob(Project project,String[] siteKeys,boolean useTor,boolean publishToStoryMaker){
  if (mPublishJob == null) {
    mPublishJob=(new PublishJobTable()).getNextUnfinished(mContext,project.getId(),siteKeys);
    if (mPublishJob == null) {
      mPublishJob=new PublishJob(mContext,project.getId(),siteKeys,useTor,publishToStoryMaker);
      mPublishJob.save();
    }
  }
 else {
    mPublishJob.setUseTor(useTor);
    mPublishJob.setPublishToStoryMaker(publishToStoryMaker);
  }
  return mPublishJob;
}","private PublishJob getPublishJob(Project project,String[] siteKeys,boolean useTor,boolean publishToStoryMaker){
  if (mPublishJob == null) {
    mPublishJob=getMatchingPublishJob(mContext,project,siteKeys,useTor,publishToStoryMaker);
  }
 else {
    mPublishJob.setUseTor(useTor);
    mPublishJob.setPublishToStoryMaker(publishToStoryMaker);
  }
  return mPublishJob;
}",0.376391982182628
187146,"private void startUploadService(){
  uploadService=UploadWorker.getInstance(mContext,this);
  uploadService.start();
}","private void startUploadService(){
  uploadService=UploadWorker.getInstance(mContext,this);
  uploadService.start(mPublishJob);
}",0.9554655870445344
187147,"private void startRenderService(){
  renderService=RenderWorker.getInstance(mContext,this);
  renderService.start();
}","private void startRenderService(){
  renderService=RenderWorker.getInstance(mContext,this);
  renderService.start(mPublishJob);
}",0.9554655870445344
187148,"public void start(){
  Job job=(new JobTable(null)).getNextUnfinished(mContext,JobTable.TYPE_RENDER,null);
  RendererBase renderer=null;
  if (job != null) {
    if (job.isSpec(VideoRenderer.SPEC_KEY)) {
      renderer=new VideoRenderer(mContext,this,job);
    }
 else     if (job.isSpec(AudioRenderer.SPEC_KEY)) {
      renderer=new AudioRenderer(mContext,this,job);
    }
    renderer.start();
  }
}","public void start(PublishJob publishJob){
  Job job=(new JobTable(null)).getNextUnfinished(mContext,JobTable.TYPE_RENDER,publishJob,null);
  RendererBase renderer=null;
  if (job != null) {
    if (job.isSpec(VideoRenderer.SPEC_KEY)) {
      renderer=new VideoRenderer(mContext,this,job);
    }
 else     if (job.isSpec(AudioRenderer.SPEC_KEY)) {
      renderer=new AudioRenderer(mContext,this,job);
    }
    renderer.start();
  }
}",0.9616306954436452
187149,"public void start(){
  Job job=(new JobTable(null)).getNextUnfinished(mContext,JobTable.TYPE_UPLOAD,null);
  UploaderBase uploader=null;
  if (job != null) {
    if (job.isSite(Auth.SITE_YOUTUBE)) {
      uploader=new YoutubeUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_STORYMAKER)) {
      uploader=new StoryMakerUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_FACEBOOK)) {
      uploader=new FacebookUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_FLICKR)) {
      uploader=new FlickrUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_SOUNDCLOUD)) {
      uploader=new SoundCloudUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_SSH)) {
      uploader=new SSHUploader(mContext,this,job);
    }
    uploader.start();
  }
}","public void start(PublishJob publishJob){
  Job job=(new JobTable(null)).getNextUnfinished(mContext,JobTable.TYPE_UPLOAD,publishJob,null);
  UploaderBase uploader=null;
  if (job != null) {
    if (job.isSite(Auth.SITE_YOUTUBE)) {
      uploader=new YoutubeUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_STORYMAKER)) {
      uploader=new StoryMakerUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_FACEBOOK)) {
      uploader=new FacebookUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_FLICKR)) {
      uploader=new FlickrUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_SOUNDCLOUD)) {
      uploader=new SoundCloudUploader(mContext,this,job);
    }
 else     if (job.isSite(Auth.SITE_SSH)) {
      uploader=new SSHUploader(mContext,this,job);
    }
    uploader.start();
  }
}",0.9811097992916176
187150,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.d(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  if ((oldVersion < 2) && (newVersion == 2)) {
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS);
  }
  if ((oldVersion < 3) && (newVersion == 3)) {
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_TRIM_START);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_TRIM_END);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_DURATION);
  }
  if ((oldVersion < 6) && (newVersion >= 6)) {
    db.execSQL(StoryMakerDB.Schema.Auth.UPDATE_TABLE_AUTH);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Scenes.UPDATE_TABLE_SCENES_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Scenes.UPDATE_TABLE_SCENES_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_SECTION);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_LOCATION);
    db.execSQL(StoryMakerDB.Schema.Tags.UPDATE_TABLE_TAGS);
    Auth.migrate(mContext,db);
    Project.migrate(mContext,db);
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  Log.d(TAG,""String_Node_Str"" + oldVersion + ""String_Node_Str""+ newVersion);
  if ((oldVersion < 2) && (newVersion >= 2)) {
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS);
  }
  if ((oldVersion < 3) && (newVersion >= 3)) {
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_TRIM_START);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_TRIM_END);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_DURATION);
  }
  if ((oldVersion < 6) && (newVersion >= 6)) {
    db.execSQL(StoryMakerDB.Schema.Auth.UPDATE_TABLE_AUTH);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Scenes.UPDATE_TABLE_SCENES_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Scenes.UPDATE_TABLE_SCENES_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_CREATED_AT);
    db.execSQL(StoryMakerDB.Schema.Media.UPDATE_TABLE_MEDIA_ADD_UPDATED_AT);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_SECTION);
    db.execSQL(StoryMakerDB.Schema.Projects.UPDATE_TABLE_PROJECTS_ADD_LOCATION);
    db.execSQL(StoryMakerDB.Schema.Tags.UPDATE_TABLE_TAGS);
    Auth.migrate(mContext,db);
    Project.migrate(mContext,db);
  }
  if ((oldVersion < 7) && (newVersion >= 7)) {
    @SuppressWarnings(""String_Node_Str"") ArrayList<Scene> scenes=(ArrayList<Scene>)(new SceneTable(db)).getAllAsList(mContext);
    for (    Scene scene : scenes) {
      scene.migrateDeleteDupedMedia();
    }
  }
}",0.9152
187151,"@Override protected void onActivityResult(int reqCode,int resCode,Intent intent){
  if (resCode == RESULT_OK) {
    if (reqCode == REQ_OVERLAY_CAM) {
      File fileMediaFolder=mMPM.getExternalProjectFolder(mProject,getBaseContext());
      if (mProject.getStoryType() == Project.STORY_TYPE_VIDEO) {
        mCapturePath=mMPM.mMediaHelper.captureVideo(fileMediaFolder);
      }
 else       if (mProject.getStoryType() == Project.STORY_TYPE_PHOTO) {
        mCapturePath=mMPM.mMediaHelper.capturePhoto(fileMediaFolder);
      }
 else       if (mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
        mCapturePath=mMPM.mMediaHelper.capturePhoto(fileMediaFolder);
      }
    }
 else     if (reqCode == REQ_YOUTUBE_AUTH) {
      if (resCode == RESULT_OK) {
        String oauthToken=intent.getStringExtra(""String_Node_Str"");
        Log.d(""String_Node_Str"",""String_Node_Str"" + oauthToken);
        mPublishFragment.setYouTubeAuth(oauthToken);
      }
    }
 else {
      try {
        mMPM.handleResponse(intent,mCapturePath);
        refreshClipPager();
      }
 catch (      IOException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"" + mCapturePath,e);
      }
    }
  }
}","@Override protected void onActivityResult(int reqCode,int resCode,Intent intent){
  if (resCode == RESULT_OK) {
    if (reqCode == REQ_OVERLAY_CAM) {
      File fileMediaFolder=mMPM.getExternalProjectFolder(mProject,getBaseContext());
      if (mProject.getStoryType() == Project.STORY_TYPE_VIDEO) {
        mCapturePath=mMPM.mMediaHelper.captureVideo(fileMediaFolder);
      }
 else       if (mProject.getStoryType() == Project.STORY_TYPE_PHOTO) {
        mCapturePath=mMPM.mMediaHelper.capturePhoto(fileMediaFolder);
      }
 else       if (mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
        mCapturePath=mMPM.mMediaHelper.capturePhoto(fileMediaFolder);
      }
    }
 else     if (reqCode == REQ_YOUTUBE_AUTH) {
      if (resCode == RESULT_OK) {
        String oauthToken=intent.getStringExtra(""String_Node_Str"");
        Log.d(""String_Node_Str"",""String_Node_Str"" + oauthToken);
        mPublishFragment.setYouTubeAuth(oauthToken);
      }
    }
 else     if (reqCode == REQ_GOOGLE_DRIVE) {
    }
 else {
      try {
        mMPM.handleResponse(intent,mCapturePath);
        refreshClipPager();
      }
 catch (      IOException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"" + mCapturePath,e);
      }
    }
  }
}",0.9789343246592316
187152,"@Override public void start(){
  io.scal.secureshareui.controller.PublishController controller;
  controller=io.scal.secureshareui.controller.PublishController.getPublishController(FacebookPublishController.SITE_KEY);
  controller.setContext(mContext);
  Project project=mJob.getProject();
  PublishJob publishJob=mJob.getPublishJob();
  String path=publishJob.getLastRenderFilePath();
  if (path != null) {
    controller.upload(project.getTitle(),project.getDescription(),path);
  }
 else {
    Log.d(TAG,""String_Node_Str"");
  }
}","@Override public void start(){
  final io.scal.secureshareui.controller.PublishController controller=io.scal.secureshareui.controller.PublishController.getPublishController(FacebookPublishController.SITE_KEY);
  controller.setContext(mContext);
  final Project project=mJob.getProject();
  final PublishJob publishJob=mJob.getPublishJob();
  final String path=publishJob.getLastRenderFilePath();
  if (path != null) {
    Handler mainHandler=new Handler(mContext.getMainLooper());
    Runnable myRunnable=new Runnable(){
      @Override public void run(){
        controller.upload(project.getTitle(),project.getDescription(),path);
      }
    }
;
    mainHandler.post(myRunnable);
  }
 else {
    Log.d(TAG,""String_Node_Str"");
  }
}",0.8183254344391785
187153,"/** 
 * Inflate record from a cursor via direct db access.   This should be used within DB Migrations and Model or Table classes
 * @param db
 * @param context
 * @param cursor
 */
public Scene(SQLiteDatabase db,Context context,Cursor cursor){
  this(context,cursor);
  this.mDB=db;
}","/** 
 * Inflate record from a cursor via direct db access.   This should be used within DB Migrations and Model or Table classes
 * @param db
 * @param context
 * @param cursor
 */
public Scene(SQLiteDatabase db,Context context,Cursor cursor){
  this(context,cursor.getInt(cursor.getColumnIndex(StoryMakerDB.Schema.Scenes.ID)),cursor.getString(cursor.getColumnIndex(StoryMakerDB.Schema.Scenes.COL_TITLE)),cursor.getString(cursor.getColumnIndex(StoryMakerDB.Schema.Scenes.COL_THUMBNAIL_PATH)),cursor.getInt(cursor.getColumnIndex(StoryMakerDB.Schema.Scenes.COL_PROJECT_INDEX)),cursor.getInt(cursor.getColumnIndex(StoryMakerDB.Schema.Scenes.COL_PROJECT_ID)));
  this.mDB=db;
  calculateMaxClipCount();
}",0.5772357723577236
187154,"public void saveTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  boolean dirty=false;
  if (media.getTrimStart() != mRangeSeekBar.getSelectedMinValue()) {
    media.setTrimStart(mRangeSeekBar.getSelectedMinValue());
    dirty=true;
  }
  if (media.getTrimEnd() != mRangeSeekBar.getSelectedMaxValue()) {
    media.setTrimEnd(mRangeSeekBar.getSelectedMaxValue());
    dirty=true;
  }
  if (dirty)   media.save();
}","public void saveTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  boolean dirty=false;
  mTrimMode=false;
  if (media.getTrimStart() != mRangeSeekBar.getSelectedMinValue()) {
    media.setTrimStart(mRangeSeekBar.getSelectedMinValue());
    dirty=true;
  }
  if (media.getTrimEnd() != mRangeSeekBar.getSelectedMaxValue()) {
    media.setTrimEnd(mRangeSeekBar.getSelectedMaxValue());
    dirty=true;
  }
  if (dirty)   media.save();
}",0.9786276715410572
187155,"public void enableTrimMode(boolean enable){
  if (enable) {
    mLLControlBar.setVisibility(View.GONE);
    mRangeSeekBarContainer.setVisibility(View.VISIBLE);
    mTrimMode=true;
    setupTrimUndo();
  }
 else {
    mLLControlBar.setVisibility(View.VISIBLE);
    mRangeSeekBarContainer.setVisibility(View.GONE);
    mTrimMode=false;
  }
}","public void enableTrimMode(){
  if (mTrimMode) {
    mLLControlBar.setVisibility(View.GONE);
    mRangeSeekBarContainer.setVisibility(View.VISIBLE);
    setupTrimUndo();
  }
 else {
    mLLControlBar.setVisibility(View.VISIBLE);
    mRangeSeekBarContainer.setVisibility(View.GONE);
  }
}",0.8913738019169329
187156,"public void undoSaveTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  if (trimStartUndo != -1)   media.setTrimStart(trimStartUndo);
  if (trimEndUndo != -1)   media.setTrimEnd(trimEndUndo);
  media.save();
}","public void undoSaveTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  mTrimMode=false;
  if (trimStartUndo != -1)   media.setTrimStart(trimStartUndo);
  if (trimEndUndo != -1)   media.setTrimEnd(trimEndUndo);
  media.save();
}",0.960167714884696
187157,"public void loadTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  if (media != null) {
    mRangeSeekBar.setSelectedMinValue(Math.round(media.getTrimStart()));
    if (media.getTrimEnd() > 0) {
      mRangeSeekBar.setSelectedMaxValue(Math.round(media.getTrimEnd()));
    }
 else {
      mRangeSeekBar.setSelectedMaxValue(99);
    }
  }
}","public boolean loadTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  if (media != null) {
    mTrimMode=true;
    mRangeSeekBar.setSelectedMinValue(Math.round(media.getTrimStart()));
    if (media.getTrimEnd() > 0) {
      mRangeSeekBar.setSelectedMaxValue(Math.round(media.getTrimEnd()));
    }
 else {
      mRangeSeekBar.setSelectedMaxValue(99);
    }
  }
  return mTrimMode;
}",0.9329829172141918
187158,"@Override public void onDestroyActionMode(ActionMode mode){
  ((OrderClipsFragment)mFragmentTab1).enableTrimMode(false);
  mTrimMode=false;
  if (actionModelCancel) {
    ((OrderClipsFragment)mFragmentTab1).undoSaveTrim();
  }
 else {
    ((OrderClipsFragment)mFragmentTab1).saveTrim();
  }
}","@Override public void onDestroyActionMode(ActionMode mode){
  if (actionModelCancel) {
    ((OrderClipsFragment)mFragmentTab1).undoSaveTrim();
  }
 else {
    ((OrderClipsFragment)mFragmentTab1).saveTrim();
  }
  ((OrderClipsFragment)mFragmentTab1).enableTrimMode();
}",0.7571428571428571
187159,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.itemForward:
    int idx=getSupportActionBar().getSelectedNavigationIndex();
  if (idx < 2) {
    getSupportActionBar().setSelectedNavigationItem(Math.min(2,idx + 1));
  }
 else {
    mPublishFragment.doPublish();
  }
return true;
case R.id.addFromGallery:
addMediaFromGallery();
return true;
case R.id.addNewShot:
addShotToScene();
return true;
case R.id.delShot:
deleteCurrentShot();
return true;
case R.id.exportProjectFiles:
exportProjectFiles();
return true;
case R.id.itemTrim:
if (mFragmentTab1 != null) {
((OrderClipsFragment)mFragmentTab1).loadTrim();
((OrderClipsFragment)mFragmentTab1).enableTrimMode(true);
startActionMode(mActionModeCallback);
}
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.itemForward:
    int idx=getSupportActionBar().getSelectedNavigationIndex();
  if (idx < 2) {
    getSupportActionBar().setSelectedNavigationItem(Math.min(2,idx + 1));
  }
 else {
    mPublishFragment.doPublish();
  }
return true;
case R.id.addFromGallery:
addMediaFromGallery();
return true;
case R.id.addNewShot:
addShotToScene();
return true;
case R.id.delShot:
deleteCurrentShot();
return true;
case R.id.exportProjectFiles:
exportProjectFiles();
return true;
case R.id.itemTrim:
if (mFragmentTab1 != null) {
if (((OrderClipsFragment)mFragmentTab1).loadTrim()) {
((OrderClipsFragment)mFragmentTab1).enableTrimMode();
startActionMode(mActionModeCallback);
}
return true;
}
return true;
}
return super.onOptionsItemSelected(item);
}",0.9836660617059892
187160,"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  mTrimMode=true;
  return false;
}","@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return false;
}",0.9090909090909092
187161,"@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  int layout=R.layout.fragment_add_clips;
  FragmentManager fm=getSupportFragmentManager();
  if (mMenu != null) {
    mMenu.findItem(R.id.itemInfo).setVisible(false);
    mMenu.findItem(R.id.itemTrim).setVisible(false);
  }
  if (mLastTabFrag instanceof OrderClipsFragment) {
    ((OrderClipsFragment)mLastTabFrag).stopPlaybackOnTabChange();
  }
  if (tab.getPosition() == 0) {
    if (mMenu != null) {
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    layout=R.layout.fragment_add_clips;
    if (mFragmentTab0 == null) {
      mFragmentTab0=new AddClipsFragment();
      Bundle args=new Bundle();
      args.putInt(AddClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
      args.putInt(""String_Node_Str"",layout);
      args.putInt(""String_Node_Str"",mSceneIndex);
      mFragmentTab0.setArguments(args);
      fm.beginTransaction().add(R.id.container,mFragmentTab0,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mFragmentTab0).commit();
    }
    mLastTabFrag=mFragmentTab0;
  }
 else   if (tab.getPosition() == 1) {
    layout=R.layout.fragment_order_clips;
    if (mMenu != null) {
      mMenu.findItem(R.id.itemInfo).setVisible(true);
      mMenu.findItem(R.id.itemForward).setEnabled(true);
      if (!(mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY || mMPM.mProject.getStoryType() == Project.STORY_TYPE_PHOTO)) {
        mMenu.findItem(R.id.itemTrim).setVisible(true);
      }
    }
    if (mFragmentTab1 == null) {
      mFragmentTab1=new OrderClipsFragment();
      Bundle args=new Bundle();
      args.putInt(OrderClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
      args.putInt(""String_Node_Str"",layout);
      mFragmentTab1.setArguments(args);
      fm.beginTransaction().add(R.id.container,mFragmentTab1,layout + ""String_Node_Str"").commit();
    }
 else {
      ((OrderClipsFragment)mFragmentTab1).loadMedia();
      fm.beginTransaction().show(mFragmentTab1).commit();
    }
    mLastTabFrag=mFragmentTab1;
  }
 else   if (tab.getPosition() == 2) {
    if (mMPM.mProject.isTemplateStory()) {
      Intent intent=new Intent(getBaseContext(),StoryTemplateActivity.class);
      intent.putExtra(""String_Node_Str"",mProject.getTemplatePath());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getStoryType());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getId());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getTitle());
      startActivity(intent);
      finish();
    }
 else {
      layout=R.layout.fragment_complete_story;
      if (mPublishFragment == null) {
        mPublishFragment=new PublishFragment();
        Bundle args=new Bundle();
        args.putInt(PublishFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        args.putInt(""String_Node_Str"",layout);
        mPublishFragment.setArguments(args);
        fm.beginTransaction().add(R.id.container,mPublishFragment,layout + ""String_Node_Str"").commit();
      }
 else {
        fm.beginTransaction().show(mPublishFragment).commit();
      }
      mLastTabFrag=mPublishFragment;
    }
  }
}","@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  int layout=R.layout.fragment_add_clips;
  FragmentManager fm=getSupportFragmentManager();
  if (mMenu != null) {
    mMenu.findItem(R.id.itemTrim).setVisible(false);
  }
  if (mLastTabFrag instanceof OrderClipsFragment) {
    ((OrderClipsFragment)mLastTabFrag).stopPlaybackOnTabChange();
  }
  if (tab.getPosition() == 0) {
    if (mMenu != null) {
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    layout=R.layout.fragment_add_clips;
    if (mFragmentTab0 == null) {
      mFragmentTab0=new AddClipsFragment();
      Bundle args=new Bundle();
      args.putInt(AddClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
      args.putInt(""String_Node_Str"",layout);
      args.putInt(""String_Node_Str"",mSceneIndex);
      mFragmentTab0.setArguments(args);
      fm.beginTransaction().add(R.id.container,mFragmentTab0,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mFragmentTab0).commit();
    }
    mLastTabFrag=mFragmentTab0;
  }
 else   if (tab.getPosition() == 1) {
    layout=R.layout.fragment_order_clips;
    if (mMenu != null) {
      mMenu.findItem(R.id.itemForward).setEnabled(true);
      if (!(mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY || mMPM.mProject.getStoryType() == Project.STORY_TYPE_PHOTO)) {
        mMenu.findItem(R.id.itemTrim).setVisible(true);
      }
    }
    if (mFragmentTab1 == null) {
      mFragmentTab1=new OrderClipsFragment();
      Bundle args=new Bundle();
      args.putInt(OrderClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
      args.putInt(""String_Node_Str"",layout);
      mFragmentTab1.setArguments(args);
      fm.beginTransaction().add(R.id.container,mFragmentTab1,layout + ""String_Node_Str"").commit();
    }
 else {
      ((OrderClipsFragment)mFragmentTab1).loadMedia();
      fm.beginTransaction().show(mFragmentTab1).commit();
    }
    mLastTabFrag=mFragmentTab1;
  }
 else   if (tab.getPosition() == 2) {
    if (mMPM.mProject.isTemplateStory()) {
      Intent intent=new Intent(getBaseContext(),StoryTemplateActivity.class);
      intent.putExtra(""String_Node_Str"",mProject.getTemplatePath());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getStoryType());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getId());
      intent.putExtra(""String_Node_Str"",mMPM.mProject.getTitle());
      startActivity(intent);
      finish();
    }
 else {
      layout=R.layout.fragment_complete_story;
      if (mPublishFragment == null) {
        mPublishFragment=new PublishFragment();
        Bundle args=new Bundle();
        args.putInt(PublishFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        args.putInt(""String_Node_Str"",layout);
        mPublishFragment.setArguments(args);
        fm.beginTransaction().add(R.id.container,mPublishFragment,layout + ""String_Node_Str"").commit();
      }
 else {
        fm.beginTransaction().show(mPublishFragment).commit();
      }
      mLastTabFrag=mPublishFragment;
    }
  }
}",0.9828167656977678
187162,"public File captureVideo(File fileExternDir){
  ContentValues values=new ContentValues();
  values.put(MediaStore.Images.Media.TITLE,MediaConstants.CAMCORDER_TMP_FILE);
  values.put(MediaStore.Images.Media.DESCRIPTION,MediaConstants.CAMCORDER_TMP_FILE);
  mActivity.sendBroadcast(new Intent().setAction(AppConstants.Keys.Service.LOCK_LOGS));
  mMediaFileTmp=new File(fileExternDir,new Date().getTime() + '-' + MediaConstants.CAMCORDER_TMP_FILE);
  mMediaUriTmp=Uri.fromFile(mMediaFileTmp);
  Intent intent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
  mActivity.startActivityForResult(intent,MediaConstants.CAMERA_RESULT);
  return mMediaFileTmp;
}","public File captureVideo(File fileExternDir){
  ContentValues values=new ContentValues();
  values.put(MediaStore.Images.Media.TITLE,MediaConstants.CAMCORDER_TMP_FILE);
  values.put(MediaStore.Images.Media.DESCRIPTION,MediaConstants.CAMCORDER_TMP_FILE);
  mActivity.sendBroadcast(new Intent().setAction(AppConstants.Keys.Service.LOCK_LOGS));
  mMediaFileTmp=new File(fileExternDir,new Date().getTime() + '-' + MediaConstants.CAMCORDER_TMP_FILE);
  mMediaUriTmp=Uri.fromFile(mMediaFileTmp);
  Intent intent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
  intent.putExtra(MediaStore.EXTRA_OUTPUT,mMediaUriTmp);
  mActivity.startActivityForResult(intent,MediaConstants.CAMERA_RESULT);
  return mMediaFileTmp;
}",0.9579335793357934
187163,"private static synchronized void initExternalStorage(Context context){
  if (mFileExternDir == null) {
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
    mUseInternal=settings.getBoolean(""String_Node_Str"",false);
    if (mUseInternal)     mFileExternDir=context.getDir(AppConstants.FOLDER_PROJECTS_NAME,Context.MODE_WORLD_WRITEABLE | Context.MODE_WORLD_READABLE);
 else     mFileExternDir=new File(context.getExternalFilesDir(null),AppConstants.FOLDER_PROJECTS_NAME);
    mFileExternDir.mkdirs();
  }
}","@SuppressLint(""String_Node_Str"") private static synchronized void initExternalStorage(Context context){
  if (sFileExternDir == null) {
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());
    mUseInternal=settings.getBoolean(""String_Node_Str"",false);
    boolean isStorageEmulated=false;
    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
      isStorageEmulated=Environment.isExternalStorageEmulated();
    }
    if (mUseInternal && !isStorageEmulated) {
      sFileExternDir=new File(context.getFilesDir(),AppConstants.FOLDER_PROJECTS_NAME);
    }
 else {
      sFileExternDir=new File(Environment.getExternalStorageDirectory(),AppConstants.FOLDER_PROJECTS_NAME);
    }
    sFileExternDir.mkdirs();
  }
}",0.5672514619883041
187164,"public static File getExternalProjectFolder(Project project,Context context){
  initExternalStorage(context);
  String folderName=project.getId() + ""String_Node_Str"";
  File fileProject=new File(mFileExternDir,folderName);
  fileProject.mkdirs();
  return fileProject;
}","public static File getExternalProjectFolder(Project project,Context context){
  initExternalStorage(context);
  String folderName=project.getId() + ""String_Node_Str"";
  File fileProject=new File(sFileExternDir,folderName);
  fileProject.mkdirs();
  return fileProject;
}",0.9962962962962963
187165,"public boolean checkStorageSpace(){
  ArrayList<Media> mList=this.mProject.getMediaAsList();
  Long totalBytesRequired=0l;
  for (  Media media : mList) {
    try {
      if (media == null || media.getPath() == null) {
      }
 else       if (!new File(media.getPath()).exists()) {
        throw new java.io.FileNotFoundException();
      }
 else {
        File currentFile=new File(media.getPath());
        totalBytesRequired+=(long)currentFile.length();
      }
    }
 catch (    java.io.FileNotFoundException fnfe) {
      Log.e(AppConstants.TAG,""String_Node_Str"" + ""String_Node_Str"" + media.getPath(),fnfe);
    }
  }
  String memoryPath;
  if (mUseInternal) {
    memoryPath=Environment.getDataDirectory().getPath();
  }
 else {
    memoryPath=Environment.getExternalStorageDirectory().getPath();
  }
  StatFs stat=new StatFs(memoryPath);
  Long totalBytesAvailable=(long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
  if (totalBytesRequired < totalBytesAvailable) {
    double totalMBRequired=totalBytesRequired / (double)(1024 * 1024);
    Utils.toastOnUiThread(mActivity,String.format(mContext.getString(R.string.error_storage_space),totalMBRequired),true);
    return false;
  }
  return true;
}","public boolean checkStorageSpace(){
  ArrayList<Media> mList=this.mProject.getMediaAsList();
  Long totalBytesRequired=0l;
  for (  Media media : mList) {
    try {
      if (media == null || media.getPath() == null) {
      }
 else       if (!new File(media.getPath()).exists()) {
        throw new java.io.FileNotFoundException();
      }
 else {
        File currentFile=new File(media.getPath());
        totalBytesRequired+=(long)currentFile.length();
      }
    }
 catch (    java.io.FileNotFoundException fnfe) {
      Log.e(AppConstants.TAG,""String_Node_Str"" + ""String_Node_Str"" + media.getPath(),fnfe);
    }
  }
  String memoryPath;
  if (mUseInternal) {
    memoryPath=Environment.getDataDirectory().getPath();
  }
 else {
    memoryPath=Environment.getExternalStorageDirectory().getPath();
  }
  StatFs stat=new StatFs(memoryPath);
  Long totalBytesAvailable=(long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
  if (totalBytesRequired > totalBytesAvailable) {
    double totalMBRequired=totalBytesRequired / (double)(1024 * 1024);
    Utils.toastOnUiThread(mActivity,String.format(mContext.getString(R.string.error_storage_space),totalMBRequired),true);
    return false;
  }
  return true;
}",0.9991769547325104
187166,"public void loadTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  if (media != null) {
    mRangeSeekBar.setSelectedMinValue(media.getTrimStart());
    if (media.getTrimEnd() > 0) {
      mRangeSeekBar.setSelectedMaxValue(media.getTrimEnd());
    }
 else {
      mRangeSeekBar.setSelectedMaxValue(99);
    }
  }
}","public void loadTrim(){
  Media media=mMPM.mScene.getMediaAsArray()[mCurrentClipIdx];
  if (media != null) {
    mRangeSeekBar.setSelectedMinValue(Math.round(media.getTrimStart()));
    if (media.getTrimEnd() > 0) {
      mRangeSeekBar.setSelectedMaxValue(Math.round(media.getTrimEnd()));
    }
 else {
      mRangeSeekBar.setSelectedMaxValue(99);
    }
  }
}",0.9654178674351584
187167,"public void doExportMedia(File fileExport,boolean doCompress,boolean doOverwrite) throws Exception {
  Message msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  ArrayList<Media> mList=mProject.getMediaAsList();
  ArrayList<MediaDesc> alMediaIn=new ArrayList<MediaDesc>();
  ((StoryMakerApp)mActivity.getApplication()).isExternalStorageReady();
  ((StoryMakerApp)mActivity.getApplication()).killZombieProcs();
  Long totalBytesRequired=0l;
  for (  Media media : mList) {
    if (media == null || media.getPath() == null) {
    }
 else     if (!new File(media.getPath()).exists()) {
      throw new java.io.FileNotFoundException(""String_Node_Str"" + ""String_Node_Str"" + media.getPath());
    }
 else {
      File currentFile=new File(media.getPath());
      totalBytesRequired+=(long)currentFile.length();
    }
  }
  String memoryPath;
  if (mUseInternal) {
    memoryPath=Environment.getDataDirectory().getPath();
  }
 else {
    memoryPath=Environment.getExternalStorageDirectory().getPath();
  }
  StatFs stat=new StatFs(memoryPath);
  Long totalBytesAvailable=(long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
  if (totalBytesRequired > totalBytesAvailable) {
    double totalMBRequired=totalBytesRequired / (double)(1024 * 1024);
    Utils.toastOnUiThread(mActivity,String.format(""String_Node_Str"",totalMBRequired),true);
    return;
  }
  File fileRenderTmpDir=getRenderPath(mContext);
  File fileRenderTmp=new File(fileRenderTmpDir,new Date().getTime() + ""String_Node_Str"");
  fileRenderTmp.mkdirs();
  if (mProject.getStoryType() == Project.STORY_TYPE_VIDEO) {
    int mIdx=0;
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        mDesc.path=new File(media.getPath()).getCanonicalPath();
        if (media.getTrimStart() > 0) {
          mDesc.startTime=""String_Node_Str"" + media.getTrimmedStartTime() / 1000F;
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
 else         if ((media.getTrimEnd() < 99) && media.getTrimEnd() > 0) {
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mIdx,mDesc);
        mIdx++;
      }
    }
    mOut=new MediaDesc();
    if (doCompress)     applyExportSettings(mOut);
 else {
      mOut.audioCodec=""String_Node_Str"";
      mOut.audioBitrate=64;
    }
    applyExportSettingsResolution(mOut);
    mOut.mimeType=AppConstants.MimeTypes.MP4;
    mOut.path=fileExport.getCanonicalPath();
    String audioPath=null;
    File fileAudio=new File(getExternalProjectFolder(mProject,mContext),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
    if (fileAudio.exists())     audioPath=fileAudio.getCanonicalPath();
 else {
      fileAudio=new File(mContext.getExternalFilesDir(null),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
      if (fileAudio.exists())       audioPath=fileAudio.getCanonicalPath();
    }
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaVideoExporter mEx=new MediaVideoExporter(mContext,mHandler,alMediaIn,fileRenderTmp,mOut);
      if (audioPath != null) {
        MediaDesc audioTrack=new MediaDesc();
        audioTrack.path=audioPath;
        mEx.addAudioTrack(audioTrack);
      }
      mEx.export();
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
    int mIdx=0;
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        mDesc.path=media.getPath();
        if (media.getTrimStart() > 0) {
          mDesc.startTime=""String_Node_Str"" + media.getTrimmedStartTime() / 1000F;
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
 else         if ((media.getTrimEnd() < 99) && media.getTrimEnd() > 0) {
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mIdx++,mDesc);
      }
    }
    mOut=new MediaDesc();
    mOut.mimeType=AppConstants.MimeTypes.THREEGPP_AUDIO;
    applyExportSettingsAudio(mOut);
    applyExportSettingsResolution(mOut);
    mOut.path=fileExport.getCanonicalPath();
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaAudioExporter mEx=new MediaAudioExporter(mContext,mHandler,alMediaIn,fileRenderTmp,mOut);
      mEx.export();
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_PHOTO) {
    for (    Media media : mList) {
      if (media == null)       continue;
      MediaDesc mDesc=new MediaDesc();
      mDesc.mimeType=media.getMimeType();
      mDesc.path=media.getPath();
      if (mDesc.path != null) {
        File fileSrc=new File(mDesc.path);
        if (fileSrc.exists()) {
          fileExport.getParentFile().mkdirs();
          fileExport.createNewFile();
          IOUtils.copy(new FileInputStream(fileSrc),new FileOutputStream(fileExport));
          mOut=new MediaDesc();
          mOut.path=fileExport.getCanonicalPath();
          mOut.mimeType=AppConstants.MimeTypes.JPEG;
          applyExportSettingsResolution(mOut);
          break;
        }
      }
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        File fileSrc=new File(media.getPath());
        File fileTmp=new File(fileRenderTmp,fileSrc.getName());
        if (!fileTmp.exists()) {
          fileTmp.getParentFile().mkdirs();
          fileTmp.createNewFile();
          IOUtils.copy(new FileInputStream(fileSrc),new FileOutputStream(fileTmp));
        }
        mDesc.path=fileTmp.getCanonicalPath();
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mDesc);
      }
    }
    mOut=new MediaDesc();
    if (doCompress)     applyExportSettings(mOut);
    applyExportSettingsResolution(mOut);
    mOut.path=fileExport.getCanonicalPath();
    mOut.mimeType=AppConstants.MimeTypes.MP4;
    int slideDuration=Integer.parseInt(mSettings.getString(""String_Node_Str"",AppConstants.DEFAULT_SLIDE_DURATION + ""String_Node_Str""));
    String audioPath=null;
    File fileAudio=new File(getExternalProjectFolder(mProject,mContext),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
    if (fileAudio.exists())     audioPath=fileAudio.getCanonicalPath();
 else {
      fileAudio=new File(mContext.getExternalFilesDir(null),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
      if (fileAudio.exists())       audioPath=fileAudio.getCanonicalPath();
    }
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaSlideshowExporter mEx=new MediaSlideshowExporter(mContext,mHandler,alMediaIn,fileRenderTmp,audioPath,slideDuration,mOut);
      mEx.export();
    }
  }
  deleteRecursive(fileRenderTmp,true);
}","public void doExportMedia(File fileExport,boolean doCompress,boolean doOverwrite) throws Exception {
  Message msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  ArrayList<Media> mList=mProject.getMediaAsList();
  ArrayList<MediaDesc> alMediaIn=new ArrayList<MediaDesc>();
  ((StoryMakerApp)mActivity.getApplication()).isExternalStorageReady();
  ((StoryMakerApp)mActivity.getApplication()).killZombieProcs();
  Long totalBytesRequired=0l;
  for (  Media media : mList) {
    if (media == null || media.getPath() == null) {
    }
 else     if (!new File(media.getPath()).exists()) {
      throw new java.io.FileNotFoundException(""String_Node_Str"" + ""String_Node_Str"" + media.getPath());
    }
 else {
      File currentFile=new File(media.getPath());
      totalBytesRequired+=(long)currentFile.length();
    }
  }
  String memoryPath;
  if (mUseInternal) {
    memoryPath=Environment.getDataDirectory().getPath();
  }
 else {
    memoryPath=Environment.getExternalStorageDirectory().getPath();
  }
  StatFs stat=new StatFs(memoryPath);
  Long totalBytesAvailable=(long)stat.getAvailableBlocks() * (long)stat.getBlockSize();
  if (totalBytesRequired > totalBytesAvailable) {
    double totalMBRequired=totalBytesRequired / (double)(1024 * 1024);
    Utils.toastOnUiThread(mActivity,String.format(""String_Node_Str"",totalMBRequired),true);
    return;
  }
  File fileRenderTmpDir=getRenderPath(mContext);
  File fileRenderTmp=new File(fileRenderTmpDir,new Date().getTime() + ""String_Node_Str"");
  fileRenderTmp.mkdirs();
  if (mProject.getStoryType() == Project.STORY_TYPE_VIDEO) {
    int mIdx=0;
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        mDesc.path=new File(media.getPath()).getCanonicalPath();
        if (media.getTrimStart() > 0) {
          mDesc.startTime=""String_Node_Str"" + media.getTrimmedStartTimeFloat() / 1000F;
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
 else         if ((media.getTrimEnd() < 99) && media.getTrimEnd() > 0) {
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mIdx,mDesc);
        mIdx++;
      }
    }
    mOut=new MediaDesc();
    if (doCompress)     applyExportSettings(mOut);
 else {
      mOut.audioCodec=""String_Node_Str"";
      mOut.audioBitrate=64;
    }
    applyExportSettingsResolution(mOut);
    mOut.mimeType=AppConstants.MimeTypes.MP4;
    mOut.path=fileExport.getCanonicalPath();
    String audioPath=null;
    File fileAudio=new File(getExternalProjectFolder(mProject,mContext),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
    if (fileAudio.exists())     audioPath=fileAudio.getCanonicalPath();
 else {
      fileAudio=new File(mContext.getExternalFilesDir(null),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
      if (fileAudio.exists())       audioPath=fileAudio.getCanonicalPath();
    }
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaVideoExporter mEx=new MediaVideoExporter(mContext,mHandler,alMediaIn,fileRenderTmp,mOut);
      if (audioPath != null) {
        MediaDesc audioTrack=new MediaDesc();
        audioTrack.path=audioPath;
        mEx.addAudioTrack(audioTrack);
      }
      mEx.export();
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
    int mIdx=0;
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        mDesc.path=media.getPath();
        if (media.getTrimStart() > 0) {
          mDesc.startTime=""String_Node_Str"" + media.getTrimmedStartTimeFloat() / 1000F;
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
 else         if ((media.getTrimEnd() < 99) && media.getTrimEnd() > 0) {
          mDesc.duration=""String_Node_Str"" + media.getTrimmedDuration() / 1000F;
        }
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mIdx++,mDesc);
      }
    }
    mOut=new MediaDesc();
    mOut.mimeType=AppConstants.MimeTypes.THREEGPP_AUDIO;
    applyExportSettingsAudio(mOut);
    applyExportSettingsResolution(mOut);
    mOut.path=fileExport.getCanonicalPath();
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaAudioExporter mEx=new MediaAudioExporter(mContext,mHandler,alMediaIn,fileRenderTmp,mOut);
      mEx.export();
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_PHOTO) {
    for (    Media media : mList) {
      if (media == null)       continue;
      MediaDesc mDesc=new MediaDesc();
      mDesc.mimeType=media.getMimeType();
      mDesc.path=media.getPath();
      if (mDesc.path != null) {
        File fileSrc=new File(mDesc.path);
        if (fileSrc.exists()) {
          fileExport.getParentFile().mkdirs();
          fileExport.createNewFile();
          IOUtils.copy(new FileInputStream(fileSrc),new FileOutputStream(fileExport));
          mOut=new MediaDesc();
          mOut.path=fileExport.getCanonicalPath();
          mOut.mimeType=AppConstants.MimeTypes.JPEG;
          applyExportSettingsResolution(mOut);
          break;
        }
      }
    }
  }
 else   if (mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
    for (    Media media : mList) {
      if (media != null) {
        MediaDesc mDesc=new MediaDesc();
        mDesc.mimeType=media.getMimeType();
        File fileSrc=new File(media.getPath());
        File fileTmp=new File(fileRenderTmp,fileSrc.getName());
        if (!fileTmp.exists()) {
          fileTmp.getParentFile().mkdirs();
          fileTmp.createNewFile();
          IOUtils.copy(new FileInputStream(fileSrc),new FileOutputStream(fileTmp));
        }
        mDesc.path=fileTmp.getCanonicalPath();
        if (doCompress)         applyExportSettings(mDesc);
        applyExportSettingsResolution(mDesc);
        alMediaIn.add(mDesc);
      }
    }
    mOut=new MediaDesc();
    if (doCompress)     applyExportSettings(mOut);
    applyExportSettingsResolution(mOut);
    mOut.path=fileExport.getCanonicalPath();
    mOut.mimeType=AppConstants.MimeTypes.MP4;
    int slideDuration=Integer.parseInt(mSettings.getString(""String_Node_Str"",AppConstants.DEFAULT_SLIDE_DURATION + ""String_Node_Str""));
    String audioPath=null;
    File fileAudio=new File(getExternalProjectFolder(mProject,mContext),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
    if (fileAudio.exists())     audioPath=fileAudio.getCanonicalPath();
 else {
      fileAudio=new File(mContext.getExternalFilesDir(null),""String_Node_Str"" + mScene.getId() + ""String_Node_Str"");
      if (fileAudio.exists())       audioPath=fileAudio.getCanonicalPath();
    }
    if ((!fileExport.exists()) || doOverwrite) {
      if (fileExport.exists())       fileExport.delete();
      fileExport.getParentFile().mkdirs();
      MediaSlideshowExporter mEx=new MediaSlideshowExporter(mContext,mHandler,alMediaIn,fileRenderTmp,audioPath,slideDuration,mOut);
      mEx.export();
    }
  }
  deleteRecursive(fileRenderTmp,true);
}",0.999332710529828
187168,"public void setFadeLength(double fadeLen){
  this.fadeLen=fadeLen;
}","public void setFadeLength(float fadeLen){
  this.fadeLen=fadeLen;
}",0.9333333333333332
187169,"private void concatMediaFiles(ArrayList<MediaDesc> listMediaDesc,MediaDesc mdout) throws Exception {
  SoxController sxCon=new SoxController(mContext,sc);
  int exportBitRate=mdout.audioBitrate;
  String exportCodec=mdout.audioCodec;
  FfmpegController ffmpegc=new FfmpegController(mContext,mFileTemp);
  ArrayList<MediaDesc> alAudio=new ArrayList<MediaDesc>();
  Message msg=null;
  int wavIdx=0;
  for (  MediaDesc mediaIn : listMediaDesc) {
    if (new File(mediaIn.path).exists()) {
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",String.format(""String_Node_Str"",(wavIdx + 1),listMediaDesc.size()));
      mHandler.sendMessage(msg);
      MediaDesc audioOut=ffmpegc.convertToWaveAudio(mediaIn,new File(mFileTemp,wavIdx + ""String_Node_Str"").getCanonicalPath(),mAudioSampleRate,CHANNELS,sc);
      alAudio.add(audioOut);
      double duration=sxCon.getLength(new File(audioOut.path).getCanonicalPath());
      Log.d(AppConstants.TAG,""String_Node_Str"" + wavIdx + ""String_Node_Str""+ duration);
      if (mediaIn.duration == null) {
        mediaIn.duration=String.format(Locale.US,""String_Node_Str"",duration);
      }
 else {
        Log.d(AppConstants.TAG,""String_Node_Str"" + wavIdx + ""String_Node_Str""+ mediaIn.duration);
      }
      wavIdx++;
    }
 else {
      throw new FileNotFoundException(mediaIn.path);
    }
  }
  String fileOut=alAudio.get(0).path;
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  for (int i=1; i < alAudio.size(); i++) {
    String fileAdd=new File(alAudio.get(i).path).getCanonicalPath();
    CrossfadeCat xCat=new CrossfadeCat(sxCon,fileOut,fileAdd,fadeLen,fileOut);
    xCat.start();
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",String.format(""String_Node_Str"",(i + 1),alAudio.size()));
    mHandler.sendMessage(msg);
  }
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  String fadeFileOut=sxCon.fadeAudio(fileOut,fadeType,fadeLen,0,fadeLen);
  MediaDesc mdFinalIn=new MediaDesc();
  mdFinalIn.path=fadeFileOut;
  mdout.audioBitrate=exportBitRate;
  mdout.audioCodec=exportCodec;
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  MediaDesc exportOut=ffmpegc.convertTo3GPAudio(mdFinalIn,mdout,sc);
}","private void concatMediaFiles(ArrayList<MediaDesc> listMediaDesc,MediaDesc mdout) throws Exception {
  SoxController sxCon=new SoxController(mContext,sc);
  int exportBitRate=mdout.audioBitrate;
  String exportCodec=mdout.audioCodec;
  FfmpegController ffmpegc=new FfmpegController(mContext,mFileTemp);
  ArrayList<MediaDesc> alAudio=new ArrayList<MediaDesc>();
  Message msg=null;
  int wavIdx=0;
  for (  MediaDesc mediaIn : listMediaDesc) {
    if (new File(mediaIn.path).exists()) {
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",String.format(""String_Node_Str"",(wavIdx + 1),listMediaDesc.size()));
      mHandler.sendMessage(msg);
      MediaDesc audioOut=ffmpegc.convertToWaveAudio(mediaIn,new File(mFileTemp,wavIdx + ""String_Node_Str"").getCanonicalPath(),mAudioSampleRate,CHANNELS,sc);
      alAudio.add(audioOut);
      float duration=(float)sxCon.getLength(new File(audioOut.path).getCanonicalPath());
      Log.d(AppConstants.TAG,""String_Node_Str"" + wavIdx + ""String_Node_Str""+ duration);
      if (mediaIn.duration == null) {
        mediaIn.duration=String.format(Locale.US,""String_Node_Str"",duration);
      }
 else {
        Log.d(AppConstants.TAG,""String_Node_Str"" + wavIdx + ""String_Node_Str""+ mediaIn.duration);
      }
      wavIdx++;
    }
 else {
      throw new FileNotFoundException(mediaIn.path);
    }
  }
  String fileOut=alAudio.get(0).path;
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  for (int i=1; i < alAudio.size(); i++) {
    String fileAdd=new File(alAudio.get(i).path).getCanonicalPath();
    CrossfadeCat xCat=new CrossfadeCat(sxCon,fileOut,fileAdd,fadeLen,fileOut);
    xCat.start();
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",String.format(""String_Node_Str"",(i + 1),alAudio.size()));
    mHandler.sendMessage(msg);
  }
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  String fadeFileOut=sxCon.fadeAudio(fileOut,fadeType,fadeLen,0,fadeLen);
  MediaDesc mdFinalIn=new MediaDesc();
  mdFinalIn.path=fadeFileOut;
  mdout.audioBitrate=exportBitRate;
  mdout.audioCodec=exportCodec;
  msg=mHandler.obtainMessage(0);
  msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
  mHandler.sendMessage(msg);
  MediaDesc exportOut=ffmpegc.convertTo3GPAudio(mdFinalIn,mdout,sc);
}",0.9922290388548056
187170,"public void export(){
  try {
    ffmpegc=new FfmpegController(mContext,mFileProject);
    maOut=new MediaDesc();
    maOut.path=new File(mFileProject,""String_Node_Str"").getCanonicalPath();
    Message msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    maExport=new MediaAudioExporter(mContext,mHandler,mMediaList,mFileProject,maOut);
    maExport.setFadeLength(mFadeLen);
    maExport.export();
    SoxController sxCon=new SoxController(mContext,sc);
    if (mAudioTracks.size() > 0) {
      ArrayList<String> mAudioTracksPaths=new ArrayList<String>();
      int idxAudioTracks=0;
      for (      MediaDesc audioTrack : mAudioTracks) {
        msg=mHandler.obtainMessage(0);
        msg.getData().putString(""String_Node_Str"",""String_Node_Str"" + (idxAudioTracks + 1) + ""String_Node_Str""+ mAudioTracks.size());
        mHandler.sendMessage(msg);
        File fileAudioTrack=new File(mFileProject,idxAudioTracks + ""String_Node_Str"");
        MediaDesc out=ffmpegc.convertToWaveAudio(audioTrack,fileAudioTrack.getCanonicalPath(),mAudioSampleRate,MediaAudioExporter.CHANNELS,sc);
        mAudioTracksPaths.add(out.path);
        idxAudioTracks++;
      }
      mAudioTracksPaths.add(maOut.path);
      String finalAudioMix=maOut.path + ""String_Node_Str"";
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandler.sendMessage(msg);
      sxCon.combineMix(mAudioTracksPaths,finalAudioMix);
      if (!new File(finalAudioMix).exists()) {
        throw new Exception(""String_Node_Str"");
      }
      maOut.path=finalAudioMix;
    }
    MediaDesc mMerge=new MediaDesc();
    mMerge.path=new File(mFileProject,""String_Node_Str"").getCanonicalPath();
    Double videoFadeLen=mFadeLen;
    for (int i=0; i < mMediaList.size(); i++) {
      MediaDesc media=mMediaList.get(i);
      if (media.duration == null) {
        media=ffmpegc.getInfo(media);
        media.duration=String.format(Locale.US,""String_Node_Str"",Double.parseDouble(media.duration) - (videoFadeLen));
      }
 else {
        double newDuration=Double.parseDouble(media.duration) - (videoFadeLen);
        media.duration=String.format(Locale.US,""String_Node_Str"",newDuration);
      }
      Log.d(AppConstants.TAG,""String_Node_Str"" + media.startTime + ""String_Node_Str""+ media.duration);
    }
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    ffmpegc.concatAndTrimFilesMP4Stream(mMediaList,mMerge,mPreconvertClipsToMP4,mUseCatCmd,sc);
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    ffmpegc.combineAudioAndVideo(mMerge,maOut,mOut,sc);
    msg=mHandler.obtainMessage(0);
    mHandler.sendMessage(msg);
    File fileTest=new File(mOut.path);
    if (fileTest.exists() && fileTest.length() > 0) {
      MediaScannerConnection.scanFile(mContext,new String[]{mOut.path},new String[]{mOut.mimeType},new OnScanCompletedListener(){
        @Override public void onScanCompleted(        String path,        Uri uri){
          Message msg=mHandler.obtainMessage(4);
          msg.getData().putString(""String_Node_Str"",mOut.path);
          mHandler.sendMessage(msg);
        }
      }
);
    }
 else {
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandler.sendMessage(msg);
    }
  }
 catch (  Exception e) {
    Message msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    mHandler.sendMessage(msg);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}","public void export(){
  try {
    ffmpegc=new FfmpegController(mContext,mFileProject);
    maOut=new MediaDesc();
    maOut.path=new File(mFileProject,""String_Node_Str"").getCanonicalPath();
    Message msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    maExport=new MediaAudioExporter(mContext,mHandler,mMediaList,mFileProject,maOut);
    maExport.setFadeLength(mFadeLen);
    maExport.export();
    SoxController sxCon=new SoxController(mContext,sc);
    if (mAudioTracks.size() > 0) {
      ArrayList<String> mAudioTracksPaths=new ArrayList<String>();
      int idxAudioTracks=0;
      for (      MediaDesc audioTrack : mAudioTracks) {
        msg=mHandler.obtainMessage(0);
        msg.getData().putString(""String_Node_Str"",""String_Node_Str"" + (idxAudioTracks + 1) + ""String_Node_Str""+ mAudioTracks.size());
        mHandler.sendMessage(msg);
        File fileAudioTrack=new File(mFileProject,idxAudioTracks + ""String_Node_Str"");
        MediaDesc out=ffmpegc.convertToWaveAudio(audioTrack,fileAudioTrack.getCanonicalPath(),mAudioSampleRate,MediaAudioExporter.CHANNELS,sc);
        mAudioTracksPaths.add(out.path);
        idxAudioTracks++;
      }
      mAudioTracksPaths.add(maOut.path);
      String finalAudioMix=maOut.path + ""String_Node_Str"";
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandler.sendMessage(msg);
      sxCon.combineMix(mAudioTracksPaths,finalAudioMix);
      if (!new File(finalAudioMix).exists()) {
        throw new Exception(""String_Node_Str"");
      }
      maOut.path=finalAudioMix;
    }
    MediaDesc mMerge=new MediaDesc();
    mMerge.path=new File(mFileProject,""String_Node_Str"").getCanonicalPath();
    float videoFadeLen=mFadeLen;
    for (int i=0; i < mMediaList.size(); i++) {
      MediaDesc media=mMediaList.get(i);
      if (media.duration == null) {
        media=ffmpegc.getInfo(media);
        media.duration=String.format(Locale.US,""String_Node_Str"",Float.parseFloat(media.duration) - (videoFadeLen));
      }
 else {
        float newDuration=Float.parseFloat(media.duration) - (videoFadeLen);
        media.duration=String.format(Locale.US,""String_Node_Str"",newDuration);
      }
      Log.d(AppConstants.TAG,""String_Node_Str"" + media.startTime + ""String_Node_Str""+ media.duration);
    }
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    ffmpegc.concatAndTrimFilesMP4Stream(mMediaList,mMerge,mPreconvertClipsToMP4,mUseCatCmd,sc);
    msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
    mHandler.sendMessage(msg);
    ffmpegc.combineAudioAndVideo(mMerge,maOut,mOut,sc);
    msg=mHandler.obtainMessage(0);
    mHandler.sendMessage(msg);
    File fileTest=new File(mOut.path);
    if (fileTest.exists() && fileTest.length() > 0) {
      MediaScannerConnection.scanFile(mContext,new String[]{mOut.path},new String[]{mOut.mimeType},new OnScanCompletedListener(){
        @Override public void onScanCompleted(        String path,        Uri uri){
          Message msg=mHandler.obtainMessage(4);
          msg.getData().putString(""String_Node_Str"",mOut.path);
          mHandler.sendMessage(msg);
        }
      }
);
    }
 else {
      msg=mHandler.obtainMessage(0);
      msg.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandler.sendMessage(msg);
    }
  }
 catch (  Exception e) {
    Message msg=mHandler.obtainMessage(0);
    msg.getData().putString(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    mHandler.sendMessage(msg);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}",0.9879903923138512
187171,"/** 
 * @return the trimEnd
 */
public int getTrimEnd(){
  return trimEnd;
}","/** 
 * @return the trimEnd
 */
public float getTrimEnd(){
  return trimEnd;
}",0.961038961038961
187172,"/** 
 * @param trimEnd the trimEnd to set
 */
public void setTrimEnd(int trimEnd){
  this.trimEnd=trimEnd;
}","/** 
 * @param trimEnd the trimEnd to set
 */
public void setTrimEnd(float trimEnd){
  this.trimEnd=trimEnd;
}",0.9724770642201837
187173,"/** 
 * @return the trimStart
 */
public int getTrimStart(){
  return trimStart;
}","/** 
 * @return the trimStart
 */
public float getTrimStart(){
  return trimStart;
}",0.963855421686747
187174,"/** 
 * @return the duration
 */
public int getDuration(){
  return duration;
}","/** 
 * @return the duration
 */
public float getDuration(){
  return duration;
}",0.9625
187175,"/** 
 * @param trimStart the trimStart to set
 */
public void setTrimStart(int trimStart){
  this.trimStart=trimStart;
}","/** 
 * @param trimStart the trimStart to set
 */
public void setTrimStart(float trimStart){
  this.trimStart=trimStart;
}",0.975206611570248
187176,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  try {
    if (mActivity == null)     initAddClips();
  }
 catch (  Exception e) {
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
    return null;
  }
  int layout=getArguments().getInt(""String_Node_Str"");
  View view=inflater.inflate(layout,null);
  if (layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScene(mScene).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > mTemplate.getScene(mScene).getClips().size()) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  try {
    if (mActivity == null)     initAddClips();
  }
 catch (  Exception e) {
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
    return null;
  }
  int layout=getArguments().getInt(""String_Node_Str"");
  View view=inflater.inflate(layout,null);
  if (layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScene(mScene).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > mTemplate.getScene(mScene).getClips().size()) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}",0.9885180240320428
187177,"public boolean handleBack(){
  if (mSubFolder != null) {
    mSubFolder=null;
    showLessonGroups();
    mHandler.sendEmptyMessage(3);
    return true;
  }
 else   return false;
}","public boolean handleBack(){
  if (mSubFolder != null) {
    mSubFolder=null;
    showLessonGroups();
    mHandler.sendEmptyMessage(3);
    return true;
  }
  return false;
}",0.9830508474576272
187178,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case 0:
    if (msg.getData().containsKey(""String_Node_Str""))     Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_SHORT).show();
  Object adapter=getAdapter();
if (adapter != null) {
  if (adapter instanceof ArrayAdapter) {
    ((ArrayAdapter)adapter).notifyDataSetChanged();
  }
 else   if (adapter instanceof ListAdapterWrapper) {
    ((ListAdapterWrapper)adapter).notifyDataSetChanged();
  }
}
break;
case 1:
mListLessons=mLessonManager.loadLessonList(getContext(),mLocale.getLanguage());
loadLessonListAdapter();
break;
case 2:
mActivity.mProgressLoading.cancel();
break;
case 3:
setAdapter(new LessonGroupArrayAdapter(getContext(),R.layout.list_lesson_row,mLessonGroups));
break;
case 4:
if (mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_LONG).show();
break;
case 5:
mActivity.updateLessonProgress(msg.getData().getString(""String_Node_Str""));
default :
}
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case 0:
    if (msg.getData().containsKey(""String_Node_Str""))     Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_SHORT).show();
  Object adapter=getAdapter();
if (adapter != null) {
  if (adapter instanceof ArrayAdapter) {
    ((ArrayAdapter)adapter).notifyDataSetChanged();
  }
 else   if (adapter instanceof ListAdapterWrapper) {
    ((ListAdapterWrapper)adapter).notifyDataSetChanged();
  }
}
break;
case 1:
mListLessons=mLessonManager.loadLessonList(getContext(),mLocale.getLanguage());
loadLessonListAdapter();
break;
case 2:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
break;
case 3:
setAdapter(new LessonGroupArrayAdapter(getContext(),R.layout.list_lesson_row,mLessonGroups));
break;
case 4:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_LONG).show();
break;
case 5:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.updateLessonProgress(msg.getData().getString(""String_Node_Str""));
default :
}
}",0.9392781316348195
187179,"public static void updateLessonResource(Context context,Lesson lesson,String locale) throws IOException {
  File fileIdx=new File(lesson.mResourcePath);
  InputStream is=context.getAssets().open(""String_Node_Str"" + locale);
  OutputStream os=new java.io.FileOutputStream(fileIdx);
  IOUtils.copyLarge(is,os);
}","public static void updateLessonResource(Context context,Lesson lesson,String locale) throws IOException {
  File fileIdx=new File(lesson.mResourcePath);
  InputStream is=context.getAssets().open(""String_Node_Str"" + locale);
  OutputStream os=new java.io.FileOutputStream(fileIdx);
  IOUtils.copy(is,os);
}",0.991869918699187
187180,"public void run(){
  Log.d(AppConstants.TAG,""String_Node_Str"");
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    lessonFolder.mkdirs();
    Log.d(AppConstants.TAG,""String_Node_Str"" + lessonFolder.getAbsolutePath());
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
 else {
      httpClient.useProxy(false,null,null,-1);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          if (mListener != null) {
            mListener.lessonLoadingStatusMessage(String.format(""String_Node_Str"" + mContext.getString(R.string._of_) + ""String_Node_Str"",(i + 1),jarray.length()));
          }
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              if (mListener != null)               mListener.lessonLoadingStatusMessage(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ jarray.length()+ ""String_Node_Str""+ ""String_Node_Str""+ remoteLen / 1000000 + ""String_Node_Str"");
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}","public void run(){
  Log.d(AppConstants.TAG,""String_Node_Str"");
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    lessonFolder.mkdirs();
    Log.d(AppConstants.TAG,""String_Node_Str"" + lessonFolder.getAbsolutePath());
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
    boolean useDownloadManager=settings.getBoolean(""String_Node_Str"",true);
    StrongHttpsClient httpClient=getHttpClientInstance();
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
 else {
      httpClient.useProxy(false,null,null,-1);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          if (mListener != null) {
            mListener.lessonLoadingStatusMessage(String.format(""String_Node_Str"" + mContext.getString(R.string._of_) + ""String_Node_Str"",(i + 1),jarray.length()));
          }
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          if (useDownloadManager) {
            URI urlLesson=new URI(sUrlLesson);
            String fileName=urlLesson.getPath();
            fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
            File fileZip=new File(lessonFolder,fileName);
            doDownloadManager(Uri.parse(sUrlLesson),title,fileName,Uri.fromFile(fileZip));
          }
 else {
            URI urlLesson=new URI(sUrlLesson);
            request=new HttpGet(urlLesson);
            response=httpClient.execute(request);
            String fileName=urlLesson.getPath();
            fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
            File fileZip=new File(lessonFolder,fileName);
            long remoteLen=response.getEntity().getContentLength();
            if (fileZip.exists()) {
              long localLen=fileZip.length();
              if (localLen == remoteLen) {
                Log.d(AppConstants.TAG,""String_Node_Str"");
                response.getEntity().consumeContent();
                continue;
              }
 else {
                Log.d(AppConstants.TAG,""String_Node_Str"");
                fileZip.delete();
              }
            }
            if (mListener != null)             mListener.lessonLoadingStatusMessage(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ jarray.length()+ ""String_Node_Str""+ ""String_Node_Str""+ remoteLen / 1000000 + ""String_Node_Str"");
            fileZip.getParentFile().mkdirs();
            BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
            IOUtils.copy(bis,new FileOutputStream(fileZip));
            unpack(fileZip,lessonFolder);
            fileZip.delete();
          }
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}",0.6810286487705842
187181,"/** 
 * Unpacks the give zip file using the built in Java facilities for unzip. 
 */
@SuppressWarnings(""String_Node_Str"") public void unpack(File zipFile,File rootDir) throws IOException {
  ZipFile zip=new ZipFile(zipFile);
  Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zip.entries();
  ZipEntry entry=null;
  while (entries.hasMoreElements()) {
    entry=entries.nextElement();
    java.io.File f=new java.io.File(rootDir,entry.getName());
    if (entry.isDirectory()) {
      continue;
    }
    if (!f.exists()) {
      f.getParentFile().mkdirs();
      f.createNewFile();
    }
    InputStream is=zip.getInputStream(entry);
    OutputStream os=new java.io.FileOutputStream(f);
    IOUtils.copyLarge(is,os);
  }
}","/** 
 * Unpacks the give zip file using the built in Java facilities for unzip. 
 */
@SuppressWarnings(""String_Node_Str"") public void unpack(File zipFile,File rootDir) throws IOException {
  ZipFile zip=new ZipFile(zipFile);
  Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zip.entries();
  ZipEntry entry=null;
  while (entries.hasMoreElements()) {
    entry=entries.nextElement();
    java.io.File f=new java.io.File(rootDir,entry.getName());
    if (entry.isDirectory()) {
      continue;
    }
    if (!f.exists()) {
      f.getParentFile().mkdirs();
      f.createNewFile();
    }
    InputStream is=zip.getInputStream(entry);
    OutputStream os=new java.io.FileOutputStream(f);
    IOUtils.copy(is,os);
  }
}",0.9965445749827228
187182,"public boolean handleBack(){
  if (mSubFolder != null) {
    mSubFolder=null;
    showLessonGroups();
    mHandler.sendEmptyMessage(3);
    return true;
  }
 else   return false;
}","public boolean handleBack(){
  if (mSubFolder != null) {
    mSubFolder=null;
    showLessonGroups();
    mHandler.sendEmptyMessage(3);
    return true;
  }
  return false;
}",0.9830508474576272
187183,"@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case 0:
    if (msg.getData().containsKey(""String_Node_Str""))     Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_SHORT).show();
  Object adapter=getAdapter();
if (adapter != null) {
  if (adapter instanceof ArrayAdapter) {
    ((ArrayAdapter)adapter).notifyDataSetChanged();
  }
 else   if (adapter instanceof ListAdapterWrapper) {
    ((ListAdapterWrapper)adapter).notifyDataSetChanged();
  }
}
break;
case 1:
mListLessons=mLessonManager.loadLessonList(getContext(),mLocale.getLanguage());
loadLessonListAdapter();
break;
case 2:
mActivity.mProgressLoading.cancel();
break;
case 3:
setAdapter(new LessonGroupArrayAdapter(getContext(),R.layout.list_lesson_row,mLessonGroups));
break;
case 4:
if (mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_LONG).show();
break;
case 5:
mActivity.updateLessonProgress(msg.getData().getString(""String_Node_Str""));
default :
}
}","@Override public void handleMessage(Message msg){
  super.handleMessage(msg);
switch (msg.what) {
case 0:
    if (msg.getData().containsKey(""String_Node_Str""))     Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_SHORT).show();
  Object adapter=getAdapter();
if (adapter != null) {
  if (adapter instanceof ArrayAdapter) {
    ((ArrayAdapter)adapter).notifyDataSetChanged();
  }
 else   if (adapter instanceof ListAdapterWrapper) {
    ((ListAdapterWrapper)adapter).notifyDataSetChanged();
  }
}
break;
case 1:
mListLessons=mLessonManager.loadLessonList(getContext(),mLocale.getLanguage());
loadLessonListAdapter();
break;
case 2:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
break;
case 3:
setAdapter(new LessonGroupArrayAdapter(getContext(),R.layout.list_lesson_row,mLessonGroups));
break;
case 4:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.mProgressLoading.cancel();
Toast.makeText(getContext(),msg.getData().getString(""String_Node_Str""),Toast.LENGTH_LONG).show();
break;
case 5:
if (mActivity != null && mActivity.mProgressLoading != null) mActivity.updateLessonProgress(msg.getData().getString(""String_Node_Str""));
default :
}
}",0.9392781316348195
187184,"public static void updateLessonResource(Context context,Lesson lesson,String locale) throws IOException {
  File fileIdx=new File(lesson.mResourcePath);
  InputStream is=context.getAssets().open(""String_Node_Str"" + locale);
  OutputStream os=new java.io.FileOutputStream(fileIdx);
  IOUtils.copyLarge(is,os);
}","public static void updateLessonResource(Context context,Lesson lesson,String locale) throws IOException {
  File fileIdx=new File(lesson.mResourcePath);
  InputStream is=context.getAssets().open(""String_Node_Str"" + locale);
  OutputStream os=new java.io.FileOutputStream(fileIdx);
  IOUtils.copy(is,os);
}",0.991869918699187
187185,"public void run(){
  Log.d(AppConstants.TAG,""String_Node_Str"");
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    lessonFolder.mkdirs();
    Log.d(AppConstants.TAG,""String_Node_Str"" + lessonFolder.getAbsolutePath());
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
 else {
      httpClient.useProxy(false,null,null,-1);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          if (mListener != null) {
            mListener.lessonLoadingStatusMessage(String.format(""String_Node_Str"" + mContext.getString(R.string._of_) + ""String_Node_Str"",(i + 1),jarray.length()));
          }
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              if (mListener != null)               mListener.lessonLoadingStatusMessage(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ jarray.length()+ ""String_Node_Str""+ ""String_Node_Str""+ remoteLen / 1000000 + ""String_Node_Str"");
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}","public void run(){
  Log.d(AppConstants.TAG,""String_Node_Str"");
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    lessonFolder.mkdirs();
    Log.d(AppConstants.TAG,""String_Node_Str"" + lessonFolder.getAbsolutePath());
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
    boolean useDownloadManager=settings.getBoolean(""String_Node_Str"",true);
    StrongHttpsClient httpClient=getHttpClientInstance();
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
 else {
      httpClient.useProxy(false,null,null,-1);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          if (mListener != null) {
            mListener.lessonLoadingStatusMessage(String.format(""String_Node_Str"" + mContext.getString(R.string._of_) + ""String_Node_Str"",(i + 1),jarray.length()));
          }
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          if (useDownloadManager) {
            URI urlLesson=new URI(sUrlLesson);
            String fileName=urlLesson.getPath();
            fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
            File fileZip=new File(lessonFolder,fileName);
            doDownloadManager(Uri.parse(sUrlLesson),title,fileName,Uri.fromFile(fileZip));
          }
 else {
            URI urlLesson=new URI(sUrlLesson);
            request=new HttpGet(urlLesson);
            response=httpClient.execute(request);
            String fileName=urlLesson.getPath();
            fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
            File fileZip=new File(lessonFolder,fileName);
            long remoteLen=response.getEntity().getContentLength();
            if (fileZip.exists()) {
              long localLen=fileZip.length();
              if (localLen == remoteLen) {
                Log.d(AppConstants.TAG,""String_Node_Str"");
                response.getEntity().consumeContent();
                continue;
              }
 else {
                Log.d(AppConstants.TAG,""String_Node_Str"");
                fileZip.delete();
              }
            }
            if (mListener != null)             mListener.lessonLoadingStatusMessage(""String_Node_Str"" + (i + 1) + ""String_Node_Str""+ jarray.length()+ ""String_Node_Str""+ ""String_Node_Str""+ remoteLen / 1000000 + ""String_Node_Str"");
            fileZip.getParentFile().mkdirs();
            BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
            IOUtils.copy(bis,new FileOutputStream(fileZip));
            unpack(fileZip,lessonFolder);
            fileZip.delete();
          }
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}",0.6810286487705842
187186,"/** 
 * Unpacks the give zip file using the built in Java facilities for unzip. 
 */
@SuppressWarnings(""String_Node_Str"") public void unpack(File zipFile,File rootDir) throws IOException {
  ZipFile zip=new ZipFile(zipFile);
  Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zip.entries();
  ZipEntry entry=null;
  while (entries.hasMoreElements()) {
    entry=entries.nextElement();
    java.io.File f=new java.io.File(rootDir,entry.getName());
    if (entry.isDirectory()) {
      continue;
    }
    if (!f.exists()) {
      f.getParentFile().mkdirs();
      f.createNewFile();
    }
    InputStream is=zip.getInputStream(entry);
    OutputStream os=new java.io.FileOutputStream(f);
    IOUtils.copyLarge(is,os);
  }
}","/** 
 * Unpacks the give zip file using the built in Java facilities for unzip. 
 */
@SuppressWarnings(""String_Node_Str"") public void unpack(File zipFile,File rootDir) throws IOException {
  ZipFile zip=new ZipFile(zipFile);
  Enumeration<ZipEntry> entries=(Enumeration<ZipEntry>)zip.entries();
  ZipEntry entry=null;
  while (entries.hasMoreElements()) {
    entry=entries.nextElement();
    java.io.File f=new java.io.File(rootDir,entry.getName());
    if (entry.isDirectory()) {
      continue;
    }
    if (!f.exists()) {
      f.getParentFile().mkdirs();
      f.createNewFile();
    }
    InputStream is=zip.getInputStream(entry);
    OutputStream os=new java.io.FileOutputStream(f);
    IOUtils.copy(is,os);
  }
}",0.9965445749827228
187187,"public String uploadSound(File audioFile,String title,String desc,int REQCODE,Activity activity,Handler handler) throws OperationCanceledException, AuthenticatorException, IOException {
  mHandler=handler;
  mAudioFile=audioFile;
  mContext=activity.getBaseContext();
  mFileSize=audioFile.length();
  AccountManager accountManager=AccountManager.get(mContext);
  Account[] acc=accountManager.getAccountsByType(""String_Node_Str"");
  if (acc.length > 0) {
    String access=accountManager.blockingGetAuthToken(acc[0],""String_Node_Str"",false);
    if (access == null)     throw new IOException(""String_Node_Str"" + acc[0].name);
    Token token=new Token(access,null,Token.SCOPE_NON_EXPIRING);
    ApiWrapper wrapper=new ApiWrapper(null,null,null,token,Env.LIVE);
    HttpResponse resp=wrapper.post(Request.to(Endpoints.TRACKS).withFile(Params.Track.ASSET_DATA,mAudioFile).add(Params.Track.TITLE,title).add(Params.Track.DESCRIPTION,desc).add(Params.Track.SHARING,Params.Track.PUBLIC).setProgressListener(new Request.TransferProgressListener(){
      @Override public void transferred(      long l) throws IOException {
        double percent=(l / mFileSize) * 100;
        String status=String.format(""String_Node_Str"",Math.round(l),Math.round(mFileSize));
        Message msg=mHandler.obtainMessage(888);
        String title=mContext.getString(R.string.uploading);
        msg.getData().putString(""String_Node_Str"",title);
        msg.getData().putString(""String_Node_Str"",status);
        msg.getData().putInt(""String_Node_Str"",(int)percent);
        mHandler.sendMessage(msg);
      }
    }
));
    if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {
      String location=resp.getFirstHeader(""String_Node_Str"").getValue();
      return location;
    }
 else {
      System.err.println(""String_Node_Str"" + resp.getStatusLine());
    }
  }
  return null;
}","public String uploadSound(File audioFile,String title,String desc,int REQCODE,Activity activity,Handler handler) throws OperationCanceledException, AuthenticatorException, IOException {
  mHandler=handler;
  mAudioFile=audioFile;
  mContext=activity.getBaseContext();
  mFileSize=audioFile.length();
  AccountManager accountManager=AccountManager.get(mContext.getApplicationContext());
  Account[] acc=accountManager.getAccountsByType(""String_Node_Str"");
  if (acc.length > 0) {
    String access=accountManager.blockingGetAuthToken(acc[0],""String_Node_Str"",true);
    if (access == null) {
      Bundle options=new Bundle();
      accountManager.getAuthToken(acc[0],""String_Node_Str"",options,activity,new AccountManagerCallback<Bundle>(){
        @Override public void run(        AccountManagerFuture<Bundle> arg0){
        }
      }
,handler);
      throw new IOException(""String_Node_Str"");
    }
    Token token=new Token(access,null,Token.SCOPE_NON_EXPIRING);
    ApiWrapper wrapper=new ApiWrapper(null,null,null,token,Env.LIVE);
    HttpResponse resp=wrapper.post(Request.to(Endpoints.TRACKS).withFile(Params.Track.ASSET_DATA,mAudioFile).add(Params.Track.TITLE,title).add(Params.Track.DESCRIPTION,desc).add(Params.Track.SHARING,Params.Track.PUBLIC).setProgressListener(new Request.TransferProgressListener(){
      @Override public void transferred(      long l) throws IOException {
        double percent=(l / mFileSize) * 100;
        String status=String.format(""String_Node_Str"",Math.round(l),Math.round(mFileSize));
        Message msg=mHandler.obtainMessage(888);
        String title=mContext.getString(R.string.uploading);
        msg.getData().putString(""String_Node_Str"",title);
        msg.getData().putString(""String_Node_Str"",status);
        msg.getData().putInt(""String_Node_Str"",(int)percent);
        mHandler.sendMessage(msg);
      }
    }
));
    if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_CREATED) {
      String location=resp.getFirstHeader(""String_Node_Str"").getValue();
      return location;
    }
 else {
      System.err.println(""String_Node_Str"" + resp.getStatusLine());
    }
  }
  return null;
}",0.9216612782889828
187188,"private void initApp(){
  try {
    initServerUrls(this);
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    String customLessonLoc=settings.getString(""String_Node_Str"",null);
    String lessonUrlPath=mBaseUrl + URL_PATH_LESSONS + mLocale.getLanguage()+ ""String_Node_Str"";
    String lessonLocalPath=""String_Node_Str"" + mLocale.getLanguage();
    if (customLessonLoc != null) {
      if (customLessonLoc.toLowerCase().startsWith(""String_Node_Str"")) {
        lessonUrlPath=customLessonLoc;
        lessonLocalPath=""String_Node_Str"" + lessonUrlPath.substring(lessonUrlPath.lastIndexOf('/') + 1);
      }
 else {
        lessonUrlPath=mBaseUrl + URL_PATH_LESSONS + customLessonLoc+ ""String_Node_Str"";
        lessonLocalPath=""String_Node_Str"" + customLessonLoc;
      }
    }
    File fileDirLessons=new File(getExternalFilesDir(null),lessonLocalPath);
    fileDirLessons.mkdirs();
    mLessonManager=new LessonManager(this,lessonUrlPath,fileDirLessons);
    mServerManager=new ServerManager(getApplicationContext());
  }
 catch (  Exception e) {
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}","private void initApp(){
  try {
    initServerUrls(this);
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
    String customLessonLoc=settings.getString(""String_Node_Str"",null);
    String lessonUrlPath=mBaseUrl + URL_PATH_LESSONS + mLocale.getLanguage()+ ""String_Node_Str"";
    String lessonLocalPath=""String_Node_Str"" + mLocale.getLanguage();
    if (customLessonLoc != null && customLessonLoc.length() > 0) {
      if (customLessonLoc.toLowerCase().startsWith(""String_Node_Str"")) {
        lessonUrlPath=customLessonLoc;
        lessonLocalPath=""String_Node_Str"" + lessonUrlPath.substring(lessonUrlPath.lastIndexOf('/') + 1);
      }
 else {
        lessonUrlPath=mBaseUrl + URL_PATH_LESSONS + customLessonLoc+ ""String_Node_Str"";
        lessonLocalPath=""String_Node_Str"" + customLessonLoc;
      }
    }
    File fileDirLessons=new File(getExternalFilesDir(null),lessonLocalPath);
    fileDirLessons.mkdirs();
    mLessonManager=new LessonManager(this,lessonUrlPath,fileDirLessons);
    mServerManager=new ServerManager(getApplicationContext());
  }
 catch (  Exception e) {
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}",0.986336464560205
187189,"public boolean checkLocale(){
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  Configuration config=getResources().getConfiguration();
  boolean useLangAr=settings.getBoolean(""String_Node_Str"",false);
  String lang=settings.getString(PREF_LOCALE,LOCALE_DEFAULT);
  if (useLangAr)   lang=LANG_ARABIC;
  boolean updatedLocale=false;
  if (!""String_Node_Str"".equals(lang) && !config.locale.getLanguage().equals(lang)) {
    mLocale=new Locale(lang);
    Locale.setDefault(mLocale);
    config.locale=mLocale;
    getResources().updateConfiguration(config,getResources().getDisplayMetrics());
    updatedLocale=true;
  }
 else   if (Locale.getDefault().getLanguage().equalsIgnoreCase(LANG_ARABIC)) {
    mLocale=Locale.getDefault();
    config.locale=mLocale;
    getResources().updateConfiguration(config,getResources().getDisplayMetrics());
    updatedLocale=true;
  }
  if (updatedLocale) {
    File fileDirLessons=new File(getExternalFilesDir(null),""String_Node_Str"" + lang);
    fileDirLessons.mkdirs();
    mLessonManager=new LessonManager(this,mBaseUrl + URL_PATH_LESSONS + lang+ ""String_Node_Str"",fileDirLessons);
  }
  return updatedLocale;
}","public boolean checkLocale(){
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
  Configuration config=getResources().getConfiguration();
  boolean useLangAr=settings.getBoolean(""String_Node_Str"",false);
  String lang=settings.getString(PREF_LOCALE,LOCALE_DEFAULT);
  if (useLangAr)   lang=LANG_ARABIC;
  boolean updatedLocale=false;
  if (!""String_Node_Str"".equals(lang) && !config.locale.getLanguage().equals(lang)) {
    mLocale=new Locale(lang);
    Locale.setDefault(mLocale);
    config.locale=mLocale;
    getResources().updateConfiguration(config,getResources().getDisplayMetrics());
    updatedLocale=true;
    lang=config.locale.getLanguage();
  }
 else   if (Locale.getDefault().getLanguage().equalsIgnoreCase(LANG_ARABIC)) {
    mLocale=Locale.getDefault();
    config.locale=mLocale;
    getResources().updateConfiguration(config,getResources().getDisplayMetrics());
    updatedLocale=true;
    lang=config.locale.getLanguage();
  }
  if (updatedLocale) {
    File fileDirLessons=new File(getExternalFilesDir(null),""String_Node_Str"" + lang);
    fileDirLessons.mkdirs();
    mLessonManager=new LessonManager(this,mBaseUrl + URL_PATH_LESSONS + lang+ ""String_Node_Str"",fileDirLessons);
  }
  return updatedLocale;
}",0.9693301049233252
187190,"@Override public void onRearrange(int oldIndex,int newIndex){
  mMPM.mScene.swapMediaIndex(oldIndex,newIndex);
  mActivity.mdExported=null;
}","@Override public void onRearrange(int oldIndex,int newIndex){
  mMPM.mScene.moveMedia(oldIndex,newIndex);
  mActivity.mdExported=null;
}",0.9530685920577616
187191,"public void loadMedia(){
  mOrderClipsDGV.removeAllViews();
  Media[] sceneMedias=mMPM.mScene.getMediaAsArray();
  for (int i=0; i < sceneMedias.length; i++) {
    ImageView iv=new ImageView(getActivity());
    if (sceneMedias[i] != null) {
      iv.setImageBitmap(mActivity.getThumbnail(sceneMedias[i]));
    }
 else {
      iv.setImageDrawable(getResources().getDrawable(R.drawable.thumb_incomplete));
    }
    mOrderClipsDGV.addView(iv);
  }
  mOrderClipsDGV.setOnRearrangeListener(new OnRearrangeListener(){
    @Override public void onRearrange(    int oldIndex,    int newIndex){
      mMPM.mScene.swapMediaIndex(oldIndex,newIndex);
      mActivity.mdExported=null;
    }
  }
);
  mOrderClipsDGV.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!mTrimMode) {
        Log.d(TAG,""String_Node_Str"");
        mCurrentClipIdx=position;
        showThumbnail(position);
      }
    }
  }
);
}","public void loadMedia(){
  mOrderClipsDGV.removeAllViews();
  Media[] sceneMedias=mMPM.mScene.getMediaAsArray();
  for (int i=0; i < sceneMedias.length; i++) {
    ImageView iv=new ImageView(getActivity());
    if (sceneMedias[i] != null) {
      iv.setImageBitmap(mActivity.getThumbnail(sceneMedias[i]));
    }
 else {
      iv.setImageDrawable(getResources().getDrawable(R.drawable.thumb_incomplete));
    }
    mOrderClipsDGV.addView(iv);
  }
  mOrderClipsDGV.setOnRearrangeListener(new OnRearrangeListener(){
    @Override public void onRearrange(    int oldIndex,    int newIndex){
      mMPM.mScene.moveMedia(oldIndex,newIndex);
      mActivity.mdExported=null;
    }
  }
);
  mOrderClipsDGV.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!mTrimMode) {
        Log.d(TAG,""String_Node_Str"");
        mCurrentClipIdx=position;
        showThumbnail(position);
      }
    }
  }
);
}",0.9886194952993568
187192,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_add_clips_page,null);
  try {
    ImageView iv=(ImageView)view.findViewById(R.id.clipTypeImage);
    if (mMedia != null) {
      Bitmap thumb=mActivity.getThumbnail(mMedia);
      iv.setImageBitmap(thumb);
    }
 else {
      if (clip.mShotType != -1) {
        TypedArray drawableIds=getActivity().getResources().obtainTypedArray(R.array.cliptype_thumbnails);
        int drawableId=drawableIds.getResourceId(clip.mShotType,0);
        iv.setImageResource(drawableId);
      }
 else       if (clip.mArtwork != null) {
        iv.setImageBitmap(BitmapFactory.decodeStream(getActivity().getAssets().open(clip.mArtwork)));
      }
    }
    ((TextView)view.findViewById(R.id.clipTypeTitle)).setText(clip.mTitle);
    if (clip.mShotSize != null)     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setText(clip.mShotSize);
 else     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setVisibility(View.GONE);
    ((TextView)view.findViewById(R.id.clipTypeGoal)).setText(clip.mGoal);
    ((TextView)view.findViewById(R.id.clipTypeDescription)).setText(clip.mDescription);
    ((TextView)view.findViewById(R.id.clipTypeTip)).setText(clip.mTip);
    iv.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        ((SceneEditorActivity)mActivity).openCaptureMode(clip.mShotType,mClipIndex);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_add_clips_page,null);
  try {
    ImageView iv=(ImageView)view.findViewById(R.id.clipTypeImage);
    if (mMedia != null) {
      Bitmap thumb=Media.getThumbnail(mActivity,mMedia,mActivity.mMPM.mProject);
      iv.setImageBitmap(thumb);
    }
 else {
      if (clip.mShotType != -1) {
        TypedArray drawableIds=getActivity().getResources().obtainTypedArray(R.array.cliptype_thumbnails);
        int drawableId=drawableIds.getResourceId(clip.mShotType,0);
        iv.setImageResource(drawableId);
      }
 else       if (clip.mArtwork != null) {
        iv.setImageBitmap(BitmapFactory.decodeStream(getActivity().getAssets().open(clip.mArtwork)));
      }
    }
    ((TextView)view.findViewById(R.id.clipTypeTitle)).setText(clip.mTitle);
    if (clip.mShotSize != null)     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setText(clip.mShotSize);
 else     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setVisibility(View.GONE);
    ((TextView)view.findViewById(R.id.clipTypeGoal)).setText(clip.mGoal);
    ((TextView)view.findViewById(R.id.clipTypeDescription)).setText(clip.mDescription);
    ((TextView)view.findViewById(R.id.clipTypeTip)).setText(clip.mTip);
    iv.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        ((SceneEditorActivity)mActivity).openCaptureMode(clip.mShotType,mClipIndex);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return view;
}",0.9817953546767106
187193,"@Override public void handleMessage(Message msg){
  String statusTitle=msg.getData().getString(""String_Node_Str"");
  String status=msg.getData().getString(""String_Node_Str"");
  String error=msg.getData().getString(""String_Node_Str"");
  if (error == null)   error=msg.getData().getString(""String_Node_Str"");
  int progress=msg.getData().getInt(""String_Node_Str"");
  if (mProgressDialog != null) {
    if (progress >= 0)     mProgressDialog.setProgress(progress);
    if (statusTitle != null)     mProgressDialog.setTitle(statusTitle);
  }
switch (msg.what) {
case 0:
case 1:
    if (status != null) {
      if (mProgressDialog != null) {
        mProgressDialog.setMessage(status);
      }
 else {
        Toast.makeText(EditorBaseActivity.this,status,Toast.LENGTH_SHORT).show();
      }
    }
  break;
case 999:
mProgressDialog=new ProgressDialog(EditorBaseActivity.this);
mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
mProgressDialog.setTitle(getString(R.string.rendering));
mProgressDialog.setMessage(getString(R.string.rendering_project_));
mProgressDialog.setCancelable(true);
mProgressDialog.show();
break;
case 888:
if (mProgressDialog != null) mProgressDialog.setMessage(status);
break;
case 777:
String videoId=msg.getData().getString(""String_Node_Str"");
String url=msg.getData().getString(""String_Node_Str"");
String localPath=msg.getData().getString(""String_Node_Str"");
String mimeType=msg.getData().getString(""String_Node_Str"");
if (mProgressDialog != null) {
mProgressDialog.dismiss();
mProgressDialog=null;
}
File fileMedia=new File(localPath);
if (fileMedia.exists() && fileMedia.length() > 0) {
showPublished(url,fileMedia,videoId,mimeType);
}
 else {
}
break;
case -1:
Toast.makeText(EditorBaseActivity.this,error,Toast.LENGTH_SHORT).show();
if (mProgressDialog != null) {
mProgressDialog.dismiss();
mProgressDialog=null;
}
break;
default :
}
}","@Override public void handleMessage(Message msg){
  String statusTitle=msg.getData().getString(""String_Node_Str"");
  String status=msg.getData().getString(""String_Node_Str"");
  String error=msg.getData().getString(""String_Node_Str"");
  if (error == null)   error=msg.getData().getString(""String_Node_Str"");
  int progress=msg.getData().getInt(""String_Node_Str"");
  if (mProgressDialog != null) {
    if (progress >= 0)     mProgressDialog.setProgress(progress);
    if (statusTitle != null)     mProgressDialog.setTitle(statusTitle);
  }
switch (msg.what) {
case 0:
case 1:
    if (status != null) {
      if (mProgressDialog != null && mProgressDialog.isShowing()) {
        mProgressDialog.setMessage(status);
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(EditorBaseActivity.this);
        builder.setMessage(status).show();
      }
    }
  break;
case 999:
mProgressDialog=new ProgressDialog(EditorBaseActivity.this);
mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
mProgressDialog.setTitle(getString(R.string.rendering));
mProgressDialog.setMessage(getString(R.string.rendering_project_));
mProgressDialog.setCancelable(true);
mProgressDialog.show();
break;
case 888:
if (mProgressDialog != null) mProgressDialog.setMessage(status);
break;
case 777:
String videoId=msg.getData().getString(""String_Node_Str"");
String url=msg.getData().getString(""String_Node_Str"");
String localPath=msg.getData().getString(""String_Node_Str"");
String mimeType=msg.getData().getString(""String_Node_Str"");
if (mProgressDialog != null) {
mProgressDialog.dismiss();
mProgressDialog=null;
}
File fileMedia=new File(localPath);
if (fileMedia.exists() && fileMedia.length() > 0) {
showPublished(url,fileMedia,videoId,mimeType);
}
 else {
}
break;
case -1:
if (mProgressDialog != null) {
mProgressDialog.dismiss();
mProgressDialog=null;
}
AlertDialog.Builder builder=new AlertDialog.Builder(EditorBaseActivity.this);
builder.setMessage(error).show();
break;
default :
}
}",0.8790301779726593
187194,"@Override protected void onActivityResult(int arg0,int arg1,Intent arg2){
  super.onActivityResult(arg0,arg1,arg2);
  boolean changed=((StoryMakerApp)getApplication()).checkLocale();
  if (changed) {
    startActivity(new Intent(this,HomeActivity.class));
  }
}","@Override protected void onActivityResult(int arg0,int arg1,Intent arg2){
  super.onActivityResult(arg0,arg1,arg2);
  boolean changed=((StoryMakerApp)getApplication()).checkLocale();
  if (changed) {
    finish();
    startActivity(new Intent(this,HomeActivity.class));
  }
}",0.9738805970149254
187195,"@Override public void onResume(){
  super.onResume();
  new getAsynctask().execute(""String_Node_Str"");
}","@Override public void onResume(){
  super.onResume();
  new getAsynctask().execute(""String_Node_Str"");
  boolean isExternalStorageReady=((StoryMakerApp)getApplication()).isExternalStorageReady();
  if (!isExternalStorageReady) {
    new AlertDialog.Builder(this).setTitle(getString(R.string.app_name)).setIcon(android.R.drawable.ic_dialog_info).setMessage(R.string.err_storage_not_ready).show();
  }
}",0.4118811881188118
187196,"private void initActivityList(){
  mCardView=(CardUI)findViewById(R.id.cardsview);
  if (mCardView == null)   return;
  mCardView.clearCards();
  mCardView.setSwipeable(false);
  ArrayList<ActivityEntry> alActivity=new ArrayList<ActivityEntry>();
  for (int i=mLessonsCompleted.size() - 1; i > mLessonsCompleted.size() - 4 && i > -1; i--) {
    Lesson lesson=mLessonsCompleted.get(i);
    MyCard card=null;
    if (lesson.mStatus == Lesson.STATUS_COMPLETE) {
      card=new MyCard(getString(R.string.lessons_congratulations_you_have_completed_the_lesson_),lesson.mTitle);
    }
 else     if (lesson.mStatus == Lesson.STATUS_IN_PROGRESS) {
      card=new MyCard(getString(R.string.you_began_a_new_lesson),lesson.mTitle);
    }
    if (lesson.mImage != null)     card.setImage(BitmapDrawable.createFromPath(lesson.mImage));
    card.setIcon(R.drawable.ic_home_lesson);
    card.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(HomeActivity.this,LessonsActivity.class));
      }
    }
);
    Date cardDate=new Date();
    if (lesson.mStatusModified != null)     cardDate=lesson.mStatusModified;
    ActivityEntry ae=new ActivityEntry(card,cardDate);
    alActivity.add(ae);
  }
  for (int i=mListProjects.size() - 1; i > mListProjects.size() - 4 && i > -1; i--) {
    Project project=mListProjects.get(i);
    Drawable img=null;
    Date cardDate=new Date();
    for (int n=0; n < project.getScenesAsArray().length && img == null; n++) {
      Media[] mediaList=project.getScenesAsArray()[n].getMediaAsArray();
      if (mediaList != null && mediaList.length > 0) {
        for (        Media media : mediaList)         if (media != null) {
          Bitmap bmp=getThumbnail(media);
          if (bmp != null) {
            img=new BitmapDrawable(getResources(),bmp);
            cardDate=new Date(new File(media.getPath()).getParentFile().lastModified());
            break;
          }
        }
      }
    }
    if (img != null) {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setImage(img);
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
      if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_video);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_photo);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_audio);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
        card.setIcon(R.drawable.btn_toggle_ic_list_essay);
      }
    }
 else {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_video);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_photo);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_audio);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
        card.setIcon(R.drawable.btn_toggle_ic_list_essay);
      }
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
  }
  Collections.sort(alActivity);
  for (  ActivityEntry ae : alActivity)   mCardView.addCard(ae.card);
  mCardView.refresh();
}","private void initActivityList(){
  mCardView=(CardUI)findViewById(R.id.cardsview);
  if (mCardView == null)   return;
  mCardView.clearCards();
  mCardView.setSwipeable(false);
  ArrayList<ActivityEntry> alActivity=new ArrayList<ActivityEntry>();
  for (int i=mLessonsCompleted.size() - 1; i > mLessonsCompleted.size() - 4 && i > -1; i--) {
    Lesson lesson=mLessonsCompleted.get(i);
    MyCard card=null;
    if (lesson.mStatus == Lesson.STATUS_COMPLETE) {
      card=new MyCard(getString(R.string.lessons_congratulations_you_have_completed_the_lesson_),lesson.mTitle);
    }
 else     if (lesson.mStatus == Lesson.STATUS_IN_PROGRESS) {
      card=new MyCard(getString(R.string.you_began_a_new_lesson),lesson.mTitle);
    }
    if (lesson.mImage != null)     card.setImage(BitmapDrawable.createFromPath(lesson.mImage));
    card.setIcon(R.drawable.ic_home_lesson);
    card.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(HomeActivity.this,LessonsActivity.class));
      }
    }
);
    Date cardDate=new Date();
    if (lesson.mStatusModified != null)     cardDate=lesson.mStatusModified;
    ActivityEntry ae=new ActivityEntry(card,cardDate);
    alActivity.add(ae);
  }
  for (int i=mListProjects.size() - 1; i > mListProjects.size() - 4 && i > -1; i--) {
    Project project=mListProjects.get(i);
    Drawable img=null;
    Date cardDate=new Date();
    for (int n=0; n < project.getScenesAsArray().length && img == null; n++) {
      Media[] mediaList=project.getScenesAsArray()[n].getMediaAsArray();
      if (mediaList != null && mediaList.length > 0) {
        for (        Media media : mediaList)         if (media != null) {
          Bitmap bmp=Media.getThumbnail(this,media,project);
          if (bmp != null) {
            img=new BitmapDrawable(getResources(),bmp);
            cardDate=new Date(new File(media.getPath()).getParentFile().lastModified());
            break;
          }
        }
      }
    }
    if (img != null) {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setImage(img);
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
      if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_video);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_photo);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_audio);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
        card.setIcon(R.drawable.btn_toggle_ic_list_essay);
      }
    }
 else {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_video);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_photo);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
        card.setIcon(R.drawable.btn_toggle_ic_list_audio);
      }
 else       if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
        card.setIcon(R.drawable.btn_toggle_ic_list_essay);
      }
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
  }
  Collections.sort(alActivity);
  for (  ActivityEntry ae : alActivity)   mCardView.addCard(ae.card);
  mCardView.refresh();
}",0.9963772642098688
187197,"public void loadMedia(){
  mOrderClipsDGV.removeAllViews();
  Media[] sceneMedias=mMPM.mScene.getMediaAsArray();
  for (int i=0; i < sceneMedias.length; i++) {
    ImageView iv=new ImageView(getActivity());
    if (sceneMedias[i] != null) {
      iv.setImageBitmap(mActivity.getThumbnail(sceneMedias[i]));
    }
 else {
      iv.setImageDrawable(getResources().getDrawable(R.drawable.thumb_incomplete));
    }
    mOrderClipsDGV.addView(iv);
  }
  mOrderClipsDGV.setOnRearrangeListener(new OnRearrangeListener(){
    @Override public void onRearrange(    int oldIndex,    int newIndex){
      mMPM.mScene.moveMedia(oldIndex,newIndex);
    }
  }
);
  mOrderClipsDGV.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!mTrimMode) {
        Log.d(TAG,""String_Node_Str"");
        mCurrentClipIdx=position;
        previewClip(position);
      }
    }
  }
);
}","public void loadMedia(){
  mOrderClipsDGV.removeAllViews();
  Media[] sceneMedias=mMPM.mScene.getMediaAsArray();
  for (int i=0; i < sceneMedias.length; i++) {
    ImageView iv=new ImageView(getActivity());
    if (sceneMedias[i] != null) {
      Bitmap thumb=Media.getThumbnail(mActivity,sceneMedias[i],mActivity.mMPM.mProject);
      iv.setImageBitmap(thumb);
    }
 else {
      iv.setImageDrawable(getResources().getDrawable(R.drawable.thumb_incomplete));
    }
    mOrderClipsDGV.addView(iv);
  }
  mOrderClipsDGV.setOnRearrangeListener(new OnRearrangeListener(){
    @Override public void onRearrange(    int oldIndex,    int newIndex){
      mMPM.mScene.moveMedia(oldIndex,newIndex);
    }
  }
);
  mOrderClipsDGV.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!mTrimMode) {
        Log.d(TAG,""String_Node_Str"");
        mCurrentClipIdx=position;
        previewClip(position);
      }
    }
  }
);
}",0.95004995004995
187198,"private void showThumbnail(int position){
  Media[] medias=mMPM.mScene.getMediaAsArray();
  if (medias[position] != null) {
    mImageViewMedia.setVisibility(View.VISIBLE);
    mPreviewVideoView.setVisibility(View.GONE);
    mImageViewMedia.setImageBitmap(mActivity.getThumbnail(medias[position]));
    mImageViewMedia.invalidate();
  }
}","private void showThumbnail(int position){
  Media[] medias=mMPM.mScene.getMediaAsArray();
  if (medias[position] != null) {
    mImageViewMedia.setVisibility(View.VISIBLE);
    mPreviewVideoView.setVisibility(View.GONE);
    Bitmap thumb=Media.getThumbnail(mActivity,medias[position],mActivity.mMPM.mProject);
    mImageViewMedia.setImageBitmap(thumb);
    mImageViewMedia.invalidate();
  }
}",0.8191780821917808
187199,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View row=convertView;
  TextView tv;
  if (row == null) {
    LayoutInflater inflater=((Activity)context).getLayoutInflater();
    row=inflater.inflate(layoutResourceId,parent,false);
  }
  tv=(TextView)row.findViewById(R.id.title);
  Project project=projects.get(position);
  tv.setText(project.getTitle());
  tv=(TextView)row.findViewById(R.id.description);
  ImageView ivType=(ImageView)row.findViewById(R.id.cardIcon);
  ImageView ivIcon=(ImageView)row.findViewById(R.id.imageView1);
  Media[] mediaList=project.getScenesAsArray()[0].getMediaAsArray();
  if (mediaList != null && mediaList.length > 0) {
    for (    Media media : mediaList)     if (media != null) {
      ivIcon.setImageBitmap(getThumbnail(media));
      break;
    }
  }
  String projectType=project.getScenesAsList().size() + ""String_Node_Str"";
  if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_video));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_photo));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_audio));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_essay));
  }
  tv.setText(projectType);
  return row;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View row=convertView;
  TextView tv;
  if (row == null) {
    LayoutInflater inflater=((Activity)context).getLayoutInflater();
    row=inflater.inflate(layoutResourceId,parent,false);
  }
  tv=(TextView)row.findViewById(R.id.title);
  Project project=projects.get(position);
  tv.setText(project.getTitle());
  tv=(TextView)row.findViewById(R.id.description);
  ImageView ivType=(ImageView)row.findViewById(R.id.cardIcon);
  ImageView ivIcon=(ImageView)row.findViewById(R.id.imageView1);
  Media[] mediaList=project.getScenesAsArray()[0].getMediaAsArray();
  if (mediaList != null && mediaList.length > 0) {
    for (    Media media : mediaList)     if (media != null) {
      ivIcon.setImageBitmap(Media.getThumbnail(ProjectsActivity.this,media,project));
      break;
    }
  }
  String projectType=project.getScenesAsList().size() + ""String_Node_Str"";
  if (project.getStoryType() == Project.STORY_TYPE_VIDEO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_video));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_PHOTO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_photo));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_AUDIO) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_audio));
  }
 else   if (project.getStoryType() == Project.STORY_TYPE_ESSAY) {
    ivType.setImageDrawable(getContext().getResources().getDrawable(R.drawable.btn_toggle_ic_list_essay));
  }
  tv.setText(projectType);
  return row;
}",0.9861612515042116
187200,"public YouTubeSubmit(File videoFile,String title,String description,Date dateTaken,Activity activity,Handler handler,Context context){
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
  authorizer=(GlsAuthorizer)new GlsAuthorizer.GlsAuthorizerFactory().getAuthorizer(activity,GlsAuthorizer.YOUTUBE_AUTH_TOKEN_TYPE);
  authorizer.setAccountFeatures(GlsAuthorizer.YOUTUBE_FEATURES);
  authorizer.setAccountType(GlsAuthorizer.ACCOUNT_TYPE_GOOGLE);
  authorizer.setAuthMethod(settings.getInt(""String_Node_Str"",0));
  authorizer.setHandler(handler);
  this.videoFile=videoFile;
  this.activity=activity;
  this.title=title;
  this.description=description;
  this.dateTaken=dateTaken;
  this.handler=handler;
  this.mContext=context;
  httpClient=new StrongHttpsClient(mContext);
  httpClient.log.enableDebug(true);
  mUseTor=settings.getBoolean(""String_Node_Str"",false);
  if (mUseTor) {
    httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
  }
}","public YouTubeSubmit(File videoFile,String title,String description,Date dateTaken,Activity activity,Handler handler,Context context){
  this.videoFile=videoFile;
  this.activity=activity;
  this.title=title;
  this.description=description;
  this.dateTaken=dateTaken;
  this.handler=handler;
  this.mContext=context;
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext.getApplicationContext());
  authorizer=(GlsAuthorizer)new GlsAuthorizer.GlsAuthorizerFactory().getAuthorizer(activity,GlsAuthorizer.YOUTUBE_AUTH_TOKEN_TYPE);
  authorizer.setAccountFeatures(GlsAuthorizer.YOUTUBE_FEATURES);
  authorizer.setAccountType(GlsAuthorizer.ACCOUNT_TYPE_GOOGLE);
  authorizer.setAuthMethod(settings.getInt(""String_Node_Str"",0));
  authorizer.setHandler(handler);
  httpClient=new StrongHttpsClient(mContext);
  httpClient.log.enableDebug(true);
  mUseTor=settings.getBoolean(""String_Node_Str"",false);
  if (mUseTor) {
    httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
  }
}",0.8263757115749526
187201,"private String uploadMetaDataToGetLocation(String slug,String contentType,long contentLength,boolean retry) throws IOException {
  String uploadUrl=INITIAL_UPLOAD_URL;
  HttpPost hPost=getGDataHttpPost(HOST_UPLOADS,uploadUrl,slug);
  hPost.setHeader(""String_Node_Str"",contentType);
  hPost.setHeader(""String_Node_Str"",contentLength + ""String_Node_Str"");
  String atomData;
  String category=DEFAULT_VIDEO_CATEGORY;
  this.tags=DEFAULT_VIDEO_TAGS;
  String template=Util.readFile(activity,R.raw.gdata).toString();
  atomData=String.format(template,title,description,category,this.tags);
  StringEntity entity=new StringEntity(atomData);
  hPost.setEntity(entity);
  HttpResponse hResp=httpClient.execute(hPost);
  int responseCode=hResp.getStatusLine().getStatusCode();
  StringBuffer errMsg=new StringBuffer();
  InputStream is=hResp.getEntity().getContent();
  List<String> list=IOUtils.readLines(is);
  for (  String line : list) {
    Log.d(LOG_TAG,""String_Node_Str"" + line);
    errMsg.append(line).append(""String_Node_Str"");
  }
  if (responseCode < 200 || responseCode >= 300) {
    if ((responseCode + ""String_Node_Str"").startsWith(""String_Node_Str"") && retry) {
      this.clientLoginToken=authorizer.getFreshAuthToken(accountYouTube.name,clientLoginToken);
      return uploadMetaDataToGetLocation(slug,contentType,contentLength,false);
    }
 else {
      throw new IOException(String.format(""String_Node_Str"" + ""String_Node_Str"",hResp.getStatusLine().getReasonPhrase(),responseCode,hPost.getRequestLine().getUri(),errMsg.toString()));
    }
  }
  return hResp.getFirstHeader(""String_Node_Str"").getValue();
}","private String uploadMetaDataToGetLocation(String slug,String contentType,long contentLength,boolean retry) throws IOException {
  String uploadUrl=INITIAL_UPLOAD_URL;
  HttpPost hPost=getGDataHttpPost(HOST_UPLOADS,uploadUrl,slug);
  hPost.setHeader(""String_Node_Str"",contentType);
  hPost.setHeader(""String_Node_Str"",contentLength + ""String_Node_Str"");
  String atomData;
  String category=DEFAULT_VIDEO_CATEGORY;
  this.tags=DEFAULT_VIDEO_TAGS;
  String template=Util.readFile(activity,R.raw.gdata).toString();
  atomData=String.format(template,StringEscapeUtils.escapeHtml4(title),StringEscapeUtils.escapeHtml4(description),category,this.tags);
  StringEntity entity=new StringEntity(atomData);
  hPost.setEntity(entity);
  HttpResponse hResp=httpClient.execute(hPost);
  int responseCode=hResp.getStatusLine().getStatusCode();
  StringBuffer errMsg=new StringBuffer();
  InputStream is=hResp.getEntity().getContent();
  List<String> list=IOUtils.readLines(is);
  for (  String line : list) {
    Log.d(LOG_TAG,""String_Node_Str"" + line);
    errMsg.append(line).append(""String_Node_Str"");
  }
  if (responseCode < 200 || responseCode >= 300) {
    if ((responseCode + ""String_Node_Str"").startsWith(""String_Node_Str"") && retry) {
      this.clientLoginToken=authorizer.getFreshAuthToken(accountYouTube.name,clientLoginToken);
      return uploadMetaDataToGetLocation(slug,contentType,contentLength,false);
    }
 else {
      throw new IOException(String.format(""String_Node_Str"" + ""String_Node_Str"",hResp.getStatusLine().getReasonPhrase(),responseCode,hPost.getRequestLine().getUri(),errMsg.toString()));
    }
  }
  return hResp.getFirstHeader(""String_Node_Str"").getValue();
}",0.9708914493632504
187202,"@Override public void onClick(View v){
  ViewPager vp=(ViewPager)v.getParent().getParent().getParent().getParent();
  mActivity.mMPM.mClipIndex=vp.getCurrentItem();
  ((SceneEditorActivity)mActivity).openCaptureMode(clip,mClipIndex);
}","@Override public void onClick(View v){
  ((SceneEditorActivity)mActivity).openCaptureMode(clip,mClipIndex);
}",0.6337209302325582
187203,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_add_clips_page,null);
  try {
    ImageView iv=(ImageView)view.findViewById(R.id.clipTypeImage);
    if (mMedia != null) {
      Bitmap thumb=mActivity.getThumbnail(mMedia);
      iv.setImageBitmap(thumb);
    }
 else {
      if (clip.mShotType != -1) {
        TypedArray drawableIds=getActivity().getResources().obtainTypedArray(R.array.cliptype_thumbnails);
        int drawableId=drawableIds.getResourceId(clip.mShotType,0);
        iv.setImageResource(drawableId);
      }
 else       if (clip.mArtwork != null) {
        iv.setImageBitmap(BitmapFactory.decodeStream(getActivity().getAssets().open(clip.mArtwork)));
      }
    }
    ((TextView)view.findViewById(R.id.clipTypeTitle)).setText(clip.mTitle);
    if (clip.mShotSize != null)     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setText(clip.mShotSize);
 else     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setVisibility(View.GONE);
    ((TextView)view.findViewById(R.id.clipTypeGoal)).setText(clip.mGoal);
    ((TextView)view.findViewById(R.id.clipTypeDescription)).setText(clip.mDescription);
    ((TextView)view.findViewById(R.id.clipTypeTip)).setText(clip.mTip);
    iv.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        ViewPager vp=(ViewPager)v.getParent().getParent().getParent().getParent();
        mActivity.mMPM.mClipIndex=vp.getCurrentItem();
        ((SceneEditorActivity)mActivity).openCaptureMode(clip,mClipIndex);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_add_clips_page,null);
  try {
    ImageView iv=(ImageView)view.findViewById(R.id.clipTypeImage);
    if (mMedia != null) {
      Bitmap thumb=mActivity.getThumbnail(mMedia);
      iv.setImageBitmap(thumb);
    }
 else {
      if (clip.mShotType != -1) {
        TypedArray drawableIds=getActivity().getResources().obtainTypedArray(R.array.cliptype_thumbnails);
        int drawableId=drawableIds.getResourceId(clip.mShotType,0);
        iv.setImageResource(drawableId);
      }
 else       if (clip.mArtwork != null) {
        iv.setImageBitmap(BitmapFactory.decodeStream(getActivity().getAssets().open(clip.mArtwork)));
      }
    }
    ((TextView)view.findViewById(R.id.clipTypeTitle)).setText(clip.mTitle);
    if (clip.mShotSize != null)     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setText(clip.mShotSize);
 else     ((TextView)view.findViewById(R.id.clipTypeShotSize)).setVisibility(View.GONE);
    ((TextView)view.findViewById(R.id.clipTypeGoal)).setText(clip.mGoal);
    ((TextView)view.findViewById(R.id.clipTypeDescription)).setText(clip.mDescription);
    ((TextView)view.findViewById(R.id.clipTypeTip)).setText(clip.mTip);
    iv.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        ((SceneEditorActivity)mActivity).openCaptureMode(clip,mClipIndex);
      }
    }
);
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return view;
}",0.9578497251069028
187204,"public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}","public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_audio);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}",0.9301735082522218
187205,"public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}","public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_audio);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}",0.9301735082522218
187206,"public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}","public Bitmap getThumbnail(Media media){
  if (media == null)   return null;
  String path=media.getPath();
  if (media.getMimeType() == null) {
    return null;
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    File fileThumb=new File(path + ""String_Node_Str"");
    if (fileThumb.exists()) {
      final BitmapFactory.Options options=new BitmapFactory.Options();
      options.inSampleSize=4;
      return BitmapFactory.decodeFile(fileThumb.getAbsolutePath(),options);
    }
 else {
      Bitmap bmp=MediaUtils.getVideoFrame(path,-1);
      try {
        bmp.compress(Bitmap.CompressFormat.JPEG,70,new FileOutputStream(fileThumb));
      }
 catch (      FileNotFoundException e) {
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
      return bmp;
    }
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    final BitmapFactory.Options options=new BitmapFactory.Options();
    options.inSampleSize=4;
    return BitmapFactory.decodeFile(path,options);
  }
 else   if (media.getMimeType().startsWith(""String_Node_Str"")) {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_audio);
  }
 else {
    return BitmapFactory.decodeResource(getResources(),R.drawable.thumb_complete);
  }
}",0.9301735082522218
187207,"private void renderPreview(){
  String exportFileName=""String_Node_Str"" + mMPM.mScene.getId();
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    mMPM.doExportMedia(exportFileName,false);
    MediaDesc mdExported=mMPM.getExportMedia();
    File mediaFile=new File(mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mdExported.path);
      message.getData().putString(""String_Node_Str"",mdExported.mimeType);
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}","private void renderPreview(){
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    mMPM.doExportMedia(mMPM.getExportMediaFile(),false,true);
    MediaDesc mdExported=mMPM.getExportMedia();
    File mediaFile=new File(mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mdExported.path);
      message.getData().putString(""String_Node_Str"",mdExported.mimeType);
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}",0.9585798816568049
187208,"private void handlePublish(final boolean doYouTube,final boolean doStoryMaker){
  EditText etTitle=(EditText)mActivity.findViewById(R.id.etStoryTitle);
  EditText etDesc=(EditText)mActivity.findViewById(R.id.editTextDescribe);
  final String exportFileName=mActivity.mMPM.mProject.getId() + ""String_Node_Str"" + new Date().getTime();
  mHandlerPub.sendEmptyMessage(999);
  final String title=etTitle.getText().toString();
  final String desc=etDesc.getText().toString();
  String ytdesc=desc;
  if (ytdesc.length() == 0) {
    ytdesc=getActivity().getString(R.string.default_youtube_desc);
  }
  final YouTubeSubmit yts=new YouTubeSubmit(null,title,ytdesc,new Date(),mActivity,mHandlerPub,mActivity.getBaseContext());
  Thread thread=new Thread(){
    public void run(){
      ServerManager sm=StoryMakerApp.getServerManager();
      sm.setContext(mActivity.getBaseContext());
      Message msg=mHandlerPub.obtainMessage(888);
      msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
      mHandlerPub.sendMessage(msg);
      try {
        mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
        mActivity.mdExported=mActivity.mMPM.getExportMedia();
        File mediaFile=new File(mActivity.mdExported.path);
        if (mediaFile.exists()) {
          Message message=mHandlerPub.obtainMessage(777);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
          if (doYouTube) {
            String mediaEmbed=""String_Node_Str"";
            if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
              msg=mHandlerPub.obtainMessage(888);
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
              mHandlerPub.sendMessage(msg);
              yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
              yts.getAuthTokenWithPermission(mMediaUploadAccount);
              while (yts.videoId == null) {
                try {
                  Thread.sleep(1000);
                }
 catch (                Exception e) {
                }
              }
              mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
              message.getData().putString(""String_Node_Str"",yts.videoId);
            }
 else             if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
              boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
              if (installed) {
                String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
                mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
                SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
              }
 else {
                SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
              }
            }
 else             if (sm.hasCreds()) {
              String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
              mediaEmbed=murl;
            }
            if (doStoryMaker) {
              String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
              String postId=sm.post(title,descWithMedia);
              String urlPost=sm.getPostUrl(postId);
              message.getData().putString(""String_Node_Str"",urlPost);
            }
          }
          mHandlerPub.sendMessage(message);
        }
 else {
          Message msgErr=new Message();
          msgErr.what=-1;
          msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
          mHandlerPub.sendMessage(msgErr);
        }
      }
 catch (      XmlRpcFault e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
catch (      Exception e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
    }
  }
;
  thread.start();
}","private void handlePublish(final boolean doYouTube,final boolean doStoryMaker){
  EditText etTitle=(EditText)mActivity.findViewById(R.id.etStoryTitle);
  EditText etDesc=(EditText)mActivity.findViewById(R.id.editTextDescribe);
  mHandlerPub.sendEmptyMessage(999);
  final String title=etTitle.getText().toString();
  final String desc=etDesc.getText().toString();
  String ytdesc=desc;
  if (ytdesc.length() == 0) {
    ytdesc=getActivity().getString(R.string.default_youtube_desc);
  }
  final YouTubeSubmit yts=new YouTubeSubmit(null,title,ytdesc,new Date(),mActivity,mHandlerPub,mActivity.getBaseContext());
  Thread thread=new Thread(){
    public void run(){
      ServerManager sm=StoryMakerApp.getServerManager();
      sm.setContext(mActivity.getBaseContext());
      Message msg=mHandlerPub.obtainMessage(888);
      msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
      mHandlerPub.sendMessage(msg);
      try {
        File fileExport=mActivity.mMPM.getExportMediaFile();
        boolean overwrite=false;
        mActivity.mMPM.doExportMedia(fileExport,doYouTube,overwrite);
        mActivity.mdExported=mActivity.mMPM.getExportMedia();
        File mediaFile=new File(mActivity.mdExported.path);
        if (mediaFile.exists()) {
          Message message=mHandlerPub.obtainMessage(777);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
          if (doYouTube) {
            String mediaEmbed=""String_Node_Str"";
            if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
              msg=mHandlerPub.obtainMessage(888);
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
              mHandlerPub.sendMessage(msg);
              yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
              yts.getAuthTokenWithPermission(mMediaUploadAccount);
              while (yts.videoId == null) {
                try {
                  Thread.sleep(1000);
                }
 catch (                Exception e) {
                }
              }
              mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
              message.getData().putString(""String_Node_Str"",yts.videoId);
            }
 else             if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
              boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
              if (installed) {
                String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
                mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
                SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
              }
 else {
                SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
              }
            }
 else             if (sm.hasCreds()) {
              String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
              mediaEmbed=murl;
            }
            if (doStoryMaker) {
              String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
              String[] categories=null;
              String postId=sm.post(title,descWithMedia,categories);
              String urlPost=sm.getPostUrl(postId);
              message.getData().putString(""String_Node_Str"",urlPost);
            }
          }
          mHandlerPub.sendMessage(message);
        }
 else {
          Message msgErr=new Message();
          msgErr.what=-1;
          msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
          mHandlerPub.sendMessage(msgErr);
        }
      }
 catch (      XmlRpcFault e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
catch (      Exception e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
    }
  }
;
  thread.start();
}",0.8155958264689731
187209,"public void onClick(DialogInterface dialog,int item){
  mMediaUploadAccount=accounts[item].name;
}","public void onClick(DialogInterface dialog,int item){
  mMediaUploadAccount=accounts[item].name;
  handlePublish(true,true);
}",0.875
187210,"private void checkYouTubeAccount(){
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mActivity);
  mMediaUploadAccount=settings.getString(""String_Node_Str"",null);
  if (mMediaUploadAccount == null) {
    AccountManager accountManager=AccountManager.get(mActivity);
    final Account[] accounts=accountManager.getAccounts();
    if (accounts.length > 0) {
      String[] accountNames=new String[accounts.length];
      for (int i=0; i < accounts.length; i++) {
        accountNames[i]=accounts[i].name + ""String_Node_Str"" + accounts[i].type+ ""String_Node_Str"";
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setTitle(R.string.choose_account_for_youtube_upload);
      builder.setItems(accountNames,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int item){
          mMediaUploadAccount=accounts[item].name;
        }
      }
).show();
    }
  }
}","private void checkYouTubeAccount(){
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mActivity);
  mMediaUploadAccount=settings.getString(""String_Node_Str"",null);
  if (mMediaUploadAccount == null) {
    AccountManager accountManager=AccountManager.get(mActivity);
    final Account[] accounts=accountManager.getAccounts();
    if (accounts.length > 0) {
      String[] accountNames=new String[accounts.length];
      for (int i=0; i < accounts.length; i++) {
        accountNames[i]=accounts[i].name + ""String_Node_Str"" + accounts[i].type+ ""String_Node_Str"";
      }
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setTitle(R.string.choose_account_for_youtube_upload);
      builder.setItems(accountNames,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int item){
          mMediaUploadAccount=accounts[item].name;
          handlePublish(true,true);
        }
      }
).show();
    }
  }
}",0.9818731117824774
187211,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_story_publish) {
    EditText etTitle=(EditText)view.findViewById(R.id.etStoryTitle);
    EditText etDesc=(EditText)view.findViewById(R.id.editTextDescribe);
    etTitle.setText(mActivity.mMPM.mProject.getTitle());
    ToggleButton tbYouTube=(ToggleButton)view.findViewById(R.id.toggleButtonYoutube);
    tbYouTube.setOnCheckedChangeListener(new OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        if (isChecked) {
          checkYouTubeAccount();
        }
      }
    }
);
    ToggleButton tbStoryMaker=(ToggleButton)view.findViewById(R.id.toggleButtonStoryMaker);
    tbStoryMaker.setOnCheckedChangeListener(new OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        if (isChecked) {
          ServerManager sm=StoryMakerApp.getServerManager();
          sm.setContext(mActivity.getBaseContext());
          if (!sm.hasCreds())           showLogin();
        }
      }
    }
);
    Button btnRender=(Button)view.findViewById(R.id.btnRender);
    btnRender.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        handlePublish(false,false);
      }
    }
);
    Button btn=(Button)view.findViewById(R.id.btnPublish);
    btn.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        doPublish();
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_story_publish) {
    EditText etTitle=(EditText)view.findViewById(R.id.etStoryTitle);
    EditText etDesc=(EditText)view.findViewById(R.id.editTextDescribe);
    etTitle.setText(mActivity.mMPM.mProject.getTitle());
    Button btnRender=(Button)view.findViewById(R.id.btnRender);
    btnRender.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View arg0){
        File fileExport=mActivity.mMPM.getExportMediaFile();
        if (fileExport.exists())         fileExport.delete();
        handlePublish(false,false);
      }
    }
);
    Button btn=(Button)view.findViewById(R.id.btnPublish);
    btn.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        doPublish();
      }
    }
);
  }
  return view;
}",0.4299698795180723
187212,"public void run(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
    mActivity.mdExported=mActivity.mMPM.getExportMedia();
    File mediaFile=new File(mActivity.mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
      if (doYouTube) {
        String mediaEmbed=""String_Node_Str"";
        if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
          msg=mHandlerPub.obtainMessage(888);
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
          mHandlerPub.sendMessage(msg);
          yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
          yts.getAuthTokenWithPermission(mMediaUploadAccount);
          while (yts.videoId == null) {
            try {
              Thread.sleep(1000);
            }
 catch (            Exception e) {
            }
          }
          mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
          message.getData().putString(""String_Node_Str"",yts.videoId);
        }
 else         if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
          boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
          if (installed) {
            String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
            mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
            SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
          }
 else {
            SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
          }
        }
 else         if (sm.hasCreds()) {
          String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
          mediaEmbed=murl;
        }
        if (doStoryMaker) {
          String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
          String postId=sm.post(title,descWithMedia);
          String urlPost=sm.getPostUrl(postId);
          message.getData().putString(""String_Node_Str"",urlPost);
        }
      }
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  XmlRpcFault e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}","public void run(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    File fileExport=mActivity.mMPM.getExportMediaFile();
    boolean overwrite=false;
    mActivity.mMPM.doExportMedia(fileExport,doYouTube,overwrite);
    mActivity.mdExported=mActivity.mMPM.getExportMedia();
    File mediaFile=new File(mActivity.mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
      if (doYouTube) {
        String mediaEmbed=""String_Node_Str"";
        if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
          msg=mHandlerPub.obtainMessage(888);
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
          mHandlerPub.sendMessage(msg);
          yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
          yts.getAuthTokenWithPermission(mMediaUploadAccount);
          while (yts.videoId == null) {
            try {
              Thread.sleep(1000);
            }
 catch (            Exception e) {
            }
          }
          mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
          message.getData().putString(""String_Node_Str"",yts.videoId);
        }
 else         if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
          boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
          if (installed) {
            String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
            mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
            SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
          }
 else {
            SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
          }
        }
 else         if (sm.hasCreds()) {
          String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
          mediaEmbed=murl;
        }
        if (doStoryMaker) {
          String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
          String[] categories=null;
          String postId=sm.post(title,descWithMedia,categories);
          String urlPost=sm.getPostUrl(postId);
          message.getData().putString(""String_Node_Str"",urlPost);
        }
      }
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  XmlRpcFault e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}",0.9722893278385676
187213,"public void doPublish(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  ToggleButton tbYouTube=(ToggleButton)mActivity.findViewById(R.id.toggleButtonYoutube);
  ToggleButton tbStoryMaker=(ToggleButton)mActivity.findViewById(R.id.toggleButtonStoryMaker);
  final boolean doYouTube=tbYouTube.isChecked();
  final boolean doStoryMaker=tbStoryMaker.isChecked();
  if (!sm.hasCreds() && doStoryMaker)   showLogin();
 else   handlePublish(doYouTube,doStoryMaker);
}","public void doPublish(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  if (!sm.hasCreds())   showLogin();
 else   checkYouTubeAccount();
}",0.5198863636363636
187214,"public static ArrayList<Lesson> loadLessonList(Context context,File targetFolder,String subFolder,String lang,int matchStatus){
  ArrayList<Lesson> lessons=new ArrayList<Lesson>();
  File lessonFolder=targetFolder;
  if (subFolder != null)   lessonFolder=new File(targetFolder,subFolder);
  if (lessonFolder.exists()) {
    File[] fileLessons=lessonFolder.listFiles();
    for (    File fileLesson : fileLessons) {
      try {
        File fileLessonJson=new File(fileLesson,""String_Node_Str"");
        if (!fileLessonJson.exists()) {
          fileLessonJson=new File(fileLesson,""String_Node_Str"");
        }
        File fileStatus=new File(fileLesson,LESSON_STATUS_FILE);
        int status=-1;
        if (fileStatus.exists()) {
          byte[] bStatus=new byte[(int)fileStatus.length()];
          IOUtils.readFully(new FileInputStream(fileStatus),bStatus);
          status=Integer.parseInt(new String(bStatus).trim());
        }
        if (matchStatus != -1 && matchStatus != status)         continue;
        if (fileLessonJson.exists()) {
          Lesson lesson=Lesson.parse(IOUtils.toString(new FileInputStream(fileLessonJson)));
          File fileIdx=new File(fileLesson,lesson.mResourcePath);
          lesson.mTitle=fileLesson.getName() + ""String_Node_Str"" + lesson.mTitle;
          lesson.mResourcePath=fileIdx.getAbsolutePath();
          lesson.mStatus=status;
          lessons.add(lesson);
          lesson.mLocalPath=fileLesson;
          lesson.mSortIdx=Integer.parseInt(lesson.mTitle.substring(2,lesson.mTitle.indexOf(""String_Node_Str"")));
        }
      }
 catch (      FileNotFoundException fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
catch (      IOException fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
catch (      Exception fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
    }
  }
  Collections.sort(lessons,new Comparator<Lesson>(){
    public int compare(    Lesson lessonA,    Lesson lessonB){
      return lessonA.mSortIdx.compareTo(lessonB.mSortIdx);
    }
  }
);
  return lessons;
}","public static ArrayList<Lesson> loadLessonList(Context context,File targetFolder,String subFolder,String lang,int matchStatus){
  ArrayList<Lesson> lessons=new ArrayList<Lesson>();
  File lessonFolder=targetFolder;
  if (subFolder != null)   lessonFolder=new File(targetFolder,subFolder);
  if (lessonFolder.exists()) {
    File[] fileLessons=lessonFolder.listFiles();
    for (    File fileLesson : fileLessons) {
      try {
        File fileLessonJson=new File(fileLesson,""String_Node_Str"");
        if (!fileLessonJson.exists()) {
          fileLessonJson=new File(fileLesson,""String_Node_Str"");
        }
        File fileStatus=new File(fileLesson,LESSON_STATUS_FILE);
        int status=-1;
        Date statusModified=null;
        if (fileStatus.exists()) {
          byte[] bStatus=new byte[(int)fileStatus.length()];
          IOUtils.readFully(new FileInputStream(fileStatus),bStatus);
          status=Integer.parseInt(new String(bStatus).trim());
          statusModified=new Date(fileStatus.lastModified());
        }
        if (matchStatus != -1 && matchStatus != status)         continue;
        if (fileLessonJson.exists()) {
          Lesson lesson=Lesson.parse(IOUtils.toString(new FileInputStream(fileLessonJson)));
          File fileIdx=new File(fileLesson,lesson.mResourcePath);
          lesson.mTitle=fileLesson.getName() + ""String_Node_Str"" + lesson.mTitle;
          lesson.mResourcePath=fileIdx.getAbsolutePath();
          lesson.mStatus=status;
          lesson.mStatusModified=statusModified;
          lessons.add(lesson);
          lesson.mLocalPath=fileLesson;
          lesson.mSortIdx=Integer.parseInt(lesson.mTitle.substring(2,lesson.mTitle.indexOf(""String_Node_Str"")));
        }
      }
 catch (      FileNotFoundException fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
catch (      IOException fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
catch (      Exception fnfe) {
        Log.w(AppConstants.TAG,""String_Node_Str"" + fileLesson.getAbsolutePath(),fnfe);
      }
    }
  }
  Collections.sort(lessons,new Comparator<Lesson>(){
    public int compare(    Lesson lessonA,    Lesson lessonB){
      return lessonA.mSortIdx.compareTo(lessonB.mSortIdx);
    }
  }
);
  return lessons;
}",0.9680123538495478
187215,"@Override public void onClick(DialogInterface dialog,int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
    String urlOnline=postUrl;
  if (youTubeId != null)   urlOnline=""String_Node_Str"" + youTubeId;
Intent i=new Intent(Intent.ACTION_VIEW);
i.setData(Uri.parse(urlOnline));
startActivity(i);
break;
case DialogInterface.BUTTON_NEGATIVE:
mMPM.mMediaHelper.playMedia(localMedia,mimeType);
break;
}
}","@Override public void onClick(DialogInterface dialog,int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
    Intent i=new Intent(Intent.ACTION_VIEW);
  i.setData(Uri.parse(postUrl));
startActivity(i);
break;
case DialogInterface.BUTTON_NEGATIVE:
break;
}
}",0.7638483965014577
187216,"public void showPublished(final String postUrl,final File localMedia,final String youTubeId,final String mimeType){
  if (youTubeId != null || postUrl != null) {
    DialogInterface.OnClickListener dialogClickListener=new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
          String urlOnline=postUrl;
        if (youTubeId != null)         urlOnline=""String_Node_Str"" + youTubeId;
      Intent i=new Intent(Intent.ACTION_VIEW);
    i.setData(Uri.parse(urlOnline));
  startActivity(i);
break;
case DialogInterface.BUTTON_NEGATIVE:
mMPM.mMediaHelper.playMedia(localMedia,mimeType);
break;
}
}
}
;
AlertDialog.Builder builder=new AlertDialog.Builder(this);
builder.setMessage(R.string.view_published_media_online_or_local_copy_).setPositiveButton(R.string.youtube,dialogClickListener).setNegativeButton(R.string.local,dialogClickListener).show();
}
 else {
mMPM.mMediaHelper.playMedia(localMedia,mimeType);
}
}","public void showPublished(final String postUrl,final File localMedia,final String youTubeId,final String mimeType){
  if (youTubeId != null || postUrl != null) {
    DialogInterface.OnClickListener dialogClickListener=new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
switch (which) {
case DialogInterface.BUTTON_POSITIVE:
          Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(postUrl));
      startActivity(i);
    break;
case DialogInterface.BUTTON_NEGATIVE:
  break;
}
}
}
;
AlertDialog.Builder builder=new AlertDialog.Builder(this);
builder.setMessage(R.string.view_published_media_online_or_local_copy_).setPositiveButton(R.string.yes,dialogClickListener).setNegativeButton(R.string.no,dialogClickListener).show();
}
 else {
mMPM.mMediaHelper.playMedia(localMedia,mimeType);
}
}",0.6176317162232655
187217,"private void initActivityList(){
  mCardView=(CardUI)findViewById(R.id.cardsview);
  mCardView.clearCards();
  mCardView.setSwipeable(false);
  ArrayList<ActivityEntry> alActivity=new ArrayList<ActivityEntry>();
  for (int i=mLessonsCompleted.size() - 1; i > mLessonsCompleted.size() - 4 && i > -1; i--) {
    Lesson lesson=mLessonsCompleted.get(i);
    MyCard card=new MyCard(getString(R.string.lessons_congratulations_you_have_completed_the_lesson_),lesson.mTitle);
    card.setIcon(R.drawable.ic_home_lesson);
    card.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(HomeActivity.this,LessonsActivity.class));
      }
    }
);
    Date cardDate=new Date();
    if (lesson.mStatusModified != null)     cardDate=lesson.mStatusModified;
    ActivityEntry ae=new ActivityEntry(card,cardDate);
    alActivity.add(ae);
  }
  for (int i=mListProjects.size() - 1; i > mListProjects.size() - 4 && i > -1; i--) {
    Project project=mListProjects.get(i);
    Media[] mediaList=project.getScenesAsArray()[0].getMediaAsArray();
    Drawable img=null;
    if (mediaList != null && mediaList.length > 0) {
      for (      Media media : mediaList)       if (media != null) {
        Bitmap bmp=getThumbnail(media);
        if (bmp != null) {
          img=new BitmapDrawable(getResources(),bmp);
          break;
        }
      }
    }
    if (img != null) {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setImage(img);
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      Date cardDate=new Date(new File(mediaList[0].getPath()).lastModified());
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
 else {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      mCardView.addCard(card);
      Date cardDate=new Date();
      if (mediaList.length > 0)       cardDate=new Date(new File(mediaList[0].getPath()).lastModified());
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
  }
  Collections.sort(alActivity);
  for (  ActivityEntry ae : alActivity)   mCardView.addCard(ae.card);
  mCardView.refresh();
}","private void initActivityList(){
  mCardView=(CardUI)findViewById(R.id.cardsview);
  if (mCardView == null)   return;
  mCardView.clearCards();
  mCardView.setSwipeable(false);
  ArrayList<ActivityEntry> alActivity=new ArrayList<ActivityEntry>();
  for (int i=mLessonsCompleted.size() - 1; i > mLessonsCompleted.size() - 4 && i > -1; i--) {
    Lesson lesson=mLessonsCompleted.get(i);
    MyCard card=new MyCard(getString(R.string.lessons_congratulations_you_have_completed_the_lesson_),lesson.mTitle);
    card.setIcon(R.drawable.ic_home_lesson);
    card.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(HomeActivity.this,LessonsActivity.class));
      }
    }
);
    Date cardDate=new Date();
    if (lesson.mStatusModified != null)     cardDate=lesson.mStatusModified;
    ActivityEntry ae=new ActivityEntry(card,cardDate);
    alActivity.add(ae);
  }
  for (int i=mListProjects.size() - 1; i > mListProjects.size() - 4 && i > -1; i--) {
    Project project=mListProjects.get(i);
    Media[] mediaList=project.getScenesAsArray()[0].getMediaAsArray();
    Drawable img=null;
    if (mediaList != null && mediaList.length > 0) {
      for (      Media media : mediaList)       if (media != null) {
        Bitmap bmp=getThumbnail(media);
        if (bmp != null) {
          img=new BitmapDrawable(getResources(),bmp);
          break;
        }
      }
    }
    if (img != null) {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setImage(img);
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      Date cardDate=new Date(new File(mediaList[0].getPath()).lastModified());
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
 else {
      MyCard card=new MyCard(getString(R.string.title_activity_new_story),project.getTitle());
      card.setId(i);
      card.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          showProject(v.getId());
        }
      }
);
      mCardView.addCard(card);
      Date cardDate=new Date();
      if (mediaList.length > 0)       cardDate=new Date(new File(mediaList[0].getPath()).lastModified());
      ActivityEntry ae=new ActivityEntry(card,cardDate);
      alActivity.add(ae);
    }
  }
  Collections.sort(alActivity);
  for (  ActivityEntry ae : alActivity)   mCardView.addCard(ae.card);
  mCardView.refresh();
}",0.9932497589199616
187218,"public void fetchAuthToken(final String accountName,Activity activity,final AuthorizationListener<String> listener){
  final Account account=getAccount(accountName);
  if (account != null) {
    accountManager.getAuthToken(account,authTokenType,null,activity,new AccountManagerCallback<Bundle>(){
      public void run(      AccountManagerFuture<Bundle> future){
        try {
          Log.d(Config.APP_NAME,""String_Node_Str"" + account.name);
          Bundle extras=future.getResult();
          String authToken=extras.getString(AccountManager.KEY_AUTHTOKEN);
          listener.onSuccess(authToken);
        }
 catch (        OperationCanceledException e) {
          listener.onCanceled();
        }
catch (        IOException e) {
          listener.onError(e);
        }
catch (        AuthenticatorException e) {
          listener.onError(e);
        }
      }
    }
,null);
  }
 else {
    listener.onError(new Exception(""String_Node_Str"" + accountName));
  }
}","public void fetchAuthToken(final String accountName,Activity activity,final AuthorizationListener<String> listener){
  final Account account=getAccount(accountName);
  Bundle bundle=new Bundle();
  if (account != null) {
    accountManager.getAuthToken(account,authTokenType,bundle,activity,new AccountManagerCallback<Bundle>(){
      public void run(      AccountManagerFuture<Bundle> future){
        try {
          Log.d(Config.APP_NAME,""String_Node_Str"" + account.name);
          Bundle extras=future.getResult();
          String authToken=extras.getString(AccountManager.KEY_AUTHTOKEN);
          listener.onSuccess(authToken);
        }
 catch (        OperationCanceledException e) {
          listener.onCanceled();
        }
catch (        IOException e) {
          listener.onError(e);
        }
catch (        AuthenticatorException e) {
          listener.onError(e);
        }
      }
    }
,handler);
  }
 else {
    listener.onError(new Exception(""String_Node_Str"" + accountName));
  }
}",0.9742033383915024
187219,"public YouTubeSubmit(File videoFile,String title,String description,Date dateTaken,Activity activity,Handler handler,Context context){
  this.authorizer=new GlsAuthorizer.GlsAuthorizerFactory().getAuthorizer(activity,GlsAuthorizer.YOUTUBE_AUTH_TOKEN_TYPE);
  this.videoFile=videoFile;
  this.activity=activity;
  this.title=title;
  this.description=description;
  this.dateTaken=dateTaken;
  this.handler=handler;
  this.mContext=context;
  httpClient=new StrongHttpsClient(mContext);
  StrongHttpsClient httpClient=new StrongHttpsClient(mContext);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
  mUseTor=settings.getBoolean(""String_Node_Str"",false);
  if (mUseTor) {
    httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
  }
}","public YouTubeSubmit(File videoFile,String title,String description,Date dateTaken,Activity activity,Handler handler,Context context){
  authorizer=(GlsAuthorizer)new GlsAuthorizer.GlsAuthorizerFactory().getAuthorizer(activity,GlsAuthorizer.YOUTUBE_AUTH_TOKEN_TYPE);
  authorizer.setHandler(handler);
  this.videoFile=videoFile;
  this.activity=activity;
  this.title=title;
  this.description=description;
  this.dateTaken=dateTaken;
  this.handler=handler;
  this.mContext=context;
  httpClient=new StrongHttpsClient(mContext);
  SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
  mUseTor=settings.getBoolean(""String_Node_Str"",false);
  if (mUseTor) {
    httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
  }
}",0.927070457354759
187220,"public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate,mScene);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScenes().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScenes().size() - 1;
  mActivity.mdExported=null;
}","public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate,mScene);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScene(0).getClips().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScene(0).getClips().size() - 1;
  mActivity.mdExported=null;
}",0.9735576923076924
187221,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}",0.992501704158146
187222,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}",0.9966391689581424
187223,"public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate,mScene);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScenes().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScenes().size() - 1;
  mActivity.mdExported=null;
}","public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate,mScene);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScene(0).getClips().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScene(0).getClips().size() - 1;
  mActivity.mdExported=null;
}",0.9735576923076924
187224,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}",0.992501704158146
187225,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}",0.9966391689581424
187226,"@Override public int getCount(){
  return sTemplate.getScene(mScene).getClips().size();
}","@Override public int getCount(){
  return sTemplate.getScene(0).getClips().size();
}",0.9595375722543352
187227,"@Override public int getCount(){
  return sTemplate.getScene(mScene).getClips().size();
}","@Override public int getCount(){
  return sTemplate.getScene(0).getClips().size();
}",0.9595375722543352
187228,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.activity_lessons);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  setSupportProgressBarIndeterminateVisibility(false);
  mListView=new LessonListView(this,this);
  LessonSectionFragment fLessons=new LessonSectionFragment();
  fLessons.setListView(mListView);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager(),fLessons);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_lessons);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  setSupportProgressBarIndeterminateVisibility(false);
  mListView=new LessonListView(this,this);
  LessonSectionFragment fLessons=new LessonSectionFragment();
  fLessons.setListView(mListView);
  mSectionsPagerAdapter=new SectionsPagerAdapter(getSupportFragmentManager(),fLessons);
  final ActionBar actionBar=getSupportActionBar();
  actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);
  mViewPager=(ViewPager)findViewById(R.id.pager);
  mViewPager.setAdapter(mSectionsPagerAdapter);
  mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener(){
    @Override public void onPageSelected(    int position){
      actionBar.setSelectedNavigationItem(position);
    }
  }
);
  for (int i=0; i < mSectionsPagerAdapter.getCount(); i++) {
    actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
  }
}",0.9666666666666668
187229,"private void handlePublish(final boolean doYouTube,final boolean doStoryMaker){
  EditText etTitle=(EditText)mActivity.findViewById(R.id.etStoryTitle);
  EditText etDesc=(EditText)mActivity.findViewById(R.id.editTextDescribe);
  final String exportFileName=mActivity.mMPM.mProject.getId() + ""String_Node_Str"" + new Date().getTime();
  mHandlerPub.sendEmptyMessage(999);
  final String title=etTitle.getText().toString();
  final String desc=etDesc.getText().toString();
  String ytdesc=desc;
  if (ytdesc.length() == 0) {
    ytdesc=getActivity().getString(R.string.default_youtube_desc);
  }
  final YouTubeSubmit yts=new YouTubeSubmit(null,title,ytdesc,new Date(),mActivity,mHandlerPub,mActivity.getBaseContext());
  Thread thread=new Thread(){
    public void run(){
      ServerManager sm=StoryMakerApp.getServerManager();
      sm.setContext(mActivity.getBaseContext());
      Message msg=mHandlerPub.obtainMessage(888);
      msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
      mHandlerPub.sendMessage(msg);
      try {
        if (mActivity.mdExported == null)         mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
        mActivity.mdExported=mActivity.mMPM.getExportMedia();
        File mediaFile=new File(mActivity.mdExported.path);
        if (mediaFile.exists()) {
          Message message=mHandlerPub.obtainMessage(777);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
          if (doYouTube) {
            String mediaEmbed=""String_Node_Str"";
            if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
              msg=mHandlerPub.obtainMessage(888);
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
              mHandlerPub.sendMessage(msg);
              yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
              yts.getAuthTokenWithPermission(mMediaUploadAccount);
              while (yts.videoId == null) {
                try {
                  Thread.sleep(1000);
                }
 catch (                Exception e) {
                }
              }
              mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
              message.getData().putString(""String_Node_Str"",yts.videoId);
            }
 else             if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
              boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
              if (installed) {
                String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
                mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
                SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
              }
 else {
                SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
              }
            }
 else             if (sm.hasCreds()) {
              String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
              mediaEmbed=murl;
            }
            if (doStoryMaker) {
              String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
              String postId=sm.post(title,descWithMedia);
              String urlPost=sm.getPostUrl(postId);
              message.getData().putString(""String_Node_Str"",urlPost);
            }
          }
          mHandlerPub.sendMessage(message);
        }
 else {
          Message msgErr=new Message();
          msgErr.what=-1;
          msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
          mHandlerPub.sendMessage(msgErr);
        }
      }
 catch (      XmlRpcFault e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
catch (      Exception e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
    }
  }
;
  thread.start();
}","private void handlePublish(final boolean doYouTube,final boolean doStoryMaker){
  EditText etTitle=(EditText)mActivity.findViewById(R.id.etStoryTitle);
  EditText etDesc=(EditText)mActivity.findViewById(R.id.editTextDescribe);
  final String exportFileName=mActivity.mMPM.mProject.getId() + ""String_Node_Str"" + new Date().getTime();
  mHandlerPub.sendEmptyMessage(999);
  final String title=etTitle.getText().toString();
  final String desc=etDesc.getText().toString();
  String ytdesc=desc;
  if (ytdesc.length() == 0) {
    ytdesc=getActivity().getString(R.string.default_youtube_desc);
  }
  final YouTubeSubmit yts=new YouTubeSubmit(null,title,ytdesc,new Date(),mActivity,mHandlerPub,mActivity.getBaseContext());
  Thread thread=new Thread(){
    public void run(){
      ServerManager sm=StoryMakerApp.getServerManager();
      sm.setContext(mActivity.getBaseContext());
      Message msg=mHandlerPub.obtainMessage(888);
      msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
      mHandlerPub.sendMessage(msg);
      try {
        mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
        mActivity.mdExported=mActivity.mMPM.getExportMedia();
        File mediaFile=new File(mActivity.mdExported.path);
        if (mediaFile.exists()) {
          Message message=mHandlerPub.obtainMessage(777);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
          message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
          if (doYouTube) {
            String mediaEmbed=""String_Node_Str"";
            if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
              msg=mHandlerPub.obtainMessage(888);
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
              msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
              mHandlerPub.sendMessage(msg);
              yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
              yts.getAuthTokenWithPermission(mMediaUploadAccount);
              while (yts.videoId == null) {
                try {
                  Thread.sleep(1000);
                }
 catch (                Exception e) {
                }
              }
              mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
              message.getData().putString(""String_Node_Str"",yts.videoId);
            }
 else             if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
              boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
              if (installed) {
                String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
                mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
                SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
              }
 else {
                SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
              }
            }
 else             if (sm.hasCreds()) {
              String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
              mediaEmbed=murl;
            }
            if (doStoryMaker) {
              String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
              String postId=sm.post(title,descWithMedia);
              String urlPost=sm.getPostUrl(postId);
              message.getData().putString(""String_Node_Str"",urlPost);
            }
          }
          mHandlerPub.sendMessage(message);
        }
 else {
          Message msgErr=new Message();
          msgErr.what=-1;
          msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
          mHandlerPub.sendMessage(msgErr);
        }
      }
 catch (      XmlRpcFault e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
catch (      Exception e) {
        Message msgErr=new Message();
        msgErr.what=-1;
        msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
        mHandlerPub.sendMessage(msgErr);
        Log.e(AppConstants.TAG,""String_Node_Str"",e);
      }
    }
  }
;
  thread.start();
}",0.995385629531971
187230,"public void run(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    if (mActivity.mdExported == null)     mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
    mActivity.mdExported=mActivity.mMPM.getExportMedia();
    File mediaFile=new File(mActivity.mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
      if (doYouTube) {
        String mediaEmbed=""String_Node_Str"";
        if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
          msg=mHandlerPub.obtainMessage(888);
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
          mHandlerPub.sendMessage(msg);
          yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
          yts.getAuthTokenWithPermission(mMediaUploadAccount);
          while (yts.videoId == null) {
            try {
              Thread.sleep(1000);
            }
 catch (            Exception e) {
            }
          }
          mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
          message.getData().putString(""String_Node_Str"",yts.videoId);
        }
 else         if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
          boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
          if (installed) {
            String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
            mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
            SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
          }
 else {
            SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
          }
        }
 else         if (sm.hasCreds()) {
          String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
          mediaEmbed=murl;
        }
        if (doStoryMaker) {
          String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
          String postId=sm.post(title,descWithMedia);
          String urlPost=sm.getPostUrl(postId);
          message.getData().putString(""String_Node_Str"",urlPost);
        }
      }
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  XmlRpcFault e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}","public void run(){
  ServerManager sm=StoryMakerApp.getServerManager();
  sm.setContext(mActivity.getBaseContext());
  Message msg=mHandlerPub.obtainMessage(888);
  msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.rendering_clips_));
  mHandlerPub.sendMessage(msg);
  try {
    mActivity.mMPM.doExportMedia(exportFileName,doYouTube);
    mActivity.mdExported=mActivity.mMPM.getExportMedia();
    File mediaFile=new File(mActivity.mdExported.path);
    if (mediaFile.exists()) {
      Message message=mHandlerPub.obtainMessage(777);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.path);
      message.getData().putString(""String_Node_Str"",mActivity.mdExported.mimeType);
      if (doYouTube) {
        String mediaEmbed=""String_Node_Str"";
        if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_VIDEO || mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_ESSAY) {
          msg=mHandlerPub.obtainMessage(888);
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.uploading));
          msg.getData().putString(""String_Node_Str"",getActivity().getString(R.string.connecting_to_youtube_));
          mHandlerPub.sendMessage(msg);
          yts.setVideoFile(mediaFile,mActivity.mdExported.mimeType);
          yts.getAuthTokenWithPermission(mMediaUploadAccount);
          while (yts.videoId == null) {
            try {
              Thread.sleep(1000);
            }
 catch (            Exception e) {
            }
          }
          mediaEmbed=""String_Node_Str"" + yts.videoId + ""String_Node_Str"";
          message.getData().putString(""String_Node_Str"",yts.videoId);
        }
 else         if (mActivity.mMPM.mProject.getStoryType() == Project.STORY_TYPE_AUDIO) {
          boolean installed=SoundCloudUploader.isCompatibleSoundCloudInstalled(mActivity.getBaseContext());
          if (installed) {
            String scurl=SoundCloudUploader.buildSoundCloudURL(mMediaUploadAccount,mediaFile,title);
            mediaEmbed=""String_Node_Str"" + scurl + ""String_Node_Str"";
            SoundCloudUploader.uploadSound(mediaFile,title,desc,REQ_SOUNDCLOUD,mActivity);
          }
 else {
            SoundCloudUploader.installSoundCloud(mActivity.getBaseContext());
          }
        }
 else         if (sm.hasCreds()) {
          String murl=sm.addMedia(mActivity.mdExported.mimeType,mediaFile);
          mediaEmbed=murl;
        }
        if (doStoryMaker) {
          String descWithMedia=desc + ""String_Node_Str"" + mediaEmbed;
          String postId=sm.post(title,descWithMedia);
          String urlPost=sm.getPostUrl(postId);
          message.getData().putString(""String_Node_Str"",urlPost);
        }
      }
      mHandlerPub.sendMessage(message);
    }
 else {
      Message msgErr=new Message();
      msgErr.what=-1;
      msgErr.getData().putString(""String_Node_Str"",""String_Node_Str"");
      mHandlerPub.sendMessage(msgErr);
    }
  }
 catch (  XmlRpcFault e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
catch (  Exception e) {
    Message msgErr=new Message();
    msgErr.what=-1;
    msgErr.getData().putString(""String_Node_Str"",e.getLocalizedMessage());
    mHandlerPub.sendMessage(msgErr);
    Log.e(AppConstants.TAG,""String_Node_Str"",e);
  }
}",0.9945213379469436
187231,"public void applyExportSettings(MediaDesc mdout){
  mdout.videoCodec=""String_Node_Str"";
  mdout.videoBitrate=1500;
  mdout.audioBitrate=128;
  mdout.videoFps=""String_Node_Str"";
  mdout.width=720;
  mdout.height=480;
}","public void applyExportSettings(MediaDesc mdout){
  mdout.videoBitrate=1500;
  mdout.audioBitrate=128;
  mdout.videoFps=""String_Node_Str"";
  mdout.width=720;
  mdout.height=480;
}",0.904040404040404
187232,"private MediaDesc prerenderVideo(MediaDesc mediaIn,boolean preconvertMP4) throws Exception {
  FfmpegController ffmpegc=new FfmpegController(mContext);
  File outPath=createOutputFile(mediaIn.path,""String_Node_Str"");
  mMediaManager.applyExportSettings(mediaIn);
  MediaDesc mediaOut=ffmpegc.convertToMP4Stream(mediaIn,outPath.getAbsolutePath(),preconvertMP4,mShellCallback);
  return mediaOut;
}","private MediaDesc prerenderVideo(MediaDesc mediaIn,boolean preconvertMP4) throws Exception {
  FfmpegController ffmpegc=new FfmpegController(mContext);
  File outPath=createOutputFile(mediaIn.path,""String_Node_Str"");
  mMediaManager.applyExportSettings(mediaIn);
  MediaDesc mediaOut=ffmpegc.convertToMP4Stream(mediaIn,outPath.getAbsolutePath(),mShellCallback);
  return mediaOut;
}",0.9820051413881749
187233,"private MediaDesc prerenderAudio(MediaDesc mediaIn) throws Exception {
  FfmpegController ffmpegc=new FfmpegController(mContext);
  File outPath=createOutputFile(mediaIn.path,""String_Node_Str"");
  mMediaManager.applyExportSettings(mediaIn);
  mediaIn.videoCodec=null;
  mediaIn.mimeType=""String_Node_Str"";
  MediaDesc mediaOut=ffmpegc.convertToMP4Stream(mediaIn,outPath.getAbsolutePath(),true,mShellCallback);
  return mediaOut;
}","private MediaDesc prerenderAudio(MediaDesc mediaIn) throws Exception {
  FfmpegController ffmpegc=new FfmpegController(mContext);
  File outPath=createOutputFile(mediaIn.path,""String_Node_Str"");
  mMediaManager.applyExportSettings(mediaIn);
  mediaIn.videoCodec=null;
  mediaIn.mimeType=""String_Node_Str"";
  MediaDesc mediaOut=ffmpegc.convertToMP4Stream(mediaIn,outPath.getAbsolutePath(),mShellCallback);
  return mediaOut;
}",0.9941520467836256
187234,"public void writeTo(final OutputStream outstream) throws IOException {
  try {
    is.skip(mStart);
    byte[] tmp=new byte[4096];
    int bytesRead;
    int bytesReadThisChunk=0;
    BufferedOutputStream bos=new BufferedOutputStream(outstream);
    is.skip(mStart);
    while ((bytesRead=is.read(tmp)) != -1) {
      bos.write(tmp,0,bytesRead);
      bytesReadThisChunk+=bytesRead;
      totalBytesUploaded+=bytesRead;
      double percent=(totalBytesUploaded / currentFileSize) * 99;
      Log.d(AppConstants.TAG,""String_Node_Str"" + totalBytesUploaded + ""String_Node_Str""+ percent+ ""String_Node_Str"");
      String status=String.format(""String_Node_Str"",Math.round(totalBytesUploaded),Math.round(currentFileSize));
      Message msg=handler.obtainMessage(888);
      String title=""String_Node_Str"";
      if (mUseTor)       title=""String_Node_Str"";
      msg.getData().putString(""String_Node_Str"",title);
      msg.getData().putString(""String_Node_Str"",status);
      msg.getData().putInt(""String_Node_Str"",(int)percent);
      handler.sendMessage(msg);
      if (bytesReadThisChunk == (mEnd - mStart + 1)) {
        break;
      }
    }
    bos.close();
  }
  finally {
    is.close();
  }
}","public void writeTo(final OutputStream outstream) throws IOException {
  try {
    is.skip(mStart);
    byte[] tmp=new byte[4096];
    int bytesRead;
    int bytesReadThisChunk=0;
    BufferedOutputStream bos=new BufferedOutputStream(outstream);
    is.skip(mStart);
    while ((bytesRead=is.read(tmp)) != -1) {
      bos.write(tmp,0,bytesRead);
      bytesReadThisChunk+=bytesRead;
      totalBytesUploaded+=bytesRead;
      double percent=(totalBytesUploaded / currentFileSize) * 99;
      String status=String.format(""String_Node_Str"",Math.round(totalBytesUploaded),Math.round(currentFileSize));
      Message msg=handler.obtainMessage(888);
      String title=""String_Node_Str"";
      if (mUseTor)       title=""String_Node_Str"";
      msg.getData().putString(""String_Node_Str"",title);
      msg.getData().putString(""String_Node_Str"",status);
      msg.getData().putInt(""String_Node_Str"",(int)percent);
      handler.sendMessage(msg);
      if (bytesReadThisChunk == (mEnd - mStart + 1)) {
        break;
      }
    }
    bos.close();
  }
  finally {
    is.close();
  }
}",0.9480176211453744
187235,"public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScenes().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScenes().size() - 1;
  mActivity.mdExported=null;
}","public void addTemplateClip(Clip clip) throws IOException, JSONException {
  mTemplate.getScene(0).addClip(clip);
  mAddClipsPagerAdapter=new AddClipsPagerAdapter(mFm,mTemplate);
  mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
  mAddClipsViewPager.setCurrentItem(mTemplate.getScene(0).getClips().size() - 1);
  mActivity.mMPM.mClipIndex=mTemplate.getScene(0).getClips().size() - 1;
  mActivity.mdExported=null;
}",0.9731051344743276
187236,"@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}","@Override public void onPageScrolled(int position,float positionOffset,int positionOffsetPixels){
  if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
    mDragAtEnd++;
    if (mDragAtEnd > 5) {
      AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
      builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ((SceneEditorActivity)mActivity).addShotToScene();
        }
      }
).setNegativeButton(R.string.no,null).show();
      mDragAtEnd=0;
    }
  }
 else {
    mDragAtEnd=0;
  }
}",0.992501704158146
187237,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScenes().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(layout,null);
  if (this.layout == R.layout.fragment_add_clips) {
    mAddClipsViewPager=(ViewPager)view.findViewById(R.id.viewPager);
    mAddClipsViewPager.setPageMargin(-75);
    mAddClipsViewPager.setPageMarginDrawable(R.drawable.ic_action_forward_gray);
    mAddClipsViewPager.setAdapter(mAddClipsPagerAdapter);
    mAddClipsViewPager.setOnPageChangeListener(new OnPageChangeListener(){
      int mDragAtEnd=0;
      @Override public void onPageScrollStateChanged(      int state){
      }
      @Override public void onPageScrolled(      int position,      float positionOffset,      int positionOffsetPixels){
        if (((position + 1) == mTemplate.getScene(0).getClips().size()) && positionOffset == 0 & positionOffsetPixels == 0) {
          mDragAtEnd++;
          if (mDragAtEnd > 5) {
            AlertDialog.Builder builder=new AlertDialog.Builder(mActivity);
            builder.setMessage(R.string.add_new_clip_to_the_scene_).setPositiveButton(R.string.yes,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int which){
                ((SceneEditorActivity)mActivity).addShotToScene();
              }
            }
).setNegativeButton(R.string.no,null).show();
            mDragAtEnd=0;
          }
        }
 else {
          mDragAtEnd=0;
        }
      }
      @Override public void onPageSelected(      int position){
        mActivity.mMPM.mClipIndex=position;
      }
    }
);
  }
  return view;
}",0.9966391689581424
187238,"@Override public int getCount(){
  return sTemplate.getScenes().size();
}","@Override public int getCount(){
  return sTemplate.getScene(0).getClips().size();
}",0.929936305732484
187239,"public void run(){
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    InputStream isContent=entity.getContent();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}","public void run(){
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}",0.9933998033983992
187240,"public void run(){
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    InputStream isContent=entity.getContent();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}","public void run(){
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=getHttpClientInstance();
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    long conLen=entity.getContentLength();
    boolean isChunked=entity.isChunked();
    if (statusCode == 200) {
      String jsonData=EntityUtils.toString(entity);
      if (!jsonData.contains(""String_Node_Str""))       jsonData+=""String_Node_Str"";
      JSONObject jObjMain=new JSONObject(jsonData);
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              response.getEntity().consumeContent();
              continue;
            }
 else {
              Log.d(AppConstants.TAG,""String_Node_Str"");
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(mSubFolder,title);
          fileZip.getParentFile().mkdirs();
          BufferedInputStream bis=new BufferedInputStream(response.getEntity().getContent());
          IOUtils.copyLarge(bis,new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (response != null)           response.getEntity().consumeContent();
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}",0.9931953091067034
187241,"public void run(){
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=new StrongHttpsClient(mContext);
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
 else {
      httpClient.useProxy(false,""String_Node_Str"",null,-1);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_INDEX_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    long conLen=response.getEntity().getContentLength();
    if (conLen > -1) {
      byte[] buffer=new byte[(int)response.getEntity().getContentLength()];
      IOUtils.readFully(response.getEntity().getContent(),buffer);
      JSONObject jObjMain=new JSONObject(new String(buffer));
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          String sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              continue;
            }
 else {
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(title);
          fileZip.getParentFile().mkdirs();
          IOUtils.copyLarge(response.getEntity().getContent(),new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + i,ioe);
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"");
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"",ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}","public void run(){
  String sUrlLesson=null;
  try {
    File lessonFolder=mLocalStorageRoot;
    if (mSubFolder != null)     lessonFolder=new File(mLocalStorageRoot,mSubFolder);
    StrongHttpsClient httpClient=new StrongHttpsClient(mContext);
    SharedPreferences settings=PreferenceManager.getDefaultSharedPreferences(mContext);
    boolean useTor=settings.getBoolean(""String_Node_Str"",false);
    if (useTor) {
      httpClient.useProxy(true,""String_Node_Str"",AppConstants.TOR_PROXY_HOST,AppConstants.TOR_PROXY_PORT);
    }
    String urlBase=mUrlRemoteRepo;
    if (mSubFolder != null)     urlBase+=mSubFolder + '/';
    String urlIndex=urlBase + LESSON_METADATA_FILE;
    Log.d(AppConstants.TAG,""String_Node_Str"" + urlIndex);
    HttpGet request=new HttpGet(urlIndex);
    HttpResponse response=httpClient.execute(request);
    HttpEntity entity=response.getEntity();
    int statusCode=response.getStatusLine().getStatusCode();
    InputStream isContent=entity.getContent();
    long conLen=entity.getContentLength();
    if (statusCode == 200) {
      ByteArrayOutputStream baos=new ByteArrayOutputStream();
      int b=-1;
      while ((b=isContent.read()) != -1)       baos.write(b);
      JSONObject jObjMain=new JSONObject(new String(baos.toByteArray()));
      JSONArray jarray=jObjMain.getJSONArray(""String_Node_Str"");
      for (int i=0; i < jarray.length() && (!jarray.isNull(i)); i++) {
        try {
          JSONObject jobj=jarray.getJSONObject(i);
          String title=jobj.getString(""String_Node_Str"");
          String lessonUrl=jobj.getJSONObject(""String_Node_Str"").getString(""String_Node_Str"");
          sUrlLesson=urlBase + lessonUrl;
          Log.d(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
          URI urlLesson=new URI(sUrlLesson);
          request=new HttpGet(urlLesson);
          response=httpClient.execute(request);
          String fileName=urlLesson.getPath();
          fileName=fileName.substring(fileName.lastIndexOf('/') + 1);
          File fileZip=new File(lessonFolder,fileName);
          if (fileZip.exists()) {
            long remoteLen=response.getEntity().getContentLength();
            long localLen=fileZip.length();
            if (localLen == remoteLen) {
              continue;
            }
 else {
              fileZip.delete();
            }
          }
          if (mListener != null)           mListener.loadingLessonFromServer(title);
          fileZip.getParentFile().mkdirs();
          IOUtils.copyLarge(response.getEntity().getContent(),new FileOutputStream(fileZip));
          unpack(fileZip,lessonFolder);
        }
 catch (        Exception ioe) {
          Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
          if (mListener != null)           mListener.errorLoadingLessons(ioe.getLocalizedMessage());
        }
      }
      if (mListener != null)       mListener.lessonsLoadedFromServer();
    }
 else {
      Log.w(AppConstants.TAG,""String_Node_Str"" + sUrlLesson);
      if (mListener != null)       mListener.errorLoadingLessons(""String_Node_Str"");
    }
  }
 catch (  Exception ioe) {
    Log.e(AppConstants.TAG,""String_Node_Str"" + sUrlLesson,ioe);
    if (mListener != null)     mListener.errorLoadingLessons(ioe.getLocalizedMessage());
  }
}",0.8989010989010989
187242,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (templateStory) {
      NavUtils.navigateUpTo(this,new Intent(this,StoryTemplateActivity.class));
    }
 else {
      NavUtils.navigateUpFromSameTask(this);
    }
  return true;
case R.id.itemForward:
int idx=getSupportActionBar().getSelectedNavigationIndex();
getSupportActionBar().setSelectedNavigationItem(Math.min(2,idx + 1));
return true;
case R.id.addFromGallery:
addMediaFromGallery();
return true;
case R.id.addNewShot:
addShotToScene();
return true;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case android.R.id.home:
    if (templateStory) {
      NavUtils.navigateUpTo(this,new Intent(this,StoryTemplateActivity.class));
    }
 else {
      NavUtils.navigateUpFromSameTask(this);
    }
  return true;
case R.id.itemForward:
int idx=getSupportActionBar().getSelectedNavigationIndex();
if (idx < 2) {
getSupportActionBar().setSelectedNavigationItem(Math.min(2,idx + 1));
}
 else {
mPublishFragment.doPublish();
}
return true;
case R.id.addFromGallery:
addMediaFromGallery();
return true;
case R.id.addNewShot:
addShotToScene();
return true;
}
return super.onOptionsItemSelected(item);
}",0.9564553093964858
187243,"@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  int layout=R.layout.fragment_add_clips;
  FragmentManager fm=getSupportFragmentManager();
  if (mMenu != null) {
    mMenu.findItem(R.id.itemInfo).setVisible(false);
    mMenu.findItem(R.id.itemTrim).setVisible(false);
  }
  if (tab.getPosition() == 0) {
    if (mMenu != null) {
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    layout=R.layout.fragment_add_clips;
    if (mFragmentTab0 == null) {
      try {
        mFragmentTab0=new AddClipsFragment(layout,fm,templateJsonPath);
        Bundle args=new Bundle();
        args.putInt(AddClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mFragmentTab0.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mFragmentTab0,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mFragmentTab0).commit();
    }
    mLastTabFrag=mFragmentTab0;
  }
 else   if (tab.getPosition() == 1) {
    layout=R.layout.fragment_order_clips;
    if (mMenu != null) {
      mMenu.findItem(R.id.itemInfo).setVisible(true);
      mMenu.findItem(R.id.itemTrim).setVisible(true);
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    if (mFragmentTab1 == null) {
      try {
        mFragmentTab1=new OrderClipsFragment(layout);
        Bundle args=new Bundle();
        args.putInt(OrderClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mFragmentTab1.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mFragmentTab1,layout + ""String_Node_Str"").commit();
    }
 else {
      ((OrderClipsFragment)mFragmentTab1).loadMedia();
      fm.beginTransaction().show(mFragmentTab1).commit();
    }
    mLastTabFrag=mFragmentTab1;
  }
 else   if (tab.getPosition() == 2) {
    layout=R.layout.fragment_story_publish;
    if (mMenu != null)     mMenu.findItem(R.id.itemForward).setEnabled(false);
    if (mFragmentTab2 == null) {
      try {
        mFragmentTab2=new PublishFragment(layout);
        Bundle args=new Bundle();
        args.putInt(PublishFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mFragmentTab2.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mFragmentTab2,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mFragmentTab2).commit();
    }
    mLastTabFrag=mFragmentTab2;
  }
}","@Override public void onTabSelected(ActionBar.Tab tab,FragmentTransaction fragmentTransaction){
  int layout=R.layout.fragment_add_clips;
  FragmentManager fm=getSupportFragmentManager();
  if (mMenu != null) {
    mMenu.findItem(R.id.itemInfo).setVisible(false);
    mMenu.findItem(R.id.itemTrim).setVisible(false);
  }
  if (tab.getPosition() == 0) {
    if (mMenu != null) {
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    layout=R.layout.fragment_add_clips;
    if (mFragmentTab0 == null) {
      try {
        mFragmentTab0=new AddClipsFragment(layout,fm,templateJsonPath);
        Bundle args=new Bundle();
        args.putInt(AddClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mFragmentTab0.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mFragmentTab0,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mFragmentTab0).commit();
    }
    mLastTabFrag=mFragmentTab0;
  }
 else   if (tab.getPosition() == 1) {
    layout=R.layout.fragment_order_clips;
    if (mMenu != null) {
      mMenu.findItem(R.id.itemInfo).setVisible(true);
      mMenu.findItem(R.id.itemTrim).setVisible(true);
      mMenu.findItem(R.id.itemForward).setEnabled(true);
    }
    if (mFragmentTab1 == null) {
      try {
        mFragmentTab1=new OrderClipsFragment(layout);
        Bundle args=new Bundle();
        args.putInt(OrderClipsFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mFragmentTab1.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mFragmentTab1,layout + ""String_Node_Str"").commit();
    }
 else {
      ((OrderClipsFragment)mFragmentTab1).loadMedia();
      fm.beginTransaction().show(mFragmentTab1).commit();
    }
    mLastTabFrag=mFragmentTab1;
  }
 else   if (tab.getPosition() == 2) {
    layout=R.layout.fragment_story_publish;
    if (mPublishFragment == null) {
      try {
        mPublishFragment=new PublishFragment(layout);
        Bundle args=new Bundle();
        args.putInt(PublishFragment.ARG_SECTION_NUMBER,tab.getPosition() + 1);
        mPublishFragment.setArguments(args);
      }
 catch (      IOException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
catch (      JSONException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
      }
      fm.beginTransaction().add(R.id.container,mPublishFragment,layout + ""String_Node_Str"").commit();
    }
 else {
      fm.beginTransaction().show(mPublishFragment).commit();
    }
    mLastTabFrag=mPublishFragment;
  }
}",0.959131761912837
187244,"private void initActivityList(View view){
  LinearLayout lView=(LinearLayout)view;
  LinearLayout.LayoutParams lp1=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  lp1.setMargins(0,30,0,5);
  LinearLayout.LayoutParams lp2=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  lp2.setMargins(40,0,0,0);
  Context context=view.getContext();
  Button button;
  Drawable img;
  button=new Button(context);
  button.setText(R.string.home_new_story);
  button.setBackgroundColor(Color.WHITE);
  img=context.getResources().getDrawable(R.drawable.ic_list_projects);
  img.setBounds(0,0,80,60);
  button.setCompoundDrawables(img,null,null,null);
  button.setGravity(Gravity.LEFT | Gravity.CENTER);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),LessonsActivity.class));
    }
  }
);
  lView.addView(button,lp1);
  ArrayList<Project> listProjects=Project.getAllAsList(context);
  for (int i=listProjects.size() - 1; i > listProjects.size() - 3 && i > -1; i--) {
    Project project=listProjects.get(i);
    button=new Button(context);
    button.setText(project.getTitle());
    button.setBackgroundColor(Color.WHITE);
    button.setGravity(Gravity.LEFT | Gravity.CENTER);
    button.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),StoryNewActivity.class));
      }
    }
);
    Media[] mediaList=project.getMediaAsArray();
    if (mediaList != null && mediaList.length > 0) {
      for (      Media media : mediaList)       if (media != null) {
        img=getThumbnailDrawable(media);
        if (img != null) {
          img.setBounds(0,0,60,60);
          button.setCompoundDrawables(img,null,null,null);
          break;
        }
      }
    }
    lView.addView(button,lp2);
  }
  button=new Button(context);
  button.setText(R.string.home_start_a_lesson);
  button.setBackgroundColor(Color.WHITE);
  img=context.getResources().getDrawable(R.drawable.ic_list_lessons);
  img.setBounds(0,0,60,60);
  button.setCompoundDrawables(img,null,null,null);
  button.setGravity(Gravity.LEFT | Gravity.CENTER);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),LessonsActivity.class));
    }
  }
);
  lView.addView(button,lp1);
  ArrayList<Lesson> lessonsCompleted=getLessonsCompleted(context);
  for (int i=lessonsCompleted.size() - 1; i > lessonsCompleted.size() - 3 && i > -1; i--) {
    Lesson lesson=lessonsCompleted.get(i);
    button=new Button(context);
    button.setText(lesson.mTitle + ""String_Node_Str"");
    button.setBackgroundColor(Color.WHITE);
    button.setGravity(Gravity.LEFT | Gravity.CENTER);
    button.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LessonsActivity.class));
      }
    }
);
    lView.addView(button,lp2);
  }
}","private void initActivityList(View view){
  LinearLayout lView=(LinearLayout)view;
  LinearLayout.LayoutParams lp1=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  lp1.setMargins(0,30,0,5);
  LinearLayout.LayoutParams lp2=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  lp2.setMargins(40,0,0,0);
  Context context=view.getContext();
  Button button;
  Drawable img;
  button=new Button(context);
  button.setText(R.string.home_new_story);
  button.setBackgroundColor(Color.WHITE);
  img=context.getResources().getDrawable(R.drawable.ic_list_projects);
  img.setBounds(0,0,80,60);
  button.setCompoundDrawables(img,null,null,null);
  button.setGravity(Gravity.LEFT | Gravity.CENTER);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),StoryNewActivity.class));
    }
  }
);
  lView.addView(button,lp1);
  ArrayList<Project> listProjects=Project.getAllAsList(context);
  for (int i=listProjects.size() - 1; i > listProjects.size() - 3 && i > -1; i--) {
    Project project=listProjects.get(i);
    button=new Button(context);
    button.setText(project.getTitle());
    button.setBackgroundColor(Color.WHITE);
    button.setGravity(Gravity.LEFT | Gravity.CENTER);
    button.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        showProject(((Button)v).getText().toString());
      }
    }
);
    Media[] mediaList=project.getMediaAsArray();
    if (mediaList != null && mediaList.length > 0) {
      for (      Media media : mediaList)       if (media != null) {
        img=getThumbnailDrawable(media);
        if (img != null) {
          img.setBounds(0,0,30,30);
          button.setCompoundDrawables(img,null,null,null);
          break;
        }
      }
    }
    lView.addView(button,lp2);
  }
  button=new Button(context);
  button.setText(R.string.home_start_a_lesson);
  button.setBackgroundColor(Color.WHITE);
  img=context.getResources().getDrawable(R.drawable.ic_list_lessons);
  img.setBounds(0,0,60,60);
  button.setCompoundDrawables(img,null,null,null);
  button.setGravity(Gravity.LEFT | Gravity.CENTER);
  button.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),LessonsActivity.class));
    }
  }
);
  lView.addView(button,lp1);
  ArrayList<Lesson> lessonsCompleted=getLessonsCompleted(context);
  for (int i=lessonsCompleted.size() - 1; i > lessonsCompleted.size() - 3 && i > -1; i--) {
    Lesson lesson=lessonsCompleted.get(i);
    button=new Button(context);
    button.setText(lesson.mTitle + ""String_Node_Str"");
    button.setBackgroundColor(Color.WHITE);
    button.setGravity(Gravity.LEFT | Gravity.CENTER);
    button.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(new Intent(getActivity(),LessonsActivity.class));
      }
    }
);
    lView.addView(button,lp2);
  }
}",0.9812650120096076
187245,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_web_view);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  Intent intent=getIntent();
  if (intent != null) {
    mTitle=intent.getStringExtra(""String_Node_Str"");
    if (mTitle != null)     setTitle(mTitle);
    mUrl=intent.getStringExtra(""String_Node_Str"");
    mLessonPath=intent.getStringExtra(""String_Node_Str"");
    mWebView=(WebView)findViewById(R.id.web_engine);
    mWebView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
    mWebView.getSettings().setJavaScriptEnabled(true);
    mWebView.getSettings().setPluginsEnabled(true);
    mWebView.getSettings().setPluginState(PluginState.ON);
    mWebView.getSettings().setAllowFileAccess(true);
    mWebView.getSettings().setSupportZoom(false);
    mWebView.setWebChromeClient(new WebChromeClient(){
      @Override public boolean onConsoleMessage(      ConsoleMessage consoleMessage){
        Log.w(AppConstants.TAG,""String_Node_Str"" + consoleMessage.lineNumber() + ""String_Node_Str""+ consoleMessage.message());
        return super.onConsoleMessage(consoleMessage);
      }
    }
);
    mWebView.setWebViewClient(new WebViewClient(){
      @Override public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        boolean isMedia=false;
        boolean handled=false;
        String mimeType=mMediaHelper.getMimeType(url);
        if (mimeType != null && (!mimeType.startsWith(""String_Node_Str"")))         isMedia=true;
        if (isMedia) {
          mMediaHelper.playMedia(Uri.parse(url),mimeType);
          handled=true;
        }
 else {
          if (url.startsWith(""String_Node_Str"")) {
            lessonCompleted();
            handled=true;
          }
        }
        return handled;
      }
      @Override public void onReceivedError(      WebView view,      int errorCode,      String description,      String failingUrl){
        Log.e(AppConstants.TAG,""String_Node_Str"" + failingUrl + ""String_Node_Str""+ errorCode+ ""String_Node_Str""+ description);
      }
    }
);
    mWebView.loadUrl(mUrl);
  }
  mMediaHelper=new MediaHelper(this,null);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_web_view);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  Intent intent=getIntent();
  if (intent != null) {
    mTitle=intent.getStringExtra(""String_Node_Str"");
    if (mTitle != null)     setTitle(mTitle);
    mUrl=intent.getStringExtra(""String_Node_Str"");
    mLessonPath=intent.getStringExtra(""String_Node_Str"");
    mWebView=(WebView)findViewById(R.id.web_engine);
    mWebView.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);
    mWebView.getSettings().setJavaScriptEnabled(true);
    mWebView.getSettings().setPluginsEnabled(true);
    mWebView.getSettings().setPluginState(PluginState.ON);
    mWebView.getSettings().setAllowFileAccess(true);
    if (Build.VERSION.SDK_INT >= 16) {
      new WebViewSetupJB(mWebView);
    }
    mWebView.getSettings().setSupportZoom(false);
    mWebView.setWebChromeClient(new WebChromeClient(){
      @Override public boolean onConsoleMessage(      ConsoleMessage consoleMessage){
        Log.w(AppConstants.TAG,""String_Node_Str"" + consoleMessage.lineNumber() + ""String_Node_Str""+ consoleMessage.message());
        return super.onConsoleMessage(consoleMessage);
      }
    }
);
    mWebView.setWebViewClient(new WebViewClient(){
      @Override public boolean shouldOverrideUrlLoading(      WebView view,      String url){
        boolean isMedia=false;
        boolean handled=false;
        String mimeType=mMediaHelper.getMimeType(url);
        if (mimeType != null && (!mimeType.startsWith(""String_Node_Str"")))         isMedia=true;
        if (isMedia) {
          mMediaHelper.playMedia(Uri.parse(url),mimeType);
          handled=true;
        }
 else {
          if (url.startsWith(""String_Node_Str"")) {
            lessonCompleted();
            handled=true;
          }
        }
        return handled;
      }
      @Override public void onReceivedError(      WebView view,      int errorCode,      String description,      String failingUrl){
        Log.e(AppConstants.TAG,""String_Node_Str"" + failingUrl + ""String_Node_Str""+ errorCode+ ""String_Node_Str""+ description);
      }
    }
);
    mWebView.loadUrl(mUrl);
  }
  mMediaHelper=new MediaHelper(this,null);
}",0.981899441340782
187246,"@Override public void surfaceChanged(SurfaceHolder arg0,int arg1,int arg2,int arg3){
  Camera.Parameters p=camera.getParameters();
  p.setPreviewSize(arg2,arg3);
  bitmap=Bitmap.createBitmap(arg2,arg3,Bitmap.Config.ARGB_8888);
  canvas=new Canvas(bitmap);
  setOverlayImage(overlayIdx);
  try {
    camera.setPreviewDisplay(arg0);
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  camera.startPreview();
}","@Override public void surfaceChanged(SurfaceHolder arg0,int arg1,int arg2,int arg3){
  if (camera != null) {
    Camera.Parameters p=camera.getParameters();
    p.setPreviewSize(arg2,arg3);
    bitmap=Bitmap.createBitmap(arg2,arg3,Bitmap.Config.ARGB_8888);
    canvas=new Canvas(bitmap);
    setOverlayImage(overlayIdx);
    try {
      camera.setPreviewDisplay(arg0);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    camera.startPreview();
  }
}",0.9413092550790068
187247,"private void checkTypeAndLaunchEditor(){
  String pName=editTextStoryName.getText().toString();
  if (pName == null || pName.length() == 0) {
  }
 else {
    Project project=new Project(this);
    project.setTitle(pName);
    int checkedId=rGroup.getCheckedRadioButtonId();
    String templateJsonPath=null;
    int storyMode=-1;
    if (checkedId == R.id.radioStoryType0) {
      templateJsonPath=""String_Node_Str"";
      storyMode=Project.STORY_TYPE_VIDEO;
    }
 else     if (checkedId == R.id.radioStoryType1) {
      storyMode=Project.STORY_TYPE_PHOTO;
      templateJsonPath=""String_Node_Str"";
    }
 else     if (checkedId == R.id.radioStoryType2) {
      storyMode=Project.STORY_TYPE_AUDIO;
      templateJsonPath=""String_Node_Str"";
    }
 else     if (checkedId == R.id.radioStoryType3) {
      storyMode=Project.STORY_TYPE_ESSAY;
      templateJsonPath=""String_Node_Str"";
    }
    project.setStoryType(storyMode);
    project.save();
    Intent intent=new Intent(getBaseContext(),SceneEditorNoSwipeActivity.class);
    intent.putExtra(""String_Node_Str"",storyMode);
    intent.putExtra(""String_Node_Str"",templateJsonPath);
    intent.putExtra(""String_Node_Str"",project.getTitle());
    startActivity(intent);
  }
}","private void checkTypeAndLaunchEditor(){
  String pName=editTextStoryName.getText().toString();
  if (pName == null || pName.length() == 0) {
  }
 else {
    Project project=new Project(this);
    project.setTitle(pName);
    int checkedId=rGroup.getCheckedRadioButtonId();
    String templateJsonPath=null;
    int storyMode=-1;
    if (checkedId == R.id.radioStoryType0) {
      templateJsonPath=""String_Node_Str"";
      storyMode=Project.STORY_TYPE_VIDEO;
    }
 else     if (checkedId == R.id.radioStoryType1) {
      storyMode=Project.STORY_TYPE_PHOTO;
      templateJsonPath=""String_Node_Str"";
    }
 else     if (checkedId == R.id.radioStoryType2) {
      storyMode=Project.STORY_TYPE_AUDIO;
      templateJsonPath=""String_Node_Str"";
    }
 else     if (checkedId == R.id.radioStoryType3) {
      storyMode=Project.STORY_TYPE_ESSAY;
      templateJsonPath=""String_Node_Str"";
    }
    project.setStoryType(storyMode);
    project.save();
    Intent intent=new Intent(getBaseContext(),SceneEditorNoSwipeActivity.class);
    intent.putExtra(""String_Node_Str"",storyMode);
    intent.putExtra(""String_Node_Str"",templateJsonPath);
    intent.putExtra(""String_Node_Str"",project.getTitle());
    intent.putExtra(""String_Node_Str"",project.getId());
    startActivity(intent);
  }
}",0.977635782747604
187248,"@Override public void beforeStep(String title){
  TestState testState=this.testState.get();
  if (!testState.isGivenStoryRunning()) {
    notifier.fireTestStarted(testState.currentStep);
  }
}","@Override public void beforeStep(String title){
  TestState testState=this.testState.get();
  if (!testState.isGivenStoryRunning() && testState.currentStep != null) {
    notifier.fireTestStarted(testState.currentStep);
  }
}",0.920863309352518
187249,"public String getJunitSafeString(String string){
  return uniq.getUniqueDescription(replaceLinebreaks(string).replaceAll(""String_Node_Str"",""String_Node_Str""));
}","public String getJunitSafeString(String string){
  return uniq.getUniqueDescription(JUnitStringDecorator.getJunitSafeString(string));
}",0.6959459459459459
187250,"@Override public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    anyScenarioFailedInCurrentStory=false;
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        moveToNextScenario();
        processBeforeStory();
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName() != null && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}","@Override public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    anyScenarioFailedInCurrentStory=false;
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(JUnitStringDecorator.getJunitSafeString(story.getName()))) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        moveToNextScenario();
        processBeforeStory();
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName() != null && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}",0.9829379941739492
187251,"@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  rootDescription=Description.createTestDescription(this.getClass(),NAME_ROOT);
  storyDescription=Description.createTestDescription(this.getClass(),NAME_STORY);
  rootDescription.addChild(storyDescription);
  scenarioDescription=Description.createTestDescription(this.getClass(),NAME_SCENARIO);
  storyDescription.addChild(scenarioDescription);
  story=new Story();
  story.namedAs(""String_Node_Str"" + this.getClass().getName() + ""String_Node_Str"");
  keywords=new Keywords();
}","@Before public void setUp(){
  MockitoAnnotations.initMocks(this);
  rootDescription=Description.createSuiteDescription(NAME_ROOT);
  storyDescription=Description.createSuiteDescription(NAME_STORY);
  rootDescription.addChild(storyDescription);
  scenarioDescription=Description.createTestDescription(this.getClass(),NAME_SCENARIO);
  storyDescription.addChild(scenarioDescription);
  story=new Story();
  story.namedAs(NAME_STORY);
  keywords=new Keywords();
}",0.8301886792452831
187252,"private void initRootDescription(){
  rootDescription=Description.createSuiteDescription(configurableEmbedder.getClass());
  rootDescription.getChildren().addAll(storyDescriptions);
}","private void initRootDescription(){
  rootDescription=Description.createSuiteDescription(configurableEmbedder.getClass());
  for (  Description storyDescription : storyDescriptions) {
    rootDescription.addChild(storyDescription);
  }
}",0.7952380952380952
187253,"public static EmbedderControls recommandedControls(Embedder embedder){
  return embedder.embedderControls().doIgnoreFailureInView(true).doIgnoreFailureInStories(true).useThreads(1);
}","/** 
 * @deprecated use {@link #recommendedControls(Embedder)} instead.  
 */
@Deprecated public static EmbedderControls recommandedControls(Embedder embedder){
  return recommendedControls(embedder);
}",0.4831168831168831
187254,"public ExampleScenarioJUnitStories(){
  JUnitReportingRunner.recommandedControls(configuredEmbedder());
}","public ExampleScenarioJUnitStories(){
  JUnitReportingRunner.recommendedControls(configuredEmbedder());
}",0.9904761904761904
187255,"public ExampleScenarioJUnitStory(){
  JUnitReportingRunner.recommandedControls(configuredEmbedder());
}","public ExampleScenarioJUnitStory(){
  JUnitReportingRunner.recommendedControls(configuredEmbedder());
}",0.9902912621359224
187256,"@Test public void shouldPrepareEmbedder(){
  EmbedderControls ec=mock(EmbedderControls.class);
  when(ec.doIgnoreFailureInStories(Mockito.anyBoolean())).thenReturn(ec);
  when(ec.doIgnoreFailureInView(Mockito.anyBoolean())).thenReturn(ec);
  when(ec.useThreads(Mockito.anyInt())).thenReturn(ec);
  Embedder e=mock(Embedder.class);
  when(e.embedderControls()).thenReturn(ec);
  EmbedderControls recommandedControls=JUnitReportingRunner.recommandedControls(e);
  assertThat(recommandedControls,is(ec));
  verify(ec).doIgnoreFailureInView(true);
  verify(ec).doIgnoreFailureInStories(true);
  verify(ec).useThreads(1);
}","@Test public void shouldPrepareEmbedder(){
  EmbedderControls ec=mock(EmbedderControls.class);
  when(ec.doIgnoreFailureInStories(Mockito.anyBoolean())).thenReturn(ec);
  when(ec.doIgnoreFailureInView(Mockito.anyBoolean())).thenReturn(ec);
  when(ec.useThreads(Mockito.anyInt())).thenReturn(ec);
  Embedder e=mock(Embedder.class);
  when(e.embedderControls()).thenReturn(ec);
  EmbedderControls recommandedControls=JUnitReportingRunner.recommendedControls(e);
  assertThat(recommandedControls,is(ec));
  verify(ec).doIgnoreFailureInView(true);
  verify(ec).doIgnoreFailureInStories(true);
  verify(ec).useThreads(1);
}",0.9983818770226536
187257,"public MathStories(){
  JUnitReportingRunner.recommandedControls(configuredEmbedder());
}","public MathStories(){
  JUnitReportingRunner.recommendedControls(configuredEmbedder());
}",0.9887640449438202
187258,"public StoriesWithAllSortsOfBeforeAndAfter(){
  System.setProperty(Logger.PROP_JJM_LOGLEVEL,""String_Node_Str"");
  JUnitReportingRunner.recommandedControls(configuredEmbedder());
  CrossReference crossReference=new CrossReference(""String_Node_Str"").withJsonOnly().withOutputAfterEachStory(true).excludingStoriesWithNoExecutedScenarios(true);
  StepMonitor stepMonitor=new DelegatingStepMonitor(crossReference.getStepMonitor());
  configuration=new MostUsefulConfiguration().useStepMonitor(stepMonitor).usePendingStepStrategy(new FailingUponPendingStep()).useStoryReporterBuilder(new StoryReporterBuilder().withDefaultFormats().withFailureTrace(true).withFormats(Format.XML,Format.HTML).withCrossReference(crossReference)).useParameterControls(new ParameterControls(""String_Node_Str"",""String_Node_Str"",true));
}","public StoriesWithAllSortsOfBeforeAndAfter(){
  System.setProperty(Logger.PROP_JJM_LOGLEVEL,""String_Node_Str"");
  JUnitReportingRunner.recommendedControls(configuredEmbedder());
  CrossReference crossReference=new CrossReference(""String_Node_Str"").withJsonOnly().withOutputAfterEachStory(true).excludingStoriesWithNoExecutedScenarios(true);
  StepMonitor stepMonitor=new DelegatingStepMonitor(crossReference.getStepMonitor());
  configuration=new MostUsefulConfiguration().useStepMonitor(stepMonitor).usePendingStepStrategy(new FailingUponPendingStep()).useStoryReporterBuilder(new StoryReporterBuilder().withDefaultFormats().withFailureTrace(true).withFormats(Format.XML,Format.HTML).withCrossReference(crossReference)).useParameterControls(new ParameterControls(""String_Node_Str"",""String_Node_Str"",true));
}",0.9987639060568604
187259,"public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        if (scenarioDescriptions.hasNext()) {
          currentScenario=scenarioDescriptions.next();
        }
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName() != null && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}","public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    anyScenarioFailedInCurrentStory=false;
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        if (scenarioDescriptions.hasNext()) {
          currentScenario=scenarioDescriptions.next();
        }
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName() != null && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}",0.9820907955018742
187260,"public void afterScenario(){
  logger.info(""String_Node_Str"",currentScenario.getDisplayName());
  if (!givenStoryContext) {
    if (failedSteps.size() == 0) {
      notifier.fireTestFinished(currentScenario);
    }
 else {
      notifier.fireTestFailure(new Failure(currentScenario,new RuntimeException(""String_Node_Str"")));
    }
    if (scenarioDescriptions.hasNext()) {
      currentScenario=scenarioDescriptions.next();
      logger.debug(""String_Node_Str"",currentScenario.getDisplayName());
    }
  }
}","public void afterScenario(){
  logger.info(""String_Node_Str"",currentScenario.getDisplayName());
  if (!givenStoryContext) {
    if (failedSteps.size() == 0) {
      notifier.fireTestFinished(currentScenario);
    }
 else {
      notifier.fireTestFailure(new Failure(currentScenario,new RuntimeException(""String_Node_Str"")));
      anyScenarioFailedInCurrentStory=true;
      failedSteps.clear();
    }
    if (scenarioDescriptions.hasNext()) {
      currentScenario=scenarioDescriptions.next();
      logger.debug(""String_Node_Str"",currentScenario.getDisplayName());
    }
  }
}",0.9345622119815667
187261,"public void afterStory(boolean isGivenStory){
  logger.info(""String_Node_Str"",currentStoryDescription.getDisplayName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    givenStoryContext=false;
    notifier.fireTestFinished(currentStep);
    prepareNextStep();
  }
 else {
    if (!failedSteps.contains(currentStoryDescription)) {
      if (failedSteps.size() == 0) {
        notifier.fireTestFinished(currentStoryDescription);
      }
 else {
        notifier.fireTestFailure(new Failure(currentStoryDescription,new RuntimeException(""String_Node_Str"")));
      }
      if (currentStoryDescription.isTest())       testCounter++;
    }
    if (testCounter == totalTests) {
      Result result=new Result();
      notifier.fireTestRunFinished(result);
    }
  }
}","public void afterStory(boolean isGivenStory){
  logger.info(""String_Node_Str"",currentStoryDescription.getDisplayName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    givenStoryContext=false;
    notifier.fireTestFinished(currentStep);
    prepareNextStep();
  }
 else {
    if (!failedSteps.contains(currentStoryDescription)) {
      if (anyScenarioFailedInCurrentStory == false) {
        notifier.fireTestFinished(currentStoryDescription);
      }
 else {
        notifier.fireTestFailure(new Failure(currentStoryDescription,new RuntimeException(""String_Node_Str"")));
      }
      if (currentStoryDescription.isTest())       testCounter++;
    }
    if (testCounter == totalTests) {
      Result result=new Result();
      notifier.fireTestRunFinished(result);
    }
  }
}",0.9656464709556528
187262,"public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        if (scenarioDescriptions.hasNext()) {
          currentScenario=scenarioDescriptions.next();
        }
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}","public void beforeStory(Story story,boolean isGivenStory){
  logger.info(""String_Node_Str"",story.getName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    notifier.fireTestStarted(currentStep);
    givenStoryContext=true;
  }
 else {
    if (testCounter == 0) {
      notifier.fireTestRunStarted(rootDescription);
    }
    for (    Description storyDescription : storyDescriptions) {
      if (storyDescription.isSuite() && storyDescription.getDisplayName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(storyDescription);
        scenarioDescriptions=storyDescription.getChildren().iterator();
        if (scenarioDescriptions.hasNext()) {
          currentScenario=scenarioDescriptions.next();
        }
        currentStep=currentStoryDescription;
      }
 else       if (storyDescription.isTest() && storyDescription.getMethodName() != null && storyDescription.getMethodName().equals(story.getName())) {
        currentStoryDescription=storyDescription;
        notifier.fireTestStarted(currentStoryDescription);
        currentStep=currentStoryDescription;
      }
    }
  }
}",0.9809853068280034
187263,"@Override protected List<String> storyPaths(){
  return Arrays.asList(""String_Node_Str"");
}","@Override protected List<String> storyPaths(){
  return Arrays.asList(""String_Node_Str"",""String_Node_Str"");
}",0.91
187264,"public void failed(String step,Throwable e){
  if (e instanceof UUIDExceptionWrapper) {
    e=((UUIDExceptionWrapper)e).getCause();
  }
  logger.info(""String_Node_Str"",step,e.getMessage());
  if (!givenStoryContext) {
    notifier.fireTestFailure(new Failure(currentStep,e));
    prepareNextStep();
  }
}","public void failed(String step,Throwable e){
  if (e instanceof UUIDExceptionWrapper) {
    e=((UUIDExceptionWrapper)e).getCause();
  }
  logger.info(""String_Node_Str"",step,e.getMessage());
  if (!givenStoryContext) {
    notifier.fireTestFailure(new Failure(currentStep,e));
    failedSteps.add(currentStep);
    prepareNextStep();
  }
}",0.9470404984423676
187265,"public void afterStory(boolean isGivenStory){
  logger.info(""String_Node_Str"",currentStoryDescription.getDisplayName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    givenStoryContext=false;
    notifier.fireTestFinished(currentStep);
    prepareNextStep();
  }
 else {
    notifier.fireTestFinished(currentStoryDescription);
    if (currentStoryDescription.isTest())     testCounter++;
    if (testCounter == totalTests) {
      Result result=new Result();
      notifier.fireTestRunFinished(result);
    }
  }
}","public void afterStory(boolean isGivenStory){
  logger.info(""String_Node_Str"",currentStoryDescription.getDisplayName(),isGivenStory ? ""String_Node_Str"" : ""String_Node_Str"");
  if (isGivenStory) {
    givenStoryContext=false;
    notifier.fireTestFinished(currentStep);
    prepareNextStep();
  }
 else {
    if (!failedSteps.contains(currentStoryDescription)) {
      notifier.fireTestFinished(currentStoryDescription);
      if (currentStoryDescription.isTest())       testCounter++;
    }
    if (testCounter == totalTests) {
      Result result=new Result();
      notifier.fireTestRunFinished(result);
    }
  }
}",0.9261168384879724
187266,"private void addScenarioSteps(Scenario scenario,Description description){
  for (  String stringStep : scenario.getSteps()) {
    testCases++;
    for (    StepCandidate step : allCandidates) {
      if (step.matches(stringStep)) {
        if (stringStep.indexOf('\n') != -1) {
          stringStep=stringStep.substring(0,stringStep.indexOf('\n'));
        }
        Description testDescription=Description.createTestDescription(step.getStepsInstance().getClass(),getJunitSafeString(stringStep));
        description.addChild(testDescription);
      }
    }
  }
}","private void addScenarioSteps(Scenario scenario,Description description){
  for (  String stringStep : scenario.getSteps()) {
    for (    StepCandidate step : allCandidates) {
      if (step.matches(stringStep)) {
        testCases++;
        if (stringStep.indexOf('\n') != -1) {
          stringStep=stringStep.substring(0,stringStep.indexOf('\n'));
        }
        Description testDescription=Description.createTestDescription(step.getStepsInstance().getClass(),getJunitSafeString(stringStep));
        description.addChild(testDescription);
      }
    }
  }
}",0.8389380530973451
187267,"public String getJunitSafeString(String string){
  return uniq.getUniqueDescription(string.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
}","public String getJunitSafeString(String string){
  return uniq.getUniqueDescription(string.replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str""));
}",0.7983193277310925
187268,"private void addPendingStep(Description description,String stringStep){
  testCases++;
  Description testDescription=Description.createSuiteDescription(getJunitSafeString(stringStep) + ""String_Node_Str"");
  description.addChild(testDescription);
}","private void addPendingStep(Description description,String stringStep){
  testCases++;
  Description testDescription=Description.createSuiteDescription(getJunitSafeString(""String_Node_Str"" + stringStep));
  description.addChild(testDescription);
}",0.9433198380566802
187269,"private void addSteps(Description description,List<String> steps){
  previousNonAndStep=null;
  for (  String stringStep : steps) {
    String stringStepOneLine=stripLinebreaks(stringStep);
    StepCandidate matchingStep=findMatchingStep(stringStep);
    if (matchingStep == null) {
      try {
        StepType stepType=configuration.keywords().stepTypeFor(stringStep);
        if (stepType == StepType.IGNORABLE) {
        }
 else {
          addPendingStep(description,stringStepOneLine);
        }
      }
 catch (      StartingWordNotFound e) {
      }
    }
 else {
      if (matchingStep.isComposite()) {
        addCompositeSteps(description,stringStepOneLine,matchingStep);
      }
 else {
        addRegularStep(description,stringStepOneLine,matchingStep);
      }
    }
  }
}","private void addSteps(Description description,List<String> steps){
  previousNonAndStep=null;
  for (  String stringStep : steps) {
    String stringStepOneLine=stripLinebreaks(stringStep);
    StepCandidate matchingStep=findMatchingStep(stringStep);
    if (matchingStep == null) {
      try {
        StepType stepType=configuration.keywords().stepTypeFor(stringStep);
        if (stepType == StepType.IGNORABLE) {
          stringStep=addIgnorableStep(description,stringStepOneLine);
        }
 else {
          addPendingStep(description,stringStepOneLine);
        }
      }
 catch (      StartingWordNotFound e) {
      }
    }
 else {
      if (matchingStep.isComposite()) {
        addCompositeSteps(description,stringStepOneLine,matchingStep);
      }
 else {
        addRegularStep(description,stringStepOneLine,matchingStep);
      }
    }
  }
}",0.9573690621193668
187270,"public void pending(String arg0){
  logger.info(""String_Node_Str"",arg0);
}","public void pending(String arg0){
  logger.info(""String_Node_Str"",arg0);
  if (!givenStoryContext) {
    notifier.fireTestIgnored(currentStep);
    prepareNextStep();
  }
}",0.6016260162601627
187271,"public void notPerformed(String arg0){
  logger.info(""String_Node_Str"",arg0);
}","public void notPerformed(String arg0){
  logger.info(""String_Node_Str"",arg0);
  if (!givenStoryContext) {
    notifier.fireTestIgnored(currentStep);
    prepareNextStep();
  }
}",0.6171875
187272,"public void failed(String step,Throwable e){
  if (e instanceof UUIDExceptionWrapper) {
    e=((UUIDExceptionWrapper)e).getCause();
  }
  logger.info(""String_Node_Str"",step,e.getMessage());
  if (!givenStoryContext) {
    notifier.fireTestFailure(new Failure(currentStep,e));
    testCounter++;
  }
}","public void failed(String step,Throwable e){
  if (e instanceof UUIDExceptionWrapper) {
    e=((UUIDExceptionWrapper)e).getCause();
  }
  logger.info(""String_Node_Str"",step,e.getMessage());
  if (!givenStoryContext) {
    notifier.fireTestFailure(new Failure(currentStep,e));
    prepareNextStep();
  }
}",0.9503311258278144
187273,"public void ignorable(String arg0){
  logger.info(""String_Node_Str"",arg0);
}","public void ignorable(String arg0){
  logger.info(""String_Node_Str"",arg0);
  if (!givenStoryContext) {
    notifier.fireTestIgnored(currentStep);
    testCounter++;
    prepareNextStep();
  }
}",0.5650557620817844
187274,"@SuppressWarnings(""String_Node_Str"") public JUnitReportingRunner(Class<? extends JUnitStories> testClass) throws Throwable {
  junitStories=testClass.newInstance();
  configuredEmbedder=junitStories.configuredEmbedder();
  configuration=configuredEmbedder.configuration();
  Method method;
  try {
    method=testClass.getDeclaredMethod(""String_Node_Str"",(Class[])null);
  }
 catch (  NoSuchMethodException e) {
    method=testClass.getMethod(""String_Node_Str"",(Class[])null);
  }
  method.setAccessible(true);
  storyPaths=((List<String>)method.invoke(junitStories,(Object[])null));
  storyDescriptions=buildDescriptionFromStories();
}","@SuppressWarnings(""String_Node_Str"") public JUnitReportingRunner(Class<? extends ConfigurableEmbedder> testClass) throws Throwable {
  embedder=testClass.newInstance();
  if (embedder instanceof JUnitStories) {
    JUnitStories junitStories=(JUnitStories)embedder;
    configuredEmbedder=junitStories.configuredEmbedder();
    Method method;
    try {
      method=testClass.getDeclaredMethod(""String_Node_Str"",(Class[])null);
    }
 catch (    NoSuchMethodException e) {
      method=testClass.getMethod(""String_Node_Str"",(Class[])null);
    }
    method.setAccessible(true);
    storyPaths=((List<String>)method.invoke(junitStories,(Object[])null));
  }
 else   if (embedder instanceof JUnitStory) {
    JUnitStory junitStory=(JUnitStory)embedder;
    configuredEmbedder=junitStory.configuredEmbedder();
    StoryPathResolver resolver=configuredEmbedder.configuration().storyPathResolver();
    storyPaths=Arrays.asList(resolver.resolve(junitStory.getClass()));
  }
  configuration=configuredEmbedder.configuration();
  candidateSteps=embedder.stepsFactory().createCandidateSteps();
  storyDescriptions=buildDescriptionFromStories();
}",0.6001128031584885
187275,"@Override public void run(RunNotifier notifier){
  JUnitScenarioReporter reporter=new JUnitScenarioReporter(notifier,numberOfTestCases,rootDescription);
  StoryReporterBuilder reporterBuilder=new StoryReporterBuilder().withReporters(reporter);
  Configuration junitReportingConfiguration=junitStories.configuration().useStoryReporterBuilder(reporterBuilder);
  configuredEmbedder.useConfiguration(junitReportingConfiguration);
  try {
    configuredEmbedder.runStoriesAsPaths(storyPaths);
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
 finally {
    configuredEmbedder.generateCrossReference();
  }
}","@Override public void run(RunNotifier notifier){
  JUnitScenarioReporter reporter=new JUnitScenarioReporter(notifier,numberOfTestCases,rootDescription);
  StoryReporterBuilder reporterBuilder=new StoryReporterBuilder().withReporters(reporter);
  Configuration junitReportingConfiguration=configuration.useStoryReporterBuilder(reporterBuilder);
  configuredEmbedder.useConfiguration(junitReportingConfiguration);
  try {
    configuredEmbedder.runStoriesAsPaths(storyPaths);
  }
 catch (  Throwable e) {
    throw new RuntimeException(e);
  }
 finally {
    configuredEmbedder.generateCrossReference();
  }
}",0.966639544344996
187276,"private List<Description> buildDescriptionFromStories(){
  JUnitDescriptionGenerator gen=new JUnitDescriptionGenerator(junitStories.stepsFactory().createCandidateSteps());
  StoryRunner storyRunner=new StoryRunner();
  List<Description> storyDescriptions=new ArrayList<Description>();
  storyDescriptions.add(Description.createTestDescription(Object.class,""String_Node_Str""));
  numberOfTestCases++;
  for (  String storyPath : storyPaths) {
    Story parseStory=storyRunner.storyOfPath(configuration,storyPath);
    Description descr=gen.createDescriptionFrom(parseStory);
    storyDescriptions.add(descr);
  }
  storyDescriptions.add(Description.createTestDescription(Object.class,""String_Node_Str""));
  numberOfTestCases++;
  numberOfTestCases+=gen.getTestCases();
  return storyDescriptions;
}","private List<Description> buildDescriptionFromStories(){
  JUnitDescriptionGenerator gen=new JUnitDescriptionGenerator(candidateSteps);
  StoryRunner storyRunner=new StoryRunner();
  List<Description> storyDescriptions=new ArrayList<Description>();
  storyDescriptions.add(Description.createTestDescription(Object.class,""String_Node_Str""));
  numberOfTestCases++;
  for (  String storyPath : storyPaths) {
    Story parseStory=storyRunner.storyOfPath(configuration,storyPath);
    Description descr=gen.createDescriptionFrom(parseStory);
    storyDescriptions.add(descr);
  }
  storyDescriptions.add(Description.createTestDescription(Object.class,""String_Node_Str""));
  numberOfTestCases++;
  numberOfTestCases+=gen.getTestCases();
  return storyDescriptions;
}",0.9589216944801028
187277,"@Override public Description getDescription(){
  rootDescription=Description.createSuiteDescription(junitStories.getClass());
  rootDescription.getChildren().addAll(storyDescriptions);
  return rootDescription;
}","@Override public Description getDescription(){
  rootDescription=Description.createSuiteDescription(embedder.getClass());
  rootDescription.getChildren().addAll(storyDescriptions);
  return rootDescription;
}",0.9523809523809524
187278,"@Test public void storyDescriptionsForExample(){
  assertThat(getFirstStory().getDisplayName(),equalTo(""String_Node_Str""));
}","@Test public void storyDescriptionsForExample(){
  assertThat(getFirstStory().getDisplayName(),equalTo(expectedFirstStoryName));
}",0.8862745098039215
187279,"@Before public void setUp() throws Throwable {
  MockitoAnnotations.initMocks(this);
  runner=new JUnitReportingRunner(ExampleScenario.class);
  description=runner.getDescription();
}","@Before public void setUp() throws Throwable {
  MockitoAnnotations.initMocks(this);
  description=runner.getDescription();
}",0.8116883116883117
187280,"@Test public void topLevelDescriptionForExample(){
  assertThat(description.getDisplayName(),equalTo(""String_Node_Str""));
}","@Test public void topLevelDescriptionForExample(){
  assertThat(description.getDisplayName(),equalTo(expectedDisplayName));
}",0.8870967741935484
187281,"private void insertGivenStories(Scenario scenario,Description scenarioDescription){
  for (  String path : scenario.getGivenStories().getPaths()) {
    String name=path.substring(path.lastIndexOf(""String_Node_Str"") + 1,path.length());
    scenarioDescription.addChild(Description.createSuiteDescription(name));
    testCases++;
  }
}","private void insertGivenStories(Scenario scenario,Description scenarioDescription){
  for (  String path : scenario.getGivenStories().getPaths()) {
    String name=path.substring(path.lastIndexOf(""String_Node_Str"") + 1,path.length());
    scenarioDescription.addChild(Description.createSuiteDescription(getJunitSafeString(name)));
    testCases++;
  }
}",0.9708454810495628
187282,"@Override protected List<String> storyPaths(){
  return Arrays.asList(""String_Node_Str"",""String_Node_Str"");
}","@Override protected List<String> storyPaths(){
  return Arrays.asList(""String_Node_Str"");
}",0.91
187283,"/** 
 * @return true if given graph is Eulerian
 */
public static boolean isEulerian(GraphModel graph){
  int cc=graph.getVerticesCount();
  if (cc == 0)   return false;
  if (cc < 2)   return true;
  if (!AlgorithmUtils.isConnected(graph))   return false;
  ArrayList<Integer> degrees=AlgorithmUtils.getDegreesList(graph);
  for (  int d : degrees) {
    if (d % 2 != 0)     return false;
  }
  return true;
}","/** 
 * @return true if given graph is Eulerian
 */
public static boolean isEulerian(GraphModel graph){
  int cc=graph.getVerticesCount();
  if (cc == 0)   return false;
  if (cc < 2)   return true;
  System.out.println(""String_Node_Str"" + AlgorithmUtils.isConnected(graph));
  if (!AlgorithmUtils.isConnected(graph))   return false;
  ArrayList<Integer> degrees=AlgorithmUtils.getDegreesList(graph);
  for (  int d : degrees) {
    if (d % 2 != 0)     return false;
  }
  return true;
}",0.9141583054626532
187284,"/** 
 * determines wether g is connected or not
 */
public static <VertexType extends BaseVertex,EdgeType extends BaseEdge<VertexType>>boolean isConnected(BaseGraph<VertexType,EdgeType> g){
  ArrayList vs=new ArrayList();
  int[] parent=new int[g.getVerticesCount()];
  parent[0]=-1;
  parent[1]=-1;
  parent[2]=-1;
  dfs(g,0,vs,parent);
  return Arrays.stream(vs.toArray()).distinct().toArray().length == g.getVerticesCount();
}","/** 
 * determines wether g is connected or not
 */
public static <VertexType extends BaseVertex,EdgeType extends BaseEdge<VertexType>>boolean isConnected(BaseGraph<VertexType,EdgeType> g){
  ArrayList vs=new ArrayList();
  int[] parent=new int[g.getVerticesCount()];
  for (int i=0; i < g.getVerticesCount(); i++)   parent[i]=-1;
  dfs(g,0,vs,parent);
  return Arrays.stream(vs.toArray()).distinct().toArray().length == g.getVerticesCount();
}",0.9072164948453608
187285,"public UI(){
  container=getContentPane();
  setSize(700,500);
  setTitle(""String_Node_Str"" + SimpleJavaTextEditor.NAME);
  setDefaultCloseOperation(EXIT_ON_CLOSE);
  textArea=new JTextArea(""String_Node_Str"",0,0);
  textArea.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
  textArea.setTabSize(2);
  textArea.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
  textArea.setTabSize(2);
  textArea.setLineWrap(true);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(textArea);
  menuFile=new JMenu(""String_Node_Str"");
  menuEdit=new JMenu(""String_Node_Str"");
  menuFind=new JMenu(""String_Node_Str"");
  menuAbout=new JMenu(""String_Node_Str"");
  newFile=new JMenuItem(""String_Node_Str"",newIcon);
  openFile=new JMenuItem(""String_Node_Str"",openIcon);
  saveFile=new JMenuItem(""String_Node_Str"",saveIcon);
  close=new JMenuItem(""String_Node_Str"",closeIcon);
  clearFile=new JMenuItem(""String_Node_Str"",clearIcon);
  quickFind=new JMenuItem(""String_Node_Str"",searchIcon);
  aboutMe=new JMenuItem(""String_Node_Str"",aboutMeIcon);
  aboutSoftware=new JMenuItem(""String_Node_Str"",aboutIcon);
  menuBar=new JMenuBar();
  menuBar.add(menuFile);
  menuBar.add(menuEdit);
  menuBar.add(menuFind);
  menuBar.add(menuAbout);
  this.setJMenuBar(menuBar);
  selectAllAction=new SelectAllAction(""String_Node_Str"",clearIcon,""String_Node_Str"",new Integer(KeyEvent.VK_A),textArea);
  this.setJMenuBar(menuBar);
  newFile.addActionListener(this);
  newFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_MASK));
  menuFile.add(newFile);
  openFile.addActionListener(this);
  openFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  menuFile.add(openFile);
  saveFile.addActionListener(this);
  saveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  menuFile.add(saveFile);
  close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,InputEvent.CTRL_MASK));
  close.addActionListener(this);
  menuFile.add(close);
  selectAll=new JMenuItem(selectAllAction);
  selectAll.setText(""String_Node_Str"");
  selectAll.setIcon(selectAllIcon);
  selectAll.setToolTipText(""String_Node_Str"");
  selectAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_MASK));
  menuEdit.add(selectAll);
  clearFile.addActionListener(this);
  clearFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_K,InputEvent.CTRL_MASK));
  menuEdit.add(clearFile);
  cut=new JMenuItem(new DefaultEditorKit.CutAction());
  cut.setText(""String_Node_Str"");
  cut.setIcon(cutIcon);
  cut.setToolTipText(""String_Node_Str"");
  cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_MASK));
  menuEdit.add(cut);
  wordWrap=new JMenuItem();
  wordWrap.setText(""String_Node_Str"");
  wordWrap.setIcon(wordwrapIcon);
  wordWrap.setToolTipText(""String_Node_Str"");
  wordWrap.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
  menuEdit.add(wordWrap);
  wordWrap.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      if (textArea.getLineWrap() == false) {
        textArea.setLineWrap(true);
      }
 else {
        textArea.setLineWrap(false);
      }
    }
  }
);
  copy=new JMenuItem(new DefaultEditorKit.CopyAction());
  copy.setText(""String_Node_Str"");
  copy.setIcon(copyIcon);
  copy.setToolTipText(""String_Node_Str"");
  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.CTRL_MASK));
  menuEdit.add(copy);
  paste=new JMenuItem(new DefaultEditorKit.PasteAction());
  paste.setText(""String_Node_Str"");
  paste.setIcon(pasteIcon);
  paste.setToolTipText(""String_Node_Str"");
  paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.CTRL_MASK));
  menuEdit.add(paste);
  quickFind.addActionListener(this);
  quickFind.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,InputEvent.CTRL_MASK));
  menuFind.add(quickFind);
  aboutMe.addActionListener(this);
  aboutMe.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));
  menuAbout.add(aboutMe);
  aboutSoftware.addActionListener(this);
  aboutSoftware.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0));
  menuAbout.add(aboutSoftware);
  mainToolbar=new JToolBar();
  this.add(mainToolbar,BorderLayout.NORTH);
  Border emptyBorder=BorderFactory.createEmptyBorder(0,0,0,50);
  newButton=new JButton(newIcon);
  newButton.setToolTipText(""String_Node_Str"");
  newButton.addActionListener(this);
  mainToolbar.add(newButton);
  mainToolbar.addSeparator();
  openButton=new JButton(openIcon);
  openButton.setToolTipText(""String_Node_Str"");
  openButton.addActionListener(this);
  mainToolbar.add(openButton);
  mainToolbar.addSeparator();
  saveButton=new JButton(saveIcon);
  saveButton.setToolTipText(""String_Node_Str"");
  saveButton.addActionListener(this);
  mainToolbar.add(saveButton);
  mainToolbar.addSeparator();
  clearButton=new JButton(clearIcon);
  clearButton.setToolTipText(""String_Node_Str"");
  clearButton.addActionListener(this);
  mainToolbar.add(clearButton);
  mainToolbar.addSeparator();
  quickButton=new JButton(searchIcon);
  quickButton.setToolTipText(""String_Node_Str"");
  quickButton.addActionListener(this);
  mainToolbar.add(quickButton);
  mainToolbar.addSeparator();
  aboutMeButton=new JButton(aboutMeIcon);
  aboutMeButton.setToolTipText(""String_Node_Str"");
  aboutMeButton.addActionListener(this);
  mainToolbar.add(aboutMeButton);
  mainToolbar.addSeparator();
  aboutButton=new JButton(aboutIcon);
  aboutButton.setToolTipText(""String_Node_Str"");
  aboutButton.addActionListener(this);
  mainToolbar.add(aboutButton);
  mainToolbar.addSeparator();
  closeButton=new JButton(closeIcon);
  closeButton.setToolTipText(""String_Node_Str"");
  closeButton.addActionListener(this);
  mainToolbar.add(closeButton);
  mainToolbar.addSeparator();
  fontType=new JComboBox();
  String[] fonts=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
  for (int i=0; i < fonts.length; i++) {
    fontType.addItem(fonts[i]);
  }
  fontType.setMaximumSize(new Dimension(170,30));
  mainToolbar.add(fontType);
  mainToolbar.addSeparator();
  fontType.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String p=fontType.getSelectedItem().toString();
      int s=textArea.getFont().getSize();
      textArea.setFont(new Font(p,Font.PLAIN,s));
    }
  }
);
  fontSize=new JComboBox();
  for (int i=5; i <= 100; i++) {
    fontSize.addItem(i);
  }
  fontSize.setMaximumSize(new Dimension(70,30));
  mainToolbar.add(fontSize);
  fontSize.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String sizeValue=fontSize.getSelectedItem().toString();
      int sizeOfFont=Integer.parseInt(sizeValue);
      String fontFamily=textArea.getFont().getFamily();
      Font font1=new Font(fontFamily,Font.PLAIN,sizeOfFont);
      textArea.setFont(font1);
    }
  }
);
}","public UI(){
  container=getContentPane();
  setSize(700,500);
  setTitle(""String_Node_Str"" + SimpleJavaTextEditor.NAME);
  setDefaultCloseOperation(EXIT_ON_CLOSE);
  textArea=new JTextArea(""String_Node_Str"",0,0);
  textArea.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
  textArea.setTabSize(2);
  textArea.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
  textArea.setTabSize(2);
  textArea.setLineWrap(true);
  textArea.addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent ke){
      languageHighlighter.highLight(textArea,kw.getCppKeywords());
      languageHighlighter.highLight(textArea,kw.getJavaKeywords());
    }
  }
);
  getContentPane().setLayout(new BorderLayout());
  getContentPane().add(textArea);
  menuFile=new JMenu(""String_Node_Str"");
  menuEdit=new JMenu(""String_Node_Str"");
  menuFind=new JMenu(""String_Node_Str"");
  menuAbout=new JMenu(""String_Node_Str"");
  newFile=new JMenuItem(""String_Node_Str"",newIcon);
  openFile=new JMenuItem(""String_Node_Str"",openIcon);
  saveFile=new JMenuItem(""String_Node_Str"",saveIcon);
  close=new JMenuItem(""String_Node_Str"",closeIcon);
  clearFile=new JMenuItem(""String_Node_Str"",clearIcon);
  quickFind=new JMenuItem(""String_Node_Str"",searchIcon);
  aboutMe=new JMenuItem(""String_Node_Str"",aboutMeIcon);
  aboutSoftware=new JMenuItem(""String_Node_Str"",aboutIcon);
  menuBar=new JMenuBar();
  menuBar.add(menuFile);
  menuBar.add(menuEdit);
  menuBar.add(menuFind);
  menuBar.add(menuAbout);
  this.setJMenuBar(menuBar);
  selectAllAction=new SelectAllAction(""String_Node_Str"",clearIcon,""String_Node_Str"",new Integer(KeyEvent.VK_A),textArea);
  this.setJMenuBar(menuBar);
  newFile.addActionListener(this);
  newFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,InputEvent.CTRL_MASK));
  menuFile.add(newFile);
  openFile.addActionListener(this);
  openFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,InputEvent.CTRL_MASK));
  menuFile.add(openFile);
  saveFile.addActionListener(this);
  saveFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.CTRL_MASK));
  menuFile.add(saveFile);
  close.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,InputEvent.CTRL_MASK));
  close.addActionListener(this);
  menuFile.add(close);
  selectAll=new JMenuItem(selectAllAction);
  selectAll.setText(""String_Node_Str"");
  selectAll.setIcon(selectAllIcon);
  selectAll.setToolTipText(""String_Node_Str"");
  selectAll.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,InputEvent.CTRL_MASK));
  menuEdit.add(selectAll);
  clearFile.addActionListener(this);
  clearFile.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_K,InputEvent.CTRL_MASK));
  menuEdit.add(clearFile);
  cut=new JMenuItem(new DefaultEditorKit.CutAction());
  cut.setText(""String_Node_Str"");
  cut.setIcon(cutIcon);
  cut.setToolTipText(""String_Node_Str"");
  cut.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,InputEvent.CTRL_MASK));
  menuEdit.add(cut);
  wordWrap=new JMenuItem();
  wordWrap.setText(""String_Node_Str"");
  wordWrap.setIcon(wordwrapIcon);
  wordWrap.setToolTipText(""String_Node_Str"");
  wordWrap.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,InputEvent.CTRL_MASK));
  menuEdit.add(wordWrap);
  wordWrap.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      if (textArea.getLineWrap() == false) {
        textArea.setLineWrap(true);
      }
 else {
        textArea.setLineWrap(false);
      }
    }
  }
);
  copy=new JMenuItem(new DefaultEditorKit.CopyAction());
  copy.setText(""String_Node_Str"");
  copy.setIcon(copyIcon);
  copy.setToolTipText(""String_Node_Str"");
  copy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,InputEvent.CTRL_MASK));
  menuEdit.add(copy);
  paste=new JMenuItem(new DefaultEditorKit.PasteAction());
  paste.setText(""String_Node_Str"");
  paste.setIcon(pasteIcon);
  paste.setToolTipText(""String_Node_Str"");
  paste.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,InputEvent.CTRL_MASK));
  menuEdit.add(paste);
  quickFind.addActionListener(this);
  quickFind.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,InputEvent.CTRL_MASK));
  menuFind.add(quickFind);
  aboutMe.addActionListener(this);
  aboutMe.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));
  menuAbout.add(aboutMe);
  aboutSoftware.addActionListener(this);
  aboutSoftware.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F2,0));
  menuAbout.add(aboutSoftware);
  mainToolbar=new JToolBar();
  this.add(mainToolbar,BorderLayout.NORTH);
  Border emptyBorder=BorderFactory.createEmptyBorder(0,0,0,50);
  newButton=new JButton(newIcon);
  newButton.setToolTipText(""String_Node_Str"");
  newButton.addActionListener(this);
  mainToolbar.add(newButton);
  mainToolbar.addSeparator();
  openButton=new JButton(openIcon);
  openButton.setToolTipText(""String_Node_Str"");
  openButton.addActionListener(this);
  mainToolbar.add(openButton);
  mainToolbar.addSeparator();
  saveButton=new JButton(saveIcon);
  saveButton.setToolTipText(""String_Node_Str"");
  saveButton.addActionListener(this);
  mainToolbar.add(saveButton);
  mainToolbar.addSeparator();
  clearButton=new JButton(clearIcon);
  clearButton.setToolTipText(""String_Node_Str"");
  clearButton.addActionListener(this);
  mainToolbar.add(clearButton);
  mainToolbar.addSeparator();
  quickButton=new JButton(searchIcon);
  quickButton.setToolTipText(""String_Node_Str"");
  quickButton.addActionListener(this);
  mainToolbar.add(quickButton);
  mainToolbar.addSeparator();
  aboutMeButton=new JButton(aboutMeIcon);
  aboutMeButton.setToolTipText(""String_Node_Str"");
  aboutMeButton.addActionListener(this);
  mainToolbar.add(aboutMeButton);
  mainToolbar.addSeparator();
  aboutButton=new JButton(aboutIcon);
  aboutButton.setToolTipText(""String_Node_Str"");
  aboutButton.addActionListener(this);
  mainToolbar.add(aboutButton);
  mainToolbar.addSeparator();
  closeButton=new JButton(closeIcon);
  closeButton.setToolTipText(""String_Node_Str"");
  closeButton.addActionListener(this);
  mainToolbar.add(closeButton);
  mainToolbar.addSeparator();
  fontType=new JComboBox();
  String[] fonts=GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
  for (int i=0; i < fonts.length; i++) {
    fontType.addItem(fonts[i]);
  }
  fontType.setMaximumSize(new Dimension(170,30));
  mainToolbar.add(fontType);
  mainToolbar.addSeparator();
  fontType.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String p=fontType.getSelectedItem().toString();
      int s=textArea.getFont().getSize();
      textArea.setFont(new Font(p,Font.PLAIN,s));
    }
  }
);
  fontSize=new JComboBox();
  for (int i=5; i <= 100; i++) {
    fontSize.addItem(i);
  }
  fontSize.setMaximumSize(new Dimension(70,30));
  mainToolbar.add(fontSize);
  fontSize.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent ev){
      String sizeValue=fontSize.getSelectedItem().toString();
      int sizeOfFont=Integer.parseInt(sizeValue);
      String fontFamily=textArea.getFont().getFamily();
      Font font1=new Font(fontFamily,Font.PLAIN,sizeOfFont);
      textArea.setFont(font1);
    }
  }
);
}",0.9831902971841976
187286,"public About(UI ui){
  panel=new JPanel(new FlowLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  frame=new JFrame();
  frame.setVisible(true);
  frame.setSize(500,300);
  frame.setLocationRelativeTo(ui);
  text=new JLabel();
}","public About(UI ui){
  panel=new JPanel(new FlowLayout());
  panel.setBorder(BorderFactory.createEmptyBorder(8,8,8,8));
  frame=new JFrame();
  frame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      frame.dispose();
    }
  }
);
  frame.setVisible(true);
  frame.setSize(500,300);
  frame.setLocationRelativeTo(ui);
  text=new JLabel();
}",0.7782945736434108
187287,"public Find(JTextArea text){
  this.txt=text;
  lab1=new JLabel(""String_Node_Str"");
  lab2=new JLabel(""String_Node_Str"");
  textF=new JTextField(30);
  textR=new JTextField(30);
  findBtn=new JButton(""String_Node_Str"");
  findNext=new JButton(""String_Node_Str"");
  replace=new JButton(""String_Node_Str"");
  replaceAll=new JButton(""String_Node_Str"");
  cancel=new JButton(""String_Node_Str"");
  setLayout(null);
  int labWidth=80;
  int labHeight=20;
  lab1.setBounds(10,10,labWidth,labHeight);
  add(lab1);
  textF.setBounds(10 + labWidth,10,120,20);
  add(textF);
  lab2.setBounds(10,10 + labHeight + 10,labWidth,labHeight);
  add(lab2);
  textR.setBounds(10 + labWidth,10 + labHeight + 10,120,20);
  add(textR);
  findBtn.setBounds(225,6,115,20);
  add(findBtn);
  findBtn.addActionListener(this);
  findNext.setBounds(225,28,115,20);
  add(findNext);
  findNext.addActionListener(this);
  replace.setBounds(225,50,115,20);
  add(replace);
  replace.addActionListener(this);
  replaceAll.setBounds(225,72,115,20);
  add(replaceAll);
  replaceAll.addActionListener(this);
  cancel.setBounds(225,94,115,20);
  add(cancel);
  cancel.addActionListener(this);
  int width=360;
  int height=160;
  setSize(width,height);
  Point center=GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
  setLocation(center.x - width / 2,center.y - height / 2);
  setVisible(true);
  setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
}","public Find(JTextArea text){
  this.txt=text;
  lab1=new JLabel(""String_Node_Str"");
  lab2=new JLabel(""String_Node_Str"");
  textF=new JTextField(30);
  textR=new JTextField(30);
  findBtn=new JButton(""String_Node_Str"");
  findNext=new JButton(""String_Node_Str"");
  replace=new JButton(""String_Node_Str"");
  replaceAll=new JButton(""String_Node_Str"");
  cancel=new JButton(""String_Node_Str"");
  setLayout(null);
  int labWidth=80;
  int labHeight=20;
  lab1.setBounds(10,10,labWidth,labHeight);
  add(lab1);
  textF.setBounds(10 + labWidth,10,120,20);
  add(textF);
  lab2.setBounds(10,10 + labHeight + 10,labWidth,labHeight);
  add(lab2);
  textR.setBounds(10 + labWidth,10 + labHeight + 10,120,20);
  add(textR);
  findBtn.setBounds(225,6,115,20);
  add(findBtn);
  findBtn.addActionListener(this);
  findNext.setBounds(225,28,115,20);
  add(findNext);
  findNext.addActionListener(this);
  replace.setBounds(225,50,115,20);
  add(replace);
  replace.addActionListener(this);
  replaceAll.setBounds(225,72,115,20);
  add(replaceAll);
  replaceAll.addActionListener(this);
  cancel.setBounds(225,94,115,20);
  add(cancel);
  cancel.addActionListener(this);
  int width=360;
  int height=160;
  setSize(width,height);
  setLocationRelativeTo(txt);
  setVisible(true);
  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
}",0.9392506365951256
187288,"public void find(){
  int select_start=txt.getText().toLowerCase().indexOf(textF.getText().toLowerCase());
  if (select_start == -1) {
    startIndex=0;
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + textF.getText() + ""String_Node_Str"");
    return;
  }
  if (select_start == txt.getText().toLowerCase().lastIndexOf(textF.getText().toLowerCase())) {
    startIndex=0;
  }
  int select_end=select_start + textF.getText().length();
  txt.select(select_start,select_end);
}","public void find(){
  select_start=txt.getText().toLowerCase().indexOf(textF.getText().toLowerCase());
  if (select_start == -1) {
    startIndex=0;
    JOptionPane.showMessageDialog(null,""String_Node_Str"" + textF.getText() + ""String_Node_Str"");
    return;
  }
  if (select_start == txt.getText().toLowerCase().lastIndexOf(textF.getText().toLowerCase())) {
    startIndex=0;
  }
  int select_end=select_start + textF.getText().length();
  txt.select(select_start,select_end);
}",0.9958333333333332
187289,"public void replace(){
  try {
    find();
    txt.replaceSelection(textR.getText());
  }
 catch (  NullPointerException e) {
    System.out.print(""String_Node_Str"" + e);
  }
}","public void replace(){
  try {
    find();
    if (select_start != -1)     txt.replaceSelection(textR.getText());
  }
 catch (  NullPointerException e) {
    System.out.print(""String_Node_Str"" + e);
  }
}",0.9263157894736842
187290,"/** 
 * Extracts the various runtime classes to the directory specified as the first argument. This allows the generated library to be more portable, and mimics the behavior in versions <= 0.3
 */
public static void main(String[] args){
  if (args.length != 1) {
    throw new RuntimeException(""String_Node_Str"");
  }
  writeRequiredSources(args[0]);
}","/** 
 * Extracts the various runtime classes to the directory specified as the first argument. This allows the generated library to be more portable, and mimics the behavior in versions &lt;= 0.3
 */
public static void main(String[] args){
  if (args.length != 1) {
    throw new RuntimeException(""String_Node_Str"");
  }
  writeRequiredSources(args[0]);
}",0.9929278642149928
187291,"/** 
 * Generates a name based on the following rules: once => prefix + state name + suffix 1st method => name$number 2nd..Nth method => name$letter$number Where 'letter' is for instance id and number is maxOccurs. The letter was added to address FLAPI-105, which identified a lack of support for two methods with the same name but different parameters.
 * @param prefix prefix for the name (eg 'Impl')
 * @param suffix suffix for the name (eg 'Builder')
 * @param state state to generate a name for
 * @return the generated name, which should be unique across the graph
 */
public String getGeneratedName(String prefix,String suffix,StateClass state){
  StringBuilder name=new StringBuilder();
  name.append(prefix).append(state.getName()).append(suffix);
  for (  Transition transition : state.getTransitions()) {
    if (transition.getType() == TransitionType.Terminal) {
      continue;
    }
    if (transition.getType() == TransitionType.Ascending && transition.getOwner().isTopLevel()) {
      continue;
    }
    MethodParser parsed=new MethodParser(transition.getMethodSignature());
    String methodName=parsed.methodName;
    String krazyKey=methodName;
    for (    Pair<JavaType,String> param : parsed.params) {
      krazyKey+=""String_Node_Str"" + param.first.typeName;
    }
    if (hashToSuffix.containsKey(krazyKey)) {
      methodName+=hashToSuffix.get(krazyKey);
    }
 else {
      CharacterGenerator characterGen;
      String methodSuffix;
      if (nameToGenerator.containsKey(methodName)) {
        characterGen=nameToGenerator.get(methodName);
        methodSuffix=characterGen.getAndIncrement();
      }
 else {
        characterGen=new CharacterGenerator(""String_Node_Str"");
        nameToGenerator.put(methodName,characterGen);
        methodSuffix=""String_Node_Str"";
      }
      methodName+=methodSuffix;
      hashToSuffix.put(krazyKey,methodSuffix);
    }
    name.append(""String_Node_Str"");
    if (condenseNames) {
      if (nameMap.containsKey(methodName)) {
        name.append(nameMap.get(methodName));
      }
 else {
        String gen=""String_Node_Str"" + (nameIdCounter++);
        name.append(gen);
        nameMap.put(methodName,gen);
      }
    }
 else {
      name.append(methodName);
    }
    if (transition.info().getMaxOccurrences() > 1) {
      name.append(""String_Node_Str"").append(transition.info().getMaxOccurrences());
    }
    name.append(""String_Node_Str"").append(transition.info().didTrigger() ? ""String_Node_Str"" : ""String_Node_Str"");
  }
  return name.toString();
}","/** 
 * Generates a name based on the following rules: once => prefix + state name + suffix 1st method => name$number 2nd..Nth method => name$letter$number Where 'letter' is for instance id and number is maxOccurs. The letter was added to address FLAPI-105, which identified a lack of support for two methods with the same name but different parameters.
 * @param prefix prefix for the name (eg 'Impl')
 * @param suffix suffix for the name (eg 'Builder')
 * @param state state to generate a name for
 * @return the generated name, which should be unique across the graph
 */
public String getGeneratedName(String prefix,String suffix,StateClass state){
  StringBuilder name=new StringBuilder();
  name.append(prefix).append(state.getName()).append(suffix);
  for (  Transition transition : state.getTransitions()) {
    final boolean isImplicit=transition.info().isImplicit();
    if (transition.getType() == TransitionType.Terminal && !isImplicit) {
      continue;
    }
    if (transition.getType() == TransitionType.Ascending && transition.getOwner().isTopLevel() && !isImplicit) {
      continue;
    }
    MethodParser parsed=new MethodParser(transition.getMethodSignature());
    String methodName=parsed.methodName;
    String krazyKey=methodName;
    for (    Pair<JavaType,String> param : parsed.params) {
      krazyKey+=""String_Node_Str"" + param.first.typeName;
    }
    if (hashToSuffix.containsKey(krazyKey)) {
      methodName+=hashToSuffix.get(krazyKey);
    }
 else {
      CharacterGenerator characterGen;
      String methodSuffix;
      if (nameToGenerator.containsKey(methodName)) {
        characterGen=nameToGenerator.get(methodName);
        methodSuffix=characterGen.getAndIncrement();
      }
 else {
        characterGen=new CharacterGenerator(""String_Node_Str"");
        nameToGenerator.put(methodName,characterGen);
        methodSuffix=""String_Node_Str"";
      }
      methodName+=methodSuffix;
      hashToSuffix.put(krazyKey,methodSuffix);
    }
    name.append(""String_Node_Str"");
    if (condenseNames) {
      if (nameMap.containsKey(methodName)) {
        name.append(nameMap.get(methodName));
      }
 else {
        String gen=""String_Node_Str"" + (nameIdCounter++);
        name.append(gen);
        nameMap.put(methodName,gen);
      }
    }
 else {
      name.append(methodName);
    }
    if (transition.info().getMaxOccurrences() > 1) {
      name.append(""String_Node_Str"").append(transition.info().getMaxOccurrences());
    }
    if (transition.info().didTrigger()) {
      name.append(""String_Node_Str"");
    }
    if (isImplicit) {
      name.append(""String_Node_Str"");
    }
  }
  return name.toString();
}",0.9412900733874082
187292,"private Set<MethodOutline> computeNextMethods(Set<MethodOutline> allMethods,Set<MethodOutline> triggeredMethods,MethodOutline method){
  if (method.isTerminal()) {
    return new TreeSet<MethodOutline>();
  }
  Set<MethodOutline> nextMethods=new TreeSet<MethodOutline>(allMethods);
  nextMethods.remove(method);
  final MethodOutline next;
  if (method.getMaxOccurrences() == 1) {
    next=null;
  }
 else   if (method.getMaxOccurrences() < 1) {
    MethodOutline copy=method.copy();
    nextMethods.add(copy);
    next=copy;
  }
 else {
    MethodOutline m=method.copy();
    m.setMaxOccurrences(m.getMaxOccurrences() - 1);
    nextMethods.add(m);
    next=m;
  }
  Integer currentGroup=method.getGroup();
  if (currentGroup != null) {
    for (    MethodOutline otherMethod : new TreeSet<MethodOutline>(nextMethods)) {
      if (otherMethod == next) {
        continue;
      }
      if (currentGroup.equals(otherMethod.getGroup())) {
        nextMethods.remove(otherMethod);
      }
    }
    for (    MethodOutline triggeredMethod : triggeredMethods) {
      if (currentGroup.equals(triggeredMethod.getTrigger())) {
        if (next != null) {
          next.setTriggered();
        }
        if (!method.didTrigger()) {
          nextMethods.add(triggeredMethod.copy());
        }
      }
    }
  }
  return nextMethods;
}","private Set<MethodOutline> computeNextMethods(Set<MethodOutline> allMethods,Set<MethodOutline> triggeredMethods,MethodOutline method){
  if (method.isTerminal()) {
    return new TreeSet<MethodOutline>();
  }
  Set<MethodOutline> nextMethods=new TreeSet<MethodOutline>(allMethods);
  nextMethods.remove(method);
  final MethodOutline next;
  if (method.getMaxOccurrences() == 1) {
    next=null;
  }
 else   if (method.getMaxOccurrences() < 1) {
    MethodOutline copy=method.copy();
    nextMethods.add(copy);
    next=copy;
  }
 else {
    MethodOutline m=method.copy();
    m.setMaxOccurrences(m.getMaxOccurrences() - 1);
    nextMethods.add(m);
    next=m;
  }
  Integer currentGroup=method.getGroup();
  if (currentGroup != null) {
    for (    MethodOutline otherMethod : new TreeSet<MethodOutline>(nextMethods)) {
      if (otherMethod == next) {
        continue;
      }
      if (currentGroup.equals(otherMethod.getGroup())) {
        nextMethods.remove(otherMethod);
      }
    }
    for (    MethodOutline triggeredMethod : triggeredMethods) {
      if (currentGroup.equals(triggeredMethod.getTrigger())) {
        if (next != null) {
          next.setTriggered();
        }
        if (!method.didTrigger()) {
          nextMethods.add(triggeredMethod.copy());
        }
      }
    }
  }
  if (nextMethods.size() == 1) {
    MethodOutline nextMethod=nextMethods.iterator().next();
    if (!nextMethod.isTerminal() && !nextMethod.isRequired()) {
      MethodOutline copy=nextMethod.copy();
      copy.isImplicit(true);
      copy.isTerminal(true);
      nextMethods=new TreeSet<MethodOutline>();
      nextMethods.add(copy);
    }
  }
  return nextMethods;
}",0.8713333333333333
187293,"private StateClass getStateFromBlockAndMethods(BlockOutline block,Set<MethodOutline> allMethods){
  TreeSet<String> names=new TreeSet<String>();
  for (  MethodOutline method : allMethods) {
    names.add(method.keyString() + ""String_Node_Str"" + method.getMaxOccurrences());
  }
  StringBuilder sb=new StringBuilder();
  sb.append(block.getName());
  for (  String name : names) {
    sb.append(name);
  }
  String key=sb.toString();
  if (states.containsKey(key)) {
    return states.get(key);
  }
  StateClass state=new StateClass(block.getHelperClass());
  state.setName(block.getName());
  states.put(key,state);
  return state;
}","private StateClass getStateFromBlockAndMethods(BlockOutline block,Set<MethodOutline> allMethods){
  StringBuilder sb=new StringBuilder();
  sb.append(block.getName());
  TreeSet<String> names=new TreeSet<String>();
  for (  MethodOutline method : allMethods) {
    names.add(method.keyString() + ""String_Node_Str"" + method.getMaxOccurrences());
  }
  for (  String name : names) {
    sb.append(name);
  }
  String key=sb.toString();
  if (states.containsKey(key)) {
    return states.get(key);
  }
  StateClass state=new StateClass(block.getHelperClass());
  state.setName(block.getName());
  states.put(key,state);
  return state;
}",0.8391167192429022
187294,"private Set<MethodOutline> addTransition(StateClass state,BlockOutline block,Set<MethodOutline> combination,Set<MethodOutline> triggered,MethodOutline method){
  Transition transition;
  Set<MethodOutline> nextMethods=computeNextMethods(combination,triggered,method);
  StateClass next=getStateFromBlockAndMethods(block,nextMethods);
  boolean implicitTerminalWorthy=nextMethods.isEmpty();
  if (method.isTerminal() || implicitTerminalWorthy) {
    if (method.getReturnType() != null) {
      TerminalTransition terminal=new TerminalTransition();
      terminal.setReturnType(method.getReturnType());
      transition=terminal;
    }
 else     if (block.getReturnType() != null) {
      TerminalTransition terminal=new TerminalTransition();
      terminal.setReturnType(block.getReturnType());
      transition=terminal;
    }
 else {
      transition=new AscendingTransition(!method.isRequired());
    }
  }
 else   if (state == next) {
    transition=new RecursiveTransition();
  }
 else {
    LateralTransition lateral=new LateralTransition();
    lateral.setSibling(next);
    transition=lateral;
  }
  transition.setMethodInfo(((MethodInfo)method).copy());
  state.addTransitions(transition);
  for (  BlockOutline chain : method.getBlockChain()) {
    StateClass chainClass=convertBlock(chain);
    transition.getStateChain().add(chainClass);
  }
  return nextMethods;
}","private Set<MethodOutline> addTransition(StateClass state,BlockOutline block,Set<MethodOutline> combination,Set<MethodOutline> triggered,MethodOutline method){
  final Set<MethodOutline> nextMethods=computeNextMethods(combination,triggered,method);
  final StateClass next=getStateFromBlockAndMethods(block,nextMethods);
  final Transition transition;
  if (method.isTerminal()) {
    if (method.getReturnType() != null) {
      TerminalTransition terminal=new TerminalTransition();
      terminal.setReturnType(method.getReturnType());
      transition=terminal;
    }
 else     if (block.getReturnType() != null) {
      TerminalTransition terminal=new TerminalTransition();
      terminal.setReturnType(block.getReturnType());
      transition=terminal;
    }
 else {
      transition=new AscendingTransition(!method.isRequired());
    }
  }
 else   if (state == next) {
    transition=new RecursiveTransition();
  }
 else {
    LateralTransition lateral=new LateralTransition();
    lateral.setSibling(next);
    transition=lateral;
  }
  transition.setMethodInfo(((MethodInfo)method).copy());
  state.addTransitions(transition);
  for (  BlockOutline chain : method.getBlockChain()) {
    StateClass chainClass=convertBlock(chain);
    transition.getStateChain().add(chainClass);
  }
  return nextMethods;
}",0.9285714285714286
187295,"public @Override void visit(TerminalTransition transition){
  String clazz=transition.getReturnType() == null ? Void.class.getName() : transition.getReturnType();
  if (!clazz.equals(Void.class.getName())) {
    helperReturnType.set(ctx.model.ref(clazz));
  }
}","public @Override void visit(TerminalTransition transition){
  String clazz=transition.getReturnType() == null || transition.info().isImplicit() ? Void.class.getName() : transition.getReturnType();
  if (!clazz.equals(Void.class.getName())) {
    helperReturnType.set(ctx.model.ref(clazz));
  }
}",0.9388489208633094
187296,"private void addHelperCall(Transition transition){
  if (ctx.helperMethods.seen(transition)) {
    return;
  }
  final AtomicReference<JType> helperReturnType=new AtomicReference<JType>();
  transition.accept(new TransitionVisitor.$(){
    public @Override void visit(    TerminalTransition transition){
      String clazz=transition.getReturnType() == null ? Void.class.getName() : transition.getReturnType();
      if (!clazz.equals(Void.class.getName())) {
        helperReturnType.set(ctx.model.ref(clazz));
      }
    }
  }
);
  JType helperReturnType1=helperReturnType.get();
  JDefinedClass iHelper=HELPER_INTERFACE_STRATEGY.createStrongType(ctx,transition.getOwner());
  JType methodCallType=helperReturnType1 == null ? ctx.model.VOID : helperReturnType1;
  JMethod _method=addHelperMethod(iHelper,methodCallType,JMod.NONE,transition);
  for (int i=0; i < transition.getStateChain().size(); ++i) {
    JClass type=HELPER_INTERFACE_STRATEGY.createWeakType(ctx,transition.getStateChain().get(i));
    _method.param(ref(AtomicReference.class).narrow(type),Constants.HELPER_VALUE_NAME + (i + 1));
  }
}","private void addHelperCall(Transition transition){
  if (ctx.helperMethods.seen(transition)) {
    return;
  }
  final AtomicReference<JType> helperReturnType=new AtomicReference<JType>();
  transition.accept(new TransitionVisitor.$(){
    public @Override void visit(    TerminalTransition transition){
      String clazz=transition.getReturnType() == null || transition.info().isImplicit() ? Void.class.getName() : transition.getReturnType();
      if (!clazz.equals(Void.class.getName())) {
        helperReturnType.set(ctx.model.ref(clazz));
      }
    }
  }
);
  JType helperReturnType1=helperReturnType.get();
  JDefinedClass iHelper=HELPER_INTERFACE_STRATEGY.createStrongType(ctx,transition.getOwner());
  JType methodCallType=helperReturnType1 == null ? ctx.model.VOID : helperReturnType1;
  JMethod _method=addHelperMethod(iHelper,methodCallType,JMod.NONE,transition);
  for (int i=0; i < transition.getStateChain().size(); ++i) {
    JClass type=HELPER_INTERFACE_STRATEGY.createWeakType(ctx,transition.getStateChain().get(i));
    _method.param(ref(AtomicReference.class).narrow(type),Constants.HELPER_VALUE_NAME + (i + 1));
  }
}",0.9848754448398576
187297,"public String keyString(){
  StringBuilder sb=new StringBuilder();
  MethodParser parser=new MethodParser(methodSignature);
  sb.append(parser.methodName).append(""String_Node_Str"");
  boolean first=true;
  for (  Pair<MethodParser.JavaType,String> param : parser.params) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
 else {
      first=false;
    }
    sb.append(param.first.typeName).append(""String_Node_Str"").append(param.second);
  }
  sb.append(""String_Node_Str"").append(didTrigger ? ""String_Node_Str"" : ""String_Node_Str"");
  return sb.toString();
}","public String keyString(){
  StringBuilder sb=new StringBuilder();
  MethodParser parser=new MethodParser(methodSignature);
  sb.append(parser.methodName).append(""String_Node_Str"");
  boolean first=true;
  for (  Pair<MethodParser.JavaType,String> param : parser.params) {
    if (!first) {
      sb.append(""String_Node_Str"");
    }
 else {
      first=false;
    }
    sb.append(param.first.typeName).append(""String_Node_Str"").append(param.second);
  }
  if (didTrigger) {
    sb.append(""String_Node_Str"");
  }
  if (isImplicit) {
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}",0.8463519313304722
187298,"protected void copy(MethodInfo other){
  other.minOccurrences=minOccurrences;
  other.maxOccurrences=maxOccurrences;
  other.methodSignature=methodSignature;
  other.documentation=documentation;
  other.isDeprecated=isDeprecated;
  other.deprecationReason=deprecationReason;
  other.didTrigger=didTrigger;
  other.annotations.putAll(annotations);
}","protected void copy(MethodInfo other){
  other.minOccurrences=minOccurrences;
  other.maxOccurrences=maxOccurrences;
  other.methodSignature=methodSignature;
  other.documentation=documentation;
  other.isDeprecated=isDeprecated;
  other.deprecationReason=deprecationReason;
  other.didTrigger=didTrigger;
  other.isImplicit=isImplicit;
  other.annotations.putAll(annotations);
}",0.9573590096286108
187299,"MethodHelperImpl(MethodOutline method){
  this.method=method;
}","public MethodHelperImpl(MethodOutline method){
  this.method=method;
}",0.9473684210526316
187300,"@Override public void between(int atLeast,int atMost){
  if (atLeast < 0) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  if (atMost <= 0) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  if (atMost < atLeast) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  method.setMaxOccurrences(atLeast);
  method.setMinOccurrences(atMost);
}","@Override public void between(int atLeast,int atMost){
  if (atLeast < 0) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  if (atMost <= 0) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  if (atMost < atLeast) {
    throw new DescriptorBuilderException(""String_Node_Str"");
  }
  method.setMinOccurrences(atLeast);
  method.setMaxOccurrences(atMost);
}",0.9056122448979592
187301,"private static void generateNamesForAnonymousBlocks(BlockOutline block,AtomicInteger counter){
  if (block.getName() == null) {
    MethodParser parsed=new MethodParser(block.getConstructor().getMethodSignature());
    block.setName(""String_Node_Str"" + counter.getAndIncrement() + ""String_Node_Str""+ parsed.methodName);
  }
  for (  MethodOutline method : block.getAllMethods()) {
    for (    BlockOutline chain : method.getBlockChain()) {
      if (chain == block) {
        continue;
      }
      generateNamesForAnonymousBlocks(chain,counter);
    }
  }
}","private static void generateNamesForAnonymousBlocks(BlockOutline block,AtomicInteger counter){
  if (block.getName() == null || block.getName().trim().isEmpty()) {
    StringBuilder name=new StringBuilder().append(""String_Node_Str"").append(counter.getAndIncrement());
    if (block.getConstructor() != null) {
      MethodParser parsed=new MethodParser(block.getConstructor().getMethodSignature());
      name.append(""String_Node_Str"").append(parsed.methodName);
    }
    block.setName(name.toString());
  }
  for (  MethodOutline method : block.getAllMethods()) {
    for (    BlockOutline chain : method.getBlockChain()) {
      if (chain == block) {
        continue;
      }
      generateNamesForAnonymousBlocks(chain,counter);
    }
  }
}",0.7019157088122605
187302,"private ClassLoader compileAndWriteClasses(Descriptor descriptor,URLClassLoader classLoader) throws MojoExecutionException {
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  JavaFileManager fileManager=new ClassFileManager(compiler.getStandardFileManager(null,null,null),classesDirectory);
  List<String> options=new ArrayList<String>();
  options.add(""String_Node_Str"");
  options.add(makeClasspath(classLoader));
  Iterable<? extends JavaFileObject> compilationUnits=getSourceFiles(descriptor);
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options,null,compilationUnits);
  task.call();
  try {
    fileManager.close();
  }
 catch (  IOException e) {
  }
  boolean atLeastOneError=false;
  for (  Diagnostic<? extends JavaFileObject> error : diagnostics.getDiagnostics()) {
    if (error.getKind() != Diagnostic.Kind.NOTE) {
      StringBuilder message=new StringBuilder().append(error.getSource().getName()).append(""String_Node_Str"").append(error.getLineNumber()).append(""String_Node_Str"").append(error.getColumnNumber()).append(""String_Node_Str"").append(error.getMessage(Locale.getDefault()));
      getLog().warn(message.toString());
      atLeastOneError=true;
    }
  }
  if (atLeastOneError) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  return fileManager.getClassLoader(StandardLocation.CLASS_PATH);
}","private ClassLoader compileAndWriteClasses(Descriptor descriptor,URLClassLoader classLoader) throws MojoExecutionException {
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  JavaFileManager fileManager=new ClassFileManager(compiler.getStandardFileManager(null,null,null),classesDirectory);
  List<String> options=new ArrayList<String>();
  options.add(""String_Node_Str"");
  options.add(makeClasspath(classLoader));
  options.add(""String_Node_Str"");
  options.add(""String_Node_Str"");
  Iterable<? extends JavaFileObject> compilationUnits=getSourceFiles(descriptor);
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options,null,compilationUnits);
  task.call();
  try {
    fileManager.close();
  }
 catch (  IOException e) {
  }
  boolean atLeastOneError=false;
  for (  Diagnostic<? extends JavaFileObject> error : diagnostics.getDiagnostics()) {
    if (error.getKind() != Diagnostic.Kind.NOTE) {
      StringBuilder message=new StringBuilder().append(error.getSource().getName()).append(""String_Node_Str"").append(error.getLineNumber()).append(""String_Node_Str"").append(error.getColumnNumber()).append(""String_Node_Str"").append(error.getMessage(Locale.getDefault()));
      getLog().warn(message.toString());
      atLeastOneError=true;
    }
  }
  if (atLeastOneError) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  return fileManager.getClassLoader(StandardLocation.CLASS_PATH);
}",0.9774685222001326
187303,"private ClassLoader compileAndWriteClasses(Descriptor descriptor,URLClassLoader classLoader) throws MojoExecutionException {
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  JavaFileManager fileManager=new ClassFileManager(compiler.getStandardFileManager(null,null,null),classesDirectory);
  List<String> options=new ArrayList<String>();
  options.add(""String_Node_Str"");
  options.add(makeClasspath(classLoader));
  options.add(""String_Node_Str"");
  options.add(""String_Node_Str"");
  Iterable<? extends JavaFileObject> compilationUnits=getSourceFiles(descriptor);
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options,null,compilationUnits);
  task.call();
  try {
    fileManager.close();
  }
 catch (  IOException e) {
  }
  boolean atLeastOneError=false;
  for (  Diagnostic<? extends JavaFileObject> error : diagnostics.getDiagnostics()) {
    if (error.getKind() != Diagnostic.Kind.NOTE) {
      StringBuilder message=new StringBuilder().append(error.getSource().getName()).append(""String_Node_Str"").append(error.getLineNumber()).append(""String_Node_Str"").append(error.getColumnNumber()).append(""String_Node_Str"").append(error.getMessage(Locale.getDefault()));
      getLog().warn(message.toString());
      atLeastOneError=true;
    }
  }
  if (atLeastOneError) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  return fileManager.getClassLoader(StandardLocation.CLASS_PATH);
}","private ClassLoader compileAndWriteClasses(Descriptor descriptor,URLClassLoader classLoader) throws MojoExecutionException {
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  JavaFileManager fileManager=new ClassFileManager(compiler.getStandardFileManager(null,null,null),classesDirectory);
  List<String> options=new ArrayList<String>();
  options.add(""String_Node_Str"");
  options.add(makeClasspath(classLoader));
  Iterable<? extends JavaFileObject> compilationUnits=getSourceFiles(descriptor);
  JavaCompiler.CompilationTask task=compiler.getTask(null,fileManager,diagnostics,options,null,compilationUnits);
  task.call();
  try {
    fileManager.close();
  }
 catch (  IOException e) {
  }
  boolean atLeastOneError=false;
  for (  Diagnostic<? extends JavaFileObject> error : diagnostics.getDiagnostics()) {
    if (error.getKind() != Diagnostic.Kind.NOTE) {
      StringBuilder message=new StringBuilder().append(error.getSource().getName()).append(""String_Node_Str"").append(error.getLineNumber()).append(""String_Node_Str"").append(error.getColumnNumber()).append(""String_Node_Str"").append(error.getMessage(Locale.getDefault()));
      getLog().warn(message.toString());
      atLeastOneError=true;
    }
  }
  if (atLeastOneError) {
    throw new MojoExecutionException(""String_Node_Str"");
  }
  return fileManager.getClassLoader(StandardLocation.CLASS_PATH);
}",0.9774685222001326
187304,"private void trackMethod(Method method){
  Tracked annotation=method.getAnnotation(Tracked.class);
  if (annotation == null) {
    return;
  }
  if (!trackedMethods.containsKey(annotation.key())) {
    Counter counter=new Counter(annotation.atLeast());
    trackedMethods.put(annotation.key(),new Pair<Counter,String>(counter,method.getName()));
  }
  trackedMethods.get(annotation.key()).one.decrementAndGet();
}","private void trackMethod(Method method){
  Tracked annotation=method.getAnnotation(Tracked.class);
  if (annotation == null) {
    return;
  }
  trackedMethods.get(annotation.key()).one.decrementAndGet();
}",0.5395799676898223
187305,"@SuppressWarnings(""String_Node_Str"") public final <T>T _proxy(Class<?> clazz){
  return (T)Proxy.newProxyInstance(this.getClass().getClassLoader(),new Class[]{clazz},this);
}","@SuppressWarnings(""String_Node_Str"") public final <T>T _proxy(Class<?> clazz){
  registerNewTrackedMethods(clazz);
  return (T)Proxy.newProxyInstance(this.getClass().getClassLoader(),new Class[]{clazz},this);
}",0.90625
187306,"private Object invokeAndReturn(Method method,Object[] originalArgs,Object proxy,MethodInfo info){
  final int depth=info.chain().length;
  Object[] newArgs=new Object[originalArgs.length + depth];
  Class<?>[] originalTypes=method.getParameterTypes();
  Class[] newTypes=new Class[originalTypes.length + depth];
  for (int i=0; i < depth; ++i) {
    newArgs[originalArgs.length + i]=new ObjectWrapper();
    newTypes[originalTypes.length + i]=ObjectWrapper.class;
  }
  System.arraycopy(originalArgs,0,newArgs,0,originalArgs.length);
  System.arraycopy(originalTypes,0,newTypes,0,originalTypes.length);
  Method helperMethod;
  try {
    helperMethod=helper.getClass().getMethod(method.getName(),newTypes);
  }
 catch (  NoSuchMethodException ex) {
    throw new IllegalStateException(""String_Node_Str"",ex);
  }
  if (!helperMethod.isAccessible()) {
    helperMethod.setAccessible(true);
  }
  Object result;
  try {
    result=helperMethod.invoke(helper,newArgs);
  }
 catch (  IllegalAccessException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InvocationTargetException ex) {
    if (ex.getTargetException() instanceof RuntimeException) {
      throw (RuntimeException)ex.getTargetException();
    }
 else {
      throw new RuntimeException(ex.getTargetException());
    }
  }
  Object _returnValue;
switch (info.type()) {
case 3:
    _returnValue=returnValue;
  break;
case 1:
if (depth > 0) {
  LateralHint hint=method.getAnnotation(LateralHint.class);
  if (hint == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  _returnValue=this._proxy(hint.next());
}
 else {
  _returnValue=this._proxy(method.getReturnType());
}
break;
case 0:
_returnValue=proxy;
break;
case 2:
if (helperMethod.getReturnType().equals(void.class)) {
_returnValue=returnValue;
}
 else {
_returnValue=result;
}
break;
default :
throw new IllegalStateException(""String_Node_Str"");
}
for (int i=depth - 1; i >= 0; --i) {
ObjectWrapper wrapper=(ObjectWrapper)newArgs[originalArgs.length + i];
if (wrapper.get() == null) {
throw new IllegalStateException(""String_Node_Str"" + method.getName());
}
BlockInvocationHandler handler=new BlockInvocationHandler(wrapper.get(),_returnValue);
_returnValue=handler._proxy(info.chain()[i]);
}
return _returnValue;
}","private Object invokeAndReturn(Method method,Object[] originalArgs,Object proxy,MethodInfo info){
  final int depth=info.chain().length;
  Object[] newArgs=new Object[originalArgs.length + depth];
  Class<?>[] originalTypes=method.getParameterTypes();
  Class[] newTypes=new Class[originalTypes.length + depth];
  for (int i=0; i < depth; ++i) {
    newArgs[originalArgs.length + i]=new ObjectWrapper();
    newTypes[originalTypes.length + i]=ObjectWrapper.class;
  }
  System.arraycopy(originalArgs,0,newArgs,0,originalArgs.length);
  System.arraycopy(originalTypes,0,newTypes,0,originalTypes.length);
  Method helperMethod;
  try {
    helperMethod=helper.getClass().getMethod(method.getName(),newTypes);
  }
 catch (  NoSuchMethodException ex) {
    throw new IllegalStateException(""String_Node_Str"",ex);
  }
  if (!helperMethod.isAccessible()) {
    helperMethod.setAccessible(true);
  }
  Object result;
  try {
    result=helperMethod.invoke(helper,newArgs);
  }
 catch (  IllegalAccessException ex) {
    throw new IllegalStateException(ex);
  }
catch (  InvocationTargetException ex) {
    if (ex.getTargetException() instanceof RuntimeException) {
      throw (RuntimeException)ex.getTargetException();
    }
 else {
      throw new RuntimeException(ex.getTargetException());
    }
  }
  Object _returnValue=computeReturnValue(method,proxy,info,depth,helperMethod,result);
  for (int i=depth - 1; i >= 0; --i) {
    ObjectWrapper wrapper=(ObjectWrapper)newArgs[originalArgs.length + i];
    if (wrapper.get() == null) {
      throw new IllegalStateException(""String_Node_Str"" + method.getName());
    }
    BlockInvocationHandler handler=new BlockInvocationHandler(wrapper.get(),_returnValue);
    _returnValue=handler._proxy(info.chain()[i]);
  }
  return _returnValue;
}",0.8404650012367054
187307,"private boolean checkForBlocksWithNoEnd(StateClass state,final Map<StateClass,Boolean> seen){
  final ObjectWrapper<Boolean> terminal=new ObjectWrapper<Boolean>(false);
  final ObjectWrapper<Boolean> valid=new ObjectWrapper<Boolean>(false);
  for (  Transition transition : state.getTransitions()) {
    transition.accept(new TransitionVisitor.$(){
      public @Override void visit(      TerminalTransition transition){
        terminal.set(true);
      }
      public @Override void visit(      AscendingTransition transition){
        terminal.set(true);
      }
    }
);
    valid.set(valid.get() || terminal.get());
  }
  if (seen.containsKey(state)) {
    return seen.get(state);
  }
 else {
    seen.put(state,terminal.get());
  }
  for (  Transition transition : state.getTransitions()) {
    final TransitionType transitionType=transition.getType();
    transition.acceptForTraversal(new GenericVisitor<StateClass>(){
      public void visit(      StateClass next){
        boolean nextIsTerminal=checkForBlocksWithNoEnd(next,seen);
        if (transitionType != TransitionType.Recursive) {
          valid.set(valid.get() || nextIsTerminal);
        }
      }
    }
);
  }
  if (valid.get() != true) {
    throw new DescriptorBuilderException(""String_Node_Str"" + state.getName());
  }
  return terminal.get();
}","private boolean checkForBlocksWithNoEnd(StateClass state,final Map<StateClass,Boolean> seen){
  if (seen.containsKey(state)) {
    return seen.get(state);
  }
  final ObjectWrapper<Boolean> valid=new ObjectWrapper<Boolean>(false);
  final ObjectWrapper<Boolean> terminal=new ObjectWrapper<Boolean>(false);
  for (  Transition transition : state.getTransitions()) {
    transition.accept(new TransitionVisitor.$(){
      public @Override void visit(      TerminalTransition transition){
        terminal.set(true);
      }
      public @Override void visit(      AscendingTransition transition){
        terminal.set(true);
      }
    }
);
  }
  valid.set(valid.get() || terminal.get());
  seen.put(state,terminal.get());
  for (  Transition transition : state.getTransitions()) {
    final TransitionType transitionType=transition.getType();
    transition.acceptForTraversal(new GenericVisitor<StateClass>(){
      public void visit(      StateClass next){
        boolean nextIsTerminal=checkForBlocksWithNoEnd(next,seen);
        if (transitionType != TransitionType.Recursive) {
          valid.set(valid.get() || nextIsTerminal);
        }
      }
    }
);
  }
  boolean hasImplicitTerminals=state.getBaseState() != null ? state.getBaseState().hasImplicitTerminal() : state.hasImplicitTerminal();
  valid.set(valid.get() || hasImplicitTerminals);
  if (!valid.get().equals(true)) {
    throw new DescriptorBuilderException(""String_Node_Str"" + state.getName());
  }
  return terminal.get();
}",0.8537970191625266
187308,"private Transition visitCandidateState(LateralTransition transition){
  StateClass owner=transition.getOwner();
  if (owner.getBaseState() != transition.getSibling()) {
    return null;
  }
  if (transition.info().getMaxOccurrences() != 1) {
    return null;
  }
  if (!transition.getSibling().getTransitions().isEmpty()) {
    return null;
  }
  Transition replacement;
  if (owner.isTopLevel()) {
    replacement=new TerminalTransition(Void.class);
  }
 else {
    replacement=new AscendingTransition();
  }
  replacement.setMethodInfo(transition.info().copy());
  replacement.getStateChain().addAll(transition.getStateChain());
  return replacement;
}","private Transition visitCandidateState(LateralTransition transition){
  StateClass owner=transition.getOwner();
  if (owner.getBaseState() != transition.getSibling()) {
    return null;
  }
  if (transition.info().getMaxOccurrences() != 1) {
    return null;
  }
  if (!transition.getSibling().getTransitions().isEmpty()) {
    return null;
  }
  Transition replacement=new AscendingTransition();
  replacement.setMethodInfo(transition.info().copy());
  replacement.getStateChain().addAll(transition.getStateChain());
  return replacement;
}",0.8635983263598327
187309,"@Override public void visit(StateClass state){
  if (seen.contains(state)) {
    return;
  }
 else {
    seen.add(state);
  }
  Map<Transition,Transition> replacements=new HashMap<Transition,Transition>();
  for (  Transition transition : state.getTransitions()) {
    if (LateralTransition.class.isAssignableFrom(transition.getClass())) {
      Transition replacement=visitCandidateState((LateralTransition)transition);
      if (replacement != null) {
        replacements.put(transition,replacement);
      }
    }
    transition.acceptForTraversal(this);
  }
  for (  Map.Entry<Transition,Transition> entry : replacements.entrySet()) {
    state.replaceTransition(entry.getKey(),entry.getValue());
  }
}","@Override public void visit(StateClass state){
  if (seen.contains(state)) {
    return;
  }
 else {
    seen.add(state);
  }
  Map<Transition,Transition> replacements=new HashMap<Transition,Transition>();
  for (  Transition transition : state.getTransitions()) {
    if (LateralTransition.class.isAssignableFrom(transition.getClass())) {
      Transition replacement=visitCandidateState((LateralTransition)transition);
      if (replacement != null) {
        replacements.put(transition,replacement);
        state.getBaseState().setImplicitTerminal();
      }
    }
    transition.acceptForTraversal(this);
  }
  for (  Map.Entry<Transition,Transition> entry : replacements.entrySet()) {
    state.replaceTransition(entry.getKey(),entry.getValue());
  }
}",0.9645293315143249
187310,"private StateClass convertBlock(BlockOutline block){
  StateClass topLevel;
  String blockName=block.getName();
  Set<MethodOutline> requiredMethods=block.getRequiredMethods();
  Set<MethodOutline> dynamicMethods=block.getDynamicMethods();
  Set<MethodOutline> triggeredMethods=block.getTriggeredMethods();
  if (blocks.containsKey(block.getName())) {
    return blocks.get(block.getName());
  }
 else   if (block instanceof BlockReference) {
    BlockOutline resolved=referenceMap.get(block);
    return convertBlock(resolved);
  }
 else {
    topLevel=getStateFromBlockAndMethods(block,dynamicMethods);
    topLevel.setIsTopLevel();
    blocks.put(blockName,topLevel);
  }
  StateClass baseState=getStateFromBlockAndMethods(block,requiredMethods);
  baseState.setName(blockName);
  for (  MethodOutline requiredMethod : requiredMethods) {
    addTransition(baseState,block,requiredMethods,null,requiredMethod);
  }
  Set<Set<MethodOutline>> workingSet=makeCombinations(dynamicMethods);
  while (!workingSet.isEmpty()) {
    Set<Set<MethodOutline>> nextSet=new HashSet<Set<MethodOutline>>();
    for (    Set<MethodOutline> combination : workingSet) {
      StateClass theState=getStateFromBlockAndMethods(block,combination);
      if (theState != baseState) {
        theState.setBaseState(baseState);
      }
 else {
        continue;
      }
      for (      MethodOutline dynamicMethod : combination) {
        Set<MethodOutline> next;
        next=addTransition(theState,block,combination,triggeredMethods,dynamicMethod);
        if (next != null) {
          nextSet.add(next);
        }
      }
    }
    workingSet=nextSet;
  }
  for (  BlockOutline child : block.getBlocks()) {
    StateClass childState=convertBlock(child);
    childState.setParentState(topLevel);
  }
  return topLevel;
}","private StateClass convertBlock(BlockOutline block){
  StateClass topLevel;
  String blockName=block.getName();
  Set<MethodOutline> requiredMethods=block.getRequiredMethods();
  Set<MethodOutline> dynamicMethods=block.getDynamicMethods();
  Set<MethodOutline> triggeredMethods=block.getTriggeredMethods();
  if (blocks.containsKey(block.getName())) {
    return blocks.get(block.getName());
  }
 else   if (block instanceof BlockReference) {
    BlockOutline resolved=referenceMap.get(block);
    return convertBlock(resolved);
  }
 else {
    topLevel=getStateFromBlockAndMethods(block,dynamicMethods);
    topLevel.setIsTopLevel();
    blocks.put(blockName,topLevel);
  }
  StateClass baseState=getStateFromBlockAndMethods(block,requiredMethods);
  baseState.setName(blockName);
  for (  MethodOutline requiredMethod : requiredMethods) {
    addTransition(baseState,block,requiredMethods,null,requiredMethod);
  }
  Set<Set<MethodOutline>> workingSet=makeCombinations(dynamicMethods);
  Set<StateClass> seen=Collections.newSetFromMap(new IdentityHashMap<StateClass,Boolean>());
  while (!workingSet.isEmpty()) {
    Set<Set<MethodOutline>> nextSet=new HashSet<Set<MethodOutline>>();
    for (    Set<MethodOutline> combination : workingSet) {
      StateClass theState=getStateFromBlockAndMethods(block,combination);
      if (seen.contains(theState)) {
        continue;
      }
 else {
        seen.add(theState);
      }
      if (theState != baseState) {
        theState.setBaseState(baseState);
      }
 else {
        continue;
      }
      for (      MethodOutline dynamicMethod : combination) {
        Set<MethodOutline> next;
        next=addTransition(theState,block,combination,triggeredMethods,dynamicMethod);
        if (next != null) {
          nextSet.add(next);
        }
      }
    }
    workingSet=nextSet;
  }
  for (  BlockOutline child : block.getBlocks()) {
    StateClass childState=convertBlock(child);
    childState.setParentState(topLevel);
  }
  return topLevel;
}",0.9473684210526316
187311,"public Set<MethodOutline> getAllMethods(){
  return new HashSet<MethodOutline>(methods);
}","public Set<MethodOutline> getAllMethods(){
  return methods;
}",0.8157894736842105
187312,"private static void copyFile(File sourceFile,File destFile){
  FileChannel source=null;
  FileChannel destination=null;
  try {
    source=new FileInputStream(sourceFile).getChannel();
    destination=new FileOutputStream(destFile).getChannel();
    destination.transferFrom(source,0,source.size());
  }
 catch (  Exception ex) {
    throw new DescriptorBuilderException(""String_Node_Str"",ex);
  }
 finally {
    if (source != null) {
      try {
        source.close();
      }
 catch (      Exception ex) {
      }
    }
    if (destination != null) {
      try {
        destination.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}","private static void copyFile(InputStream sourceFile,File destFile){
  FileOutputStream destination=null;
  try {
    String data=new Scanner(sourceFile).useDelimiter(""String_Node_Str"").next();
    destination=new FileOutputStream(destFile);
    destination.write(data.getBytes());
  }
 catch (  Exception ex) {
    throw new DescriptorBuilderException(""String_Node_Str"",ex);
  }
 finally {
    if (destination != null) {
      try {
        destination.close();
      }
 catch (      Exception ex) {
      }
    }
  }
}",0.3774551665243382
187313,"private static File getResourceFile(String name){
  URL url=CodeWriter.class.getClassLoader().getResource(name);
  File f;
  if (url == null) {
    throw new DescriptorBuilderException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  try {
    f=new File(url.toURI());
  }
 catch (  URISyntaxException ex) {
    throw new DescriptorBuilderException(ex);
  }
  if (!f.exists()) {
    throw new DescriptorBuilderException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return f;
}","private static InputStream getResourceFile(String name){
  InputStream stream=CodeWriter.class.getClassLoader().getResourceAsStream(name);
  if (stream == null) {
    throw new DescriptorBuilderException(""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return stream;
}",0.5308804204993429
187314,"/** 
 * Perform a search on the IMDB
 * @param query
 * @return
 */
public Map<String,List<SearchObject>> getSearch(String query){
  Map<String,String> args=new HashMap<String,String>();
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    encodedQuery=query;
  }
  args.put(""String_Node_Str"",encodedQuery);
  args.put(""String_Node_Str"",""String_Node_Str"");
  WrapperSearch wrapper=ApiBuilder.getSearchWrapper(""String_Node_Str"",args);
  if (wrapper == null) {
    return Collections.emptyMap();
  }
 else {
    return wrapper.getSearchResults();
  }
}","/** 
 * Perform a search on the IMDB
 * @param query
 * @return
 */
public Map<String,List<SearchObject>> getSearch(String query){
  Map<String,String> args=new HashMap<String,String>();
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    LOG.trace(""String_Node_Str"",query);
    encodedQuery=query;
  }
  args.put(""String_Node_Str"",encodedQuery);
  args.put(""String_Node_Str"",""String_Node_Str"");
  WrapperSearch wrapper=ApiBuilder.getSearchWrapper(""String_Node_Str"",args);
  if (wrapper == null) {
    return Collections.emptyMap();
  }
 else {
    return wrapper.getSearchResults();
  }
}",0.9697885196374624
187315,"/** 
 * Get the Chart Movie Meter
 * @return
 */
public List<ImdbChartMoviemeter> getChartMoviemeter(){
  WrapperChartMoviemeter wrapper=ApiBuilder.getWrapper(WrapperChartMoviemeter.class,""String_Node_Str"",Collections.EMPTY_MAP);
  if (wrapper == null) {
    return Collections.emptyList();
  }
 else {
    return wrapper.getData().getChartMoviemeter();
  }
}","/** 
 * Get the Chart Movie Meter
 * @return
 */
public List<ImdbChartMoviemeter> getChartMoviemeter(){
  WrapperChartMoviemeter wrapper=ApiBuilder.getWrapper(WrapperChartMoviemeter.class,""String_Node_Str"",Collections.<String,String>emptyMap());
  if (wrapper == null) {
    return Collections.emptyList();
  }
 else {
    return wrapper.getData().getChartMoviemeter();
  }
}",0.9536784741144414
187316,"/** 
 * Get the Chart Star Meter
 * @return
 */
public List<ImdbChartStarmeter> getChartStarmeter(){
  WrapperChartStarmeter wrapper=ApiBuilder.getWrapper(WrapperChartStarmeter.class,""String_Node_Str"",Collections.EMPTY_MAP);
  if (wrapper == null) {
    return Collections.emptyList();
  }
 else {
    return wrapper.getData().getChartStarmeter();
  }
}","/** 
 * Get the Chart Star Meter
 * @return
 */
public List<ImdbChartStarmeter> getChartStarmeter(){
  WrapperChartStarmeter wrapper=ApiBuilder.getWrapper(WrapperChartStarmeter.class,""String_Node_Str"",Collections.<String,String>emptyMap());
  if (wrapper == null) {
    return Collections.emptyList();
  }
 else {
    return wrapper.getData().getChartStarmeter();
  }
}",0.9556786703601108
187317,"/** 
 * Get the latest box office information
 * @return
 */
public List<ImdbBoxOffice> getBoxOffice(){
  WrapperBoxOffice wrapper=ApiBuilder.getWrapper(WrapperBoxOffice.class,""String_Node_Str"",Collections.EMPTY_MAP);
  if (wrapper != null && wrapper.getData().getBoxOfficeList() != null) {
    return wrapper.getData().getBoxOfficeList().getBoxOffice();
  }
  return Collections.emptyList();
}","/** 
 * Get the latest box office information
 * @return
 */
public List<ImdbBoxOffice> getBoxOffice(){
  WrapperBoxOffice wrapper=ApiBuilder.getWrapper(WrapperBoxOffice.class,""String_Node_Str"",Collections.<String,String>emptyMap());
  if (wrapper != null && wrapper.getData().getBoxOfficeList() != null) {
    return wrapper.getData().getBoxOfficeList().getBoxOffice();
  }
  return Collections.emptyList();
}",0.9601990049751244
187318,"public static ResponseDetail getResponse(String function){
  return getResponse(function,Collections.EMPTY_MAP);
}","public static ResponseDetail getResponse(String function){
  return getResponse(function,Collections.<String,String>emptyMap());
}",0.8688524590163934
187319,"public static URL buildUrl(String function,Map<String,String> arguments){
  StringBuilder sbURL=new StringBuilder(BASE_URL);
  sbURL.append(function);
  sbURL.append(""String_Node_Str"").append(API_VERSION);
  sbURL.append(""String_Node_Str"").append(APP_ID);
  sbURL.append(""String_Node_Str"").append(imdbLocale);
  sbURL.append(""String_Node_Str"").append(System.currentTimeMillis() / 1000);
  for (  Map.Entry<String,String> argEntry : arguments.entrySet()) {
    sbURL.append(""String_Node_Str"").append(argEntry.getKey());
    sbURL.append(""String_Node_Str"").append(argEntry.getValue());
  }
  sbURL.append(""String_Node_Str"").append(SIG);
  LOG.trace(""String_Node_Str"",sbURL.toString());
  try {
    return new URL(sbURL.toString());
  }
 catch (  MalformedURLException ex) {
    LOG.trace(""String_Node_Str"",ex.getMessage());
    return null;
  }
}","public static URL buildUrl(String function,Map<String,String> arguments){
  StringBuilder sbURL=new StringBuilder(BASE_URL);
  sbURL.append(function);
  sbURL.append(""String_Node_Str"").append(API_VERSION);
  sbURL.append(""String_Node_Str"").append(APP_ID);
  sbURL.append(""String_Node_Str"").append(imdbLocale);
  sbURL.append(""String_Node_Str"").append(System.currentTimeMillis() / MILLIS_PER_SECOND);
  for (  Map.Entry<String,String> argEntry : arguments.entrySet()) {
    sbURL.append(""String_Node_Str"").append(argEntry.getKey());
    sbURL.append(""String_Node_Str"").append(argEntry.getValue());
  }
  sbURL.append(""String_Node_Str"").append(SIG);
  LOG.trace(""String_Node_Str"",sbURL.toString());
  try {
    return new URL(sbURL.toString());
  }
 catch (  MalformedURLException ex) {
    LOG.trace(""String_Node_Str"",ex.getMessage());
    return null;
  }
}",0.9876543209876544
187320,"public static <T>T getWrapper(Class<T> clazz,String function,Map<String,String> args){
  try {
    String webPage=httpClient.requestContent(buildUrl(function,args),Charset.forName(DEFAULT_CHARSET));
    Object response=MAPPER.readValue(webPage,clazz);
    return clazz.cast(response);
  }
 catch (  JsonParseException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage());
  }
catch (  JsonMappingException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage());
  }
catch (  IOException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage());
  }
  return null;
}","public static <T>T getWrapper(Class<T> clazz,String function,Map<String,String> args){
  try {
    String webPage=httpClient.requestContent(buildUrl(function,args),Charset.forName(DEFAULT_CHARSET));
    Object response=MAPPER.readValue(webPage,clazz);
    return clazz.cast(response);
  }
 catch (  JsonParseException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage(),ex);
  }
catch (  JsonMappingException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage(),ex);
  }
catch (  IOException ex) {
    LOG.warn(""String_Node_Str"",ex.getMessage(),ex);
  }
  return null;
}",0.9920564872021184
187321,"public static Map<String,List<SearchObject>> getSearch(String query){
  Map<String,String> args=new HashMap<String,String>();
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    encodedQuery=query;
  }
  args.put(""String_Node_Str"",encodedQuery);
  WrapperSearch wrapper=ApiBuilder.getSearchWrapper(""String_Node_Str"",args);
  if (wrapper == null) {
    return null;
  }
 else {
    return wrapper.getSearchResults();
  }
}","public static Map<String,List<SearchObject>> getSearch(String query){
  Map<String,String> args=new HashMap<String,String>();
  String encodedQuery;
  try {
    encodedQuery=URLEncoder.encode(query,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ex) {
    encodedQuery=query;
  }
  args.put(""String_Node_Str"",encodedQuery);
  args.put(""String_Node_Str"",""String_Node_Str"");
  WrapperSearch wrapper=ApiBuilder.getSearchWrapper(""String_Node_Str"",args);
  if (wrapper == null) {
    return null;
  }
 else {
    return wrapper.getSearchResults();
  }
}",0.9545032497678736
187322,"/** 
 * {@inheritDoc}
 */
public void diff(TextNodeComparator leftComparator,TextNodeComparator rightComparator) throws SAXException {
  LCSSettings settings=new LCSSettings();
  settings.setUseGreedyMethod(false);
  RangeDifference[] differences=RangeDifferencer.findDifferences(settings,leftComparator,rightComparator);
  List<RangeDifference> pdifferences=preProcess(differences);
  int currentIndexLeft=0;
  int currentIndexRight=0;
  for (  RangeDifference d : pdifferences) {
    if (d.leftStart() > currentIndexLeft) {
      rightComparator.handlePossibleChangedPart(currentIndexLeft,d.leftStart(),currentIndexRight,d.rightStart(),leftComparator);
    }
    if (d.leftLength() > 0) {
      rightComparator.markAsDeleted(d.leftStart(),d.leftEnd(),leftComparator,d.rightStart());
    }
    rightComparator.markAsNew(d.rightStart(),d.rightEnd());
    currentIndexLeft=d.leftEnd();
    currentIndexRight=d.rightEnd();
  }
  if (currentIndexLeft < leftComparator.getRangeCount()) {
    rightComparator.handlePossibleChangedPart(currentIndexLeft,leftComparator.getRangeCount(),currentIndexRight,rightComparator.getRangeCount(),leftComparator);
  }
  rightComparator.expandWhiteSpace();
  output.generateOutput(rightComparator.getBodyNode());
}","/** 
 * {@inheritDoc}
 */
public void diff(TextNodeComparator leftComparator,TextNodeComparator rightComparator) throws SAXException {
  LCSSettings settings=new LCSSettings();
  settings.setUseGreedyMethod(false);
  RangeDifference[] differences=RangeDifferencer.findDifferences(settings,leftComparator,rightComparator);
  List<RangeDifference> pdifferences=preProcess(differences);
  int currentIndexLeft=0;
  int currentIndexRight=0;
  for (  RangeDifference d : pdifferences) {
    if (d.leftStart() > currentIndexLeft) {
      rightComparator.handlePossibleChangedPart(currentIndexLeft,d.leftStart(),currentIndexRight,d.rightStart(),leftComparator);
    }
    if (d.leftLength() > 0) {
      rightComparator.markAsDeleted(d.leftStart(),d.leftEnd(),leftComparator,d.rightStart(),d.rightEnd());
    }
    rightComparator.markAsNew(d.rightStart(),d.rightEnd());
    currentIndexLeft=d.leftEnd();
    currentIndexRight=d.rightEnd();
  }
  if (currentIndexLeft < leftComparator.getRangeCount()) {
    rightComparator.handlePossibleChangedPart(currentIndexLeft,leftComparator.getRangeCount(),currentIndexRight,rightComparator.getRangeCount(),leftComparator);
  }
  rightComparator.expandWhiteSpace();
  output.generateOutput(rightComparator.getBodyNode());
}",0.9948020791683326
187323,"/** 
 * Marks the given range as deleted. In the output, the range will be formatted as ""removed"".
 * @param start
 * @param end
 * @param oldComp
 * @param before
 */
public void markAsDeleted(int start,int end,TextNodeComparator oldComp,int before){
  markAsDeleted(start,end,oldComp,before,ModificationType.REMOVED);
}","/** 
 * Marks the given range as deleted. In the output, the range will be formatted as ""removed"".
 * @param start
 * @param end
 * @param oldComp
 * @param before
 */
public void markAsDeleted(int start,int end,TextNodeComparator oldComp,int before,int after){
  markAsDeleted(start,end,oldComp,before,after,ModificationType.REMOVED);
}",0.9756838905775076
187324,"@Override public NATFeatureRealization executeTest(){
  NATFeatureRealization result=NATFeatureRealization.DONT_CARE;
  Socket toStunServer=null;
  try {
    toStunServer=this.createConnectedSocket(this.primaryStunServerAddress);
    final Message responseTestI=this.executeTestI(toStunServer);
    if (responseTestI.hasAttribute(OtherAddress.class)) {
      try {
        final Message responseTestII=this.executeTestII(toStunServer);
        if (responseTestII.hasAttribute(XorMappedAddress.class)) {
          result=NATFeatureRealization.ENDPOINT_INDEPENDENT;
        }
      }
 catch (      final SocketTimeoutException eII) {
        try {
          final Message responseTestIII=this.executeTestIII(toStunServer);
          if (responseTestIII.hasAttribute(XorMappedAddress.class)) {
            result=NATFeatureRealization.ADDRESS_DEPENDENT;
          }
        }
 catch (        final SocketTimeoutException eIII) {
          try {
            final Message reponseIV=this.executeTestForConnectionDependent(toStunServer);
            if (reponseIV.hasAttribute(XorMappedAddress.class)) {
              result=NATFeatureRealization.ADDRESS_AND_PORT_DEPENDENT;
            }
          }
 catch (          final SocketTimeoutException eIV) {
            result=NATFeatureRealization.CONNECTION_DEPENDENT;
          }
        }
      }
    }
  }
 catch (  final Exception e) {
    this.logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if (null != toStunServer && toStunServer.isConnected()) {
        toStunServer.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return result;
}","@Override public NATFeatureRealization executeTest(){
  NATFeatureRealization result=NATFeatureRealization.DONT_CARE;
  Socket toStunServer=null;
  try {
    toStunServer=this.createConnectedSocket(this.primaryStunServerAddress);
    final Message responseTestI=this.executeTestI(toStunServer);
    if (responseTestI.hasAttribute(OtherAddress.class)) {
      try {
        final Message responseTestII=this.executeTestII(toStunServer);
        if (responseTestII.hasAttribute(XorMappedAddress.class)) {
          result=NATFeatureRealization.ENDPOINT_INDEPENDENT;
        }
      }
 catch (      final SocketTimeoutException eII) {
        try {
          final Message responseTestIII=this.executeTestIII(toStunServer);
          if (responseTestIII.hasAttribute(XorMappedAddress.class)) {
            result=NATFeatureRealization.ADDRESS_DEPENDENT;
          }
        }
 catch (        final SocketTimeoutException eIII) {
          try {
            final Message reponseIV=this.executeTestForConnectionDependent(toStunServer);
            if (reponseIV.hasAttribute(XorMappedAddress.class)) {
              result=NATFeatureRealization.ADDRESS_AND_PORT_DEPENDENT;
            }
          }
 catch (          final SocketTimeoutException eIV) {
            result=NATFeatureRealization.CONNECTION_DEPENDENT;
          }
        }
      }
    }
  }
 catch (  final Exception e) {
    this.logger.error(""String_Node_Str"",e);
  }
 finally {
    try {
      if ((null != toStunServer) && toStunServer.isConnected()) {
        toStunServer.close();
      }
    }
 catch (    IOException e) {
    }
  }
  return result;
}",0.99938195302843
187325,"@Override public List<NATTraversalTechnique> getAllFallbackTechniques(){
  List<NATTraversalTechnique> result=new ArrayList<NATTraversalTechnique>();
  List<NATTraversalTechnique> all=this.getAllSupportedNATTraversalTechniques();
  for (  NATTraversalTechnique natTraversalTechnique : all) {
    if (natTraversalTechnique.getMetaData().getTraversaledNATSituations().size() == this.nubmerOfPossibleNatSituation)     result.add(natTraversalTechnique.copy());
  }
  return Collections.unmodifiableList(result);
}","@Override public List<NATTraversalTechnique> getAllFallbackTechniques(){
  List<NATTraversalTechnique> result=new ArrayList<NATTraversalTechnique>();
  List<NATTraversalTechnique> all=this.getAllSupportedNATTraversalTechniques();
  for (  NATTraversalTechnique natTraversalTechnique : all) {
    if (natTraversalTechnique.getMetaData().getTraversaledNATSituations().size() == this.nubmerOfPossibleNatSituation) {
      result.add(natTraversalTechnique.copy());
    }
  }
  return Collections.unmodifiableList(result);
}",0.990272373540856
187326,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + connectionSetupTime;
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + timoutInSeconds;
  result=prime * result + ((version == null) ? 0 : version.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=(prime * result) + connectionSetupTime;
  result=(prime * result) + ((name == null) ? 0 : name.hashCode());
  result=(prime * result) + timoutInSeconds;
  result=(prime * result) + ((version == null) ? 0 : version.hashCode());
  return result;
}",0.9875389408099688
187327,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  DirectconnectionMetaData other=(DirectconnectionMetaData)obj;
  if (connectionSetupTime != other.connectionSetupTime)   return false;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  if (timoutInSeconds != other.timoutInSeconds)   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  DirectconnectionMetaData other=(DirectconnectionMetaData)obj;
  if (connectionSetupTime != other.connectionSetupTime) {
    return false;
  }
  if (name == null) {
    if (other.name != null) {
      return false;
    }
  }
 else   if (!name.equals(other.name)) {
    return false;
  }
  if (timoutInSeconds != other.timoutInSeconds) {
    return false;
  }
  if (version == null) {
    if (other.version != null) {
      return false;
    }
  }
 else   if (!version.equals(other.version)) {
    return false;
  }
  return true;
}",0.7178362573099415
187328,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + maxConnectionSetupTime;
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + timeoutInSeconds;
  result=prime * result + ((version == null) ? 0 : version.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=(prime * result) + maxConnectionSetupTime;
  result=(prime * result) + ((name == null) ? 0 : name.hashCode());
  result=(prime * result) + timeoutInSeconds;
  result=(prime * result) + ((version == null) ? 0 : version.hashCode());
  return result;
}",0.9876923076923076
187329,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  HolePunchingMetaData other=(HolePunchingMetaData)obj;
  if (maxConnectionSetupTime != other.maxConnectionSetupTime)   return false;
  if (name == null) {
    if (other.name != null)     return false;
  }
 else   if (!name.equals(other.name))   return false;
  if (timeoutInSeconds != other.timeoutInSeconds)   return false;
  if (version == null) {
    if (other.version != null)     return false;
  }
 else   if (!version.equals(other.version))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  HolePunchingMetaData other=(HolePunchingMetaData)obj;
  if (maxConnectionSetupTime != other.maxConnectionSetupTime) {
    return false;
  }
  if (name == null) {
    if (other.name != null) {
      return false;
    }
  }
 else   if (!name.equals(other.name)) {
    return false;
  }
  if (timeoutInSeconds != other.timeoutInSeconds) {
    return false;
  }
  if (version == null) {
    if (other.version != null) {
      return false;
    }
  }
 else   if (!version.equals(other.version)) {
    return false;
  }
  return true;
}",0.7178362573099415
187330,"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((comparator == null) ? 0 : comparator.hashCode());
  result=prime * result + ((decisionTree == null) ? 0 : decisionTree.hashCode());
  result=prime * result + ((registry == null) ? 0 : registry.hashCode());
  return result;
}","@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=(prime * result) + ((comparator == null) ? 0 : comparator.hashCode());
  result=(prime * result) + ((decisionTree == null) ? 0 : decisionTree.hashCode());
  result=(prime * result) + ((registry == null) ? 0 : registry.hashCode());
  return result;
}",0.99079754601227
187331,"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  ConnectionSetupTimeSelection other=(ConnectionSetupTimeSelection)obj;
  if (comparator == null) {
    if (other.comparator != null)     return false;
  }
 else   if (!comparator.equals(other.comparator))   return false;
  if (decisionTree == null) {
    if (other.decisionTree != null)     return false;
  }
 else   if (!decisionTree.equals(other.decisionTree))   return false;
  if (registry == null) {
    if (other.registry != null)     return false;
  }
 else   if (!registry.equals(other.registry))   return false;
  return true;
}","@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  ConnectionSetupTimeSelection other=(ConnectionSetupTimeSelection)obj;
  if (comparator == null) {
    if (other.comparator != null) {
      return false;
    }
  }
 else   if (!comparator.equals(other.comparator)) {
    return false;
  }
  if (decisionTree == null) {
    if (other.decisionTree != null) {
      return false;
    }
  }
 else   if (!decisionTree.equals(other.decisionTree)) {
    return false;
  }
  if (registry == null) {
    if (other.registry != null) {
      return false;
    }
  }
 else   if (!registry.equals(other.registry)) {
    return false;
  }
  return true;
}",0.7362045760430687
187332,"/** 
 * Runs in a loop until the interrupt status of this thread is set or an  {@link IOException} occurs. Waits for a new connection via the server socketand then executes a task to handle it via the given executor. The task is created by the  {@link SocketTaskFactory} member and the accepted socketgets handed over to it. Before the thread terminates the given executor is shutdown. 
 */
@Override public final void run(){
  try {
    while (!isInterrupted()) {
      Socket s=server.accept();
      logger.info(""String_Node_Str"",s);
      executor.execute(tasks.getTask(s));
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
 finally {
    logger.info(""String_Node_Str"",isInterrupted());
    executor.shutdownNow();
  }
}","/** 
 * Runs in a loop until the interrupt status of this thread is set or an  {@link IOException} occurs. Waits for a new connection via the server socketand then executes a task to handle it via the given executor. The task is created by the  {@link SocketTaskFactory} member and the accepted socketgets handed over to it. Before the thread terminates the given executor is shutdown.
 */
@Override public final void run(){
  try {
    while (!isInterrupted()) {
      Socket s=server.accept();
      logger.info(""String_Node_Str"",s);
      executor.execute(tasks.getTask(s));
    }
  }
 catch (  IOException e) {
    logger.error(""String_Node_Str"",e.getMessage());
  }
 finally {
    logger.info(""String_Node_Str"",isInterrupted());
    executor.shutdownNow();
  }
}",0.9993485342019544
187333,"/** 
 * Test method for  {@link FilePropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}.
 */
@Test public final void testReadArguments(){
  FilePropertyReader filePropReader=new FilePropertyReader();
  try {
    filePropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
    fail(""String_Node_Str"");
  }
 catch (  IllegalArgumentException e) {
  }
}","/** 
 * Test method for  {@link FilePropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}.
 */
@Test public final void testReadArguments(){
  FilePropertyReader filePropReader=new FilePropertyReader();
  try {
    filePropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
  }
 catch (  IllegalArgumentException e) {
  }
}",0.96
187334,"/** 
 * Test method for  {@link SystemPropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}with no system properties.
 */
@Test public final void testReadArguments1(){
  SystemPropertyReader sysPropReader=new SystemPropertyReader();
  sysPropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
}","/** 
 * Test method for  {@link SystemPropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}with no system properties.
 */
@Test public final void testReadArguments1(){
  List<String> emptyList=new ArrayList<String>();
  emptyList.add(""String_Node_Str"");
  SystemPropertyReader sysPropReader=new SystemPropertyReader();
  sysPropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
  assertEquals(emptyList,relayArgs);
}",0.8387942332896461
187335,"/** 
 * Test method for  {@link SystemPropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}with all system properties.
 */
@Test public final void testReadArguments2(){
  Properties props=new Properties();
  props.setProperty(AbstractReader.STUN_FIRST_IP,""String_Node_Str"");
  props.setProperty(AbstractReader.STUN_SECOND_IP,""String_Node_Str"");
  props.setProperty(AbstractReader.RELAY_PORT,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_PORT,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_ITERATION,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_LIFETIME,""String_Node_Str"");
  System.setProperties(props);
  SystemPropertyReader sysPropReader=new SystemPropertyReader();
  sysPropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
}","/** 
 * Test method for  {@link SystemPropertyReader#readArguments(java.util.List,java.util.List,java.util.List)}with all system properties.
 */
@Test public final void testReadArguments2(){
  List<String> relayReference=new ArrayList<String>();
  relayReference.add(""String_Node_Str"");
  Properties props=new Properties();
  props.setProperty(AbstractReader.STUN_FIRST_IP,""String_Node_Str"");
  props.setProperty(AbstractReader.STUN_SECOND_IP,""String_Node_Str"");
  props.setProperty(AbstractReader.RELAY_PORT,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_PORT,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_ITERATION,""String_Node_Str"");
  props.setProperty(AbstractReader.MEDIATOR_LIFETIME,""String_Node_Str"");
  System.setProperties(props);
  SystemPropertyReader sysPropReader=new SystemPropertyReader();
  sysPropReader.readArguments(stunArgs,relayArgs,mediatorArgs);
  System.clearProperty(AbstractReader.STUN_FIRST_IP);
  System.clearProperty(AbstractReader.STUN_SECOND_IP);
  System.clearProperty(AbstractReader.RELAY_PORT);
  System.clearProperty(AbstractReader.MEDIATOR_PORT);
  System.clearProperty(AbstractReader.MEDIATOR_ITERATION);
  System.clearProperty(AbstractReader.MEDIATOR_LIFETIME);
  assertEquals(relayReference,relayArgs);
}",0.7601723312589755
187336,"@Override protected void dispatchDraw(Canvas canvas){
  if (showcaseX < 0 || showcaseY < 0 || isRedundant) {
    super.dispatchDraw(canvas);
    return;
  }
  boolean recalculatedCling=mShowcaseDrawer.calculateShowcaseRect(showcaseX,showcaseY);
  boolean recalculateText=recalculatedCling || mAlteredText;
  mAlteredText=false;
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB && !mHasNoTarget) {
    Path path=new Path();
    canvas.clipPath(path,Op.DIFFERENCE);
  }
  canvas.drawColor(mBackgroundColor);
  if (!mHasNoTarget) {
    mShowcaseDrawer.drawShowcase(canvas,showcaseX,showcaseY,scaleMultiplier,showcaseRadius);
  }
  if (recalculateText) {
    mTextDrawer.calculateTextPosition(canvas.getWidth(),canvas.getHeight(),this);
  }
  mTextDrawer.draw(canvas,recalculateText);
  super.dispatchDraw(canvas);
}","@Override protected void dispatchDraw(Canvas canvas){
  if (showcaseX < 0 || showcaseY < 0 || isRedundant) {
    super.dispatchDraw(canvas);
    return;
  }
  boolean recalculatedCling=mShowcaseDrawer.calculateShowcaseRect(showcaseX,showcaseY);
  boolean recalculateText=recalculatedCling || mAlteredText;
  mAlteredText=false;
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB && !mHasNoTarget) {
    Path path=new Path();
    if (scaleMultiplier > 0f) {
      path.addCircle(showcaseX,showcaseY,showcaseRadius,Path.Direction.CW);
    }
    canvas.clipPath(path,Op.DIFFERENCE);
  }
  canvas.drawColor(mBackgroundColor);
  if (!mHasNoTarget) {
    mShowcaseDrawer.drawShowcase(canvas,showcaseX,showcaseY,scaleMultiplier,showcaseRadius);
  }
  if (recalculateText) {
    mTextDrawer.calculateTextPosition(canvas.getWidth(),canvas.getHeight(),this);
  }
  mTextDrawer.draw(canvas,recalculateText);
  super.dispatchDraw(canvas);
}",0.9353007945516458
187337,"public void getEULA(){
  PackageInfo versionInfo=getPackageInfo();
  final String eulaKey=""String_Node_Str"" + versionInfo.versionCode;
  boolean hasBeenShown=sharedPrefs.getBoolean(eulaKey,false);
  if (hasBeenShown == false) {
    final TextView textBox=new TextView(this);
    String licenseMessage=this.getString(R.string.eula_message);
    final SpannableString license=new SpannableString(licenseMessage);
    Linkify.addLinks(license,Linkify.WEB_URLS);
    textBox.setText(license);
    int horDimen=Math.round(this.getResources().getDimension(R.dimen.activity_horizontal_margin));
    int verDimen=Math.round(this.getResources().getDimension(R.dimen.activity_vertical_margin));
    textBox.setPadding(horDimen,verDimen,horDimen,verDimen);
    textBox.setMovementMethod(LinkMovementMethod.getInstance());
    textBox.setTextSize(18);
    textBox.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    String title=this.getString(R.string.eula_title);
    AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(title).setCancelable(true).setView(textBox).setPositiveButton(R.string.accept,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        SharedPreferences.Editor editor=sharedPrefs.edit();
        editor.putBoolean(eulaKey,true);
        editor.commit();
        displayIntro();
        checkDefault();
      }
    }
).setOnCancelListener(new OnCancelListener(){
      @Override public void onCancel(      DialogInterface arg0){
        ConversationView.this.finish();
      }
    }
).setNegativeButton(R.string.refuse,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ConversationView.this.finish();
      }
    }
);
    builder.create().show();
  }
 else {
  }
}","public void getEULA(){
  PackageInfo versionInfo=getPackageInfo();
  final String eulaKey=""String_Node_Str"" + versionInfo.versionCode;
  boolean hasBeenShown=sharedPrefs.getBoolean(eulaKey,false);
  if (hasBeenShown == false) {
    final TextView textBox=new TextView(this);
    String licenseMessage=this.getString(R.string.eula_message);
    final SpannableString license=new SpannableString(licenseMessage);
    Linkify.addLinks(license,Linkify.WEB_URLS);
    textBox.setText(license);
    int horDimen=Math.round(this.getResources().getDimension(R.dimen.activity_horizontal_margin));
    int verDimen=Math.round(this.getResources().getDimension(R.dimen.activity_vertical_margin));
    textBox.setPadding(horDimen,verDimen,horDimen,verDimen);
    textBox.setMovementMethod(LinkMovementMethod.getInstance());
    textBox.setTextSize(18);
    textBox.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    String title=this.getString(R.string.eula_title);
    AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(title).setCancelable(true).setView(textBox).setPositiveButton(R.string.accept,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        SharedPreferences.Editor editor=sharedPrefs.edit();
        editor.putBoolean(eulaKey,true);
        editor.commit();
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
          displayIntro();
        }
        checkDefault();
      }
    }
).setOnCancelListener(new OnCancelListener(){
      @Override public void onCancel(      DialogInterface arg0){
        ConversationView.this.finish();
      }
    }
).setNegativeButton(R.string.refuse,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ConversationView.this.finish();
      }
    }
);
    builder.create().show();
  }
 else {
  }
}",0.979484481851657
187338,"@TargetApi(android.os.Build.VERSION_CODES.KITKAT) public void checkDefault(){
  if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
    final String myPackageName=getPackageName();
    if (!Telephony.Sms.getDefaultSmsPackage(this).equals(myPackageName)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(R.string.kitkat_dialog_title).setCancelable(true).setMessage(R.string.kitkat_dialog_message).setPositiveButton(android.R.string.ok,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          Intent intent=new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
          intent.putExtra(Telephony.Sms.Intents.EXTRA_PACKAGE_NAME,myPackageName);
          startActivity(intent);
        }
      }
).setOnCancelListener(new OnCancelListener(){
        @Override public void onCancel(        DialogInterface arg0){
          ConversationView.this.finish();
        }
      }
).setNegativeButton(android.R.string.no,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ConversationView.this.finish();
        }
      }
).setNeutralButton(R.string.tell_me_more,new OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String url=""String_Node_Str"";
          Intent i=new Intent(Intent.ACTION_VIEW);
          i.setData(Uri.parse(url));
          ConversationView.this.startActivity(i);
        }
      }
);
      builder.create().show();
    }
  }
}","@TargetApi(Build.VERSION_CODES.KITKAT) public void checkDefault(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    final String myPackageName=getPackageName();
    if (!Telephony.Sms.getDefaultSmsPackage(this).equals(myPackageName)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(R.string.kitkat_dialog_title).setCancelable(true).setMessage(R.string.kitkat_dialog_message).setPositiveButton(android.R.string.ok,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          Intent intent=new Intent(Telephony.Sms.Intents.ACTION_CHANGE_DEFAULT);
          intent.putExtra(Telephony.Sms.Intents.EXTRA_PACKAGE_NAME,myPackageName);
          startActivity(intent);
        }
      }
).setOnCancelListener(new OnCancelListener(){
        @Override public void onCancel(        DialogInterface arg0){
          ConversationView.this.finish();
        }
      }
).setNegativeButton(android.R.string.no,new Dialog.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          ConversationView.this.finish();
        }
      }
).setNeutralButton(R.string.tell_me_more,new OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          String url=""String_Node_Str"";
          Intent i=new Intent(Intent.ACTION_VIEW);
          i.setData(Uri.parse(url));
          ConversationView.this.startActivity(i);
        }
      }
);
      builder.create().show();
    }
  }
}",0.9896584142901912
187339,"@Override protected void dispatchDraw(Canvas canvas){
  if (showcaseX < 0 || showcaseY < 0 || isRedundant) {
    super.dispatchDraw(canvas);
    return;
  }
  boolean recalculatedCling=mShowcaseDrawer.calculateShowcaseRect(showcaseX,showcaseY);
  boolean recalculateText=recalculatedCling || mAlteredText;
  mAlteredText=false;
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB && !mHasNoTarget) {
    Path path=new Path();
    path.addCircle(showcaseX,showcaseY,showcaseRadius,Path.Direction.CW);
    canvas.clipPath(path,Op.DIFFERENCE);
  }
  canvas.drawColor(mBackgroundColor);
  if (!mHasNoTarget) {
    mShowcaseDrawer.drawShowcase(canvas,showcaseX,showcaseY,scaleMultiplier,showcaseRadius);
  }
  if (recalculateText) {
    mTextDrawer.calculateTextPosition(canvas.getWidth(),canvas.getHeight(),this);
  }
  mTextDrawer.draw(canvas,recalculateText);
  super.dispatchDraw(canvas);
}","@Override protected void dispatchDraw(Canvas canvas){
  if (showcaseX < 0 || showcaseY < 0 || isRedundant) {
    super.dispatchDraw(canvas);
    return;
  }
  boolean recalculatedCling=mShowcaseDrawer.calculateShowcaseRect(showcaseX,showcaseY);
  boolean recalculateText=recalculatedCling || mAlteredText;
  mAlteredText=false;
  if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.HONEYCOMB && !mHasNoTarget) {
    Path path=new Path();
    canvas.clipPath(path,Op.DIFFERENCE);
  }
  canvas.drawColor(mBackgroundColor);
  if (!mHasNoTarget) {
    mShowcaseDrawer.drawShowcase(canvas,showcaseX,showcaseY,scaleMultiplier,showcaseRadius);
  }
  if (recalculateText) {
    mTextDrawer.calculateTextPosition(canvas.getWidth(),canvas.getHeight(),this);
  }
  mTextDrawer.draw(canvas,recalculateText);
  super.dispatchDraw(canvas);
}",0.957026713124274
187340,"/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((TelephonyManager)this.getSystemService(TELEPHONY_SERVICE)).listen(this.pSL,PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
  MessageService.mNotificationManager=(NotificationManager)this.getSystemService(NOTIFICATION_SERVICE);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  getEULA();
  messageSender.startThread(getApplicationContext());
  DBAccessor dba=new DBAccessor(this);
  SMSUtility.user=dba.getUserRow();
  if (SMSUtility.user == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    SMSUtility.user=new User();
    dba.setUser(SMSUtility.user);
  }
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPublicKey()));
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPrivateKey()));
  if (this.getIntent().hasExtra(MessageService.multipleNotificationIntent)) {
    this.getIntent().removeExtra(MessageService.multipleNotificationIntent);
  }
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    final Intent intent=new Intent(this,SendMessageActivity.class);
    intent.putExtra(ConversationView.MESSAGE_INTENT,ConversationView.MESSAGE_VIEW);
    intent.putExtra(selectedNumberIntent,this.getIntent().getStringExtra(MessageService.notificationIntent));
    this.getIntent().removeExtra(MessageService.notificationIntent);
    this.startActivity(intent);
  }
  ConversationView.messageViewActive=false;
  this.setContentView(R.layout.main);
  MessageReceiver.myActivityStarted=true;
  list=(ListView)this.findViewById(R.id.conversation_list);
  emptyList=(ListView)this.findViewById(R.id.empty);
  update=false;
  runThread=new ConversationLoader(this,update,handler);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> parent,    final View view,    final int position,    final long id){
      final Intent intent=new Intent(ConversationView.this.getBaseContext(),SendMessageActivity.class);
      intent.putExtra(ConversationView.MESSAGE_INTENT,ConversationView.MESSAGE_VIEW);
      intent.putExtra(ConversationView.selectedNumberIntent,msgList.get(position)[0]);
      ConversationView.this.startActivity(intent);
    }
  }
);
  emptyList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
switch (position) {
case ADD_CONTACT:
        AddContact.addContact=true;
      AddContact.editTc=null;
    ConversationView.this.startActivity(new Intent(ConversationView.this.getBaseContext(),AddContact.class));
  break;
case IMPORT_CONTACT:
ConversationView.this.startActivity(new Intent(ConversationView.this.getBaseContext(),ImportContacts.class));
break;
}
}
}
);
if (!(Walkthrough.hasShown(Step.INTRO,this) && Walkthrough.hasShown(Step.START_IMPORT,this))) {
Walkthrough.show(Step.INTRO,this);
Walkthrough.show(Step.START_IMPORT,this);
}
 else if (!Walkthrough.hasShown(Step.START_EXCHANGE,this)) {
Walkthrough.show(Step.START_EXCHANGE,this);
}
if ((!Walkthrough.hasShown(Step.SUCCESS,this)) && dba.anyTrusted()) {
Walkthrough.show(Step.SUCCESS,this);
Walkthrough.show(Step.CLOSE,this);
}
}","/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ((TelephonyManager)this.getSystemService(TELEPHONY_SERVICE)).listen(this.pSL,PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
  MessageService.mNotificationManager=(NotificationManager)this.getSystemService(NOTIFICATION_SERVICE);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  getEULA();
  messageSender.startThread(getApplicationContext());
  DBAccessor dba=new DBAccessor(this);
  SMSUtility.user=dba.getUserRow();
  if (SMSUtility.user == null) {
    Log.v(""String_Node_Str"",""String_Node_Str"");
    SMSUtility.user=new User();
    dba.setUser(SMSUtility.user);
  }
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPublicKey()));
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPrivateKey()));
  if (this.getIntent().hasExtra(MessageService.multipleNotificationIntent)) {
    this.getIntent().removeExtra(MessageService.multipleNotificationIntent);
  }
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    final Intent intent=new Intent(this,SendMessageActivity.class);
    intent.putExtra(ConversationView.MESSAGE_INTENT,ConversationView.MESSAGE_VIEW);
    intent.putExtra(selectedNumberIntent,this.getIntent().getStringExtra(MessageService.notificationIntent));
    this.getIntent().removeExtra(MessageService.notificationIntent);
    this.startActivity(intent);
  }
  ConversationView.messageViewActive=false;
  this.setContentView(R.layout.main);
  MessageReceiver.myActivityStarted=true;
  list=(ListView)this.findViewById(R.id.conversation_list);
  emptyList=(ListView)this.findViewById(R.id.empty);
  update=false;
  runThread=new ConversationLoader(this,update,handler);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> parent,    final View view,    final int position,    final long id){
      final Intent intent=new Intent(ConversationView.this.getBaseContext(),SendMessageActivity.class);
      intent.putExtra(ConversationView.MESSAGE_INTENT,ConversationView.MESSAGE_VIEW);
      intent.putExtra(ConversationView.selectedNumberIntent,msgList.get(position)[0]);
      ConversationView.this.startActivity(intent);
    }
  }
);
  emptyList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
switch (position) {
case ADD_CONTACT:
        AddContact.addContact=true;
      AddContact.editTc=null;
    ConversationView.this.startActivity(new Intent(ConversationView.this.getBaseContext(),AddContact.class));
  break;
case IMPORT_CONTACT:
ConversationView.this.startActivity(new Intent(ConversationView.this.getBaseContext(),ImportContacts.class));
break;
}
}
}
);
}",0.930505709624796
187341,"@Override protected void onResume(){
  MessageService.mNotificationManager.cancel(MessageService.MULTI);
  if (conversations != null || ap != null) {
    updateList(this,false);
  }
  super.onResume();
}","@Override protected void onResume(){
  MessageService.mNotificationManager.cancel(MessageService.MULTI);
  if (conversations != null || ap != null) {
    updateList(this,false);
  }
  super.onResume();
  if (!(Walkthrough.hasShown(Step.INTRO,this) && Walkthrough.hasShown(Step.START_IMPORT,this))) {
    Walkthrough.show(Step.INTRO,this);
    Walkthrough.show(Step.START_IMPORT,this);
  }
 else   if (!Walkthrough.hasShown(Step.START_EXCHANGE,this)) {
    Walkthrough.show(Step.START_EXCHANGE,this);
  }
  DBAccessor dba=new DBAccessor(this);
  if ((!Walkthrough.hasShown(Step.SUCCESS,this)) && dba.anyTrusted()) {
    Walkthrough.show(Step.SUCCESS,this);
    Walkthrough.show(Step.CLOSE,this);
  }
}",0.4496124031007752
187342,"@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  SQLiteQueryBuilder qBuilder=new SQLiteQueryBuilder();
  Cursor c=null;
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
switch (choose) {
case USER:
    qBuilder.setTables(SQLitehelper.USER_TABLE_NAME);
  c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUSTED:
qBuilder.setTables(SQLitehelper.TRUSTED_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case NUMBERS:
qBuilder.setTables(SQLitehelper.NUMBERS_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case SHARED_INFO:
qBuilder.setTables(SQLitehelper.SHARED_INFO_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case BOOK_PATH:
qBuilder.setTables(SQLitehelper.BOOK_PATHS_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case MESSAGE:
qBuilder.setTables(SQLitehelper.MESSAGES_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case QUEUE:
qBuilder.setTables(SQLitehelper.QUEUE_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case EXCHANGE:
qBuilder.setTables(SQLitehelper.EXCHANGE_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUST_NUMBERS:
qBuilder.setTables(TRUST_NUMBER_TABLE);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUST_NUM_MESS:
qBuilder.setTables(TRUST_NUM_MESS_TABLE);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case QUERY:
qBuilder.setTables(QUERY_STRING);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,SQLitehelper.KEY_REFERENCE,""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case WALKTHROUGH:
qBuilder.setTables(SQLitehelper.WALKTHROUGH_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}","@Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  SQLiteQueryBuilder qBuilder=new SQLiteQueryBuilder();
  Cursor c=null;
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
switch (choose) {
case USER:
    qBuilder.setTables(SQLitehelper.USER_TABLE_NAME);
  c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUSTED:
qBuilder.setTables(SQLitehelper.TRUSTED_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case NUMBERS:
qBuilder.setTables(SQLitehelper.NUMBERS_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case SHARED_INFO:
qBuilder.setTables(SQLitehelper.SHARED_INFO_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case BOOK_PATH:
qBuilder.setTables(SQLitehelper.BOOK_PATHS_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case MESSAGE:
qBuilder.setTables(SQLitehelper.MESSAGES_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case QUEUE:
qBuilder.setTables(SQLitehelper.QUEUE_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case EXCHANGE:
qBuilder.setTables(SQLitehelper.EXCHANGE_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case WALKTHROUGH:
qBuilder.setTables(SQLitehelper.WALKTHROUGH_TABLE_NAME);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUST_NUMBERS:
qBuilder.setTables(TRUST_NUMBER_TABLE);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case TRUST_NUM_MESS:
qBuilder.setTables(TRUST_NUM_MESS_TABLE);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,""String_Node_Str"",""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
case QUERY:
qBuilder.setTables(QUERY_STRING);
c=qBuilder.query(db.getWritableDatabase(),projection,selection,selectionArgs,SQLitehelper.KEY_REFERENCE,""String_Node_Str"",sortOrder);
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}",0.9133428981348636
187343,"@Override public Uri insert(Uri uri,ContentValues values){
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
  ;
switch (choose) {
case USER:
    long id=dba.insert(SQLitehelper.USER_TABLE_NAME,null,values);
  getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.USER_TABLE_NAME + ""String_Node_Str"" + id);
case TRUSTED:
id=dba.insert(SQLitehelper.TRUSTED_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + id);
case NUMBERS:
id=dba.insert(SQLitehelper.NUMBERS_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + id);
case SHARED_INFO:
id=dba.insert(SQLitehelper.SHARED_INFO_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.SHARED_INFO_TABLE_NAME + ""String_Node_Str"" + id);
case BOOK_PATH:
id=dba.insert(SQLitehelper.BOOK_PATHS_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.BOOK_PATHS_TABLE_NAME + ""String_Node_Str"" + id);
case MESSAGE:
id=dba.insert(SQLitehelper.MESSAGES_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.MESSAGES_TABLE_NAME + ""String_Node_Str"" + id);
case QUEUE:
id=dba.insert(SQLitehelper.QUEUE_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.QUEUE_TABLE_NAME + ""String_Node_Str"" + id);
case EXCHANGE:
id=dba.insert(SQLitehelper.EXCHANGE_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.EXCHANGE_TABLE_NAME + ""String_Node_Str"" + id);
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}","@Override public Uri insert(Uri uri,ContentValues values){
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
  ;
switch (choose) {
case USER:
    long id=dba.insert(SQLitehelper.USER_TABLE_NAME,null,values);
  getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.USER_TABLE_NAME + ""String_Node_Str"" + id);
case TRUSTED:
id=dba.insert(SQLitehelper.TRUSTED_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + id);
case NUMBERS:
id=dba.insert(SQLitehelper.NUMBERS_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + id);
case SHARED_INFO:
id=dba.insert(SQLitehelper.SHARED_INFO_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.SHARED_INFO_TABLE_NAME + ""String_Node_Str"" + id);
case BOOK_PATH:
id=dba.insert(SQLitehelper.BOOK_PATHS_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.BOOK_PATHS_TABLE_NAME + ""String_Node_Str"" + id);
case MESSAGE:
id=dba.insert(SQLitehelper.MESSAGES_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.MESSAGES_TABLE_NAME + ""String_Node_Str"" + id);
case QUEUE:
id=dba.insert(SQLitehelper.QUEUE_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.QUEUE_TABLE_NAME + ""String_Node_Str"" + id);
case EXCHANGE:
id=dba.insert(SQLitehelper.EXCHANGE_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.EXCHANGE_TABLE_NAME + ""String_Node_Str"" + id);
case WALKTHROUGH:
id=dba.insert(SQLitehelper.WALKTHROUGH_TABLE_NAME,null,values);
getContext().getContentResolver().notifyChange(uri,null);
return Uri.parse(SQLitehelper.WALKTHROUGH_TABLE_NAME + ""String_Node_Str"" + id);
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}",0.945137157107232
187344,"public void getEULA(){
  PackageInfo versionInfo=getPackageInfo();
  final String eulaKey=""String_Node_Str"" + versionInfo.versionCode;
  boolean hasBeenShown=sharedPrefs.getBoolean(eulaKey,false);
  if (hasBeenShown == false) {
    final TextView textBox=new TextView(this);
    String licenseMessage=this.getString(R.string.eula_message);
    final SpannableString license=new SpannableString(licenseMessage);
    Linkify.addLinks(license,Linkify.WEB_URLS);
    textBox.setText(license);
    int horDimen=Math.round(this.getResources().getDimension(R.dimen.activity_horizontal_margin));
    int verDimen=Math.round(this.getResources().getDimension(R.dimen.activity_vertical_margin));
    textBox.setPadding(horDimen,verDimen,horDimen,verDimen);
    textBox.setMovementMethod(LinkMovementMethod.getInstance());
    textBox.setTextSize(18);
    textBox.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    String title=this.getString(R.string.eula_title);
    AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(title).setCancelable(true).setView(textBox).setPositiveButton(R.string.accept,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        SharedPreferences.Editor editor=sharedPrefs.edit();
        editor.putBoolean(eulaKey,true);
        editor.commit();
        checkDefault();
      }
    }
).setOnCancelListener(new OnCancelListener(){
      @Override public void onCancel(      DialogInterface arg0){
        ConversationView.this.finish();
      }
    }
).setNegativeButton(R.string.refuse,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ConversationView.this.finish();
      }
    }
);
    builder.create().show();
  }
 else {
  }
}","public void getEULA(){
  PackageInfo versionInfo=getPackageInfo();
  final String eulaKey=""String_Node_Str"" + versionInfo.versionCode;
  boolean hasBeenShown=sharedPrefs.getBoolean(eulaKey,false);
  if (hasBeenShown == false) {
    final TextView textBox=new TextView(this);
    String licenseMessage=this.getString(R.string.eula_message);
    final SpannableString license=new SpannableString(licenseMessage);
    Linkify.addLinks(license,Linkify.WEB_URLS);
    textBox.setText(license);
    int horDimen=Math.round(this.getResources().getDimension(R.dimen.activity_horizontal_margin));
    int verDimen=Math.round(this.getResources().getDimension(R.dimen.activity_vertical_margin));
    textBox.setPadding(horDimen,verDimen,horDimen,verDimen);
    textBox.setMovementMethod(LinkMovementMethod.getInstance());
    textBox.setTextSize(18);
    textBox.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));
    String title=this.getString(R.string.eula_title);
    AlertDialog.Builder builder=new AlertDialog.Builder(this).setTitle(title).setCancelable(true).setView(textBox).setPositiveButton(R.string.accept,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        SharedPreferences.Editor editor=sharedPrefs.edit();
        editor.putBoolean(eulaKey,true);
        editor.commit();
        displayIntro();
        checkDefault();
      }
    }
).setOnCancelListener(new OnCancelListener(){
      @Override public void onCancel(      DialogInterface arg0){
        ConversationView.this.finish();
      }
    }
).setNegativeButton(R.string.refuse,new Dialog.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int which){
        ConversationView.this.finish();
      }
    }
);
    builder.create().show();
  }
 else {
  }
}",0.9935135135135136
187345,"@Override protected void onResume(){
  MessageService.mNotificationManager.cancel(MessageService.MULTI);
  if (conversations != null || ap != null) {
    updateList(this,false);
  }
  super.onResume();
  if (!(Walkthrough.hasShown(Step.INTRO,this) && Walkthrough.hasShown(Step.START_IMPORT,this))) {
    Walkthrough.show(Step.INTRO,this);
    Walkthrough.show(Step.START_IMPORT,this);
  }
 else   if (!Walkthrough.hasShown(Step.START_EXCHANGE,this)) {
    Walkthrough.show(Step.START_EXCHANGE,this);
  }
  DBAccessor dba=new DBAccessor(this);
  if ((!Walkthrough.hasShown(Step.SUCCESS,this)) && dba.anyTrusted()) {
    Walkthrough.show(Step.SUCCESS,this);
    Walkthrough.show(Step.CLOSE,this);
  }
}","@Override protected void onResume(){
  MessageService.mNotificationManager.cancel(MessageService.MULTI);
  if (conversations != null || ap != null) {
    updateList(this,false);
  }
  super.onResume();
  if ((Walkthrough.hasShown(Step.INTRO,this) && Walkthrough.hasShown(Step.START_IMPORT,this)) && !Walkthrough.hasShown(Step.START_EXCHANGE,this)) {
    Walkthrough.show(Step.START_EXCHANGE,this);
  }
  PackageInfo versionInfo=getPackageInfo();
  final String eulaKey=""String_Node_Str"" + versionInfo.versionCode;
  if (sharedPrefs.getBoolean(eulaKey,false)) {
    displayIntro();
  }
  DBAccessor dba=new DBAccessor(this);
  if ((Walkthrough.hasShown(Step.ACCEPT,this) || Walkthrough.hasShown(Step.SET_SECRET,this)) && (!Walkthrough.hasShown(Step.SUCCESS,this)) && dba.anyTrusted()) {
    Walkthrough.show(Step.SUCCESS,this);
    Walkthrough.show(Step.CLOSE,this);
  }
}",0.7562062380649268
187346,"@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
switch (choose) {
case USER:
    int count=dba.update(SQLitehelper.USER_TABLE_NAME,values,selection,selectionArgs);
  getContext().getContentResolver().notifyChange(uri,null);
return count;
case TRUSTED:
count=dba.update(SQLitehelper.TRUSTED_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case NUMBERS:
count=dba.update(SQLitehelper.NUMBERS_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case SHARED_INFO:
count=dba.update(SQLitehelper.SHARED_INFO_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case BOOK_PATH:
count=dba.update(SQLitehelper.BOOK_PATHS_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case MESSAGE:
count=dba.update(SQLitehelper.MESSAGES_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case QUEUE:
count=dba.update(SQLitehelper.QUEUE_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case EXCHANGE:
count=dba.update(SQLitehelper.EXCHANGE_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case WALKTHROUGH:
if (values.containsKey(SQLitehelper.KEY_ID)) {
count=dba.update(SQLitehelper.WALKTHROUGH_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
}
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}","@Override public int update(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  int choose=sURIMatcher.match(uri);
  dba=db.getDB();
switch (choose) {
case USER:
    int count=dba.update(SQLitehelper.USER_TABLE_NAME,values,selection,selectionArgs);
  getContext().getContentResolver().notifyChange(uri,null);
return count;
case TRUSTED:
count=dba.update(SQLitehelper.TRUSTED_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case NUMBERS:
count=dba.update(SQLitehelper.NUMBERS_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case SHARED_INFO:
count=dba.update(SQLitehelper.SHARED_INFO_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case BOOK_PATH:
count=dba.update(SQLitehelper.BOOK_PATHS_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case MESSAGE:
count=dba.update(SQLitehelper.MESSAGES_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case QUEUE:
count=dba.update(SQLitehelper.QUEUE_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case EXCHANGE:
count=dba.update(SQLitehelper.EXCHANGE_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
case WALKTHROUGH:
if (!values.containsKey(SQLitehelper.KEY_ID)) {
count=dba.update(SQLitehelper.WALKTHROUGH_TABLE_NAME,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
return count;
}
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
}",0.9997269997269996
187347,"/** 
 * Returns true if the step in the walkthrough has already been shown.
 * @param step The step in the walkthrough
 * @return
 */
public static boolean hasShown(Step step,Activity activity){
  Log.v(""String_Node_Str"",QuickPrefsActivity.ENABLE_WALKTHROUGH_SETTING_KEY);
  if (PreferenceManager.getDefaultSharedPreferences(activity.getApplicationContext()).getBoolean(QuickPrefsActivity.ENABLE_WALKTHROUGH_SETTING_KEY,false)) {
    DBAccessor dba=new DBAccessor(activity);
    WalkthroughStep ws=dba.getWalkthrough();
    return ws.get(step);
  }
  return true;
}","/** 
 * Returns true if the step in the walkthrough has already been shown.
 * @param step The step in the walkthrough
 * @return
 */
public static boolean hasShown(Step step,Activity activity){
  if (PreferenceManager.getDefaultSharedPreferences(activity.getBaseContext()).getBoolean(QuickPrefsActivity.ENABLE_WALKTHROUGH_SETTING_KEY,true)) {
    DBAccessor dba=new DBAccessor(activity);
    WalkthroughStep ws=dba.getWalkthrough();
    return ws.get(step);
  }
  return true;
}",0.9042145593869731
187348,"/** 
 * Enables the whole walkthrough by initializing every step as not having been viewed, this should be executed the first time the application is started.
 */
public static void enableWalkthrough(Activity activity){
  WalkthroughStep ws=new WalkthroughStep(true);
  DBAccessor dba=new DBAccessor(activity);
  dba.updateWalkthrough(ws);
}","/** 
 * Enables the whole walkthrough by initializing every step as not having been viewed, this should be executed the first time the application is started.
 */
public static void enableWalkthrough(Activity activity){
  WalkthroughStep ws=new WalkthroughStep(false);
  DBAccessor dba=new DBAccessor(activity);
  dba.updateWalkthrough(ws);
}",0.9897510980966324
187349,"/** 
 * Disables the whole walkthrough by initializing every step as not having been viewed, this should be executed the first time the application is started.
 */
public static void disableWalkthrough(Activity activity){
  WalkthroughStep ws=new WalkthroughStep(false);
  DBAccessor dba=new DBAccessor(activity);
  dba.updateWalkthrough(ws);
}","/** 
 * Disables the whole walkthrough by initializing every step as not having been viewed, this should be executed the first time the application is started.
 */
public static void disableWalkthrough(Activity activity){
  WalkthroughStep ws=new WalkthroughStep(true);
  DBAccessor dba=new DBAccessor(activity);
  dba.updateWalkthrough(ws);
}",0.9898107714701602
187350,"/** 
 * Enables a step in the walkthrough in the application settings preferences, this should only be called upon completion of the walkthrough.
 */
public static void enableWalkthroughStep(Step step,Activity activity){
  DBAccessor dba=new DBAccessor(activity);
  WalkthroughStep ws=new WalkthroughStep(null);
  ws.set(step,true);
  dba.updateWalkthrough(ws);
}","/** 
 * Enables a step in the walkthrough in the application settings preferences, this should only be called upon completion of the walkthrough.
 */
public static void enableWalkthroughStep(Step step,Activity activity){
  DBAccessor dba=new DBAccessor(activity);
  WalkthroughStep ws=new WalkthroughStep(null);
  ws.set(step,false);
  dba.updateWalkthrough(ws);
}",0.9903713892709766
187351,"/** 
 * Disables a step in the walkthrough in the application settings preferences, this should only be called upon completion of the walkthrough.
 */
private static void disableWalkthroughStep(Step step,Activity activity){
  DBAccessor dba=new DBAccessor(activity);
  WalkthroughStep ws=new WalkthroughStep(null);
  ws.set(step,false);
  dba.updateWalkthrough(ws);
}","/** 
 * Disables a step in the walkthrough in the application settings preferences, this should only be called upon completion of the walkthrough.
 */
private static void disableWalkthroughStep(Step step,Activity activity){
  DBAccessor dba=new DBAccessor(activity);
  WalkthroughStep ws=new WalkthroughStep(null);
  ws.set(step,true);
  dba.updateWalkthrough(ws);
}",0.990450204638472
187352,"/** 
 * Initializes the encryption engine given the number, which contains  the public key, shared apriori info, and nonces, unique to that number, which is needed to initialize the encryption engine.
 * @param number The number, which contains the cryptographic info
 * @param mode The mode to initialize the engine as, true for encryptionand false for decryption mode.
 */
private void initECEngine(Number number,boolean mode){
  SDFGenerator generator=new SDFGenerator(new SHA256Digest());
  String sharedInfo1, sharedInfo2;
  APrioriInfo sharedInfo;
  if (number.isInitiator()) {
    sharedInfo1=number.getSharedInfo1();
    sharedInfo2=number.getSharedInfo2();
  }
 else {
    sharedInfo1=number.getSharedInfo2();
    sharedInfo2=number.getSharedInfo1();
  }
  Log.v(""String_Node_Str"",sharedInfo1);
  Log.v(""String_Node_Str"",sharedInfo2);
  RandomGenerator nonce;
  ISAACRandomGenerator CSPRNG=new ISAACRandomGenerator(new ISAACEngine());
  if (mode) {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo1,sharedInfo2));
    nonce=new Nonce(CSPRNG,number.getNonceEncrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceEncrypt()));
  }
 else {
    sharedInfo=new APrioriInfo(sharedInfo2,sharedInfo1);
    generator.init(new SDFParameters(sharedInfo2,sharedInfo1));
    nonce=new Nonce(CSPRNG,number.getNonceDecrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceDecrypt()));
  }
  byte[] seed=new byte[generator.getDigest().getDigestSize()];
  generator.generateBytes(seed,0,0);
  ((Nonce)nonce).init(seed,seed.length);
  ECKeyParam param=new ECKeyParam();
  ECPrivateKeyParameters priKey=ECGKeyUtil.decodeBase64PriKey(param,SMSUtility.user.getPrivateKey());
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,number.getPublicKey());
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPrivateKey()));
  Log.v(""String_Node_Str"",new String(number.getPublicKey()));
  ECEngine engine=new ECEngine(nonce,sharedInfo);
  engine.init(mode,priKey,pubKey);
  if (mode) {
    encryptMap.put(number.getId(),engine);
  }
 else {
    decryptMap.put(number.getId(),engine);
  }
}","/** 
 * Initializes the encryption engine given the number, which contains  the public key, shared apriori info, and nonces, unique to that number, which is needed to initialize the encryption engine.
 * @param number The number, which contains the cryptographic info
 * @param mode The mode to initialize the engine as, true for encryptionand false for decryption mode.
 */
private void initECEngine(Number number,boolean mode){
  SDFGenerator generator=new SDFGenerator(new SHA256Digest());
  String sharedInfo1, sharedInfo2;
  APrioriInfo sharedInfo;
  if (number.isInitiator()) {
    sharedInfo1=number.getSharedInfo1();
    sharedInfo2=number.getSharedInfo2();
  }
 else {
    sharedInfo1=number.getSharedInfo2();
    sharedInfo2=number.getSharedInfo1();
  }
  Log.v(""String_Node_Str"",sharedInfo1);
  Log.v(""String_Node_Str"",sharedInfo2);
  RandomGenerator nonce;
  ISAACRandomGenerator CSPRNG=new ISAACRandomGenerator(new ISAACEngine());
  if (mode) {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo1,sharedInfo2));
    nonce=new Nonce(CSPRNG,number.getNonceEncrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceEncrypt()));
  }
 else {
    sharedInfo=new APrioriInfo(sharedInfo2,sharedInfo1);
    generator.init(new SDFParameters(sharedInfo2,sharedInfo1));
    nonce=new Nonce(CSPRNG,number.getNonceDecrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceDecrypt()));
  }
  byte[] seed=new byte[generator.getDigest().getDigestSize()];
  generator.generateBytes(seed,0,0);
  ((Nonce)nonce).init(seed,seed.length);
  ECKeyParam param=new ECKeyParam();
  ECPrivateKeyParameters priKey=ECGKeyUtil.decodeBase64PriKey(param,user.getPrivateKey());
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,number.getPublicKey());
  Log.v(""String_Node_Str"",new String(user.getPrivateKey()));
  Log.v(""String_Node_Str"",new String(number.getPublicKey()));
  ECEngine engine=new ECEngine(nonce,sharedInfo);
  engine.init(mode,priKey,pubKey);
  if (mode) {
    encryptMap.put(number.getId(),engine);
  }
 else {
    decryptMap.put(number.getId(),engine);
  }
}",0.9949121184088808
187353,"/** 
 * The basic constructor, initializes the encrypt/decrypt hash maps.
 */
public Encryption(){
  this.encryptMap=new HashMap<Long,ECEngine>();
  this.decryptMap=new HashMap<Long,ECEngine>();
}","/** 
 * The basic constructor, initializes the encrypt/decrypt hash maps.
 */
public Encryption(User user){
  this.encryptMap=new HashMap<Long,ECEngine>();
  this.decryptMap=new HashMap<Long,ECEngine>();
  this.user=user;
}",0.935560859188544
187354,"/** 
 * Wrapper method to sign a key exchange with the user's public key. This is used to ensure that the user's information is in memory (and if not it is retrieved) and catches and handles possible errors involving illegal database states. Signs the current user's public key using the apriori information shared between the current user and the number provided. After signing the public key the CRC32 checksum is calculated and appended to the signed public key. ------------------------------------- | public key | signature | checksum | -------------------------------------
 * @param number The contact's Number.
 * @param dba The database interface.
 * @param user The user's information.
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number,DBAccessor dba,User user){
  try {
    user=getUser(dba,user);
    return signWithUser(number,user);
  }
 catch (  InvalidDatabaseStateException e) {
    e.printStackTrace();
  }
  return null;
}","/** 
 * Wrapper method to sign a key exchange with the user's public key. This is used to ensure that the user's information is in memory (and if not it is retrieved) and catches and handles possible errors involving illegal database states. Signs the current user's public key using the apriori information shared between the current user and the number provided. After signing the public key the CRC32 checksum is calculated and appended to the signed public key. ------------------------------------- | public key | signature | checksum | -------------------------------------
 * @param number The contact's Number.
 * @param dba The database interface.
 * @param user The user's information.
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number,DBAccessor dba,User user){
  try {
    user=SMSUtility.getUser(dba,user);
    return signWithUser(number,user);
  }
 catch (  InvalidDatabaseStateException e) {
    e.printStackTrace();
  }
  return null;
}",0.9947693770803614
187355,"private String handleEncryptedMessage(Context context,String address,String fullMessage){
  String secretMessage=null;
  if (dba.isTrustedContact((address)) && ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.ENABLE_SETTING_KEY,true)) {
    Message encryMessage=null;
    try {
      SMSUtility.sendToSelf(context,address,fullMessage,ConversationView.INBOX);
      Message newMessage=null;
      Log.v(""String_Node_Str"",fullMessage);
      Encryption CryptoEngine=new Encryption();
      Number contactNumber=dba.getNumber(SMSUtility.format(address));
      secretMessage=CryptoEngine.decrypt(contactNumber,fullMessage);
      Log.v(""String_Node_Str"",secretMessage);
      dba.updateDecryptNonce(contactNumber);
      if (ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.SHOW_ENCRYPT_SETTING_KEY,false)) {
        encryMessage=new Message(fullMessage,true,Message.RECEIVED_ENCRYPTED);
        dba.addNewMessage(encryMessage,address,true);
      }
      SMSUtility.sendToSelf(context,address,secretMessage,ConversationView.INBOX);
      newMessage=new Message(secretMessage,true,Message.RECEIVED_ENCRYPTED);
      dba.addNewMessage(newMessage,address,true);
    }
 catch (    InvalidCipherTextException e) {
      encryMessage=new Message(fullMessage,true,Message.RECEIVED_ENCRYPT_FAIL);
      dba.addNewMessage(encryMessage,address,true);
      Toast.makeText(context,R.string.key_exchange_failed_to_decrypt,Toast.LENGTH_LONG).show();
      Toast.makeText(context,R.string.possible_man_in_the_middle_attack_warning,Toast.LENGTH_LONG).show();
      e.printStackTrace();
      BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    Exception e) {
      e.printStackTrace();
      BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
  return secretMessage;
}","private String handleEncryptedMessage(Context context,String address,String fullMessage){
  String secretMessage=null;
  if (dba.isTrustedContact((address)) && ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.ENABLE_SETTING_KEY,true)) {
    Message encryMessage=null;
    try {
      SMSUtility.sendToSelf(context,address,fullMessage,ConversationView.INBOX);
      Message newMessage=null;
      Log.v(""String_Node_Str"",fullMessage);
      if (SMSUtility.cryptoEngine == null) {
        SMSUtility.cryptoEngine=new Encryption(SMSUtility.getUser(dba,null));
      }
      Number contactNumber=dba.getNumber(SMSUtility.format(address));
      secretMessage=SMSUtility.cryptoEngine.decrypt(contactNumber,fullMessage);
      Log.v(""String_Node_Str"",secretMessage);
      dba.updateDecryptNonce(contactNumber);
      if (ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.SHOW_ENCRYPT_SETTING_KEY,false)) {
        encryMessage=new Message(fullMessage,true,Message.RECEIVED_ENCRYPTED);
        dba.addNewMessage(encryMessage,address,true);
      }
      SMSUtility.sendToSelf(context,address,secretMessage,ConversationView.INBOX);
      newMessage=new Message(secretMessage,true,Message.RECEIVED_ENCRYPTED);
      dba.addNewMessage(newMessage,address,true);
    }
 catch (    InvalidCipherTextException e) {
      encryMessage=new Message(fullMessage,true,Message.RECEIVED_ENCRYPT_FAIL);
      dba.addNewMessage(encryMessage,address,true);
      Toast.makeText(context,R.string.key_exchange_failed_to_decrypt,Toast.LENGTH_LONG).show();
      Toast.makeText(context,R.string.possible_man_in_the_middle_attack_warning,Toast.LENGTH_LONG).show();
      e.printStackTrace();
      BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    }
catch (    Exception e) {
      e.printStackTrace();
      BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    }
  }
  return secretMessage;
}",0.9699367088607594
187356,"/** 
 * Sends a message as encrypted or plain text based on the contact's state.
 * @param context The context of the class
 * @param number The number the text message is being sent to
 * @param text The text message
 * @return boolean whether the message sent or not
 */
public static boolean sendMessage(DBAccessor dba,final Context context,Entry message){
  try {
    if (dba.isTrustedContact(message.getNumber()) && ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.NATIVE_SAVE_SETTING_KEY,true) && !message.isExchange()) {
      Encryption CryptoEngine=new Encryption();
      Number number=dba.getNumber(format(message.getNumber()));
      Log.v(""String_Node_Str"",message.getMessage());
      final String encrypted=CryptoEngine.encrypt(number,message.getMessage());
      Log.v(""String_Node_Str"",encrypted);
      sendSMS(context,new Entry(message.getNumber(),encrypted,message.getId(),message.getExchange()));
      dba.updateEncryptNonce(number);
      if (ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.SHOW_ENCRYPT_SETTING_KEY,false)) {
        sendToSelf(context,message.getNumber(),encrypted,ConversationView.SENT);
        dba.addNewMessage(new Message(encrypted,true,Message.SENT_ENCRYPTED),message.getNumber(),false);
      }
      sendToSelf(context,message.getNumber(),message.getMessage(),ConversationView.SENT);
      Toast.makeText(context,R.string.encrypted_message_sent,Toast.LENGTH_SHORT).show();
    }
 else {
      sendSMS(context,message);
      sendToSelf(context,message.getNumber(),message.getMessage(),ConversationView.SENT);
      Toast.makeText(context,R.string.message_sent,Toast.LENGTH_SHORT).show();
    }
    return true;
  }
 catch (  InvalidCipherTextException e) {
    Toast.makeText(context,R.string.failed_to_encrypt,Toast.LENGTH_LONG).show();
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
catch (  final Exception e) {
    Toast.makeText(context,R.string.failed_to_sent,Toast.LENGTH_LONG).show();
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
}","/** 
 * Sends a message as encrypted or plain text based on the contact's state.
 * @param context The context of the class
 * @param number The number the text message is being sent to
 * @param text The text message
 * @return boolean whether the message sent or not
 */
public static boolean sendMessage(DBAccessor dba,final Context context,Entry message){
  try {
    if (dba.isTrustedContact(message.getNumber()) && ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.NATIVE_SAVE_SETTING_KEY,true) && !message.isExchange()) {
      if (SMSUtility.cryptoEngine == null) {
        SMSUtility.cryptoEngine=new Encryption(SMSUtility.getUser(dba,null));
      }
      Number number=dba.getNumber(format(message.getNumber()));
      Log.v(""String_Node_Str"",message.getMessage());
      final String encrypted=SMSUtility.cryptoEngine.encrypt(number,message.getMessage());
      Log.v(""String_Node_Str"",encrypted);
      sendSMS(context,new Entry(message.getNumber(),encrypted,message.getId(),message.getExchange()));
      dba.updateEncryptNonce(number);
      if (ConversationView.sharedPrefs.getBoolean(QuickPrefsActivity.SHOW_ENCRYPT_SETTING_KEY,false)) {
        sendToSelf(context,message.getNumber(),encrypted,ConversationView.SENT);
        dba.addNewMessage(new Message(encrypted,true,Message.SENT_ENCRYPTED),message.getNumber(),false);
      }
      sendToSelf(context,message.getNumber(),message.getMessage(),ConversationView.SENT);
      Toast.makeText(context,R.string.encrypted_message_sent,Toast.LENGTH_SHORT).show();
    }
 else {
      sendSMS(context,message);
      sendToSelf(context,message.getNumber(),message.getMessage(),ConversationView.SENT);
      Toast.makeText(context,R.string.message_sent,Toast.LENGTH_SHORT).show();
    }
    return true;
  }
 catch (  InvalidCipherTextException e) {
    Toast.makeText(context,R.string.failed_to_encrypt,Toast.LENGTH_LONG).show();
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
catch (  final Exception e) {
    Toast.makeText(context,R.string.failed_to_sent,Toast.LENGTH_LONG).show();
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
    return false;
  }
}",0.9734234234234236
187357,"/** 
 * Open the database to be used
 */
public void open(){
  try {
    db=contactDatabase.getWritableDatabase();
    count+=1;
  }
 catch (  SQLiteException e) {
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
  }
 finally {
    if (db != null && db.isOpen()) {
      db.close();
    }
  }
}","/** 
 * Open the database to be used
 */
public void open(){
  try {
    db=contactDatabase.getWritableDatabase();
    count+=1;
  }
 catch (  SQLiteException e) {
    e.printStackTrace();
    BugSenseHandler.sendExceptionMessage(""String_Node_Str"",""String_Node_Str"",e);
  }
}",0.8785942492012779
187358,"/** 
 * Initializes the encryption engine given the number, which contains  the public key, shared apriori info, and nonces, unique to that number, which is needed to initialize the encryption engine.
 * @param number The number, which contains the cryptographic info
 * @param mode The mode to initialize the engine as, true for encryptionand false for decryption mode.
 */
private void initECEngine(Number number,boolean mode){
  SDFGenerator generator=new SDFGenerator(new SHA256Digest());
  String sharedInfo1, sharedInfo2;
  APrioriInfo sharedInfo;
  if (number.isInitiator()) {
    sharedInfo1=number.getSharedInfo1();
    sharedInfo2=number.getSharedInfo2();
  }
 else {
    sharedInfo1=number.getSharedInfo2();
    sharedInfo2=number.getSharedInfo1();
  }
  CipherParameters nonce;
  ISAACRandomGenerator CSPRNG=new ISAACRandomGenerator(new ISAACEngine());
  if (mode) {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo1,sharedInfo2));
    nonce=new Nonce(CSPRNG,number.getNonceEncrypt());
  }
 else {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo2,sharedInfo1));
    nonce=new Nonce(CSPRNG,number.getNonceDecrypt());
  }
  byte[] seed=new byte[generator.getDigest().getDigestSize()];
  generator.generateBytes(seed,0,0);
  ((Nonce)nonce).init(seed,seed.length);
  ECKeyParam param=new ECKeyParam();
  ECPrivateKeyParameters priKey=ECGKeyUtil.decodeBase64PriKey(param,SMSUtility.user.getPrivateKey());
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,number.getPublicKey());
  ECEngine engine=new ECEngine(nonce,sharedInfo);
  engine.init(mode,priKey,pubKey);
  if (mode) {
    encryptMap.put(number.getId(),engine);
  }
 else {
    decryptMap.put(number.getId(),engine);
  }
}","/** 
 * Initializes the encryption engine given the number, which contains  the public key, shared apriori info, and nonces, unique to that number, which is needed to initialize the encryption engine.
 * @param number The number, which contains the cryptographic info
 * @param mode The mode to initialize the engine as, true for encryptionand false for decryption mode.
 */
private void initECEngine(Number number,boolean mode){
  SDFGenerator generator=new SDFGenerator(new SHA256Digest());
  String sharedInfo1, sharedInfo2;
  APrioriInfo sharedInfo;
  sharedInfo1=number.getSharedInfo1();
  sharedInfo2=number.getSharedInfo2();
  Log.v(""String_Node_Str"",sharedInfo1);
  Log.v(""String_Node_Str"",sharedInfo2);
  CipherParameters nonce;
  ISAACRandomGenerator CSPRNG=new ISAACRandomGenerator(new ISAACEngine());
  if (mode) {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo1,sharedInfo2));
    nonce=new Nonce(CSPRNG,number.getNonceEncrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceEncrypt()));
  }
 else {
    sharedInfo=new APrioriInfo(sharedInfo1,sharedInfo2);
    generator.init(new SDFParameters(sharedInfo1,sharedInfo2));
    nonce=new Nonce(CSPRNG,number.getNonceDecrypt());
    Log.v(""String_Node_Str"",String.valueOf(number.getNonceDecrypt()));
  }
  byte[] seed=new byte[generator.getDigest().getDigestSize()];
  generator.generateBytes(seed,0,0);
  ((Nonce)nonce).init(seed,seed.length);
  ECKeyParam param=new ECKeyParam();
  ECPrivateKeyParameters priKey=ECGKeyUtil.decodeBase64PriKey(param,SMSUtility.user.getPrivateKey());
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,number.getPublicKey());
  Log.v(""String_Node_Str"",new String(SMSUtility.user.getPrivateKey()));
  Log.v(""String_Node_Str"",new String(number.getPublicKey()));
  ECEngine engine=new ECEngine(nonce,sharedInfo);
  engine.init(mode,priKey,pubKey);
  if (mode) {
    encryptMap.put(number.getId(),engine);
  }
 else {
    decryptMap.put(number.getId(),engine);
  }
}",0.8797927461139896
187359,"/** 
 * Encrypts the message provided using the public key belonging to the number and adds a 32 byte verification signature (HMAC) to the message.
 * @param number The number that the message is to be encrypted for
 * @param message The plaintext message to encrypt
 * @return The ciphertext of the encrypted message
 * @throws InvalidCipherTextException If an error occurs attempting to encrypt the message.
 */
public String encrypt(Number number,String message) throws InvalidCipherTextException {
  byte[] encMessage;
  if (!encryptMap.containsKey(number.getId())) {
    initECEngine(number,true);
  }
  encMessage=encryptMap.get(number.getId()).processBlock(message.getBytes());
  number.setNonceEncrypt(number.getNonceEncrypt() + 1);
  return new String(encMessage);
}","/** 
 * Encrypts the message provided using the public key belonging to the number and adds a 32 byte verification signature (HMAC) to the message.
 * @param number The number that the message is to be encrypted for
 * @param message The plaintext message to encrypt
 * @return The ciphertext of the encrypted message
 * @throws InvalidCipherTextException If an error occurs attempting to encrypt the message.
 */
public String encrypt(Number number,String message) throws InvalidCipherTextException {
  byte[] encMessage;
  Log.v(""String_Node_Str"",message);
  if (!encryptMap.containsKey(number.getId())) {
    initECEngine(number,true);
  }
  encMessage=encryptMap.get(number.getId()).processBlock(message.getBytes());
  number.setNonceEncrypt(number.getNonceEncrypt() + 1);
  Log.v(""String_Node_Str"",Base64.encodeToString(encMessage,Base64.DEFAULT));
  return Base64.encodeToString(encMessage,Base64.DEFAULT);
}",0.9046773238602724
187360,"/** 
 * Decrypts the message provided using the public key belonging to the number and adds a 32 byte verification signature (HMAC) to the message.
 * @param number The number that the message is to be decrypted for
 * @param message The ciphertext message to decrypt
 * @return The plaintext of the decrypted message
 * @throws InvalidCipherTextException If an error occurs attempting to encrypt the message.
 */
public String decrypt(Number number,String message) throws InvalidCipherTextException {
  byte[] decMessage;
  if (!decryptMap.containsKey(number.getId())) {
    initECEngine(number,false);
  }
  decMessage=decryptMap.get(number.getId()).processBlock(message.getBytes());
  number.setNonceDecrypt(number.getNonceDecrypt() + 1);
  return new String(decMessage);
}","/** 
 * Decrypts the message provided using the public key belonging to the number and adds a 32 byte verification signature (HMAC) to the message.
 * @param number The number that the message is to be decrypted for
 * @param message The ciphertext message to decrypt
 * @return The plaintext of the decrypted message
 * @throws InvalidCipherTextException If an error occurs attempting to encrypt the message.
 */
public String decrypt(Number number,String message) throws InvalidCipherTextException {
  byte[] decMessage;
  Log.v(""String_Node_Str"",message);
  if (!decryptMap.containsKey(number.getId())) {
    initECEngine(number,false);
  }
  decMessage=decryptMap.get(number.getId()).processBlock(Base64.decode(message,Base64.DEFAULT));
  number.setNonceDecrypt(number.getNonceDecrypt() + 1);
  Log.v(""String_Node_Str"",new String(decMessage));
  return new String(decMessage);
}",0.90832328106152
187361,"/** 
 * Gets the signature from the BASE64 encoded key exchange, which contains the key and signature, and returns the signature encoded as BASE64, for  proper storage and transmission in textual form.
 * @param signedPubKey The signed public key the user received from the number
 * @return The public key received, encoded as BASE64 for storage
 */
public static String encodedSignature(String signedPubKey){
  SHA256Digest digest=new SHA256Digest();
  byte[] signature=new byte[digest.getDigestSize()];
  System.arraycopy(signedPubKey,digest.getDigestSize(),signature,0,signedPubKey.length());
  return Base64.encodeToString(signature,Base64.DEFAULT);
}","/** 
 * Gets the signature from the BASE64 encoded key exchange, which contains the key and signature, and returns the signature encoded as BASE64, for  proper storage and transmission in textual form.
 * @param signedPubKey The signed public key the user received from the number
 * @return The public key received, encoded as BASE64 for storage
 */
public static String encodedSignature(String signedPubKey){
  byte[] decodedSignedPubKey=Base64.decode(signedPubKey,Base64.DEFAULT);
  SHA256Digest digest=new SHA256Digest();
  byte[] signature=new byte[digest.getDigestSize()];
  System.arraycopy(decodedSignedPubKey,decodedSignedPubKey.length - digest.getDigestSize(),signature,0,decodedSignedPubKey.length);
  return Base64.encodeToString(signature,Base64.DEFAULT);
}",0.6367461430575035
187362,"/** 
 * Signs the current user's public key using the apriori information shared between the current user and the number provided. 
 * @param number The number that the key will be exchanged with
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number){
  ECKeyParam param=new ECKeyParam();
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,SMSUtility.user.getPublicKey());
  APrioriInfo sharedInfo=new APrioriInfo(number.getSharedInfo1(),number.getSharedInfo2());
  byte[] encodedPubKey=ECGKeyUtil.encodePubKey(param,pubKey);
  byte[] encodedSignPubKey=ECGKeyExchange.signPubKey(new SHA256Digest(),encodedPubKey,sharedInfo,number.isInitiator());
  return Base64.encodeToString(encodedSignPubKey,Base64.DEFAULT);
}","/** 
 * Signs the current user's public key using the apriori information shared between the current user and the number provided. 
 * @param number The number that the key will be exchanged with
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number){
  ECKeyParam param=new ECKeyParam();
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,SMSUtility.user.getPublicKey());
  APrioriInfo sharedInfo=new APrioriInfo(number.getSharedInfo1(),number.getSharedInfo2());
  byte[] encodedPubKey=ECGKeyUtil.encodePubKey(param,pubKey);
  byte[] encodedSignedPubKey=ECGKeyExchange.signPubKey(new SHA256Digest(),encodedPubKey,sharedInfo,number.isInitiator());
  return Base64.encodeToString(encodedSignedPubKey,Base64.DEFAULT);
}",0.997596153846154
187363,"/** 
 * Gets the signature from the BASE64 encoded key exchange, which contains the key and signature, and returns the signature encoded as BASE64, for  proper storage and transmission in textual form.
 * @param signedPubKey The signed public key the user received from the number
 * @return The public key received, encoded as BASE64 for storage
 */
public static String encodedSignature(String signedPubKey){
  SHA256Digest digest=new SHA256Digest();
  byte[] signature=new byte[digest.getDigestSize()];
  System.arraycopy(signedPubKey,digest.getDigestSize(),signature,0,signedPubKey.length());
  return Base64.encodeToString(signature,Base64.DEFAULT);
}","/** 
 * Gets the signature from the BASE64 encoded key exchange, which contains the key and signature, and returns the signature encoded as BASE64, for  proper storage and transmission in textual form.
 * @param signedPubKey The signed public key the user received from the number
 * @return The public key received, encoded as BASE64 for storage
 */
public static String encodedSignature(String signedPubKey){
  byte[] decodedSignedPubKey=Base64.decode(signedPubKey,Base64.DEFAULT);
  SHA256Digest digest=new SHA256Digest();
  byte[] signature=new byte[digest.getDigestSize()];
  System.arraycopy(decodedSignedPubKey,decodedSignedPubKey.length() - digest.getDigestSize(),signature,0,decodedSignedPubKey.length());
  return Base64.encodeToString(signature,Base64.DEFAULT);
}",0.6335664335664336
187364,"/** 
 * Signs the current user's public key using the apriori information shared between the current user and the number provided. 
 * @param number The number that the key will be exchanged with
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number){
  ECKeyParam param=new ECKeyParam();
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,SMSUtility.user.getPublicKey());
  APrioriInfo sharedInfo=new APrioriInfo(number.getSharedInfo1(),number.getSharedInfo2());
  byte[] encodedPubKey=ECGKeyUtil.encodePubKey(param,pubKey);
  byte[] encodedSignPubKey=ECGKeyExchange.signPubKey(new SHA256Digest(),encodedPubKey,sharedInfo,number.isInitiator());
  return Base64.encodeToString(encodedSignPubKey,Base64.DEFAULT);
}","/** 
 * Signs the current user's public key using the apriori information shared between the current user and the number provided. 
 * @param number The number that the key will be exchanged with
 * @return The current user's signed public key based on shared informationthe user has with the number given.
 */
public static String sign(Number number){
  ECKeyParam param=new ECKeyParam();
  ECPublicKeyParameters pubKey=ECGKeyUtil.decodeBase64PubKey(param,SMSUtility.user.getPublicKey());
  APrioriInfo sharedInfo=new APrioriInfo(number.getSharedInfo1(),number.getSharedInfo2());
  byte[] encodedPubKey=ECGKeyUtil.encodePubKey(param,pubKey);
  byte[] encodedSignedPubKey=ECGKeyExchange.signPubKey(new SHA256Digest(),encodedPubKey,sharedInfo,number.isInitiator());
  return Base64.encodeToString(encodedSignedPubKey,Base64.DEFAULT);
}",0.997596153846154
187365,"/** 
 * Initialize the CSPRNG used by the nonce with the seed value provided so that it is deterministic in generating random data. Again, because the CSPRNG is deterministic if you have already used the  CSPRNG and initialized the Nonce object with the same seed value to  generate nonces previously, you must create this object using the last  nonce state in order to prevent reusing nonces/IVs, which is a security  vulnerability. Lastly, if you initialize this object with incorrect seed value needed to generate the last nonce state the CSPRNG will eventually exhaust generating random numbers when it reaches MAXCYCLES and throw an exception, this prevents having to deal with the halting problem, where the program will run indefinitely generating random data.
 * @param seed The seed value for the CSPRNG, must be specified
 * @throws MaxBytesExceededException If CSPRNG reaches MAXCYCLES trying toreturn to the initial Nonce state, usually when the seed data provided is different than the previous seed data used to generate the last nonce state
 */
public void init(byte[] seed) throws MaxBytesExceededException {
  csprng.init(seed);
  if (nonce != null) {
    byte[] curNonce=new byte[nonce.length];
    for (cycle=1; cycle <= MAXCYCLES; ++cycle) {
      csprng.nextBytes(curNonce);
      if (Arrays.equals(nonce,curNonce)) {
        System.arraycopy(curNonce,0,nonce,0,curNonce.length);
        break;
      }
    }
    if (cycle == MAXCYCLES) {
      throw new MaxBytesExceededException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}","/** 
 * Initialize the CSPRNG used by the nonce with the seed value provided so that it is deterministic in generating random data. Again, because the CSPRNG is deterministic if you have already used the  CSPRNG and initialized the Nonce object with the same seed value to  generate nonces previously, you must create this object using the last  nonce state in order to prevent reusing nonces/IVs, which is a security  vulnerability. Lastly, if you initialize this object with incorrect seed value needed to generate the last nonce state the CSPRNG will eventually exhaust generating random numbers when it reaches MAXCYCLES and throw an exception, this prevents having to deal with the halting problem, where the program will run indefinitely generating random data. You must execute nextNonce after initializing the object in order to generate a unique nonce value.
 * @param seed The seed value for the CSPRNG, must be specified
 * @param nonceLen The default length of the nonce to generate, 0 to usethe length of the prior nonce value. Must be specified if Nonce was  constructed without a prior nonce value.
 * @throws MaxBytesExceededException If CSPRNG reaches MAXCYCLES trying toreturn to the initial Nonce state, usually when the seed data provided is different than the previous seed data used to generate the last nonce state
 * @throws DataLengthException If the nonceLength was not provided and the objectwas not instantiated with the prior nonce value of the last state.
 */
public void init(byte[] seed,int nonceLen) throws MaxBytesExceededException, DataLengthException {
  if (nonce == null && nonceLen == 0) {
    throw new DataLengthException(""String_Node_Str"" + ""String_Node_Str"");
  }
  csprng.init(seed);
  if (nonce == null) {
    nonce=new byte[nonceLen];
  }
 else {
    byte[] curNonce=new byte[nonce.length];
    for (cycle=1; cycle <= MAXCYCLES; ++cycle) {
      csprng.nextBytes(curNonce);
      if (Arrays.equals(nonce,curNonce)) {
        System.arraycopy(curNonce,0,nonce,0,curNonce.length);
        break;
      }
    }
    if (cycle == MAXCYCLES) {
      throw new MaxBytesExceededException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
}",0.8241286863270777
187366,"/** 
 * Generates the next nonce which can be accessed using the getNonce() method.
 */
public void nextNonce(){
  csprng.nextBytes(nonce);
}","/** 
 * Generates the next nonce and returns it
 * @return The nonce
 */
public byte[] nextNonce(){
  nonce=new byte[nonce.length];
  csprng.nextBytes(nonce);
  return nonce;
}",0.6498422712933754
187367,"static public boolean verifyPubKey(Digest digest,byte[] signedPubKey,APrioriInfo sharedInfo,boolean isInitiator) throws DataLengthException {
  if (sharedInfo.getS1().length == 0 || sharedInfo.getS2().length == 0) {
    throw new DataLengthException(""String_Node_Str"");
  }
  byte[] S;
  byte[] digestInput;
  byte[] origSignature=new byte[digest.getDigestSize()];
  byte[] calcSignature=new byte[digest.getDigestSize()];
  System.arraycopy(signedPubKey,signedPubKey.length - digest.getDigestSize(),origSignature,0,digest.getDigestSize());
  if (isInitiator) {
    S=sharedInfo.getS1();
  }
 else {
    S=sharedInfo.getS2();
  }
  digestInput=new byte[signedPubKey.length - digest.getDigestSize() + S.length];
  System.arraycopy(signedPubKey,0,digestInput,0,signedPubKey.length - digest.getDigestSize());
  System.arraycopy(S,0,digestInput,signedPubKey.length - digest.getDigestSize(),S.length);
  digest.update(digestInput,0,digestInput.length);
  digest.doFinal(calcSignature,0);
  digest.reset();
  return signatureEquals(calcSignature,origSignature);
}","static public boolean verifyPubKey(Digest digest,byte[] signedPubKey,APrioriInfo sharedInfo,boolean isInitiator) throws DataLengthException {
  if (sharedInfo.getS1().length == 0 || sharedInfo.getS2().length == 0) {
    throw new DataLengthException(""String_Node_Str"");
  }
  byte[] S;
  byte[] digestInput;
  byte[] origSignature=new byte[digest.getDigestSize()];
  byte[] calcSignature=new byte[digest.getDigestSize()];
  System.arraycopy(signedPubKey,signedPubKey.length - digest.getDigestSize(),origSignature,0,digest.getDigestSize());
  if (isInitiator) {
    S=sharedInfo.getS2();
  }
 else {
    S=sharedInfo.getS1();
  }
  digestInput=new byte[signedPubKey.length - digest.getDigestSize() + S.length];
  System.arraycopy(signedPubKey,0,digestInput,0,signedPubKey.length - digest.getDigestSize());
  System.arraycopy(S,0,digestInput,signedPubKey.length - digest.getDigestSize(),S.length);
  digest.update(digestInput,0,digestInput.length);
  digest.doFinal(calcSignature,0);
  digest.reset();
  return signatureEquals(calcSignature,origSignature);
}",0.9640151515151516
187368,"public boolean isChildSelectable(final int groupPosition,final int childPosition){
  return true;
}","public boolean isChildSelectable(int groupPosition,int childPosition){
  return true;
}",0.935483870967742
187369,"/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.contact);
  this.extendableList=(ExpandableListView)this.findViewById(R.id.contacts_list);
  this.listView=(ListView)this.findViewById(R.id.empty_list);
  this.exchangeKeys=(Button)this.findViewById(R.id.exchange_keys);
  this.extendableList.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      AddContact.addContact=false;
      AddContact.editTc=ManageContactsActivity.this.tc.get(position);
      ManageContactsActivity.this.startActivity(new Intent(ManageContactsActivity.this,AddContact.class));
      return true;
    }
  }
);
  this.listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> parent,    final View view,    final int position,    final long id){
      AddContact.addContact=true;
      AddContact.editTc=null;
      ManageContactsActivity.this.startActivity(new Intent(ManageContactsActivity.this.getBaseContext(),AddContact.class));
    }
  }
);
  this.extendableList.setOnChildClickListener(new OnChildClickListener(){
    public boolean onChildClick(    final ExpandableListView parent,    final View v,    final int groupPosition,    final int childPosition,    final long id){
      final CheckedTextView checked_text=(CheckedTextView)v.findViewById(R.id.trust_name);
      adapter.getContacts().get(groupPosition).getNumber(childPosition).toggle();
      checked_text.setChecked(adapter.getContacts().get(groupPosition).getNumber(childPosition).isSelected());
      return true;
    }
  }
);
  this.exchangeKeys.setOnClickListener(new OnClickListener(){
    public void onClick(    final View v){
      ExchangeKey.keyDialog=ProgressDialog.show(ManageContactsActivity.this,""String_Node_Str"",""String_Node_Str"",true,false);
      keyThread.startThread(ManageContactsActivity.this,adapter.getContacts());
      ExchangeKey.keyDialog.setOnDismissListener(new OnDismissListener(){
        public void onDismiss(        final DialogInterface dialog){
          ManageContactsActivity.this.startThread();
        }
      }
);
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(final Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.setContentView(R.layout.contact);
  this.extendableList=(ExpandableListView)this.findViewById(R.id.contacts_list);
  this.listView=(ListView)this.findViewById(R.id.empty_list);
  this.exchangeKeys=(Button)this.findViewById(R.id.exchange_keys);
  this.extendableList.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Toast.makeText(getBaseContext(),""String_Node_Str"" + String.valueOf(position),Toast.LENGTH_SHORT).show();
      Toast.makeText(getBaseContext(),""String_Node_Str"" + String.valueOf(id),Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
  this.listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    final AdapterView<?> parent,    final View view,    final int position,    final long id){
      AddContact.addContact=true;
      AddContact.editTc=null;
      ManageContactsActivity.this.startActivity(new Intent(ManageContactsActivity.this.getBaseContext(),AddContact.class));
    }
  }
);
  this.extendableList.setOnChildClickListener(new OnChildClickListener(){
    public boolean onChildClick(    final ExpandableListView parent,    final View v,    final int groupPosition,    final int childPosition,    final long id){
      final CheckedTextView checked_text=(CheckedTextView)v.findViewById(R.id.trust_name);
      adapter.getContacts().get(groupPosition).getNumber(childPosition).toggle();
      checked_text.setChecked(adapter.getContacts().get(groupPosition).getNumber(childPosition).isSelected());
      return true;
    }
  }
);
  this.exchangeKeys.setOnClickListener(new OnClickListener(){
    public void onClick(    final View v){
      ExchangeKey.keyDialog=ProgressDialog.show(ManageContactsActivity.this,""String_Node_Str"",""String_Node_Str"",true,false);
      keyThread.startThread(ManageContactsActivity.this,adapter.getContacts());
      ExchangeKey.keyDialog.setOnDismissListener(new OnDismissListener(){
        public void onDismiss(        final DialogInterface dialog){
          ManageContactsActivity.this.startThread();
        }
      }
);
    }
  }
);
}",0.9170605930382468
187370,"public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  AddContact.addContact=false;
  AddContact.editTc=ManageContactsActivity.this.tc.get(position);
  ManageContactsActivity.this.startActivity(new Intent(ManageContactsActivity.this,AddContact.class));
  return true;
}","public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  Toast.makeText(getBaseContext(),""String_Node_Str"" + String.valueOf(position),Toast.LENGTH_SHORT).show();
  Toast.makeText(getBaseContext(),""String_Node_Str"" + String.valueOf(id),Toast.LENGTH_SHORT).show();
  return true;
}",0.3986928104575163
187371,"/** 
 * Reinitialises the list to ensure contacts that are trusted are selected.
 */
private void initList(){
  for (int i=0; i < tc.size(); i++) {
    if (trusted[i]) {
      listView.setItemChecked(i,true);
    }
 else {
      listView.setItemChecked(i,false);
    }
  }
}","/** 
 * Reinitializes the list to ensure contacts that are trusted are selected.
 */
private void initList(){
  for (int i=0; i < tc.size(); i++) {
    if (trusted[i]) {
      listView.setItemChecked(i,true);
    }
 else {
      listView.setItemChecked(i,false);
    }
  }
}",0.9963503649635036
187372,"/** 
 * Used to toggle the contact from being in or out of the  trusted state.
 * @param position : int, the position on the list of contacts.
 * @param add : boolean, if true the contact will be added.If false the contact will be removed.
 */
public void change(int position,boolean add){
  if (add) {
    tc.get(position).setPublicKey();
  }
 else {
    tc.get(position).clearPublicKey();
  }
  MessageService.dba.updateKey(tc.get(position),tc.get(position).getANumber());
}","/** 
 * Used to toggle the contact from being in or out of the  trusted state.
 * @param position : int, the position on the list of contacts.
 * @param add : boolean, if true the contact will be added.If false the contact will be removed.
 */
public void change(int position,boolean add){
  if (add) {
  }
 else {
  }
  MessageService.dba.updateKey(tc.get(position),tc.get(position).getANumber());
}",0.91324200913242
187373,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      if (MessageService.dba == null || Prephase3Activity.sharedPrefs == null) {
        MessageService.dba=new DBAccessor(context);
        Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(context);
      }
      String address=messages[0].getOriginatingAddress();
      String secretMessage=null;
      if (MessageService.dba.inDatabase(address)) {
        if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
          Vibrator vibrator;
          vibrator=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
          String value=Prephase3Activity.sharedPrefs.getString(""String_Node_Str"",VIBRATOR_LENTH);
          vibrator.vibrate(Long.valueOf(value));
        }
        if (MessageService.dba.isTrustedContact((address)) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
          try {
            SMSUtility.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
            Message newMessage=null;
            if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
              newMessage=new Message(messages[0].getMessageBody(),true,false);
              MessageService.dba.addNewMessage(newMessage,address,true);
            }
            secretMessage=Encryption.aes_decrypt(MessageService.dba.getRow(SMSUtility.format(address)).getPublicKey(),messages[0].getMessageBody());
            SMSUtility.sendToSelf(context,address,secretMessage,Prephase3Activity.INBOX);
            newMessage=new Message(secretMessage,true,false);
            MessageService.dba.addNewMessage(newMessage,address,true);
          }
 catch (          Exception e) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            e.printStackTrace();
          }
        }
 else {
          SMSUtility.sendToSelf(context,address,messages[0].getMessageBody(),Prephase3Activity.INBOX);
          Message newMessage=new Message(messages[0].getMessageBody(),true,false);
          MessageService.dba.addNewMessage(newMessage,address,true);
        }
        Prephase3Activity.updateList(context,Prephase3Activity.messageViewActive);
        MessageService.contentTitle=SMSUtility.format(address);
        if (secretMessage != null) {
          MessageService.contentText=secretMessage;
        }
 else {
          MessageService.contentText=messages[0].getMessageBody();
        }
        Intent serviceIntent=new Intent(context,MessageService.class);
        context.startService(serviceIntent);
        this.abortBroadcast();
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      if (MessageService.dba == null || Prephase3Activity.sharedPrefs == null) {
        MessageService.dba=new DBAccessor(context);
        Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(context);
      }
      String address=messages[0].getOriginatingAddress();
      String secretMessage=null;
      if (MessageService.dba.inDatabase(address)) {
        if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
          Vibrator vibrator;
          vibrator=(Vibrator)context.getSystemService(Context.VIBRATOR_SERVICE);
          String value=Prephase3Activity.sharedPrefs.getString(""String_Node_Str"",VIBRATOR_LENTH);
          vibrator.vibrate(Long.valueOf(value));
        }
        if (MessageService.dba.isTrustedContact((address)) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
          try {
            SMSUtility.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
            Message newMessage=null;
            if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
              newMessage=new Message(messages[0].getMessageBody(),true,false);
              MessageService.dba.addNewMessage(newMessage,address,true);
            }
            secretMessage=Encryption.aes_decrypt(MessageService.dba.getRow(SMSUtility.format(address)).getNumber(SMSUtility.format(address)).getPublicKey(),messages[0].getMessageBody());
            SMSUtility.sendToSelf(context,address,secretMessage,Prephase3Activity.INBOX);
            newMessage=new Message(secretMessage,true,false);
            MessageService.dba.addNewMessage(newMessage,address,true);
          }
 catch (          Exception e) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            e.printStackTrace();
          }
        }
 else {
          SMSUtility.sendToSelf(context,address,messages[0].getMessageBody(),Prephase3Activity.INBOX);
          Message newMessage=new Message(messages[0].getMessageBody(),true,false);
          MessageService.dba.addNewMessage(newMessage,address,true);
        }
        Prephase3Activity.updateList(context,Prephase3Activity.messageViewActive);
        MessageService.contentTitle=SMSUtility.format(address);
        if (secretMessage != null) {
          MessageService.contentText=secretMessage;
        }
 else {
          MessageService.contentText=messages[0].getMessageBody();
        }
        Intent serviceIntent=new Intent(context,MessageService.class);
        context.startService(serviceIntent);
        this.abortBroadcast();
      }
    }
  }
}",0.9937023533311236
187374,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(MessageService.notificationIntent);
  }
 else   if (this.getIntent().hasExtra(Prephase3Activity.selectedNumberIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(Prephase3Activity.selectedNumberIntent);
  }
 else {
    finish();
  }
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.messageViewActive=true;
  boolean isTrusted=MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber);
  messageEvent=new MessageBoxWatcher(this,R.id.word_count,isTrusted);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=MessageService.dba.getSMSList(Prephase3Activity.selectedNumber);
  int unreadCount=MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber);
  Toast.makeText(this,String.valueOf(unreadCount),Toast.LENGTH_SHORT).show();
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2,unreadCount);
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  if (MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber) > 0) {
    MessageService.dba.updateMessageCount(Prephase3Activity.selectedNumber,0);
    if (MessageService.mNotificationManager != null) {
      MessageService.mNotificationManager.cancel(MessageService.INDEX);
    }
  }
  contact_name=MessageService.dba.getRow(Prephase3Activity.selectedNumber).getName();
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final int item_num=position;
      AlertDialog.Builder popup_builder=new AlertDialog.Builder(MessageView.this);
      popup_builder.setTitle(contact_name).setItems(options,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          final String[] messageValue=(String[])list2.getItemAtPosition(item_num);
          Toast.makeText(MessageView.this,messageValue[1],Toast.LENGTH_SHORT).show();
          if (which == 0) {
            if (messageValue[0].equals(""String_Node_Str"")) {
              sendMessage(Prephase3Activity.selectedNumber,messageValue[1]);
            }
          }
 else           if (which == 1) {
            MessageService.dba.deleteMessage(Long.valueOf(messageValue[3]));
            updateList(MessageView.this);
          }
 else           if (which == 2) {
          }
 else           if (which == 3) {
            phoneBox=new AutoCompleteTextView(getBaseContext());
            List<String> contact=null;
            if (tc == null) {
              tc=MessageService.dba.getAllRows();
            }
            if (tc != null) {
              if (contact == null) {
                contact=SMSUtility.contactDisplayMaker(tc);
              }
            }
 else {
              contact=null;
            }
            ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),R.layout.auto_complete_list_item,contact);
            phoneBox.setAdapter(adapter);
            AlertDialog.Builder contact_builder=new AlertDialog.Builder(MessageView.this);
            contact_builder.setTitle(""String_Node_Str"").setCancelable(true).setView(phoneBox).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                String[] info=phoneBox.getText().toString().split(""String_Node_Str"");
                boolean invalid=false;
                if (info != null) {
                  if (info.length == 2 && info[1] != null) {
                    if (SMSUtility.isANumber(info[1])) {
                      sendMessage(info[1],messageValue[1]);
                    }
 else {
                      invalid=true;
                    }
                  }
 else {
                    String num=phoneBox.getText().toString();
                    if (SMSUtility.isANumber(num)) {
                      sendMessage(num,messageValue[1]);
                    }
 else {
                      invalid=true;
                    }
                  }
                }
                if (invalid) {
                  Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                }
              }
            }
);
            AlertDialog contact_alert=contact_builder.create();
            popup_alert.cancel();
            contact_alert.show();
          }
        }
      }
).setCancelable(true);
      popup_alert=popup_builder.create();
      popup_alert.show();
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  InputFilter[] FilterArray=new InputFilter[1];
  if (isTrusted) {
    FilterArray[0]=new InputFilter.LengthFilter(SMSUtility.ENCRYPTED_MESSAGE_LENGTH);
  }
 else {
    FilterArray[0]=new InputFilter.LengthFilter(SMSUtility.MESSAGE_LENGTH);
  }
  messageBox.setFilters(FilterArray);
  messageBox.addTextChangedListener(messageEvent);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      sendMessage(Prephase3Activity.selectedNumber,messageBox.getText().toString());
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(MessageService.notificationIntent);
  }
 else   if (this.getIntent().hasExtra(Prephase3Activity.selectedNumberIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(Prephase3Activity.selectedNumberIntent);
  }
 else {
    finish();
  }
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.messageViewActive=true;
  boolean isTrusted=MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber);
  messageEvent=new MessageBoxWatcher(this,R.id.word_count,isTrusted);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=MessageService.dba.getSMSList(Prephase3Activity.selectedNumber);
  int unreadCount=MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber);
  Toast.makeText(this,String.valueOf(unreadCount),Toast.LENGTH_SHORT).show();
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2,unreadCount);
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  if (MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber) > 0) {
    MessageService.dba.updateMessageCount(Prephase3Activity.selectedNumber,0);
    if (MessageService.mNotificationManager != null) {
      MessageService.mNotificationManager.cancel(MessageService.INDEX);
    }
  }
  contact_name=MessageService.dba.getRow(Prephase3Activity.selectedNumber).getName();
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final int item_num=position;
      AlertDialog.Builder popup_builder=new AlertDialog.Builder(MessageView.this);
      popup_builder.setTitle(contact_name).setItems(options,new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int which){
          final String[] messageValue=(String[])list2.getItemAtPosition(item_num);
          if (which == 0) {
            MessageService.dba.deleteMessage(Long.valueOf(messageValue[3]));
            updateList(MessageView.this);
          }
 else           if (which == 1) {
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else           if (which == 2) {
            phoneBox=new AutoCompleteTextView(getBaseContext());
            List<String> contact=null;
            if (tc == null) {
              tc=MessageService.dba.getAllRows();
            }
            if (tc != null) {
              if (contact == null) {
                contact=SMSUtility.contactDisplayMaker(tc);
              }
            }
 else {
              contact=null;
            }
            ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),R.layout.auto_complete_list_item,contact);
            phoneBox.setAdapter(adapter);
            AlertDialog.Builder contact_builder=new AlertDialog.Builder(MessageView.this);
            contact_builder.setTitle(""String_Node_Str"").setCancelable(true).setView(phoneBox).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int which){
                String[] info=phoneBox.getText().toString().split(""String_Node_Str"");
                boolean invalid=false;
                if (info != null) {
                  if (info.length == 2 && info[1] != null) {
                    if (SMSUtility.isANumber(info[1])) {
                      sendMessage(info[1],messageValue[1]);
                    }
 else {
                      invalid=true;
                    }
                  }
 else {
                    String num=phoneBox.getText().toString();
                    if (SMSUtility.isANumber(num)) {
                      sendMessage(num,messageValue[1]);
                    }
 else {
                      invalid=true;
                    }
                  }
                }
                if (invalid) {
                  Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
                }
              }
            }
);
            AlertDialog contact_alert=contact_builder.create();
            popup_alert.cancel();
            contact_alert.show();
          }
        }
      }
).setCancelable(true);
      popup_alert=popup_builder.create();
      popup_alert.show();
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  InputFilter[] FilterArray=new InputFilter[1];
  if (isTrusted) {
    FilterArray[0]=new InputFilter.LengthFilter(SMSUtility.ENCRYPTED_MESSAGE_LENGTH);
  }
 else {
    FilterArray[0]=new InputFilter.LengthFilter(SMSUtility.MESSAGE_LENGTH);
  }
  messageBox.setFilters(FilterArray);
  messageBox.addTextChangedListener(messageEvent);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      sendMessage(Prephase3Activity.selectedNumber,messageBox.getText().toString());
    }
  }
);
}",0.9374658158614404
187375,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final int item_num=position;
  AlertDialog.Builder popup_builder=new AlertDialog.Builder(MessageView.this);
  popup_builder.setTitle(contact_name).setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final String[] messageValue=(String[])list2.getItemAtPosition(item_num);
      Toast.makeText(MessageView.this,messageValue[1],Toast.LENGTH_SHORT).show();
      if (which == 0) {
        if (messageValue[0].equals(""String_Node_Str"")) {
          sendMessage(Prephase3Activity.selectedNumber,messageValue[1]);
        }
      }
 else       if (which == 1) {
        MessageService.dba.deleteMessage(Long.valueOf(messageValue[3]));
        updateList(MessageView.this);
      }
 else       if (which == 2) {
      }
 else       if (which == 3) {
        phoneBox=new AutoCompleteTextView(getBaseContext());
        List<String> contact=null;
        if (tc == null) {
          tc=MessageService.dba.getAllRows();
        }
        if (tc != null) {
          if (contact == null) {
            contact=SMSUtility.contactDisplayMaker(tc);
          }
        }
 else {
          contact=null;
        }
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),R.layout.auto_complete_list_item,contact);
        phoneBox.setAdapter(adapter);
        AlertDialog.Builder contact_builder=new AlertDialog.Builder(MessageView.this);
        contact_builder.setTitle(""String_Node_Str"").setCancelable(true).setView(phoneBox).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            String[] info=phoneBox.getText().toString().split(""String_Node_Str"");
            boolean invalid=false;
            if (info != null) {
              if (info.length == 2 && info[1] != null) {
                if (SMSUtility.isANumber(info[1])) {
                  sendMessage(info[1],messageValue[1]);
                }
 else {
                  invalid=true;
                }
              }
 else {
                String num=phoneBox.getText().toString();
                if (SMSUtility.isANumber(num)) {
                  sendMessage(num,messageValue[1]);
                }
 else {
                  invalid=true;
                }
              }
            }
            if (invalid) {
              Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
            }
          }
        }
);
        AlertDialog contact_alert=contact_builder.create();
        popup_alert.cancel();
        contact_alert.show();
      }
    }
  }
).setCancelable(true);
  popup_alert=popup_builder.create();
  popup_alert.show();
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final int item_num=position;
  AlertDialog.Builder popup_builder=new AlertDialog.Builder(MessageView.this);
  popup_builder.setTitle(contact_name).setItems(options,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int which){
      final String[] messageValue=(String[])list2.getItemAtPosition(item_num);
      if (which == 0) {
        MessageService.dba.deleteMessage(Long.valueOf(messageValue[3]));
        updateList(MessageView.this);
      }
 else       if (which == 1) {
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else       if (which == 2) {
        phoneBox=new AutoCompleteTextView(getBaseContext());
        List<String> contact=null;
        if (tc == null) {
          tc=MessageService.dba.getAllRows();
        }
        if (tc != null) {
          if (contact == null) {
            contact=SMSUtility.contactDisplayMaker(tc);
          }
        }
 else {
          contact=null;
        }
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(getBaseContext(),R.layout.auto_complete_list_item,contact);
        phoneBox.setAdapter(adapter);
        AlertDialog.Builder contact_builder=new AlertDialog.Builder(MessageView.this);
        contact_builder.setTitle(""String_Node_Str"").setCancelable(true).setView(phoneBox).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int which){
            String[] info=phoneBox.getText().toString().split(""String_Node_Str"");
            boolean invalid=false;
            if (info != null) {
              if (info.length == 2 && info[1] != null) {
                if (SMSUtility.isANumber(info[1])) {
                  sendMessage(info[1],messageValue[1]);
                }
 else {
                  invalid=true;
                }
              }
 else {
                String num=phoneBox.getText().toString();
                if (SMSUtility.isANumber(num)) {
                  sendMessage(num,messageValue[1]);
                }
 else {
                  invalid=true;
                }
              }
            }
            if (invalid) {
              Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
            }
          }
        }
);
        AlertDialog contact_alert=contact_builder.create();
        popup_alert.cancel();
        contact_alert.show();
      }
    }
  }
).setCancelable(true);
  popup_alert=popup_builder.create();
  popup_alert.show();
}",0.8867302052785924
187376,"public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.exchange:
    TrustedContact tc=MessageService.dba.getRow(SMSUtility.format(Prephase3Activity.selectedNumber));
  if (tc != null) {
    if (MessageService.dba.isTrustedContact(SMSUtility.format(Prephase3Activity.selectedNumber))) {
      tc.clearPublicKey();
      MessageService.dba.updateKey(tc,Prephase3Activity.selectedNumber);
    }
 else {
      tc.setPublicKey();
      MessageService.dba.updateKey(tc,Prephase3Activity.selectedNumber);
    }
  }
return true;
case R.id.delete:
return true;
default :
return super.onOptionsItemSelected(item);
}
}","public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.exchange:
    TrustedContact tc=MessageService.dba.getRow(SMSUtility.format(Prephase3Activity.selectedNumber));
  if (tc != null) {
    if (MessageService.dba.isTrustedContact(SMSUtility.format(Prephase3Activity.selectedNumber))) {
      tc.getNumber(Prephase3Activity.selectedNumber).clearPublicKey();
      MessageService.dba.updateKey(tc,Prephase3Activity.selectedNumber);
    }
 else {
      tc.getNumber(Prephase3Activity.selectedNumber).setPublicKey();
      MessageService.dba.updateKey(tc,Prephase3Activity.selectedNumber);
    }
  }
return true;
case R.id.delete:
return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.936046511627907
187377,"/** 
 * Sends a message as encrypted or plain text based on the contact's state.
 * @param number : String the number the text message is being sent to
 * @param text : String the text message
 * @param context : Context the context of the class
 * @return : boolean whether the message sent or not
 */
public static boolean sendMessage(String number,String text,Context context){
  try {
    if (MessageService.dba.isTrustedContact(number) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
      String encrypted=Encryption.aes_encrypt(MessageService.dba.getRow(format(number)).getPublicKey(),text);
      sendSMS(context,number,encrypted);
      if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
        sendToSelf(context,number,encrypted,Prephase3Activity.SENT);
        MessageService.dba.addNewMessage(new Message(encrypted,true,true),number,false);
      }
      sendToSelf(context,number,text,Prephase3Activity.SENT);
      MessageService.dba.addNewMessage(new Message(text,true,true),number,false);
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      sendSMS(context,number,text);
      sendToSelf(context,number,text,Prephase3Activity.SENT);
      MessageService.dba.addNewMessage(new Message(text,true,true),number,true);
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    return true;
  }
 catch (  Exception e) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    e.printStackTrace();
    return false;
  }
}","/** 
 * Sends a message as encrypted or plain text based on the contact's state.
 * @param number : String the number the text message is being sent to
 * @param text : String the text message
 * @param context : Context the context of the class
 * @return : boolean whether the message sent or not
 */
public static boolean sendMessage(String number,String text,Context context){
  try {
    if (MessageService.dba.isTrustedContact(number) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
      String encrypted=Encryption.aes_encrypt(MessageService.dba.getRow(format(number)).getNumber(format(number)).getPublicKey(),text);
      sendSMS(context,number,encrypted);
      if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
        sendToSelf(context,number,encrypted,Prephase3Activity.SENT);
        MessageService.dba.addNewMessage(new Message(encrypted,true,true),number,false);
      }
      sendToSelf(context,number,text,Prephase3Activity.SENT);
      MessageService.dba.addNewMessage(new Message(text,true,true),number,false);
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      sendSMS(context,number,text);
      sendToSelf(context,number,text,Prephase3Activity.SENT);
      MessageService.dba.addNewMessage(new Message(text,true,true),number,true);
      Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
    return true;
  }
 catch (  Exception e) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
    e.printStackTrace();
    return false;
  }
}",0.9917669411019632
187378,"/** 
 * Adding a message to the queue to be sent when there is service to send the message.  Once the message has been sent it will be removed from the queue.
 * @param number : String the number for the contact that the message will be sent to
 * @param message : String the message that will be sent to the contact with the given number.**Please note the message is not changed, it will be stored and sent as is.  
 */
public void addMessageToQueue(String number,String message){
  ContentValues cv=new ContentValues();
  cv.put(KEY_NUMBER,number);
  cv.put(KEY_MESSAGE,message);
  open();
  db.insert(SQLitehelper.QUEUE_TABLE_NAME,null,cv);
  close();
}","/** 
 * Adding a message to the queue to be sent when there is service to send the message.  Once the message has been sent it will be removed from the queue.
 * @param number : String the number for the contact that the message will be sent to
 * @param message : String the message that will be sent to the contact with the given number.**Please note the message is not changed, it will be stored and sent as is.  
 */
public void addMessageToQueue(String number,String message){
  long numberReference=getNumberId(number);
  ContentValues cv=new ContentValues();
  cv.put(KEY_NUMBER_REFERENCE,numberReference);
  cv.put(KEY_MESSAGE,message);
  open();
  db.insert(SQLitehelper.QUEUE_TABLE_NAME,null,cv);
  close();
}",0.954181818181818
187379,"public String[] getFirstInQueue(){
  open();
  Cursor cur=db.query(SQLitehelper.QUEUE_TABLE_NAME,new String[]{KEY_ID,KEY_NUMBER,KEY_MESSAGE},KEY_ID + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.QUEUE_TABLE_NAME+ ""String_Node_Str"",null,null,null,null);
  if (cur.moveToFirst()) {
    long id=cur.getLong(cur.getColumnIndex(KEY_ID));
    String[] queue=new String[2];
    queue[0]=cur.getString(cur.getColumnIndex(KEY_NUMBER));
    queue[1]=cur.getString(cur.getColumnIndex(KEY_MESSAGE));
    close(cur);
    deleteQueueEntry(id);
    return queue;
  }
  close(cur);
  return null;
}","public String[] getFirstInQueue(){
  open();
  Cursor cur=db.query(SQLitehelper.QUEUE_TABLE_NAME,new String[]{KEY_ID,KEY_NUMBER_REFERENCE,KEY_MESSAGE},KEY_ID + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.QUEUE_TABLE_NAME+ ""String_Node_Str"",null,null,null,null);
  if (cur.moveToFirst()) {
    long id=cur.getLong(cur.getColumnIndex(KEY_ID));
    String[] entry=new String[]{getNumber(cur.getLong(cur.getColumnIndex(KEY_NUMBER_REFERENCE))),cur.getString(cur.getColumnIndex(KEY_MESSAGE))};
    close(cur);
    return entry;
  }
  close(cur);
  return null;
}",0.8793840889649273
187380,"/** 
 * Sends the given message to the phone with the given number
 * @param number : String, the number of the phone that the message is sent to
 * @param message : String, the message, encrypted that will be sent to the contact
 */
public static void sendSMS(Context c,String number,String message){
  PendingIntent pi=PendingIntent.getActivity(c,0,new Intent(c,Object.class),0);
  sms.sendTextMessage(number,null,message,pi,null);
}","/** 
 * Sends the given message to the phone with the given number
 * @param number : String, the number of the phone that the message is sent to
 * @param message : String, the message, encrypted that will be sent to the contact
 */
public static void sendSMS(Context c,String number,String message,long id){
  String SENT=""String_Node_Str"";
  Intent intent=new Intent(SENT);
  intent.putExtra(NUMBER,number);
  intent.putExtra(MESSAGE,message);
  intent.putExtra(ID,id);
  PendingIntent sentPI=PendingIntent.getBroadcast(c,0,intent,PendingIntent.FLAG_CANCEL_CURRENT);
  c.registerReceiver(MS,new IntentFilter(SENT));
  SmsManager sms=SmsManager.getDefault();
  sms.sendTextMessage(number,null,message,sentPI,null);
}",0.6244579358196011
187381,"@Override public void handleMessage(Message msg){
  update();
  dialog.dismiss();
}","@Override public void handleMessage(Message msg){
  update();
  dialog.dismiss();
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR);
}",0.7124463519313304
187382,"public void run(){
  contact=MessageService.dba.getAllRowsLimited();
  if (contact != null) {
    names=new String[contact.size()];
    for (int i=0; i < contact.size(); i++) {
      names[i]=contact.get(i).getName();
    }
    arrayAp=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names);
  }
 else {
    names=new String[1];
    names[0]=""String_Node_Str"";
    arrayAp=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,names);
  }
  trusted=MessageService.dba.isTrustedContact(contact);
  handler.sendEmptyMessage(0);
}","public void run(){
  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_NOSENSOR);
  contact=MessageService.dba.getAllRowsLimited();
  if (contact != null) {
    names=new String[contact.size()];
    for (int i=0; i < contact.size(); i++) {
      names[i]=contact.get(i).getName();
    }
    arrayAp=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names);
    trusted=MessageService.dba.isTrustedContact(contact);
  }
 else {
    names=new String[1];
    names[0]=""String_Node_Str"";
    arrayAp=new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,names);
  }
  handler.sendEmptyMessage(0);
}",0.8211046990931574
187383,"/** 
 * Creates a database that is read and write
 * @param c	: Context, where the database is available
 */
public DBAccessor(Context c){
  contactDatabase=new SQLitehelper(c);
  db=contactDatabase.getWritableDatabase();
  Toast.makeText(c,""String_Node_Str"",Toast.LENGTH_LONG).show();
  if (bookIsDefault(0) && sharedInfoIsDefault(0)) {
    Toast.makeText(c,""String_Node_Str"",Toast.LENGTH_LONG).show();
    addBookPath(0,DEFAULT_BOOK_PATH,DEFAULT_BOOK_INVERSE_PATH);
    addSharedInfo(0,DEFAULT_S1,DEFAULT_S2);
  }
}","/** 
 * Creates a database that is read and write
 * @param c	: Context, where the database is available
 */
public DBAccessor(Context c){
  contactDatabase=new SQLitehelper(c);
  db=contactDatabase.getWritableDatabase();
  if (bookIsDefault(0) && sharedInfoIsDefault(0)) {
    addBookPath(0,DEFAULT_BOOK_PATH,DEFAULT_BOOK_INVERSE_PATH);
    addSharedInfo(0,DEFAULT_S1,DEFAULT_S2);
  }
}",0.8561946902654868
187384,"/** 
 * TODO comment
 * @param number
 * @param lastMessage
 */
public Message(String message,boolean currentTime,boolean sent){
  this.setMessage(message);
  if (currentTime) {
    this.setDate();
  }
 else {
    this.setDate(0);
  }
  this.setSent(sent);
}","/** 
 * A class for storing messages retrieved or to be stored in the database. 
 * @param message The body of the message
 * @param currentTime Whether the date is set to the current time or not. If true date is set to current time, otherwise date is set to 0
 * @param sent Whether the message was sent or receivedIf sent = true then the message was sent otherwise the message was received
 */
public Message(String message,boolean currentTime,boolean sent){
  this.setMessage(message);
  if (currentTime) {
    this.setDate();
  }
 else {
    this.setDate(0);
  }
  this.setSent(sent);
}",0.5424528301886793
187385,"/** 
 * TODO comment
 * @param sent
 */
public void setSent(boolean sent){
  this.sent=sent;
}","/** 
 * Set whether the message is sent or received
 * @param sent Whether the message is now sent or received.
 */
private void setSent(boolean sent){
  this.sent=sent;
}",0.6264150943396226
187386,"/** 
 * TODO comment
 * @return the lastMessage
 */
public String getMessage(){
  return message;
}","/** 
 * Get the message's body
 * @return The message's body
 */
public String getMessage(){
  return message;
}",0.7962085308056872
187387,"/** 
 * TODO comment set the date to the current time
 */
public void setDate(){
  Calendar calendar=Calendar.getInstance();
  this.date=calendar.getTimeInMillis();
}","/** 
 * Set the date the message was sent or received to the current time.
 */
private void setDate(){
  Calendar calendar=Calendar.getInstance();
  this.date=calendar.getTimeInMillis();
}",0.8361581920903954
187388,"/** 
 * TODO comment
 * @param currentTime
 * @return
 */
public static String millisToDate(long currentTime){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(currentTime);
  String date=calendar.get(Calendar.YEAR) + ""String_Node_Str"" + (calendar.getTime().getMonth() + 1)+ ""String_Node_Str""+ calendar.getTime().getDate();
  if (clockStyle && calendar.getTime().getHours() > 12) {
    date+=""String_Node_Str"" + (calendar.getTime().getHours() - 12);
  }
 else {
    date+=""String_Node_Str"" + calendar.getTime().getHours();
  }
  String minutes=""String_Node_Str"" + calendar.getTime().getMinutes();
  if (minutes.length() < 2) {
    minutes=""String_Node_Str"" + minutes;
  }
  date+=""String_Node_Str"" + minutes;
  if (calendar.get(Calendar.AM_PM) == 1) {
    date+=""String_Node_Str"";
  }
 else {
    date+=""String_Node_Str"";
  }
  return date;
}","/** 
 * Convert the current time in milliseconds to the current time formated as: YYYY/MM/DD HH:MM AM/PM
 * @param currentTime The current time in milliseconds
 * @return The current time formated.
 */
public static String millisToDate(long currentTime){
  Calendar calendar=Calendar.getInstance();
  calendar.setTimeInMillis(currentTime);
  String date=calendar.get(Calendar.YEAR) + ""String_Node_Str"" + (calendar.getTime().getMonth() + 1)+ ""String_Node_Str""+ calendar.getTime().getDate();
  if (clockStyle && calendar.getTime().getHours() > 12) {
    date+=""String_Node_Str"" + (calendar.getTime().getHours() - 12);
  }
 else {
    date+=""String_Node_Str"" + calendar.getTime().getHours();
  }
  String minutes=""String_Node_Str"" + calendar.getTime().getMinutes();
  if (minutes.length() < 2) {
    minutes=""String_Node_Str"" + minutes;
  }
  date+=""String_Node_Str"" + minutes;
  if (calendar.get(Calendar.AM_PM) == 1) {
    date+=""String_Node_Str"";
  }
 else {
    date+=""String_Node_Str"";
  }
  return date;
}",0.9113247863247864
187389,"/** 
 * TODO comment
 * @return the date
 */
public long getDate(){
  return date;
}","/** 
 * Get the date the message was sent or received
 * @return The date
 */
public long getDate(){
  return date;
}",0.7562189054726368
187390,"/** 
 * TODO comment
 * @return
 */
public boolean isSent(){
  return sent;
}","/** 
 * Check whether the message was sent or received
 * @return If the message was sent it will return true,otherwise false.
 */
public boolean isSent(){
  return sent;
}",0.5622489959839357
187391,"/** 
 * TODO comment
 * @return
 */
public int getSent(){
  if (sent) {
    return 2;
  }
 else {
    return 1;
  }
}","/** 
 * Get the send flag in terms of the native android messaging application this is more used to save messages back to the native application
 * @return The flag of whether the message was sent orreceived. If the message was sent the return will be 2, otherwise the return will be 1.
 */
public int getSent(){
  if (sent) {
    return 2;
  }
 else {
    return 1;
  }
}",0.3885480572597137
187392,"/** 
 * TODO comment
 * @param lastMessage the lastMessage to set
 */
public void setMessage(String message){
  this.message=message;
}","/** 
 * Set the message's body
 * @param message The new message body
 */
public void setMessage(String message){
  this.message=message;
}",0.8029197080291971
187393,"public void addUnreadMessageCount(){
  this.unreadMessageCount++;
}","/** 
 * Increment the number of messages unread
 */
public void addUnreadMessageCount(){
  this.unreadMessageCount++;
}",0.7204301075268817
187394,"public Message getMessage(int index){
  return this.messages.get(index);
}","/** 
 * Get the message given the index
 * @param index The index of the message desired
 * @return The message at the given index
 */
public Message getMessage(int index){
  return this.messages.get(index);
}",0.5229681978798587
187395,"/** 
 * @param type the type to set
 */
public void setType(int type){
  this.type=type;
}","/** 
 * Set the type of number
 * @param type The new type
 */
public void setType(int type){
  this.type=type;
}",0.8078817733990148
187396,"public ArrayList<Message> getMessages(){
  return this.messages;
}","/** 
 * Get the list of messages for the number
 * @return The list of messages
 */
public ArrayList<Message> getMessages(){
  return this.messages;
}",0.6111111111111112
187397,"/** 
 * @param number the number to set
 */
public void setNumber(String number){
  this.number=number;
}","/** 
 * Set the number
 * @param number The new number
 */
public void setNumber(String number){
  this.number=number;
}",0.8622222222222222
187398,"public void addMessage(Message newMessage){
  this.messages.add(newMessage);
}","/** 
 * Add a message to the list of messages for the number
 * @param newMessage The new message to add the list of messages
 */
public void addMessage(Message newMessage){
  this.messages.add(newMessage);
}",0.5454545454545454
187399,"/** 
 * @return the number
 */
public String getNumber(){
  return number;
}","/** 
 * Get the number
 * @return The number
 */
public String getNumber(){
  return number;
}",0.8823529411764706
187400,"/** 
 * Date not set
 * @param number
 */
public Number(String number){
  this.setNumber(number);
  this.setType(DBAccessor.OTHER_INDEX);
  this.messages=new ArrayList<Message>();
}","/** 
 * A class used to store information from the numbers table
 * @param number A number for the contact
 */
public Number(String number){
  this.setNumber(number);
  this.setType(DBAccessor.OTHER_INDEX);
  this.messages=new ArrayList<Message>();
}",0.7842227378190255
187401,"/** 
 * @return the type
 */
public int getType(){
  if (type > DBAccessor.LENGTH) {
    return DBAccessor.OTHER_INDEX;
  }
  return type;
}","/** 
 * Get the type of number
 * @return The type of number (the index for it)
 */
public int getType(){
  if (type > DBAccessor.LENGTH) {
    return DBAccessor.OTHER_INDEX;
  }
  return type;
}",0.8298507462686567
187402,"public int getUnreadMessageCount(){
  return unreadMessageCount;
}","/** 
 * Get the number of messages currently unread
 * @return The current count of unread messages
 */
public int getUnreadMessageCount(){
  return unreadMessageCount;
}",0.559322033898305
187403,"public void resetUnreadMessageCount(){
  this.unreadMessageCount=0;
}","/** 
 * Reset the number of messages unread to 0
 */
public void resetUnreadMessageCount(){
  this.unreadMessageCount=0;
}",0.7225130890052356
187404,"public void setUnreadMessageCount(int unreadMessageCount){
  this.unreadMessageCount=unreadMessageCount;
}","/** 
 * Set the number of unread messages
 * @param unreadMessageCount The new number of messages unread
 */
public void setUnreadMessageCount(int unreadMessageCount){
  this.unreadMessageCount=unreadMessageCount;
}",0.660436137071651
187405,"/** 
 * Add a message to the database, only a limited number of messages are stored in the database.
 * @param reference : long, the id of the number that the message came from or was sent to.
 * @param message : Message, a message object containing all the information for the message.
 */
private void addMessageRow(long reference,Message message){
  ContentValues cv=new ContentValues();
  cv.put(KEY_REFERENCE,reference);
  cv.put(KEY_MESSAGE,message.getMessage());
  cv.put(KEY_DATE,message.getDate());
  cv.put(KEY_SENT,message.getSent());
  open();
  Cursor cur=db.query(SQLitehelper.MESSAGES_TABLE_NAME,new String[]{""String_Node_Str"" + KEY_MESSAGE + ""String_Node_Str""},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst() && cur.getInt(0) >= LIMIT) {
    db.update(SQLitehelper.MESSAGES_TABLE_NAME,cv,KEY_DATE + ""String_Node_Str"" + ""String_Node_Str""+ KEY_DATE+ ""String_Node_Str""+ SQLitehelper.MESSAGES_TABLE_NAME+ ""String_Node_Str"",null);
  }
 else {
    db.insert(SQLitehelper.MESSAGES_TABLE_NAME,null,cv);
  }
  close(cur);
}","/** 
 * Add a message to the database, only a limited number of messages are stored in the database.
 * @param reference : long, the id of the number that the message came from or was sent to.
 * @param message : Message, a message object containing all the information for the message.
 */
private void addMessageRow(long reference,Message message){
  ContentValues cv=new ContentValues();
  cv.put(KEY_REFERENCE,reference);
  cv.put(KEY_MESSAGE,message.getMessage());
  cv.put(KEY_DATE,message.getDate());
  cv.put(KEY_SENT,message.getSent());
  open();
  Cursor cur=db.query(SQLitehelper.MESSAGES_TABLE_NAME,new String[]{""String_Node_Str"" + KEY_MESSAGE + ""String_Node_Str""},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst() && cur.getInt(0) >= LIMIT) {
    db.update(SQLitehelper.MESSAGES_TABLE_NAME,cv,KEY_ID + ""String_Node_Str"" + ""String_Node_Str""+ SQLitehelper.MESSAGES_TABLE_NAME+ ""String_Node_Str""+ KEY_DATE+ ""String_Node_Str""+ ""String_Node_Str""+ KEY_DATE+ ""String_Node_Str""+ SQLitehelper.MESSAGES_TABLE_NAME+ ""String_Node_Str"",null);
  }
 else {
    db.insert(SQLitehelper.MESSAGES_TABLE_NAME,null,cv);
  }
  close(cur);
}",0.8785046728971962
187406,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(MessageService.notificationIntent);
  }
 else   if (this.getIntent().hasExtra(Prephase3Activity.selectedNumberIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(Prephase3Activity.selectedNumberIntent);
  }
 else {
    finish();
  }
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=MessageService.dba.getSMSList(Prephase3Activity.selectedNumber);
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2,MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber));
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  if (MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber) > 0) {
    MessageService.dba.updateMessageCount(Prephase3Activity.selectedNumber,0);
    if (MessageService.mNotificationManager != null) {
      MessageService.mNotificationManager.cancel(MessageService.INDEX);
    }
  }
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String text=messageBox.getText().toString();
      if (Prephase3Activity.selectedNumber.length() > 0 && text.length() > 0) {
        messages.setCount(0);
        try {
          messageBox.setText(""String_Node_Str"");
          if (MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            String encrypted=Encryption.aes_encrypt(MessageService.dba.getRow(SMSUtility.format(Prephase3Activity.selectedNumber)).getPublicKey(),text);
            SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,encrypted);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,encrypted,Prephase3Activity.SENT);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
              MessageService.dba.addNewMessage(new Message(encrypted,true,true),Prephase3Activity.selectedNumber,true);
            }
            MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,text);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          updateList(getBaseContext());
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(MessageView.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (this.getIntent().hasExtra(MessageService.notificationIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(MessageService.notificationIntent);
  }
 else   if (this.getIntent().hasExtra(Prephase3Activity.selectedNumberIntent)) {
    Prephase3Activity.selectedNumber=this.getIntent().getStringExtra(Prephase3Activity.selectedNumberIntent);
  }
 else {
    finish();
  }
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=MessageService.dba.getSMSList(Prephase3Activity.selectedNumber);
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2,MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber));
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  if (MessageService.dba.getUnreadMessageCount(Prephase3Activity.selectedNumber) > 0) {
    MessageService.dba.updateMessageCount(Prephase3Activity.selectedNumber,0);
    if (MessageService.mNotificationManager != null) {
      MessageService.mNotificationManager.cancel(MessageService.INDEX);
    }
  }
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String text=messageBox.getText().toString();
      if (Prephase3Activity.selectedNumber.length() > 0 && text.length() > 0) {
        messages.setCount(0);
        messageBox.setText(""String_Node_Str"");
        try {
          if (MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            String encrypted=Encryption.aes_encrypt(MessageService.dba.getRow(SMSUtility.format(Prephase3Activity.selectedNumber)).getPublicKey(),text);
            SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,encrypted);
            if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
              Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,encrypted,Prephase3Activity.SENT);
              MessageService.dba.addNewMessage(new Message(encrypted,true,true),Prephase3Activity.selectedNumber,true);
            }
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,text);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          updateList(getBaseContext());
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
      }
    }
  }
);
}",0.864367816091954
187407,"public void onClick(DialogInterface dialog,int id){
}","public void onClick(View v){
  String text=messageBox.getText().toString();
  if (Prephase3Activity.selectedNumber.length() > 0 && text.length() > 0) {
    messages.setCount(0);
    messageBox.setText(""String_Node_Str"");
    try {
      if (MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
        String encrypted=Encryption.aes_encrypt(MessageService.dba.getRow(SMSUtility.format(Prephase3Activity.selectedNumber)).getPublicKey(),text);
        SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,encrypted);
        if (Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
          Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,encrypted,Prephase3Activity.SENT);
          MessageService.dba.addNewMessage(new Message(encrypted,true,true),Prephase3Activity.selectedNumber,true);
        }
        Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
        MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        SMSUtility.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,text);
        Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
        MessageService.dba.addNewMessage(new Message(text,true,true),Prephase3Activity.selectedNumber,true);
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
      updateList(getBaseContext());
    }
 catch (    Exception e) {
      Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
      e.printStackTrace();
    }
  }
 else {
  }
}",0.0247805885389778
187408,"/** 
 * Sends the given message to the phone with the given number
 * @param number : String, the number of the phone that the message is sent to
 * @param message : String, the message, encrypted that will be sent to the contact
 */
public static void sendSMS(Context c,String number,String message){
  PendingIntent pi=PendingIntent.getActivity(c,0,new Intent(c,Object.class),0);
  SmsManager sms=SmsManager.getDefault();
  sms.sendTextMessage(number,null,message,pi,null);
}","/** 
 * Sends the given message to the phone with the given number
 * @param number : String, the number of the phone that the message is sent to
 * @param message : String, the message, encrypted that will be sent to the contact
 */
public static void sendSMS(Context c,String number,String message){
  PendingIntent pi=PendingIntent.getActivity(c,0,new Intent(c,Object.class),0);
  sms.sendTextMessage(number,null,message,pi,null);
}",0.8552631578947368
187409,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (contentTitle != null && contentText != null) {
    String address=contentTitle.toString();
    contentTitle=dba.getRow(address).getName();
    Notification notifyDetails=new Notification(R.drawable.ic_launcher,contentTitle + ""String_Node_Str"" + contentText,System.currentTimeMillis());
    Intent notifyIntent=null;
    PendingIntent in=null;
    if (MessageReceiver.myActivityStarted && Prephase3Activity.selectedNumber == null) {
      notifyIntent=new Intent(getApplicationContext(),MessageView.class);
      notifyIntent.putExtra(notificationIntent,address);
      in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    }
 else     if (MessageReceiver.myActivityStarted && Prephase3Activity.selectedNumber != null) {
      notifyIntent=new Intent(getApplicationContext(),MessageView.class);
      notifyIntent.putExtra(notificationIntent,address);
      in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    }
 else {
      notifyIntent=new Intent(getApplicationContext(),Prephase3Activity.class);
      notifyIntent.putExtra(notificationIntent,address);
      in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    }
    notifyDetails.setLatestEventInfo(this,contentTitle,contentText,in);
    mNotificationManager.notify(INDEX,notifyDetails);
  }
  stopSelf();
  return Service.START_NOT_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (contentTitle != null && contentText != null) {
    Intent notifyIntent=null;
    PendingIntent in=null;
    Notification notifyDetails=null;
    String address=contentTitle.toString();
    if (dba.getUnreadMessageCount() > 1) {
      contentTitle=dba.getRow(address).getName();
      contentText=dba.getUnreadMessageCount() + ""String_Node_Str"";
      notifyDetails=new Notification(R.drawable.ic_launcher,contentTitle + ""String_Node_Str"" + contentText,System.currentTimeMillis());
      notifyIntent=new Intent(getApplicationContext(),Prephase3Activity.class);
      in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    }
 else {
      contentTitle=dba.getRow(address).getName();
      notifyDetails=new Notification(R.drawable.ic_launcher,contentTitle + ""String_Node_Str"" + contentText,System.currentTimeMillis());
      if (MessageReceiver.myActivityStarted && Prephase3Activity.selectedNumber == null) {
        notifyIntent=new Intent(getApplicationContext(),MessageView.class);
        notifyIntent.putExtra(notificationIntent,address);
        in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
      }
 else       if (MessageReceiver.myActivityStarted && Prephase3Activity.selectedNumber != null) {
        notifyIntent=new Intent(getApplicationContext(),MessageView.class);
        notifyIntent.putExtra(notificationIntent,address);
        in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
      }
 else {
        notifyIntent=new Intent(getApplicationContext(),Prephase3Activity.class);
        notifyIntent.putExtra(notificationIntent,address);
        in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
      }
    }
    notifyDetails.setLatestEventInfo(this,contentTitle,contentText,in);
    mNotificationManager.notify(INDEX,notifyDetails);
  }
  stopSelf();
  return Service.START_NOT_STICKY;
}",0.7678621073116486
187410,"public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.exchange:
    TrustedContact tc=MessageService.dba.getRow(ContactRetriever.format(Prephase3Activity.selectedNumber));
  if (tc != null) {
    if (MessageService.dba.isTrustedContact(ContactRetriever.format(Prephase3Activity.selectedNumber))) {
      tc.clearPublicKey();
      MessageService.dba.updateRow(tc,Prephase3Activity.selectedNumber);
    }
 else {
      tc.setPublicKey();
      MessageService.dba.updateRow(tc,Prephase3Activity.selectedNumber);
    }
  }
return true;
case R.id.delete:
return true;
default :
return super.onOptionsItemSelected(item);
}
}","public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.exchange:
    return true;
case R.id.delete:
  return true;
default :
return super.onOptionsItemSelected(item);
}
}",0.2621809744779582
187411,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.importcontacts);
  confirm=(Button)findViewById(R.id.confirm);
  importList=(ListView)findViewById(R.id.import_contact_list);
  tc=new ArrayList<TrustedContact>();
  ArrayList<Number> number;
  String name;
  String id;
  Uri mContacts=ContactsContract.Contacts.CONTENT_URI;
  Cursor cur=managedQuery(mContacts,new String[]{Contacts._ID,Contacts.DISPLAY_NAME,Contacts.HAS_PHONE_NUMBER},null,null,Contacts.DISPLAY_NAME);
  inDb=new ArrayList<Boolean>();
  if (cur.moveToFirst()) {
    do {
      number=new ArrayList<Number>();
      name=cur.getString(cur.getColumnIndex(Contacts.DISPLAY_NAME));
      id=cur.getString(cur.getColumnIndex(Contacts._ID));
      if (cur.getString(cur.getColumnIndex(Contacts.HAS_PHONE_NUMBER)).equalsIgnoreCase(""String_Node_Str"")) {
        Cursor pCur=getContentResolver().query(Phone.CONTENT_URI,new String[]{Phone.NUMBER,Phone.TYPE},Phone.CONTACT_ID + ""String_Node_Str"",new String[]{id},null);
        if (pCur.moveToFirst()) {
          do {
            String numb=(pCur.getString(pCur.getColumnIndex(Phone.NUMBER)));
            int type=pCur.getInt(pCur.getColumnIndex(Phone.TYPE));
            Uri uriSMSURI=Uri.parse(""String_Node_Str"");
            Cursor mCur=getContentResolver().query(uriSMSURI,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{ContactRetriever.format(numb),""String_Node_Str"" + ContactRetriever.format(numb),""String_Node_Str"" + ContactRetriever.format(numb)},""String_Node_Str"");
            if (mCur.moveToFirst()) {
              number.add(new Number(ContactRetriever.format(numb),type,mCur.getString(mCur.getColumnIndex(""String_Node_Str"")),mCur.getLong(mCur.getColumnIndex(""String_Node_Str""))));
            }
 else {
              number.add(new Number(ContactRetriever.format(numb),type));
            }
          }
 while (pCur.moveToNext());
        }
        pCur.close();
      }
      if (number != null) {
        if (!MessageService.dba.inDatabase(number)) {
          tc.add(new TrustedContact(name,number));
          inDb.add(false);
        }
      }
      number=null;
    }
 while (cur.moveToNext());
  }
  Uri uriSMSURI=Uri.parse(""String_Node_Str"");
  Cursor convCur=getContentResolver().query(uriSMSURI,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,""String_Node_Str"");
  Number newNumber;
  while (convCur.moveToNext()) {
    id=convCur.getString(convCur.getColumnIndex(""String_Node_Str""));
    newNumber=new Number(null,convCur.getString(convCur.getColumnIndex(""String_Node_Str"")));
    Cursor nCur=getContentResolver().query(Uri.parse(""String_Node_Str""),new String[]{""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{id},""String_Node_Str"");
    if (nCur.moveToFirst()) {
      newNumber.setNumber(ContactRetriever.format(nCur.getString(nCur.getColumnIndex(""String_Node_Str""))));
      newNumber.setDate(nCur.getLong(nCur.getColumnIndex(""String_Node_Str"")));
    }
 else {
      Cursor sCur=getContentResolver().query(Uri.parse(""String_Node_Str""),new String[]{""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{id},""String_Node_Str"");
      if (sCur.moveToFirst()) {
        newNumber.setNumber(ContactRetriever.format(sCur.getString(sCur.getColumnIndex(""String_Node_Str""))));
        newNumber.setDate(sCur.getLong(sCur.getColumnIndex(""String_Node_Str"")));
      }
    }
    if (!TrustedContact.isNumberUsed(tc,newNumber.getNumber()) && !MessageService.dba.inDatabase(newNumber.getNumber())) {
      tc.add(new TrustedContact(newNumber));
      inDb.add(false);
    }
  }
  if (tc != null && tc.size() > 0) {
    disable=false;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,getNames()));
    importList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    disable=true;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,getNames()));
  }
  confirm.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (!disable) {
        for (int i=0; i < tc.size(); i++) {
          if (inDb.get(i)) {
            MessageService.dba.addRow(tc.get(i));
          }
        }
        finish();
      }
    }
  }
);
  importList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!disable) {
        change(position);
      }
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.importcontacts);
  confirm=(Button)findViewById(R.id.confirm);
  importList=(ListView)findViewById(R.id.import_contact_list);
  tc=new ArrayList<TrustedContact>();
  ArrayList<Number> number;
  String name;
  String id;
  Uri mContacts=ContactsContract.Contacts.CONTENT_URI;
  Cursor cur=managedQuery(mContacts,new String[]{Contacts._ID,Contacts.DISPLAY_NAME,Contacts.HAS_PHONE_NUMBER},null,null,Contacts.DISPLAY_NAME);
  inDb=new ArrayList<Boolean>();
  if (cur.moveToFirst()) {
    do {
      number=new ArrayList<Number>();
      name=cur.getString(cur.getColumnIndex(Contacts.DISPLAY_NAME));
      id=cur.getString(cur.getColumnIndex(Contacts._ID));
      if (cur.getString(cur.getColumnIndex(Contacts.HAS_PHONE_NUMBER)).equalsIgnoreCase(""String_Node_Str"")) {
        Cursor pCur=getContentResolver().query(Phone.CONTENT_URI,new String[]{Phone.NUMBER,Phone.TYPE},Phone.CONTACT_ID + ""String_Node_Str"",new String[]{id},null);
        if (pCur.moveToFirst()) {
          do {
            String numb=(pCur.getString(pCur.getColumnIndex(Phone.NUMBER)));
            int type=pCur.getInt(pCur.getColumnIndex(Phone.TYPE));
            Uri uriSMSURI=Uri.parse(""String_Node_Str"");
            Cursor mCur=getContentResolver().query(uriSMSURI,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{ContactRetriever.format(numb),""String_Node_Str"" + ContactRetriever.format(numb),""String_Node_Str"" + ContactRetriever.format(numb)},""String_Node_Str"");
            if (mCur.moveToFirst()) {
              number.add(new Number(ContactRetriever.format(numb),type,mCur.getString(mCur.getColumnIndex(""String_Node_Str"")),mCur.getLong(mCur.getColumnIndex(""String_Node_Str""))));
            }
 else {
              number.add(new Number(ContactRetriever.format(numb),type));
            }
          }
 while (pCur.moveToNext());
        }
        pCur.close();
      }
      if (number != null) {
        if (!MessageService.dba.inDatabase(number)) {
          tc.add(new TrustedContact(name,number));
          inDb.add(false);
        }
      }
      number=null;
    }
 while (cur.moveToNext());
  }
  Uri uriSMSURI=Uri.parse(""String_Node_Str"");
  Cursor convCur=getContentResolver().query(uriSMSURI,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,""String_Node_Str"");
  Number newNumber;
  while (convCur.moveToNext()) {
    id=convCur.getString(convCur.getColumnIndex(""String_Node_Str""));
    newNumber=new Number(convCur.getString(convCur.getColumnIndex(""String_Node_Str"")));
    Cursor nCur=getContentResolver().query(Uri.parse(""String_Node_Str""),new String[]{""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{id},""String_Node_Str"");
    if (nCur.moveToFirst()) {
      newNumber.setNumber(ContactRetriever.format(nCur.getString(nCur.getColumnIndex(""String_Node_Str""))));
      newNumber.setDate(nCur.getLong(nCur.getColumnIndex(""String_Node_Str"")));
    }
 else {
      Cursor sCur=getContentResolver().query(Uri.parse(""String_Node_Str""),new String[]{""String_Node_Str"",""String_Node_Str""},""String_Node_Str"",new String[]{id},""String_Node_Str"");
      if (sCur.moveToFirst()) {
        newNumber.setNumber(ContactRetriever.format(sCur.getString(sCur.getColumnIndex(""String_Node_Str""))));
        newNumber.setDate(sCur.getLong(sCur.getColumnIndex(""String_Node_Str"")));
      }
    }
    if (!TrustedContact.isNumberUsed(tc,newNumber.getNumber()) && !MessageService.dba.inDatabase(newNumber.getNumber())) {
      tc.add(new TrustedContact(newNumber));
      inDb.add(false);
    }
  }
  if (tc != null && tc.size() > 0) {
    disable=false;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,getNames()));
    importList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    disable=true;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,getNames()));
  }
  confirm.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (!disable) {
        for (int i=0; i < tc.size(); i++) {
          if (inDb.get(i)) {
            MessageService.dba.addRow(tc.get(i));
          }
        }
        finish();
      }
    }
  }
);
  importList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!disable) {
        change(position);
      }
    }
  }
);
}",0.9994531335447884
187412,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      if (MessageService.dba == null) {
        MessageService.dba=new DBAccessor(context);
      }
      String address=messages[0].getOriginatingAddress();
      String secretMessage=null;
      if (MessageService.dba.inDatabase(address)) {
        if (MessageService.dba.isTrustedContact((address))) {
          try {
            Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
            secretMessage=Encryption.aes_decrypt(MessageService.dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody());
            Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),secretMessage,Prephase3Activity.INBOX);
            MessageService.dba.updateLastMessage(new Number(address,1,secretMessage));
            Prephase3Activity.updateList(context);
          }
 catch (          Exception e) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            e.printStackTrace();
          }
        }
 else {
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
          Prephase3Activity.updateList(context);
        }
        MessageService.contentTitle=MessageService.dba.getRow(ContactRetriever.format(address)).getName();
        if (secretMessage != null) {
          MessageService.contentText=secretMessage;
        }
 else {
          MessageService.contentText=messages[0].getMessageBody();
        }
        Intent serviceIntent=new Intent(context,MessageService.class);
        context.startService(serviceIntent);
        this.abortBroadcast();
      }
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      if (MessageService.dba == null) {
        MessageService.dba=new DBAccessor(context);
      }
      String address=messages[0].getOriginatingAddress();
      String secretMessage=null;
      if (MessageService.dba.inDatabase(address)) {
        if (MessageService.dba.isTrustedContact((address))) {
          try {
            Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
            secretMessage=Encryption.aes_decrypt(MessageService.dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody());
            Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),secretMessage,Prephase3Activity.INBOX);
            MessageService.dba.updateLastMessage(new Number(address,secretMessage));
            Prephase3Activity.updateList(context);
          }
 catch (          Exception e) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            e.printStackTrace();
          }
        }
 else {
          Prephase3Activity.sendToSelf(context,address,messages[0].getMessageBody(),Prephase3Activity.INBOX);
          MessageService.dba.updateLastMessage(new Number(address,messages[0].getMessageBody()));
          Prephase3Activity.updateList(context);
        }
        MessageService.contentTitle=ContactRetriever.format(address);
        if (secretMessage != null) {
          MessageService.contentText=secretMessage;
        }
 else {
          MessageService.contentText=messages[0].getMessageBody();
        }
        Intent serviceIntent=new Intent(context,MessageService.class);
        context.startService(serviceIntent);
        this.abortBroadcast();
      }
    }
  }
}",0.8380862597218949
187413,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Notification notifyDetails=new Notification(R.drawable.ic_launcher,contentTitle + ""String_Node_Str"" + contentText,System.currentTimeMillis());
  Intent notifyIntent=new Intent(this,Prephase3Activity.class);
  PendingIntent in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
  notifyDetails.setLatestEventInfo(this,contentTitle,contentText,in);
  mNotificationManager.notify(SIMPLE_NOTFICATION_ID,notifyDetails);
  stopSelf();
  return Service.START_NOT_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  if (contentTitle != null && contentText != null) {
    int index=-1;
    for (int i=0; i < MessageView.newMessages.size(); i++) {
      if (MessageView.newMessages.get(i).equalsIgnoreCase(contentTitle.toString())) {
        index=i;
      }
    }
    if (index == -1) {
      index=MessageView.newMessages.size();
      MessageView.newMessages.add(contentTitle.toString());
    }
    Notification notifyDetails=new Notification(R.drawable.ic_launcher,contentTitle + ""String_Node_Str"" + contentText,System.currentTimeMillis());
    Intent notifyIntent=new Intent(this,Prephase3Activity.class);
    PendingIntent in=PendingIntent.getActivity(this,0,notifyIntent,android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
    notifyDetails.setLatestEventInfo(this,contentTitle,contentText,in);
    mNotificationManager.notify(index,notifyDetails);
  }
  stopSelf();
  return Service.START_NOT_STICKY;
}",0.6589147286821705
187414,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=ContactRetriever.getPersonSMS(this);
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2);
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String text=messageBox.getText().toString();
      if (Prephase3Activity.selectedNumber.length() > 0 && text.length() > 0) {
        try {
          messageBox.setText(""String_Node_Str"");
          if (MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            ContactRetriever.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(Prephase3Activity.selectedNumber)).getPublicKey(),text));
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(Prephase3Activity.selectedNumber)).getPublicKey(),text),Prephase3Activity.SENT);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(Prephase3Activity.selectedNumber,1,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            ContactRetriever.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,text);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(Prephase3Activity.selectedNumber,1,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          updateList(getBaseContext());
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(MessageView.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messageviewer);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  list2=(ListView)findViewById(R.id.message_list);
  msgList2=ContactRetriever.getPersonSMS(this);
  messages=new MessageAdapter(this,R.layout.listview_full_item_row,msgList2);
  list2.setAdapter(messages);
  list2.setItemsCanFocus(false);
  list2.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String text=messageBox.getText().toString();
      if (Prephase3Activity.selectedNumber.length() > 0 && text.length() > 0) {
        try {
          messageBox.setText(""String_Node_Str"");
          if (MessageService.dba.isTrustedContact(Prephase3Activity.selectedNumber) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            ContactRetriever.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(Prephase3Activity.selectedNumber)).getPublicKey(),text));
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(Prephase3Activity.selectedNumber)).getPublicKey(),text),Prephase3Activity.SENT);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(Prephase3Activity.selectedNumber,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            ContactRetriever.sendSMS(getBaseContext(),Prephase3Activity.selectedNumber,text);
            Prephase3Activity.sendToSelf(getBaseContext(),Prephase3Activity.selectedNumber,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(Prephase3Activity.selectedNumber,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          updateList(getBaseContext());
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(MessageView.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}",0.9993783027665528
187415,"/** 
 * Date not set
 * @param number
 * @param lastMessage
 */
public Number(String number,String lastMessage){
  this.setNumber(number);
  this.setLastMessage(lastMessage);
  this.setType(DBAccessor.OTHER_INDEX);
  this.setDate(0);
}","/** 
 * Date set
 * @param number
 * @param lastMessage
 */
public Number(String number,String lastMessage){
  this.setNumber(number);
  this.setLastMessage(lastMessage);
  this.setType(DBAccessor.OTHER_INDEX);
  this.setDate();
}",0.989247311827957
187416,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_message);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  newCont=new TrustedContact();
  tc=MessageService.dba.getAllRows();
  phoneBox=(AutoCompleteTextView)findViewById(R.id.new_message_number);
  List<String> contact;
  if (tc != null) {
    contact=ContactRetriever.contactDisplayMaker(tc);
  }
 else {
    contact=null;
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.auto_complete_list_item,contact);
  phoneBox.setAdapter(adapter);
  phoneBox.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      String[] info=s.toString().split(""String_Node_Str"");
      if (!info[0].equalsIgnoreCase(s.toString())) {
        newCont.setName(info[0]);
        newCont.setNumber(0,info[1]);
      }
 else {
        if (newCont.isNumbersEmpty()) {
          newCont.addNumber(info[0]);
        }
 else {
          newCont.setNumber(0,info[0]);
        }
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.new_message_send);
  messageBox=(EditText)findViewById(R.id.new_message_message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final String number=newCont.getNumber(0);
      String text=messageBox.getText().toString();
      if (number.length() > 0 && text.length() > 0) {
        try {
          if (MessageService.dba.isTrustedContact(number) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            ContactRetriever.sendSMS(getBaseContext(),number,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(number)).getPublicKey(),text));
            Prephase3Activity.sendToSelf(getBaseContext(),number,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(number)).getPublicKey(),text),Prephase3Activity.SENT);
            Prephase3Activity.sendToSelf(getBaseContext(),number,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(ContactRetriever.format(number),1,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            ContactRetriever.sendSMS(getBaseContext(),number,text);
            Prephase3Activity.sendToSelf(getBaseContext(),number,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(ContactRetriever.format(number),1,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          if (!MessageService.dba.inDatabase(number)) {
            AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
            builder.setMessage(""String_Node_Str"" + number + ""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                AddContact.editTc=new TrustedContact(""String_Node_Str"");
                AddContact.editTc.addNumber(number);
                AddContact.addContact=true;
                SendMessageActivity.this.startActivity(new Intent(SendMessageActivity.this,AddContact.class));
                finish();
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
          messageBox.setText(""String_Node_Str"");
          phoneBox.setText(""String_Node_Str"");
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_message);
  MessageService.dba=new DBAccessor(this);
  Prephase3Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  newCont=new TrustedContact();
  tc=MessageService.dba.getAllRows();
  phoneBox=(AutoCompleteTextView)findViewById(R.id.new_message_number);
  List<String> contact;
  if (tc != null) {
    contact=ContactRetriever.contactDisplayMaker(tc);
  }
 else {
    contact=null;
  }
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.auto_complete_list_item,contact);
  phoneBox.setAdapter(adapter);
  phoneBox.addTextChangedListener(new TextWatcher(){
    public void afterTextChanged(    Editable s){
      String[] info=s.toString().split(""String_Node_Str"");
      if (!info[0].equalsIgnoreCase(s.toString())) {
        newCont.setName(info[0]);
        newCont.setNumber(0,info[1]);
      }
 else {
        if (newCont.isNumbersEmpty()) {
          newCont.addNumber(info[0]);
        }
 else {
          newCont.setNumber(0,info[0]);
        }
      }
    }
    public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.new_message_send);
  messageBox=(EditText)findViewById(R.id.new_message_message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final String number=newCont.getNumber(0);
      String text=messageBox.getText().toString();
      if (number.length() > 0 && text.length() > 0) {
        try {
          if (MessageService.dba.isTrustedContact(number) && Prephase3Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            ContactRetriever.sendSMS(getBaseContext(),number,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(number)).getPublicKey(),text));
            Prephase3Activity.sendToSelf(getBaseContext(),number,Encryption.aes_encrypt(MessageService.dba.getRow(ContactRetriever.format(number)).getPublicKey(),text),Prephase3Activity.SENT);
            Prephase3Activity.sendToSelf(getBaseContext(),number,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(ContactRetriever.format(number),text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            ContactRetriever.sendSMS(getBaseContext(),number,text);
            Prephase3Activity.sendToSelf(getBaseContext(),number,text,Prephase3Activity.SENT);
            MessageService.dba.updateLastMessage(new Number(ContactRetriever.format(number),text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          if (!MessageService.dba.inDatabase(number)) {
            AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
            builder.setMessage(""String_Node_Str"" + number + ""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                AddContact.editTc=new TrustedContact(""String_Node_Str"");
                AddContact.editTc.addNumber(number);
                AddContact.addContact=true;
                SendMessageActivity.this.startActivity(new Intent(SendMessageActivity.this,AddContact.class));
                finish();
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
          messageBox.setText(""String_Node_Str"");
          phoneBox.setText(""String_Node_Str"");
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}",0.9995757318625372
187417,"@Override public void onReceive(Context context,Intent intent){
  Intent serviceIntent=new Intent(context,MessageService.class);
  context.startService(serviceIntent);
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String address=messages[0].getOriginatingAddress();
      if (MessageService.dba.isTrustedContact((address))) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        TrustedContact trustedContact=MessageService.dba.getRow(ContactRetriever.format(address));
        try {
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
          String secretMessage=Encryption.aes_decrypt(trustedContact.getPublicKey(),messages[0].getMessageBody());
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),secretMessage,Prephase3Activity.INBOX);
          MessageService.dba.UpdateLastMessage(address,secretMessage);
          Prephase3Activity.updateList(context);
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
        Prephase3Activity.updateList(context);
      }
    }
  }
  this.abortBroadcast();
}","@Override public void onReceive(Context context,Intent intent){
  Intent serviceIntent=new Intent(context,MessageService.class);
  context.startService(serviceIntent);
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      if (MessageService.dba == null) {
        MessageService.dba=new DBAccessor(context);
      }
      String address=messages[0].getOriginatingAddress();
      if (MessageService.dba.isTrustedContact((address))) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
          String secretMessage=Encryption.aes_decrypt(MessageService.dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody());
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),secretMessage,Prephase3Activity.INBOX);
          MessageService.dba.UpdateLastMessage(address,secretMessage);
          Prephase3Activity.updateList(context);
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
        Prephase3Activity.updateList(context);
      }
    }
  }
  this.abortBroadcast();
}",0.93701171875
187418,"@Override public void onCreate(){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  dba=new DBAccessor(this);
}","@Override public void onCreate(){
  dba=new DBAccessor(this);
}",0.6528497409326425
187419,"@Override public int onStartCommand(Intent intent,int flags,int startId){
  Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  return Service.START_STICKY;
}","@Override public int onStartCommand(Intent intent,int flags,int startId){
  return Service.START_STICKY;
}",0.7598566308243727
187420,"protected void onDestroy(){
  MessageService.dba.close();
  MessageReceiver.myActivityStarted=false;
  super.onDestroy();
}","protected void onDestroy(){
  MessageService.dba.close();
  stopService(new Intent(this,MessageService.class));
  MessageReceiver.myActivityStarted=false;
  super.onDestroy();
}",0.82
187421,"/** 
 * Used for updating the shared information, will not delete the default row
 * @param reference
 * @param bookPath
 * @param bookInversePath
 */
public void updateSharedInfo(int reference,String s1,String s2){
  if (s1 != null || s2 != null) {
    resetSharedInfo(reference);
    addSharedInfo(reference,s1,s2);
  }
}","/** 
 * Used for updating the shared information, will not delete the default row
 * @param reference
 * @param bookPath
 * @param bookInversePath
 */
public void updateSharedInfo(int reference,String s1,String s2){
  if ((s1 != null || s2 != null) && (!s1.equalsIgnoreCase(DEFAULT_S1) || !s2.equalsIgnoreCase(DEFAULT_S2))) {
    resetSharedInfo(reference);
    addSharedInfo(reference,s1,s2);
  }
}",0.8947368421052632
187422,"/** 
 * Used for updating the book paths, will not delete the default row
 * @param reference
 * @param bookPath
 * @param bookInversePath
 */
public void updateBookPaths(int reference,String bookPath,String bookInversePath){
  if (bookPath != null || bookInversePath != null) {
    resetBookPath(reference);
    addBookPath(reference,bookPath,bookInversePath);
  }
}","/** 
 * Used for updating the book paths, will not delete the default row
 * @param reference
 * @param bookPath
 * @param bookInversePath
 */
public void updateBookPaths(int reference,String bookPath,String bookInversePath){
  if ((bookPath != null || bookInversePath != null) && (!bookPath.equalsIgnoreCase(DEFAULT_BOOK_PATH) || !bookInversePath.equalsIgnoreCase(DEFAULT_BOOK_INVERSE_PATH))) {
    resetBookPath(reference);
    addBookPath(reference,bookPath,bookInversePath);
  }
}",0.8625146886016452
187423,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String address=messages[0].getOriginatingAddress();
      if (Prephase3Activity.dba.isTrustedContact((address))) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),Encryption.aes_decrypt(Prephase3Activity.dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody()),Prephase3Activity.INBOX);
          Prephase3Activity.updateList(context);
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
      }
    }
  }
  this.abortBroadcast();
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String address=messages[0].getOriginatingAddress();
      if (Prephase3Activity.dba.isTrustedContact((address))) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        TrustedContact trustedContact=Prephase3Activity.dba.getRow(ContactRetriever.format(address));
        try {
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
          String secretMessage=Encryption.aes_decrypt(trustedContact.getPublicKey(),messages[0].getMessageBody());
          Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),secretMessage,Prephase3Activity.INBOX);
          Prephase3Activity.updateList(context);
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        Prephase3Activity.sendToSelf(context,messages[0].getOriginatingAddress(),messages[0].getMessageBody(),Prephase3Activity.INBOX);
        Prephase3Activity.updateList(context);
      }
    }
  }
  this.abortBroadcast();
}",0.8869565217391304
187424,"/** 
 * Used to retrieve the book paths
 * @param reference
 * @return : String[2] the book path, and the book inverse path 
 */
public String[] getSharedInfo(int reference){
  open();
  Cursor cur=db.query(SQLitehelper.SHARED_INFO_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_SHARED_INFO_1,KEY_SHARED_INFO_2},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst()) {
    String sharedInfo[]=new String[]{cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_1)),cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_2))};
    close(cur);
    return sharedInfo;
  }
 else {
    cur.close();
    Cursor dCur=db.query(SQLitehelper.SHARED_INFO_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_SHARED_INFO_1,KEY_SHARED_INFO_2},KEY_REFERENCE + ""String_Node_Str"" + 0,null,null,null,null);
    if (dCur.moveToFirst()) {
      String sharedInfo[]=new String[]{cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_1)),cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_2))};
      close(dCur);
      return sharedInfo;
    }
    close(dCur);
  }
  return null;
}","/** 
 * Used to retrieve the book paths
 * @param reference
 * @return : String[2] the book path, and the book inverse path 
 */
public String[] getSharedInfo(int reference){
  boolean open=true;
  if (!db.isOpen()) {
    open=false;
    open();
  }
  Cursor cur=db.query(SQLitehelper.SHARED_INFO_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_SHARED_INFO_1,KEY_SHARED_INFO_2},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst()) {
    String sharedInfo[]=new String[]{cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_1)),cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_2))};
    if (open) {
      cur.close();
    }
 else {
      close(cur);
    }
    return sharedInfo;
  }
 else {
    cur.close();
    Cursor dCur=db.query(SQLitehelper.SHARED_INFO_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_SHARED_INFO_1,KEY_SHARED_INFO_2},KEY_REFERENCE + ""String_Node_Str"" + 0,null,null,null,null);
    if (dCur.moveToFirst()) {
      String sharedInfo[]=new String[]{cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_1)),cur.getString(cur.getColumnIndex(KEY_SHARED_INFO_2))};
      if (open) {
        dCur.close();
      }
 else {
        close(dCur);
      }
      return sharedInfo;
    }
    if (open) {
      dCur.close();
    }
 else {
      close(dCur);
    }
  }
  return null;
}",0.8466722830665543
187425,"/** 
 * Used to retrieve the book paths
 * @param reference
 * @return : String[2] the book path, and the book inverse path 
 */
public String[] getBookPath(int reference){
  open();
  Cursor cur=db.query(SQLitehelper.BOOK_PATHS_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_BOOK_PATH,KEY_BOOK_INVERSE_PATH},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst()) {
    String bookPaths[]=new String[]{cur.getString(cur.getColumnIndex(KEY_BOOK_PATH)),cur.getString(cur.getColumnIndex(KEY_BOOK_INVERSE_PATH))};
    close(cur);
    return bookPaths;
  }
 else {
    cur.close();
    Cursor dCur=db.query(SQLitehelper.BOOK_PATHS_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_BOOK_PATH,KEY_BOOK_INVERSE_PATH},KEY_REFERENCE + ""String_Node_Str"" + 0,null,null,null,null);
    if (dCur.moveToFirst()) {
      String bookPaths[]=new String[]{cur.getString(cur.getColumnIndex(KEY_BOOK_PATH)),cur.getString(cur.getColumnIndex(KEY_BOOK_INVERSE_PATH))};
      close(dCur);
      return bookPaths;
    }
    close(dCur);
  }
  return null;
}","/** 
 * Used to retrieve the book paths
 * @param reference
 * @return : String[2] the book path, and the book inverse path 
 */
public String[] getBookPath(int reference){
  boolean open=true;
  if (!db.isOpen()) {
    open=false;
    open();
  }
  Cursor cur=db.query(SQLitehelper.BOOK_PATHS_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_BOOK_PATH,KEY_BOOK_INVERSE_PATH},KEY_REFERENCE + ""String_Node_Str"" + reference,null,null,null,null);
  if (cur.moveToFirst()) {
    String bookPaths[]=new String[]{cur.getString(cur.getColumnIndex(KEY_BOOK_PATH)),cur.getString(cur.getColumnIndex(KEY_BOOK_INVERSE_PATH))};
    if (open) {
      cur.close();
    }
 else {
      close(cur);
    }
    return bookPaths;
  }
 else {
    cur.close();
    Cursor dCur=db.query(SQLitehelper.BOOK_PATHS_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_BOOK_PATH,KEY_BOOK_INVERSE_PATH},KEY_REFERENCE + ""String_Node_Str"" + 0,null,null,null,null);
    if (dCur.moveToFirst()) {
      String bookPaths[]=new String[]{cur.getString(cur.getColumnIndex(KEY_BOOK_PATH)),cur.getString(cur.getColumnIndex(KEY_BOOK_INVERSE_PATH))};
      if (open) {
        dCur.close();
      }
 else {
        close(dCur);
      }
      return bookPaths;
    }
    if (open) {
      dCur.close();
    }
 else {
      close(dCur);
    }
  }
  return null;
}",0.8456318914334181
187426,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  list=(ListView)findViewById(R.id.conversation_list);
  msgList=ContactRetriever.getSMS(this);
  MessageAdapter adapter=new MessageAdapter(this,R.layout.listview_item_row,msgList);
  list.setAdapter(adapter);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  BroadcastReceiver SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String address=messages[0].getOriginatingAddress();
          if (dba.isTrustedContact((address))) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),messages[0].getMessageBody(),INBOX);
              sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),Encryption.aes_decrypt(dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody()),INBOX);
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              updateList();
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),messages[0].getMessageBody(),INBOX);
            updateList();
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  list=(ListView)findViewById(R.id.conversation_list);
  msgList=ContactRetriever.getSMS(this);
  MessageAdapter adapter=new MessageAdapter(this,R.layout.listview_item_row,msgList);
  list.setAdapter(adapter);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String address=messages[0].getOriginatingAddress();
          if (dba.isTrustedContact((address))) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),messages[0].getMessageBody(),INBOX);
              sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),Encryption.aes_decrypt(dba.getRow(ContactRetriever.format(address)).getPublicKey(),messages[0].getMessageBody()),INBOX);
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
              updateList();
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            sendToSelf(getBaseContext(),messages[0].getOriginatingAddress(),messages[0].getMessageBody(),INBOX);
            updateList();
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}",0.9966555183946488
187427,"protected void onDestroy(){
  dba.close();
  super.onDestroy();
}","protected void onDestroy(){
  dba.close();
  unregisterReceiver(SMSbr);
  super.onDestroy();
}",0.8176100628930818
187428,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_contact);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  listView=(ListView)findViewById(R.id.contact_numbers);
  addNumber=(Button)findViewById(R.id.add_new_number);
  if (!addContact) {
    contactEdit=editTc;
  }
 else {
    contactEdit=new TrustedContact(""String_Node_Str"");
  }
  update(null);
  addNumber.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final EditText input=new EditText(getBaseContext());
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          String value=input.getText().toString();
          update(value);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    final int position,    long id){
      if (contactEdit != null) {
        final EditText input=new EditText(getBaseContext());
        input.setText(contactEdit.getNumber(position));
        input.setInputType(InputType.TYPE_CLASS_PHONE);
        AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
        builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            contactEdit.setNumber(position,input.getText().toString());
            update(null);
            input.setText(""String_Node_Str"");
          }
        }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
  add=(Button)findViewById(R.id.add);
  contactName=(EditText)findViewById(R.id.contact_name);
  if (contactEdit != null) {
    if (contactEdit.getName() != null) {
      contactName.setText(contactEdit.getName());
    }
  }
  add.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String name=contactName.getText().toString();
      boolean empty=false;
      if (name == null) {
        if (!contactEdit.isNumbersEmpty()) {
          name=contactEdit.getANumber();
        }
 else {
          empty=true;
        }
      }
{
        contactEdit.setName(name);
      }
      if (!empty && contactEdit.getName().length() > 0 && !contactEdit.isNumbersEmpty()) {
        if (addContact) {
          if (!Prephase2Activity.dba.inDatabase(contactEdit.getANumber())) {
            Prephase2Activity.dba.addRow(contactEdit);
            contactEdit=null;
            editTc=null;
            finish();
          }
 else {
            AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
            builder.setMessage(""String_Node_Str"").setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
        }
 else {
          Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getNumber(0));
          contactEdit=null;
          editTc=null;
          finish();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
        builder.setMessage(""String_Node_Str"").setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_contact);
  getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
  listView=(ListView)findViewById(R.id.contact_numbers);
  addNumber=(Button)findViewById(R.id.add_new_number);
  if (!addContact) {
    contactEdit=editTc;
  }
 else {
    contactEdit=new TrustedContact(""String_Node_Str"");
  }
  update(null);
  addNumber.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final EditText input=new EditText(getBaseContext());
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          String value=input.getText().toString();
          update(value);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
          dialog.cancel();
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    final int position,    long id){
      if (contactEdit != null) {
        final EditText input=new EditText(getBaseContext());
        input.setText(contactEdit.getNumber(position));
        input.setInputType(InputType.TYPE_CLASS_PHONE);
        AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
        builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
            contactEdit.setNumber(position,input.getText().toString());
            update(null);
            input.setText(""String_Node_Str"");
          }
        }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
            dialog.cancel();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
  add=(Button)findViewById(R.id.add);
  contactName=(EditText)findViewById(R.id.contact_name);
  if (contactEdit != null) {
    if (contactEdit.getName() != null) {
      contactName.setText(contactEdit.getName());
    }
  }
  add.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String name=contactName.getText().toString();
      boolean empty=false;
      if (name == null) {
        if (!contactEdit.isNumbersEmpty()) {
          name=contactEdit.getANumber();
        }
 else {
          empty=true;
        }
      }
{
        contactEdit.setName(name);
      }
      if (!empty && contactEdit.getName().length() > 0 && !contactEdit.isNumbersEmpty()) {
        if (addContact) {
          if (!Prephase2Activity.dba.inDatabase(contactEdit.getANumber())) {
            Prephase2Activity.dba.addRow(contactEdit);
            contactEdit=null;
            editTc=null;
            finish();
          }
 else {
            AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
            builder.setMessage(""String_Node_Str"").setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int whichButton){
                dialog.cancel();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
        }
 else {
          Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getNumber(0));
          contactEdit=null;
          editTc=null;
          finish();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
        builder.setMessage(""String_Node_Str"").setCancelable(true).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int whichButton){
            dialog.cancel();
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}",0.988131160732247
187429,"public void onClick(DialogInterface dialog,int whichButton){
}","public void onClick(DialogInterface dialog,int whichButton){
  dialog.cancel();
}",0.8671328671328671
187430,"public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  if (contactEdit != null) {
    final EditText input=new EditText(getBaseContext());
    input.setText(contactEdit.getNumber(position));
    input.setInputType(InputType.TYPE_CLASS_PHONE);
    AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
    builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        contactEdit.setNumber(position,input.getText().toString());
        update(null);
        input.setText(""String_Node_Str"");
      }
    }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}","public void onItemClick(AdapterView<?> parent,View view,final int position,long id){
  if (contactEdit != null) {
    final EditText input=new EditText(getBaseContext());
    input.setText(contactEdit.getNumber(position));
    input.setInputType(InputType.TYPE_CLASS_PHONE);
    AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
    builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int id){
        contactEdit.setNumber(position,input.getText().toString());
        update(null);
        input.setText(""String_Node_Str"");
      }
    }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
      public void onClick(      DialogInterface dialog,      int whichButton){
        dialog.cancel();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}",0.9870533402382186
187431,"private int getId(String number){
  open();
  Cursor cur=db.query(SQLitehelper.NUMBERS_TABLE_NAME,new String[]{KEY_REFERENCE},KEY_NUMBER + ""String_Node_Str"" + number,null,null,null,null);
  if (cur.moveToFirst()) {
    int id=cur.getInt(cur.getColumnIndex((KEY_REFERENCE)));
    close(cur);
    return id;
  }
  close(cur);
  return 0;
}","private int getId(String number){
  open();
  Cursor cur=db.rawQuery(""String_Node_Str"" + KEY_REFERENCE + ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_NUMBER+ ""String_Node_Str"",new String[]{number});
  if (cur.moveToFirst()) {
    int id=cur.getInt(cur.getColumnIndex((KEY_REFERENCE)));
    close(cur);
    return id;
  }
  close(cur);
  return 0;
}",0.3384615384615385
187432,"/** 
 * Access the information stored in the database of a contact who has a certain number with the columns: name, number, key, verified.
 * @param number : String the number of the contact to retrieve 
 * @return TrustedContact, the row of data.
 */
public TrustedContact getRow(String number){
  open();
  Cursor idCur=db.query(SQLitehelper.NUMBERS_TABLE_NAME,new String[]{KEY_REFERENCE,KEY_NUMBER},KEY_NUMBER + ""String_Node_Str"" + number,null,null,null,null);
  int id=0;
  if (idCur.moveToFirst()) {
    id=idCur.getInt(idCur.getColumnIndex(KEY_REFERENCE));
  }
  idCur.close();
  Cursor cur=db.query(SQLitehelper.TRUSTED_TABLE_NAME,null,KEY_ID + ""String_Node_Str"" + id,null,null,null,null);
  if (cur.moveToFirst()) {
    TrustedContact tc=new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getBlob(cur.getColumnIndex(KEY_PUBLIC_KEY)),cur.getBlob(cur.getColumnIndex(KEY_SIGNATURE)));
    Cursor pCur=db.query(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + SQLitehelper.NUMBERS_TABLE_NAME,new String[]{SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + KEY_NUMBER},SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_REFERENCE+ ""String_Node_Str""+ SQLitehelper.TRUSTED_TABLE_NAME+ ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ id,null,null,null,null);
    if (pCur.moveToFirst()) {
      do {
        tc.addNumber(pCur.getString(pCur.getColumnIndex(KEY_NUMBER)));
      }
 while (pCur.moveToNext());
      pCur.close();
    }
    close(cur);
    String columns[]=getBookPath(id);
    tc.setBookPath(columns[0]);
    tc.setBookInversePath(columns[1]);
    columns=getSharedInfo(id);
    tc.setSharedInfo1(columns[0]);
    tc.setSharedInfo2(columns[1]);
    return tc;
  }
  close(cur);
  return null;
}","/** 
 * Access the information stored in the database of a contact who has a certain number with the columns: name, number, key, verified.
 * @param number : String the number of the contact to retrieve 
 * @return TrustedContact, the row of data.
 */
public TrustedContact getRow(String number){
  open();
  Cursor idCur=db.rawQuery(""String_Node_Str"" + KEY_REFERENCE + ""String_Node_Str""+ KEY_NUMBER+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_NUMBER+ ""String_Node_Str"",new String[]{number});
  int id=0;
  if (idCur.moveToFirst()) {
    id=idCur.getInt(idCur.getColumnIndex(KEY_REFERENCE));
  }
  idCur.close();
  Cursor cur=db.query(SQLitehelper.TRUSTED_TABLE_NAME,null,KEY_ID + ""String_Node_Str"" + id,null,null,null,null);
  if (cur.moveToFirst()) {
    TrustedContact tc=new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getBlob(cur.getColumnIndex(KEY_PUBLIC_KEY)),cur.getBlob(cur.getColumnIndex(KEY_SIGNATURE)));
    Cursor pCur=db.query(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + SQLitehelper.NUMBERS_TABLE_NAME,new String[]{SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + KEY_NUMBER},SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_REFERENCE+ ""String_Node_Str""+ SQLitehelper.TRUSTED_TABLE_NAME+ ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ id,null,null,null,null);
    if (pCur.moveToFirst()) {
      do {
        tc.addNumber(pCur.getString(pCur.getColumnIndex(KEY_NUMBER)));
      }
 while (pCur.moveToNext());
      pCur.close();
    }
    close(cur);
    String columns[]=getBookPath(id);
    tc.setBookPath(columns[0]);
    tc.setBookInversePath(columns[1]);
    columns=getSharedInfo(id);
    tc.setSharedInfo1(columns[0]);
    tc.setSharedInfo2(columns[1]);
    return tc;
  }
  close(cur);
  return null;
}",0.9374492282696996
187433,"protected void onDestroy(){
  dba.close();
  unregisterReceiver(SMSbr);
  super.onDestroy();
}","protected void onDestroy(){
  dba.close();
  super.onDestroy();
}",0.8176100628930818
187434,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_contact);
  listView=(ListView)findViewById(R.id.contact_numbers);
  addNumber=(Button)findViewById(R.id.add_new_number);
  contactEdit=editTc;
  editTc=null;
  update(null);
  addNumber.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final EditText input=new EditText(getBaseContext());
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          String value=input.getText().toString();
          update(value);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  listView.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      return true;
    }
  }
);
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    final int position,    long id){
      final EditText input=new EditText(getBaseContext());
      input.setText(contactEdit.getNumber(position));
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          contactEdit.setNumber(position,input.getText().toString());
          update(null);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  add=(Button)findViewById(R.id.add);
  contactName=(EditText)findViewById(R.id.contact_name);
  if (contactEdit != null) {
    if (contactEdit.getName() != null) {
      contactName.setText(contactEdit.getName());
    }
  }
  add.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String name=contactName.getText().toString();
      if (name.length() > 0 && contactEdit.getPrimaryNumber().length() > 0) {
        Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getPrimaryNumber());
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        contactEdit=null;
        finish();
      }
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.add_contact);
  listView=(ListView)findViewById(R.id.contact_numbers);
  addNumber=(Button)findViewById(R.id.add_new_number);
  contactEdit=editTc;
  editTc=null;
  update(null);
  addNumber.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final EditText input=new EditText(getBaseContext());
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          String value=input.getText().toString();
          update(value);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  listView.setOnItemLongClickListener(new OnItemLongClickListener(){
    public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      return true;
    }
  }
);
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    final int position,    long id){
      final EditText input=new EditText(getBaseContext());
      input.setText(contactEdit.getNumber(position));
      input.setInputType(InputType.TYPE_CLASS_PHONE);
      AlertDialog.Builder builder=new AlertDialog.Builder(AddContact.this);
      builder.setMessage(""String_Node_Str"").setCancelable(true).setView(input).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int id){
          contactEdit.setNumber(position,input.getText().toString());
          update(null);
          input.setText(""String_Node_Str"");
        }
      }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
        public void onClick(        DialogInterface dialog,        int whichButton){
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
  }
);
  add=(Button)findViewById(R.id.add);
  contactName=(EditText)findViewById(R.id.contact_name);
  if (contactEdit != null) {
    if (contactEdit.getName() != null) {
      contactName.setText(contactEdit.getName());
    }
  }
  add.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String name=contactName.getText().toString();
      if (name.length() > 0 && !contactEdit.isNumbersEmpty()) {
        Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getNumber(0));
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        contactEdit=null;
        finish();
      }
    }
  }
);
}",0.9929824561403509
187435,"public void onClick(View v){
  String name=contactName.getText().toString();
  if (name.length() > 0 && contactEdit.getPrimaryNumber().length() > 0) {
    Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getPrimaryNumber());
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    contactEdit=null;
    finish();
  }
}","public void onClick(View v){
  String name=contactName.getText().toString();
  if (name.length() > 0 && !contactEdit.isNumbersEmpty()) {
    Prephase2Activity.dba.updateRow(contactEdit,contactEdit.getNumber(0));
    Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    contactEdit=null;
    finish();
  }
}",0.8869565217391304
187436,"@Override public View getView(int position,View convertView,ViewGroup parent){
  View row=convertView;
  ContactHolder holder=null;
  if (row == null) {
    LayoutInflater inflater=((Activity)context).getLayoutInflater();
    row=inflater.inflate(layoutResourceId,parent,false);
    holder=new ContactHolder();
    holder.number=(TextView)row.findViewById(R.id.stored_number);
    holder.primary=(TextView)row.findViewById(R.id.primary_number);
    row.setTag(holder);
  }
 else {
    holder=(ContactHolder)row.getTag();
  }
  String number=data.getNumber(position);
  if (number != null) {
    holder.number.setText(number);
    if (data.getPrimaryNumber().equalsIgnoreCase(number)) {
      holder.primary.setText(""String_Node_Str"");
    }
 else {
      holder.primary.setText(""String_Node_Str"");
    }
  }
  return row;
}","@Override public View getView(int position,View convertView,ViewGroup parent){
  View row=convertView;
  ContactHolder holder=null;
  if (row == null) {
    LayoutInflater inflater=((Activity)context).getLayoutInflater();
    row=inflater.inflate(layoutResourceId,parent,false);
    holder=new ContactHolder();
    holder.number=(TextView)row.findViewById(R.id.stored_number);
    holder.primary=(TextView)row.findViewById(R.id.primary_number);
    row.setTag(holder);
  }
 else {
    holder=(ContactHolder)row.getTag();
  }
  String number=data.getNumber(position);
  if (number != null) {
    holder.number.setText(number);
    holder.primary.setText(""String_Node_Str"");
  }
  return row;
}",0.8963696369636963
187437,"/** 
 * Get all of the rows in the database with the columns name, number, key, verified.	
 * @return : ArrayList<TrustedContact>, a list of all thecontacts in the database
 */
public ArrayList<TrustedContact> getAllRows(){
  open();
  Cursor cur=db.query(""String_Node_Str"",null,null,null,null,null,KEY_ID);
  ArrayList<TrustedContact> tc=new ArrayList<TrustedContact>();
  if (cur.moveToFirst()) {
    int i=0;
    do {
      tc.add(new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getString(cur.getColumnIndex(KEY_NUMBER)),cur.getString(cur.getColumnIndex(KEY_KEY)),cur.getInt(cur.getColumnIndex(KEY_VERIFIED))));
      int id=cur.getInt(cur.getColumnIndex(KEY_ID));
      Cursor pCur=db.query(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + SQLitehelper.NUMBERS_TABLE_NAME,new String[]{SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + KEY_NUMBER},SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_REFERENCE+ ""String_Node_Str""+ SQLitehelper.TRUSTED_TABLE_NAME+ ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ id,null,null,null,null);
      if (pCur.moveToFirst()) {
        do {
          tc.get(i).addNumber(pCur.getString(pCur.getColumnIndex(KEY_NUMBER)));
        }
 while (pCur.moveToNext());
        pCur.close();
        return tc;
      }
      i++;
    }
 while (cur.moveToNext());
    close(cur);
    return tc;
  }
  close(cur);
  return null;
}","/** 
 * Get all of the rows in the database with the columns name, number, key, verified.	
 * @return : ArrayList<TrustedContact>, a list of all thecontacts in the database
 */
public ArrayList<TrustedContact> getAllRows(){
  open();
  Cursor cur=db.query(SQLitehelper.TRUSTED_TABLE_NAME,null,null,null,null,null,KEY_ID);
  ArrayList<TrustedContact> tc=new ArrayList<TrustedContact>();
  if (cur.moveToFirst()) {
    int i=0;
    do {
      tc.add(new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getString(cur.getColumnIndex(KEY_NUMBER)),cur.getString(cur.getColumnIndex(KEY_KEY)),cur.getInt(cur.getColumnIndex(KEY_VERIFIED))));
      int id=cur.getInt(cur.getColumnIndex(KEY_ID));
      Cursor pCur=db.query(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + SQLitehelper.NUMBERS_TABLE_NAME,new String[]{SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + KEY_NUMBER},SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_REFERENCE+ ""String_Node_Str""+ SQLitehelper.TRUSTED_TABLE_NAME+ ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ id,null,null,null,null);
      if (pCur.moveToFirst()) {
        do {
          tc.get(i).addNumber(pCur.getString(pCur.getColumnIndex(KEY_NUMBER)));
        }
 while (pCur.moveToNext());
        pCur.close();
      }
      i++;
    }
 while (cur.moveToNext());
    close(cur);
    return tc;
  }
  close(cur);
  return null;
}",0.9771876064010896
187438,"public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.importcontacts);
  confirm=(Button)findViewById(R.id.confirm);
  importList=(ListView)findViewById(R.id.import_contact_list);
  ContentResolver cr=getContentResolver();
  tc=new ArrayList<TrustedContact>();
  ArrayList<String> number;
  String name;
  String columnsN[]=new String[]{Phone.NUMBER};
  String columnsC[]=new String[]{Contacts._ID,Contacts.DISPLAY_NAME,Contacts.HAS_PHONE_NUMBER};
  Uri mContacts=ContactsContract.Contacts.CONTENT_URI;
  Cursor cur=managedQuery(mContacts,columnsC,null,null,Contacts.DISPLAY_NAME);
  if (cur.moveToFirst()) {
    do {
      number=new ArrayList<String>();
      name=cur.getString(cur.getColumnIndex(Contacts.DISPLAY_NAME));
      String id=cur.getString(cur.getColumnIndex(Contacts._ID));
      if (cur.getString(cur.getColumnIndex(Contacts.HAS_PHONE_NUMBER)).equalsIgnoreCase(""String_Node_Str"")) {
        Cursor pCur=cr.query(Phone.CONTENT_URI,columnsN,Phone.CONTACT_ID + ""String_Node_Str"",new String[]{id},null);
        if (pCur.moveToFirst()) {
          do {
            number.add(pCur.getString(pCur.getColumnIndex(Phone.NUMBER)));
          }
 while (pCur.moveToNext());
        }
        pCur.close();
      }
      if (number != null) {
        if (!Prephase2Activity.dba.inDatabase(number)) {
          tc.add(new TrustedContact(name,-1,number));
        }
      }
      number=null;
    }
 while (cur.moveToNext());
  }
  if (tc != null && tc.size() > 0) {
    disable=false;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,getNames()));
    importList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    disable=true;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,getNames()));
  }
  confirm.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (!disable) {
        for (int i=0; i < tc.size(); i++) {
          if (tc.get(i).getVerified() == 0) {
            Prephase2Activity.dba.addRow(tc.get(i));
          }
        }
        finish();
      }
    }
  }
);
  importList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!disable) {
        change(position);
      }
    }
  }
);
}","public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.importcontacts);
  confirm=(Button)findViewById(R.id.confirm);
  importList=(ListView)findViewById(R.id.import_contact_list);
  ContentResolver cr=getContentResolver();
  tc=new ArrayList<TrustedContact>();
  ArrayList<String> number;
  String name;
  String columnsN[]=new String[]{Phone.NUMBER};
  String columnsC[]=new String[]{Contacts._ID,Contacts.DISPLAY_NAME,Contacts.HAS_PHONE_NUMBER};
  Uri mContacts=ContactsContract.Contacts.CONTENT_URI;
  Cursor cur=managedQuery(mContacts,columnsC,null,null,Contacts.DISPLAY_NAME);
  if (cur.moveToFirst()) {
    do {
      number=new ArrayList<String>();
      name=cur.getString(cur.getColumnIndex(Contacts.DISPLAY_NAME));
      String id=cur.getString(cur.getColumnIndex(Contacts._ID));
      if (cur.getString(cur.getColumnIndex(Contacts.HAS_PHONE_NUMBER)).equalsIgnoreCase(""String_Node_Str"")) {
        Cursor pCur=cr.query(Phone.CONTENT_URI,columnsN,Phone.CONTACT_ID + ""String_Node_Str"",new String[]{id},null);
        if (pCur.moveToFirst()) {
          do {
            number.add(ContactRetriever.format(pCur.getString(pCur.getColumnIndex(Phone.NUMBER))));
          }
 while (pCur.moveToNext());
        }
        pCur.close();
      }
      if (number != null) {
        if (!Prephase2Activity.dba.inDatabase(number)) {
          tc.add(new TrustedContact(name,-1,number));
        }
      }
      number=null;
    }
 while (cur.moveToNext());
  }
  if (tc != null && tc.size() > 0) {
    disable=false;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,getNames()));
    importList.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    disable=true;
    importList.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,getNames()));
  }
  confirm.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (!disable) {
        for (int i=0; i < tc.size(); i++) {
          if (tc.get(i).getVerified() == 0) {
            Prephase2Activity.dba.addRow(tc.get(i));
          }
        }
        finish();
      }
    }
  }
);
  importList.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (!disable) {
        change(position);
      }
    }
  }
);
}",0.9948654754569728
187439,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.contact);
  listView=(ListView)findViewById(R.id.contact_list);
  update();
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (tc != null) {
        if (Prephase2Activity.dba.isTrustedContact(tc.get(position).getPrimaryNumber())) {
          change(position,false);
          Toast.makeText(getApplicationContext(),""String_Node_Str"" + tc.get(position).getPrimaryNumber(),Toast.LENGTH_SHORT).show();
        }
 else {
          change(position,true);
          Toast.makeText(getApplicationContext(),""String_Node_Str"" + tc.get(position).getPrimaryNumber(),Toast.LENGTH_SHORT).show();
        }
      }
 else {
        startActivity(new Intent(getBaseContext(),AddContact.class));
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.contact);
  listView=(ListView)findViewById(R.id.contact_list);
  update();
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      if (tc != null) {
        if (Prephase2Activity.dba.isTrustedContact(tc.get(position).getANumber())) {
          change(position,false);
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 else {
          change(position,true);
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
 else {
        startActivity(new Intent(getBaseContext(),AddContact.class));
      }
    }
  }
);
}",0.9556962025316456
187440,"/** 
 * Reinitialises the list to ensure contacts that are trusted are selected.
 */
private void initList(){
  for (int i=0; i < tc.size(); i++) {
    if (Prephase2Activity.dba.isTrustedContact(tc.get(i).getPrimaryNumber())) {
      listView.setItemChecked(i,true);
    }
 else {
      listView.setItemChecked(i,false);
    }
  }
}","/** 
 * Reinitialises the list to ensure contacts that are trusted are selected.
 */
private void initList(){
  for (int i=0; i < tc.size(); i++) {
    if (Prephase2Activity.dba.isTrustedContact(tc.get(i).getANumber())) {
      listView.setItemChecked(i,true);
    }
 else {
      listView.setItemChecked(i,false);
    }
  }
}",0.9878419452887538
187441,"/** 
 * Used to toggle the contact from being in or out of the trusted state.
 * @param position : int, the position on the list ofcontacts.
 * @param add : boolean, if true the contact will beadded. If false the contact will be removed.
 */
public void change(int position,boolean add){
  if (add) {
    add(position);
  }
 else {
    remove(position);
  }
  Prephase2Activity.dba.updateRow(tc.get(position),tc.get(position).getPrimaryNumber());
}","/** 
 * Used to toggle the contact from being in or out of the trusted state.
 * @param position : int, the position on the list ofcontacts.
 * @param add : boolean, if true the contact will beadded. If false the contact will be removed.
 */
public void change(int position,boolean add){
  if (add) {
    add(position);
  }
 else {
    remove(position);
  }
  Prephase2Activity.dba.updateRow(tc.get(position),tc.get(position).getANumber());
}",0.991011235955056
187442,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (tc != null) {
    if (Prephase2Activity.dba.isTrustedContact(tc.get(position).getPrimaryNumber())) {
      change(position,false);
      Toast.makeText(getApplicationContext(),""String_Node_Str"" + tc.get(position).getPrimaryNumber(),Toast.LENGTH_SHORT).show();
    }
 else {
      change(position,true);
      Toast.makeText(getApplicationContext(),""String_Node_Str"" + tc.get(position).getPrimaryNumber(),Toast.LENGTH_SHORT).show();
    }
  }
 else {
    startActivity(new Intent(getBaseContext(),AddContact.class));
  }
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  if (tc != null) {
    if (Prephase2Activity.dba.isTrustedContact(tc.get(position).getANumber())) {
      change(position,false);
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      change(position,true);
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
 else {
    startActivity(new Intent(getBaseContext(),AddContact.class));
  }
}",0.9256637168141592
187443,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.remove_contacts);
  delete=(Button)findViewById(R.id.delete_cont);
  listView=(ListView)findViewById(R.id.removeable_contact_list);
  update();
  contact=new boolean[tc.size()];
  for (int i=0; i < tc.size(); i++) {
    contact[i]=false;
  }
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      toggle(position);
    }
  }
);
  delete.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (tc != null) {
        for (int i=0; i < tc.size(); i++) {
          Toast.makeText(getBaseContext(),""String_Node_Str"" + tc.get(i).getPrimaryNumber(),Toast.LENGTH_LONG);
          if (contact[i]) {
            Prephase2Activity.dba.removeRow(tc.get(i).getPrimaryNumber());
          }
        }
        update();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.remove_contacts);
  delete=(Button)findViewById(R.id.delete_cont);
  listView=(ListView)findViewById(R.id.removeable_contact_list);
  update();
  contact=new boolean[tc.size()];
  for (int i=0; i < tc.size(); i++) {
    contact[i]=false;
  }
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      toggle(position);
    }
  }
);
  delete.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (tc != null) {
        for (int i=0; i < tc.size(); i++) {
          if (contact[i]) {
            Prephase2Activity.dba.removeRow(tc.get(i).getPrimaryNumber());
          }
        }
        update();
      }
    }
  }
);
}",0.8822637695805963
187444,"public void onClick(View v){
  if (tc != null) {
    for (int i=0; i < tc.size(); i++) {
      Toast.makeText(getBaseContext(),""String_Node_Str"" + tc.get(i).getPrimaryNumber(),Toast.LENGTH_LONG);
      if (contact[i]) {
        Prephase2Activity.dba.removeRow(tc.get(i).getPrimaryNumber());
      }
    }
    update();
  }
}","public void onClick(View v){
  if (tc != null) {
    for (int i=0; i < tc.size(); i++) {
      if (contact[i]) {
        Prephase2Activity.dba.removeRow(tc.get(i).getPrimaryNumber());
      }
    }
    update();
  }
}",0.5988909426987061
187445,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(TRUSTED_TABLE_CREATE);
  db.execSQL(NUMBERS_TABLE_CREATE);
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(TRUSTED_TABLE_CREATE);
  db.execSQL(NUMBERS_TABLE_CREATE);
  db.execSQL(USER_TABLE_CREATE);
}",0.8825622775800712
187446,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  db.execSQL(""String_Node_Str"" + TRUSTED_TABLE_CREATE);
  db.execSQL(""String_Node_Str"" + NUMBERS_TABLE_CREATE);
  onCreate(db);
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  db.execSQL(""String_Node_Str"" + USER_TABLE_CREATE);
  db.execSQL(""String_Node_Str"" + TRUSTED_TABLE_CREATE);
  db.execSQL(""String_Node_Str"" + NUMBERS_TABLE_CREATE);
  onCreate(db);
}",0.888421052631579
187447,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_message);
  Prephase2Activity.dba=new DBAccessor(this);
  Prephase2Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  sendSMS=(Button)findViewById(R.id.new_message_send);
  phoneBox=(EditText)findViewById(R.id.new_message_number);
  messageBox=(EditText)findViewById(R.id.new_message_message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String number=phoneBox.getText().toString();
      String text=messageBox.getText().toString();
      if (number.length() > 0 && text.length() > 0) {
        try {
          if (Prephase2Activity.dba.isTrustedContact(number) && Prephase2Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            sendSMS(number,Encryption.aes_encrypt(Prephase2Activity.dba.getRow(ContactRetriever.format(number)).getKey(),text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            sendSMS(number,text);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          if (Prephase2Activity.dba.getRow(ContactRetriever.format(number)) == null) {
            AddContact.editTc=new TrustedContact(""String_Node_Str"",number,null,0);
            AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
            builder.setMessage(""String_Node_Str"" + number + ""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                SendMessageActivity.this.startActivity(new Intent(SendMessageActivity.this,AddContact.class));
                finish();
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
          messageBox.setText(""String_Node_Str"");
          phoneBox.setText(""String_Node_Str"");
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.new_message);
  Prephase2Activity.dba=new DBAccessor(this);
  Prephase2Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  sendSMS=(Button)findViewById(R.id.new_message_send);
  phoneBox=(EditText)findViewById(R.id.new_message_number);
  messageBox=(EditText)findViewById(R.id.new_message_message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      final String number=phoneBox.getText().toString();
      String text=messageBox.getText().toString();
      if (number.length() > 0 && text.length() > 0) {
        try {
          if (Prephase2Activity.dba.isTrustedContact(number) && Prephase2Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            sendSMS(number,Encryption.aes_encrypt(Prephase2Activity.dba.getRow(ContactRetriever.format(number)).getKey(),text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            sendSMS(number,text);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          if (Prephase2Activity.dba.getRow(ContactRetriever.format(number)) == null) {
            AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
            builder.setMessage(""String_Node_Str"" + number + ""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                AddContact.editTc=new TrustedContact(""String_Node_Str"",""String_Node_Str"",null,0);
                AddContact.editTc.addNumber(number);
                SendMessageActivity.this.startActivity(new Intent(SendMessageActivity.this,AddContact.class));
                finish();
              }
            }
).setNegativeButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
              public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
          }
          messageBox.setText(""String_Node_Str"");
          phoneBox.setText(""String_Node_Str"");
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        AlertDialog.Builder builder=new AlertDialog.Builder(SendMessageActivity.this);
        builder.setMessage(""String_Node_Str"").setCancelable(false).setPositiveButton(""String_Node_Str"",new DialogInterface.OnClickListener(){
          public void onClick(          DialogInterface dialog,          int id){
          }
        }
);
        AlertDialog alert=builder.create();
        alert.show();
      }
    }
  }
);
}",0.8565289256198347
187448,"public boolean isNumbersEmpty(){
  if (numbers != null && numbers.size() <= 1) {
    return true;
  }
  return false;
}","public boolean isNumbersEmpty(){
  if (numbers == null) {
    return true;
  }
  return false;
}",0.8837209302325582
187449,"/** 
 * Access the information stored in the database of a contact who has a certain number with the columns: name, number, key, verified.
 * @param number : String the number of the contact to retrieve 
 * @return TrustedContact, the row of data.
 */
public TrustedContact getRow(String number){
  open();
  Cursor cur=db.query(SQLitehelper.TRUSTED_TABLE_NAME,null,""String_Node_Str"" + number,null,null,null,null);
  if (cur.moveToFirst()) {
    TrustedContact tc=new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getString(cur.getColumnIndex(KEY_NUMBER)),cur.getString(cur.getColumnIndex(KEY_KEY)),cur.getInt(cur.getColumnIndex(KEY_VERIFIED)));
    int id=cur.getInt(cur.getColumnIndex(KEY_ID));
    close(cur);
    tc=getNumbers(tc,id);
    return tc;
  }
  close(cur);
  return null;
}","/** 
 * Access the information stored in the database of a contact who has a certain number with the columns: name, number, key, verified.
 * @param number : String the number of the contact to retrieve 
 * @return TrustedContact, the row of data.
 */
public TrustedContact getRow(String number){
  open();
  Cursor cur=db.query(SQLitehelper.TRUSTED_TABLE_NAME,null,""String_Node_Str"" + number,null,null,null,null);
  if (cur.moveToFirst()) {
    TrustedContact tc=new TrustedContact(cur.getString(cur.getColumnIndex(KEY_NAME)),cur.getString(cur.getColumnIndex(KEY_NUMBER)),cur.getString(cur.getColumnIndex(KEY_KEY)),cur.getInt(cur.getColumnIndex(KEY_VERIFIED)));
    int id=cur.getInt(cur.getColumnIndex(KEY_ID));
    Cursor pCur=db.query(SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + SQLitehelper.NUMBERS_TABLE_NAME,new String[]{SQLitehelper.NUMBERS_TABLE_NAME + ""String_Node_Str"" + KEY_NUMBER},SQLitehelper.TRUSTED_TABLE_NAME + ""String_Node_Str"" + KEY_ID+ ""String_Node_Str""+ SQLitehelper.NUMBERS_TABLE_NAME+ ""String_Node_Str""+ KEY_REFERNECE+ ""String_Node_Str""+ SQLitehelper.TRUSTED_TABLE_NAME+ ""String_Node_Str""+ KEY_ID+ ""String_Node_Str""+ id,null,null,null,null);
    if (pCur.moveToFirst()) {
      do {
        tc.addNumber(pCur.getString(pCur.getColumnIndex(KEY_NUMBER)));
      }
 while (pCur.moveToNext());
      pCur.close();
    }
    close(cur);
    return tc;
  }
  close(cur);
  return null;
}",0.6876971608832808
187450,"/** 
 * Update the verified of the contact
 * @param number : String the contact's number
 * @param verified : int the contacts new state
 */
public boolean isTrustedContact(String number){
  TrustedContact tc=getRow(number);
  if (tc == null) {
    tc=getRow(number.substring(1));
  }
  if (tc != null) {
    if (!tc.isKeyNull() && tc.getVerified() == 2) {
      return true;
    }
  }
  return false;
}","/** 
 * Update the verified of the contact
 * @param number : String the contact's number
 * @param verified : int the contacts new state
 */
public boolean isTrustedContact(String number){
  TrustedContact tc=getRow(number);
  if (tc == null) {
    tc=getRow(format(number));
  }
  if (tc != null) {
    if (!tc.isKeyNull() && tc.getVerified() == 2) {
      return true;
    }
  }
  return false;
}",0.9613947696139477
187451,"public String nameHelper(String number){
  String num=findNameByAddress(number);
  if (num.equalsIgnoreCase(number)) {
    return findNameByAddress(format(number));
  }
  return num;
}","public String nameHelper(String number){
  String num=findNameByAddress(number);
  if (num.equalsIgnoreCase(number)) {
    return findNameByAddress(DBAccessor.format(number));
  }
  return num;
}",0.9709762532981532
187452,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messages);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  final ListView list=(ListView)findViewById(R.id.listView1);
  msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  BroadcastReceiver SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String mess=messages[0].getOriginatingAddress();
          if (dba.isTrustedContact(mess)) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
              sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              msgList=getSMS();
              list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
              list.setItemsCanFocus(false);
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            msgList=getSMS();
            list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
            list.setItemsCanFocus(false);
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messages);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  final ListView list=(ListView)findViewById(R.id.listView1);
  msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  BroadcastReceiver SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String mess=messages[0].getOriginatingAddress();
          if (dba.isTrustedContact(mess)) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
              sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              msgList=getSMS();
              list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
              list.setItemsCanFocus(false);
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
            msgList=getSMS();
            list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
            list.setItemsCanFocus(false);
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}",0.9844182825484764
187453,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String mess=messages[0].getOriginatingAddress();
      if (dba.isTrustedContact(mess)) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
          sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          msgList=getSMS();
          list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
          list.setItemsCanFocus(false);
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        msgList=getSMS();
        list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
        list.setItemsCanFocus(false);
      }
    }
  }
  this.abortBroadcast();
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String mess=messages[0].getOriginatingAddress();
      if (dba.isTrustedContact(mess)) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
          sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          msgList=getSMS();
          list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
          list.setItemsCanFocus(false);
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
        msgList=getSMS();
        list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
        list.setItemsCanFocus(false);
      }
    }
  }
  this.abortBroadcast();
}",0.9754285714285714
187454,"/** 
 * Updates the list of contacts
 */
private void update(){
  String[] names;
  tc=Prephase2Activity.dba.getAllRows();
  names=new String[tc.size()];
  for (int i=0; i < tc.size(); i++) {
    names[i]=tc.get(i).getName();
  }
  listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names));
  listView.setItemsCanFocus(false);
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
}","/** 
 * Updates the list of contacts
 */
private void update(){
  String[] names;
  tc=Prephase2Activity.dba.getAllRows();
  if (tc != null) {
    names=new String[tc.size()];
    for (int i=0; i < tc.size(); i++) {
      names[i]=tc.get(i).getName();
    }
    listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names));
    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    names=new String[]{""String_Node_Str""};
    listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,names));
  }
  listView.setItemsCanFocus(false);
}",0.7471698113207547
187455,"/** 
 * Update the verified of the contact
 * @param number : String the contact's number
 * @param verified : int the contacts new state
 */
public boolean isTrustedContact(String number){
  TrustedContact tc=getRow(number);
  if (tc != null) {
    if (!tc.isKeyNull() && tc.getVerified() == 2) {
      return true;
    }
  }
  return false;
}","/** 
 * Update the verified of the contact
 * @param number : String the contact's number
 * @param verified : int the contacts new state
 */
public boolean isTrustedContact(String number){
  TrustedContact tc=getRow(number);
  if (tc == null) {
    tc=getRow(number.substring(1));
  }
  if (tc != null) {
    if (!tc.isKeyNull() && tc.getVerified() == 2) {
      return true;
    }
  }
  return false;
}",0.9197860962566844
187456,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messageviewer);
  ListView list=(ListView)findViewById(R.id.listView1);
  List<String[]> msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messageviewer);
  Prephase2Activity.dba=new DBAccessor(this);
  Prephase2Activity.sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  ListView list=(ListView)findViewById(R.id.listView1);
  List<String[]> msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
    }
  }
);
  sendSMS=(Button)findViewById(R.id.send);
  messageBox=(EditText)findViewById(R.id.message);
  sendSMS.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      String text=messageBox.getText().toString();
      if (Prephase2Activity.selectedNumber.length() > 0 && text.length() > 0) {
        Toast.makeText(getBaseContext(),""String_Node_Str"" + Prephase2Activity.selectedNumber,Toast.LENGTH_SHORT).show();
        try {
          if (Prephase2Activity.dba.isTrustedContact(Prephase2Activity.selectedNumber) && Prephase2Activity.sharedPrefs.getBoolean(""String_Node_Str"",true)) {
            sendSMS(Prephase2Activity.selectedNumber,Encryption.aes_encrypt(PASSWORD,text));
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
 else {
            sendSMS(Prephase2Activity.selectedNumber,text);
            Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
          }
          messageBox.setText(""String_Node_Str"");
        }
 catch (        Exception e) {
          Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(getBaseContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
}",0.4500948766603415
187457,"public List<String> messageMaker(List<String[]> sms){
  List<String> messageList=new ArrayList<String>();
  for (int i=0; i < sms.size(); i++) {
    messageList.add(sms.get(i)[1] + ""String_Node_Str"" + sms.get(i)[2]);
  }
  return messageList;
}","public List<String> messageMaker(List<String[]> sms){
  List<String> messageList=new ArrayList<String>();
  for (int i=0; i < sms.size(); i++) {
    messageList.add(sms.get(i)[1] + ""String_Node_Str"" + sms.get(i)[0]+ ""String_Node_Str""+ sms.get(i)[2]);
  }
  return messageList;
}",0.9348659003831418
187458,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messages);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  final ListView list=(ListView)findViewById(R.id.listView1);
  msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  BroadcastReceiver SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String mess=messages[0].getOriginatingAddress();
          mess=mess.substring(1,mess.length());
          if (dba.isTrustedContact(mess)) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
              sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              msgList=getSMS();
              list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
              list.setItemsCanFocus(false);
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            msgList=getSMS();
            list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
            list.setItemsCanFocus(false);
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.messages);
  dba=new DBAccessor(this);
  sharedPrefs=PreferenceManager.getDefaultSharedPreferences(this);
  final ListView list=(ListView)findViewById(R.id.listView1);
  msgList=getSMS();
  list.setAdapter(new ArrayAdapter<String>(this,android.R.layout.test_list_item,messageMaker(msgList)));
  list.setItemsCanFocus(false);
  list.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      selectedNumber=msgList.get(position)[0];
      startActivity(new Intent(getBaseContext(),MessageView.class));
    }
  }
);
  final String SMS_RECEIVED=""String_Node_Str"";
  BroadcastReceiver SMSbr=new BroadcastReceiver(){
    @Override public void onReceive(    Context context,    Intent intent){
      Bundle bundle=intent.getExtras();
      if (bundle != null) {
        Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
        final SmsMessage[] messages=new SmsMessage[pdus.length];
        for (int i=0; i < pdus.length; i++) {
          messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
        }
        if (messages.length > -1) {
          String mess=messages[0].getOriginatingAddress();
          if (dba.isTrustedContact(mess)) {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            try {
              sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
              sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              msgList=getSMS();
              list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
              list.setItemsCanFocus(false);
            }
 catch (            Exception e) {
              Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
              e.printStackTrace();
            }
          }
 else {
            Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
            Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
            msgList=getSMS();
            list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
            list.setItemsCanFocus(false);
          }
        }
      }
      this.abortBroadcast();
    }
  }
;
  IntentFilter SMSfilter=new IntentFilter(SMS_RECEIVED);
  this.registerReceiver(SMSbr,SMSfilter);
}",0.9916288803627484
187459,"@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String mess=messages[0].getOriginatingAddress();
      mess=mess.substring(1,mess.length());
      if (dba.isTrustedContact(mess)) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
          sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          msgList=getSMS();
          list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
          list.setItemsCanFocus(false);
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        msgList=getSMS();
        list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
        list.setItemsCanFocus(false);
      }
    }
  }
  this.abortBroadcast();
}","@Override public void onReceive(Context context,Intent intent){
  Bundle bundle=intent.getExtras();
  if (bundle != null) {
    Object[] pdus=(Object[])bundle.get(""String_Node_Str"");
    final SmsMessage[] messages=new SmsMessage[pdus.length];
    for (int i=0; i < pdus.length; i++) {
      messages[i]=SmsMessage.createFromPdu((byte[])pdus[i]);
    }
    if (messages.length > -1) {
      String mess=messages[0].getOriginatingAddress();
      if (dba.isTrustedContact(mess)) {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        try {
          sendToSelf(messages[0].getOriginatingAddress(),messages[0].getMessageBody());
          sendToSelf(messages[0].getOriginatingAddress(),Encryption.aes_decrypt(PASSWORD,messages[0].getMessageBody()));
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          msgList=getSMS();
          list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
          list.setItemsCanFocus(false);
        }
 catch (        Exception e) {
          Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
          e.printStackTrace();
        }
      }
 else {
        Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
        Toast.makeText(context,messages[0].getMessageBody(),Toast.LENGTH_LONG).show();
        msgList=getSMS();
        list.setAdapter(new ArrayAdapter<String>(getBaseContext(),android.R.layout.test_list_item,messageMaker(msgList)));
        list.setItemsCanFocus(false);
      }
    }
  }
  this.abortBroadcast();
}",0.987275882012724
187460,"/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.contact);
  ListView listView;
  final ArrayList<TrustedContact> tc=Prephase1Activity.dba.getAllRows();
  String[] names=new String[tc.size()];
  for (int i=0; i < tc.size(); i++) {
    names[i]=tc.get(i).getName();
  }
  listView=(ListView)findViewById(R.id.listView1);
  listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names));
  listView.setItemsCanFocus(false);
  listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final String key=""String_Node_Str"";
      final int verify=2;
      Toast.makeText(getApplicationContext(),tc.get(position).getKey(),Toast.LENGTH_SHORT).show();
      if (Prephase1Activity.dba.isTrustedContact(tc.get(position).getNumber())) {
        tc.get(position).setKey(null);
        tc.get(position).setVerified(0);
        Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
        Prephase1Activity.dba.addRow(tc.get(position));
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
 else {
        tc.get(position).setKey(key);
        tc.get(position).setVerified(verify);
        Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
        Prephase1Activity.dba.addRow(tc.get(position));
        Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.contact);
  ListView listView;
  String[] names;
  listView=(ListView)findViewById(R.id.listView1);
  final ArrayList<TrustedContact> tc=Prephase1Activity.dba.getAllRows();
  if (tc != null) {
    names=new String[tc.size()];
    for (int i=0; i < tc.size(); i++) {
      names[i]=tc.get(i).getName();
    }
    listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_multiple_choice,names));
    listView.setItemsCanFocus(false);
    listView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
  }
 else {
    names=new String[1];
    names[0]=""String_Node_Str"";
    listView.setAdapter(new ArrayAdapter<String>(this,android.R.layout.simple_list_item_1,names));
    listView.setItemsCanFocus(false);
  }
  listView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final String key=""String_Node_Str"";
      final int verify=2;
      if (tc != null) {
        if (Prephase1Activity.dba.isTrustedContact(tc.get(position).getNumber())) {
          tc.get(position).setKey(null);
          tc.get(position).setVerified(0);
          Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
          Prephase1Activity.dba.addRow(tc.get(position));
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
 else {
          tc.get(position).setKey(key);
          tc.get(position).setVerified(verify);
          Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
          Prephase1Activity.dba.addRow(tc.get(position));
          Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
        }
      }
 else {
      }
    }
  }
);
}",0.5610834715312327
187461,"public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final String key=""String_Node_Str"";
  final int verify=2;
  Toast.makeText(getApplicationContext(),tc.get(position).getKey(),Toast.LENGTH_SHORT).show();
  if (Prephase1Activity.dba.isTrustedContact(tc.get(position).getNumber())) {
    tc.get(position).setKey(null);
    tc.get(position).setVerified(0);
    Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
    Prephase1Activity.dba.addRow(tc.get(position));
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
 else {
    tc.get(position).setKey(key);
    tc.get(position).setVerified(verify);
    Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
    Prephase1Activity.dba.addRow(tc.get(position));
    Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}","public void onItemClick(AdapterView<?> parent,View view,int position,long id){
  final String key=""String_Node_Str"";
  final int verify=2;
  if (tc != null) {
    if (Prephase1Activity.dba.isTrustedContact(tc.get(position).getNumber())) {
      tc.get(position).setKey(null);
      tc.get(position).setVerified(0);
      Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
      Prephase1Activity.dba.addRow(tc.get(position));
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
 else {
      tc.get(position).setKey(key);
      tc.get(position).setVerified(verify);
      Prephase1Activity.dba.removeRow(tc.get(position).getNumber());
      Prephase1Activity.dba.addRow(tc.get(position));
      Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  }
 else {
  }
}",0.4689104392470051
187462,"public static void startTimer(){
  stopTimer();
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),new Runnable(){
    public void run(){
      for (      MyPet myPet : MyPetApi.getMyPetManager().getAllActiveMyPets()) {
        myPet.schedule();
      }
    }
  }
,0L,20L));
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),new Runnable(){
    public void run(){
      for (      Scheduler task : tasksToSchedule) {
        task.schedule();
      }
    }
  }
,5L,20L));
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),new Runnable(){
    public void run(){
      for (      MyPetPlayer player : MyPetApi.getPlayerManager().getMyPetPlayers()) {
        player.schedule();
      }
    }
  }
,10L,20L));
}","public static void startTimer(){
  stopTimer();
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),() -> {
    for (    MyPet myPet : MyPetApi.getMyPetManager().getAllActiveMyPets()) {
      myPet.schedule();
    }
  }
,0L,20L));
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),() -> {
    for (    Scheduler task : tasksToSchedule) {
      task.schedule();
    }
  }
,5L,20L));
  timerIDs.add(Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),() -> {
    for (    MyPetPlayer player : MyPetApi.getPlayerManager().getMyPetPlayers()) {
      player.schedule();
    }
  }
,10L,20L));
}",0.8842247799593771
187463,"public void once(){
  if (!running()) {
    taskID=Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),new Runnable(){
      @Override public void run(){
        if (locationHolder.isValid()) {
          for (int i=0; i < framesPerTick; i++) {
            tick(frame,locationHolder.getLocation());
            if (++frame >= length) {
              stop();
              break;
            }
          }
        }
 else {
          stop();
        }
      }
    }
,0,tickRate);
  }
}","public void once(){
  if (!running()) {
    taskID=Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),() -> {
      if (locationHolder.isValid()) {
        for (int i=0; i < framesPerTick; i++) {
          tick(frame,locationHolder.getLocation());
          if (++frame >= length) {
            stop();
            break;
          }
        }
      }
 else {
        stop();
      }
    }
,0,tickRate);
  }
}",0.8435814455231931
187464,"public void loop(int quantity){
  if (!running()) {
    this.loops=quantity;
    taskID=Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),new Runnable(){
      @Override public void run(){
        if (locationHolder.isValid()) {
          for (int i=0; i < framesPerTick; i++) {
            tick(frame,locationHolder.getLocation());
            if (++frame >= length) {
              if (--Animation.this.loops > 0) {
                reset();
              }
 else {
                stop();
              }
              break;
            }
          }
        }
 else {
          stop();
        }
      }
    }
,0,tickRate);
  }
}","public void loop(int quantity){
  if (!running()) {
    this.loops=quantity;
    taskID=Bukkit.getScheduler().scheduleSyncRepeatingTask(MyPetApi.getPlugin(),() -> {
      if (locationHolder.isValid()) {
        for (int i=0; i < framesPerTick; i++) {
          tick(frame,locationHolder.getLocation());
          if (++frame >= length) {
            if (--Animation.this.loops > 0) {
              reset();
            }
 else {
              stop();
            }
            break;
          }
        }
      }
 else {
        stop();
      }
    }
,0,tickRate);
  }
}",0.6852003270645952
187465,"public boolean load(){
  config=new JSONObject();
  BufferedReader reader=null;
  try {
    reader=new BufferedReader(new FileReader(jsonFile));
    JSONParser parser=new JSONParser();
    Object obj=parser.parse(reader);
    config=(JSONObject)obj;
  }
 catch (  ParseException e) {
    MyPetApi.getLogger().warning(""String_Node_Str"" + jsonFile.getName());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
 finally {
    if (reader != null) {
      try {
        reader.close();
      }
 catch (      IOException ignored) {
      }
    }
  }
  return true;
}","public boolean load(){
  config=new JSONObject();
  try (BufferedReader reader=new BufferedReader(new FileReader(jsonFile))){
    JSONParser parser=new JSONParser();
    Object obj=parser.parse(reader);
    config=(JSONObject)obj;
  }
 catch (  ParseException e) {
    MyPetApi.getLogger().warning(""String_Node_Str"" + jsonFile.getName());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0.7326355851569933
187466,"public boolean load(){
  if (!NBTFile.exists()) {
    return false;
  }
  try {
    InputStream is=new FileInputStream(NBTFile);
    TagBase tag=TagStream.readTag(is,true);
    if (tag != null) {
      nbtTagCompound=(TagCompound)tag;
      return true;
    }
    tag=TagStream.readTag(is,false);
    if (tag != null) {
      nbtTagCompound=(TagCompound)tag;
      return true;
    }
 else {
      MyPetApi.getLogger().warning(""String_Node_Str"" + NBTFile.getName());
      return false;
    }
  }
 catch (  FileNotFoundException e) {
    return false;
  }
catch (  IOException e) {
    return false;
  }
}","public boolean load(){
  if (!NBTFile.exists()) {
    return false;
  }
  try {
    InputStream is=new FileInputStream(NBTFile);
    TagBase tag=TagStream.readTag(is,true);
    if (tag != null) {
      nbtTagCompound=(TagCompound)tag;
      return true;
    }
    tag=TagStream.readTag(is,false);
    if (tag != null) {
      nbtTagCompound=(TagCompound)tag;
      return true;
    }
 else {
      MyPetApi.getLogger().warning(""String_Node_Str"" + NBTFile.getName());
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
}",0.9496527777777778
187467,"@Override public boolean equals(Object obj){
  if (obj == null || !(obj instanceof Interval)) {
    return false;
  }
  Interval<T,S> other=(Interval<T,S>)obj;
  if (start == null ^ other.start == null) {
    return false;
  }
  if (value == null ^ other.value == null) {
    return false;
  }
  if (!value.equals(other.value)) {
    return false;
  }
  if (end == null ^ other.end == null) {
    return false;
  }
  if (isEndInclusive ^ other.isEndInclusive) {
    return false;
  }
  if (isStartInclusive ^ other.isStartInclusive) {
    return false;
  }
  if (start != null && !start.equals(other.start)) {
    return false;
  }
  if (end != null && !end.equals(other.end)) {
    return false;
  }
  return true;
}","@Override public boolean equals(Object obj){
  if (!(obj instanceof Interval)) {
    return false;
  }
  Interval<T,S> other=(Interval<T,S>)obj;
  if (start == null ^ other.start == null) {
    return false;
  }
  if (value == null ^ other.value == null) {
    return false;
  }
  if (!value.equals(other.value)) {
    return false;
  }
  if (end == null ^ other.end == null) {
    return false;
  }
  if (isEndInclusive ^ other.isEndInclusive) {
    return false;
  }
  if (isStartInclusive ^ other.isStartInclusive) {
    return false;
  }
  if (start != null && !start.equals(other.start)) {
    return false;
  }
  if (end != null && !end.equals(other.end)) {
    return false;
  }
  return true;
}",0.9894291754756872
187468,"public void applyTo(TagCompound tag){
  if (hasOwner()) {
    TagCompound ownerTag=new TagCompound();
    ownerTag.put(""String_Node_Str"",new TagString(getOwner()));
    if (hasTexture()) {
      TagCompound propertiesTag=new TagCompound();
      TagList textureList=new TagList();
      TagCompound textureTag=new TagCompound();
      JSONObject jsonObject=new JSONObject();
      JSONObject texturesObject=new JSONObject();
      JSONObject skinObject=new JSONObject();
      jsonObject.put(""String_Node_Str"",texturesObject);
      texturesObject.put(""String_Node_Str"",skinObject);
      skinObject.put(""String_Node_Str"",getTexture());
      String base64=BaseEncoding.base64Url().encode(jsonObject.toJSONString().getBytes());
      textureTag.put(""String_Node_Str"",new TagString(base64));
      textureList.addTag(textureTag);
      propertiesTag.put(""String_Node_Str"",textureList);
      ownerTag.put(""String_Node_Str"",propertiesTag);
    }
    tag.put(""String_Node_Str"",ownerTag);
  }
}","@SuppressWarnings(""String_Node_Str"") public void applyTo(TagCompound tag){
  if (hasOwner()) {
    TagCompound ownerTag=new TagCompound();
    ownerTag.put(""String_Node_Str"",new TagString(getOwner()));
    if (hasTexture()) {
      TagCompound propertiesTag=new TagCompound();
      TagList textureList=new TagList();
      TagCompound textureTag=new TagCompound();
      JSONObject jsonObject=new JSONObject();
      JSONObject texturesObject=new JSONObject();
      JSONObject skinObject=new JSONObject();
      jsonObject.put(""String_Node_Str"",texturesObject);
      texturesObject.put(""String_Node_Str"",skinObject);
      skinObject.put(""String_Node_Str"",getTexture());
      String base64=BaseEncoding.base64Url().encode(jsonObject.toJSONString().getBytes());
      textureTag.put(""String_Node_Str"",new TagString(base64));
      textureList.addTag(textureTag);
      propertiesTag.put(""String_Node_Str"",textureList);
      ownerTag.put(""String_Node_Str"",propertiesTag);
    }
    tag.put(""String_Node_Str"",ownerTag);
  }
}",0.9816559246405552
187469,"public boolean handlePlayerInteraction(EntityHuman entityhuman,EnumHand enumhand,ItemStack itemStack){
  if (super.handlePlayerInteraction(entityhuman,enumhand,itemStack)) {
    return true;
  }
  if (getOwner().equals(entityhuman)) {
    if (itemStack != null) {
      MyPetApi.getLogger().info(""String_Node_Str"" + itemStack.getTag().toString());
      if (canUseItem()) {
        if (itemStack.getItem() instanceof ItemDye && ((ItemDye)itemStack.getItem()).d().ordinal() != getMyPet().getCollarColor().ordinal()) {
          if (getOwner().getPlayer().isSneaking()) {
            getMyPet().setCollarColor(DyeColor.values()[((ItemDye)itemStack.getItem()).d().ordinal()]);
            if (!entityhuman.abilities.canInstantlyBuild) {
              itemStack.subtract(1);
              if (itemStack.getCount() <= 0) {
                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,ItemStack.a);
              }
            }
            return true;
          }
 else {
            this.datawatcher.set(collarWatcher,0);
            updateVisuals();
            return false;
          }
        }
 else         if (Configuration.MyPet.Wolf.GROW_UP_ITEM.compare(itemStack) && getMyPet().isBaby() && getOwner().getPlayer().isSneaking()) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            itemStack.subtract(1);
            if (itemStack.getCount() <= 0) {
              entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,ItemStack.a);
            }
          }
          getMyPet().setBaby(false);
          return true;
        }
      }
    }
  }
  return false;
}","public boolean handlePlayerInteraction(EntityHuman entityhuman,EnumHand enumhand,ItemStack itemStack){
  if (super.handlePlayerInteraction(entityhuman,enumhand,itemStack)) {
    return true;
  }
  if (getOwner().equals(entityhuman)) {
    if (itemStack != null && itemStack.getItem() != Items.AIR) {
      if (canUseItem()) {
        if (itemStack.getItem() instanceof ItemDye && ((ItemDye)itemStack.getItem()).d().ordinal() != getMyPet().getCollarColor().ordinal()) {
          if (getOwner().getPlayer().isSneaking()) {
            getMyPet().setCollarColor(DyeColor.values()[((ItemDye)itemStack.getItem()).d().ordinal()]);
            if (!entityhuman.abilities.canInstantlyBuild) {
              itemStack.subtract(1);
              if (itemStack.getCount() <= 0) {
                entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,ItemStack.a);
              }
            }
            return true;
          }
 else {
            this.datawatcher.set(collarWatcher,0);
            updateVisuals();
            return false;
          }
        }
 else         if (Configuration.MyPet.Wolf.GROW_UP_ITEM.compare(itemStack) && getMyPet().isBaby() && getOwner().getPlayer().isSneaking()) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            itemStack.subtract(1);
            if (itemStack.getCount() <= 0) {
              entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,ItemStack.a);
            }
          }
          getMyPet().setBaby(false);
          return true;
        }
      }
    }
  }
  return false;
}",0.9625
187470,"/** 
 * Entity AI tick method -> updateAITasks()
 */
protected void doMyPetTick(){
  try {
    ++this.ticksFarFromPlayer;
    if (isAlive()) {
      getEntitySenses().a();
      Player p=getOwner().getPlayer();
      if (p == null || !p.isOnline()) {
        MyPetApi.getLogger().warning(""String_Node_Str"");
        MyPetApi.getLogger().warning(""String_Node_Str"");
        MyPetApi.getLogger().warning(""String_Node_Str"" + getMyPet());
        MyPetApi.getLogger().warning(""String_Node_Str"" + getOwner());
        MyPetApi.getLogger().warning(""String_Node_Str"" + (getOwner() != null ? getOwner().isOnline() : ""String_Node_Str""));
        MyPetApi.getLogger().warning(""String_Node_Str"");
        this.die();
        return;
      }
      if (!hasRider()) {
        petTargetSelector.tick();
        petPathfinderSelector.tick();
        petNavigation.tick();
      }
      Ride rideSkill=myPet.getSkills().get(RideImpl.class);
      if (this.onGround && rideSkill.getFlyLimit().getValue().doubleValue() > 0) {
        limitCounter+=rideSkill.getFlyRegenRate().getValue().doubleValue();
        if (limitCounter > rideSkill.getFlyLimit().getValue().doubleValue()) {
          limitCounter=rideSkill.getFlyLimit().getValue().floatValue();
        }
      }
    }
    M();
    getControllerMove().a();
    getControllerLook().a();
    getControllerJump().b();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","/** 
 * Entity AI tick method -> updateAITasks()
 */
protected void doMyPetTick(){
  try {
    ++this.ticksFarFromPlayer;
    if (isAlive()) {
      getEntitySenses().a();
      Player p=getOwner().getPlayer();
      if (p == null || !p.isOnline()) {
        MyPetApi.getLogger().warning(""String_Node_Str"");
        MyPetApi.getLogger().warning(""String_Node_Str"");
        MyPetApi.getLogger().warning(""String_Node_Str"" + getMyPet());
        MyPetApi.getLogger().warning(""String_Node_Str"" + getOwner());
        MyPetApi.getLogger().warning(""String_Node_Str"" + (getOwner() != null ? getOwner().isOnline() : ""String_Node_Str""));
        MyPetApi.getLogger().warning(""String_Node_Str"");
        this.die();
        return;
      }
      if (!hasRider()) {
        petTargetSelector.tick();
        petPathfinderSelector.tick();
        petNavigation.tick();
      }
    }
    M();
    getControllerMove().a();
    getControllerLook().a();
    getControllerJump().b();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",0.840983606557377
187471,"public void a(float motionSideways,float motionForward,float f){
  if (!hasRider || !this.isVehicle()) {
    super.a(motionSideways,motionForward,f);
    return;
  }
  if (this.onGround && this.isFlying) {
    isFlying=false;
    this.fallDistance=0;
  }
  EntityLiving passenger=(EntityLiving)this.getFirstPassenger();
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill == null) {
    passenger.stopRiding();
    return;
  }
  this.lastYaw=(this.yaw=passenger.yaw);
  this.pitch=passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aP=(this.aN=this.yaw);
  motionSideways=passenger.bh * 0.5F;
  motionForward=passenger.bj;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F * (1F + (rideSkill.getSpeedIncrease().getValue() / 100F));
  double jumpHeight=Util.clamp(1 + rideSkill.getJumpHeight().getValue().doubleValue(),0,10);
  float ascendSpeed=0.2f;
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
    ascendSpeed*=factor;
  }
  ride(motionSideways,motionForward,f,speed);
  if (Configuration.Misc.THROW_PLAYER_MOVE_EVENT_WHILE_RIDING && !(this instanceof EntityMyHorse)) {
    double delta=Math.pow(this.locX - this.lastX,2.0D) + Math.pow(this.locY - this.lastY,2.0D) + Math.pow(this.locZ - this.lastZ,2.0D);
    float deltaAngle=Math.abs(this.yaw - lastYaw) + Math.abs(this.pitch - lastPitch);
    if (delta > 0.00390625D || deltaAngle > 10.0F) {
      Location to=getBukkitEntity().getLocation();
      Location from=new Location(world.getWorld(),this.lastX,this.lastY,this.lastZ,this.lastYaw,this.lastPitch);
      if (from.getX() != Double.MAX_VALUE) {
        Location oldTo=to.clone();
        PlayerMoveEvent event=new PlayerMoveEvent((Player)passenger.getBukkitEntity(),from,to);
        Bukkit.getPluginManager().callEvent(event);
        if (event.isCancelled()) {
          passenger.getBukkitEntity().teleport(from);
          return;
        }
        if ((!oldTo.equals(event.getTo())) && (!event.isCancelled())) {
          passenger.getBukkitEntity().teleport(event.getTo(),PlayerTeleportEvent.TeleportCause.UNKNOWN);
          return;
        }
      }
    }
  }
  if (jump != null && this.isVehicle()) {
    boolean doJump=false;
    if (this instanceof IJumpable) {
      if (this.jumpPower > 0.0F) {
        doJump=true;
        this.jumpPower=0.0F;
      }
 else       if (!this.onGround && jump != null) {
        try {
          doJump=jump.getBoolean(passenger);
        }
 catch (        IllegalAccessException ignored) {
        }
      }
    }
 else {
      if (jump != null) {
        try {
          doJump=jump.getBoolean(passenger);
        }
 catch (        IllegalAccessException ignored) {
        }
      }
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        if (this instanceof IJumpable) {
          getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).setValue(jumpVelocity);
        }
        this.motY=jumpVelocity;
      }
 else       if (rideSkill.getCanFly().getValue()) {
        if (limitCounter <= 0 && rideSkill.getFlyLimit().getValue().doubleValue() > 0) {
          canFly=false;
        }
 else         if (flyCheckCounter-- <= 0) {
          canFly=MyPetApi.getHookHelper().canMyPetFlyAt(getBukkitEntity().getLocation());
          flyCheckCounter=5;
        }
        if (canFly) {
          if (this.motY < ascendSpeed) {
            this.motY=ascendSpeed;
            this.fallDistance=0;
            this.isFlying=true;
          }
        }
      }
    }
 else {
      flyCheckCounter=0;
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      if (isFlying && rideSkill.getFlyLimit().getValue().doubleValue() > 0) {
        limitCounter-=distance;
      }
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
      double factor=Math.log10(myPet.getSaturation()) / 2;
      getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue((0.22222F * (1F + (rideSkill.getSpeedIncrease().getValue() / 100F))) * factor);
    }
  }
}","public void a(float motionSideways,float motionForward,float f){
  if (!hasRider || !this.isVehicle()) {
    super.a(motionSideways,motionForward,f);
    return;
  }
  EntityLiving passenger=(EntityLiving)this.getFirstPassenger();
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill == null) {
    passenger.stopRiding();
    return;
  }
  this.lastYaw=(this.yaw=passenger.yaw);
  this.pitch=passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aP=(this.aN=this.yaw);
  motionSideways=passenger.bh * 0.5F;
  motionForward=passenger.bj;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F * (1F + (rideSkill.getSpeedIncrease().getValue() / 100F));
  double jumpHeight=Util.clamp(1 + rideSkill.getJumpHeight().getValue().doubleValue(),0,10);
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,f,speed);
  if (Configuration.Misc.THROW_PLAYER_MOVE_EVENT_WHILE_RIDING && !(this instanceof EntityMyHorse)) {
    double delta=Math.pow(this.locX - this.lastX,2.0D) + Math.pow(this.locY - this.lastY,2.0D) + Math.pow(this.locZ - this.lastZ,2.0D);
    float deltaAngle=Math.abs(this.yaw - lastYaw) + Math.abs(this.pitch - lastPitch);
    if (delta > 0.00390625D || deltaAngle > 10.0F) {
      Location to=getBukkitEntity().getLocation();
      Location from=new Location(world.getWorld(),this.lastX,this.lastY,this.lastZ,this.lastYaw,this.lastPitch);
      if (from.getX() != Double.MAX_VALUE) {
        Location oldTo=to.clone();
        PlayerMoveEvent event=new PlayerMoveEvent((Player)passenger.getBukkitEntity(),from,to);
        Bukkit.getPluginManager().callEvent(event);
        if (event.isCancelled()) {
          passenger.getBukkitEntity().teleport(from);
          return;
        }
        if ((!oldTo.equals(event.getTo())) && (!event.isCancelled())) {
          passenger.getBukkitEntity().teleport(event.getTo(),PlayerTeleportEvent.TeleportCause.UNKNOWN);
          return;
        }
      }
    }
  }
  if (jump != null && this.isVehicle()) {
    boolean doJump=false;
    if (this instanceof IJumpable) {
      if (this.jumpPower > 0.0F) {
        doJump=true;
        this.jumpPower=0.0F;
      }
 else       if (!this.onGround && jump != null) {
        try {
          doJump=jump.getBoolean(passenger);
        }
 catch (        IllegalAccessException ignored) {
        }
      }
    }
 else {
      if (jump != null) {
        try {
          doJump=jump.getBoolean(passenger);
        }
 catch (        IllegalAccessException ignored) {
        }
      }
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        if (this instanceof IJumpable) {
          getAttributeInstance(EntityHorseAbstract.attributeJumpStrength).setValue(jumpVelocity);
        }
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
      double factor=Math.log10(myPet.getSaturation()) / 2;
      getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue((0.22222F * (1F + (rideSkill.getSpeedIncrease().getValue() / 100F))) * factor);
    }
  }
}",0.904097047379263
187472,"public void e(float motionSideways,float motionForward){
  if (!this.hasRider || this.passenger == null) {
    super.e(motionSideways,motionForward);
    return;
  }
  if (rideSkill == null) {
    passenger.mount(null);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=(this.passenger.pitch * 0.5F);
  b(this.yaw,this.pitch);
  this.aP=(this.aN=this.yaw);
  motionSideways=((EntityLiving)this.passenger).bd * 0.5F;
  motionForward=((EntityLiving)this.passenger).be;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=(1.0F + rideSkill.getSpeedIncrease().getValue() / 100.0F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}","public void e(float motionSideways,float motionForward){
  if (!this.hasRider || this.passenger == null) {
    super.e(motionSideways,motionForward);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=(this.passenger.pitch * 0.5F);
  b(this.yaw,this.pitch);
  this.aP=(this.aN=this.yaw);
  motionSideways=((EntityLiving)this.passenger).bd * 0.5F;
  motionForward=((EntityLiving)this.passenger).be;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=(1.0F + rideSkill.getSpeedIncrease().getValue() / 100.0F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}",0.9832615973218556
187473,"public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  if (this.onGround && this.isFlying) {
    isFlying=false;
    this.fallDistance=0;
  }
  if (rideSkill == null) {
    passenger.mount(null);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aX * 0.5F;
  motionForward=((EntityLiving)this.passenger).aY;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}","public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  if (this.onGround && this.isFlying) {
    isFlying=false;
    this.fallDistance=0;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aX * 0.5F;
  motionForward=((EntityLiving)this.passenger).aY;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}",0.983937586048646
187474,"public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  if (rideSkill == null) {
    passenger.mount(null);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aZ * 0.5F;
  motionForward=((EntityLiving)this.passenger).ba;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}","public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aZ * 0.5F;
  motionForward=((EntityLiving)this.passenger).ba;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}",0.9832535885167464
187475,"public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  if (rideSkill == null) {
    passenger.mount(null);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aZ * 0.5F;
  motionForward=((EntityLiving)this.passenger).ba;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}","public void g(float motionSideways,float motionForward){
  if (!hasRider || this.passenger == null) {
    super.g(motionSideways,motionForward);
    return;
  }
  this.lastYaw=(this.yaw=this.passenger.yaw);
  this.pitch=this.passenger.pitch * 0.5F;
  setYawPitch(this.yaw,this.pitch);
  this.aI=(this.aG=this.yaw);
  motionSideways=((EntityLiving)this.passenger).aZ * 0.5F;
  motionForward=((EntityLiving)this.passenger).ba;
  if (motionForward <= 0.0F) {
    motionForward*=0.25F;
  }
  motionSideways*=0.85F;
  float speed=0.22222F;
  double jumpHeight=0.3D;
  Ride rideSkill=myPet.getSkills().get(RideImpl.class);
  if (rideSkill != null) {
    speed*=1F + (rideSkill.getSpeedIncrease().getValue() / 100F);
    jumpHeight=rideSkill.getJumpHeight().getValue().doubleValue() * 0.18D;
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.HungerSystem.AFFECT_RIDE_SPEED) {
    double factor=Math.log10(myPet.getSaturation()) / 2;
    speed*=factor;
    jumpHeight*=factor;
  }
  ride(motionSideways,motionForward,speed);
  if (jump != null && this.passenger != null) {
    boolean doJump=false;
    try {
      doJump=jump.getBoolean(passenger);
    }
 catch (    IllegalAccessException ignored) {
    }
    if (doJump) {
      if (onGround) {
        jumpHeight=new BigDecimal(jumpHeight).setScale(1,BigDecimal.ROUND_HALF_UP).doubleValue();
        String jumpHeightString=JumpHelper.JUMP_FORMAT.format(jumpHeight);
        Double jumpVelocity=JumpHelper.JUMP_MAP.get(jumpHeightString);
        jumpVelocity=jumpVelocity == null ? 0.44161199999510264 : jumpVelocity;
        this.motY=jumpVelocity;
      }
    }
  }
  if (Configuration.HungerSystem.USE_HUNGER_SYSTEM && Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER > 0) {
    double dX=locX - lastX;
    double dY=Math.max(0,locY - lastY);
    double dZ=locZ - lastZ;
    if (dX != 0 || dY != 0 || dZ != 0) {
      double distance=Math.sqrt(dX * dX + dY * dY + dZ * dZ);
      myPet.decreaseSaturation(Configuration.Skilltree.Skill.Ride.HUNGER_PER_METER * distance);
    }
  }
}",0.9832535885167464
187476,"@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).f());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).e());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).h());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).g());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}","@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).g());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).f());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).i());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).h());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}",0.9969879518072288
187477,"@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).f());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).e());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).i());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).g());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}","@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).g());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).f());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).i());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).asDouble());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}",0.9951182876455126
187478,"@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).f());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).e());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).i());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).g());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}","@SuppressWarnings(""String_Node_Str"") public static TagBase vanillaCompoundToCompound(NBTBase vanillaTag){
switch (vanillaTag.getTypeId()) {
case 1:
    return new TagByte(((NBTTagByte)vanillaTag).g());
case 2:
  return new TagShort(((NBTTagShort)vanillaTag).f());
case 3:
return new TagInt(((NBTTagInt)vanillaTag).e());
case 4:
return new TagLong(((NBTTagLong)vanillaTag).d());
case 5:
return new TagFloat(((NBTTagFloat)vanillaTag).i());
case 6:
return new TagDouble(((NBTTagDouble)vanillaTag).asDouble());
case 7:
return new TagByteArray(((NBTTagByteArray)vanillaTag).c());
case 8:
return new TagString(((NBTTagString)vanillaTag).c_());
case 9:
NBTTagList tagList=(NBTTagList)vanillaTag;
List compoundList=new ArrayList();
try {
ArrayList list=(ArrayList)TAG_LIST_LIST.get(tagList);
for (Object aList : list) {
compoundList.add(vanillaCompoundToCompound((NBTBase)aList));
}
}
 catch (IllegalAccessException e) {
e.printStackTrace();
}
return new TagList(compoundList);
case 10:
TagCompound compound=new TagCompound();
NBTTagCompound tagCompound=((NBTTagCompound)vanillaTag);
Set<String> keys=tagCompound.c();
for (String tagName : keys) {
compound.getCompoundData().put(tagName,vanillaCompoundToCompound(tagCompound.get(tagName)));
}
return compound;
case 11:
return new TagIntArray(((NBTTagIntArray)vanillaTag).d());
}
return null;
}",0.9951182876455126
187479,"@SuppressWarnings(""String_Node_Str"") public List getBlockBBsInBB(World world,AxisAlignedBB axisalignedbb){
  UnsafeList unsafeList=new UnsafeList();
  int minX=MathHelper.floor(axisalignedbb.a);
  int maxX=(int)Math.ceil(axisalignedbb.d);
  int minY=MathHelper.floor(axisalignedbb.b);
  int maxY=(int)Math.ceil(axisalignedbb.e);
  int minZ=MathHelper.floor(axisalignedbb.c);
  int maxZ=(int)Math.ceil(axisalignedbb.f);
  for (int x=minX; x <= maxX; x++) {
    for (int z=minZ; z <= maxZ; z++) {
      if (world.isChunkLoaded(x >> 4,z >> 4)) {
        for (int y=minY - 1; y <= maxY; y++) {
          Block block=CraftMagicNumbers.getBlock(world.getBlockAt(x,y,z));
          if (block != null && block.getBlockData().getMaterial().isSolid()) {
            block.a(block.getBlockData(),((CraftWorld)world).getHandle(),new BlockPosition(x,y,z),axisalignedbb,unsafeList,null);
          }
        }
      }
    }
  }
  return unsafeList;
}","@SuppressWarnings(""String_Node_Str"") public List getBlockBBsInBB(World world,AxisAlignedBB axisalignedbb){
  UnsafeList unsafeList=new UnsafeList();
  int minX=MathHelper.floor(axisalignedbb.a);
  int maxX=(int)Math.ceil(axisalignedbb.d);
  int minY=MathHelper.floor(axisalignedbb.b);
  int maxY=(int)Math.ceil(axisalignedbb.e);
  int minZ=MathHelper.floor(axisalignedbb.c);
  int maxZ=(int)Math.ceil(axisalignedbb.f);
  for (int x=minX; x <= maxX; x++) {
    for (int z=minZ; z <= maxZ; z++) {
      if (world.isChunkLoaded(x >> 4,z >> 4)) {
        for (int y=minY - 1; y <= maxY; y++) {
          Block block=CraftMagicNumbers.getBlock(world.getBlockAt(x,y,z));
          if (block != null && block.getBlockData().getMaterial().isSolid()) {
            BlockPosition bp=new BlockPosition(x,y,z);
            AxisAlignedBB res=block.getBlockData().c(((CraftWorld)world).getHandle(),bp);
            if (res != null && res != Block.k) {
              AxisAlignedBB axisalignedbb2=res.a(bp);
              if (axisalignedbb.c(axisalignedbb2)) {
                unsafeList.add(axisalignedbb2);
              }
            }
          }
        }
      }
    }
  }
  return unsafeList;
}",0.7477604903347478
187480,"public void n(){
  if (this.jumpDelay > 0) {
    --this.jumpDelay;
  }
  if (this.bi > 0 && !this.bA()) {
    double d0=this.locX + (this.bj - this.locX) / (double)this.bi;
    double d1=this.locY + (this.bk - this.locY) / (double)this.bi;
    double d2=this.locZ + (this.bl - this.locZ) / (double)this.bi;
    double d3=MathHelper.g(this.bm - (double)this.yaw);
    this.yaw=(float)((double)this.yaw + d3 / (double)this.bi);
    this.pitch=(float)((double)this.pitch + (this.bm - (double)this.pitch) / (double)this.bi);
    --this.bi;
    this.setPosition(d0,d1,d2);
    this.setYawPitch(this.yaw,this.pitch);
  }
 else   if (!this.ct()) {
    this.motX*=0.98D;
    this.motY*=0.98D;
    this.motZ*=0.98D;
  }
  if (Math.abs(this.motX) < 0.003D) {
    this.motX=0.0D;
  }
  if (Math.abs(this.motY) < 0.003D) {
    this.motY=0.0D;
  }
  if (Math.abs(this.motZ) < 0.003D) {
    this.motZ=0.0D;
  }
  this.world.methodProfiler.a(""String_Node_Str"");
  if (this.cj()) {
    this.be=false;
    this.bf=0.0F;
    this.bg=0.0F;
    this.bh=0.0F;
  }
 else   if (this.ct()) {
    this.world.methodProfiler.a(""String_Node_Str"");
    this.doMyPetTick();
    this.world.methodProfiler.b();
  }
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  if (this.be) {
    if (this.isInWater() || this.ao()) {
      this.cj();
    }
 else     if (this.onGround && this.jumpDelay == 0) {
      this.ci();
      this.jumpDelay=10;
    }
  }
 else {
    this.jumpDelay=0;
  }
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  this.bf*=0.98F;
  this.bg*=0.98F;
  this.bh*=0.9F;
  this.r();
  this.g(this.bf,this.bg);
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  this.co();
  this.world.methodProfiler.b();
}","public void n(){
  if (this.jumpDelay > 0) {
    --this.jumpDelay;
  }
  if (this.bi > 0 && !this.bA()) {
    double d0=this.locX + (this.bj - this.locX) / (double)this.bi;
    double d1=this.locY + (this.bk - this.locY) / (double)this.bi;
    double d2=this.locZ + (this.bl - this.locZ) / (double)this.bi;
    double d3=MathHelper.g(this.bm - (double)this.yaw);
    this.yaw=(float)((double)this.yaw + d3 / (double)this.bi);
    this.pitch=(float)((double)this.pitch + (this.bm - (double)this.pitch) / (double)this.bi);
    --this.bi;
    this.setPosition(d0,d1,d2);
    this.setYawPitch(this.yaw,this.pitch);
  }
 else   if (!this.ct()) {
    this.motX*=0.98D;
    this.motY*=0.98D;
    this.motZ*=0.98D;
  }
  if (Math.abs(this.motX) < 0.003D) {
    this.motX=0.0D;
  }
  if (Math.abs(this.motY) < 0.003D) {
    this.motY=0.0D;
  }
  if (Math.abs(this.motZ) < 0.003D) {
    this.motZ=0.0D;
  }
  this.world.methodProfiler.a(""String_Node_Str"");
  if (this.cj()) {
    this.be=false;
    this.bf=0.0F;
    this.bg=0.0F;
    this.bh=0.0F;
  }
 else   if (this.ct()) {
    this.world.methodProfiler.a(""String_Node_Str"");
    this.doMyPetTick();
    this.world.methodProfiler.b();
  }
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  if (this.be) {
    if (this.isInWater() || this.ao()) {
      this.cm();
    }
 else     if (this.onGround && this.jumpDelay == 0) {
      this.cl();
      this.jumpDelay=10;
    }
  }
 else {
    this.jumpDelay=0;
  }
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  this.bf*=0.98F;
  this.bg*=0.98F;
  this.bh*=0.9F;
  this.r();
  this.g(this.bf,this.bg);
  this.world.methodProfiler.b();
  this.world.methodProfiler.a(""String_Node_Str"");
  this.co();
  this.world.methodProfiler.b();
}",0.9988839285714286
187481,"public SpawnFlags createEntity(){
  lastUsed=System.currentTimeMillis();
  if (status != PetState.Here && getOwner().isOnline()) {
    if (getOwner().getPlayer().isDead()) {
      status=PetState.Despawned;
      return SpawnFlags.OwnerDead;
    }
    if (getOwner().getPlayer().getGameMode() == GameMode.SPECTATOR) {
      return SpawnFlags.Spectator;
    }
    if (respawnTime <= 0) {
      Location loc=petOwner.getPlayer().getLocation();
      if (getOwner().getPlayer().isFlying()) {
        boolean groundFound=false;
        for (int i=10; i >= 0; i--) {
          Block b=loc.getBlock();
          if (b.getRelative(BlockFace.DOWN).getType().isSolid()) {
            groundFound=true;
            break;
          }
          loc=loc.subtract(0,1,0);
        }
        if (!groundFound) {
          return SpawnFlags.Flying;
        }
      }
      MyPetCallEvent event=new MyPetCallEvent(this);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return SpawnFlags.NotAllowed;
      }
      MyPetMinecraftEntity minecraftEntity=MyPetApi.getEntityRegistry().createMinecraftEntity(this,loc.getWorld());
      if (minecraftEntity == null) {
        status=PetState.Despawned;
        return SpawnFlags.Canceled;
      }
      bukkitEntity=minecraftEntity.getBukkitEntity();
      if (getYSpawnOffset() > 0) {
        loc=loc.add(0,getYSpawnOffset(),0);
      }
      loc.setPitch(0);
      loc.setYaw(0);
      minecraftEntity.setLocation(loc);
      if (!MyPetApi.getPlatformHelper().canSpawn(loc,minecraftEntity)) {
        status=PetState.Despawned;
        return SpawnFlags.NoSpace;
      }
      MyPetApi.getEntityRegistry().spawnMinecraftEntity(minecraftEntity,loc.getWorld());
      bukkitEntity.setMetadata(""String_Node_Str"",new FixedMetadataValue(MyPetApi.getPlugin(),this));
      status=PetState.Here;
      if (worldGroup == null || worldGroup.equals(""String_Node_Str"")) {
        setWorldGroup(WorldGroup.getGroupByWorld(loc.getWorld().getName()).getName());
      }
      autoAssignSkilltree();
      wantsToRespawn=true;
      return SpawnFlags.Success;
    }
  }
  if (status == PetState.Dead) {
    return SpawnFlags.Dead;
  }
 else {
    return SpawnFlags.AlreadyHere;
  }
}","public SpawnFlags createEntity(){
  lastUsed=System.currentTimeMillis();
  if (status != PetState.Here && getOwner().isOnline()) {
    if (getOwner().getPlayer().isDead()) {
      status=PetState.Despawned;
      return SpawnFlags.OwnerDead;
    }
    if (getOwner().getPlayer().getGameMode().name().equals(""String_Node_Str"")) {
      return SpawnFlags.Spectator;
    }
    if (respawnTime <= 0) {
      Location loc=petOwner.getPlayer().getLocation();
      if (getOwner().getPlayer().isFlying()) {
        boolean groundFound=false;
        for (int i=10; i >= 0; i--) {
          Block b=loc.getBlock();
          if (b.getRelative(BlockFace.DOWN).getType().isSolid()) {
            groundFound=true;
            break;
          }
          loc=loc.subtract(0,1,0);
        }
        if (!groundFound) {
          return SpawnFlags.Flying;
        }
      }
      MyPetCallEvent event=new MyPetCallEvent(this);
      Bukkit.getServer().getPluginManager().callEvent(event);
      if (event.isCancelled()) {
        return SpawnFlags.NotAllowed;
      }
      MyPetMinecraftEntity minecraftEntity=MyPetApi.getEntityRegistry().createMinecraftEntity(this,loc.getWorld());
      if (minecraftEntity == null) {
        status=PetState.Despawned;
        return SpawnFlags.Canceled;
      }
      bukkitEntity=minecraftEntity.getBukkitEntity();
      if (getYSpawnOffset() > 0) {
        loc=loc.add(0,getYSpawnOffset(),0);
      }
      loc.setPitch(0);
      loc.setYaw(0);
      minecraftEntity.setLocation(loc);
      if (!MyPetApi.getPlatformHelper().canSpawn(loc,minecraftEntity)) {
        status=PetState.Despawned;
        return SpawnFlags.NoSpace;
      }
      MyPetApi.getEntityRegistry().spawnMinecraftEntity(minecraftEntity,loc.getWorld());
      bukkitEntity.setMetadata(""String_Node_Str"",new FixedMetadataValue(MyPetApi.getPlugin(),this));
      status=PetState.Here;
      if (worldGroup == null || worldGroup.equals(""String_Node_Str"")) {
        setWorldGroup(WorldGroup.getGroupByWorld(loc.getWorld().getName()).getName());
      }
      autoAssignSkilltree();
      wantsToRespawn=true;
      return SpawnFlags.Success;
    }
  }
  if (status == PetState.Dead) {
    return SpawnFlags.Dead;
  }
 else {
    return SpawnFlags.AlreadyHere;
  }
}",0.9891376634892484
187482,"@EventHandler public void on(PlayerGameModeChangeEvent event){
  if (event.getNewGameMode() == GameMode.SPECTATOR) {
    if (MyPetApi.getPlayerManager().isMyPetPlayer(event.getPlayer())) {
      MyPetPlayer myPetPlayerDamagee=MyPetApi.getPlayerManager().getMyPetPlayer(event.getPlayer());
      if (myPetPlayerDamagee.hasMyPet()) {
        myPetPlayerDamagee.getMyPet().removePet();
      }
    }
  }
 else {
    if (MyPetApi.getPlayerManager().isMyPetPlayer(event.getPlayer())) {
      MyPetPlayer myPetPlayerDamagee=MyPetApi.getPlayerManager().getMyPetPlayer(event.getPlayer());
      if (myPetPlayerDamagee.hasMyPet()) {
        MyPet myPet=myPetPlayerDamagee.getMyPet();
        if (myPet.wantsToRespawn()) {
switch (myPet.createEntity()) {
case Success:
            myPetPlayerDamagee.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",myPetPlayerDamagee),myPet.getPetName()));
          break;
      }
    }
  }
}
}
}","@EventHandler public void on(PlayerGameModeChangeEvent event){
  if (event.getNewGameMode().name().equals(""String_Node_Str"")) {
    if (MyPetApi.getPlayerManager().isMyPetPlayer(event.getPlayer())) {
      MyPetPlayer myPetPlayerDamagee=MyPetApi.getPlayerManager().getMyPetPlayer(event.getPlayer());
      if (myPetPlayerDamagee.hasMyPet()) {
        myPetPlayerDamagee.getMyPet().removePet();
      }
    }
  }
 else {
    if (MyPetApi.getPlayerManager().isMyPetPlayer(event.getPlayer())) {
      MyPetPlayer myPetPlayerDamagee=MyPetApi.getPlayerManager().getMyPetPlayer(event.getPlayer());
      if (myPetPlayerDamagee.hasMyPet()) {
        MyPet myPet=myPetPlayerDamagee.getMyPet();
        if (myPet.wantsToRespawn()) {
switch (myPet.createEntity()) {
case Success:
            myPetPlayerDamagee.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",myPetPlayerDamagee),myPet.getPetName()));
          break;
      }
    }
  }
}
}
}",0.9751454257006876
187483,"@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  event.setWillClose(false);
  event.setWillDestroy(false);
  IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
    event.setWillClose(true);
  event.setWillDestroy(true);
return;
case 4:
if (active) {
menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
active=false;
}
 else {
menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
active=true;
}
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setMeta(ownerMeta,false,false);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(partyMeta);
}
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setMeta(disabledMeta);
menu.getOption(22).setMeta(partyMeta);
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setMeta(disabledMeta);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(disabledMeta);
}
menu.getOption(23).setMeta(everyoneMeta);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}","@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  event.setWillClose(false);
  event.setWillDestroy(false);
  IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
    event.setWillClose(true);
  event.setWillDestroy(true);
return;
case 4:
if (active) {
menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).setLore(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
active=false;
}
 else {
menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).setLore(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
active=true;
}
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setMeta(ownerMeta,false,false);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(partyMeta);
}
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setMeta(disabledMeta);
menu.getOption(22).setMeta(partyMeta);
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setMeta(disabledMeta);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(disabledMeta);
}
menu.getOption(23).setMeta(everyoneMeta);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}",0.9346670834635824
187484,"public boolean activate(){
  final Player owner=myPet.getOwner().getPlayer();
  final Beacon beacon=this;
  IconMenu menu=new IconMenu(Util.cutString(""String_Node_Str"" + myPet.getPetName(),32),new IconMenu.OptionClickEventHandler(){
    List<Integer> selectedBuffs=new ArrayList<>(beacon.selectedBuffs);
    boolean active=beacon.active;
    private BeaconReciever reciever=beacon.reciever;
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      event.setWillClose(false);
      event.setWillDestroy(false);
      IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
        event.setWillClose(true);
      event.setWillDestroy(true);
    return;
case 4:
  if (active) {
    menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
    active=false;
  }
 else {
    menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
    active=true;
  }
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setMeta(ownerMeta,false,false);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(partyMeta);
}
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setMeta(disabledMeta);
menu.getOption(22).setMeta(partyMeta);
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setMeta(disabledMeta);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(disabledMeta);
}
menu.getOption(23).setMeta(everyoneMeta);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}
}
,MyPetApi.getPlugin());
if (beacon.active) {
menu.setOption(4,new IconMenuItem().setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
 else {
menu.setOption(4,new IconMenuItem().setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
menu.setOption(3,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(5).setTitle(GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(5,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(14).setTitle(RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
if (reciever == BeaconReciever.Owner) {
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(ownerMeta,false,false));
}
 else {
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
if (Configuration.Skilltree.Skill.Beacon.PARTY_SUPPORT && MyPetApi.getHookManager().isInParty(getMyPet().getOwner().getPlayer())) {
if (reciever != BeaconReciever.Party) {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(partyMeta));
}
 else {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
}
if (reciever == BeaconReciever.Everyone) {
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(everyoneMeta));
}
 else {
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
if (buffLevel.get(1) > 0) {
menu.setOption(0,new IconMenuItem().setMaterial(LEATHER_BOOTS).setAmount(buffLevel.get(1)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(1),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(1))));
}
if (buffLevel.get(3) > 0) {
menu.setOption(9,new IconMenuItem().setMaterial(GOLD_PICKAXE).setAmount(buffLevel.get(3)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(3),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(3))));
}
if (buffLevel.get(5) > 0) {
menu.setOption(18,new IconMenuItem().setMaterial(DIAMOND_SWORD).setAmount(buffLevel.get(5)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(5),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(5))));
}
if (buffLevel.get(8) > 0) {
menu.setOption(1,new IconMenuItem().setMaterial(FIREWORK).setAmount(buffLevel.get(8)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(8),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(8))));
}
if (buffLevel.get(10) > 0) {
menu.setOption(10,new IconMenuItem().setMaterial(APPLE).setAmount(buffLevel.get(10)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(10))));
}
if (buffLevel.get(11) > 0) {
menu.setOption(19,new IconMenuItem().setMaterial(DIAMOND_CHESTPLATE).setAmount(buffLevel.get(11)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(11),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(11))));
}
if (buffLevel.get(12) > 0) {
menu.setOption(7,new IconMenuItem().setMaterial(LAVA_BUCKET).setAmount(buffLevel.get(12)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(12),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(12))));
}
if (buffLevel.get(13) > 0) {
menu.setOption(16,new IconMenuItem().setMaterial(RAW_FISH).setAmount(buffLevel.get(13)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(13),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(13))));
}
if (buffLevel.get(14) > 0) {
menu.setOption(25,new IconMenuItem().setMaterial(EYE_OF_ENDER).setAmount(buffLevel.get(14)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(14),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(14))));
}
if (buffLevel.get(16) > 0) {
menu.setOption(8,new IconMenuItem().setMaterial(TORCH).setAmount(buffLevel.get(16)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(16),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(16))));
}
if (buffLevel.get(22) > 0) {
menu.setOption(26,new IconMenuItem().setMaterial(SPONGE).setAmount(buffLevel.get(22)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(22),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(22))));
}
for (int buff : selectedBuffs) {
if (buffLevel.get(buff) > 0) {
menu.getOption(buffItemPositions.get(buff)).setGlowing(true);
}
 else {
selectedBuffs.remove(buff);
}
}
if (selectableBuffs > 1) {
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
menu.open(owner);
return true;
}","public boolean activate(){
  final Player owner=myPet.getOwner().getPlayer();
  final Beacon beacon=this;
  String title=RESET + Translation.getString(""String_Node_Str"",myPet.getOwner());
  IconMenu menu=new IconMenu(title,new IconMenu.OptionClickEventHandler(){
    List<Integer> selectedBuffs=new ArrayList<>(beacon.selectedBuffs);
    boolean active=beacon.active;
    private BeaconReciever reciever=beacon.reciever;
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      event.setWillClose(false);
      event.setWillDestroy(false);
      IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
        event.setWillClose(true);
      event.setWillDestroy(true);
    return;
case 4:
  if (active) {
    menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).setLore(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
    active=false;
  }
 else {
    menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).setLore(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
    active=true;
  }
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setMeta(ownerMeta,false,false);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(partyMeta);
}
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setMeta(disabledMeta);
menu.getOption(22).setMeta(partyMeta);
menu.getOption(23).setMeta(disabledMeta);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setMeta(disabledMeta);
if (menu.getOption(22) != null) {
menu.getOption(22).setMeta(disabledMeta);
}
menu.getOption(23).setMeta(everyoneMeta);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}
}
,MyPetApi.getPlugin());
if (beacon.active) {
menu.setOption(4,new IconMenuItem().setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
 else {
menu.setOption(4,new IconMenuItem().setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
menu.setOption(3,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(5).setTitle(GREEN + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(5,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(14).setTitle(RED + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
if (reciever == BeaconReciever.Owner) {
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(ownerMeta,false,false));
}
 else {
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
if (Configuration.Skilltree.Skill.Beacon.PARTY_SUPPORT && MyPetApi.getHookManager().isInParty(getMyPet().getOwner().getPlayer())) {
if (reciever != BeaconReciever.Party) {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(partyMeta));
}
 else {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
}
if (reciever == BeaconReciever.Everyone) {
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(everyoneMeta));
}
 else {
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setMeta(disabledMeta));
}
if (buffLevel.get(1) > 0) {
menu.setOption(0,new IconMenuItem().setMaterial(LEATHER_BOOTS).setAmount(buffLevel.get(1)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(1),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(1))));
}
if (buffLevel.get(3) > 0) {
menu.setOption(9,new IconMenuItem().setMaterial(GOLD_PICKAXE).setAmount(buffLevel.get(3)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(3),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(3))));
}
if (buffLevel.get(5) > 0) {
menu.setOption(18,new IconMenuItem().setMaterial(DIAMOND_SWORD).setAmount(buffLevel.get(5)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(5),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(5))));
}
if (buffLevel.get(8) > 0) {
menu.setOption(1,new IconMenuItem().setMaterial(FIREWORK).setAmount(buffLevel.get(8)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(8),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(8))));
}
if (buffLevel.get(10) > 0) {
menu.setOption(10,new IconMenuItem().setMaterial(APPLE).setAmount(buffLevel.get(10)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(10))));
}
if (buffLevel.get(11) > 0) {
menu.setOption(19,new IconMenuItem().setMaterial(DIAMOND_CHESTPLATE).setAmount(buffLevel.get(11)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(11),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(11))));
}
if (buffLevel.get(12) > 0) {
menu.setOption(7,new IconMenuItem().setMaterial(LAVA_BUCKET).setAmount(buffLevel.get(12)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(12),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(12))));
}
if (buffLevel.get(13) > 0) {
menu.setOption(16,new IconMenuItem().setMaterial(RAW_FISH).setAmount(buffLevel.get(13)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(13),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(13))));
}
if (buffLevel.get(14) > 0) {
menu.setOption(25,new IconMenuItem().setMaterial(EYE_OF_ENDER).setAmount(buffLevel.get(14)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(14),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(14))));
}
if (buffLevel.get(16) > 0) {
menu.setOption(8,new IconMenuItem().setMaterial(TORCH).setAmount(buffLevel.get(16)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(16),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(16))));
}
if (buffLevel.get(22) > 0) {
menu.setOption(26,new IconMenuItem().setMaterial(SPONGE).setAmount(buffLevel.get(22)).setTitle(GOLD + Translation.getString(""String_Node_Str"" + buffNames.get(22),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(22))));
}
for (int buff : selectedBuffs) {
if (buffLevel.get(buff) > 0) {
menu.getOption(buffItemPositions.get(buff)).setGlowing(true);
}
 else {
selectedBuffs.remove(buff);
}
}
if (selectableBuffs > 1) {
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Translation.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
menu.open(owner);
return true;
}",0.961199643670197
187485,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (MyPetApi.getMyPetList().hasActiveMyPet(player)) {
      ActiveMyPet myPet=MyPetApi.getMyPetList().getMyPet(player);
      if (!Permissions.hasExtended(player,""String_Node_Str"",true)) {
        myPet.getOwner().sendMessage(Translation.getString(""String_Node_Str"",player));
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",player),myPet.getPetName()));
        return true;
      }
      if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",player),myPet.getPetName(),myPet.getRespawnTime()));
        return true;
      }
      if (myPet.getSkills().hasSkill(Beacon.class)) {
        myPet.getSkills().getSkill(Beacon.class).activate();
      }
    }
 else {
      sender.sendMessage(Translation.getString(""String_Node_Str"",player));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (MyPetApi.getMyPetList().hasActiveMyPet(player)) {
      ActiveMyPet myPet=MyPetApi.getMyPetList().getMyPet(player);
      if (!Permissions.hasExtended(player,""String_Node_Str"",true)) {
        myPet.getOwner().sendMessage(Translation.getString(""String_Node_Str"",player));
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",player),myPet.getPetName()));
        return true;
      }
      if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",player),myPet.getPetName(),myPet.getRespawnTime()));
        return true;
      }
      if (myPet.getSkills().isSkillActive(Beacon.class)) {
        myPet.getSkills().getSkill(Beacon.class).activate();
      }
 else {
        sender.sendMessage(Util.formatText(Translation.getString(""String_Node_Str"",player),myPet.getPetName(),Translation.getString(""String_Node_Str"",player)));
      }
      return true;
    }
 else {
      sender.sendMessage(Translation.getString(""String_Node_Str"",player));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}",0.9194499017681728
187486,"public void onDisable(){
  if (isReady) {
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.removePet();
    }
    MyPetList.clearList();
    getRepository().disable();
    BukkitUtil.unregisterMyPetEntities();
  }
  Timer.reset();
  PluginHookManager.reset();
  Hooks.disable();
  PlayerList.onlinePlayerUUIDList.clear();
  MyPetLogger.setConsole(null);
  Bukkit.getServer().getScheduler().cancelTasks(getPlugin());
  DebugLogger.info(""String_Node_Str"");
}","public void onDisable(){
  if (isReady) {
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.removePet();
    }
    getRepository().disable();
    MyPetList.clearList();
    BukkitUtil.unregisterMyPetEntities();
  }
  Timer.reset();
  PluginHookManager.reset();
  Hooks.disable();
  PlayerList.onlinePlayerUUIDList.clear();
  MyPetLogger.setConsole(null);
  Bukkit.getServer().getScheduler().cancelTasks(getPlugin());
  DebugLogger.info(""String_Node_Str"");
}",0.94375
187487,"private TagList savePets(){
  List<TagCompound> petList=new ArrayList<>();
  for (  MyPet myPet : MyPetList.getAllActiveMyPets()) {
    List<InactiveMyPet> pets=myPets.get(myPet.getOwner());
    for (    InactiveMyPet pet : pets) {
      if (myPet.getUUID().equals(pet.getUUID())) {
        myPets.put(myPet.getOwner(),MyPetList.getInactiveMyPetFromMyPet(myPet));
        myPets.remove(myPet.getOwner(),pet);
        break;
      }
    }
  }
  for (  InactiveMyPet inactiveMyPet : myPets.values()) {
    try {
      TagCompound petNBT=inactiveMyPet.save();
      petList.add(petNBT);
    }
 catch (    Exception e) {
      DebugLogger.printThrowable(e);
    }
  }
  return new TagList(petList);
}","private TagList savePets(){
  List<TagCompound> petList=new ArrayList<>();
  for (  MyPet myPet : MyPetList.getAllActiveMyPets()) {
    List<InactiveMyPet> pets=myPets.get(myPet.getOwner());
    for (    InactiveMyPet pet : pets) {
      if (myPet.getUUID().equals(pet.getUUID())) {
        InactiveMyPet inactiveMyPet=MyPetList.getInactiveMyPetFromMyPet(myPet);
        if (inactiveMyPet != null) {
          myPets.remove(myPet.getOwner(),pet);
          myPets.put(myPet.getOwner(),inactiveMyPet);
        }
        break;
      }
    }
  }
  for (  InactiveMyPet inactiveMyPet : myPets.values()) {
    try {
      TagCompound petNBT=inactiveMyPet.save();
      petList.add(petNBT);
    }
 catch (    Exception e) {
      DebugLogger.printThrowable(e);
    }
  }
  return new TagList(petList);
}",0.8246318607764391
187488,"@Override public void addMyPetPlayer(final MyPetPlayer player,final RepositoryCallback<Boolean> callback){
  if (players.containsKey(player.getInternalUUID())) {
    players.put(player.getInternalUUID(),player);
    if (SAVE_ON_PLAYER_ADD) {
      saveData(true);
    }
    if (callback != null) {
      callback.setValue(true);
      callback.run();
    }
    return;
  }
  if (callback != null) {
    callback.setValue(false);
    callback.run();
  }
}","@Override public void addMyPetPlayer(final MyPetPlayer player,final RepositoryCallback<Boolean> callback){
  if (!players.containsKey(player.getInternalUUID())) {
    players.put(player.getInternalUUID(),player);
    if (SAVE_ON_PLAYER_ADD) {
      saveData(true);
    }
    if (callback != null) {
      callback.setValue(true);
      callback.run();
    }
    return;
  }
  if (callback != null) {
    callback.setValue(false);
    callback.run();
  }
}",0.9988998899889988
187489,"@Override public void callback(List<InactiveMyPet> value){
  for (  InactiveMyPet inactiveMyPet : value) {
    if (inactiveMyPet.getUUID().equals(groupMyPetUUID)) {
      MyPetList.activateMyPet(inactiveMyPet);
      MyPet activeMyPet=joinedPlayer.getMyPet();
      activeMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",joinedPlayer),activeMyPet.getPetName()));
      break;
    }
  }
  if (!joinedPlayer.hasMyPet() && value.size() > 0) {
    joinedPlayer.getPlayer().sendMessage(Locales.getString(""String_Node_Str"",joinedPlayer));
    joinedPlayer.setMyPetForWorldGroup(joinGroup.getName(),null);
  }
}","@Override public void callback(InactiveMyPet inactiveMyPet){
  MyPetList.activateMyPet(inactiveMyPet);
  if (joinedPlayer.hasMyPet()) {
    final MyPet myPet=joinedPlayer.getMyPet();
    final MyPetPlayer myPetPlayer=myPet.getOwner();
    if (myPet.wantToRespawn()) {
      if (myPetPlayer.hasMyPet()) {
        MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
          runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
        break;
case NoSpace:
      runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
    break;
case NotAllowed:
  runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()));
break;
case Dead:
runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime()));
break;
case Flying:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
break;
case Success:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
break;
}
}
}
 else {
myPet.setStatus(MyPet.PetState.Despawned);
}
}
}",0.1598440545808966
187490,"public void onEnable(){
  plugin=this;
  this.isReady=false;
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  if (!Bukkit.getServer().getClass().getName().contains(MyPetVersion.getBukkitPacket())) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion()+ ""String_Node_Str""+ MyPetVersion.getBukkitPacket()+ ""String_Node_Str"");
    Bukkit.getPluginManager().disablePlugin(this);
    return;
  }
  PvPChecker.reset();
  PluginHookManager.reset();
  Economy.reset();
  JavaScript.reset();
  Configuration.config=this.getConfig();
  Configuration.setDefault();
  Configuration.loadConfiguration();
  DebugLogger.setup();
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + getServer().getOnlineMode());
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  PlayerListener playerListener=new PlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  VehicleListener vehicleListener=new VehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  EntityListener entityListener=new EntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  LevelUpListener levelupListener=new LevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  WorldListener worldListener=new WorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  PluginHookManager pluginSupportListener=new PluginHookManager();
  getServer().getPluginManager().registerEvents(pluginSupportListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  getCommand(""String_Node_Str"").setExecutor(new CommandPetType());
  getCommand(""String_Node_Str"").setExecutor(new CommandCaptureHelper());
  getCommand(""String_Node_Str"").setExecutor(new CommandOptions());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length + 1];
  petTypes[0]=""String_Node_Str"";
  for (int i=1; i <= MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i - 1].getTypeName();
  }
  SkillTreeMobType.clearMobTypes();
  SkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  Set<String> skilltreeNames=new LinkedHashSet<>();
  for (  MyPetType mobType : MyPetType.values()) {
    SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(mobType.getTypeName());
    SkillTreeLoader.addDefault(skillTreeMobType);
    SkillTreeLoader.manageInheritance(skillTreeMobType);
    skilltreeNames.addAll(skillTreeMobType.getSkillTreeNames());
  }
  for (  String skilltreeName : skilltreeNames) {
    try {
      Bukkit.getPluginManager().addPermission(new Permission(""String_Node_Str"" + skilltreeName));
    }
 catch (    Exception ignored) {
      DebugLogger.warning(""String_Node_Str"" + ""String_Node_Str"" + skilltreeName + ""String_Node_Str"");
    }
  }
  BukkitUtil.registerMyPetEntity(EntityMyCreeper.class,""String_Node_Str"",50);
  BukkitUtil.registerMyPetEntity(EntityMySkeleton.class,""String_Node_Str"",51);
  BukkitUtil.registerMyPetEntity(EntityMySpider.class,""String_Node_Str"",52);
  BukkitUtil.registerMyPetEntity(EntityMyGiant.class,""String_Node_Str"",53);
  BukkitUtil.registerMyPetEntity(EntityMyZombie.class,""String_Node_Str"",54);
  BukkitUtil.registerMyPetEntity(EntityMySlime.class,""String_Node_Str"",55);
  BukkitUtil.registerMyPetEntity(EntityMyGhast.class,""String_Node_Str"",56);
  BukkitUtil.registerMyPetEntity(EntityMyPigZombie.class,""String_Node_Str"",57);
  BukkitUtil.registerMyPetEntity(EntityMyEnderman.class,""String_Node_Str"",58);
  BukkitUtil.registerMyPetEntity(EntityMyCaveSpider.class,""String_Node_Str"",59);
  BukkitUtil.registerMyPetEntity(EntityMySilverfish.class,""String_Node_Str"",60);
  BukkitUtil.registerMyPetEntity(EntityMyBlaze.class,""String_Node_Str"",61);
  BukkitUtil.registerMyPetEntity(EntityMyMagmaCube.class,""String_Node_Str"",62);
  BukkitUtil.registerMyPetEntity(EntityMyWither.class,""String_Node_Str"",64);
  BukkitUtil.registerMyPetEntity(EntityMyBat.class,""String_Node_Str"",65);
  BukkitUtil.registerMyPetEntity(EntityMyWitch.class,""String_Node_Str"",66);
  BukkitUtil.registerMyPetEntity(EntityMyEndermite.class,""String_Node_Str"",67);
  BukkitUtil.registerMyPetEntity(EntityMyGuardian.class,""String_Node_Str"",68);
  BukkitUtil.registerMyPetEntity(EntityMyPig.class,""String_Node_Str"",90);
  BukkitUtil.registerMyPetEntity(EntityMySheep.class,""String_Node_Str"",91);
  BukkitUtil.registerMyPetEntity(EntityMyCow.class,""String_Node_Str"",92);
  BukkitUtil.registerMyPetEntity(EntityMyChicken.class,""String_Node_Str"",93);
  BukkitUtil.registerMyPetEntity(EntityMySquid.class,""String_Node_Str"",94);
  BukkitUtil.registerMyPetEntity(EntityMyWolf.class,""String_Node_Str"",95);
  BukkitUtil.registerMyPetEntity(EntityMyMooshroom.class,""String_Node_Str"",96);
  BukkitUtil.registerMyPetEntity(EntityMySnowman.class,""String_Node_Str"",97);
  BukkitUtil.registerMyPetEntity(EntityMyOcelot.class,""String_Node_Str"",98);
  BukkitUtil.registerMyPetEntity(EntityMyIronGolem.class,""String_Node_Str"",99);
  BukkitUtil.registerMyPetEntity(EntityMyHorse.class,""String_Node_Str"",100);
  BukkitUtil.registerMyPetEntity(EntityMyRabbit.class,""String_Node_Str"",101);
  BukkitUtil.registerMyPetEntity(EntityMyVillager.class,""String_Node_Str"",120);
  new Locales();
  Bungee.reset();
  File groupsFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  pluginStorage=new PluginStorage();
  repo=new NbtRepository();
  repo.init();
  if (repo instanceof IScheduler) {
    Timer.addTask((IScheduler)repo);
  }
  loadGroups(groupsFile);
  Timer.startTimer();
  MobArena.findPlugin();
  Minigames.findPlugin();
  PvPArena.findPlugin();
  BattleArena.findPlugin();
  SurvivalGames.findPlugin();
  UltimateSurvivalGames.findPlugin();
  MyHungerGames.findPlugin();
  try {
    Metrics metrics=new Metrics(this);
    boolean metricsActive=false;
    if (!metrics.isOptOut()) {
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countActiveMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metricsActive=metrics.start();
    }
    DebugLogger.info(""String_Node_Str"" + (metricsActive ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException e) {
    MyPetLogger.write(e.getMessage());
  }
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  this.isReady=true;
  for (  final Player player : getServer().getOnlinePlayers()) {
    PlayerList.onlinePlayerUUIDList.add(player.getUniqueId());
    MyPetPlugin.getPlugin().getRepository().getMyPetPlayer(player,new RepositoryCallback<MyPetPlayer>(){
      @Override public void callback(      final MyPetPlayer joinedPlayer){
        if (joinedPlayer != null) {
          PlayerList.setOnline(joinedPlayer);
          if (BukkitUtil.isInOnlineMode()) {
            if (joinedPlayer instanceof OnlineMyPetPlayer) {
              ((OnlineMyPetPlayer)joinedPlayer).setLastKnownName(player.getName());
            }
          }
          final WorldGroup joinGroup=WorldGroup.getGroupByWorld(player.getWorld().getName());
          if (joinedPlayer.hasMyPet()) {
            MyPet myPet=joinedPlayer.getMyPet();
            if (!myPet.getWorldGroup().equals(joinGroup.getName())) {
              MyPetList.deactivateMyPet(joinedPlayer);
            }
          }
          if (joinGroup != null && !joinedPlayer.hasMyPet() && joinedPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
            final UUID groupMyPetUUID=joinedPlayer.getMyPetForWorldGroup(joinGroup.getName());
            joinedPlayer.getInactiveMyPets(new RepositoryCallback<List<InactiveMyPet>>(){
              @Override public void callback(              List<InactiveMyPet> value){
                for (                InactiveMyPet inactiveMyPet : value) {
                  if (inactiveMyPet.getUUID().equals(groupMyPetUUID)) {
                    MyPetList.activateMyPet(inactiveMyPet);
                    MyPet activeMyPet=joinedPlayer.getMyPet();
                    activeMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",joinedPlayer),activeMyPet.getPetName()));
                    break;
                  }
                }
                if (!joinedPlayer.hasMyPet() && value.size() > 0) {
                  joinedPlayer.getPlayer().sendMessage(Locales.getString(""String_Node_Str"",joinedPlayer));
                  joinedPlayer.setMyPetForWorldGroup(joinGroup.getName(),null);
                }
              }
            }
);
          }
          if (joinedPlayer.hasMyPet()) {
            final MyPet myPet=joinedPlayer.getMyPet();
            final MyPetPlayer myPetPlayer=myPet.getOwner();
            if (myPet.wantToRespawn()) {
              if (myPetPlayer.hasMyPet()) {
                MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
                  runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
                break;
case NoSpace:
              runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
            break;
case NotAllowed:
          runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()));
        break;
case Dead:
      runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime()));
    break;
case Flying:
  runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
break;
case Success:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
break;
}
}
}
 else {
myPet.setStatus(MyPet.PetState.Despawned);
}
}
joinedPlayer.checkForDonation();
}
}
}
);
}
DebugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  this.isReady=false;
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  if (!Bukkit.getServer().getClass().getName().contains(MyPetVersion.getBukkitPacket())) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion()+ ""String_Node_Str""+ MyPetVersion.getBukkitPacket()+ ""String_Node_Str"");
    Bukkit.getPluginManager().disablePlugin(this);
    return;
  }
  PvPChecker.reset();
  PluginHookManager.reset();
  Economy.reset();
  JavaScript.reset();
  Configuration.config=this.getConfig();
  Configuration.setDefault();
  Configuration.loadConfiguration();
  DebugLogger.setup();
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + getServer().getOnlineMode());
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  PlayerListener playerListener=new PlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  VehicleListener vehicleListener=new VehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  EntityListener entityListener=new EntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  LevelUpListener levelupListener=new LevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  WorldListener worldListener=new WorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  PluginHookManager pluginSupportListener=new PluginHookManager();
  getServer().getPluginManager().registerEvents(pluginSupportListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  getCommand(""String_Node_Str"").setExecutor(new CommandPetType());
  getCommand(""String_Node_Str"").setExecutor(new CommandCaptureHelper());
  getCommand(""String_Node_Str"").setExecutor(new CommandOptions());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length + 1];
  petTypes[0]=""String_Node_Str"";
  for (int i=1; i <= MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i - 1].getTypeName();
  }
  SkillTreeMobType.clearMobTypes();
  SkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  Set<String> skilltreeNames=new LinkedHashSet<>();
  for (  MyPetType mobType : MyPetType.values()) {
    SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(mobType.getTypeName());
    SkillTreeLoader.addDefault(skillTreeMobType);
    SkillTreeLoader.manageInheritance(skillTreeMobType);
    skilltreeNames.addAll(skillTreeMobType.getSkillTreeNames());
  }
  for (  String skilltreeName : skilltreeNames) {
    try {
      Bukkit.getPluginManager().addPermission(new Permission(""String_Node_Str"" + skilltreeName));
    }
 catch (    Exception ignored) {
      DebugLogger.warning(""String_Node_Str"" + ""String_Node_Str"" + skilltreeName + ""String_Node_Str"");
    }
  }
  BukkitUtil.registerMyPetEntity(EntityMyCreeper.class,""String_Node_Str"",50);
  BukkitUtil.registerMyPetEntity(EntityMySkeleton.class,""String_Node_Str"",51);
  BukkitUtil.registerMyPetEntity(EntityMySpider.class,""String_Node_Str"",52);
  BukkitUtil.registerMyPetEntity(EntityMyGiant.class,""String_Node_Str"",53);
  BukkitUtil.registerMyPetEntity(EntityMyZombie.class,""String_Node_Str"",54);
  BukkitUtil.registerMyPetEntity(EntityMySlime.class,""String_Node_Str"",55);
  BukkitUtil.registerMyPetEntity(EntityMyGhast.class,""String_Node_Str"",56);
  BukkitUtil.registerMyPetEntity(EntityMyPigZombie.class,""String_Node_Str"",57);
  BukkitUtil.registerMyPetEntity(EntityMyEnderman.class,""String_Node_Str"",58);
  BukkitUtil.registerMyPetEntity(EntityMyCaveSpider.class,""String_Node_Str"",59);
  BukkitUtil.registerMyPetEntity(EntityMySilverfish.class,""String_Node_Str"",60);
  BukkitUtil.registerMyPetEntity(EntityMyBlaze.class,""String_Node_Str"",61);
  BukkitUtil.registerMyPetEntity(EntityMyMagmaCube.class,""String_Node_Str"",62);
  BukkitUtil.registerMyPetEntity(EntityMyWither.class,""String_Node_Str"",64);
  BukkitUtil.registerMyPetEntity(EntityMyBat.class,""String_Node_Str"",65);
  BukkitUtil.registerMyPetEntity(EntityMyWitch.class,""String_Node_Str"",66);
  BukkitUtil.registerMyPetEntity(EntityMyEndermite.class,""String_Node_Str"",67);
  BukkitUtil.registerMyPetEntity(EntityMyGuardian.class,""String_Node_Str"",68);
  BukkitUtil.registerMyPetEntity(EntityMyPig.class,""String_Node_Str"",90);
  BukkitUtil.registerMyPetEntity(EntityMySheep.class,""String_Node_Str"",91);
  BukkitUtil.registerMyPetEntity(EntityMyCow.class,""String_Node_Str"",92);
  BukkitUtil.registerMyPetEntity(EntityMyChicken.class,""String_Node_Str"",93);
  BukkitUtil.registerMyPetEntity(EntityMySquid.class,""String_Node_Str"",94);
  BukkitUtil.registerMyPetEntity(EntityMyWolf.class,""String_Node_Str"",95);
  BukkitUtil.registerMyPetEntity(EntityMyMooshroom.class,""String_Node_Str"",96);
  BukkitUtil.registerMyPetEntity(EntityMySnowman.class,""String_Node_Str"",97);
  BukkitUtil.registerMyPetEntity(EntityMyOcelot.class,""String_Node_Str"",98);
  BukkitUtil.registerMyPetEntity(EntityMyIronGolem.class,""String_Node_Str"",99);
  BukkitUtil.registerMyPetEntity(EntityMyHorse.class,""String_Node_Str"",100);
  BukkitUtil.registerMyPetEntity(EntityMyRabbit.class,""String_Node_Str"",101);
  BukkitUtil.registerMyPetEntity(EntityMyVillager.class,""String_Node_Str"",120);
  new Locales();
  Bungee.reset();
  File groupsFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  pluginStorage=new PluginStorage();
  if (repo == null) {
    repo=new NbtRepository();
    try {
      repo.init();
    }
 catch (    RepositoryInitException ignored) {
    }
  }
  if (repo instanceof IScheduler) {
    Timer.addTask((IScheduler)repo);
  }
  loadGroups(groupsFile);
  Timer.startTimer();
  MobArena.findPlugin();
  Minigames.findPlugin();
  PvPArena.findPlugin();
  BattleArena.findPlugin();
  SurvivalGames.findPlugin();
  UltimateSurvivalGames.findPlugin();
  MyHungerGames.findPlugin();
  try {
    Metrics metrics=new Metrics(this);
    boolean metricsActive=false;
    if (!metrics.isOptOut()) {
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countActiveMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metricsActive=metrics.start();
    }
    DebugLogger.info(""String_Node_Str"" + (metricsActive ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException e) {
    MyPetLogger.write(e.getMessage());
  }
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  this.isReady=true;
  for (  final Player player : getServer().getOnlinePlayers()) {
    PlayerList.onlinePlayerUUIDList.add(player.getUniqueId());
    MyPetPlugin.getPlugin().getRepository().getMyPetPlayer(player,new RepositoryCallback<MyPetPlayer>(){
      @Override public void callback(      final MyPetPlayer joinedPlayer){
        if (joinedPlayer != null) {
          PlayerList.setOnline(joinedPlayer);
          if (BukkitUtil.isInOnlineMode()) {
            if (joinedPlayer instanceof OnlineMyPetPlayer) {
              ((OnlineMyPetPlayer)joinedPlayer).setLastKnownName(player.getName());
            }
          }
          final WorldGroup joinGroup=WorldGroup.getGroupByWorld(player.getWorld().getName());
          if (joinedPlayer.hasMyPet()) {
            MyPet myPet=joinedPlayer.getMyPet();
            if (!myPet.getWorldGroup().equals(joinGroup.getName())) {
              MyPetList.deactivateMyPet(joinedPlayer);
            }
          }
          if (joinGroup != null && !joinedPlayer.hasMyPet() && joinedPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
            final UUID groupMyPetUUID=joinedPlayer.getMyPetForWorldGroup(joinGroup.getName());
            joinedPlayer.getInactiveMyPet(groupMyPetUUID,new RepositoryCallback<InactiveMyPet>(){
              @Override public void callback(              InactiveMyPet inactiveMyPet){
                MyPetList.activateMyPet(inactiveMyPet);
                if (joinedPlayer.hasMyPet()) {
                  final MyPet myPet=joinedPlayer.getMyPet();
                  final MyPetPlayer myPetPlayer=myPet.getOwner();
                  if (myPet.wantToRespawn()) {
                    if (myPetPlayer.hasMyPet()) {
                      MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
                        runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
                      break;
case NoSpace:
                    runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
                  break;
case NotAllowed:
                runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()));
              break;
case Dead:
            runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime()));
          break;
case Flying:
        runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
      break;
case Success:
    runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
  break;
}
}
}
 else {
myPet.setStatus(MyPet.PetState.Despawned);
}
}
}
}
);
}
joinedPlayer.checkForDonation();
}
}
}
);
}
DebugLogger.info(""String_Node_Str"");
}",0.8701303442988061
187491,"@Override public boolean onCommandOption(final CommandSender sender,String[] args){
  if (args.length < 1) {
    return false;
  }
  if (Util.isInt(args[0])) {
    final int days=Integer.parseInt(args[0]);
    MyPetList.getAllInactiveMyPets(new RepositoryCallback<Collection<InactiveMyPet>>(){
      @Override public void callback(      Collection<InactiveMyPet> value){
        boolean deleteOld=days == -1;
        List<InactiveMyPet> deletionList=new ArrayList<>();
        for (        InactiveMyPet inactiveMyPet : value) {
          if (inactiveMyPet.getLastUsed() != -1 && !deleteOld) {
            if (TimeUnit.MILLISECONDS.toDays(System.currentTimeMillis() - inactiveMyPet.getLastUsed()) > days) {
              deletionList.add(inactiveMyPet);
            }
          }
 else           if (inactiveMyPet.getLastUsed() == -1 && deleteOld) {
            deletionList.add(inactiveMyPet);
          }
        }
        int deletedPetCount=deletionList.size();
        if (deletedPetCount > 0) {
          if (Backup.MAKE_BACKUPS) {
          }
          for (          InactiveMyPet inactiveMyPet : deletionList) {
            MyPetList.removeInactiveMyPet(inactiveMyPet);
          }
        }
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ deletedPetCount+ ""String_Node_Str"");
      }
    }
);
  }
  return true;
}","@Override public boolean onCommandOption(final CommandSender sender,String[] args){
  if (args.length < 1) {
    return false;
  }
  if (Util.isInt(args[0])) {
    final int days=Integer.parseInt(args[0]);
  }
  return true;
}",0.2604938271604938
187492,"@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=false) public void onEntityDamageByPlayer(final EntityDamageByEntityEvent event){
  if (!(event.getEntity() instanceof CraftMyPet) && event.getDamager() instanceof Player) {
    if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
      Player damager=(Player)event.getDamager();
      if (!MyPetList.hasActiveMyPet(damager)) {
        LivingEntity leashTarget=(LivingEntity)event.getEntity();
        Class<? extends MyPet> myPetClass=MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getMyPetClass();
        ConfigItem leashItem=MyPet.getLeashItem(myPetClass);
        if (!leashItem.compare(damager.getItemInHand()) || !Permissions.has(damager,""String_Node_Str"" + MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName())) {
          return;
        }
        if (Permissions.has(damager,""String_Node_Str"") && PlayerList.isMyPetPlayer(damager) && PlayerList.getMyPetPlayer(damager).isCaptureHelperActive()) {
          CaptureHelper.checkTamable(leashTarget,event.getDamage(),damager);
        }
        if (PluginHookManager.isPluginUsable(""String_Node_Str"")) {
          try {
            if (CitizensAPI.getNPCRegistry().isNPC(leashTarget)) {
              return;
            }
          }
 catch (          Error ignored) {
          }
catch (          Exception ignored) {
          }
        }
        if (!PvPChecker.canHurt(damager,leashTarget)) {
          return;
        }
        boolean willBeLeashed=true;
        flagLoop:         for (        LeashFlag flag : MyPet.getLeashFlags(myPetClass)) {
switch (flag) {
case Adult:
            if (leashTarget instanceof Ageable) {
              willBeLeashed=((Ageable)leashTarget).isAdult();
            }
 else             if (leashTarget instanceof Zombie) {
              willBeLeashed=!((Zombie)leashTarget).isBaby();
            }
          break;
case Baby:
        if (leashTarget instanceof Ageable) {
          willBeLeashed=!((Ageable)leashTarget).isAdult();
        }
 else         if (leashTarget instanceof Zombie) {
          willBeLeashed=((Zombie)leashTarget).isBaby();
        }
      break;
case LowHp:
    willBeLeashed=((leashTarget.getHealth() - event.getDamage()) * 100) / leashTarget.getMaxHealth() <= 10;
  break;
case UserCreated:
if (leashTarget instanceof IronGolem) {
  willBeLeashed=((IronGolem)leashTarget).isPlayerCreated();
}
break;
case Wild:
if (leashTarget instanceof IronGolem) {
willBeLeashed=!((IronGolem)leashTarget).isPlayerCreated();
}
 else if (leashTarget instanceof Tameable) {
willBeLeashed=!((Tameable)leashTarget).isTamed();
}
 else if (leashTarget instanceof Horse) {
willBeLeashed=!((CraftHorse)leashTarget).getHandle().isTame();
}
break;
case Tamed:
if (leashTarget instanceof Tameable) {
willBeLeashed=((Tameable)leashTarget).isTamed();
}
if (leashTarget instanceof Horse) {
willBeLeashed=((CraftHorse)leashTarget).getHandle().isTame();
}
break;
case CanBreed:
if (leashTarget instanceof Ageable) {
willBeLeashed=((Ageable)leashTarget).canBreed();
}
break;
case Angry:
if (leashTarget instanceof Wolf) {
willBeLeashed=((Wolf)leashTarget).isAngry();
}
break;
case Impossible:
willBeLeashed=false;
break flagLoop;
case None:
willBeLeashed=true;
break flagLoop;
}
if (!willBeLeashed) {
break;
}
}
if (willBeLeashed) {
event.setCancelled(true);
MyPetPlayer owner=PlayerList.registerMyPetPlayer(damager);
InactiveMyPet inactiveMyPet=new InactiveMyPet(owner);
inactiveMyPet.setPetType(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()));
inactiveMyPet.setPetName(Locales.getString(""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName(),inactiveMyPet.getOwner().getLanguage()));
WorldGroup worldGroup=WorldGroup.getGroupByWorld(damager.getWorld().getName());
inactiveMyPet.setWorldGroup(worldGroup.getName());
inactiveMyPet.getOwner().setMyPetForWorldGroup(worldGroup.getName(),inactiveMyPet.getUUID());
TagCompound extendedInfo=new TagCompound();
if (leashTarget instanceof Ocelot) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Ocelot)leashTarget).getCatType().getId()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Ocelot)leashTarget).isSitting()));
}
 else if (leashTarget instanceof Wolf) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).isSitting()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).isTamed()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).getCollarColor().getDyeData()));
}
 else if (leashTarget instanceof Sheep) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Sheep)leashTarget).getColor().getDyeData()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Sheep)leashTarget).isSheared()));
}
 else if (leashTarget instanceof Villager) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Villager)leashTarget).getProfession().getId()));
}
 else if (leashTarget instanceof Pig) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Pig)leashTarget).hasSaddle()));
}
 else if (leashTarget instanceof Slime) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Slime)leashTarget).getSize()));
}
 else if (leashTarget instanceof Creeper) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Creeper)leashTarget).isPowered()));
}
 else if (leashTarget instanceof Horse) {
Horse horse=(Horse)leashTarget;
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte((byte)((CraftHorse)leashTarget).getHandle().getType()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().getVariant()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().cx()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(horse.isCarryingChest()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((CraftHorse)leashTarget).getHandle().cG()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().getAge()));
}
 else if (leashTarget instanceof Zombie) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Zombie)leashTarget).isBaby()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Zombie)leashTarget).isVillager()));
}
 else if (leashTarget instanceof Enderman) {
CraftEnderman enderman=(CraftEnderman)leashTarget;
if (enderman.getHandle().getCarried() != Blocks.AIR) {
net.minecraft.server.v1_8_R3.ItemStack block=new net.minecraft.server.v1_8_R3.ItemStack(enderman.getHandle().getCarried().getBlock(),1,enderman.getHandle().getCarried().getBlock().getDropData(enderman.getHandle().getCarried()));
extendedInfo.getCompoundData().put(""String_Node_Str"",ItemStackNBTConverter.itemStackToCompund(block));
}
}
 else if (leashTarget instanceof Skeleton) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((CraftSkeleton)leashTarget).getSkeletonType() == SkeletonType.WITHER));
}
 else if (leashTarget instanceof Guardian) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Guardian)leashTarget).isElder()));
}
 else if (leashTarget instanceof Rabbit) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(MyRabbit.RabbitType.getTypeByBukkitEnum(((Rabbit)leashTarget).getRabbitType()).getId()));
}
if (leashTarget instanceof Ageable) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(!((Ageable)leashTarget).isAdult()));
}
if (leashTarget.getWorld().getGameRuleValue(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && Configuration.RETAIN_EQUIPMENT_ON_TAME && (leashTarget instanceof Zombie || leashTarget instanceof PigZombie || leashTarget instanceof Skeleton)) {
Random random=((CraftLivingEntity)leashTarget).getHandle().bc();
List<TagCompound> equipmentList=new ArrayList<>();
if (random.nextFloat() <= leashTarget.getEquipment().getChestplateDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getChestplate();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Chestplate.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getHelmetDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getHelmet();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Helmet.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getLeggingsDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getLeggings();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Leggins.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getBootsDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getBoots();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Boots.getSlotId()));
equipmentList.add(item);
}
}
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagList(equipmentList));
}
inactiveMyPet.setInfo(extendedInfo);
event.getEntity().remove();
if (Configuration.CONSUME_LEASH_ITEM && damager.getGameMode() != GameMode.CREATIVE && damager.getItemInHand() != null) {
if (damager.getItemInHand().getAmount() > 1) {
damager.getItemInHand().setAmount(damager.getItemInHand().getAmount() - 1);
}
 else {
damager.setItemInHand(null);
}
}
final MyPet myPet=MyPetList.activateMyPet(inactiveMyPet);
if (myPet != null) {
MyPetPlugin.getPlugin().getRepository().addMyPet(inactiveMyPet,new RepositoryCallback<Boolean>(){
@Override public void callback(Boolean value){
myPet.createPet();
getPluginManager().callEvent(new MyPetLeashEvent(myPet));
DebugLogger.info(""String_Node_Str"");
DebugLogger.info(""String_Node_Str"" + myPet.toString());
myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
if (myPet.getOwner().isCaptureHelperActive()) {
myPet.getOwner().setCaptureHelperActive(false);
myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),Locales.getString(""String_Node_Str"",myPet.getOwner())));
}
}
}
);
}
}
}
}
}
}","@EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=false) public void onEntityDamageByPlayer(final EntityDamageByEntityEvent event){
  if (!(event.getEntity() instanceof CraftMyPet) && event.getDamager() instanceof Player) {
    if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
      Player damager=(Player)event.getDamager();
      if (!MyPetList.hasActiveMyPet(damager)) {
        LivingEntity leashTarget=(LivingEntity)event.getEntity();
        Class<? extends MyPet> myPetClass=MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getMyPetClass();
        ConfigItem leashItem=MyPet.getLeashItem(myPetClass);
        if (!leashItem.compare(damager.getItemInHand()) || !Permissions.has(damager,""String_Node_Str"" + MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName())) {
          return;
        }
        if (Permissions.has(damager,""String_Node_Str"") && PlayerList.isMyPetPlayer(damager) && PlayerList.getMyPetPlayer(damager).isCaptureHelperActive()) {
          CaptureHelper.checkTamable(leashTarget,event.getDamage(),damager);
        }
        if (PluginHookManager.isPluginUsable(""String_Node_Str"")) {
          try {
            if (CitizensAPI.getNPCRegistry().isNPC(leashTarget)) {
              return;
            }
          }
 catch (          Error ignored) {
          }
catch (          Exception ignored) {
          }
        }
        if (!PvPChecker.canHurt(damager,leashTarget)) {
          return;
        }
        boolean willBeLeashed=true;
        flagLoop:         for (        LeashFlag flag : MyPet.getLeashFlags(myPetClass)) {
switch (flag) {
case Adult:
            if (leashTarget instanceof Ageable) {
              willBeLeashed=((Ageable)leashTarget).isAdult();
            }
 else             if (leashTarget instanceof Zombie) {
              willBeLeashed=!((Zombie)leashTarget).isBaby();
            }
          break;
case Baby:
        if (leashTarget instanceof Ageable) {
          willBeLeashed=!((Ageable)leashTarget).isAdult();
        }
 else         if (leashTarget instanceof Zombie) {
          willBeLeashed=((Zombie)leashTarget).isBaby();
        }
      break;
case LowHp:
    willBeLeashed=((leashTarget.getHealth() - event.getDamage()) * 100) / leashTarget.getMaxHealth() <= 10;
  break;
case UserCreated:
if (leashTarget instanceof IronGolem) {
  willBeLeashed=((IronGolem)leashTarget).isPlayerCreated();
}
break;
case Wild:
if (leashTarget instanceof IronGolem) {
willBeLeashed=!((IronGolem)leashTarget).isPlayerCreated();
}
 else if (leashTarget instanceof Tameable) {
willBeLeashed=!((Tameable)leashTarget).isTamed();
}
 else if (leashTarget instanceof Horse) {
willBeLeashed=!((CraftHorse)leashTarget).getHandle().isTame();
}
break;
case Tamed:
if (leashTarget instanceof Tameable) {
willBeLeashed=((Tameable)leashTarget).isTamed();
}
if (leashTarget instanceof Horse) {
willBeLeashed=((CraftHorse)leashTarget).getHandle().isTame();
}
break;
case CanBreed:
if (leashTarget instanceof Ageable) {
willBeLeashed=((Ageable)leashTarget).canBreed();
}
break;
case Angry:
if (leashTarget instanceof Wolf) {
willBeLeashed=((Wolf)leashTarget).isAngry();
}
break;
case Impossible:
willBeLeashed=false;
break flagLoop;
case None:
willBeLeashed=true;
break flagLoop;
}
if (!willBeLeashed) {
break;
}
}
if (willBeLeashed) {
event.setCancelled(true);
MyPetPlayer owner;
if (PlayerList.isMyPetPlayer(damager)) {
owner=PlayerList.getMyPetPlayer(damager);
}
 else {
owner=PlayerList.registerMyPetPlayer(damager);
}
InactiveMyPet inactiveMyPet=new InactiveMyPet(owner);
inactiveMyPet.setPetType(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()));
inactiveMyPet.setPetName(Locales.getString(""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName(),inactiveMyPet.getOwner().getLanguage()));
WorldGroup worldGroup=WorldGroup.getGroupByWorld(damager.getWorld().getName());
inactiveMyPet.setWorldGroup(worldGroup.getName());
inactiveMyPet.getOwner().setMyPetForWorldGroup(worldGroup.getName(),inactiveMyPet.getUUID());
TagCompound extendedInfo=new TagCompound();
if (leashTarget instanceof Ocelot) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Ocelot)leashTarget).getCatType().getId()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Ocelot)leashTarget).isSitting()));
}
 else if (leashTarget instanceof Wolf) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).isSitting()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).isTamed()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Wolf)leashTarget).getCollarColor().getDyeData()));
}
 else if (leashTarget instanceof Sheep) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Sheep)leashTarget).getColor().getDyeData()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Sheep)leashTarget).isSheared()));
}
 else if (leashTarget instanceof Villager) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Villager)leashTarget).getProfession().getId()));
}
 else if (leashTarget instanceof Pig) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Pig)leashTarget).hasSaddle()));
}
 else if (leashTarget instanceof Slime) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((Slime)leashTarget).getSize()));
}
 else if (leashTarget instanceof Creeper) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Creeper)leashTarget).isPowered()));
}
 else if (leashTarget instanceof Horse) {
Horse horse=(Horse)leashTarget;
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte((byte)((CraftHorse)leashTarget).getHandle().getType()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().getVariant()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().cx()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(horse.isCarryingChest()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((CraftHorse)leashTarget).getHandle().cG()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagInt(((CraftHorse)leashTarget).getHandle().getAge()));
}
 else if (leashTarget instanceof Zombie) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Zombie)leashTarget).isBaby()));
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Zombie)leashTarget).isVillager()));
}
 else if (leashTarget instanceof Enderman) {
CraftEnderman enderman=(CraftEnderman)leashTarget;
if (enderman.getHandle().getCarried() != Blocks.AIR) {
net.minecraft.server.v1_8_R3.ItemStack block=new net.minecraft.server.v1_8_R3.ItemStack(enderman.getHandle().getCarried().getBlock(),1,enderman.getHandle().getCarried().getBlock().getDropData(enderman.getHandle().getCarried()));
extendedInfo.getCompoundData().put(""String_Node_Str"",ItemStackNBTConverter.itemStackToCompund(block));
}
}
 else if (leashTarget instanceof Skeleton) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((CraftSkeleton)leashTarget).getSkeletonType() == SkeletonType.WITHER));
}
 else if (leashTarget instanceof Guardian) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(((Guardian)leashTarget).isElder()));
}
 else if (leashTarget instanceof Rabbit) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(MyRabbit.RabbitType.getTypeByBukkitEnum(((Rabbit)leashTarget).getRabbitType()).getId()));
}
if (leashTarget instanceof Ageable) {
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagByte(!((Ageable)leashTarget).isAdult()));
}
if (leashTarget.getWorld().getGameRuleValue(""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"") && Configuration.RETAIN_EQUIPMENT_ON_TAME && (leashTarget instanceof Zombie || leashTarget instanceof PigZombie || leashTarget instanceof Skeleton)) {
Random random=((CraftLivingEntity)leashTarget).getHandle().bc();
List<TagCompound> equipmentList=new ArrayList<>();
if (random.nextFloat() <= leashTarget.getEquipment().getChestplateDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getChestplate();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Chestplate.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getHelmetDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getHelmet();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Helmet.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getLeggingsDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getLeggings();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Leggins.getSlotId()));
equipmentList.add(item);
}
}
if (random.nextFloat() <= leashTarget.getEquipment().getBootsDropChance()) {
ItemStack itemStack=leashTarget.getEquipment().getBoots();
if (itemStack != null && itemStack.getType() != Material.AIR) {
net.minecraft.server.v1_8_R3.ItemStack nmsItemStack=CraftItemStack.asNMSCopy(itemStack);
TagCompound item=ItemStackNBTConverter.itemStackToCompund(nmsItemStack);
item.getCompoundData().put(""String_Node_Str"",new TagInt(EquipmentSlot.Boots.getSlotId()));
equipmentList.add(item);
}
}
extendedInfo.getCompoundData().put(""String_Node_Str"",new TagList(equipmentList));
}
inactiveMyPet.setInfo(extendedInfo);
event.getEntity().remove();
if (Configuration.CONSUME_LEASH_ITEM && damager.getGameMode() != GameMode.CREATIVE && damager.getItemInHand() != null) {
if (damager.getItemInHand().getAmount() > 1) {
damager.getItemInHand().setAmount(damager.getItemInHand().getAmount() - 1);
}
 else {
damager.setItemInHand(null);
}
}
final MyPet myPet=MyPetList.activateMyPet(inactiveMyPet);
if (myPet != null) {
MyPetPlugin.getPlugin().getRepository().addMyPet(inactiveMyPet,new RepositoryCallback<Boolean>(){
@Override public void callback(Boolean value){
myPet.createPet();
getPluginManager().callEvent(new MyPetLeashEvent(myPet));
DebugLogger.info(""String_Node_Str"");
DebugLogger.info(""String_Node_Str"" + myPet.toString());
myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
if (myPet.getOwner().isCaptureHelperActive()) {
myPet.getOwner().setCaptureHelperActive(false);
myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),Locales.getString(""String_Node_Str"",myPet.getOwner())));
}
}
}
);
}
}
}
}
}
}",0.9947070960796628
187493,"@EventHandler public void onPlayerJoin(final PlayerJoinEvent event){
  PlayerList.onlinePlayerUUIDList.add(event.getPlayer().getUniqueId());
  MyPetPlugin.getPlugin().getRepository().getMyPetPlayer(event.getPlayer(),new RepositoryCallback<MyPetPlayer>(){
    @Override public void callback(    final MyPetPlayer joinedPlayer){
      PlayerList.setOnline(joinedPlayer);
      if (BukkitUtil.isInOnlineMode()) {
        if (joinedPlayer instanceof OnlineMyPetPlayer) {
          ((OnlineMyPetPlayer)joinedPlayer).setLastKnownName(event.getPlayer().getName());
        }
      }
      final WorldGroup joinGroup=WorldGroup.getGroupByWorld(event.getPlayer().getWorld().getName());
      if (joinedPlayer.hasMyPet()) {
        MyPet myPet=joinedPlayer.getMyPet();
        if (!myPet.getWorldGroup().equals(joinGroup.getName())) {
          MyPetList.deactivateMyPet(joinedPlayer);
        }
      }
      if (joinGroup != null && !joinedPlayer.hasMyPet() && joinedPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
        final UUID groupMyPetUUID=joinedPlayer.getMyPetForWorldGroup(joinGroup.getName());
        joinedPlayer.getInactiveMyPets(new RepositoryCallback<List<InactiveMyPet>>(){
          @Override public void callback(          List<InactiveMyPet> value){
            for (            InactiveMyPet inactiveMyPet : value) {
              if (inactiveMyPet.getUUID().equals(groupMyPetUUID)) {
                MyPetList.activateMyPet(inactiveMyPet);
                MyPet activeMyPet=joinedPlayer.getMyPet();
                activeMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",joinedPlayer),activeMyPet.getPetName()));
                break;
              }
            }
            if (!joinedPlayer.hasMyPet() && value.size() > 0) {
              joinedPlayer.getPlayer().sendMessage(Locales.getString(""String_Node_Str"",joinedPlayer));
              joinedPlayer.setMyPetForWorldGroup(joinGroup.getName(),null);
            }
          }
        }
);
      }
      if (joinedPlayer.hasMyPet()) {
        final MyPet myPet=joinedPlayer.getMyPet();
        final MyPetPlayer myPetPlayer=myPet.getOwner();
        if (myPet.wantToRespawn()) {
          if (myPetPlayer.hasMyPet()) {
            MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
              runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
            break;
case NoSpace:
          runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
        break;
case NotAllowed:
      runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()));
    break;
case Dead:
  runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime()));
break;
case Flying:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
break;
case Success:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
break;
}
}
}
 else {
myPet.setStatus(PetState.Despawned);
}
}
joinedPlayer.checkForDonation();
}
}
);
}","@EventHandler public void onPlayerJoin(final PlayerJoinEvent event){
  PlayerList.onlinePlayerUUIDList.add(event.getPlayer().getUniqueId());
  MyPetPlugin.getPlugin().getRepository().getMyPetPlayer(event.getPlayer(),new RepositoryCallback<MyPetPlayer>(){
    @Override public void callback(    final MyPetPlayer joinedPlayer){
      PlayerList.setOnline(joinedPlayer);
      if (BukkitUtil.isInOnlineMode()) {
        if (joinedPlayer instanceof OnlineMyPetPlayer) {
          ((OnlineMyPetPlayer)joinedPlayer).setLastKnownName(event.getPlayer().getName());
        }
      }
      final WorldGroup joinGroup=WorldGroup.getGroupByWorld(event.getPlayer().getWorld().getName());
      if (joinedPlayer.hasMyPet()) {
        MyPet myPet=joinedPlayer.getMyPet();
        if (!myPet.getWorldGroup().equals(joinGroup.getName())) {
          MyPetList.deactivateMyPet(joinedPlayer);
        }
      }
      if (joinGroup != null && !joinedPlayer.hasMyPet() && joinedPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
        final UUID groupMyPetUUID=joinedPlayer.getMyPetForWorldGroup(joinGroup.getName());
        joinedPlayer.getInactiveMyPet(groupMyPetUUID,new RepositoryCallback<InactiveMyPet>(){
          @Override public void callback(          InactiveMyPet inactiveMyPet){
            MyPetList.activateMyPet(inactiveMyPet);
            if (joinedPlayer.hasMyPet()) {
              final MyPet myPet=joinedPlayer.getMyPet();
              final MyPetPlayer myPetPlayer=myPet.getOwner();
              if (myPet.wantToRespawn()) {
                if (myPetPlayer.hasMyPet()) {
                  MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
                    runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
                  break;
case NoSpace:
                runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),runMyPet.getPetName()));
              break;
case NotAllowed:
            runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()));
          break;
case Dead:
        runMyPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime()));
      break;
case Flying:
    runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
  break;
case Success:
runMyPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),myPet.getPetName()));
break;
}
}
}
 else {
myPet.setStatus(PetState.Despawned);
}
}
}
}
);
}
joinedPlayer.checkForDonation();
}
}
);
}",0.6954567346283512
187494,"public static void clearList(){
  mActivePlayerPets.clear();
  MyPetPlugin.getPlugin().getRepository().disable();
}","public static void clearList(){
  MyPetPlugin.getPlugin().getRepository().disable();
  mActivePlayerPets.clear();
}",0.7478260869565218
187495,"public void onEnable(){
  plugin=this;
  this.isReady=false;
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  if (!Bukkit.getServer().getClass().getName().contains(MyPetVersion.getBukkitPacket())) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion()+ ""String_Node_Str""+ MyPetVersion.getBukkitPacket()+ ""String_Node_Str"");
    Bukkit.getPluginManager().disablePlugin(this);
    return;
  }
  PvPChecker.reset();
  Economy.reset();
  JavaScript.reset();
  Configuration.config=this.getConfig();
  Configuration.setDefault();
  Configuration.loadConfiguration();
  DebugLogger.setup();
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + getServer().getOnlineMode());
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  PlayerListener playerListener=new PlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  VehicleListener vehicleListener=new VehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  EntityListener entityListener=new EntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  LevelUpListener levelupListener=new LevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  WorldListener worldListener=new WorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  PluginHookManager pluginSupportListener=new PluginHookManager();
  getServer().getPluginManager().registerEvents(pluginSupportListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  getCommand(""String_Node_Str"").setExecutor(new CommandPetType());
  getCommand(""String_Node_Str"").setExecutor(new CommandCaptureHelper());
  getCommand(""String_Node_Str"").setExecutor(new CommandOptions());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length + 1];
  petTypes[0]=""String_Node_Str"";
  for (int i=1; i <= MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i - 1].getTypeName();
  }
  SkillTreeMobType.clearMobTypes();
  SkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  Set<String> skilltreeNames=new LinkedHashSet<String>();
  for (  MyPetType mobType : MyPetType.values()) {
    SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(mobType.getTypeName());
    SkillTreeLoader.addDefault(skillTreeMobType);
    SkillTreeLoader.manageInheritance(skillTreeMobType);
    skilltreeNames.addAll(skillTreeMobType.getSkillTreeNames());
  }
  for (  String skilltreeName : skilltreeNames) {
    try {
      Bukkit.getPluginManager().addPermission(new Permission(""String_Node_Str"" + skilltreeName));
    }
 catch (    Exception ignored) {
      DebugLogger.warning(""String_Node_Str"" + ""String_Node_Str"" + skilltreeName + ""String_Node_Str"");
    }
  }
  BukkitUtil.registerMyPetEntity(EntityMyCreeper.class,""String_Node_Str"",50);
  BukkitUtil.registerMyPetEntity(EntityMySkeleton.class,""String_Node_Str"",51);
  BukkitUtil.registerMyPetEntity(EntityMySpider.class,""String_Node_Str"",52);
  BukkitUtil.registerMyPetEntity(EntityMyGiant.class,""String_Node_Str"",53);
  BukkitUtil.registerMyPetEntity(EntityMyZombie.class,""String_Node_Str"",54);
  BukkitUtil.registerMyPetEntity(EntityMySlime.class,""String_Node_Str"",55);
  BukkitUtil.registerMyPetEntity(EntityMyGhast.class,""String_Node_Str"",56);
  BukkitUtil.registerMyPetEntity(EntityMyPigZombie.class,""String_Node_Str"",57);
  BukkitUtil.registerMyPetEntity(EntityMyEnderman.class,""String_Node_Str"",58);
  BukkitUtil.registerMyPetEntity(EntityMyCaveSpider.class,""String_Node_Str"",59);
  BukkitUtil.registerMyPetEntity(EntityMySilverfish.class,""String_Node_Str"",60);
  BukkitUtil.registerMyPetEntity(EntityMyBlaze.class,""String_Node_Str"",61);
  BukkitUtil.registerMyPetEntity(EntityMyMagmaCube.class,""String_Node_Str"",62);
  BukkitUtil.registerMyPetEntity(EntityMyWither.class,""String_Node_Str"",64);
  BukkitUtil.registerMyPetEntity(EntityMyBat.class,""String_Node_Str"",65);
  BukkitUtil.registerMyPetEntity(EntityMyWitch.class,""String_Node_Str"",66);
  BukkitUtil.registerMyPetEntity(EntityMyEndermite.class,""String_Node_Str"",67);
  BukkitUtil.registerMyPetEntity(EntityMyGuardian.class,""String_Node_Str"",68);
  BukkitUtil.registerMyPetEntity(EntityMyPig.class,""String_Node_Str"",90);
  BukkitUtil.registerMyPetEntity(EntityMySheep.class,""String_Node_Str"",91);
  BukkitUtil.registerMyPetEntity(EntityMyCow.class,""String_Node_Str"",92);
  BukkitUtil.registerMyPetEntity(EntityMyChicken.class,""String_Node_Str"",93);
  BukkitUtil.registerMyPetEntity(EntityMySquid.class,""String_Node_Str"",94);
  BukkitUtil.registerMyPetEntity(EntityMyWolf.class,""String_Node_Str"",95);
  BukkitUtil.registerMyPetEntity(EntityMyMooshroom.class,""String_Node_Str"",96);
  BukkitUtil.registerMyPetEntity(EntityMySnowman.class,""String_Node_Str"",97);
  BukkitUtil.registerMyPetEntity(EntityMyOcelot.class,""String_Node_Str"",98);
  BukkitUtil.registerMyPetEntity(EntityMyIronGolem.class,""String_Node_Str"",99);
  BukkitUtil.registerMyPetEntity(EntityMyHorse.class,""String_Node_Str"",100);
  BukkitUtil.registerMyPetEntity(EntityMyRabbit.class,""String_Node_Str"",101);
  BukkitUtil.registerMyPetEntity(EntityMyVillager.class,""String_Node_Str"",120);
  new Locales();
  Bungee.reset();
  File groupsFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (Backup.MAKE_BACKUPS) {
    backupManager=new Backup(NBTPetFile,new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator));
  }
  loadGroups(groupsFile);
  loadData(NBTPetFile);
  if (pluginStorage == null) {
    pluginStorage=new PluginStorage(new TagCompound());
  }
  Timer.startTimer();
  MobArena.findPlugin();
  Minigames.findPlugin();
  PvPArena.findPlugin();
  BattleArena.findPlugin();
  SurvivalGames.findPlugin();
  UltimateSurvivalGames.findPlugin();
  MyHungerGames.findPlugin();
  try {
    Metrics metrics=new Metrics(this);
    boolean metricsActive=false;
    if (!metrics.isOptOut()) {
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      for (      final MyPetType petType : MyPetType.values()) {
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countActiveMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metricsActive=metrics.start();
    }
    DebugLogger.info(""String_Node_Str"" + (metricsActive ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException e) {
    MyPetLogger.write(e.getMessage());
  }
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  this.isReady=true;
  Timer.addTask(this);
  for (  Player player : getServer().getOnlinePlayers()) {
    MyPetPlayer.onlinePlayerUUIDList.add(player.getUniqueId());
    if (MyPetPlayer.isMyPetPlayer(player)) {
      MyPetPlayer myPetPlayer=MyPetPlayer.getOrCreateMyPetPlayer(player);
      WorldGroup joinGroup=WorldGroup.getGroupByWorld(player.getWorld().getName());
      if (joinGroup != null && !myPetPlayer.hasMyPet() && myPetPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
        UUID groupMyPetUUID=myPetPlayer.getMyPetForWorldGroup(joinGroup.getName());
        for (        InactiveMyPet inactiveMyPet : myPetPlayer.getInactiveMyPets()) {
          if (inactiveMyPet.getUUID().equals(groupMyPetUUID)) {
            MyPetList.setMyPetActive(inactiveMyPet);
            break;
          }
        }
        if (!myPetPlayer.hasMyPet()) {
          myPetPlayer.setMyPetForWorldGroup(joinGroup.getName(),null);
        }
      }
      if (myPetPlayer.hasMyPet()) {
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.getStatus() == PetState.Dead) {
          player.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",BukkitUtil.getPlayerLanguage(player)),myPet.getPetName(),myPet.getRespawnTime()));
        }
 else         if (myPet.wantToRespawn()) {
          myPet.createPet();
        }
 else {
          myPet.setStatus(PetState.Despawned);
        }
      }
      myPetPlayer.checkForDonation();
    }
  }
  saveData(false);
  DebugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  this.isReady=false;
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  if (!Bukkit.getServer().getClass().getName().contains(MyPetVersion.getBukkitPacket())) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion()+ ""String_Node_Str""+ MyPetVersion.getBukkitPacket()+ ""String_Node_Str"");
    Bukkit.getPluginManager().disablePlugin(this);
    return;
  }
  PvPChecker.reset();
  PluginHookManager.reset();
  Economy.reset();
  JavaScript.reset();
  Configuration.config=this.getConfig();
  Configuration.setDefault();
  Configuration.loadConfiguration();
  DebugLogger.setup();
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + getServer().getOnlineMode());
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + System.getProperty(""String_Node_Str"") + ""String_Node_Str""+ System.getProperty(""String_Node_Str"")+ ""String_Node_Str""+ System.getProperty(""String_Node_Str""));
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  PlayerListener playerListener=new PlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  VehicleListener vehicleListener=new VehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  EntityListener entityListener=new EntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  LevelUpListener levelupListener=new LevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  WorldListener worldListener=new WorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  PluginHookManager pluginSupportListener=new PluginHookManager();
  getServer().getPluginManager().registerEvents(pluginSupportListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  getCommand(""String_Node_Str"").setExecutor(new CommandPetType());
  getCommand(""String_Node_Str"").setExecutor(new CommandCaptureHelper());
  getCommand(""String_Node_Str"").setExecutor(new CommandOptions());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length + 1];
  petTypes[0]=""String_Node_Str"";
  for (int i=1; i <= MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i - 1].getTypeName();
  }
  SkillTreeMobType.clearMobTypes();
  SkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  SkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  Set<String> skilltreeNames=new LinkedHashSet<String>();
  for (  MyPetType mobType : MyPetType.values()) {
    SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(mobType.getTypeName());
    SkillTreeLoader.addDefault(skillTreeMobType);
    SkillTreeLoader.manageInheritance(skillTreeMobType);
    skilltreeNames.addAll(skillTreeMobType.getSkillTreeNames());
  }
  for (  String skilltreeName : skilltreeNames) {
    try {
      Bukkit.getPluginManager().addPermission(new Permission(""String_Node_Str"" + skilltreeName));
    }
 catch (    Exception ignored) {
      DebugLogger.warning(""String_Node_Str"" + ""String_Node_Str"" + skilltreeName + ""String_Node_Str"");
    }
  }
  BukkitUtil.registerMyPetEntity(EntityMyCreeper.class,""String_Node_Str"",50);
  BukkitUtil.registerMyPetEntity(EntityMySkeleton.class,""String_Node_Str"",51);
  BukkitUtil.registerMyPetEntity(EntityMySpider.class,""String_Node_Str"",52);
  BukkitUtil.registerMyPetEntity(EntityMyGiant.class,""String_Node_Str"",53);
  BukkitUtil.registerMyPetEntity(EntityMyZombie.class,""String_Node_Str"",54);
  BukkitUtil.registerMyPetEntity(EntityMySlime.class,""String_Node_Str"",55);
  BukkitUtil.registerMyPetEntity(EntityMyGhast.class,""String_Node_Str"",56);
  BukkitUtil.registerMyPetEntity(EntityMyPigZombie.class,""String_Node_Str"",57);
  BukkitUtil.registerMyPetEntity(EntityMyEnderman.class,""String_Node_Str"",58);
  BukkitUtil.registerMyPetEntity(EntityMyCaveSpider.class,""String_Node_Str"",59);
  BukkitUtil.registerMyPetEntity(EntityMySilverfish.class,""String_Node_Str"",60);
  BukkitUtil.registerMyPetEntity(EntityMyBlaze.class,""String_Node_Str"",61);
  BukkitUtil.registerMyPetEntity(EntityMyMagmaCube.class,""String_Node_Str"",62);
  BukkitUtil.registerMyPetEntity(EntityMyWither.class,""String_Node_Str"",64);
  BukkitUtil.registerMyPetEntity(EntityMyBat.class,""String_Node_Str"",65);
  BukkitUtil.registerMyPetEntity(EntityMyWitch.class,""String_Node_Str"",66);
  BukkitUtil.registerMyPetEntity(EntityMyEndermite.class,""String_Node_Str"",67);
  BukkitUtil.registerMyPetEntity(EntityMyGuardian.class,""String_Node_Str"",68);
  BukkitUtil.registerMyPetEntity(EntityMyPig.class,""String_Node_Str"",90);
  BukkitUtil.registerMyPetEntity(EntityMySheep.class,""String_Node_Str"",91);
  BukkitUtil.registerMyPetEntity(EntityMyCow.class,""String_Node_Str"",92);
  BukkitUtil.registerMyPetEntity(EntityMyChicken.class,""String_Node_Str"",93);
  BukkitUtil.registerMyPetEntity(EntityMySquid.class,""String_Node_Str"",94);
  BukkitUtil.registerMyPetEntity(EntityMyWolf.class,""String_Node_Str"",95);
  BukkitUtil.registerMyPetEntity(EntityMyMooshroom.class,""String_Node_Str"",96);
  BukkitUtil.registerMyPetEntity(EntityMySnowman.class,""String_Node_Str"",97);
  BukkitUtil.registerMyPetEntity(EntityMyOcelot.class,""String_Node_Str"",98);
  BukkitUtil.registerMyPetEntity(EntityMyIronGolem.class,""String_Node_Str"",99);
  BukkitUtil.registerMyPetEntity(EntityMyHorse.class,""String_Node_Str"",100);
  BukkitUtil.registerMyPetEntity(EntityMyRabbit.class,""String_Node_Str"",101);
  BukkitUtil.registerMyPetEntity(EntityMyVillager.class,""String_Node_Str"",120);
  new Locales();
  Bungee.reset();
  File groupsFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (Backup.MAKE_BACKUPS) {
    backupManager=new Backup(NBTPetFile,new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator));
  }
  loadGroups(groupsFile);
  loadData(NBTPetFile);
  if (pluginStorage == null) {
    pluginStorage=new PluginStorage(new TagCompound());
  }
  Timer.startTimer();
  MobArena.findPlugin();
  Minigames.findPlugin();
  PvPArena.findPlugin();
  BattleArena.findPlugin();
  SurvivalGames.findPlugin();
  UltimateSurvivalGames.findPlugin();
  MyHungerGames.findPlugin();
  try {
    Metrics metrics=new Metrics(this);
    boolean metricsActive=false;
    if (!metrics.isOptOut()) {
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      for (      final MyPetType petType : MyPetType.values()) {
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countActiveMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metricsActive=metrics.start();
    }
    DebugLogger.info(""String_Node_Str"" + (metricsActive ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
  }
 catch (  IOException e) {
    MyPetLogger.write(e.getMessage());
  }
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getVersion() + ""String_Node_Str""+ MyPetVersion.getBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  this.isReady=true;
  Timer.addTask(this);
  for (  Player player : getServer().getOnlinePlayers()) {
    MyPetPlayer.onlinePlayerUUIDList.add(player.getUniqueId());
    if (MyPetPlayer.isMyPetPlayer(player)) {
      MyPetPlayer myPetPlayer=MyPetPlayer.getOrCreateMyPetPlayer(player);
      WorldGroup joinGroup=WorldGroup.getGroupByWorld(player.getWorld().getName());
      if (joinGroup != null && !myPetPlayer.hasMyPet() && myPetPlayer.hasMyPetInWorldGroup(joinGroup.getName())) {
        UUID groupMyPetUUID=myPetPlayer.getMyPetForWorldGroup(joinGroup.getName());
        for (        InactiveMyPet inactiveMyPet : myPetPlayer.getInactiveMyPets()) {
          if (inactiveMyPet.getUUID().equals(groupMyPetUUID)) {
            MyPetList.setMyPetActive(inactiveMyPet);
            break;
          }
        }
        if (!myPetPlayer.hasMyPet()) {
          myPetPlayer.setMyPetForWorldGroup(joinGroup.getName(),null);
        }
      }
      if (myPetPlayer.hasMyPet()) {
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.getStatus() == PetState.Dead) {
          player.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",BukkitUtil.getPlayerLanguage(player)),myPet.getPetName(),myPet.getRespawnTime()));
        }
 else         if (myPet.wantToRespawn()) {
          myPet.createPet();
        }
 else {
          myPet.setStatus(PetState.Despawned);
        }
      }
      myPetPlayer.checkForDonation();
    }
  }
  saveData(false);
  DebugLogger.info(""String_Node_Str"");
}",0.9988614502767854
187496,"public static boolean isPluginUsable(String pluginName,String className){
  if (pluginManager == null) {
    pluginManager=Bukkit.getServer().getPluginManager();
  }
  if (pluginFound.containsKey(pluginName)) {
    return pluginFound.get(pluginName);
  }
  if (!pluginNames.containsKey(pluginName)) {
    JavaPlugin plugin=(JavaPlugin)pluginManager.getPlugin(pluginName);
    if (plugin != null && plugin.isEnabled() && plugin.getClass().getName().equals(className)) {
      return getPluginInstance(plugin.getClass()) != null;
    }
 else {
      pluginFound.put(pluginName,false);
    }
    return false;
  }
 else {
    return true;
  }
}","public static boolean isPluginUsable(String pluginName,String className){
  if (pluginManager == null) {
    pluginManager=Bukkit.getPluginManager();
  }
  if (pluginFound.containsKey(className)) {
    return pluginFound.get(className);
  }
  if (!pluginNames.containsKey(pluginName)) {
    JavaPlugin plugin=(JavaPlugin)pluginManager.getPlugin(pluginName);
    if (plugin != null && plugin.isEnabled() && plugin.getClass().getName().equals(className)) {
      return getPluginInstance(plugin.getClass()) != null;
    }
 else {
      pluginFound.put(className,false);
    }
    return false;
  }
 else {
    return true;
  }
}",0.9644830307813732
187497,"public static <T extends JavaPlugin>T getPluginInstance(Class<T> clazz){
  if (pluginManager == null) {
    pluginManager=Bukkit.getServer().getPluginManager();
  }
  if (pluginInstances.containsKey(clazz.getName())) {
    return clazz.cast(pluginInstances.get(clazz.getName()));
  }
  try {
    T plugin=JavaPlugin.getPlugin(clazz);
    if (plugin != null) {
      pluginInstances.put(clazz.getName(),plugin);
      pluginFound.put(clazz.getName(),true);
      pluginNames.put(plugin.getName(),clazz.getName());
      DebugLogger.info(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
      return plugin;
    }
  }
 catch (  NoSuchMethodError e) {
    for (    Plugin p : pluginManager.getPlugins()) {
      if (clazz.isInstance(p)) {
        T plugin=clazz.cast(p);
        pluginInstances.put(clazz.getName(),plugin);
        pluginFound.put(clazz.getName(),true);
        pluginNames.put(plugin.getName(),clazz.getName());
        DebugLogger.info(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        return plugin;
      }
    }
  }
  pluginFound.put(clazz.getName(),false);
  return null;
}","public static <T extends JavaPlugin>T getPluginInstance(Class<T> clazz){
  if (pluginManager == null) {
    pluginManager=Bukkit.getPluginManager();
  }
  if (pluginInstances.containsKey(clazz.getName())) {
    return clazz.cast(pluginInstances.get(clazz.getName()));
  }
  try {
    T plugin=JavaPlugin.getPlugin(clazz);
    if (plugin != null) {
      pluginInstances.put(clazz.getName(),plugin);
      pluginFound.put(clazz.getName(),true);
      pluginNames.put(plugin.getName(),clazz.getName());
      DebugLogger.info(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
      return plugin;
    }
  }
 catch (  NoSuchMethodError e) {
    for (    Plugin p : pluginManager.getPlugins()) {
      if (clazz.isInstance(p)) {
        T plugin=clazz.cast(p);
        pluginInstances.put(clazz.getName(),plugin);
        pluginFound.put(clazz.getName(),true);
        pluginNames.put(plugin.getName(),clazz.getName());
        DebugLogger.info(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ clazz.getName()+ ""String_Node_Str"");
        return plugin;
      }
    }
  }
  pluginFound.put(clazz.getName(),false);
  return null;
}",0.9949409780775716
187498,"public static void reset(){
  pluginMobArena=null;
  PluginHookManager.reset();
}","public static void reset(){
  pluginMobArena=null;
}",0.7819548872180451
187499,"public static boolean isInSurvivalGames(MyPetPlayer owner){
  if (active) {
    try {
      return me.maker56.survivalgames.SurvivalGames.getUserManager().isPlaying(owner.getPlayer().getName()) || me.maker56.survivalgames.SurvivalGames.getUserManager().isSpectator(owner.getPlayer().getName());
    }
 catch (    Throwable e) {
      active=false;
    }
  }
  return false;
}","public static boolean isInSurvivalGames(MyPetPlayer owner){
  if (active) {
    try {
      return getUserManager().isPlaying(owner.getPlayer().getName()) || getUserManager().isSpectator(owner.getPlayer().getName());
    }
 catch (    Throwable e) {
      active=false;
    }
  }
  return false;
}",0.8839285714285714
187500,"@Override public boolean onCommandOption(CommandSender sender,String[] args){
  if (args.length < 2) {
    return false;
  }
  String lang=BukkitUtil.getCommandSenderLanguage(sender);
  int forceOffset=0;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    forceOffset=1;
  }
  MyPetType myPetType=MyPetType.getMyPetTypeByName(args[1 + forceOffset]);
  if (myPetType != null) {
    Player owner=Bukkit.getPlayer(args[forceOffset]);
    if (owner == null || !owner.isOnline()) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Locales.getString(""String_Node_Str"",lang));
      return true;
    }
    MyPetPlayer newOwner=MyPetPlayer.getOrCreateMyPetPlayer(owner);
    if (newOwner.hasMyPet() && forceOffset == 1) {
      MyPetList.setMyPetInactive(newOwner);
    }
    if (!newOwner.hasMyPet()) {
      InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
      inactiveMyPet.setPetType(myPetType);
      inactiveMyPet.setPetName(Locales.getString(""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName(),inactiveMyPet.getOwner().getLanguage()));
      TagCompound TagCompound=inactiveMyPet.getInfo();
      if (args.length > 2 + forceOffset) {
        for (int i=2 + forceOffset; i < args.length; i++) {
          if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(size)) {
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(Integer.parseInt(size)));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String horseTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(horseTypeString)) {
              int horseType=Integer.parseInt(horseTypeString);
              horseType=Math.min(Math.max(0,horseType),4);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte((byte)horseType));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String variantString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(variantString)) {
              int variant=Integer.parseInt(variantString);
              if (myPetType == MyPetType.Horse) {
                variant=Math.min(Math.max(0,variant),1030);
              }
 else               if (myPetType == MyPetType.Rabbit) {
                if (variant != 99 && (variant > 5 || variant < 0)) {
                  variant=0;
                }
              }
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(variant));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(catTypeString)) {
              int catType=Integer.parseInt(catTypeString);
              catType=Math.min(Math.max(0,catType),3);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(catType));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(professionString)) {
              int profession=Integer.parseInt(professionString);
              profession=Math.min(Math.max(0,profession),5);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(profession));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(colorString)) {
              byte color=Byte.parseByte(colorString);
              color=color > 15 ? 15 : color < 0 ? 0 : color;
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(color));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(colorString)) {
              byte color=Byte.parseByte(colorString);
              color=color > 15 ? 15 : color < 0 ? 0 : color;
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(color));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            String[] blockInfo=blocks.split(""String_Node_Str"");
            if (blockInfo.length >= 1 && Util.isInt(blockInfo[0]) && BukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(Integer.parseInt(blockInfo[0])));
            }
            if (blockInfo.length >= 2 && Util.isInt(blockInfo[1])) {
              int blockData=Integer.parseInt(blockInfo[1]);
              blockData=Math.min(Math.max(0,blockData),15);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(blockData));
            }
          }
 else {
            sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ args[i]+ ""String_Node_Str"");
          }
        }
      }
      WorldGroup wg=WorldGroup.getGroupByWorld(owner.getWorld().getName());
      inactiveMyPet.setWorldGroup(wg.getName());
      inactiveMyPet.getOwner().setMyPetForWorldGroup(wg.getName(),inactiveMyPet.getUUID());
      MyPetList.addInactiveMyPet(inactiveMyPet);
      MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
      if (myPet != null) {
        myPet.createPet();
        sender.sendMessage(Locales.getString(""String_Node_Str"",sender));
      }
 else {
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ newOwner.getName()+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ newOwner.getName()+ ""String_Node_Str"");
    }
  }
  return true;
}","@Override public boolean onCommandOption(CommandSender sender,String[] args){
  if (args.length < 2) {
    return false;
  }
  String lang=BukkitUtil.getCommandSenderLanguage(sender);
  int forceOffset=0;
  if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
    forceOffset=1;
  }
  MyPetType myPetType=MyPetType.getMyPetTypeByName(args[1 + forceOffset]);
  if (myPetType != null) {
    Player owner=Bukkit.getPlayer(args[forceOffset]);
    if (owner == null || !owner.isOnline()) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Locales.getString(""String_Node_Str"",lang));
      return true;
    }
    MyPetPlayer newOwner=MyPetPlayer.getOrCreateMyPetPlayer(owner);
    if (newOwner.hasMyPet() && forceOffset == 1) {
      MyPetList.setMyPetInactive(newOwner);
    }
    if (!newOwner.hasMyPet()) {
      InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
      inactiveMyPet.setPetType(myPetType);
      inactiveMyPet.setPetName(Locales.getString(""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName(),inactiveMyPet.getOwner().getLanguage()));
      TagCompound TagCompound=inactiveMyPet.getInfo();
      if (args.length > 2 + forceOffset) {
        for (int i=2 + forceOffset; i < args.length; i++) {
          if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
            TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(true));
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(size)) {
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(Integer.parseInt(size)));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String horseTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(horseTypeString)) {
              int horseType=Integer.parseInt(horseTypeString);
              horseType=Math.min(Math.max(0,horseType),4);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte((byte)horseType));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String variantString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(variantString)) {
              int variant=Integer.parseInt(variantString);
              if (myPetType == MyPetType.Horse) {
                variant=Math.min(Math.max(0,variant),1030);
                TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(variant));
              }
 else               if (myPetType == MyPetType.Rabbit) {
                if (variant != 99 && (variant > 5 || variant < 0)) {
                  variant=0;
                }
                TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(variant));
              }
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(catTypeString)) {
              int catType=Integer.parseInt(catTypeString);
              catType=Math.min(Math.max(0,catType),3);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(catType));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isInt(professionString)) {
              int profession=Integer.parseInt(professionString);
              profession=Math.min(Math.max(0,profession),5);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(profession));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(colorString)) {
              byte color=Byte.parseByte(colorString);
              color=color > 15 ? 15 : color < 0 ? 0 : color;
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(color));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            if (Util.isByte(colorString)) {
              byte color=Byte.parseByte(colorString);
              color=color > 15 ? 15 : color < 0 ? 0 : color;
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagByte(color));
            }
          }
 else           if (args[i].startsWith(""String_Node_Str"")) {
            String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
            String[] blockInfo=blocks.split(""String_Node_Str"");
            if (blockInfo.length >= 1 && Util.isInt(blockInfo[0]) && BukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(Integer.parseInt(blockInfo[0])));
            }
            if (blockInfo.length >= 2 && Util.isInt(blockInfo[1])) {
              int blockData=Integer.parseInt(blockInfo[1]);
              blockData=Math.min(Math.max(0,blockData),15);
              TagCompound.getCompoundData().put(""String_Node_Str"",new TagInt(blockData));
            }
          }
 else {
            sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.RED+ args[i]+ ""String_Node_Str"");
          }
        }
      }
      WorldGroup wg=WorldGroup.getGroupByWorld(owner.getWorld().getName());
      inactiveMyPet.setWorldGroup(wg.getName());
      inactiveMyPet.getOwner().setMyPetForWorldGroup(wg.getName(),inactiveMyPet.getUUID());
      MyPetList.addInactiveMyPet(inactiveMyPet);
      MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
      if (myPet != null) {
        myPet.createPet();
        sender.sendMessage(Locales.getString(""String_Node_Str"",sender));
      }
 else {
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ newOwner.getName()+ ""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ newOwner.getName()+ ""String_Node_Str"");
    }
  }
  return true;
}",0.9832908876327722
187501,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean handlePlayerInteraction(EntityHuman entityhuman){
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  Player owner=this.getOwner().getPlayer();
  if (isMyPet() && myPet.getOwner().equals(entityhuman)) {
    if (Ride.RIDE_ITEM.compare(itemStack)) {
      if (myPet.getSkills().isSkillActive(Ride.class) && canMove()) {
        if (Permissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().mount(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
        }
      }
    }
    if (de.Keyle.MyPet.skill.skills.implementation.Control.CONTROL_ITEM.compare(itemStack)) {
      if (myPet.getSkills().isSkillActive(de.Keyle.MyPet.skill.skills.implementation.Control.class)) {
        return true;
      }
    }
    if (itemStack != null) {
      if (canEat(itemStack) && canUseItem()) {
        if (owner != null && !Permissions.hasExtended(owner,""String_Node_Str"")) {
          return false;
        }
        if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
          BehaviorDuelTarget duelTarget=(BehaviorDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
          if (duelTarget.getDuelOpponent() != null) {
            return true;
          }
        }
        int addHunger=Configuration.HUNGER_SYSTEM_POINTS_PER_FEED;
        if (getHealth() < getMaxHealth()) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            --itemStack.count;
          }
          addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
          this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
          if (itemStack.count <= 0) {
            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
          }
          BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),EnumParticle.HEART,0.5F,0.5F,0.5F,0.5F,5,20);
        }
 else         if (myPet.getHungerValue() < 100) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            --itemStack.count;
          }
          if (itemStack.count <= 0) {
            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
          }
          BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),EnumParticle.HEART,0.5F,0.5F,0.5F,0.5F,5,20);
        }
        if (addHunger > 0 && myPet.getHungerValue() < 100) {
          myPet.setHungerValue(myPet.getHungerValue() + addHunger);
          addHunger=0;
        }
        if (addHunger < Configuration.HUNGER_SYSTEM_POINTS_PER_FEED) {
          return true;
        }
      }
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean handlePlayerInteraction(EntityHuman entityhuman){
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  Player owner=this.getOwner().getPlayer();
  if (isMyPet() && myPet.getOwner().equals(entityhuman)) {
    if (Ride.RIDE_ITEM.compare(itemStack)) {
      if (myPet.getSkills().isSkillActive(Ride.class) && canMove()) {
        if (Permissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().mount(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
        }
      }
    }
    if (de.Keyle.MyPet.skill.skills.implementation.Control.CONTROL_ITEM.compare(itemStack)) {
      if (myPet.getSkills().isSkillActive(de.Keyle.MyPet.skill.skills.implementation.Control.class)) {
        return true;
      }
    }
    if (itemStack != null) {
      if (itemStack.getItem() == Items.NAME_TAG) {
        if (itemStack.hasName()) {
          final String name=itemStack.getName();
          getMyPet().setPetName(name);
          EntityMyPet.super.setCustomName(""String_Node_Str"");
          myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner()),name));
          if (!entityhuman.abilities.canInstantlyBuild) {
            --itemStack.count;
          }
          if (itemStack.count <= 0) {
            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
          }
          MyPetPlugin.getPlugin().getServer().getScheduler().runTaskLater(MyPetPlugin.getPlugin(),new Runnable(){
            public void run(){
              setCustomName(""String_Node_Str"");
            }
          }
,1L);
          return true;
        }
      }
      if (canEat(itemStack) && canUseItem()) {
        if (owner != null && !Permissions.hasExtended(owner,""String_Node_Str"")) {
          return false;
        }
        if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
          BehaviorDuelTarget duelTarget=(BehaviorDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
          if (duelTarget.getDuelOpponent() != null) {
            return true;
          }
        }
        int addHunger=Configuration.HUNGER_SYSTEM_POINTS_PER_FEED;
        if (getHealth() < getMaxHealth()) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            --itemStack.count;
          }
          addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
          this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
          if (itemStack.count <= 0) {
            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
          }
          BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),EnumParticle.HEART,0.5F,0.5F,0.5F,0.5F,5,20);
        }
 else         if (myPet.getHungerValue() < 100) {
          if (!entityhuman.abilities.canInstantlyBuild) {
            --itemStack.count;
          }
          if (itemStack.count <= 0) {
            entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
          }
          BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),EnumParticle.HEART,0.5F,0.5F,0.5F,0.5F,5,20);
        }
        if (addHunger > 0 && myPet.getHungerValue() < 100) {
          myPet.setHungerValue(myPet.getHungerValue() + addHunger);
          addHunger=0;
        }
        if (addHunger < Configuration.HUNGER_SYSTEM_POINTS_PER_FEED) {
          return true;
        }
      }
    }
  }
 else {
    if (itemStack != null) {
      if (itemStack.getItem() == Items.NAME_TAG) {
        if (itemStack.hasName()) {
          EntityMyPet.super.setCustomName(""String_Node_Str"");
          MyPetPlugin.getPlugin().getServer().getScheduler().runTaskLater(MyPetPlugin.getPlugin(),new Runnable(){
            public void run(){
              setCustomName(""String_Node_Str"");
            }
          }
,1L);
          return false;
        }
      }
    }
  }
  return false;
}",0.8123861566484517
187502,"@Override public void readExtendedInfo(TagCompound info){
  if (info.containsKeyAs(""String_Node_Str"",TagInt.class)) {
    setVariant(RabbitType.getTypeByID(info.getAs(""String_Node_Str"",TagByte.class).getByteData()));
  }
  if (info.getCompoundData().containsKey(""String_Node_Str"")) {
    setBaby(info.getAs(""String_Node_Str"",TagByte.class).getBooleanData());
  }
}","@Override public void readExtendedInfo(TagCompound info){
  if (info.containsKeyAs(""String_Node_Str"",TagByte.class)) {
    setVariant(RabbitType.getTypeByID(info.getAs(""String_Node_Str"",TagByte.class).getByteData()));
  }
  if (info.getCompoundData().containsKey(""String_Node_Str"")) {
    setBaby(info.getAs(""String_Node_Str"",TagByte.class).getBooleanData());
  }
}",0.99039780521262
187503,"public void schedule(){
  if (myPet.getStatus() == MyPet.PetState.Here && isActive() && active && selectedBuffs.size() != 0 && --beaconTimer <= 0) {
    beaconTimer=2;
    double range=this.range * myPet.getHungerValue() / 100.;
    if (range < 0.7) {
      active=false;
      selectedBuffs.clear();
    }
    if (selectedBuffs.size() > selectableBuffs) {
      int usableBuff=0;
      for (      int buff : selectedBuffs) {
        if (buffLevel.get(buff) > 0) {
          usableBuff=buff;
        }
      }
      selectedBuffs.clear();
      if (usableBuff != 0) {
        selectedBuffs.add(usableBuff);
      }
    }
    if (selectedBuffs.size() == 0) {
      return;
    }
    BukkitUtil.playParticleEffect(myPet.getLocation().add(0,1,0),EnumParticle.SPELL_WITCH,0.2F,0.2F,0.2F,0.1F,5,20);
    List<Player> members=null;
    if (PARTY_SUPPORT && reciever == BeaconReciever.Party) {
      members=PartyManager.getPartyMembers(getMyPet().getOwner().getPlayer());
    }
    targetLoop:     for (    Object entityObj : this.myPet.getCraftPet().getHandle().world.a(EntityHuman.class,myPet.getCraftPet().getHandle().getBoundingBox().grow(range,range,range))) {
      EntityHuman entityHuman=(EntityHuman)entityObj;
      if (!entityHuman.getBukkitEntity().equals(Bukkit.getPlayer(entityHuman.getName()))) {
        continue;
      }
      int amplification;
switch (reciever) {
case Owner:
        if (!myPet.getOwner().equals(entityHuman)) {
          continue targetLoop;
        }
 else {
          for (          int buff : selectedBuffs) {
            amplification=buffLevel.get(buff) - 1;
            if (entityHuman.hasEffect(buff)) {
              MobEffect effect=entityHuman.getEffect(buffEffectLists.get(buff));
              effect.a(new MobEffect(buff,duration * 20,amplification,true,false));
              entityHuman.updateEffects=true;
            }
 else {
              entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
            }
          }
          BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
          break targetLoop;
        }
case Everyone:
      for (      int buff : selectedBuffs) {
        amplification=buffLevel.get(buff) - 1;
        if (entityHuman.hasEffect(buff)) {
          MobEffect effect=entityHuman.getEffect(buffEffectLists.get(buff));
          effect.a(new MobEffect(buff,duration * 20,amplification,true,false));
          entityHuman.updateEffects=true;
        }
 else {
          entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
        }
      }
    BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
  break;
case Party:
if (PARTY_SUPPORT && members != null) {
  if (entityHuman.getBukkitEntity() instanceof Player && members.contains(entityHuman.getBukkitEntity())) {
    for (    int buff : selectedBuffs) {
      amplification=buffLevel.get(buff) - 1;
      if (entityHuman.hasEffect(buff)) {
        MobEffect effect=entityHuman.getEffect(buffEffectLists.get(buff));
        effect.a(new MobEffect(buff,duration * 20,amplification,true,false));
        entityHuman.updateEffects=true;
      }
 else {
        entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
      }
    }
    BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
  }
  break;
}
 else {
  reciever=BeaconReciever.Owner;
  break targetLoop;
}
}
}
if (HUNGER_DECREASE_TIME > 0 && hungerDecreaseTimer-- < 0) {
myPet.setHungerValue(myPet.getHungerValue() - 1);
hungerDecreaseTimer=HUNGER_DECREASE_TIME;
}
}
}","public void schedule(){
  if (myPet.getStatus() == MyPet.PetState.Here && isActive() && active && selectedBuffs.size() != 0 && --beaconTimer <= 0) {
    beaconTimer=2;
    double range=this.range * myPet.getHungerValue() / 100.;
    if (range < 0.7) {
      active=false;
      selectedBuffs.clear();
    }
    if (selectedBuffs.size() > selectableBuffs) {
      int usableBuff=0;
      for (      int buff : selectedBuffs) {
        if (buffLevel.get(buff) > 0) {
          usableBuff=buff;
        }
      }
      selectedBuffs.clear();
      if (usableBuff != 0) {
        selectedBuffs.add(usableBuff);
      }
    }
    if (selectedBuffs.size() == 0) {
      return;
    }
    BukkitUtil.playParticleEffect(myPet.getLocation().add(0,1,0),EnumParticle.SPELL_WITCH,0.2F,0.2F,0.2F,0.1F,5,20);
    List<Player> members=null;
    if (PARTY_SUPPORT && reciever == BeaconReciever.Party) {
      members=PartyManager.getPartyMembers(getMyPet().getOwner().getPlayer());
    }
    targetLoop:     for (    Object entityObj : this.myPet.getCraftPet().getHandle().world.a(EntityHuman.class,myPet.getCraftPet().getHandle().getBoundingBox().grow(range,range,range))) {
      EntityHuman entityHuman=(EntityHuman)entityObj;
      if (!entityHuman.getBukkitEntity().equals(Bukkit.getPlayer(entityHuman.getName()))) {
        continue;
      }
      int amplification;
switch (reciever) {
case Owner:
        if (!myPet.getOwner().equals(entityHuman)) {
          continue targetLoop;
        }
 else {
          for (          int buff : selectedBuffs) {
            amplification=buffLevel.get(buff) - 1;
            entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
          }
          BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
          break targetLoop;
        }
case Everyone:
      for (      int buff : selectedBuffs) {
        amplification=buffLevel.get(buff) - 1;
        entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
      }
    BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
  break;
case Party:
if (PARTY_SUPPORT && members != null) {
  if (entityHuman.getBukkitEntity() instanceof Player && members.contains(entityHuman.getBukkitEntity())) {
    for (    int buff : selectedBuffs) {
      amplification=buffLevel.get(buff) - 1;
      entityHuman.addEffect(new MobEffect(buff,duration * 20,amplification,true,false));
    }
    BukkitUtil.playParticleEffect(entityHuman.getBukkitEntity().getLocation().add(0,1,0),EnumParticle.SPELL_INSTANT,0.2F,0.2F,0.2F,0.1F,5,20);
  }
  break;
}
 else {
  reciever=BeaconReciever.Owner;
  break targetLoop;
}
}
}
if (HUNGER_DECREASE_TIME > 0 && hungerDecreaseTimer-- < 0) {
myPet.setHungerValue(myPet.getHungerValue() - 1);
hungerDecreaseTimer=HUNGER_DECREASE_TIME;
}
}
}",0.8661742983751847
187504,"@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  event.setWillClose(false);
  event.setWillDestroy(false);
  IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
    event.setWillClose(true);
  event.setWillDestroy(true);
return;
case 4:
if (active) {
menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
active=false;
}
 else {
menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
active=true;
}
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs=selectedBuffs;
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setGlowing(true);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setGlowing(false);
menu.getOption(22).setGlowing(true);
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setGlowing(false);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(true);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}","@Override public void onOptionClick(IconMenu.OptionClickEvent event){
  event.setWillClose(false);
  event.setWillDestroy(false);
  IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
    event.setWillClose(true);
  event.setWillDestroy(true);
return;
case 4:
if (active) {
menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
active=false;
}
 else {
menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
active=true;
}
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setGlowing(true);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setGlowing(false);
menu.getOption(22).setGlowing(true);
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setGlowing(false);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(true);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}",0.9889224572004028
187505,"public boolean activate(){
  Player owner=myPet.getOwner().getPlayer();
  final Beacon beacon=this;
  IconMenu menu=new IconMenu(Util.cutString(""String_Node_Str"" + myPet.getPetName(),32),27,new IconMenu.OptionClickEventHandler(){
    List<Integer> selectedBuffs=beacon.selectedBuffs;
    boolean active=beacon.active;
    private BeaconReciever reciever=beacon.reciever;
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      event.setWillClose(false);
      event.setWillDestroy(false);
      IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
        event.setWillClose(true);
      event.setWillDestroy(true);
    return;
case 4:
  if (active) {
    menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
    active=false;
  }
 else {
    menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
    active=true;
  }
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs=selectedBuffs;
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setGlowing(true);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setGlowing(false);
menu.getOption(22).setGlowing(true);
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setGlowing(false);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(true);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}
}
,MyPetPlugin.getPlugin());
if (beacon.active) {
menu.setOption(4,new IconMenuItem().setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
 else {
menu.setOption(4,new IconMenuItem().setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
menu.setOption(3,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(5).setTitle(GREEN + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(5,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(14).setTitle(RED + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Owner));
if (PARTY_SUPPORT && PartyManager.isInParty(getMyPet().getOwner().getPlayer())) {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(1).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Party));
}
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(2).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Everyone));
if (buffLevel.get(1) > 0) {
menu.setOption(0,new IconMenuItem().setMaterial(LEATHER_BOOTS).setAmount(buffLevel.get(1)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(1),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(1))));
}
if (buffLevel.get(3) > 0) {
menu.setOption(9,new IconMenuItem().setMaterial(GOLD_PICKAXE).setAmount(buffLevel.get(3)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(3),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(3))));
}
if (buffLevel.get(5) > 0) {
menu.setOption(18,new IconMenuItem().setMaterial(DIAMOND_SWORD).setAmount(buffLevel.get(5)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(5),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(5))));
}
if (buffLevel.get(8) > 0) {
menu.setOption(1,new IconMenuItem().setMaterial(FIREWORK).setAmount(buffLevel.get(8)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(8),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(8))));
}
if (buffLevel.get(10) > 0) {
menu.setOption(10,new IconMenuItem().setMaterial(APPLE).setAmount(buffLevel.get(10)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(10))));
}
if (buffLevel.get(11) > 0) {
menu.setOption(19,new IconMenuItem().setMaterial(DIAMOND_CHESTPLATE).setAmount(buffLevel.get(11)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(11),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(11))));
}
if (buffLevel.get(12) > 0) {
menu.setOption(7,new IconMenuItem().setMaterial(LAVA_BUCKET).setAmount(buffLevel.get(12)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(12),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(12))));
}
if (buffLevel.get(13) > 0) {
menu.setOption(16,new IconMenuItem().setMaterial(RAW_FISH).setAmount(buffLevel.get(13)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(13),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(13))));
}
if (buffLevel.get(14) > 0) {
menu.setOption(25,new IconMenuItem().setMaterial(EYE_OF_ENDER).setAmount(buffLevel.get(14)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(14),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(14))));
}
if (buffLevel.get(16) > 0) {
menu.setOption(8,new IconMenuItem().setMaterial(TORCH).setAmount(buffLevel.get(16)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(16),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(16))));
}
if (buffLevel.get(21) > 0) {
menu.setOption(17,new IconMenuItem().setMaterial(GOLDEN_APPLE).setAmount(buffLevel.get(21)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(21),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(21))));
}
if (buffLevel.get(22) > 0) {
menu.setOption(26,new IconMenuItem().setMaterial(SPONGE).setAmount(buffLevel.get(22)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(22),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(22))));
}
for (int buff : selectedBuffs) {
if (buffLevel.get(buff) > 0) {
menu.getOption(buffItemPositions.get(buff)).setGlowing(true);
}
 else {
selectedBuffs.remove(buff);
}
}
if (selectableBuffs > 1) {
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
menu.open(owner);
return true;
}","public boolean activate(){
  Player owner=myPet.getOwner().getPlayer();
  final Beacon beacon=this;
  IconMenu menu=new IconMenu(Util.cutString(""String_Node_Str"" + myPet.getPetName(),32),27,new IconMenu.OptionClickEventHandler(){
    List<Integer> selectedBuffs=new ArrayList<Integer>(beacon.selectedBuffs);
    boolean active=beacon.active;
    private BeaconReciever reciever=beacon.reciever;
    @Override public void onOptionClick(    IconMenu.OptionClickEvent event){
      event.setWillClose(false);
      event.setWillDestroy(false);
      IconMenu menu=event.getMenu();
switch (event.getPosition()) {
case 5:
        event.setWillClose(true);
      event.setWillDestroy(true);
    return;
case 4:
  if (active) {
    menu.getOption(4).setMaterial(REDSTONE_BLOCK).setTitle(""String_Node_Str"" + RED + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + GREEN+ ""String_Node_Str"");
    active=false;
  }
 else {
    menu.getOption(4).setMaterial(EMERALD_BLOCK).setTitle(""String_Node_Str"" + GREEN + ""String_Node_Str"").setLore(RESET + ""String_Node_Str"" + RED+ ""String_Node_Str"");
    active=true;
  }
menu.update();
break;
case 3:
beacon.active=active;
beacon.selectedBuffs.clear();
beacon.selectedBuffs.addAll(selectedBuffs);
beacon.reciever=reciever;
event.setWillClose(true);
event.setWillDestroy(true);
break;
case 21:
if (reciever != BeaconReciever.Owner) {
menu.getOption(21).setGlowing(true);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Owner;
menu.update();
}
break;
case 22:
if (reciever != BeaconReciever.Party) {
menu.getOption(21).setGlowing(false);
menu.getOption(22).setGlowing(true);
menu.getOption(23).setGlowing(false);
reciever=BeaconReciever.Party;
menu.update();
}
break;
case 23:
if (reciever != BeaconReciever.Everyone) {
menu.getOption(21).setGlowing(false);
if (menu.getOption(22) != null) {
menu.getOption(22).setGlowing(false);
}
menu.getOption(23).setGlowing(true);
reciever=BeaconReciever.Everyone;
menu.update();
}
break;
default :
if (buffPositionItems.containsKey(event.getPosition())) {
int selectedBuff=buffPositionItems.get(event.getPosition());
if (selectableBuffs > 1) {
if (selectedBuffs.indexOf(selectedBuff) != -1) {
selectedBuffs.remove(selectedBuffs.indexOf(selectedBuff));
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(false);
menu.update();
}
 else if (selectableBuffs > selectedBuffs.size()) {
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
 else {
break;
}
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
 else {
if (!selectedBuffs.contains(selectedBuff)) {
if (selectedBuffs.size() != 0 && menu.getOption(buffItemPositions.get(selectedBuff)) != null) {
menu.getOption(buffItemPositions.get(selectedBuffs.get(0))).setGlowing(false);
selectedBuffs.clear();
}
selectedBuffs.add(selectedBuff);
menu.getOption(buffItemPositions.get(selectedBuff)).setGlowing(true);
menu.update();
}
}
}
}
}
}
,MyPetPlugin.getPlugin());
if (beacon.active) {
menu.setOption(4,new IconMenuItem().setMaterial(EMERALD_BLOCK).setTitle(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),GREEN + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
 else {
menu.setOption(4,new IconMenuItem().setMaterial(REDSTONE_BLOCK).setTitle(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),RED + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()))).addLoreLine(RESET + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
}
menu.setOption(3,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(5).setTitle(GREEN + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(5,new IconMenuItem().setMaterial(STAINED_GLASS_PANE).setData(14).setTitle(RED + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
menu.setOption(21,new IconMenuItem().setMaterial(SKULL_ITEM).setData(3).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Owner));
if (PARTY_SUPPORT && PartyManager.isInParty(getMyPet().getOwner().getPlayer())) {
menu.setOption(22,new IconMenuItem().setMaterial(SKULL_ITEM).setData(1).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Party));
}
menu.setOption(23,new IconMenuItem().setMaterial(SKULL_ITEM).setData(2).setTitle(GOLD + Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).setGlowing(reciever == BeaconReciever.Everyone));
if (buffLevel.get(1) > 0) {
menu.setOption(0,new IconMenuItem().setMaterial(LEATHER_BOOTS).setAmount(buffLevel.get(1)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(1),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(1))));
}
if (buffLevel.get(3) > 0) {
menu.setOption(9,new IconMenuItem().setMaterial(GOLD_PICKAXE).setAmount(buffLevel.get(3)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(3),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(3))));
}
if (buffLevel.get(5) > 0) {
menu.setOption(18,new IconMenuItem().setMaterial(DIAMOND_SWORD).setAmount(buffLevel.get(5)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(5),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(5))));
}
if (buffLevel.get(8) > 0) {
menu.setOption(1,new IconMenuItem().setMaterial(FIREWORK).setAmount(buffLevel.get(8)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(8),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(8))));
}
if (buffLevel.get(10) > 0) {
menu.setOption(10,new IconMenuItem().setMaterial(APPLE).setAmount(buffLevel.get(10)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(10))));
}
if (buffLevel.get(11) > 0) {
menu.setOption(19,new IconMenuItem().setMaterial(DIAMOND_CHESTPLATE).setAmount(buffLevel.get(11)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(11),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(11))));
}
if (buffLevel.get(12) > 0) {
menu.setOption(7,new IconMenuItem().setMaterial(LAVA_BUCKET).setAmount(buffLevel.get(12)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(12),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(12))));
}
if (buffLevel.get(13) > 0) {
menu.setOption(16,new IconMenuItem().setMaterial(RAW_FISH).setAmount(buffLevel.get(13)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(13),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(13))));
}
if (buffLevel.get(14) > 0) {
menu.setOption(25,new IconMenuItem().setMaterial(EYE_OF_ENDER).setAmount(buffLevel.get(14)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(14),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(14))));
}
if (buffLevel.get(16) > 0) {
menu.setOption(8,new IconMenuItem().setMaterial(TORCH).setAmount(buffLevel.get(16)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(16),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(16))));
}
if (buffLevel.get(21) > 0) {
menu.setOption(17,new IconMenuItem().setMaterial(GOLDEN_APPLE).setAmount(buffLevel.get(21)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(21),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(21))));
}
if (buffLevel.get(22) > 0) {
menu.setOption(26,new IconMenuItem().setMaterial(SPONGE).setAmount(buffLevel.get(22)).setTitle(GOLD + Locales.getString(""String_Node_Str"" + buffNames.get(22),myPet.getOwner().getLanguage()) + GRAY+ ""String_Node_Str""+ Util.decimal2roman(buffLevel.get(22))));
}
for (int buff : selectedBuffs) {
if (buffLevel.get(buff) > 0) {
menu.getOption(buffItemPositions.get(buff)).setGlowing(true);
}
 else {
selectedBuffs.remove(buff);
}
}
if (selectableBuffs > 1) {
if (selectableBuffs > selectedBuffs.size()) {
menu.setOption(13,new IconMenuItem().setMaterial(POTION).setTitle(BLUE + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),selectableBuffs - selectedBuffs.size())).setAmount(selectableBuffs - selectedBuffs.size()));
}
 else {
menu.setOption(13,new IconMenuItem().setMaterial(GLASS_BOTTLE).setTitle(GRAY + Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),0)));
}
}
menu.open(owner);
return true;
}",0.9965826569841948
187506,"@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(event.getPlayer().getItemInHand()) && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.getStatus() == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(Control.class)) {
        if (myPet.getSkills().isSkillActive(Behavior.class)) {
          Behavior behavior=myPet.getSkills().getSkill(Behavior.class);
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName(),behavior.getBehavior().name()));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(Ride.class)) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName()));
            return;
          }
        }
        if (!Permissions.hasExtended(event.getPlayer(),""String_Node_Str"")) {
          myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
          return;
        }
        Block block=event.getPlayer().getTargetBlock((Set)null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          myPet.getSkills().getSkill(Control.class).setMoveTo(block.getLocation());
        }
      }
    }
  }
}","@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(event.getPlayer().getItemInHand()) && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.getStatus() == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(Control.class)) {
        if (myPet.getSkills().isSkillActive(Behavior.class)) {
          Behavior behavior=myPet.getSkills().getSkill(Behavior.class);
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName(),behavior.getBehavior().name()));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(Ride.class)) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName()));
            return;
          }
        }
        if (!Permissions.hasExtended(event.getPlayer(),""String_Node_Str"")) {
          myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
          return;
        }
        Block block=event.getPlayer().getTargetBlock((HashSet<Byte>)null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          myPet.getSkills().getSkill(Control.class).setMoveTo(block.getLocation());
        }
      }
    }
  }
}",0.995682676740421
187507,"@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(event.getPlayer().getItemInHand()) && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.getStatus() == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(Control.class)) {
        if (myPet.getSkills().isSkillActive(Behavior.class)) {
          Behavior behavior=myPet.getSkills().getSkill(Behavior.class);
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName(),behavior.getBehavior().name()));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(Ride.class)) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName()));
            return;
          }
        }
        if (!Permissions.hasExtended(event.getPlayer(),""String_Node_Str"")) {
          myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
          return;
        }
        Block block=event.getPlayer().getTargetBlock(null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          myPet.getSkills().getSkill(Control.class).setMoveTo(block.getLocation());
        }
      }
    }
  }
}","@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && Control.CONTROL_ITEM.compare(event.getPlayer().getItemInHand()) && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.getStatus() == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(Control.class)) {
        if (myPet.getSkills().isSkillActive(Behavior.class)) {
          Behavior behavior=myPet.getSkills().getSkill(Behavior.class);
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName(),behavior.getBehavior().name()));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(Ride.class)) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            event.getPlayer().sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",event.getPlayer()),myPet.getPetName()));
            return;
          }
        }
        if (!Permissions.hasExtended(event.getPlayer(),""String_Node_Str"")) {
          myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
          return;
        }
        Block block=event.getPlayer().getTargetBlock((Set)null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          myPet.getSkills().getSkill(Control.class).setMoveTo(block.getLocation());
        }
      }
    }
  }
}",0.99864535356272
187508,"public boolean setSkilltree(SkillTree skillTree){
  if (skillTree == null || this.skillTree == skillTree) {
    return false;
  }
  if (skillTree.getRequiredLevel() > 1 && getExperience().getLevel() < skillTree.getRequiredLevel()) {
    return false;
  }
  skills.reset();
  this.skillTree=skillTree;
  getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this,1,experience.getLevel(),true));
  return true;
}","public boolean setSkilltree(SkillTree skillTree){
  if (skillTree == null || this.skillTree == skillTree) {
    return false;
  }
  if (skillTree.getRequiredLevel() > 1 && getExperience().getLevel() < skillTree.getRequiredLevel()) {
    return false;
  }
  skills.reset();
  this.skillTree=skillTree;
  getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this,experience.getLevel(),0,true));
  return true;
}",0.9952267303102624
187509,"public Experience(MyPet pet){
  this.myPet=pet;
  if (CALCULATION_MODE.equalsIgnoreCase(""String_Node_Str"") || CALCULATION_MODE.equalsIgnoreCase(""String_Node_Str"")) {
    expMode=new JavaScript(myPet);
  }
 else {
    expMode=new Default(myPet);
  }
  if (!expMode.isUsable()) {
    expMode=new Default(myPet);
    CALCULATION_MODE=""String_Node_Str"";
  }
  Bukkit.getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(myPet,1,getLevel(),true));
}","public Experience(MyPet pet){
  this.myPet=pet;
  if (CALCULATION_MODE.equalsIgnoreCase(""String_Node_Str"") || CALCULATION_MODE.equalsIgnoreCase(""String_Node_Str"")) {
    expMode=new JavaScript(myPet);
  }
 else {
    expMode=new Default(myPet);
  }
  if (!expMode.isUsable()) {
    expMode=new Default(myPet);
    CALCULATION_MODE=""String_Node_Str"";
  }
  reset();
}",0.8780487804878049
187510,"public void reset(){
  int lastLevel=getLevel();
  exp=0;
  Bukkit.getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(myPet,lastLevel,getLevel(),true));
}","public void reset(){
  exp=0;
  Bukkit.getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(myPet,getLevel(),0,true));
}",0.8648648648648649
187511,"public void setExp(double exp){
  exp=exp < 0 ? 0 : exp;
  MyPetExpEvent expEvent=new MyPetExpEvent(myPet,this.getExp(),exp);
  if (Configuration.ENABLE_EVENTS) {
    Bukkit.getServer().getPluginManager().callEvent(expEvent);
    if (expEvent.isCancelled()) {
      return;
    }
  }
  int tmplvl=getLevel();
  this.exp=expEvent.getExp();
  Bukkit.getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(myPet,getLevel(),tmplvl,true));
}","public void setExp(double exp){
  exp=exp < 0 ? 0 : exp;
  MyPetExpEvent expEvent=new MyPetExpEvent(myPet,this.getExp(),exp);
  if (Configuration.ENABLE_EVENTS) {
    Bukkit.getServer().getPluginManager().callEvent(expEvent);
    if (expEvent.isCancelled()) {
      return;
    }
  }
  int tmplvl=getLevel();
  this.exp=expEvent.getExp();
  if (tmplvl != getLevel()) {
    Bukkit.getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(myPet,getLevel(),tmplvl,true));
  }
}",0.961038961038961
187512,"public void schedule(){
  if (pickup && (!Permissions.hasExtended(myPet.getOwner().getPlayer(),""String_Node_Str"") || myPet.getOwner().isInExternalGames())) {
    pickup=false;
    myPet.sendMessageToOwner(Util.formatText(Locales.getString((""String_Node_Str""),myPet.getOwner().getPlayer()),myPet.getPetName(),Locales.getString(""String_Node_Str"",myPet.getOwner())));
    return;
  }
  if (range > 0 && pickup && myPet.getStatus() == PetState.Here && myPet.getSkills().isSkillActive(Inventory.class)) {
    for (    Entity entity : myPet.getCraftPet().getNearbyEntities(range,range,range)) {
      if (entity instanceof Item) {
        Item itemEntity=(Item)entity;
        ItemStack itemStack=itemEntity.getItemStack();
        if (itemStack.getAmount() > 0) {
          PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),itemEntity,itemStack.getAmount());
          Bukkit.getServer().getPluginManager().callEvent(playerPickupEvent);
          if (playerPickupEvent.isCancelled()) {
            continue;
          }
          CustomInventory inv=myPet.getSkills().getSkill(Inventory.class).inv;
          int itemAmount=inv.addItem(itemStack);
          if (itemAmount == 0) {
            for (            Entity p : itemEntity.getNearbyEntities(20,20,20)) {
              if (p instanceof Player) {
                ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(entity.getEntityId(),myPet.getCraftPet().getEntityId()));
              }
            }
            myPet.getCraftPet().getHandle().makeSound(""String_Node_Str"",0.2F,1.0F);
            itemStack.setAmount(0);
            itemEntity.remove();
          }
 else {
            itemStack.setAmount(itemAmount);
          }
        }
      }
      if (expPickup && entity instanceof ExperienceOrb) {
        ExperienceOrb expEntity=(ExperienceOrb)entity;
        myPet.getOwner().getPlayer().giveExp(expEntity.getExperience());
        for (        Entity p : expEntity.getNearbyEntities(20,20,20)) {
          if (p instanceof Player) {
            ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(entity.getEntityId(),myPet.getCraftPet().getEntityId()));
          }
        }
        expEntity.setExperience(0);
        expEntity.remove();
      }
    }
  }
}","public void schedule(){
  if (pickup && (!Permissions.hasExtended(myPet.getOwner().getPlayer(),""String_Node_Str"") || myPet.getOwner().isInExternalGames())) {
    pickup=false;
    myPet.sendMessageToOwner(Util.formatText(Locales.getString((""String_Node_Str""),myPet.getOwner().getPlayer()),myPet.getPetName(),Locales.getString(""String_Node_Str"",myPet.getOwner())));
    return;
  }
  if (range > 0 && pickup && myPet.getStatus() == PetState.Here && myPet.getSkills().isSkillActive(Inventory.class)) {
    for (    Entity entity : myPet.getCraftPet().getNearbyEntities(range,range,range)) {
      if (!entity.isDead()) {
        if (entity instanceof Item) {
          Item itemEntity=(Item)entity;
          ItemStack itemStack=itemEntity.getItemStack();
          if (itemStack.getAmount() > 0) {
            PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),itemEntity,itemStack.getAmount());
            Bukkit.getServer().getPluginManager().callEvent(playerPickupEvent);
            if (playerPickupEvent.isCancelled()) {
              continue;
            }
            CustomInventory inv=myPet.getSkills().getSkill(Inventory.class).inv;
            int itemAmount=inv.addItem(itemStack);
            if (itemAmount == 0) {
              for (              Entity p : itemEntity.getNearbyEntities(20,20,20)) {
                if (p instanceof Player) {
                  ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(entity.getEntityId(),myPet.getCraftPet().getEntityId()));
                }
              }
              myPet.getCraftPet().getHandle().makeSound(""String_Node_Str"",0.2F,1.0F);
              itemStack.setAmount(0);
              itemEntity.remove();
            }
 else {
              itemStack.setAmount(itemAmount);
              itemEntity.setItemStack(itemStack);
            }
          }
        }
        if (expPickup && entity instanceof ExperienceOrb) {
          ExperienceOrb expEntity=(ExperienceOrb)entity;
          myPet.getOwner().getPlayer().giveExp(expEntity.getExperience());
          for (          Entity p : expEntity.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(entity.getEntityId(),myPet.getCraftPet().getEntityId()));
            }
          }
          expEntity.setExperience(0);
          expEntity.remove();
        }
      }
    }
  }
}",0.9592176446109032
187513,"private void sendDeathMessage(final EntityDeathEvent event){
  if (event.getEntity() instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
    String killer;
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager().getType() == EntityType.PLAYER) {
        if (e.getDamager() == myPet.getOwner().getPlayer()) {
          killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
        }
 else {
          killer=((Player)e.getDamager()).getName();
        }
      }
 else       if (e.getDamager().getType() == EntityType.WOLF) {
        Wolf w=(Wolf)e.getDamager();
        killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
        if (w.isTamed()) {
          killer+=""String_Node_Str"" + w.getOwner().getName() + ')';
        }
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        CraftMyPet craftMyPet=(CraftMyPet)e.getDamager();
        killer=craftMyPet.getMyPet().getPetName() + ""String_Node_Str"" + craftMyPet.getOwner().getName()+ ')';
      }
 else       if (e.getDamager() instanceof Projectile) {
        Projectile projectile=(Projectile)e.getDamager();
        killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(projectile.getType().name()),myPet.getOwner().getLanguage()) + ""String_Node_Str"";
        if (projectile.getShooter() instanceof Player) {
          if (projectile.getShooter() == myPet.getOwner().getPlayer()) {
            killer+=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
          }
 else {
            killer+=((Player)projectile.getShooter()).getName();
          }
        }
 else {
          if (MyPetType.isLeashableEntityType(e.getDamager().getType())) {
            killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(MyPetType.getMyPetTypeByEntityType(e.getDamager().getType()).getTypeName()),myPet.getOwner().getLanguage());
          }
 else {
            killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(e.getDamager().getType().getName()),myPet.getOwner().getLanguage());
          }
        }
        killer+=""String_Node_Str"";
      }
 else {
        if (MyPetType.isLeashableEntityType(e.getDamager().getType())) {
          killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(MyPetType.getMyPetTypeByEntityType(e.getDamager().getType()).getTypeName()),myPet.getOwner().getLanguage());
        }
 else {
          killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(e.getDamager().getType().getName()),myPet.getOwner().getLanguage());
        }
      }
    }
 else {
      if (event.getEntity().getLastDamageCause() != null) {
        killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(event.getEntity().getLastDamageCause().getCause().name()),myPet.getOwner().getLanguage());
      }
 else {
        killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
      }
    }
    myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),myPet.getPetName(),killer));
  }
}","private void sendDeathMessage(final EntityDeathEvent event){
  if (event.getEntity() instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
    String killer;
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager().getType() == EntityType.PLAYER) {
        if (e.getDamager() == myPet.getOwner().getPlayer()) {
          killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
        }
 else {
          killer=((Player)e.getDamager()).getName();
        }
      }
 else       if (e.getDamager().getType() == EntityType.WOLF) {
        Wolf w=(Wolf)e.getDamager();
        killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
        if (w.isTamed()) {
          killer+=""String_Node_Str"" + w.getOwner().getName() + ')';
        }
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        CraftMyPet craftMyPet=(CraftMyPet)e.getDamager();
        killer=craftMyPet.getMyPet().getPetName() + ""String_Node_Str"" + craftMyPet.getOwner().getName()+ ')';
      }
 else       if (e.getDamager() instanceof Projectile) {
        Projectile projectile=(Projectile)e.getDamager();
        killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(projectile.getType().name()),myPet.getOwner().getLanguage()) + ""String_Node_Str"";
        if (projectile.getShooter() instanceof Player) {
          if (projectile.getShooter() == myPet.getOwner().getPlayer()) {
            killer+=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
          }
 else {
            killer+=((Player)projectile.getShooter()).getName();
          }
        }
 else {
          if (MyPetType.isLeashableEntityType(e.getDamager().getType())) {
            killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(MyPetType.getMyPetTypeByEntityType(e.getDamager().getType()).getTypeName()),myPet.getOwner().getLanguage());
          }
 else           if (e.getDamager().getType().getName() != null) {
            killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(e.getDamager().getType().getName()),myPet.getOwner().getLanguage());
          }
 else {
            killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
          }
        }
        killer+=""String_Node_Str"";
      }
 else {
        if (MyPetType.isLeashableEntityType(e.getDamager().getType())) {
          killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(MyPetType.getMyPetTypeByEntityType(e.getDamager().getType()).getTypeName()),myPet.getOwner().getLanguage());
        }
 else {
          killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(e.getDamager().getType().getName()),myPet.getOwner().getLanguage());
        }
      }
    }
 else {
      if (event.getEntity().getLastDamageCause() != null) {
        killer=Locales.getString(""String_Node_Str"" + Util.capitalizeName(event.getEntity().getLastDamageCause().getCause().name()),myPet.getOwner().getLanguage());
      }
 else {
        killer=Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage());
      }
    }
    myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),myPet.getPetName(),killer));
  }
}",0.9750300842358604
187514,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    final MyPet myPet=MyPetList.getMyPet(player);
    final MyPetPlayer myPetOwner=myPet.getOwner();
    if (Configuration.AUTOMATIC_SKILLTREE_ASSIGNMENT && !myPet.getOwner().isMyPetAdmin()) {
      myPet.autoAssignSkilltree();
      sender.sendMessage(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
    }
 else     if (myPet.getSkillTree() != null && Configuration.CHOOSE_SKILLTREE_ONLY_ONCE && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),myPet.getPetName()));
    }
 else     if (SkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length >= 1) {
        String skilltreeName=""String_Node_Str"";
        for (        String arg : args) {
          skilltreeName+=arg + ""String_Node_Str"";
        }
        skilltreeName=skilltreeName.substring(0,skilltreeName.length() - 1);
        if (skillTreeMobType.hasSkillTree(skilltreeName)) {
          SkillTree skillTree=skillTreeMobType.getSkillTree(skilltreeName);
          if (Permissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            int requiredLevel=skillTree.getRequiredLevel();
            if (requiredLevel > 1 && myPet.getExperience().getLevel() < requiredLevel) {
              myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",player),myPet.getPetName(),requiredLevel));
            }
 else             if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skillTree.getName()));
              if (myPet.getOwner().isMyPetAdmin() && Configuration.SKILLTREE_SWITCH_PENALTY_ADMIN) {
                myPet.getExperience().removeExp(Configuration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * Configuration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
 else {
                myPet.getExperience().removeExp(Configuration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * Configuration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
            }
 else {
              sender.sendMessage(Locales.getString(""String_Node_Str"",player));
            }
          }
 else {
            sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skilltreeName));
          }
        }
 else {
          sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skilltreeName));
        }
      }
 else {
        List<SkillTree> availableSkilltrees=new ArrayList<SkillTree>();
        for (        SkillTree skillTree : skillTreeMobType.getSkillTrees()) {
          if (Permissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            availableSkilltrees.add(skillTree);
          }
        }
        if (availableSkilltrees.size() == 0) {
          sender.sendMessage(Locales.getString(""String_Node_Str"",player));
          return true;
        }
        final Map<Integer,SkillTree> skilltreeSlotMap=new HashMap<Integer,SkillTree>();
        IconMenu menu=new IconMenu(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),myPet.getPetName()),(int)(Math.ceil(availableSkilltrees.size() / 9.) * 9),new IconMenu.OptionClickEventHandler(){
          @Override public void onOptionClick(          IconMenu.OptionClickEvent event){
            if (myPet != myPetOwner.getMyPet()) {
              event.setWillClose(true);
              event.setWillDestroy(true);
              return;
            }
            if (skilltreeSlotMap.containsKey(event.getPosition())) {
              SkillTree selecedSkilltree=skilltreeSlotMap.get(event.getPosition());
              if (selecedSkilltree != null) {
                int requiredLevel=selecedSkilltree.getRequiredLevel();
                if (requiredLevel > 1 && myPet.getExperience().getLevel() < requiredLevel) {
                  myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),myPet.getPetName(),requiredLevel));
                }
 else                 if (myPet.setSkilltree(selecedSkilltree)) {
                  myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),selecedSkilltree.getName()));
                }
 else {
                  myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPetOwner));
                }
              }
            }
            event.setWillClose(true);
            event.setWillDestroy(true);
          }
        }
,MyPetPlugin.getPlugin());
        for (int i=0; i < availableSkilltrees.size(); i++) {
          SkillTree addedSkilltree=availableSkilltrees.get(i);
          CompoundTag tag=addedSkilltree.getIconItem();
          net.minecraft.server.v1_6_R3.ItemStack is=ItemStackNBTConverter.CompundToItemStack(tag);
          ItemStack shownItem=CraftItemStack.asCraftMirror(is);
          boolean selectable=false;
          int requiredLevel=addedSkilltree.getRequiredLevel();
          if (requiredLevel > 1) {
            selectable=myPet.getExperience().getLevel() >= addedSkilltree.getRequiredLevel();
          }
          int requireOffset=requiredLevel > 1 ? 1 : 0;
          String[] descriptionArray=new String[addedSkilltree.getDescription().size() + requireOffset];
          if (requireOffset == 1) {
            descriptionArray[0]=ChatColor.RESET + ""String_Node_Str"";
            if (selectable) {
              descriptionArray[0]+=ChatColor.GREEN;
            }
 else {
              descriptionArray[0]+=ChatColor.DARK_RED;
            }
            descriptionArray[0]+=Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),requiredLevel) + ChatColor.RESET + ""String_Node_Str"";
          }
          for (int j=requireOffset; j < addedSkilltree.getDescription().size() + requireOffset; j++) {
            descriptionArray[j]=ChatColor.RESET + Colorizer.setColors(String.valueOf(addedSkilltree.getDescription().get(j)));
          }
          menu.setOption(i,shownItem,ChatColor.RESET + ""String_Node_Str"" + ChatColor.DARK_GREEN+ addedSkilltree.getDisplayName()+ ChatColor.RESET+ ""String_Node_Str"",descriptionArray);
          skilltreeSlotMap.put(i,addedSkilltree);
        }
        menu.open(player);
      }
    }
  }
 else {
    sender.sendMessage(Locales.getString(""String_Node_Str"",player));
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    final MyPet myPet=MyPetList.getMyPet(player);
    final MyPetPlayer myPetOwner=myPet.getOwner();
    if (Configuration.AUTOMATIC_SKILLTREE_ASSIGNMENT && !myPet.getOwner().isMyPetAdmin()) {
      myPet.autoAssignSkilltree();
      sender.sendMessage(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
    }
 else     if (myPet.getSkillTree() != null && Configuration.CHOOSE_SKILLTREE_ONLY_ONCE && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()),myPet.getPetName()));
    }
 else     if (SkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      SkillTreeMobType skillTreeMobType=SkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length >= 1) {
        String skilltreeName=""String_Node_Str"";
        for (        String arg : args) {
          skilltreeName+=arg + ""String_Node_Str"";
        }
        skilltreeName=skilltreeName.substring(0,skilltreeName.length() - 1);
        if (skillTreeMobType.hasSkillTree(skilltreeName)) {
          SkillTree skillTree=skillTreeMobType.getSkillTree(skilltreeName);
          if (Permissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            int requiredLevel=skillTree.getRequiredLevel();
            if (requiredLevel > 1 && myPet.getExperience().getLevel() < requiredLevel) {
              myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",player),myPet.getPetName(),requiredLevel));
            }
 else             if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skillTree.getName()));
              if (myPet.getOwner().isMyPetAdmin() && Configuration.SKILLTREE_SWITCH_PENALTY_ADMIN) {
                myPet.getExperience().removeExp(Configuration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * Configuration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
 else {
                myPet.getExperience().removeExp(Configuration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * Configuration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
            }
 else {
              sender.sendMessage(Locales.getString(""String_Node_Str"",player));
            }
          }
 else {
            sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skilltreeName));
          }
        }
 else {
          sender.sendMessage(Util.formatText(Locales.getString(""String_Node_Str"",player),skilltreeName));
        }
      }
 else {
        List<SkillTree> availableSkilltrees=new ArrayList<SkillTree>();
        for (        SkillTree skillTree : skillTreeMobType.getSkillTrees()) {
          if (Permissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            availableSkilltrees.add(skillTree);
          }
        }
        if (availableSkilltrees.size() == 0) {
          sender.sendMessage(Locales.getString(""String_Node_Str"",player));
          return true;
        }
        final Map<Integer,SkillTree> skilltreeSlotMap=new HashMap<Integer,SkillTree>();
        IconMenu menu=new IconMenu(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),myPet.getPetName()),(int)(Math.ceil(availableSkilltrees.size() / 9.) * 9),new IconMenu.OptionClickEventHandler(){
          @Override public void onOptionClick(          IconMenu.OptionClickEvent event){
            if (myPet != myPetOwner.getMyPet()) {
              event.setWillClose(true);
              event.setWillDestroy(true);
              return;
            }
            if (skilltreeSlotMap.containsKey(event.getPosition())) {
              SkillTree selecedSkilltree=skilltreeSlotMap.get(event.getPosition());
              if (selecedSkilltree != null) {
                int requiredLevel=selecedSkilltree.getRequiredLevel();
                if (requiredLevel > 1 && myPet.getExperience().getLevel() < requiredLevel) {
                  myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),myPet.getPetName(),requiredLevel));
                }
 else                 if (myPet.setSkilltree(selecedSkilltree)) {
                  myPet.sendMessageToOwner(Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),selecedSkilltree.getName()));
                }
 else {
                  myPet.sendMessageToOwner(Locales.getString(""String_Node_Str"",myPetOwner));
                }
              }
            }
            event.setWillClose(true);
            event.setWillDestroy(true);
          }
        }
,MyPetPlugin.getPlugin());
        for (int i=0; i < availableSkilltrees.size(); i++) {
          SkillTree addedSkilltree=availableSkilltrees.get(i);
          CompoundTag tag=addedSkilltree.getIconItem();
          net.minecraft.server.v1_6_R3.ItemStack is=ItemStackNBTConverter.CompundToItemStack(tag);
          ItemStack shownItem=CraftItemStack.asCraftMirror(is);
          boolean selectable=false;
          int requiredLevel=addedSkilltree.getRequiredLevel();
          if (requiredLevel > 1) {
            selectable=myPet.getExperience().getLevel() >= addedSkilltree.getRequiredLevel();
          }
          int requireOffset=requiredLevel > 1 ? 1 : 0;
          String[] descriptionArray=new String[addedSkilltree.getDescription().size() + requireOffset];
          if (requireOffset == 1) {
            descriptionArray[0]=ChatColor.RESET + ""String_Node_Str"";
            if (selectable) {
              descriptionArray[0]+=ChatColor.GREEN;
            }
 else {
              descriptionArray[0]+=ChatColor.DARK_RED;
            }
            descriptionArray[0]+=Util.formatText(Locales.getString(""String_Node_Str"",myPetOwner),requiredLevel) + ChatColor.RESET + ""String_Node_Str"";
          }
          for (int j=0; j < addedSkilltree.getDescription().size(); j++) {
            descriptionArray[j + requireOffset]=ChatColor.RESET + Colorizer.setColors(String.valueOf(addedSkilltree.getDescription().get(j)));
          }
          menu.setOption(i,shownItem,ChatColor.RESET + ""String_Node_Str"" + ChatColor.DARK_GREEN+ addedSkilltree.getDisplayName()+ ChatColor.RESET+ ""String_Node_Str"",descriptionArray);
          skilltreeSlotMap.put(i,addedSkilltree);
        }
        menu.open(player);
      }
    }
  }
 else {
    sender.sendMessage(Locales.getString(""String_Node_Str"",player));
  }
  return true;
}",0.9864174090842704
187515,"@SuppressWarnings(""String_Node_Str"") @EventHandler public void onEntityDeath(final EntityDeathEvent event){
  if (Configuration.USE_LEVEL_SYSTEM) {
    LivingEntity deadEntity=event.getEntity();
    if (deadEntity instanceof CraftMyPet) {
      return;
    }
    if (!Experience.GAIN_EXP_FROM_MONSTER_SPAWNER_MOBS && event.getEntity().hasMetadata(""String_Node_Str"")) {
      for (      MetadataValue value : event.getEntity().getMetadata(""String_Node_Str"")) {
        if (value.getOwningPlugin().getName().equals(MyPetPlugin.getPlugin().getName())) {
          if (value.asBoolean()) {
            return;
          }
          break;
        }
      }
    }
    if (Experience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
      Map<Entity,Double> damagePercentMap=Experience.getDamageToEntityPercent(deadEntity);
      for (      Entity entity : damagePercentMap.keySet()) {
        if (entity instanceof CraftMyPet) {
          MyPet myPet=((CraftMyPet)entity).getMyPet();
          if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            if (!myPet.autoAssignSkilltree()) {
              continue;
            }
          }
          if (myPet.getSkillTree() == null || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
            double randomExp=MonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
            myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
          }
        }
 else         if (entity instanceof Player) {
          Player owner=(Player)entity;
          if (MyPetList.hasMyPet(owner)) {
            MyPet myPet=MyPetList.getMyPet(owner);
            if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
              if (!myPet.autoAssignSkilltree()) {
                continue;
              }
            }
            if (myPet.isPassiv()) {
              if (myPet.getStatus() == PetState.Here) {
                if (myPet.getSkillTree() == null || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
                  double randomExp=MonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
                  myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
                }
              }
            }
          }
        }
      }
    }
 else     if (deadEntity.getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent edbee=(EntityDamageByEntityEvent)deadEntity.getLastDamageCause();
      Entity damager=edbee.getDamager();
      if (damager instanceof Projectile) {
        damager=((Projectile)damager).getShooter();
      }
      if (damager instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)damager).getMyPet();
        if (myPet.getSkillTree() == null && Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE) {
          if (!myPet.autoAssignSkilltree()) {
            return;
          }
        }
        myPet.getExperience().addExp(edbee.getEntity().getType());
      }
 else       if (damager instanceof Player) {
        Player owner=(Player)damager;
        if (MyPetList.hasMyPet(owner)) {
          MyPet myPet=MyPetList.getMyPet(owner);
          if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            if (!myPet.autoAssignSkilltree()) {
              return;
            }
          }
          if (myPet.isPassiv()) {
            if (myPet.getStatus() == PetState.Here) {
              if (myPet.getSkillTree() == null || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
                myPet.getExperience().addExp(deadEntity.getType(),Configuration.PASSIVE_PERCENT_PER_MONSTER);
              }
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @EventHandler public void onEntityDeath(final EntityDeathEvent event){
  if (Configuration.USE_LEVEL_SYSTEM) {
    LivingEntity deadEntity=event.getEntity();
    if (deadEntity instanceof CraftMyPet) {
      return;
    }
    if (!Experience.GAIN_EXP_FROM_MONSTER_SPAWNER_MOBS && event.getEntity().hasMetadata(""String_Node_Str"")) {
      for (      MetadataValue value : event.getEntity().getMetadata(""String_Node_Str"")) {
        if (value.getOwningPlugin().getName().equals(MyPetPlugin.getPlugin().getName())) {
          if (value.asBoolean()) {
            return;
          }
          break;
        }
      }
    }
    if (Experience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
      Map<Entity,Double> damagePercentMap=Experience.getDamageToEntityPercent(deadEntity);
      for (      Entity entity : damagePercentMap.keySet()) {
        if (entity instanceof CraftMyPet) {
          MyPet myPet=((CraftMyPet)entity).getMyPet();
          if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            if (!myPet.autoAssignSkilltree()) {
              continue;
            }
          }
          if (myPet.getSkillTree() == null || myPet.getSkillTree().getMaxLevel() <= 1 || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
            double randomExp=MonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
            myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
          }
        }
 else         if (entity instanceof Player) {
          Player owner=(Player)entity;
          if (MyPetList.hasMyPet(owner)) {
            MyPet myPet=MyPetList.getMyPet(owner);
            if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
              if (!myPet.autoAssignSkilltree()) {
                continue;
              }
            }
            if (myPet.isPassiv()) {
              if (myPet.getStatus() == PetState.Here) {
                if (myPet.getSkillTree() == null || myPet.getSkillTree().getMaxLevel() <= 1 || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
                  double randomExp=MonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
                  myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
                }
              }
            }
          }
        }
      }
    }
 else     if (deadEntity.getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent edbee=(EntityDamageByEntityEvent)deadEntity.getLastDamageCause();
      Entity damager=edbee.getDamager();
      if (damager instanceof Projectile) {
        damager=((Projectile)damager).getShooter();
      }
      if (damager instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)damager).getMyPet();
        if (myPet.getSkillTree() == null && Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE) {
          if (!myPet.autoAssignSkilltree()) {
            return;
          }
        }
        myPet.getExperience().addExp(edbee.getEntity().getType());
      }
 else       if (damager instanceof Player) {
        Player owner=(Player)damager;
        if (MyPetList.hasMyPet(owner)) {
          MyPet myPet=MyPetList.getMyPet(owner);
          if (Configuration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            if (!myPet.autoAssignSkilltree()) {
              return;
            }
          }
          if (myPet.isPassiv()) {
            if (myPet.getStatus() == PetState.Here) {
              if (myPet.getSkillTree() == null || myPet.getSkillTree().getMaxLevel() <= 1 || myPet.getExperience().getLevel() < myPet.getSkillTree().getMaxLevel()) {
                myPet.getExperience().addExp(deadEntity.getType(),Configuration.PASSIVE_PERCENT_PER_MONSTER);
              }
            }
          }
        }
      }
    }
  }
}",0.9834594178740864
187516,"@Override public boolean shouldStart(){
  if (behaviorSkill == null || !behaviorSkill.isActive() || behaviorSkill.getBehavior() != BehaviorState.Aggressive) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (!myPet.getCraftPet().canMove()) {
    return false;
  }
  if (petEntity.getGoalTarget() != null && petEntity.getGoalTarget().isAlive()) {
    return false;
  }
  for (  Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petOwnerEntity.boundingBox.grow((double)range,(double)range,(double)range))) {
    EntityLiving entityLiving=(EntityLiving)entityObj;
    if (entityLiving != petEntity && entityLiving.isAlive() && petEntity.e(entityLiving) <= 91) {
      if (entityLiving instanceof EntityPlayer) {
        Player targetPlayer=(Player)entityLiving.getBukkitEntity();
        if (myPet.getOwner().equals(targetPlayer)) {
          continue;
        }
        if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
          continue;
        }
      }
 else       if (entityLiving instanceof EntityMyPet) {
        MyPet targetMyPet=((EntityMyPet)entityLiving).getMyPet();
        if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
          continue;
        }
      }
 else       if (entityLiving instanceof EntityTameableAnimal) {
        EntityTameableAnimal tameable=(EntityTameableAnimal)entityLiving;
        if (tameable.isTamed() && tameable.getOwner() != null) {
          Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
          if (myPet.getOwner().equals(tameableOwner)) {
            continue;
          }
 else           if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
            continue;
          }
        }
      }
      this.target=entityLiving;
      return true;
    }
  }
  return false;
}","@Override public boolean shouldStart(){
  if (behaviorSkill == null || !behaviorSkill.isActive() || behaviorSkill.getBehavior() != BehaviorState.Aggressive) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (!myPet.getCraftPet().canMove()) {
    return false;
  }
  if (petEntity.getGoalTarget() != null && petEntity.getGoalTarget().isAlive()) {
    return false;
  }
  for (  Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petOwnerEntity.boundingBox.grow((double)range,(double)range,(double)range))) {
    EntityLiving entityLiving=(EntityLiving)entityObj;
    if (entityLiving != petEntity && entityLiving.isAlive() && petEntity.e(entityLiving) <= 91) {
      if (entityLiving instanceof EntityPlayer) {
        Player targetPlayer=(Player)entityLiving.getBukkitEntity();
        if (myPet.getOwner().equals(targetPlayer)) {
          continue;
        }
        if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
          continue;
        }
      }
 else       if (entityLiving instanceof EntityMyPet) {
        MyPet targetMyPet=((EntityMyPet)entityLiving).getMyPet();
        if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
          continue;
        }
      }
 else       if (entityLiving instanceof EntityTameableAnimal) {
        EntityTameableAnimal tameable=(EntityTameableAnimal)entityLiving;
        if (tameable.isTamed() && tameable.getOwner() != null) {
          Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
          if (myPet.getOwner().equals(tameableOwner)) {
            continue;
          }
 else           if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
            continue;
          }
        }
      }
      if (!PvPChecker.canHurtCitizens(entityLiving.getBukkitEntity())) {
        continue;
      }
      this.target=entityLiving;
      return true;
    }
  }
  return false;
}",0.9741489633990272
187517,"@Override public boolean shouldStart(){
  if (behaviorSkill == null || !behaviorSkill.isActive() || behaviorSkill.getBehavior() != BehaviorState.Farm) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (!myPet.getCraftPet().canMove()) {
    return false;
  }
  if (petEntity.getGoalTarget() != null && petEntity.getGoalTarget().isAlive()) {
    return false;
  }
  for (  Object entityObj : this.petEntity.world.a(EntityMonster.class,this.petOwnerEntity.boundingBox.grow((double)range,(double)range,(double)range))) {
    EntityMonster entityMonster=(EntityMonster)entityObj;
    if (!entityMonster.isAlive() || petEntity.e(entityMonster) > 91) {
      continue;
    }
    this.target=entityMonster;
    return true;
  }
  return false;
}","@Override public boolean shouldStart(){
  if (behaviorSkill == null || !behaviorSkill.isActive() || behaviorSkill.getBehavior() != BehaviorState.Farm) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (!myPet.getCraftPet().canMove()) {
    return false;
  }
  if (petEntity.getGoalTarget() != null && petEntity.getGoalTarget().isAlive()) {
    return false;
  }
  for (  Object entityObj : this.petEntity.world.a(EntityMonster.class,this.petOwnerEntity.boundingBox.grow((double)range,(double)range,(double)range))) {
    EntityMonster entityMonster=(EntityMonster)entityObj;
    if (!entityMonster.isAlive() || petEntity.e(entityMonster) > 91) {
      continue;
    }
    if (!PvPChecker.canHurtCitizens(entityMonster.getBukkitEntity())) {
      continue;
    }
    this.target=entityMonster;
    return true;
  }
  return false;
}",0.944640753828033
187518,"@Override public boolean shouldStart(){
  if (controlPathfinderGoal == null) {
    if (petEntity.petPathfinderSelector.hasGoal(""String_Node_Str"")) {
      controlPathfinderGoal=(Control)petEntity.petPathfinderSelector.getGoal(""String_Node_Str"");
    }
  }
  if (controlPathfinderGoal == null) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (controlPathfinderGoal.moveTo != null && petEntity.canMove()) {
    Behavior behaviorSkill=null;
    if (myPet.getSkills().isSkillActive(Behavior.class)) {
      behaviorSkill=myPet.getSkills().getSkill(Behavior.class);
      if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
    }
    for (    Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)this.range,4.0D,(double)this.range))) {
      EntityLiving entityLiving=(EntityLiving)entityObj;
      if (entityLiving != petEntity) {
        if (entityLiving instanceof EntityPlayer) {
          Player targetPlayer=(Player)entityLiving.getBukkitEntity();
          if (myPet.getOwner().equals(targetPlayer)) {
            continue;
          }
 else           if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
            continue;
          }
        }
 else         if (entityLiving instanceof EntityTameableAnimal) {
          EntityTameableAnimal tameable=(EntityTameableAnimal)entityLiving;
          if (tameable.isTamed() && tameable.getOwner() != null) {
            Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
            if (myPet.getOwner().equals(tameableOwner)) {
              continue;
            }
 else             if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
              continue;
            }
          }
        }
 else         if (entityLiving instanceof EntityMyPet) {
          MyPet targetMyPet=((EntityMyPet)entityLiving).getMyPet();
          if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
            continue;
          }
        }
        if (behaviorSkill != null) {
          if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
            if (entityLiving instanceof EntityTameableAnimal) {
              continue;
            }
 else             if (entityLiving instanceof EntityMyPet) {
              continue;
            }
 else             if (entityLiving instanceof EntityPlayer) {
              continue;
            }
          }
        }
        controlPathfinderGoal.stopControl();
        this.target=entityLiving;
        return true;
      }
    }
  }
  return false;
}","@Override public boolean shouldStart(){
  if (controlPathfinderGoal == null) {
    if (petEntity.petPathfinderSelector.hasGoal(""String_Node_Str"")) {
      controlPathfinderGoal=(Control)petEntity.petPathfinderSelector.getGoal(""String_Node_Str"");
    }
  }
  if (controlPathfinderGoal == null) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (controlPathfinderGoal.moveTo != null && petEntity.canMove()) {
    Behavior behaviorSkill=null;
    if (myPet.getSkills().isSkillActive(Behavior.class)) {
      behaviorSkill=myPet.getSkills().getSkill(Behavior.class);
      if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
    }
    for (    Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)this.range,4.0D,(double)this.range))) {
      EntityLiving entityLiving=(EntityLiving)entityObj;
      if (entityLiving != petEntity) {
        if (entityLiving instanceof EntityPlayer) {
          Player targetPlayer=(Player)entityLiving.getBukkitEntity();
          if (myPet.getOwner().equals(targetPlayer)) {
            continue;
          }
 else           if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
            continue;
          }
        }
 else         if (entityLiving instanceof EntityTameableAnimal) {
          EntityTameableAnimal tameable=(EntityTameableAnimal)entityLiving;
          if (tameable.isTamed() && tameable.getOwner() != null) {
            Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
            if (myPet.getOwner().equals(tameableOwner)) {
              continue;
            }
 else             if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
              continue;
            }
          }
        }
 else         if (entityLiving instanceof EntityMyPet) {
          MyPet targetMyPet=((EntityMyPet)entityLiving).getMyPet();
          if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
            continue;
          }
        }
        if (!PvPChecker.canHurtCitizens(entityLiving.getBukkitEntity())) {
          continue;
        }
        if (behaviorSkill != null) {
          if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
            if (entityLiving instanceof EntityTameableAnimal) {
              continue;
            }
 else             if (entityLiving instanceof EntityMyPet) {
              continue;
            }
 else             if (entityLiving instanceof EntityPlayer) {
              continue;
            }
          }
        }
        controlPathfinderGoal.stopControl();
        this.target=entityLiving;
        return true;
      }
    }
  }
  return false;
}",0.9809125613524814
187519,"@Override public boolean shouldStart(){
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (petEntity.getLastDamager() == null) {
    return false;
  }
  if (target != petEntity.getLastDamager()) {
    target=petEntity.getLastDamager();
  }
  if (target == petEntity) {
    return false;
  }
  if (target instanceof EntityPlayer) {
    Player targetPlayer=(Player)target.getBukkitEntity();
    if (targetPlayer == myPet.getOwner().getPlayer()) {
      return false;
    }
 else     if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (target instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)target).getMyPet();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (target instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)target;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean shouldStart(){
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (petEntity.getLastDamager() == null) {
    return false;
  }
  if (target != petEntity.getLastDamager()) {
    target=petEntity.getLastDamager();
  }
  if (target == petEntity) {
    return false;
  }
  if (target instanceof EntityPlayer) {
    Player targetPlayer=(Player)target.getBukkitEntity();
    if (targetPlayer == myPet.getOwner().getPlayer()) {
      return false;
    }
 else     if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (target instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)target).getMyPet();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (target instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)target;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  if (!PvPChecker.canHurtCitizens(target.getBukkitEntity())) {
    return false;
  }
  return true;
}",0.9548902195608784
187520,"@Override public boolean shouldStart(){
  if (!petEntity.canMove()) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  this.lastDamager=owner.getLastDamager();
  if (this.lastDamager == null || !lastDamager.isAlive()) {
    return false;
  }
  if (lastDamager == petEntity) {
    return false;
  }
  if (lastDamager instanceof EntityPlayer) {
    if (owner == lastDamager) {
      return false;
    }
    Player targetPlayer=(Player)lastDamager.getBukkitEntity();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)lastDamager).getMyPet();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)lastDamager;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (lastDamager instanceof EntityTameableAnimal && ((EntityTameableAnimal)lastDamager).isTamed()) {
        return false;
      }
      if (lastDamager instanceof EntityMyPet) {
        return false;
      }
      if (lastDamager instanceof EntityPlayer) {
        return false;
      }
    }
  }
  return true;
}","@Override public boolean shouldStart(){
  if (!petEntity.canMove()) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  this.lastDamager=owner.getLastDamager();
  if (this.lastDamager == null || !lastDamager.isAlive()) {
    return false;
  }
  if (lastDamager == petEntity) {
    return false;
  }
  if (lastDamager instanceof EntityPlayer) {
    if (owner == lastDamager) {
      return false;
    }
    Player targetPlayer=(Player)lastDamager.getBukkitEntity();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)lastDamager).getMyPet();
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)lastDamager;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  if (!PvPChecker.canHurtCitizens(lastDamager.getBukkitEntity())) {
    return false;
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (lastDamager instanceof EntityTameableAnimal && ((EntityTameableAnimal)lastDamager).isTamed()) {
        return false;
      }
      if (lastDamager instanceof EntityMyPet) {
        return false;
      }
      if (lastDamager instanceof EntityPlayer) {
        return false;
      }
    }
  }
  return true;
}",0.9750692520775625
187521,"@Override public boolean shouldStart(){
  if (!petEntity.canMove()) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (this.petEntity.goalTarget == null) {
    return false;
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      this.petEntity.goalTarget=null;
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (this.petEntity.goalTarget instanceof EntityTameableAnimal && ((EntityTameableAnimal)this.petEntity.goalTarget).isTamed()) {
        this.petEntity.goalTarget=null;
        return false;
      }
      if (this.petEntity.goalTarget instanceof EntityMyPet) {
        this.petEntity.goalTarget=null;
        return false;
      }
      if (this.petEntity.goalTarget instanceof EntityPlayer) {
        this.petEntity.goalTarget=null;
        return false;
      }
    }
  }
  if (this.petEntity.goalTarget instanceof EntityPlayer) {
    Player targetPlayer=(Player)this.petEntity.goalTarget.getBukkitEntity();
    if (myPet.getOwner().equals(targetPlayer)) {
      this.petEntity.goalTarget=null;
      return false;
    }
 else     if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      this.petEntity.goalTarget=null;
      return false;
    }
  }
 else   if (this.petEntity.goalTarget instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)this.petEntity.goalTarget;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        this.petEntity.goalTarget=null;
        return false;
      }
 else       if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
        this.petEntity.goalTarget=null;
        return false;
      }
    }
  }
 else   if (this.petEntity.goalTarget instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)this.petEntity.goalTarget).getMyPet();
    if (targetMyPet == null) {
      this.petEntity.goalTarget=null;
      return false;
    }
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      this.petEntity.goalTarget=null;
      return false;
    }
  }
  this.target=this.petEntity.goalTarget;
  this.petEntity.goalTarget=null;
  return true;
}","@Override public boolean shouldStart(){
  if (!petEntity.canMove()) {
    return false;
  }
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (this.petEntity.goalTarget == null) {
    return false;
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      this.petEntity.goalTarget=null;
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (this.petEntity.goalTarget instanceof EntityTameableAnimal && ((EntityTameableAnimal)this.petEntity.goalTarget).isTamed()) {
        this.petEntity.goalTarget=null;
        return false;
      }
      if (this.petEntity.goalTarget instanceof EntityMyPet) {
        this.petEntity.goalTarget=null;
        return false;
      }
      if (this.petEntity.goalTarget instanceof EntityPlayer) {
        this.petEntity.goalTarget=null;
        return false;
      }
    }
  }
  if (this.petEntity.goalTarget instanceof EntityPlayer) {
    Player targetPlayer=(Player)this.petEntity.goalTarget.getBukkitEntity();
    if (myPet.getOwner().equals(targetPlayer)) {
      this.petEntity.goalTarget=null;
      return false;
    }
 else     if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      this.petEntity.goalTarget=null;
      return false;
    }
  }
 else   if (this.petEntity.goalTarget instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)this.petEntity.goalTarget;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        this.petEntity.goalTarget=null;
        return false;
      }
 else       if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),tameableOwner)) {
        this.petEntity.goalTarget=null;
        return false;
      }
    }
  }
 else   if (this.petEntity.goalTarget instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)this.petEntity.goalTarget).getMyPet();
    if (targetMyPet == null) {
      this.petEntity.goalTarget=null;
      return false;
    }
    if (!PvPChecker.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      this.petEntity.goalTarget=null;
      return false;
    }
  }
  if (!PvPChecker.canHurtCitizens(this.petEntity.goalTarget.getBukkitEntity())) {
    return false;
  }
  this.target=this.petEntity.goalTarget;
  this.petEntity.goalTarget=null;
  return true;
}",0.9727345629510826
187522,"public static boolean canHurtCitizens(Player defender){
  if (!searchedCitizens) {
    searchedCitizens=true;
    pluginCitizens=Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
  }
  if (USE_Citizens && pluginCitizens) {
    if (CitizensAPI.getNPCRegistry().isNPC(defender)) {
      NPC npc=CitizensAPI.getNPCRegistry().getNPC(defender);
      if (npc == null || npc.data() == null) {
        return true;
      }
      return !npc.data().get(""String_Node_Str"",true);
    }
  }
  return true;
}","public static boolean canHurtCitizens(Entity defender){
  if (!searchedCitizens) {
    searchedCitizens=true;
    pluginCitizens=Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"");
  }
  if (USE_Citizens && pluginCitizens) {
    if (CitizensAPI.getNPCRegistry().isNPC(defender)) {
      NPC npc=CitizensAPI.getNPCRegistry().getNPC(defender);
      if (npc == null || npc.data() == null) {
        return true;
      }
      return !npc.data().get(""String_Node_Str"",true);
    }
  }
  return true;
}",0.9903846153846154
187523,"public static String getPlayerLanguage(Player player){
  EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
  try {
    Field field=entityPlayer.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    return (String)field.get(entityPlayer);
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}","public static String getPlayerLanguage(Player player){
  if (!(player instanceof CraftPlayer)) {
    return ""String_Node_Str"";
  }
  EntityPlayer entityPlayer=((CraftPlayer)player).getHandle();
  try {
    Field field=entityPlayer.getClass().getDeclaredField(""String_Node_Str"");
    field.setAccessible(true);
    return (String)field.get(entityPlayer);
  }
 catch (  Exception e) {
    return ""String_Node_Str"";
  }
}",0.618421052631579
187524,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean handlePlayerInteraction(EntityHuman entityhuman){
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  Player owner=this.getOwner().getPlayer();
  applyLeash();
  if (itemStack == null || itemStack.id == 0) {
    if (Ride.RIDE_ITEM == 0 && myPet.getSkills().isSkillActive(""String_Node_Str"") && canMove()) {
      if (Permissions.hasExtended(owner,""String_Node_Str"")) {
        ((CraftPlayer)owner).getHandle().setPassengerOf(this);
        return true;
      }
 else {
        getMyPet().sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
      }
    }
    return false;
  }
  if (isMyPet() && myPet.getOwner().equals(entityhuman)) {
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.RIDE_ITEM && canMove()) {
        if (Permissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().setPassengerOf(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
        }
      }
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == de.Keyle.MyPet.skill.skills.implementation.Control.CONTROL_ITEM) {
        return true;
      }
    }
  }
  if (canEat(itemStack) && canUseItem()) {
    if (owner != null && !Permissions.hasExtended(owner,""String_Node_Str"")) {
      return false;
    }
    if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
      BehaviorDuelTarget duelTarget=(BehaviorDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
      if (duelTarget.getDuelOpponent() != null) {
        return true;
      }
    }
    int addHunger=Configuration.HUNGER_SYSTEM_POINTS_PER_FEED;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),""String_Node_Str"",0.5F,0.5F,0.5F,0.5F,5,20);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),""String_Node_Str"",0.5F,0.5F,0.5F,0.5F,5,20);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < Configuration.HUNGER_SYSTEM_POINTS_PER_FEED) {
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean handlePlayerInteraction(EntityHuman entityhuman){
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  Player owner=this.getOwner().getPlayer();
  applyLeash();
  if (isMyPet() && myPet.getOwner().equals(entityhuman)) {
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if ((itemStack.id == Ride.RIDE_ITEM || (Ride.RIDE_ITEM == 0 && (itemStack == null || itemStack.id == 0))) && canMove()) {
        if (Permissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().setPassengerOf(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(Locales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()));
        }
      }
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == de.Keyle.MyPet.skill.skills.implementation.Control.CONTROL_ITEM) {
        return true;
      }
    }
  }
  if (canEat(itemStack) && canUseItem()) {
    if (owner != null && !Permissions.hasExtended(owner,""String_Node_Str"")) {
      return false;
    }
    if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
      BehaviorDuelTarget duelTarget=(BehaviorDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
      if (duelTarget.getDuelOpponent() != null) {
        return true;
      }
    }
    int addHunger=Configuration.HUNGER_SYSTEM_POINTS_PER_FEED;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),""String_Node_Str"",0.5F,0.5F,0.5F,0.5F,5,20);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      BukkitUtil.playParticleEffect(myPet.getLocation().add(0,MyPet.getEntitySize(this.getClass())[0] + 0.15,0),""String_Node_Str"",0.5F,0.5F,0.5F,0.5F,5,20);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < Configuration.HUNGER_SYSTEM_POINTS_PER_FEED) {
      return true;
    }
  }
  return false;
}",0.871397269509523
187525,"public void setMyPetForWorldGroup(String worldGroup,UUID myPetUUID){
  if (worldGroup == null || worldGroup.equals(""String_Node_Str"")) {
    return;
  }
  if (myPetUUID == null) {
    petUUIDWorld.remove(myPetUUID);
  }
 else {
    petWorldUUID.put(worldGroup,myPetUUID);
  }
}","public void setMyPetForWorldGroup(String worldGroup,UUID myPetUUID){
  if (worldGroup == null || worldGroup.equals(""String_Node_Str"")) {
    return;
  }
  if (myPetUUID == null) {
    petWorldUUID.remove(worldGroup);
  }
 else {
    petWorldUUID.put(worldGroup,myPetUUID);
  }
}",0.9513513513513514
187526,"public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof DamageInfo) {
    boolean isPassive=damage <= 0;
    if (getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)getProperties().getValue().get(""String_Node_Str"")).getValue();
      getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + damage));
      }
    }
    if (isPassive != (damage <= 0)) {
      if (myPet.getStatus() == PetState.Here) {
        getMyPet().getCraftPet().getHandle().petPathfinderSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().petTargetSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().setPathfinder();
        if (damage == 0) {
          getMyPet().getCraftPet().getHandle().setGoalTarget(null);
        }
      }
    }
  }
}","public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof DamageInfo) {
    boolean isPassive=damage <= 0;
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      upgrade.getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      upgrade.getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + damage));
      }
    }
    if (isPassive != (damage <= 0)) {
      if (myPet.getStatus() == PetState.Here) {
        getMyPet().getCraftPet().getHandle().petPathfinderSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().petTargetSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().setPathfinder();
        if (damage == 0) {
          getMyPet().getCraftPet().getHandle().setGoalTarget(null);
        }
      }
    }
  }
}",0.9905381431105854
187527,"public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof HPInfo) {
    if (getProperties().getValue().containsKey(""String_Node_Str"")) {
      int hp=((IntTag)getProperties().getValue().get(""String_Node_Str"")).getValue();
      getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",hp);
      getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        hpIncrease+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        hpIncrease=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (getMyPet().getStatus() == PetState.Here) {
        getMyPet().getCraftPet().setMaxHealth(getMyPet().getMaxHealth());
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + (MyPet.getStartHP(myPet.getClass()) + hpIncrease)));
      }
    }
  }
}","public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof HPInfo) {
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      int hp=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      upgrade.getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",hp);
      upgrade.getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        hpIncrease+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        hpIncrease=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (getMyPet().getStatus() == PetState.Here) {
        getMyPet().getCraftPet().setMaxHealth(getMyPet().getMaxHealth());
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + (MyPet.getStartHP(myPet.getClass()) + hpIncrease)));
      }
    }
  }
}",0.988612099644128
187528,"public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof HPregenerationInfo) {
    boolean valuesEdit=false;
    if (getProperties().getValue().containsKey(""String_Node_Str"")) {
      int hp=((IntTag)getProperties().getValue().get(""String_Node_Str"")).getValue();
      getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",hp);
      getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        increaseHpBy+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        increaseHpBy=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        regenTime-=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        regenTime=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (regenTime < 1) {
        regenTime=1;
      }
      timeCounter=regenTime;
      valuesEdit=true;
    }
    if (!quiet && valuesEdit) {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + regenTime).replace(""String_Node_Str"",""String_Node_Str"" + increaseHpBy));
    }
  }
}","public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof HPregenerationInfo) {
    boolean valuesEdit=false;
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      int hp=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      upgrade.getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",hp);
      upgrade.getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        increaseHpBy+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        increaseHpBy=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        regenTime-=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        regenTime=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (regenTime < 1) {
        regenTime=1;
      }
      timeCounter=regenTime;
      valuesEdit=true;
    }
    if (!quiet && valuesEdit) {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + regenTime).replace(""String_Node_Str"",""String_Node_Str"" + increaseHpBy));
    }
  }
}",0.9918781725888324
187529,"public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof LightningInfo) {
    boolean valuesEdit=false;
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        chance+=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        chance=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    if (getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)getProperties().getValue().get(""String_Node_Str"")).getValue();
      getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    chance=Math.min(chance,100);
    if (!quiet && valuesEdit) {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + chance).replace(""String_Node_Str"",""String_Node_Str"" + damage));
    }
  }
}","public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof LightningInfo) {
    boolean valuesEdit=false;
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        chance+=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        chance=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      upgrade.getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      upgrade.getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      valuesEdit=true;
    }
    chance=Math.min(chance,100);
    if (!quiet && valuesEdit) {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + chance).replace(""String_Node_Str"",""String_Node_Str"" + damage));
    }
  }
}",0.9915522703273496
187530,"public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof RangedInfo) {
    boolean isPassive=damage <= 0;
    if (getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)getProperties().getValue().get(""String_Node_Str"")).getValue();
      getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + damage));
      }
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      String projectileName=((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      for (      Projectiles projectile : Projectiles.values()) {
        if (projectile.name().equalsIgnoreCase(projectileName)) {
          selectedProjectile=projectile;
        }
      }
    }
    if (isPassive != (damage <= 0)) {
      if (myPet.getStatus() == PetState.Here) {
        getMyPet().getCraftPet().getHandle().petPathfinderSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().petTargetSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().setPathfinder();
        if (damage == 0) {
          getMyPet().getCraftPet().getHandle().setGoalTarget(null);
        }
      }
    }
  }
}","public void upgrade(ISkillInfo upgrade,boolean quiet){
  if (upgrade instanceof RangedInfo) {
    boolean isPassive=damage <= 0;
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      int damage=((IntTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      upgrade.getProperties().getValue().remove(""String_Node_Str"");
      DoubleTag doubleTag=new DoubleTag(""String_Node_Str"",damage);
      upgrade.getProperties().getValue().put(""String_Node_Str"",doubleTag);
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      if (!upgrade.getProperties().getValue().containsKey(""String_Node_Str"") || ((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue().equals(""String_Node_Str"")) {
        damage+=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
 else {
        damage=((DoubleTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + damage));
      }
    }
    if (upgrade.getProperties().getValue().containsKey(""String_Node_Str"")) {
      String projectileName=((StringTag)upgrade.getProperties().getValue().get(""String_Node_Str"")).getValue();
      for (      Projectiles projectile : Projectiles.values()) {
        if (projectile.name().equalsIgnoreCase(projectileName)) {
          selectedProjectile=projectile;
        }
      }
    }
    if (isPassive != (damage <= 0)) {
      if (myPet.getStatus() == PetState.Here) {
        getMyPet().getCraftPet().getHandle().petPathfinderSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().petTargetSelector.clearGoals();
        getMyPet().getCraftPet().getHandle().setPathfinder();
        if (damage == 0) {
          getMyPet().getCraftPet().getHandle().setGoalTarget(null);
        }
      }
    }
  }
}",0.9922928709055876
187531,"@Override public void verifyInput(){
  timeInput.setText(timeInput.getText().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (timeInput.getText().length() > 0) {
    timeInput.setText(""String_Node_Str"");
  }
  healthInput.setText(healthInput.getText().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (healthInput.getText().length() > 0) {
    if (healthInput.getText().matches(""String_Node_Str"")) {
      healthInput.setText(""String_Node_Str"");
    }
 else {
      try {
        Pattern regex=Pattern.compile(""String_Node_Str"");
        Matcher regexMatcher=regex.matcher(healthInput.getText());
        regexMatcher.find();
        healthInput.setText(regexMatcher.group());
      }
 catch (      PatternSyntaxException ignored) {
        healthInput.setText(""String_Node_Str"");
      }
    }
  }
 else {
    healthInput.setText(""String_Node_Str"");
  }
}","@Override public void verifyInput(){
  timeInput.setText(timeInput.getText().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (timeInput.getText().length() == 0) {
    timeInput.setText(""String_Node_Str"");
  }
  healthInput.setText(healthInput.getText().replaceAll(""String_Node_Str"",""String_Node_Str""));
  if (healthInput.getText().length() > 0) {
    if (healthInput.getText().matches(""String_Node_Str"")) {
      healthInput.setText(""String_Node_Str"");
    }
 else {
      try {
        Pattern regex=Pattern.compile(""String_Node_Str"");
        Matcher regexMatcher=regex.matcher(healthInput.getText());
        regexMatcher.find();
        healthInput.setText(regexMatcher.group());
      }
 catch (      PatternSyntaxException ignored) {
        healthInput.setText(""String_Node_Str"");
      }
    }
  }
 else {
    healthInput.setText(""String_Node_Str"");
  }
}",0.9982748706152962
187532,"@EventHandler public void onWorldInit(final WorldInitEvent event){
  MyPetWorldGroup defaultGroup=MyPetWorldGroup.getGroup(""String_Node_Str"");
  if (defaultGroup != null) {
    if (defaultGroup.addWorld(event.getWorld().getName())) {
      MyPetPlugin.getPlugin().getConfig().set(""String_Node_Str"",defaultGroup.getWorlds());
      MyPetPlugin.getPlugin().saveConfig();
      MyPetLogger.write(""String_Node_Str"" + ChatColor.GOLD + event.getWorld().getName()+ ChatColor.RESET+ ""String_Node_Str"");
    }
  }
}","@EventHandler public void onWorldInit(final WorldInitEvent event){
  MyPetWorldGroup defaultGroup=MyPetWorldGroup.getGroup(""String_Node_Str"");
  if (defaultGroup == null) {
    defaultGroup=new MyPetWorldGroup(""String_Node_Str"");
  }
  if (defaultGroup.addWorld(event.getWorld().getName())) {
    File groupsFile=new File(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    YAML_Configuration yamlConfiguration=new YAML_Configuration(groupsFile);
    FileConfiguration config=yamlConfiguration.getConfig();
    config.set(""String_Node_Str"",defaultGroup.getWorlds());
    yamlConfiguration.saveConfig();
    MyPetLogger.write(""String_Node_Str"" + ChatColor.YELLOW + event.getWorld().getName()+ ChatColor.RESET+ ""String_Node_Str""+ ChatColor.YELLOW+ ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
  }
}",0.5302806499261448
187533,"@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageByEntityDamageMonitor(final EntityDamageByEntityEvent event){
  if (!event.isCancelled() && MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION && event.getEntity() instanceof LivingEntity&& !(event.getEntity() instanceof Player)) {
    LivingEntity damager=null;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      damager=projectile.getShooter();
    }
 else     if (event.getDamager() instanceof LivingEntity) {
      damager=(LivingEntity)event.getDamager();
    }
 else     if (event.getDamager() instanceof LightningStrike) {
      LightningStrike lightning=(LightningStrike)event.getDamager();
      if (Lightning.isSkillLightning(lightning)) {
        MyPet lightningMyPet=Lightning.lightningList.get(lightning);
        damager=lightningMyPet.getCraftPet();
      }
    }
    if (damager != null) {
      MyPetExperience.addDamageToEntity(damager,(LivingEntity)event.getEntity(),event.getDamage());
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageByEntityDamageMonitor(final EntityDamageByEntityEvent event){
  if (!event.isCancelled() && MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION && event.getEntity() instanceof LivingEntity&& !(event.getEntity() instanceof Player)&& !(event.getEntity() instanceof CraftMyPet)) {
    LivingEntity damager=null;
    if (event.getDamager() instanceof Projectile) {
      Projectile projectile=(Projectile)event.getDamager();
      damager=projectile.getShooter();
    }
 else     if (event.getDamager() instanceof LivingEntity) {
      damager=(LivingEntity)event.getDamager();
    }
 else     if (event.getDamager() instanceof LightningStrike) {
      LightningStrike lightning=(LightningStrike)event.getDamager();
      if (Lightning.isSkillLightning(lightning)) {
        MyPet lightningMyPet=Lightning.lightningList.get(lightning);
        damager=lightningMyPet.getCraftPet();
      }
    }
    if (damager != null) {
      MyPetExperience.addDamageToEntity(damager,(LivingEntity)event.getEntity(),event.getDamage());
    }
  }
}",0.9799196787148594
187534,"@SuppressWarnings(""String_Node_Str"") @EventHandler public void onEntityDeath(final EntityDeathEvent event){
  if (MyPetConfiguration.USE_LEVEL_SYSTEM) {
    if (!MyPetExperience.GAIN_EXP_FROM_MONSTER_SPAWNER_MOBS && event.getEntity().hasMetadata(""String_Node_Str"")) {
      for (      MetadataValue value : event.getEntity().getMetadata(""String_Node_Str"")) {
        if (value.getOwningPlugin() == MyPetPlugin.getPlugin()) {
          if (value.asBoolean()) {
            return;
          }
          break;
        }
      }
    }
    if (MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
      Map<Entity,Double> damagePercentMap=MyPetExperience.getDamageToEntityPercent(event.getEntity());
      for (      Entity entity : damagePercentMap.keySet()) {
        if (entity instanceof CraftMyPet) {
          MyPet myPet=((CraftMyPet)entity).getMyPet();
          if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            continue;
          }
          double randomExp=MyPetMonsterExperience.getMonsterExperience(event.getEntity().getType()).getRandomExp();
          myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
        }
 else         if (entity instanceof Player) {
          Player owner=(Player)entity;
          if (MyPetList.hasMyPet(owner)) {
            MyPet myPet=MyPetList.getMyPet(owner);
            if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
              return;
            }
            if (myPet.isPassiv()) {
              if (myPet.getStatus() == PetState.Here) {
                double randomExp=MyPetMonsterExperience.getMonsterExperience(event.getEntity().getType()).getRandomExp();
                myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
              }
            }
          }
        }
      }
    }
 else     if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent edbee=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (edbee.getDamager() instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)edbee.getDamager()).getMyPet();
        if (myPet.getSkillTree() == null && MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE) {
          return;
        }
        myPet.getExperience().addExp(edbee.getEntity().getType());
      }
 else       if (edbee.getDamager() instanceof Player) {
        Player owner=(Player)edbee.getDamager();
        if (MyPetList.hasMyPet(owner)) {
          MyPet myPet=MyPetList.getMyPet(owner);
          if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            return;
          }
          if (myPet.isPassiv()) {
            if (myPet.getStatus() == PetState.Here) {
              myPet.getExperience().addExp(event.getEntity().getType(),MyPetConfiguration.PASSIVE_PERCENT_PER_MONSTER);
            }
          }
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") @EventHandler public void onEntityDeath(final EntityDeathEvent event){
  if (MyPetConfiguration.USE_LEVEL_SYSTEM) {
    LivingEntity deadEntity=event.getEntity();
    if (deadEntity instanceof CraftMyPet) {
      return;
    }
    if (!MyPetExperience.GAIN_EXP_FROM_MONSTER_SPAWNER_MOBS && event.getEntity().hasMetadata(""String_Node_Str"")) {
      for (      MetadataValue value : event.getEntity().getMetadata(""String_Node_Str"")) {
        if (value.getOwningPlugin().getName().equals(MyPetPlugin.getPlugin().getName())) {
          if (value.asBoolean()) {
            return;
          }
          break;
        }
      }
    }
    if (MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
      Map<Entity,Double> damagePercentMap=MyPetExperience.getDamageToEntityPercent(deadEntity);
      for (      Entity entity : damagePercentMap.keySet()) {
        if (entity instanceof CraftMyPet) {
          MyPet myPet=((CraftMyPet)entity).getMyPet();
          if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            continue;
          }
          double randomExp=MyPetMonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
          myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
        }
 else         if (entity instanceof Player) {
          Player owner=(Player)entity;
          if (MyPetList.hasMyPet(owner)) {
            MyPet myPet=MyPetList.getMyPet(owner);
            if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
              return;
            }
            if (myPet.isPassiv()) {
              if (myPet.getStatus() == PetState.Here) {
                double randomExp=MyPetMonsterExperience.getMonsterExperience(deadEntity.getType()).getRandomExp();
                myPet.getExperience().addExp(damagePercentMap.get(entity) * randomExp);
              }
            }
          }
        }
      }
    }
 else     if (deadEntity.getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent edbee=(EntityDamageByEntityEvent)deadEntity.getLastDamageCause();
      if (edbee.getDamager() instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)edbee.getDamager()).getMyPet();
        if (myPet.getSkillTree() == null && MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE) {
          return;
        }
        myPet.getExperience().addExp(edbee.getEntity().getType());
      }
 else       if (edbee.getDamager() instanceof Player) {
        Player owner=(Player)edbee.getDamager();
        if (MyPetList.hasMyPet(owner)) {
          MyPet myPet=MyPetList.getMyPet(owner);
          if (MyPetConfiguration.PREVENT_LEVELLING_WITHOUT_SKILLTREE && myPet.getSkillTree() == null) {
            return;
          }
          if (myPet.isPassiv()) {
            if (myPet.getStatus() == PetState.Here) {
              myPet.getExperience().addExp(deadEntity.getType(),MyPetConfiguration.PASSIVE_PERCENT_PER_MONSTER);
            }
          }
        }
      }
    }
  }
}",0.8465055519268452
187535,"@EventHandler public void onMyPetEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
    if (myPet == null || myPet.getHealth() > 0) {
      return;
    }
    myPet.setRespawnTime((MyPetConfiguration.RESPAWN_TIME_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass()))));
    myPet.setStatus(PetState.Dead);
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        myPet.setRespawnTime((MyPetConfiguration.RESPAWN_TIME_PLAYER_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_PLAYER_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass()))));
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet killerMyPet=((CraftMyPet)e.getDamager()).getMyPet();
        if (myPet.getSkills().isSkillActive(""String_Node_Str"") && killerMyPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior killerBehaviorSkill=(Behavior)killerMyPet.getSkills().getSkill(""String_Node_Str"");
          Behavior deadBehaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (deadBehaviorSkill.getBehavior() == BehaviorState.Duel && killerBehaviorSkill.getBehavior() == BehaviorState.Duel) {
            EntityMyPet myPetEntity=((CraftMyPet)event.getEntity()).getHandle();
            EntityMyPet duelKiller=((CraftMyPet)e.getDamager()).getHandle();
            if (myPetEntity.petTargetSelector.hasGoal(""String_Node_Str"")) {
              MyPetAIDuelTarget duelTarget=(MyPetAIDuelTarget)myPetEntity.petTargetSelector.getGoal(""String_Node_Str"");
              if (duelTarget.getDuelOpponent() == duelKiller) {
                myPet.setRespawnTime(10);
              }
            }
          }
        }
      }
    }
    event.setDroppedExp(0);
    if (MyPetConfiguration.USE_LEVEL_SYSTEM && MyPetExperience.LOSS_FIXED > 0 || MyPetExperience.LOSS_PERCENT > 0) {
      double lostExpirience=MyPetExperience.LOSS_FIXED;
      lostExpirience+=myPet.getExperience().getRequiredExp() * MyPetExperience.LOSS_PERCENT / 100;
      if (lostExpirience > myPet.getExperience().getCurrentExp()) {
        lostExpirience=myPet.getExperience().getCurrentExp();
      }
      if (MyPetExperience.DROP_LOST_EXP) {
        event.setDroppedExp((int)(lostExpirience + 0.5));
      }
      myPet.getExperience().removeCurrentExp(lostExpirience);
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      Inventory inventorySkill=(Inventory)myPet.getSkills().getSkill(""String_Node_Str"");
      inventorySkill.closeInventory();
      if (inventorySkill.dropOnDeath() && !myPet.getOwner().isMyPetAdmin()) {
        inventorySkill.inv.dropContentAt(myPet.getLocation());
      }
    }
    sendDeathMessage(event);
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime())));
    if (MyPetEconomy.canUseEconomy() && myPet.getOwner().hasAutoRespawnEnabled() && myPet.getRespawnTime() >= myPet.getOwner().getAutoRespawnMin() && MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"")) {
      double costs=myPet.getRespawnTime() * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
      if (MyPetEconomy.canPay(myPet.getOwner(),costs)) {
        MyPetEconomy.pay(myPet.getOwner(),costs);
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.getPetName())));
        myPet.setRespawnTime(1);
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.getPetName())));
      }
    }
  }
}","@EventHandler public void onMyPetEntityDeath(final EntityDeathEvent event){
  LivingEntity deadEntity=event.getEntity();
  if (deadEntity instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)deadEntity).getMyPet();
    if (myPet == null || myPet.getHealth() > 0) {
      return;
    }
    myPet.setRespawnTime((MyPetConfiguration.RESPAWN_TIME_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass()))));
    myPet.setStatus(PetState.Dead);
    if (deadEntity.getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)deadEntity.getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        myPet.setRespawnTime((MyPetConfiguration.RESPAWN_TIME_PLAYER_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_PLAYER_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass()))));
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet killerMyPet=((CraftMyPet)e.getDamager()).getMyPet();
        if (myPet.getSkills().isSkillActive(""String_Node_Str"") && killerMyPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior killerBehaviorSkill=(Behavior)killerMyPet.getSkills().getSkill(""String_Node_Str"");
          Behavior deadBehaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (deadBehaviorSkill.getBehavior() == BehaviorState.Duel && killerBehaviorSkill.getBehavior() == BehaviorState.Duel) {
            EntityMyPet myPetEntity=((CraftMyPet)deadEntity).getHandle();
            EntityMyPet duelKiller=((CraftMyPet)e.getDamager()).getHandle();
            if (myPetEntity.petTargetSelector.hasGoal(""String_Node_Str"")) {
              MyPetAIDuelTarget duelTarget=(MyPetAIDuelTarget)myPetEntity.petTargetSelector.getGoal(""String_Node_Str"");
              if (duelTarget.getDuelOpponent() == duelKiller) {
                myPet.setRespawnTime(10);
              }
            }
          }
        }
      }
    }
    event.setDroppedExp(0);
    if (MyPetConfiguration.USE_LEVEL_SYSTEM && MyPetExperience.LOSS_FIXED > 0 || MyPetExperience.LOSS_PERCENT > 0) {
      double lostExpirience=MyPetExperience.LOSS_FIXED;
      lostExpirience+=myPet.getExperience().getRequiredExp() * MyPetExperience.LOSS_PERCENT / 100;
      if (lostExpirience > myPet.getExperience().getCurrentExp()) {
        lostExpirience=myPet.getExperience().getCurrentExp();
      }
      if (MyPetExperience.DROP_LOST_EXP) {
        event.setDroppedExp((int)(lostExpirience + 0.5));
      }
      myPet.getExperience().removeCurrentExp(lostExpirience);
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      Inventory inventorySkill=(Inventory)myPet.getSkills().getSkill(""String_Node_Str"");
      inventorySkill.closeInventory();
      if (inventorySkill.dropOnDeath() && !myPet.getOwner().isMyPetAdmin()) {
        inventorySkill.inv.dropContentAt(myPet.getLocation());
      }
    }
    sendDeathMessage(event);
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",""String_Node_Str"" + myPet.getRespawnTime())));
    if (MyPetEconomy.canUseEconomy() && myPet.getOwner().hasAutoRespawnEnabled() && myPet.getRespawnTime() >= myPet.getOwner().getAutoRespawnMin() && MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"")) {
      double costs=myPet.getRespawnTime() * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
      if (MyPetEconomy.canPay(myPet.getOwner(),costs)) {
        MyPetEconomy.pay(myPet.getOwner(),costs);
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.getPetName())));
        myPet.setRespawnTime(1);
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getPlayer()).replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.getPetName())));
      }
    }
  }
}",0.9605263157894736
187536,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageByEntityResult(final EntityDamageByEntityEvent event){
  if (event.getEntity() instanceof CraftMyPet && ((CraftMyPet)event.getEntity()).getPetType() == MyPetType.Enderman) {
    ((EntityMyEnderman)((CraftMyPet)event.getEntity()).getHandle()).setScreaming(true);
    ((EntityMyEnderman)((CraftMyPet)event.getEntity()).getHandle()).setScreaming(false);
  }
  if (event.getEntity() instanceof LivingEntity) {
    if (event.getDamager() instanceof Player) {
      Player damager=(Player)event.getDamager();
      if (damager.getItemInHand().getType() == MyPetConfiguration.LEASH_ITEM && event.getEntity() instanceof CraftMyPet) {
        return;
      }
      if (MyPetList.hasMyPet(damager)) {
        MyPet myPet=MyPetList.getMyPet(damager);
        if (myPet.getStatus() == PetState.Here && event.getEntity() != myPet.getCraftPet()) {
          myPet.getCraftPet().getHandle().goalTarget=((CraftLivingEntity)event.getEntity()).getHandle();
        }
      }
    }
 else     if (event.getDamager() instanceof CraftMyPet) {
      MyPet myPet=((CraftMyPet)event.getDamager()).getMyPet();
      event.setDamage(myPet.getDamage());
      boolean skillUsed=false;
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Poison poisonSkill=(Poison)myPet.getSkills().getSkill(""String_Node_Str"");
        if (poisonSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.POISON,poisonSkill.getDuration() * 20,1);
          ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Wither witherSkill=(Wither)myPet.getSkills().getSkill(""String_Node_Str"");
        if (witherSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.WITHER,witherSkill.getDuration() * 20,1);
          ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Fire fireSkill=(Fire)myPet.getSkills().getSkill(""String_Node_Str"");
        if (fireSkill.activate()) {
          event.getEntity().setFireTicks(fireSkill.getDuration() * 20);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Slow slowSkill=(Slow)myPet.getSkills().getSkill(""String_Node_Str"");
        if (slowSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,slowSkill.getDuration() * 20,1);
          ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Knockback knockbackSkill=(Knockback)myPet.getSkills().getSkill(""String_Node_Str"");
        if (knockbackSkill.activate()) {
          ((CraftEntity)event.getEntity()).getHandle().g(-MathHelper.sin(myPet.getLocation().getYaw() * 3.141593F / 180.0F) * 2 * 0.5F,0.1D,MathHelper.cos(myPet.getLocation().getYaw() * 3.141593F / 180.0F) * 2 * 0.5F);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Lightning lightningSkill=(Lightning)myPet.getSkills().getSkill(""String_Node_Str"");
        if (lightningSkill.activate()) {
          Lightning.isStriking=true;
          LightningStrike bolt=event.getEntity().getLocation().getWorld().strikeLightning(event.getEntity().getLocation());
          Lightning.lightningList.put(bolt,myPet);
          Lightning.isStriking=false;
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageByEntityResult(final EntityDamageByEntityEvent event){
  Entity damagedEntity=event.getEntity();
  if (damagedEntity instanceof CraftMyPet && ((CraftMyPet)damagedEntity).getPetType() == MyPetType.Enderman) {
    ((EntityMyEnderman)((CraftMyPet)damagedEntity).getHandle()).setScreaming(true);
    ((EntityMyEnderman)((CraftMyPet)damagedEntity).getHandle()).setScreaming(false);
  }
  if (damagedEntity instanceof LivingEntity) {
    if (event.getDamager() instanceof Player) {
      Player damager=(Player)event.getDamager();
      if (damager.getItemInHand().getType() == MyPetConfiguration.LEASH_ITEM && damagedEntity instanceof CraftMyPet) {
        return;
      }
      if (MyPetList.hasMyPet(damager)) {
        MyPet myPet=MyPetList.getMyPet(damager);
        if (myPet.getStatus() == PetState.Here && damagedEntity != myPet.getCraftPet()) {
          myPet.getCraftPet().getHandle().goalTarget=((CraftLivingEntity)damagedEntity).getHandle();
        }
      }
    }
 else     if (event.getDamager() instanceof CraftMyPet) {
      MyPet myPet=((CraftMyPet)event.getDamager()).getMyPet();
      event.setDamage(myPet.getDamage());
      boolean skillUsed=false;
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Poison poisonSkill=(Poison)myPet.getSkills().getSkill(""String_Node_Str"");
        if (poisonSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.POISON,poisonSkill.getDuration() * 20,1);
          ((LivingEntity)damagedEntity).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Wither witherSkill=(Wither)myPet.getSkills().getSkill(""String_Node_Str"");
        if (witherSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.WITHER,witherSkill.getDuration() * 20,1);
          ((LivingEntity)damagedEntity).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Fire fireSkill=(Fire)myPet.getSkills().getSkill(""String_Node_Str"");
        if (fireSkill.activate()) {
          damagedEntity.setFireTicks(fireSkill.getDuration() * 20);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Slow slowSkill=(Slow)myPet.getSkills().getSkill(""String_Node_Str"");
        if (slowSkill.activate()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.SLOW,slowSkill.getDuration() * 20,1);
          ((LivingEntity)damagedEntity).addPotionEffect(effect);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Knockback knockbackSkill=(Knockback)myPet.getSkills().getSkill(""String_Node_Str"");
        if (knockbackSkill.activate()) {
          ((CraftEntity)damagedEntity).getHandle().g(-MathHelper.sin(myPet.getLocation().getYaw() * 3.141593F / 180.0F) * 2 * 0.5F,0.1D,MathHelper.cos(myPet.getLocation().getYaw() * 3.141593F / 180.0F) * 2 * 0.5F);
          skillUsed=true;
        }
      }
      if (!skillUsed && myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Lightning lightningSkill=(Lightning)myPet.getSkills().getSkill(""String_Node_Str"");
        if (lightningSkill.activate()) {
          Lightning.isStriking=true;
          LightningStrike bolt=damagedEntity.getLocation().getWorld().strikeLightning(damagedEntity.getLocation());
          Lightning.lightningList.put(bolt,myPet);
          Lightning.isStriking=false;
        }
      }
    }
  }
}",0.9367363562313332
187537,"public static MyPetMonsterExperience getMonsterExperience(EntityType type){
  return mobExp.get(type);
}","public static MyPetMonsterExperience getMonsterExperience(EntityType type){
  if (mobExp.containsKey(type)) {
    return mobExp.get(type);
  }
  return unknown;
}",0.7819548872180451
187538,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String lang=""String_Node_Str"";
  if (sender instanceof Player) {
    if (!MyPetPermissions.has((Player)sender,""String_Node_Str"",false)) {
      return true;
    }
    lang=MyPetBukkitUtil.getPlayerLanguage((Player)sender);
  }
  if (args.length < 1) {
    return false;
  }
  String option=args[0];
  if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String name=""String_Node_Str"";
    for (int i=2; i < args.length; i++) {
      if (!name.equals(""String_Node_Str"")) {
        name+=""String_Node_Str"";
      }
      name+=args[i];
    }
    name=MyPetBukkitUtil.setColors(name);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    Matcher regexMatcher=regex.matcher(name);
    if (regexMatcher.find()) {
      name+=MyPetBukkitUtil.setColors(""String_Node_Str"");
    }
    myPet.setPetName(name);
    sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ name);
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String value=args[2];
    if (args.length == 3 || (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str""))) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        if (myPet.getExperience().getExp() > Exp) {
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
 else {
          myPet.getExperience().addExp(Exp - myPet.getExperience().getExp());
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
        }
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        myPet.getExperience().addExp(Exp);
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        Exp=Exp <= myPet.getExperience().getExp() ? Exp : myPet.getExperience().getExp();
        if (Exp <= myPet.getExperience().getCurrentExp()) {
          myPet.getExperience().removeExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ value+ ""String_Node_Str"");
        }
 else {
          Exp=myPet.getExperience().getExp() - Exp;
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 2) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else     if (myPet.getStatus() == PetState.Dead) {
      if (args.length >= 3 && MyPetUtil.isInt(args[2])) {
        int respawnTime=Integer.parseInt(args[2]);
        if (respawnTime >= 0) {
          myPet.setRespawnTime(respawnTime);
        }
      }
 else {
        myPet.setRespawnTime(0);
      }
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetPlugin.getPlugin().reloadConfig();
    MyPetConfiguration.config=MyPetPlugin.getPlugin().getConfig();
    MyPetConfiguration.loadConfiguration();
    DebugLogger.info(""String_Node_Str"");
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
    sender.sendMessage(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetSkillTreeMobType.clearMobTypes();
    String[] petTypes=new String[MyPetType.values().length];
    for (int i=0; i < MyPetType.values().length; i++) {
      petTypes[i]=MyPetType.values()[i].getTypeName();
    }
    MyPetSkillTreeMobType.clearMobTypes();
    MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.getSkills().reset();
      int lvl=myPet.getExperience().getLevel();
      MyPetSkillTree skillTree=myPet.getSkillTree();
      if (skillTree != null) {
        for (        MyPetSkillTreeLevel level : skillTree.getLevelList()) {
          if (level.getLevel() > lvl) {
            continue;
          }
          for (          ISkillInfo skill : level.getSkills()) {
            myPet.getSkills().getSkill(skill.getName()).upgrade(skill,true);
          }
        }
        for (        ISkillInstance skill : myPet.getSkills().getSkills()) {
          if (skill.isActive()) {
            myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(""String_Node_Str"" + skill.getFormattedValue()).replace(""String_Node_Str"",skill.getName()));
          }
        }
      }
    }
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
    DebugLogger.info(""String_Node_Str"");
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
    if (skillTreeMobType.hasSkillTree(args[2])) {
      MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[2]);
      if (myPet.setSkilltree(skillTree)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName()).replace(""String_Node_Str"",skillTree.getName())));
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",args[2])));
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    MyPetType myPetType=MyPetType.getMyPetTypeByName(args[2]);
    if (myPetType != null) {
      Player owner=Bukkit.getPlayer(args[1]);
      if (owner == null || !owner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",owner.getName())));
        return true;
      }
      MyPetPlayer newOwner=MyPetPlayer.getMyPetPlayer(owner.getName());
      if (!newOwner.hasMyPet()) {
        InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
        inactiveMyPet.setPetType(myPetType);
        inactiveMyPet.setPetName(myPetType.getTypeName());
        inactiveMyPet.setLocation(owner.getLocation());
        CompoundTag compoundTag=inactiveMyPet.getInfo();
        if (args.length > 3) {
          for (int i=3; i < args.length; i++) {
            if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(size)) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(size)));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(catTypeString)) {
                int catType=Integer.parseInt(catTypeString);
                catType=Math.min(Math.max(0,catType),3);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",catType));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(professionString)) {
                int profession=Integer.parseInt(professionString);
                profession=Math.min(Math.max(0,profession),5);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",profession));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              String[] blockInfo=blocks.split(""String_Node_Str"");
              if (blockInfo.length >= 1 && MyPetUtil.isInt(blockInfo[0]) && MyPetBukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(blockInfo[0])));
              }
              if (blockInfo.length >= 2 && MyPetUtil.isInt(blockInfo[1])) {
                int blockData=Integer.parseInt(blockInfo[1]);
                blockData=Math.min(Math.max(0,blockData),15);
                MyPetLogger.write(""String_Node_Str"" + blockData);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",blockData));
              }
            }
          }
        }
        MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
        myPet.createPet();
        MyPetWorldGroup wg=MyPetWorldGroup.getGroup(owner.getWorld().getName());
        myPet.setWorldGroup(wg.getName());
        myPet.getOwner().setMyPetForWorldGroup(wg.getName(),myPet.getUUID());
      }
 else {
        sender.sendMessage(newOwner.getName() + ""String_Node_Str"");
      }
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String lang=""String_Node_Str"";
  if (sender instanceof Player) {
    if (!MyPetPermissions.has((Player)sender,""String_Node_Str"",false)) {
      return true;
    }
    lang=MyPetBukkitUtil.getPlayerLanguage((Player)sender);
  }
  if (args.length < 1) {
    return false;
  }
  String option=args[0];
  if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String name=""String_Node_Str"";
    for (int i=2; i < args.length; i++) {
      if (!name.equals(""String_Node_Str"")) {
        name+=""String_Node_Str"";
      }
      name+=args[i];
    }
    name=MyPetBukkitUtil.setColors(name);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    Matcher regexMatcher=regex.matcher(name);
    if (regexMatcher.find()) {
      name+=MyPetBukkitUtil.setColors(""String_Node_Str"");
    }
    myPet.setPetName(name);
    sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ name);
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String value=args[2];
    if (args.length == 3 || (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str""))) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        if (myPet.getExperience().getExp() > Exp) {
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
 else {
          myPet.getExperience().addExp(Exp - myPet.getExperience().getExp());
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
        }
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        myPet.getExperience().addExp(Exp);
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        Exp=Exp <= myPet.getExperience().getExp() ? Exp : myPet.getExperience().getExp();
        if (Exp <= myPet.getExperience().getCurrentExp()) {
          myPet.getExperience().removeExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ value+ ""String_Node_Str"");
        }
 else {
          Exp=myPet.getExperience().getExp() - Exp;
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 2) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else     if (myPet.getStatus() == PetState.Dead) {
      if (args.length >= 3 && MyPetUtil.isInt(args[2])) {
        int respawnTime=Integer.parseInt(args[2]);
        if (respawnTime >= 0) {
          myPet.setRespawnTime(respawnTime);
        }
      }
 else {
        myPet.setRespawnTime(0);
      }
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetPlugin.getPlugin().reloadConfig();
    MyPetConfiguration.config=MyPetPlugin.getPlugin().getConfig();
    MyPetConfiguration.loadConfiguration();
    DebugLogger.info(""String_Node_Str"");
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
    sender.sendMessage(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetSkillTreeMobType.clearMobTypes();
    String[] petTypes=new String[MyPetType.values().length];
    for (int i=0; i < MyPetType.values().length; i++) {
      petTypes[i]=MyPetType.values()[i].getTypeName();
    }
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.getSkills().reset();
    }
    MyPetSkillTreeMobType.clearMobTypes();
    MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    for (    MyPetType mobType : MyPetType.values()) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(mobType.getTypeName());
      MyPetSkillTreeLoader.addDefault(skillTreeMobType);
      MyPetSkillTreeLoader.manageInheritance(skillTreeMobType);
    }
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.getSkills().reset();
      MyPetSkillTree skillTree=myPet.getSkillTree();
      if (skillTree != null) {
        String skilltreeName=skillTree.getName();
        if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
          MyPetSkillTreeMobType mobType=MyPetSkillTreeMobType.getMobTypeByPetType(myPet.getPetType());
          if (mobType.hasSkillTree(skilltreeName)) {
            skillTree=mobType.getSkillTree(skilltreeName);
          }
 else {
            skillTree=null;
          }
        }
 else {
          skillTree=null;
        }
      }
      myPet.setSkilltree(skillTree);
      if (skillTree != null) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner())).replace(""String_Node_Str"",myPet.getPetName()).replace(""String_Node_Str"",(myPet.getSkillTree() == null ? ""String_Node_Str"" : myPet.getSkillTree().getDisplayName())));
        for (        ISkillInstance skill : myPet.getSkills().getSkills()) {
          if (skill.isActive()) {
            myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(""String_Node_Str"" + skill.getFormattedValue()).replace(""String_Node_Str"",skill.getName()));
          }
        }
      }
    }
    for (    InactiveMyPet myPet : MyPetList.getAllInactiveMyPets()) {
      MyPetSkillTree skillTree=myPet.getSkillTree();
      if (skillTree != null) {
        String skilltreeName=skillTree.getName();
        if (MyPetSkillTreeMobType.getMobTypeByPetType(myPet.getPetType()) != null) {
          MyPetSkillTreeMobType mobType=MyPetSkillTreeMobType.getMobTypeByPetType(myPet.getPetType());
          if (mobType.hasSkillTree(skilltreeName)) {
            skillTree=mobType.getSkillTree(skilltreeName);
          }
 else {
            skillTree=null;
          }
        }
 else {
          skillTree=null;
        }
      }
      myPet.setSkillTree(skillTree);
    }
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
    DebugLogger.info(""String_Node_Str"");
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
    if (skillTreeMobType.hasSkillTree(args[2])) {
      MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[2]);
      if (myPet.setSkilltree(skillTree)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName()).replace(""String_Node_Str"",skillTree.getName())));
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",args[2])));
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    MyPetType myPetType=MyPetType.getMyPetTypeByName(args[2]);
    if (myPetType != null) {
      Player owner=Bukkit.getPlayer(args[1]);
      if (owner == null || !owner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",owner.getName())));
        return true;
      }
      MyPetPlayer newOwner=MyPetPlayer.getMyPetPlayer(owner.getName());
      if (!newOwner.hasMyPet()) {
        InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
        inactiveMyPet.setPetType(myPetType);
        inactiveMyPet.setPetName(myPetType.getTypeName());
        inactiveMyPet.setLocation(owner.getLocation());
        CompoundTag compoundTag=inactiveMyPet.getInfo();
        if (args.length > 3) {
          for (int i=3; i < args.length; i++) {
            if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(size)) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(size)));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(catTypeString)) {
                int catType=Integer.parseInt(catTypeString);
                catType=Math.min(Math.max(0,catType),3);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",catType));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(professionString)) {
                int profession=Integer.parseInt(professionString);
                profession=Math.min(Math.max(0,profession),5);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",profession));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              String[] blockInfo=blocks.split(""String_Node_Str"");
              if (blockInfo.length >= 1 && MyPetUtil.isInt(blockInfo[0]) && MyPetBukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(blockInfo[0])));
              }
              if (blockInfo.length >= 2 && MyPetUtil.isInt(blockInfo[1])) {
                int blockData=Integer.parseInt(blockInfo[1]);
                blockData=Math.min(Math.max(0,blockData),15);
                MyPetLogger.write(""String_Node_Str"" + blockData);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",blockData));
              }
            }
          }
        }
        MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
        myPet.createPet();
        MyPetWorldGroup wg=MyPetWorldGroup.getGroup(owner.getWorld().getName());
        myPet.setWorldGroup(wg.getName());
        myPet.getOwner().setMyPetForWorldGroup(wg.getName(),myPet.getUUID());
      }
 else {
        sender.sendMessage(newOwner.getName() + ""String_Node_Str"");
      }
    }
  }
  return true;
}",0.9351323920117018
187539,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (MyPetConfiguration.AUTOMATIC_SKILLTREE_ASSIGNMENT && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
    }
 else     if (myPet.getSkillTree() != null && MyPetConfiguration.CHOOSE_SKILLTREE_ONLY_ONCE && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()).replace(""String_Node_Str"",myPet.getPetName())));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length >= 1) {
        String skilltreeName=""String_Node_Str"";
        for (        String arg : args) {
          skilltreeName+=arg + ""String_Node_Str"";
        }
        skilltreeName=skilltreeName.substring(0,skilltreeName.length() - 1);
        if (skillTreeMobType.hasSkillTree(skilltreeName)) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(skilltreeName);
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skillTree.getName())));
            }
 else {
              sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player)));
            }
          }
 else {
            sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skilltreeName)));
          }
        }
 else {
          sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skilltreeName)));
        }
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",myPet.getPetName())));
        for (        MyPetSkillTree skillTree : skillTreeMobType.getSkillTrees()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            sender.sendMessage(""String_Node_Str"" + skillTree.getName());
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player)));
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    sender.sendMessage(""String_Node_Str"");
    return true;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (MyPetConfiguration.AUTOMATIC_SKILLTREE_ASSIGNMENT && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())));
    }
 else     if (myPet.getSkillTree() != null && MyPetConfiguration.CHOOSE_SKILLTREE_ONLY_ONCE && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage()).replace(""String_Node_Str"",myPet.getPetName())));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length >= 1) {
        String skilltreeName=""String_Node_Str"";
        for (        String arg : args) {
          skilltreeName+=arg + ""String_Node_Str"";
        }
        skilltreeName=skilltreeName.substring(0,skilltreeName.length() - 1);
        if (skillTreeMobType.hasSkillTree(skilltreeName)) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(skilltreeName);
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skillTree.getName())));
              if (myPet.getOwner().isMyPetAdmin() && MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_ADMIN) {
                myPet.getExperience().removeExp(MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
 else {
                myPet.getExperience().removeExp(MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_FIXED);
                myPet.getExperience().removeExp(myPet.getExperience().getExp() * MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
              }
            }
 else {
              sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player)));
            }
          }
 else {
            sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skilltreeName)));
          }
        }
 else {
          sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",skilltreeName)));
        }
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player).replace(""String_Node_Str"",myPet.getPetName())));
        for (        MyPetSkillTree skillTree : skillTreeMobType.getSkillTrees()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTree.getPermission())) {
            sender.sendMessage(""String_Node_Str"" + skillTree.getName());
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",player)));
  }
  return true;
}",0.8999682438869482
187540,"public boolean setSkilltree(MyPetSkillTree skillTree){
  if (skillTree == null || this.skillTree == skillTree) {
    return false;
  }
  skills.reset();
  if (this.skillTree != null) {
    if (this.getOwner().isMyPetAdmin() && MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_ADMIN) {
      experience.removeExp(MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_FIXED);
      experience.removeExp(experience.getExp() * MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
    }
 else {
      experience.removeExp(MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_FIXED);
      experience.removeExp(experience.getExp() * MyPetConfiguration.SKILLTREE_SWITCH_PENALTY_PERCENT / 100.);
    }
  }
  this.skillTree=skillTree;
  for (int i=1; i <= experience.getLevel(); i++) {
    getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this,i,true));
  }
  return true;
}","public boolean setSkilltree(MyPetSkillTree skillTree){
  if (skillTree == null || this.skillTree == skillTree) {
    return false;
  }
  skills.reset();
  this.skillTree=skillTree;
  for (int i=1; i <= experience.getLevel(); i++) {
    getServer().getPluginManager().callEvent(new MyPetLevelUpEvent(this,i,true));
  }
  return true;
}",0.3642439431913116
187541,"@EventHandler public void onEntityDamageByLightning(final EntityDamageByEntityEvent event){
  if (event.getCause() == DamageCause.LIGHTNING) {
    LightningStrike bolt=(LightningStrike)event.getDamager();
    if (Lightning.isSkillLightning(bolt)) {
      MyPet boltMyPet=Lightning.lightningList.get(bolt);
      if (event.getEntity() instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
        if (boltMyPet == myPet) {
          event.setCancelled(true);
        }
 else         if (!MyPetPvP.canHurt(boltMyPet.getOwner().getPlayer(),myPet.getOwner().getPlayer())) {
          event.setCancelled(true);
        }
      }
 else       if (event.getEntity() instanceof Player) {
        Player victim=(Player)event.getEntity();
        if (boltMyPet.getOwner().getPlayer() == victim) {
          event.setCancelled(true);
        }
 else         if (!MyPetPvP.canHurt(boltMyPet.getOwner().getPlayer(),victim)) {
          event.setCancelled(true);
        }
      }
 else       if (event.getEntity() instanceof Tameable) {
        Tameable tameable=(Tameable)event.getEntity();
        if (boltMyPet.getOwner().equals(tameable.getOwner())) {
          event.setCancelled(true);
        }
      }
      if (event.getEntity() instanceof LivingEntity && !event.isCancelled() && MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
        MyPetExperience.addDamageToEntity(boltMyPet.getCraftPet(),(LivingEntity)event.getEntity(),event.getDamage());
      }
    }
  }
}","@EventHandler public void onEntityDamageByLightning(final EntityDamageByEntityEvent event){
  if (event.getCause() == DamageCause.LIGHTNING && event.getDamager() instanceof LightningStrike) {
    LightningStrike bolt=(LightningStrike)event.getDamager();
    if (Lightning.isSkillLightning(bolt)) {
      MyPet boltMyPet=Lightning.lightningList.get(bolt);
      if (event.getEntity() instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
        if (boltMyPet == myPet) {
          event.setCancelled(true);
        }
 else         if (!MyPetPvP.canHurt(boltMyPet.getOwner().getPlayer(),myPet.getOwner().getPlayer())) {
          event.setCancelled(true);
        }
      }
 else       if (event.getEntity() instanceof Player) {
        Player victim=(Player)event.getEntity();
        if (boltMyPet.getOwner().getPlayer() == victim) {
          event.setCancelled(true);
        }
 else         if (!MyPetPvP.canHurt(boltMyPet.getOwner().getPlayer(),victim)) {
          event.setCancelled(true);
        }
      }
 else       if (event.getEntity() instanceof Tameable) {
        Tameable tameable=(Tameable)event.getEntity();
        if (boltMyPet.getOwner().equals(tameable.getOwner())) {
          event.setCancelled(true);
        }
      }
      if (event.getEntity() instanceof LivingEntity && !event.isCancelled() && MyPetExperience.DAMAGE_WEIGHTED_EXPERIENCE_DISTRIBUTION) {
        MyPetExperience.addDamageToEntity(boltMyPet.getCraftPet(),(LivingEntity)event.getEntity(),event.getDamage());
      }
    }
  }
}",0.9839921594250244
187542,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String lang=""String_Node_Str"";
  if (sender instanceof Player) {
    if (!MyPetPermissions.has((Player)sender,""String_Node_Str"",false)) {
      return true;
    }
    lang=MyPetBukkitUtil.getPlayerLanguage((Player)sender);
  }
  if (args.length < 1) {
    return false;
  }
  String option=args[0];
  if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String name=""String_Node_Str"";
    for (int i=2; i < args.length; i++) {
      if (!name.equals(""String_Node_Str"")) {
        name+=""String_Node_Str"";
      }
      name+=args[i];
    }
    name=MyPetBukkitUtil.setColors(name);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    Matcher regexMatcher=regex.matcher(name);
    if (regexMatcher.find()) {
      name+=MyPetBukkitUtil.setColors(""String_Node_Str"");
    }
    myPet.setPetName(name);
    sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ name);
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String value=args[2];
    if (args.length == 3 || (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str""))) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        if (myPet.getExperience().getExp() > Exp) {
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
 else {
          myPet.getExperience().addExp(Exp - myPet.getExperience().getExp());
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
        }
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        myPet.getExperience().addExp(Exp);
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        Exp=Exp <= myPet.getExperience().getExp() ? Exp : myPet.getExperience().getExp();
        if (Exp <= myPet.getExperience().getCurrentExp()) {
          myPet.getExperience().removeExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ value+ ""String_Node_Str"");
        }
 else {
          Exp=myPet.getExperience().getExp() - Exp;
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 2) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else     if (myPet.getStatus() == PetState.Dead) {
      if (args.length >= 3 && MyPetUtil.isInt(args[2])) {
        int respawnTime=Integer.parseInt(args[2]);
        if (respawnTime >= 0) {
          myPet.setRespawnTime(respawnTime);
        }
      }
 else {
        myPet.setRespawnTime(0);
      }
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetPlugin.getPlugin().reloadConfig();
    MyPetConfiguration.config=MyPetPlugin.getPlugin().getConfig();
    MyPetConfiguration.loadConfiguration();
    DebugLogger.info(""String_Node_Str"");
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
    sender.sendMessage(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetSkillTreeMobType.clearMobTypes();
    String[] petTypes=new String[MyPetType.values().length];
    for (int i=0; i < MyPetType.values().length; i++) {
      petTypes[i]=MyPetType.values()[i].getTypeName();
    }
    MyPetSkillTreeMobType.clearMobTypes();
    MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.getSkills().reset();
      int lvl=myPet.getExperience().getLevel();
      MyPetSkillTree skillTree=myPet.getSkillTree();
      if (skillTree != null) {
        for (        MyPetSkillTreeLevel level : skillTree.getLevelList()) {
          if (level.getLevel() > lvl) {
            continue;
          }
          for (          ISkillInfo skill : level.getSkills()) {
            myPet.getSkills().getSkill(skill.getName()).upgrade(skill,true);
          }
        }
        for (        ISkillInstance skill : myPet.getSkills().getSkills()) {
          if (skill.isActive()) {
            myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(""String_Node_Str"" + skill.getFormattedValue()).replace(""String_Node_Str"",skill.getName()));
          }
        }
      }
    }
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
    DebugLogger.info(""String_Node_Str"");
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
    if (skillTreeMobType.hasSkillTree(args[2])) {
      MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[2]);
      if (myPet.setSkilltree(skillTree)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName()).replace(""String_Node_Str"",skillTree.getName())));
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",args[2])));
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    MyPetType myPetType=MyPetType.getMyPetTypeByName(args[2]);
    if (myPetType != null) {
      Player owner=Bukkit.getPlayer(args[1]);
      if (owner == null || !owner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",owner.getName())));
        return true;
      }
      MyPetPlayer newOwner=MyPetPlayer.getMyPetPlayer(sender.getName());
      if (!newOwner.hasMyPet()) {
        InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
        inactiveMyPet.setPetType(myPetType);
        inactiveMyPet.setPetName(myPetType.getTypeName());
        inactiveMyPet.setLocation(owner.getLocation());
        CompoundTag compoundTag=inactiveMyPet.getInfo();
        if (args.length > 3) {
          for (int i=3; i < args.length; i++) {
            if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(size)) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(size)));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(catTypeString)) {
                int catType=Integer.parseInt(catTypeString);
                catType=Math.min(Math.max(0,catType),3);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",catType));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(professionString)) {
                int profession=Integer.parseInt(professionString);
                profession=Math.min(Math.max(0,profession),5);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",profession));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              String[] blockInfo=blocks.split(""String_Node_Str"");
              if (blockInfo.length >= 1 && MyPetUtil.isInt(blockInfo[0]) && MyPetBukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(blockInfo[0])));
              }
              if (blockInfo.length >= 2 && MyPetUtil.isInt(blockInfo[1])) {
                int blockData=Integer.parseInt(blockInfo[1]);
                blockData=Math.min(Math.max(0,blockData),15);
                MyPetLogger.write(""String_Node_Str"" + blockData);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",blockData));
              }
            }
          }
        }
        MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
        myPet.createPet();
        MyPetWorldGroup wg=MyPetWorldGroup.getGroup(owner.getWorld().getName());
        myPet.setWorldGroup(wg.getName());
        myPet.getOwner().setMyPetForWorldGroup(wg.getName(),myPet.getUUID());
      }
 else {
        sender.sendMessage(newOwner.getName() + ""String_Node_Str"");
      }
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  String lang=""String_Node_Str"";
  if (sender instanceof Player) {
    if (!MyPetPermissions.has((Player)sender,""String_Node_Str"",false)) {
      return true;
    }
    lang=MyPetBukkitUtil.getPlayerLanguage((Player)sender);
  }
  if (args.length < 1) {
    return false;
  }
  String option=args[0];
  if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String name=""String_Node_Str"";
    for (int i=2; i < args.length; i++) {
      if (!name.equals(""String_Node_Str"")) {
        name+=""String_Node_Str"";
      }
      name+=args[i];
    }
    name=MyPetBukkitUtil.setColors(name);
    Pattern regex=Pattern.compile(""String_Node_Str"");
    Matcher regexMatcher=regex.matcher(name);
    if (regexMatcher.find()) {
      name+=MyPetBukkitUtil.setColors(""String_Node_Str"");
    }
    myPet.setPetName(name);
    sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ name);
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 3) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    String value=args[2];
    if (args.length == 3 || (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str""))) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        if (myPet.getExperience().getExp() > Exp) {
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
 else {
          myPet.getExperience().addExp(Exp - myPet.getExperience().getExp());
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
        }
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        myPet.getExperience().addExp(Exp);
        sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str"");
      }
    }
 else     if (args.length >= 4 && args[3].equalsIgnoreCase(""String_Node_Str"")) {
      if (MyPetUtil.isDouble(value)) {
        double Exp=Double.parseDouble(value);
        Exp=Exp < 0 ? 0 : Exp;
        Exp=Exp <= myPet.getExperience().getExp() ? Exp : myPet.getExperience().getExp();
        if (Exp <= myPet.getExperience().getCurrentExp()) {
          myPet.getExperience().removeExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ value+ ""String_Node_Str"");
        }
 else {
          Exp=myPet.getExperience().getExp() - Exp;
          myPet.getSkills().reset();
          myPet.getExperience().reset();
          myPet.getExperience().addExp(Exp);
          sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ Exp+ ""String_Node_Str""+ myPet.getExperience().getLevel()+ ""String_Node_Str"");
        }
      }
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"") && args.length >= 2) {
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    if (args.length >= 3 && args[2].equalsIgnoreCase(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else     if (myPet.getStatus() == PetState.Dead) {
      if (args.length >= 3 && MyPetUtil.isInt(args[2])) {
        int respawnTime=Integer.parseInt(args[2]);
        if (respawnTime >= 0) {
          myPet.setRespawnTime(respawnTime);
        }
      }
 else {
        myPet.setRespawnTime(0);
      }
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""+ myPet.getRespawnTime()+ ""String_Node_Str"");
    }
 else {
      sender.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str"");
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetPlugin.getPlugin().reloadConfig();
    MyPetConfiguration.config=MyPetPlugin.getPlugin().getConfig();
    MyPetConfiguration.loadConfiguration();
    DebugLogger.info(""String_Node_Str"");
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
    sender.sendMessage(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    MyPetSkillTreeMobType.clearMobTypes();
    String[] petTypes=new String[MyPetType.values().length];
    for (int i=0; i < MyPetType.values().length; i++) {
      petTypes[i]=MyPetType.values()[i].getTypeName();
    }
    MyPetSkillTreeMobType.clearMobTypes();
    MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(MyPetPlugin.getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
    for (    MyPet myPet : MyPetList.getAllActiveMyPets()) {
      myPet.getSkills().reset();
      int lvl=myPet.getExperience().getLevel();
      MyPetSkillTree skillTree=myPet.getSkillTree();
      if (skillTree != null) {
        for (        MyPetSkillTreeLevel level : skillTree.getLevelList()) {
          if (level.getLevel() > lvl) {
            continue;
          }
          for (          ISkillInfo skill : level.getSkills()) {
            myPet.getSkills().getSkill(skill.getName()).upgrade(skill,true);
          }
        }
        for (        ISkillInstance skill : myPet.getSkills().getSkills()) {
          if (skill.isActive()) {
            myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(""String_Node_Str"" + skill.getFormattedValue()).replace(""String_Node_Str"",skill.getName()));
          }
        }
      }
    }
    sender.sendMessage(MyPetBukkitUtil.setColors(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str""+ ChatColor.RESET+ ""String_Node_Str""));
    DebugLogger.info(""String_Node_Str"");
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    Player petOwner=Bukkit.getServer().getPlayer(args[1]);
    if (petOwner == null || !petOwner.isOnline()) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
 else     if (!MyPetList.hasMyPet(petOwner)) {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      return true;
    }
    MyPet myPet=MyPetList.getMyPet(petOwner);
    MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
    if (skillTreeMobType.hasSkillTree(args[2])) {
      MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[2]);
      if (myPet.setSkilltree(skillTree)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName()).replace(""String_Node_Str"",skillTree.getName())));
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",petOwner.getName())));
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",args[2])));
    }
  }
 else   if (option.equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      return false;
    }
    MyPetType myPetType=MyPetType.getMyPetTypeByName(args[2]);
    if (myPetType != null) {
      Player owner=Bukkit.getPlayer(args[1]);
      if (owner == null || !owner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",lang).replace(""String_Node_Str"",owner.getName())));
        return true;
      }
      MyPetPlayer newOwner=MyPetPlayer.getMyPetPlayer(owner.getName());
      if (!newOwner.hasMyPet()) {
        InactiveMyPet inactiveMyPet=new InactiveMyPet(newOwner);
        inactiveMyPet.setPetType(myPetType);
        inactiveMyPet.setPetName(myPetType.getTypeName());
        inactiveMyPet.setLocation(owner.getLocation());
        CompoundTag compoundTag=inactiveMyPet.getInfo();
        if (args.length > 3) {
          for (int i=3; i < args.length; i++) {
            if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].equalsIgnoreCase(""String_Node_Str"")) {
              compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",true));
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String size=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(size)) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(size)));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String catTypeString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(catTypeString)) {
                int catType=Integer.parseInt(catTypeString);
                catType=Math.min(Math.max(0,catType),3);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",catType));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String professionString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isInt(professionString)) {
                int profession=Integer.parseInt(professionString);
                profession=Math.min(Math.max(0,profession),5);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",profession));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String colorString=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              if (MyPetUtil.isByte(colorString)) {
                byte color=Byte.parseByte(colorString);
                color=color > 15 ? 15 : color < 0 ? 0 : color;
                compoundTag.getValue().put(""String_Node_Str"",new ByteTag(""String_Node_Str"",color));
              }
            }
 else             if (args[i].startsWith(""String_Node_Str"")) {
              String blocks=args[i].replace(""String_Node_Str"",""String_Node_Str"");
              String[] blockInfo=blocks.split(""String_Node_Str"");
              if (blockInfo.length >= 1 && MyPetUtil.isInt(blockInfo[0]) && MyPetBukkitUtil.isValidMaterial(Integer.parseInt(blockInfo[0]))) {
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",Integer.parseInt(blockInfo[0])));
              }
              if (blockInfo.length >= 2 && MyPetUtil.isInt(blockInfo[1])) {
                int blockData=Integer.parseInt(blockInfo[1]);
                blockData=Math.min(Math.max(0,blockData),15);
                MyPetLogger.write(""String_Node_Str"" + blockData);
                compoundTag.getValue().put(""String_Node_Str"",new IntTag(""String_Node_Str"",blockData));
              }
            }
          }
        }
        MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
        myPet.createPet();
        MyPetWorldGroup wg=MyPetWorldGroup.getGroup(owner.getWorld().getName());
        myPet.setWorldGroup(wg.getName());
        myPet.getOwner().setMyPetForWorldGroup(wg.getName(),myPet.getUUID());
      }
 else {
        sender.sendMessage(newOwner.getName() + ""String_Node_Str"");
      }
    }
  }
  return true;
}",0.9997811610966956
187543,"public String getFormattedValue(){
  String availableBuffs=""String_Node_Str"";
  for (  int primaryBuffId : primaryBuffs) {
    if (primaryActive.get(primaryBuffId)) {
      if (!availableBuffs.equalsIgnoreCase(""String_Node_Str"")) {
        availableBuffs+=""String_Node_Str"";
      }
      availableBuffs+=ChatColor.GOLD + MyPetLocales.getString(""String_Node_Str"" + buffNames.get(primaryBuffId),myPet.getOwner().getLanguage());
      if (secundaryActive.get(primaryBuffId)) {
        availableBuffs+=""String_Node_Str"";
      }
      availableBuffs+=ChatColor.RESET;
    }
  }
  if (secundaryActive.get(10)) {
    if (!availableBuffs.equalsIgnoreCase(""String_Node_Str"")) {
      availableBuffs+=""String_Node_Str"";
    }
    availableBuffs+=ChatColor.GOLD + MyPetLocales.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + ChatColor.RESET;
  }
  return availableBuffs;
}","public String getFormattedValue(){
  String availableBuffs=""String_Node_Str"";
  for (  int primaryBuffId : primaryBuffs) {
    if (primaryBuffId != 0 && primaryActive.get(primaryBuffId)) {
      if (!availableBuffs.equalsIgnoreCase(""String_Node_Str"")) {
        availableBuffs+=""String_Node_Str"";
      }
      availableBuffs+=ChatColor.GOLD + MyPetLocales.getString(""String_Node_Str"" + buffNames.get(primaryBuffId),myPet.getOwner().getLanguage());
      if (secundaryActive.get(primaryBuffId)) {
        availableBuffs+=""String_Node_Str"";
      }
      availableBuffs+=ChatColor.RESET;
    }
  }
  if (secundaryActive.get(10)) {
    if (!availableBuffs.equalsIgnoreCase(""String_Node_Str"")) {
      availableBuffs+=""String_Node_Str"";
    }
    availableBuffs+=ChatColor.GOLD + MyPetLocales.getString(""String_Node_Str"" + buffNames.get(10),myPet.getOwner().getLanguage()) + ChatColor.RESET;
  }
  return availableBuffs;
}",0.987885462555066
187544,"public boolean activate(boolean primary,int effectId){
  if (level > 0) {
    if (primary) {
      if (primaryActive.get(effectId)) {
        setPrimaryEffectId(effectId);
        return true;
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        return false;
      }
    }
 else {
      if (secundaryActive.get(effectId)) {
        setSecondaryEffectId(effectId);
        return true;
      }
 else {
        if (effectId != 10) {
          myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        }
 else {
          myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        }
        return false;
      }
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",this.getName()));
  }
  return false;
}","public boolean activate(boolean primary,int effectId){
  if (level > 0) {
    if (primary) {
      if (!primaryActive.containsKey(effectId)) {
        return false;
      }
 else       if (primaryActive.get(effectId)) {
        setPrimaryEffectId(effectId);
        return true;
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        return false;
      }
    }
 else {
      if (!secundaryActive.containsKey(effectId)) {
        return false;
      }
 else       if (secundaryActive.get(effectId)) {
        setSecondaryEffectId(effectId);
        return true;
      }
 else {
        if (effectId != 10) {
          myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        }
 else {
          myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",MyPetLocales.getString(""String_Node_Str"" + buffNames.get(effectId),myPet.getOwner().getLanguage())));
        }
        return false;
      }
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLocales.getString(""String_Node_Str"",myPet.getOwner().getLanguage())).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",this.getName()));
  }
  return false;
}",0.9452141057934508
187545,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
        if (args.length == 1) {
          if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Friendly.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Friendly);
          }
 else           if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Aggressive.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Aggressive);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Farm.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(BehaviorState.Farm);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Raid.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Raid);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Duel.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Duel);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Normal);
          }
 else {
            behaviorSkill.activate();
            return false;
          }
        }
 else {
          behaviorSkill.activate();
        }
      }
      return true;
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
        if (args.length == 1) {
          if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"") || !behaviorSkill.isModeUsable(BehaviorState.Friendly)) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Friendly);
          }
 else           if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str""))) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"") || !behaviorSkill.isModeUsable(BehaviorState.Aggressive)) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Aggressive);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"") || !behaviorSkill.isModeUsable(BehaviorState.Farm)) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(BehaviorState.Farm);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"") || !behaviorSkill.isModeUsable(BehaviorState.Raid)) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Raid);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"") || !behaviorSkill.isModeUsable(BehaviorState.Duel)) {
              myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Duel);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Normal);
          }
 else {
            behaviorSkill.activate();
            return false;
          }
        }
 else {
          behaviorSkill.activate();
        }
      }
      return true;
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}",0.935256032960565
187546,"public void activateBehavior(BehaviorState behaviorState){
  if (active) {
    behavior=behaviorState;
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",MyPetLanguage.getString(""String_Node_Str"" + behavior.name())));
    if (behavior == BehaviorState.Friendly) {
      myPet.getCraftPet().getHandle().setGoalTarget(null);
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",this.getName()));
  }
}","public void activateBehavior(BehaviorState behaviorState){
  if (active) {
    if (behaviorActive.get(behaviorState)) {
      behavior=behaviorState;
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",MyPetLanguage.getString(""String_Node_Str"" + behavior.name())));
      if (behavior == BehaviorState.Friendly) {
        myPet.getCraftPet().getHandle().setGoalTarget(null);
      }
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",this.getName()));
  }
}",0.9548482605477424
187547,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick -> interact()
 */
public boolean a_(EntityHuman entityhuman){
  if (super.a_(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  Player owner=this.getOwner().getPlayer();
  if (isMyPet() && entityhuman.getBukkitEntity() == owner) {
    if (this.hasRider()) {
      ((CraftPlayer)owner).getHandle().mount(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.ITEM.getId() && canMove()) {
        if (MyPetPermissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().mount(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        }
      }
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.ITEM.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    if (owner != null && !MyPetPermissions.hasExtended(owner,""String_Node_Str"")) {
      return false;
    }
    if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
      MyPetAIDuelTarget duelTarget=(MyPetAIDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
      if (duelTarget.getDuelOpponent() != null) {
        return true;
      }
    }
    int addHunger=MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED) {
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick -> interact()
 */
public boolean a_(EntityHuman entityhuman){
  if (super.a_(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  Player owner=this.getOwner().getPlayer();
  if (isMyPet() && entityhuman.getBukkitEntity() == owner) {
    if (this.hasRider()) {
      ((CraftPlayer)owner).getHandle().setPassengerOf(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.ITEM.getId() && canMove()) {
        if (MyPetPermissions.hasExtended(owner,""String_Node_Str"")) {
          ((CraftPlayer)owner).getHandle().setPassengerOf(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        }
      }
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.ITEM.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    if (owner != null && !MyPetPermissions.hasExtended(owner,""String_Node_Str"")) {
      return false;
    }
    if (this.petTargetSelector.hasGoal(""String_Node_Str"")) {
      MyPetAIDuelTarget duelTarget=(MyPetAIDuelTarget)this.petTargetSelector.getGoal(""String_Node_Str"");
      if (duelTarget.getDuelOpponent() != null) {
        return true;
      }
    }
    int addHunger=MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < MyPetConfiguration.HUNGER_SYSTEM_POINTS_PER_FEED) {
      return true;
    }
  }
  return false;
}",0.9926894959599846
187548,"@EventHandler public void onMyPetPlayerTeleport(final PlayerTeleportEvent event){
  if (MyPetPlayer.isMyPetPlayer(event.getPlayer().getName())) {
    final MyPetPlayer myPetPlayer=MyPetPlayer.getMyPetPlayer(event.getPlayer());
    if (myPetPlayer.hasMyPet()) {
      final MyPet myPet=myPetPlayer.getMyPet();
      if (myPet.getStatus() == PetState.Here) {
        myPet.removePet();
        myPet.setLocation(event.getPlayer().getLocation());
        MyPetPlugin.getPlugin().getServer().getScheduler().runTaskLater(MyPetPlugin.getPlugin(),new Runnable(){
          public void run(){
            if (myPetPlayer.hasMyPet()) {
              MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
                runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",runMyPet.petName));
              break;
case NoSpace:
            runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",runMyPet.petName));
          break;
case NotAllowed:
        runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
      break;
  }
}
}
}
,25L);
}
}
}
}","@EventHandler public void onMyPetPlayerTeleport(final PlayerTeleportEvent event){
  if (MyPetPlayer.isMyPetPlayer(event.getPlayer().getName())) {
    final MyPetPlayer myPetPlayer=MyPetPlayer.getMyPetPlayer(event.getPlayer());
    if (myPetPlayer.hasMyPet()) {
      final MyPet myPet=myPetPlayer.getMyPet();
      if (myPet.getStatus() == PetState.Here) {
        if (myPet.getLocation().getWorld() != event.getTo().getWorld() || myPet.getLocation().distance(event.getTo()) > 10) {
          myPet.removePet();
        }
        myPet.setLocation(event.getTo());
        MyPetPlugin.getPlugin().getServer().getScheduler().runTaskLater(MyPetPlugin.getPlugin(),new Runnable(){
          public void run(){
            if (myPetPlayer.hasMyPet()) {
              MyPet runMyPet=myPetPlayer.getMyPet();
switch (runMyPet.createPet()) {
case Canceled:
                runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",runMyPet.petName));
              break;
case NoSpace:
            runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",runMyPet.petName));
          break;
case NotAllowed:
        runMyPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
      break;
  }
}
}
}
,25L);
}
}
}
}",0.9337260677466864
187549,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 1 && MyPetPermissions.has(player,""String_Node_Str"",false)) {
      Player petOwner=Bukkit.getServer().getPlayer(args[0]);
      if (petOwner == null || !petOwner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
 else       if (!MyPetList.hasMyPet(petOwner)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",petOwner.getName())));
        return true;
      }
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).activate(player);
      }
    }
 else     if (MyPetList.hasMyPet(player)) {
      MyPet myPet=MyPetList.getMyPet(player);
      if (!MyPetPermissions.hasExtended(player,""String_Node_Str"")) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
        return true;
      }
      if (args.length >= 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).stop(true);
        return true;
      }
      if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"",false)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        ((ISkillActive)myPet.getSkills().getSkill(""String_Node_Str"")).activate();
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 1 && !args[0].equalsIgnoreCase(""String_Node_Str"") && MyPetPermissions.has(player,""String_Node_Str"",false)) {
      Player petOwner=Bukkit.getServer().getPlayer(args[0]);
      if (petOwner == null || !petOwner.isOnline()) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
 else       if (!MyPetList.hasMyPet(petOwner)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",petOwner.getName())));
        return true;
      }
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).activate(player);
      }
      return true;
    }
    if (MyPetList.hasMyPet(player)) {
      MyPet myPet=MyPetList.getMyPet(player);
      if (!MyPetPermissions.hasExtended(player,""String_Node_Str"",true)) {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
        return true;
      }
      if (args.length >= 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).stop(true);
        return true;
      }
      if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"",false)) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        ((ISkillActive)myPet.getSkills().getSkill(""String_Node_Str"")).activate();
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return true;
}",0.9381362568519968
187550,"public void setMyPet(MyPet myPet){
  if (myPet != null) {
    this.sitPathfinder=new MyPetAISit(this);
    super.setMyPet(myPet);
    this.setSitting(((MyWolf)myPet).isSitting());
    this.setTamed(((MyWolf)myPet).isTamed());
    this.setCollarColor(((MyWolf)myPet).getCollarColor());
  }
}","public void setMyPet(MyPet myPet){
  if (myPet != null) {
    this.sitPathfinder=new MyPetAISit(this);
    super.setMyPet(myPet);
    this.setBaby(((MyWolf)myPet).isBaby());
    this.setSitting(((MyWolf)myPet).isSitting());
    this.setTamed(((MyWolf)myPet).isTamed());
    this.setCollarColor(((MyWolf)myPet).getCollarColor());
  }
}",0.9294871794871796
187551,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (!MyPetPermissions.has(petOwner,""String_Node_Str"")) {
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        return true;
      }
      if (args.length < 1) {
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        if (!name.equals(""String_Node_Str"")) {
          name+=""String_Node_Str"";
        }
        name+=arg;
      }
      if (myPet.petName.replaceAll(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(name)) {
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
          inv.dropContentAt(myPet.getLocation());
        }
        if (!MyPetConfiguration.REMOVE_PETS_AFTER_RELEASE) {
          LivingEntity normalEntity=(LivingEntity)myPet.getLocation().getWorld().spawnEntity(myPet.getLocation(),myPet.getPetType().getEntityType());
          if (myPet instanceof MyChicken) {
            if (((MyChicken)myPet).isBaby()) {
              ((Chicken)normalEntity).setBaby();
            }
 else {
              ((Chicken)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyCow) {
            if (((MyCow)myPet).isBaby()) {
              ((Cow)normalEntity).setBaby();
            }
 else {
              ((Cow)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyCreeper) {
            ((Creeper)normalEntity).setPowered(((MyCreeper)myPet).isPowered());
          }
 else           if (myPet instanceof MyEnderman) {
            MaterialData materialData=new MaterialData(((MyEnderman)myPet).getBlockID(),(byte)((MyEnderman)myPet).getBlockData());
            ((Enderman)normalEntity).setCarriedMaterial(materialData);
          }
 else           if (myPet instanceof MyIronGolem) {
            ((IronGolem)normalEntity).setPlayerCreated(true);
          }
 else           if (myPet instanceof MyMooshroom) {
            if (((MyMooshroom)myPet).isBaby()) {
              ((MushroomCow)normalEntity).setBaby();
            }
 else {
              ((MushroomCow)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyMagmaCube) {
            ((MagmaCube)normalEntity).setSize(((MyMagmaCube)myPet).getSize());
          }
 else           if (myPet instanceof MyOcelot) {
            ((Ocelot)normalEntity).setCatType(Type.WILD_OCELOT);
            ((Ocelot)normalEntity).setTamed(false);
            if (((MyOcelot)myPet).isBaby()) {
              ((Ocelot)normalEntity).setBaby();
            }
 else {
              ((Ocelot)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyPig) {
            ((Pig)normalEntity).setSaddle(((MyPig)myPet).hasSaddle());
            if (((MyPig)myPet).isBaby()) {
              ((Pig)normalEntity).setBaby();
            }
 else {
              ((Pig)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MySheep) {
            ((Sheep)normalEntity).setSheared(((MySheep)myPet).isSheared());
            ((Sheep)normalEntity).setColor(((MySheep)myPet).getColor());
            if (((MySheep)myPet).isBaby()) {
              ((Sheep)normalEntity).setBaby();
            }
 else {
              ((Sheep)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyVillager) {
            ((Villager)normalEntity).setProfession(Profession.getProfession(((MyVillager)myPet).getProfession()));
            if (((MyVillager)myPet).isBaby()) {
              ((Villager)normalEntity).setBaby();
            }
 else {
              ((Villager)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyWolf) {
            ((Wolf)normalEntity).setTamed(false);
            if (((MyWolf)myPet).isBaby()) {
              ((Wolf)normalEntity).setBaby();
            }
 else {
              ((Wolf)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MySlime) {
            ((Slime)normalEntity).setSize(((MySlime)myPet).getSize());
          }
 else           if (myPet instanceof MyZombie) {
            ((Zombie)normalEntity).setBaby(((MyZombie)myPet).isBaby());
            World world=myPet.getCraftPet().getHandle().world;
            Location petLocation=myPet.getLocation();
            for (            ItemStack is : ((MyZombie)myPet).getEquipment()) {
              if (is != null) {
                EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
                itemEntity.pickupDelay=10;
                world.addEntity(itemEntity);
              }
            }
          }
 else           if (myPet instanceof MySkeleton) {
            if (((MySkeleton)myPet).isWither()) {
              ((Skeleton)normalEntity).setSkeletonType(SkeletonType.WITHER);
              ((CraftSkeleton)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.STONE_SWORD));
            }
 else {
              ((CraftSkeleton)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.BOW));
            }
            World world=myPet.getCraftPet().getHandle().world;
            Location petLocation=myPet.getLocation();
            for (            ItemStack is : ((MySkeleton)myPet).getEquipment()) {
              if (is != null) {
                EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
                itemEntity.pickupDelay=10;
                world.addEntity(itemEntity);
              }
            }
          }
 else           if (myPet instanceof MyPigZombie) {
            ((CraftPigZombie)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.GOLD_SWORD));
            World world=myPet.getCraftPet().getHandle().world;
            Location petLocation=myPet.getLocation();
            for (            ItemStack is : ((MyPigZombie)myPet).getEquipment()) {
              if (is != null) {
                EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
                itemEntity.pickupDelay=10;
                world.addEntity(itemEntity);
              }
            }
          }
        }
        myPet.removePet();
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        MyPetList.removeInactiveMyPet(MyPetList.setMyPetInactive(myPet.getOwner()));
        DebugLogger.info(sender.getName() + ""String_Node_Str"");
        if (MyPetConfiguration.STORE_PETS_ON_PET_RELEASE) {
          DebugLogger.info(MyPetPlugin.getPlugin().savePets(false) + ""String_Node_Str"");
        }
        return true;
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (!MyPetPermissions.has(petOwner,""String_Node_Str"")) {
        return true;
      }
      if (myPet.getStatus() == PetState.Despawned) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getStatus() == PetState.Dead) {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        return true;
      }
      if (args.length < 1) {
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        if (!name.equals(""String_Node_Str"")) {
          name+=""String_Node_Str"";
        }
        name+=arg;
      }
      if (myPet.petName.replaceAll(""String_Node_Str"",""String_Node_Str"").equalsIgnoreCase(name)) {
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
          inv.dropContentAt(myPet.getLocation());
        }
        if (!MyPetConfiguration.REMOVE_PETS_AFTER_RELEASE) {
          LivingEntity normalEntity=(LivingEntity)myPet.getLocation().getWorld().spawnEntity(myPet.getLocation(),myPet.getPetType().getEntityType());
          if (myPet instanceof IMyPetEquipment) {
            World world=myPet.getCraftPet().getHandle().world;
            Location petLocation=myPet.getLocation();
            for (            ItemStack is : ((IMyPetEquipment)myPet).getEquipment()) {
              if (is != null) {
                EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
                itemEntity.pickupDelay=10;
                world.addEntity(itemEntity);
              }
            }
          }
          if (myPet instanceof MyChicken) {
            if (((MyChicken)myPet).isBaby()) {
              ((Chicken)normalEntity).setBaby();
            }
 else {
              ((Chicken)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyCow) {
            if (((MyCow)myPet).isBaby()) {
              ((Cow)normalEntity).setBaby();
            }
 else {
              ((Cow)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyCreeper) {
            ((Creeper)normalEntity).setPowered(((MyCreeper)myPet).isPowered());
          }
 else           if (myPet instanceof MyEnderman) {
            MaterialData materialData=new MaterialData(((MyEnderman)myPet).getBlockID(),(byte)((MyEnderman)myPet).getBlockData());
            ((Enderman)normalEntity).setCarriedMaterial(materialData);
          }
 else           if (myPet instanceof MyIronGolem) {
            ((IronGolem)normalEntity).setPlayerCreated(true);
          }
 else           if (myPet instanceof MyMooshroom) {
            if (((MyMooshroom)myPet).isBaby()) {
              ((MushroomCow)normalEntity).setBaby();
            }
 else {
              ((MushroomCow)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyMagmaCube) {
            ((MagmaCube)normalEntity).setSize(((MyMagmaCube)myPet).getSize());
          }
 else           if (myPet instanceof MyOcelot) {
            ((Ocelot)normalEntity).setCatType(Type.WILD_OCELOT);
            ((Ocelot)normalEntity).setTamed(false);
            if (((MyOcelot)myPet).isBaby()) {
              ((Ocelot)normalEntity).setBaby();
            }
 else {
              ((Ocelot)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyPig) {
            ((Pig)normalEntity).setSaddle(((MyPig)myPet).hasSaddle());
            if (((MyPig)myPet).isBaby()) {
              ((Pig)normalEntity).setBaby();
            }
 else {
              ((Pig)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MySheep) {
            ((Sheep)normalEntity).setSheared(((MySheep)myPet).isSheared());
            ((Sheep)normalEntity).setColor(((MySheep)myPet).getColor());
            if (((MySheep)myPet).isBaby()) {
              ((Sheep)normalEntity).setBaby();
            }
 else {
              ((Sheep)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyVillager) {
            ((Villager)normalEntity).setProfession(Profession.getProfession(((MyVillager)myPet).getProfession()));
            if (((MyVillager)myPet).isBaby()) {
              ((Villager)normalEntity).setBaby();
            }
 else {
              ((Villager)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MyWolf) {
            ((Wolf)normalEntity).setTamed(false);
            if (((MyWolf)myPet).isBaby()) {
              ((Wolf)normalEntity).setBaby();
            }
 else {
              ((Wolf)normalEntity).setAdult();
            }
          }
 else           if (myPet instanceof MySlime) {
            ((Slime)normalEntity).setSize(((MySlime)myPet).getSize());
          }
 else           if (myPet instanceof MyZombie) {
            ((Zombie)normalEntity).setBaby(((MyZombie)myPet).isBaby());
          }
 else           if (myPet instanceof MySkeleton) {
            if (((MySkeleton)myPet).isWither()) {
              ((Skeleton)normalEntity).setSkeletonType(SkeletonType.WITHER);
              ((CraftSkeleton)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.STONE_SWORD));
            }
 else {
              ((CraftSkeleton)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.BOW));
            }
          }
 else           if (myPet instanceof MyPigZombie) {
            ((CraftPigZombie)normalEntity).getHandle().setEquipment(0,new ItemStack(Item.GOLD_SWORD));
          }
        }
        myPet.removePet();
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        MyPetList.removeInactiveMyPet(MyPetList.setMyPetInactive(myPet.getOwner()));
        DebugLogger.info(sender.getName() + ""String_Node_Str"");
        if (MyPetConfiguration.STORE_PETS_ON_PET_RELEASE) {
          DebugLogger.info(MyPetPlugin.getPlugin().savePets(false) + ""String_Node_Str"");
        }
        return true;
      }
 else {
        sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
    }
 else {
      sender.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
    return true;
  }
  sender.sendMessage(""String_Node_Str"");
  return false;
}",0.8692380056444027
187552,"@Override public boolean shouldStart(){
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == BehaviorState.Farm && myPet.getCraftPet().canMove()) {
      if (petEntity.getGoalTarget() == null || !petEntity.getGoalTarget().isAlive()) {
        if (duelOpponent != null) {
          this.target=duelOpponent;
          return true;
        }
        for (float range=1.F; range <= this.range; range++) {
          for (          Object entityObj : this.petEntity.world.a(EntityMyPet.class,this.petOwnerEntity.boundingBox.grow((double)range,4.0D,(double)range))) {
            EntityMyPet entityMyPet=((EntityMyPet)entityObj);
            MyPet targetMyPet=entityMyPet.getMyPet();
            if (petEntity.getEntitySenses().canSee(entityMyPet) && entityMyPet != petEntity && entityMyPet.isAlive()) {
              if (!targetMyPet.getSkills().isSkillActive(""String_Node_Str"") || !targetMyPet.getCraftPet().canMove()) {
                continue;
              }
              Behavior targetbehavior=(Behavior)targetMyPet.getSkills().getSkill(""String_Node_Str"");
              if (targetbehavior.getBehavior() != BehaviorState.Duel) {
                continue;
              }
              if (targetMyPet.getDamage() == 0) {
                continue;
              }
              this.target=entityMyPet;
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean shouldStart(){
  if (myPet.getDamage() <= 0 && myPet.getRangedDamage() <= 0) {
    return false;
  }
  if (behaviorSkill != null && behaviorSkill.isActive()) {
    if (behaviorSkill.getBehavior() == BehaviorState.Duel && myPet.getCraftPet().canMove()) {
      if (petEntity.getGoalTarget() == null || !petEntity.getGoalTarget().isAlive()) {
        if (duelOpponent != null) {
          this.target=duelOpponent;
          return true;
        }
        for (float range=1.F; range <= this.range; range++) {
          for (          Object entityObj : this.petEntity.world.a(EntityMyPet.class,this.petOwnerEntity.boundingBox.grow((double)range,4.0D,(double)range))) {
            EntityMyPet entityMyPet=((EntityMyPet)entityObj);
            MyPet targetMyPet=entityMyPet.getMyPet();
            if (petEntity.getEntitySenses().canSee(entityMyPet) && entityMyPet != petEntity && entityMyPet.isAlive()) {
              if (!targetMyPet.getSkills().isSkillActive(""String_Node_Str"") || !targetMyPet.getCraftPet().canMove()) {
                continue;
              }
              Behavior targetbehavior=(Behavior)targetMyPet.getSkills().getSkill(""String_Node_Str"");
              if (targetbehavior.getBehavior() != BehaviorState.Duel) {
                continue;
              }
              if (targetMyPet.getDamage() == 0) {
                continue;
              }
              this.target=entityMyPet;
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}",0.997392438070404
187553,"public boolean activate(){
  if (rows > 0) {
    if (myPet.getOwner().getPlayer().getGameMode() == GameMode.CREATIVE && !OPEN_IN_CREATIVEMODE && !MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"",false)) {
      myPet.sendMessageToOwner(MyPetLanguage.getString(""String_Node_Str""));
      return false;
    }
    if (myPet.getLocation().getBlock().isLiquid()) {
      inv.setName(myPet.petName);
      openInventory(myPet.getOwner().getPlayer());
      return true;
    }
 else {
      myPet.sendMessageToOwner(MyPetLanguage.getString(""String_Node_Str""));
      return false;
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
    return false;
  }
}","public boolean activate(){
  if (rows > 0) {
    if (myPet.getOwner().getPlayer().getGameMode() == GameMode.CREATIVE && !OPEN_IN_CREATIVEMODE && !MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"",false)) {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
      return false;
    }
    if (!myPet.getLocation().getBlock().isLiquid()) {
      inv.setName(myPet.petName);
      openInventory(myPet.getOwner().getPlayer());
      return true;
    }
 else {
      myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
      return false;
    }
  }
 else {
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
    return false;
  }
}",0.941747572815534
187554,"public static MyPet setMyPetActive(InactiveMyPet inactiveMyPet){
  if (hasMyPet(inactiveMyPet.getPetName())) {
    setMyPetInactive(inactiveMyPet.getOwner());
  }
  boolean isCancelled=false;
  if (MyPetConfiguration.ENABLE_EVENTS) {
    MyPetSelectEvent event=new MyPetSelectEvent(inactiveMyPet,NewStatus.Active);
    getServer().getPluginManager().callEvent(event);
    isCancelled=event.isCancelled();
  }
  if (!isCancelled) {
    MyPet activeMyPet=getMyPetFromInactiveMyPet(inactiveMyPet);
    addMyPet(activeMyPet);
    removeInactiveMyPet(inactiveMyPet);
    inactiveMyPet.getOwner().setLastActiveMyPetUUID(activeMyPet.getUUID());
    DebugLogger.info(""String_Node_Str"" + activeMyPet);
    DebugLogger.info(""String_Node_Str"" + inactiveMyPet);
    return activeMyPet;
  }
  return null;
}","public static MyPet setMyPetActive(InactiveMyPet inactiveMyPet){
  if (inactiveMyPet.getOwner().hasMyPet()) {
    setMyPetInactive(inactiveMyPet.getOwner());
  }
  boolean isCancelled=false;
  if (MyPetConfiguration.ENABLE_EVENTS) {
    MyPetSelectEvent event=new MyPetSelectEvent(inactiveMyPet,NewStatus.Active);
    getServer().getPluginManager().callEvent(event);
    isCancelled=event.isCancelled();
  }
  if (!isCancelled) {
    MyPet activeMyPet=getMyPetFromInactiveMyPet(inactiveMyPet);
    addMyPet(activeMyPet);
    removeInactiveMyPet(inactiveMyPet);
    inactiveMyPet.getOwner().setLastActiveMyPetUUID(activeMyPet.getUUID());
    DebugLogger.info(""String_Node_Str"" + activeMyPet);
    DebugLogger.info(""String_Node_Str"" + inactiveMyPet);
    return activeMyPet;
  }
  return null;
}",0.9678638941398866
187555,"@EventHandler public void onMyPetEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
    if (myPet == null) {
      return;
    }
    myPet.status=PetState.Dead;
    myPet.respawnTime=(MyPetConfiguration.RESPAWN_TIME_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass())));
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        myPet.respawnTime=(MyPetConfiguration.RESPAWN_TIME_PLAYER_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_PLAYER_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass())));
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet killerMyPet=((CraftMyPet)e.getDamager()).getMyPet();
        if (myPet.getSkills().isSkillActive(""String_Node_Str"") && killerMyPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior killerBehaviorSkill=(Behavior)killerMyPet.getSkills().getSkill(""String_Node_Str"");
          Behavior deadBehaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (deadBehaviorSkill.getBehavior() == BehaviorState.Duel && killerBehaviorSkill.getBehavior() == BehaviorState.Duel) {
            EntityMyPet myPetEntity=((CraftMyPet)event.getEntity()).getHandle();
            EntityMyPet duelKiller=((CraftMyPet)e.getDamager()).getHandle();
            if (myPetEntity.petTargetSelector.hasGoal(""String_Node_Str"")) {
              EntityAIDuelTarget duelTarget=(EntityAIDuelTarget)myPetEntity.petTargetSelector.getGoal(""String_Node_Str"");
              if (duelTarget.getDuelOpponent() == duelKiller) {
                myPet.respawnTime=10;
              }
            }
          }
        }
      }
    }
    event.setDroppedExp(0);
    if (MyPetConfiguration.USE_LEVEL_SYSTEM && MyPetExperience.LOSS_FIXED > 0 || MyPetExperience.LOSS_PERCENT > 0) {
      double lostExpirience=MyPetExperience.LOSS_FIXED;
      lostExpirience+=myPet.getExperience().getRequiredExp() * MyPetExperience.LOSS_PERCENT / 100;
      if (lostExpirience > myPet.getExperience().getCurrentExp()) {
        lostExpirience=myPet.getExperience().getCurrentExp();
      }
      if (MyPetExperience.DROP_LOST_EXP) {
        event.setDroppedExp((int)(lostExpirience + 0.5));
      }
      myPet.getExperience().removeCurrentExp(lostExpirience);
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      Inventory inventorySkill=(Inventory)myPet.getSkills().getSkill(""String_Node_Str"");
      inventorySkill.closeInventory();
      if (inventorySkill.dropOnDeath() && !myPet.getOwner().isMyPetAdmin()) {
        World world=((CraftWorld)event.getEntity().getLocation().getWorld()).getHandle();
        Location petLocation=event.getEntity().getLocation();
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        for (int i=0; i < inv.getSize(); i++) {
          net.minecraft.server.v1_5_R2.ItemStack is=inv.splitWithoutUpdate(i);
          if (is != null) {
            is=is.cloneItemStack();
            EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
            itemEntity.pickupDelay=10;
            world.addEntity(itemEntity);
          }
        }
      }
    }
    SendDeathMessage(event);
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
    if (MyPetEconomy.canUseEconomy() && myPet.getOwner().hasAutoRespawnEnabled() && myPet.respawnTime >= myPet.getOwner().getAutoRespawnMin() && MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"")) {
      double costs=myPet.respawnTime * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
      if (MyPetEconomy.canPay(myPet.getOwner(),costs)) {
        MyPetEconomy.pay(myPet.getOwner(),costs);
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.petName)));
        myPet.respawnTime=1;
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.petName)));
      }
    }
  }
}","@EventHandler public void onMyPetEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof CraftMyPet) {
    MyPet myPet=((CraftMyPet)event.getEntity()).getMyPet();
    if (myPet == null || myPet.getHealth() > 0) {
      return;
    }
    myPet.status=PetState.Dead;
    myPet.respawnTime=(MyPetConfiguration.RESPAWN_TIME_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass())));
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        myPet.respawnTime=(MyPetConfiguration.RESPAWN_TIME_PLAYER_FIXED + MyPet.getCustomRespawnTimeFixed(myPet.getClass())) + (myPet.getExperience().getLevel() * (MyPetConfiguration.RESPAWN_TIME_PLAYER_FACTOR + MyPet.getCustomRespawnTimeFactor(myPet.getClass())));
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet killerMyPet=((CraftMyPet)e.getDamager()).getMyPet();
        if (myPet.getSkills().isSkillActive(""String_Node_Str"") && killerMyPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior killerBehaviorSkill=(Behavior)killerMyPet.getSkills().getSkill(""String_Node_Str"");
          Behavior deadBehaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (deadBehaviorSkill.getBehavior() == BehaviorState.Duel && killerBehaviorSkill.getBehavior() == BehaviorState.Duel) {
            EntityMyPet myPetEntity=((CraftMyPet)event.getEntity()).getHandle();
            EntityMyPet duelKiller=((CraftMyPet)e.getDamager()).getHandle();
            if (myPetEntity.petTargetSelector.hasGoal(""String_Node_Str"")) {
              EntityAIDuelTarget duelTarget=(EntityAIDuelTarget)myPetEntity.petTargetSelector.getGoal(""String_Node_Str"");
              if (duelTarget.getDuelOpponent() == duelKiller) {
                myPet.respawnTime=10;
              }
            }
          }
        }
      }
    }
    event.setDroppedExp(0);
    if (MyPetConfiguration.USE_LEVEL_SYSTEM && MyPetExperience.LOSS_FIXED > 0 || MyPetExperience.LOSS_PERCENT > 0) {
      double lostExpirience=MyPetExperience.LOSS_FIXED;
      lostExpirience+=myPet.getExperience().getRequiredExp() * MyPetExperience.LOSS_PERCENT / 100;
      if (lostExpirience > myPet.getExperience().getCurrentExp()) {
        lostExpirience=myPet.getExperience().getCurrentExp();
      }
      if (MyPetExperience.DROP_LOST_EXP) {
        event.setDroppedExp((int)(lostExpirience + 0.5));
      }
      myPet.getExperience().removeCurrentExp(lostExpirience);
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      Inventory inventorySkill=(Inventory)myPet.getSkills().getSkill(""String_Node_Str"");
      inventorySkill.closeInventory();
      if (inventorySkill.dropOnDeath() && !myPet.getOwner().isMyPetAdmin()) {
        World world=((CraftWorld)event.getEntity().getLocation().getWorld()).getHandle();
        Location petLocation=event.getEntity().getLocation();
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        for (int i=0; i < inv.getSize(); i++) {
          net.minecraft.server.v1_5_R2.ItemStack is=inv.splitWithoutUpdate(i);
          if (is != null) {
            is=is.cloneItemStack();
            EntityItem itemEntity=new EntityItem(world,petLocation.getX(),petLocation.getY(),petLocation.getZ(),is);
            itemEntity.pickupDelay=10;
            world.addEntity(itemEntity);
          }
        }
      }
    }
    SendDeathMessage(event);
    myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
    if (MyPetEconomy.canUseEconomy() && myPet.getOwner().hasAutoRespawnEnabled() && myPet.respawnTime >= myPet.getOwner().getAutoRespawnMin() && MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"")) {
      double costs=myPet.respawnTime * MyPetConfiguration.RESPAWN_COSTS_FACTOR + MyPetConfiguration.RESPAWN_COSTS_FIXED;
      if (MyPetEconomy.canPay(myPet.getOwner(),costs)) {
        MyPetEconomy.pay(myPet.getOwner(),costs);
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.petName)));
        myPet.respawnTime=1;
      }
 else {
        myPet.sendMessageToOwner(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",costs + ""String_Node_Str"" + MyPetEconomy.getEconomy().currencyNameSingular()).replace(""String_Node_Str"",myPet.petName)));
      }
    }
  }
}",0.9974647601663116
187556,"public boolean a(){
  if (!petEntity.canMove()) {
    return false;
  }
  EntityLiving localEntityLiving=this.petEntity.getOwner();
  if (localEntityLiving == null) {
    return false;
  }
  this.lastDamager=localEntityLiving.aF();
  if (this.lastDamager == null || !lastDamager.isAlive()) {
    return false;
  }
  if (lastDamager instanceof EntityPlayer) {
    Player targetPlayer=(Player)lastDamager.getBukkitEntity();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)lastDamager).getMyPet();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)lastDamager;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
    Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (lastDamager instanceof EntityTameableAnimal && ((EntityTameableAnimal)lastDamager).isTamed()) {
        return false;
      }
      if (lastDamager instanceof EntityMyPet) {
        return false;
      }
      if (lastDamager instanceof EntityPlayer) {
        return false;
      }
    }
  }
  return true;
}","public boolean a(){
  if (!petEntity.canMove()) {
    return false;
  }
  EntityLiving owner=this.petEntity.getOwner();
  if (owner == null) {
    return false;
  }
  this.lastDamager=owner.aF();
  if (this.lastDamager == null || !lastDamager.isAlive()) {
    return false;
  }
  if (lastDamager instanceof EntityPlayer) {
    if (this.petEntity.getOwner() == lastDamager) {
      return false;
    }
    Player targetPlayer=(Player)lastDamager.getBukkitEntity();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)lastDamager).getMyPet();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
 else   if (lastDamager instanceof EntityTameableAnimal) {
    EntityTameableAnimal tameable=(EntityTameableAnimal)lastDamager;
    if (tameable.isTamed() && tameable.getOwner() != null) {
      Player tameableOwner=(Player)tameable.getOwner().getBukkitEntity();
      if (myPet.getOwner().equals(tameableOwner)) {
        return false;
      }
    }
  }
  if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
    Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
    if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
      return false;
    }
    if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
      if (lastDamager instanceof EntityTameableAnimal && ((EntityTameableAnimal)lastDamager).isTamed()) {
        return false;
      }
      if (lastDamager instanceof EntityMyPet) {
        return false;
      }
      if (lastDamager instanceof EntityPlayer) {
        return false;
      }
    }
  }
  return true;
}",0.9590676520750426
187557,"public void setSize(float extra){
  EntitySize es=this.getClass().getAnnotation(EntitySize.class);
  if (es != null) {
    this.a(es.width(),es.height() + extra);
  }
  float f=this.width / 2.0F;
  float f1=this.length;
  this.boundingBox.b(locX - f,locY - this.height + this.W,locZ - f,locX + f,locY - this.height + this.W + f1,locZ + f);
}","public void setSize(float extra){
  EntitySize es=this.getClass().getAnnotation(EntitySize.class);
  if (es != null) {
    this.a(es.width(),es.height() + extra);
  }
}",0.6601178781925344
187558,"@Override public List<String> saveSkillTrees(String configPath,String[] mobtypes){
  SnakeYAML_Configuration yamlConfiguration;
  File skillFile;
  List<String> savedPetTypes=new ArrayList<String>();
  for (  MyPetType petType : MyPetType.values()) {
    skillFile=new File(configPath + File.separator + petType.getTypeName().toLowerCase()+ ""String_Node_Str"");
    yamlConfiguration=new SnakeYAML_Configuration(skillFile);
    if (saveSkillTree(yamlConfiguration,petType.getTypeName())) {
      savedPetTypes.add(petType.getTypeName());
    }
  }
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  yamlConfiguration=new SnakeYAML_Configuration(skillFile);
  if (saveSkillTree(yamlConfiguration,""String_Node_Str"")) {
    savedPetTypes.add(""String_Node_Str"");
  }
  return savedPetTypes;
}","@Override public List<String> saveSkillTrees(String configPath,String[] mobtypes){
  SnakeYAML_Configuration yamlConfiguration;
  File skillFile;
  List<String> savedPetTypes=new ArrayList<String>();
  for (  String petType : mobtypes) {
    skillFile=new File(configPath + File.separator + petType.toLowerCase()+ ""String_Node_Str"");
    yamlConfiguration=new SnakeYAML_Configuration(skillFile);
    if (saveSkillTree(yamlConfiguration,petType)) {
      savedPetTypes.add(petType);
    }
  }
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  yamlConfiguration=new SnakeYAML_Configuration(skillFile);
  if (saveSkillTree(yamlConfiguration,""String_Node_Str"")) {
    savedPetTypes.add(""String_Node_Str"");
  }
  return savedPetTypes;
}",0.8138195777351248
187559,"public void j_(){
  super.j_();
  if (!world.getMaterial((int)locX,(int)locY,(int)locZ).isLiquid() && !world.getMaterial((int)locX,(int)(locY + 0.65),(int)locZ).isSolid()) {
    this.locY+=0.65;
  }
}","public void j_(){
  super.j_();
  if (!world.getMaterial((int)locX,(int)locY,(int)locZ).isLiquid() && !world.getMaterial((int)locX,(int)(locY + 1.),(int)locZ).isSolid()) {
    this.locY+=0.65;
  }
}",0.9899497487437184
187560,"public void onEnable(){
  plugin=this;
  this.isReady=false;
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  MyPetPvP.reset();
  MyPetEconomy.reset();
  MyPetConfiguration.config=this.getConfig();
  MyPetConfiguration.setDefault();
  MyPetConfiguration.loadConfiguration();
  DebugLogger.setup(MyPetConfiguration.USE_DEBUG_LOGGER);
  String minecraftVersion=((CraftServer)getServer()).getHandle().getServer().getVersion();
  if (!MyPetVersion.getMinecraftVersion().equalsIgnoreCase(minecraftVersion)) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion());
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"" + MyPetVersion.getMinecraftVersion());
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    checkForUpdates(minecraftVersion);
    this.setEnabled(false);
    return;
  }
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  checkForUpdates(MyPetVersion.getMinecraftVersion());
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetMonsterExperience monsterExperience : MyPetMonsterExperience.mobExp.values()) {
    DebugLogger.info(""String_Node_Str"" + monsterExperience.toString());
  }
  DebugLogger.info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  MyPetWeatherListener weatherListener=new MyPetWeatherListener();
  getServer().getPluginManager().registerEvents(weatherListener,this);
  MyPetBlockListener blockListener=new MyPetBlockListener();
  getServer().getPluginManager().registerEvents(blockListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length];
  for (int i=0; i < MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i].getTypeName();
  }
  MyPetSkillTreeMobType.clearMobTypes();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyGiant.class,""String_Node_Str"",53);
    a.invoke(a,EntityGiantZombie.class,""String_Node_Str"",53);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyBlaze.class,""String_Node_Str"",61);
    a.invoke(a,EntityBlaze.class,""String_Node_Str"",61);
    a.invoke(a,EntityMyMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMyWither.class,""String_Node_Str"",64);
    a.invoke(a,EntityWither.class,""String_Node_Str"",64);
    a.invoke(a,EntityMyBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityMyWitch.class,""String_Node_Str"",66);
    a.invoke(a,EntityWitch.class,""String_Node_Str"",66);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntitySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    DebugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.RED+ ""String_Node_Str"");
    e.printStackTrace();
    DebugLogger.severe(""String_Node_Str"");
    DebugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    DebugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getStartHP(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getStartSpeed(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getFood(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getLeashFlags(myPetType.getMyPetClass())+ ""String_Node_Str"");
  }
  language=new MyPetLanguage(new YAML_Configuration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    loadMyWolfWolves(NBTPetFile);
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getMyPetPlayers()) {
    DebugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  DebugLogger.info(""String_Node_Str"");
  if (MyPetConfiguration.SEND_METRICS) {
    DebugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      for (      final MyPetType petType : MyPetType.values()) {
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metrics.start();
    }
 catch (    IOException e) {
      MyPetLogger.write(e.getMessage());
    }
  }
 else {
    DebugLogger.info(""String_Node_Str"");
  }
  HeroesDamageFix.reset();
  AncientRpgDamageFix.findAncientRpgPlugin();
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild()+ ""String_Node_Str"");
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  for (  Player player : getServer().getOnlinePlayers()) {
    if (MyPetPlayer.isMyPetPlayer(player)) {
      MyPetPlayer myPetPlayer=MyPetPlayer.getMyPetPlayer(player);
      if (myPetPlayer.hasMyPet()) {
        if (!MyPetPermissions.has(player,""String_Node_Str"" + MyPetList.getMyPet(player).getPetType().getTypeName())) {
          MyPetList.setMyPetInactive(player);
        }
      }
      if (!myPetPlayer.hasMyPet() && myPetPlayer.hasInactiveMyPets()) {
        IMyPet myPet=MyPetList.getLastActiveMyPet(myPetPlayer);
        if (myPet == null || myPet instanceof MyPet) {
          for (          InactiveMyPet inactiveMyPet : MyPetList.getInactiveMyPets(player)) {
            if (MyPetPermissions.has(player,""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName())) {
              MyPetList.setMyPetActive(inactiveMyPet);
              break;
            }
          }
        }
 else         if (myPet instanceof InactiveMyPet) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + myPet.getPetType().getTypeName())) {
            MyPetList.setMyPetActive((InactiveMyPet)myPet);
          }
        }
      }
      if (myPetPlayer.hasMyPet()) {
        DebugLogger.info(""String_Node_Str"" + MyPetList.hasMyPet(player));
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.getStatus() == PetState.Dead) {
          player.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (myPet.getLocation().getWorld() == player.getLocation().getWorld() && myPet.getLocation().distance(player.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  this.isReady=true;
  DebugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  this.isReady=false;
  MyPetVersion.reset();
  MyPetLogger.setConsole(getServer().getConsoleSender());
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  MyPetPvP.reset();
  MyPetEconomy.reset();
  MyPetConfiguration.config=this.getConfig();
  MyPetConfiguration.setDefault();
  MyPetConfiguration.loadConfiguration();
  DebugLogger.setup(MyPetConfiguration.USE_DEBUG_LOGGER);
  String minecraftVersion=((CraftServer)getServer()).getHandle().getServer().getVersion();
  if (!MyPetVersion.getMinecraftVersion().equalsIgnoreCase(minecraftVersion)) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + MyPetVersion.getMinecraftVersion());
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"" + MyPetVersion.getMinecraftVersion());
    DebugLogger.warning(""String_Node_Str"");
    DebugLogger.warning(""String_Node_Str"");
    checkForUpdates(minecraftVersion);
    this.setEnabled(false);
    return;
  }
  DebugLogger.info(""String_Node_Str"");
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild());
  DebugLogger.info(""String_Node_Str"" + getServer().getVersion());
  DebugLogger.info(""String_Node_Str"" + Arrays.toString(getServer().getPluginManager().getPlugins()));
  checkForUpdates(MyPetVersion.getMinecraftVersion());
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetMonsterExperience monsterExperience : MyPetMonsterExperience.mobExp.values()) {
    DebugLogger.info(""String_Node_Str"" + monsterExperience.toString());
  }
  DebugLogger.info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  MyPetWeatherListener weatherListener=new MyPetWeatherListener();
  getServer().getPluginManager().registerEvents(weatherListener,this);
  MyPetBlockListener blockListener=new MyPetBlockListener();
  getServer().getPluginManager().registerEvents(blockListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  getCommand(""String_Node_Str"").setExecutor(new CommandBeacon());
  getCommand(""String_Node_Str"").setExecutor(new CommandRespawn());
  registerSkillsInfo();
  registerSkills();
  File defaultSkillConfigNBT=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigYAML=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  File defaultSkillConfigJSON=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfigNBT.exists() && !defaultSkillConfigYAML.exists() && !defaultSkillConfigJSON.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfigNBT);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      DebugLogger.info(""String_Node_Str"");
    }
  }
  String[] petTypes=new String[MyPetType.values().length];
  for (int i=0; i < MyPetType.values().length; i++) {
    petTypes[i]=MyPetType.values()[i].getTypeName();
  }
  MyPetSkillTreeMobType.clearMobTypes();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  MyPetSkillTreeLoaderYAML.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"",petTypes);
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyGiant.class,""String_Node_Str"",53);
    a.invoke(a,EntityGiantZombie.class,""String_Node_Str"",53);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyBlaze.class,""String_Node_Str"",61);
    a.invoke(a,EntityBlaze.class,""String_Node_Str"",61);
    a.invoke(a,EntityMyMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMyWither.class,""String_Node_Str"",64);
    a.invoke(a,EntityWither.class,""String_Node_Str"",64);
    a.invoke(a,EntityMyBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityMyWitch.class,""String_Node_Str"",66);
    a.invoke(a,EntityWitch.class,""String_Node_Str"",66);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntitySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    DebugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.RED+ ""String_Node_Str"");
    e.printStackTrace();
    DebugLogger.severe(""String_Node_Str"");
    DebugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    DebugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getStartHP(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getStartSpeed(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getFood(myPetType.getMyPetClass())+ ""String_Node_Str""+ ""String_Node_Str""+ MyPet.getLeashFlags(myPetType.getMyPetClass())+ ""String_Node_Str"");
  }
  language=new MyPetLanguage(new YAML_Configuration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
    NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    loadMyWolfWolves(NBTPetFile);
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  DebugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getMyPetPlayers()) {
    DebugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  DebugLogger.info(""String_Node_Str"");
  if (MyPetConfiguration.SEND_METRICS) {
    DebugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      Graph graphTotalCount=metrics.createGraph(""String_Node_Str"");
      for (      final MyPetType petType : MyPetType.values()) {
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      Plotter plotter=new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyPetList.countMyPets();
        }
      }
;
      graphTotalCount.addPlotter(plotter);
      metrics.start();
    }
 catch (    IOException e) {
      MyPetLogger.write(e.getMessage());
    }
  }
 else {
    DebugLogger.info(""String_Node_Str"");
  }
  HeroesDamageFix.reset();
  AncientRpgDamageFix.findAncientRpgPlugin();
  DebugLogger.info(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild()+ ""String_Node_Str"");
  MyPetLogger.write(""String_Node_Str"" + MyPetVersion.getMyPetVersion() + ""String_Node_Str""+ MyPetVersion.getMyPetBuild()+ ChatColor.GREEN+ ""String_Node_Str"");
  for (  Player player : getServer().getOnlinePlayers()) {
    if (MyPetPlayer.isMyPetPlayer(player)) {
      MyPetPlayer myPetPlayer=MyPetPlayer.getMyPetPlayer(player);
      if (myPetPlayer.hasMyPet()) {
        if (!MyPetPermissions.has(player,""String_Node_Str"" + MyPetList.getMyPet(player).getPetType().getTypeName())) {
          MyPetList.setMyPetInactive(player);
        }
      }
      if (!myPetPlayer.hasMyPet() && myPetPlayer.hasInactiveMyPets()) {
        IMyPet myPet=MyPetList.getLastActiveMyPet(myPetPlayer);
        if (myPet == null || myPet instanceof MyPet) {
          for (          InactiveMyPet inactiveMyPet : MyPetList.getInactiveMyPets(player)) {
            if (MyPetPermissions.has(player,""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName())) {
              MyPetList.setMyPetActive(inactiveMyPet);
              break;
            }
          }
        }
 else         if (myPet instanceof InactiveMyPet) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + myPet.getPetType().getTypeName())) {
            MyPetList.setMyPetActive((InactiveMyPet)myPet);
          }
        }
      }
      if (myPetPlayer.hasMyPet()) {
        DebugLogger.info(""String_Node_Str"" + MyPetList.hasMyPet(player));
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.getStatus() == PetState.Dead) {
          player.sendMessage(MyPetBukkitUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (myPet.getLocation().getWorld() == player.getLocation().getWorld() && myPet.getLocation().distance(player.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  this.isReady=true;
  savePets(false);
  DebugLogger.info(""String_Node_Str"");
}",0.9993238674780256
187561,"public static String getMinecraftVersion(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return MinecraftVersion;
}","public static String getMinecraftVersion(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return minecraftVersion;
}",0.9927536231884058
187562,"public static String getMyPetVersion(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return MyPetVersion;
}","public static String getMyPetVersion(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return myPetVersion;
}",0.9923076923076924
187563,"public static String getMyPetBuild(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return MyPetBuild;
}","public static String getMyPetBuild(){
  if (!updated) {
    getManifestVersion();
    updated=true;
  }
  return myPetBuild;
}",0.992063492063492
187564,"private static void getManifestVersion(){
  try {
    Enumeration<URL> e=MyPetVersion.class.getClassLoader().getResources(JarFile.MANIFEST_NAME);
    while (e.hasMoreElements()) {
      URL u=e.nextElement();
      if (u.getPath().contains(MyPetVersion.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())) {
        Manifest mf=new Manifest(u.openStream());
        Attributes attr=mf.getMainAttributes();
        if (attr.getValue(""String_Node_Str"") != null) {
          MyPetVersion=attr.getValue(""String_Node_Str"");
        }
        if (attr.getValue(""String_Node_Str"") != null) {
          MyPetBuild=attr.getValue(""String_Node_Str"");
        }
        if (attr.getValue(""String_Node_Str"") != null) {
          MinecraftVersion=attr.getValue(""String_Node_Str"");
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}","private static void getManifestVersion(){
  try {
    String path=MyPetVersion.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
    Attributes attr=getClassLoaderForExtraModule(path).getMainAttributes();
    if (attr.getValue(""String_Node_Str"") != null) {
      myPetVersion=attr.getValue(""String_Node_Str"");
    }
    if (attr.getValue(""String_Node_Str"") != null) {
      myPetBuild=attr.getValue(""String_Node_Str"");
    }
    if (attr.getValue(""String_Node_Str"") != null) {
      minecraftVersion=attr.getValue(""String_Node_Str"");
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
}",0.6764886433394721
187565,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (entityhuman == getOwner() && itemStack != null) {
    if (itemStack.id == Item.SHEARS.id) {
      for (      EquipmentSlot slot : EquipmentSlot.values()) {
        ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
        if (itemInSlot != null) {
          EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
          entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
          entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          setPetEquipment(slot.getSlotId(),null);
        }
      }
      return true;
    }
 else     if (checkForEquipment(itemStack) && getOwner().isSneaking()) {
      EquipmentSlot slot=EquipmentSlot.getSlotById(b(itemStack));
      ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
      if (itemInSlot != null && !entityhuman.abilities.canInstantlyBuild) {
        EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
        entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
        entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
        entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
      }
      setPetEquipment(b(itemStack),itemStack.cloneItemStack());
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (entityhuman == getOwner() && itemStack != null) {
    if (itemStack.id == Item.SHEARS.id) {
      for (      EquipmentSlot slot : EquipmentSlot.values()) {
        ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
        if (itemInSlot != null) {
          EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
          entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
          entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          setPetEquipment(slot.getSlotId(),null);
        }
      }
      return true;
    }
 else     if (checkForEquipment(itemStack) && getOwner().isSneaking()) {
      EquipmentSlot slot=EquipmentSlot.getSlotById(b(itemStack));
      ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
      if (itemInSlot != null && !entityhuman.abilities.canInstantlyBuild) {
        EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
        entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
        entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
        entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
      }
      ItemStack itemStackClone=itemStack.cloneItemStack();
      itemStackClone.count=1;
      setPetEquipment(b(itemStack),itemStackClone);
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      return true;
    }
  }
  return false;
}",0.9718916181311724
187566,"public void load(){
  List<Tag<?>> tags=readRawNBT(NBTFile,true);
  if (tags != null) {
    MyPetUtil.getDebugLogger().info(""String_Node_Str"" + NBTFile.getName() + ""String_Node_Str"");
  }
 else {
    tags=readRawNBT(NBTFile,false);
    if (tags != null) {
      MyPetUtil.getDebugLogger().info(""String_Node_Str"" + NBTFile.getName() + ""String_Node_Str"");
    }
  }
  if (tags != null && tags.size() > 0) {
    nbtTagCompound=(CompoundTag)tags.get(0);
  }
}","public void load(){
  if (!NBTFile.exists()) {
    return;
  }
  List<Tag<?>> tags=readRawNBT(NBTFile,true);
  if (tags != null) {
    if (MyPetUtil.getDebugLogger() != null) {
      MyPetUtil.getDebugLogger().info(""String_Node_Str"" + NBTFile.getName() + ""String_Node_Str"");
    }
  }
 else {
    tags=readRawNBT(NBTFile,false);
    if (tags != null) {
      if (MyPetUtil.getDebugLogger() != null) {
        MyPetUtil.getDebugLogger().info(""String_Node_Str"" + NBTFile.getName() + ""String_Node_Str"");
      }
    }
  }
  if (tags != null && tags.size() > 0) {
    nbtTagCompound=(CompoundTag)tags.get(0);
  }
}",0.6178403755868545
187567,"public CompoundTag getNBTCompound(){
  if (nbtTagCompound == null) {
    nbtTagCompound=new CompoundTag(""String_Node_Str"",new CompoundMap());
  }
  return nbtTagCompound;
}","public CompoundTag getNBTCompound(){
  if (nbtTagCompound == null) {
    clearConfig();
  }
  return nbtTagCompound;
}",0.7724137931034483
187568,"@Override public void schedule(){
  if (range > 0 && pickup && myPet.getStatus() == PetState.Here && myPet.getSkills().isSkillActive(""String_Node_Str"")) {
    for (    Entity e : myPet.getCraftPet().getNearbyEntities(range,range,range)) {
      if (e instanceof Item) {
        Item item=(Item)e;
        PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),item,item.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(playerPickupEvent);
        if (playerPickupEvent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        int itemAmount=inv.addItem(item.getItemStack());
        if (itemAmount == 0) {
          for (          Entity p : e.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(e.getEntityId(),myPet.getCraftPet().getEntityId()));
            }
          }
          myPet.getCraftPet().getHandle().makeSound(""String_Node_Str"",0.2F,1.0F);
          e.remove();
        }
 else {
          item.getItemStack().setAmount(itemAmount);
        }
      }
    }
  }
}","@Override public void schedule(){
  if (range > 0 && pickup && myPet.getStatus() == PetState.Here && myPet.getSkills().isSkillActive(""String_Node_Str"")) {
    for (    Entity entity : myPet.getCraftPet().getNearbyEntities(range,range,range)) {
      if (entity instanceof Item) {
        Item itemEntity=(Item)entity;
        PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),itemEntity,itemEntity.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(playerPickupEvent);
        if (playerPickupEvent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        int itemAmount=inv.addItem(itemEntity.getItemStack());
        if (itemAmount == 0) {
          for (          Entity p : itemEntity.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().playerConnection.sendPacket(new Packet22Collect(entity.getEntityId(),myPet.getCraftPet().getEntityId()));
            }
          }
          myPet.getCraftPet().getHandle().makeSound(""String_Node_Str"",0.2F,1.0F);
          itemEntity.remove();
        }
 else {
          itemEntity.getItemStack().setAmount(itemAmount);
        }
      }
    }
  }
}",0.9722222222222222
187569,"public int addItem(org.bukkit.inventory.ItemStack itemAdd){
  if (itemAdd == null) {
    return 0;
  }
  itemAdd=itemAdd.clone();
  int itemID=itemAdd.getTypeId();
  int itemDuarbility=itemAdd.getDurability();
  int itemMaxStack=itemAdd.getMaxStackSize();
  for (int i=0; i < this.getSize(); i++) {
    ItemStack item=getItem(i);
    if (item != null) {
      if (getItem(i).id != itemID) {
        continue;
      }
 else       if (getItem(i).getData() != itemDuarbility) {
        continue;
      }
 else       if ((item.getEnchantments() != null && item.getEnchantments().size() > 0) || (itemAdd.getEnchantments() != null && itemAdd.getEnchantments().size() > 0)) {
        continue;
      }
 else       if (item.count >= itemMaxStack) {
        continue;
      }
 else       if (itemAdd.hasItemMeta()) {
        continue;
      }
      if (itemAdd.getAmount() >= itemMaxStack - item.count) {
        itemAdd.setAmount(itemAdd.getAmount() - (itemMaxStack - item.count));
        item.count=itemMaxStack;
      }
 else {
        item.count+=itemAdd.getAmount();
        itemAdd.setAmount(0);
        break;
      }
    }
  }
  for (int i=0; i < getSize(); i++) {
    if (itemAdd.getAmount() <= 0) {
      break;
    }
    if (getItem(i) == null) {
      if (itemAdd.getAmount() <= itemMaxStack) {
        setItem(i,CraftItemStack.asNMSCopy(itemAdd.clone()));
        itemAdd.setAmount(0);
        break;
      }
 else {
        org.bukkit.inventory.ItemStack itemStack=itemAdd.clone();
        itemStack.setAmount(itemStack.getMaxStackSize());
        setItem(i,CraftItemStack.asNMSCopy(itemAdd.clone()));
        itemAdd.setAmount(itemAdd.getAmount() - itemStack.getMaxStackSize());
      }
    }
  }
  update();
  return itemAdd.getAmount();
}","public int addItem(org.bukkit.inventory.ItemStack itemAdd){
  if (itemAdd == null) {
    return 0;
  }
  itemAdd=itemAdd.clone();
  for (int i=0; i < this.getSize(); i++) {
    CraftItemStack craftItem=CraftItemStack.asCraftMirror(getItem(i));
    if (ItemStackComparator.compareItem(itemAdd,craftItem)) {
      if (craftItem.getAmount() >= craftItem.getMaxStackSize()) {
        continue;
      }
      while (craftItem.getAmount() < craftItem.getMaxStackSize() && itemAdd.getAmount() > 0) {
        craftItem.setAmount(craftItem.getAmount() + 1);
        itemAdd.setAmount(itemAdd.getAmount() - 1);
      }
      if (itemAdd.getAmount() == 0) {
        break;
      }
    }
  }
  if (itemAdd.getAmount() > 0) {
    for (int i=0; i < this.getSize(); i++) {
      if (getItem(i) == null) {
        if (itemAdd.getAmount() <= itemAdd.getMaxStackSize()) {
          setItem(i,CraftItemStack.asNMSCopy(itemAdd.clone()));
          itemAdd.setAmount(0);
          break;
        }
 else {
          CraftItemStack itemStack=(CraftItemStack)itemAdd.clone();
          itemStack.setAmount(itemStack.getMaxStackSize());
          setItem(i,CraftItemStack.asNMSCopy(itemStack));
          itemAdd.setAmount(itemAdd.getAmount() - itemStack.getMaxStackSize());
        }
        if (itemAdd.getAmount() == 0) {
          break;
        }
      }
    }
  }
  return itemAdd.getAmount();
}",0.352752880921895
187570,"public static void main(String[] args){
  String path=""String_Node_Str"";
  try {
    path=GuiMain.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  path=path.replace(""String_Node_Str"",File.separator);
  path=path.replaceAll(String.format(""String_Node_Str"",File.separator,File.separator),""String_Node_Str"");
  path=path.substring(1);
  File pluginDirFile=new File(path);
  configPath=pluginDirFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator;
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  if (!canFindBukkit()) {
    String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + pluginDirFile.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ pluginDirFile.getAbsolutePath()+ File.separator+ ""String_Node_Str""+ pluginDirFile.getParent()+ File.separator,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      JFrame bukkitDownloaderFrame=bukkitDownloader.getFrame();
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.getMainPanel());
      bukkitDownloaderFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
 else     if (result == 2) {
      JFileChooser fileChooser=new JFileChooser(new File(path));
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().matches(""String_Node_Str"");
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        try {
          Runtime.getRuntime().exec(""String_Node_Str"" + fileChooser.getSelectedFile().getAbsolutePath() + ""String_Node_Str""+ System.getProperties().getProperty(""String_Node_Str"")+ ""String_Node_Str""+ (SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())+ ""String_Node_Str"");
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
      System.exit(0);
    }
    return;
  }
  MyPetPlugin.registerSkills();
  new File(configPath + ""String_Node_Str"" + File.separator).mkdirs();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  skilltreeCreator=new SkilltreeCreator();
  final JFrame skilltreeCreatorFrame=skilltreeCreator.getFrame();
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.getMainPanel());
  skilltreeCreatorFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  skilltreeCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      int result=JOptionPane.showConfirmDialog(skilltreeCreatorFrame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
      if (result == 0) {
        System.exit(0);
      }
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  levelCreator=new LevelCreator();
  final JFrame levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  skillPropertyEditor=new SkillPropertyEditor();
  final JFrame skillPropertyEditorFrame=skillPropertyEditor.getFrame();
  skillPropertyEditorFrame.setContentPane(skillPropertyEditor.getMainPanel());
  skillPropertyEditorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
  skillPropertyEditorFrame.setIconImage(logoImage);
  skillPropertyEditorFrame.pack();
  skillPropertyEditorFrame.setLocationRelativeTo(null);
  skillPropertyEditorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      levelCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}","public static void main(String[] args){
  String path=""String_Node_Str"";
  try {
    path=GuiMain.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  path=path.replace(""String_Node_Str"",File.separator);
  path=path.replaceAll(String.format(""String_Node_Str"",File.separator,File.separator),""String_Node_Str"");
  File pluginDirFile=new File(path);
  configPath=pluginDirFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator;
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  if (!canFindBukkit()) {
    String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + pluginDirFile.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ pluginDirFile.getAbsolutePath()+ File.separator+ ""String_Node_Str""+ pluginDirFile.getParent()+ File.separator,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      JFrame bukkitDownloaderFrame=bukkitDownloader.getFrame();
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.getMainPanel());
      bukkitDownloaderFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
 else     if (result == 2) {
      JFileChooser fileChooser=new JFileChooser(new File(path));
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().matches(""String_Node_Str"");
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        try {
          Runtime.getRuntime().exec(""String_Node_Str"" + fileChooser.getSelectedFile().getAbsolutePath() + ""String_Node_Str""+ System.getProperties().getProperty(""String_Node_Str"")+ ""String_Node_Str""+ (SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())+ ""String_Node_Str"");
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
      System.exit(0);
    }
    return;
  }
  MyPetPlugin.registerSkills();
  new File(configPath + ""String_Node_Str"" + File.separator).mkdirs();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  skilltreeCreator=new SkilltreeCreator();
  final JFrame skilltreeCreatorFrame=skilltreeCreator.getFrame();
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.getMainPanel());
  skilltreeCreatorFrame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  skilltreeCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      int result=JOptionPane.showConfirmDialog(skilltreeCreatorFrame,""String_Node_Str"",""String_Node_Str"",JOptionPane.OK_CANCEL_OPTION);
      if (result == 0) {
        System.exit(0);
      }
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  levelCreator=new LevelCreator();
  final JFrame levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  skillPropertyEditor=new SkillPropertyEditor();
  final JFrame skillPropertyEditorFrame=skillPropertyEditor.getFrame();
  skillPropertyEditorFrame.setContentPane(skillPropertyEditor.getMainPanel());
  skillPropertyEditorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
  skillPropertyEditorFrame.setIconImage(logoImage);
  skillPropertyEditorFrame.pack();
  skillPropertyEditorFrame.setLocationRelativeTo(null);
  skillPropertyEditorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      levelCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}",0.9978583196046128
187571,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (entityhuman == getOwner() && itemStack != null) {
    if (itemStack.id == Item.SHEARS.id) {
      for (      EquipmentSlot slot : EquipmentSlot.values()) {
        ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
        if (itemInSlot != null) {
          EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
          entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
          entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          setEquipment(slot.getSlotId(),null);
        }
      }
      return true;
    }
 else     if (checkForEquipment(itemStack) && getOwner().isSneaking()) {
      EquipmentSlot slot=EquipmentSlot.getSlotById(b(itemStack));
      ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
      if (itemInSlot != null && !entityhuman.abilities.canInstantlyBuild) {
        EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
        entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
        entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
        entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
      }
      setEquipment(b(itemStack),itemStack.cloneItemStack());
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (entityhuman == getOwner() && itemStack != null) {
    if (itemStack.id == Item.SHEARS.id) {
      for (      EquipmentSlot slot : EquipmentSlot.values()) {
        ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
        if (itemInSlot != null) {
          EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
          entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
          entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
          setPetEquipment(slot.getSlotId(),null);
        }
      }
      return true;
    }
 else     if (checkForEquipment(itemStack) && getOwner().isSneaking()) {
      EquipmentSlot slot=EquipmentSlot.getSlotById(b(itemStack));
      ItemStack itemInSlot=((MyPigZombie)myPet).getEquipment(slot);
      if (itemInSlot != null && !entityhuman.abilities.canInstantlyBuild) {
        EntityItem entityitem=this.a(itemInSlot.cloneItemStack(),1.0F);
        entityitem.motY+=(double)(this.random.nextFloat() * 0.05F);
        entityitem.motX+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
        entityitem.motZ+=(double)((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
      }
      setPetEquipment(b(itemStack),itemStack.cloneItemStack());
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      return true;
    }
  }
  return false;
}",0.9984480082772892
187572,"public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MyPigZombie myPigZombie=(MyPigZombie)myPet;
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (myPigZombie.getEquipment(slot) != null) {
        setEquipment(slot.getSlotId(),myPigZombie.getEquipment(slot));
      }
    }
  }
}","public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MyPigZombie myPigZombie=(MyPigZombie)myPet;
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (myPigZombie.getEquipment(slot) != null) {
        setPetEquipment(slot.getSlotId(),myPigZombie.getEquipment(slot));
      }
    }
  }
}",0.9955423476968795
187573,"public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    getCraftPet().getHandle().setEquipment(slot.getSlotId(),item);
  }
}","public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    ((EntityMyPigZombie)getCraftPet().getHandle()).setPetEquipment(slot.getSlotId(),item);
  }
}",0.940677966101695
187574,"public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MySkeleton mySkeleton=(MySkeleton)myPet;
    this.setWither(mySkeleton.isWither());
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (mySkeleton.getEquipment(slot) != null) {
        setEquipment(slot.getSlotId(),mySkeleton.getEquipment(slot));
      }
    }
  }
}","public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MySkeleton mySkeleton=(MySkeleton)myPet;
    this.setWither(mySkeleton.isWither());
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (mySkeleton.getEquipment(slot) != null) {
        setPetEquipment(slot.getSlotId(),mySkeleton.getEquipment(slot));
      }
    }
  }
}",0.9959946595460614
187575,"public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    getCraftPet().getHandle().setEquipment(slot.getSlotId(),item);
  }
}","public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    ((EntityMySkeleton)getCraftPet().getHandle()).setPetEquipment(slot.getSlotId(),item);
  }
}",0.9426751592356688
187576,"public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MyZombie myZombie=(MyZombie)myPet;
    this.setBaby(myZombie.isBaby());
    this.setVillager(myZombie.isVillager());
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (myZombie.getEquipment(slot) != null) {
        setEquipment(slot.getSlotId(),myZombie.getEquipment(slot));
      }
    }
  }
}","public void setMyPet(MyPet myPet){
  if (myPet != null) {
    super.setMyPet(myPet);
    MyZombie myZombie=(MyZombie)myPet;
    this.setBaby(myZombie.isBaby());
    this.setVillager(myZombie.isVillager());
    for (    EquipmentSlot slot : EquipmentSlot.values()) {
      if (myZombie.getEquipment(slot) != null) {
        setPetEquipment(slot.getSlotId(),myZombie.getEquipment(slot));
      }
    }
  }
}",0.9962825278810408
187577,"public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    getCraftPet().getHandle().setEquipment(slot.getSlotId(),item);
  }
}","public void setEquipment(EquipmentSlot slot,ItemStack item){
  item=item.cloneItemStack();
  equipment.put(slot,item);
  if (status == PetState.Here) {
    ((EntityMyZombie)getCraftPet().getHandle()).setPetEquipment(slot.getSlotId(),item);
  }
}",0.9466950959488272
187578,"public org.bukkit.entity.Entity getBukkitEntity(){
  if (this.bukkitEntity == null) {
    this.bukkitEntity=new CraftMyPet(this.world.getServer(),this);
  }
  return this.bukkitEntity;
}","public CraftEntity getBukkitEntity(){
  if (this.myBukkitEntity == null) {
    this.myBukkitEntity=new CraftMyPet(this.world.getServer(),this);
  }
  try {
    Field bE=Entity.class.getDeclaredField(""String_Node_Str"");
    bE.setAccessible(true);
    if (bE.get(this) == null) {
      bE.set(this,this.myBukkitEntity);
    }
    return (CraftEntity)bE.get(this);
  }
 catch (  NoSuchFieldException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return this.myBukkitEntity;
}",0.3916083916083916
187579,"/** 
 * Is called when a MyPet attemps to do damge to another entity
 */
public boolean m(Entity entity){
  int damage=isMyPet() ? myPet.getDamage() : MyPet.getStartDamage(MyPetType.getMyPetTypeByEntityClass(this.getClass()).getMyPetClass());
  if (entity instanceof EntityPlayer) {
    Player victim=(Player)entity.getBukkitEntity();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),victim)) {
      if (myPet.hasTarget()) {
        myPet.getCraftPet().getHandle().setGoalTarget((EntityLiving)null);
      }
      return false;
    }
  }
  return entity.damageEntity(DamageSource.mobAttack(this),damage);
}","/** 
 * Is called when a MyPet attemps to do damge to another entity
 */
public boolean m(Entity entity){
  int damage=isMyPet() ? myPet.getDamage() : MyPet.getStartDamage(MyPetType.getMyPetTypeByEntityClass(this.getClass()).getMyPetClass());
  if (entity instanceof EntityPlayer) {
    Player victim=(Player)entity.getBukkitEntity();
    if (!MyPetPvP.canHurt(myPet.getOwner().getPlayer(),victim)) {
      if (myPet.hasTarget()) {
        myPet.getCraftPet().getHandle().setGoalTarget(null);
      }
      return false;
    }
  }
  return entity.damageEntity(DamageSource.mobAttack(this),damage);
}",0.9884488448844884
187580,"public static void main(String[] args){
  String path=""String_Node_Str"";
  try {
    path=GuiMain.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  path=path.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",File.separator).substring(1);
  File pluginDirFile=new File(path);
  configPath=pluginDirFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator;
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  if (!canFindBukkit()) {
    String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + pluginDirFile.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ pluginDirFile.getAbsolutePath()+ File.separator+ ""String_Node_Str""+ pluginDirFile.getParent()+ File.separator,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      JFrame bukkitDownloaderFrame=bukkitDownloader.getFrame();
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.getMainPanel());
      bukkitDownloaderFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
 else     if (result == 2) {
      JFileChooser fileChooser=new JFileChooser(new File(path));
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().matches(""String_Node_Str"");
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        try {
          Runtime.getRuntime().exec(""String_Node_Str"" + fileChooser.getSelectedFile().getAbsolutePath() + ""String_Node_Str""+ System.getProperties().getProperty(""String_Node_Str"")+ ""String_Node_Str""+ (SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())+ ""String_Node_Str"");
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
      System.exit(0);
    }
    return;
  }
  MyPetPlugin.registerSkills();
  new File(configPath + ""String_Node_Str"" + File.separator).mkdirs();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  skilltreeCreator=new SkilltreeCreator();
  final JFrame skilltreeCreatorFrame=skilltreeCreator.getFrame();
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.getMainPanel());
  skilltreeCreatorFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  levelCreator=new LevelCreator();
  final JFrame levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  skillPropertyEditor=new SkillPropertyEditor();
  final JFrame skillPropertyEditorFrame=skillPropertyEditor.getFrame();
  skillPropertyEditorFrame.setContentPane(skillPropertyEditor.getMainPanel());
  skillPropertyEditorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
  skillPropertyEditorFrame.setIconImage(logoImage);
  skillPropertyEditorFrame.pack();
  skillPropertyEditorFrame.setLocationRelativeTo(null);
  skillPropertyEditorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      levelCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}","public static void main(String[] args){
  String path=""String_Node_Str"";
  try {
    path=GuiMain.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  path=path.replace(""String_Node_Str"",File.separator);
  path=path.replaceAll(String.format(""String_Node_Str"",File.separator,File.separator),""String_Node_Str"");
  path=path.substring(1);
  File pluginDirFile=new File(path);
  configPath=pluginDirFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator;
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  if (!canFindBukkit()) {
    String[] buttons={""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + pluginDirFile.getAbsolutePath() + File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ pluginDirFile.getAbsolutePath()+ File.separator+ ""String_Node_Str""+ pluginDirFile.getParent()+ File.separator,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      JFrame bukkitDownloaderFrame=bukkitDownloader.getFrame();
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.getMainPanel());
      bukkitDownloaderFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
 else     if (result == 2) {
      JFileChooser fileChooser=new JFileChooser(new File(path));
      fileChooser.setAcceptAllFileFilterUsed(false);
      fileChooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          return f.isDirectory() || f.getName().matches(""String_Node_Str"");
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      if (fileChooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        try {
          Runtime.getRuntime().exec(""String_Node_Str"" + fileChooser.getSelectedFile().getAbsolutePath() + ""String_Node_Str""+ System.getProperties().getProperty(""String_Node_Str"")+ ""String_Node_Str""+ (SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath())+ ""String_Node_Str"");
        }
 catch (        Exception e1) {
          e1.printStackTrace();
        }
      }
      System.exit(0);
    }
    return;
  }
  MyPetPlugin.registerSkills();
  new File(configPath + ""String_Node_Str"" + File.separator).mkdirs();
  MyPetSkillTreeLoaderNBT.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  MyPetSkillTreeLoaderJSON.getSkilltreeLoader().loadSkillTrees(configPath + ""String_Node_Str"",false);
  skilltreeCreator=new SkilltreeCreator();
  final JFrame skilltreeCreatorFrame=skilltreeCreator.getFrame();
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.getMainPanel());
  skilltreeCreatorFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  levelCreator=new LevelCreator();
  final JFrame levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
  skillPropertyEditor=new SkillPropertyEditor();
  final JFrame skillPropertyEditorFrame=skillPropertyEditor.getFrame();
  skillPropertyEditorFrame.setContentPane(skillPropertyEditor.getMainPanel());
  skillPropertyEditorFrame.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
  skillPropertyEditorFrame.setIconImage(logoImage);
  skillPropertyEditorFrame.pack();
  skillPropertyEditorFrame.setLocationRelativeTo(null);
  skillPropertyEditorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      levelCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}",0.9880908075921102
187581,"public int savePets(boolean shutdown){
  int petCount=0;
  NBT_Configuration nbtConfiguration=new NBT_Configuration(NBTPetFile);
  NBTTagList petNBTlist=new NBTTagList();
  for (  MyPet myPet : MyPetList.getAllMyPets()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getZ());
    locationNBT.setFloat(""String_Node_Str"",myPet.getLocation().getYaw());
    locationNBT.setFloat(""String_Node_Str"",myPet.getLocation().getPitch());
    locationNBT.setString(""String_Node_Str"",myPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",myPet.getPetType().getTypeName());
    petNBT.setString(""String_Node_Str"",myPet.getOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",myPet.getHealth());
    petNBT.setInt(""String_Node_Str"",myPet.respawnTime);
    petNBT.setInt(""String_Node_Str"",myPet.getHungerValue());
    petNBT.setString(""String_Node_Str"",myPet.petName);
    petNBT.setDouble(""String_Node_Str"",myPet.getExperience().getExp());
    petNBT.setCompound(""String_Node_Str"",myPet.getExtendedInfo());
    if (myPet.getSkillTree() != null) {
      petNBT.setString(""String_Node_Str"",myPet.getSkillTree().getName());
    }
    NBTTagCompound skillsNBT=new NBTTagCompound(""String_Node_Str"");
    Collection<MyPetGenericSkill> skillList=myPet.getSkills().getSkills();
    if (skillList.size() > 0) {
      for (      MyPetGenericSkill skill : skillList) {
        NBTTagCompound s=skill.save();
        if (s != null) {
          skillsNBT.set(skill.getName(),s);
        }
      }
    }
    petNBT.set(""String_Node_Str"",skillsNBT);
    petNBTlist.add(petNBT);
    petCount++;
  }
  for (  InactiveMyPet inactiveMyPet : MyPetList.getAllInactiveMyPets()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getZ());
    locationNBT.setFloat(""String_Node_Str"",inactiveMyPet.getLocation().getYaw());
    locationNBT.setFloat(""String_Node_Str"",inactiveMyPet.getLocation().getPitch());
    locationNBT.setString(""String_Node_Str"",inactiveMyPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetType().getTypeName());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getHealth());
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getHungerValue());
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getRespawnTime());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetName());
    petNBT.setDouble(""String_Node_Str"",inactiveMyPet.getExp());
    if (inactiveMyPet.getSkillTree() != null) {
      petNBT.setString(""String_Node_Str"",inactiveMyPet.getSkillTree().getName());
    }
    petNBT.set(""String_Node_Str"",inactiveMyPet.getSkills());
    petNBTlist.add(petNBT);
    petCount++;
  }
  String[] version=this.getDescription().getVersion().split(""String_Node_Str"");
  nbtConfiguration.getNBTTagCompound().setString(""String_Node_Str"",version[0]);
  nbtConfiguration.getNBTTagCompound().setBoolean(""String_Node_Str"",shutdown);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",petNBTlist);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",savePlayers());
  nbtConfiguration.save();
  return petCount;
}","public int savePets(boolean shutdown){
  int petCount=0;
  NBT_Configuration nbtConfiguration=new NBT_Configuration(NBTPetFile);
  NBTTagList petNBTlist=new NBTTagList();
  for (  MyPet myPet : MyPetList.getAllMyPets()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",myPet.getLocation().getZ());
    locationNBT.setFloat(""String_Node_Str"",myPet.getLocation().getYaw());
    locationNBT.setFloat(""String_Node_Str"",myPet.getLocation().getPitch());
    locationNBT.setString(""String_Node_Str"",myPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",myPet.getPetType().getTypeName());
    petNBT.setString(""String_Node_Str"",myPet.getOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",myPet.getHealth());
    petNBT.setInt(""String_Node_Str"",myPet.respawnTime);
    petNBT.setInt(""String_Node_Str"",myPet.getHungerValue());
    petNBT.setString(""String_Node_Str"",myPet.petName);
    petNBT.setDouble(""String_Node_Str"",myPet.getExperience().getExp());
    petNBT.setCompound(""String_Node_Str"",myPet.getExtendedInfo());
    if (myPet.getSkillTree() != null) {
      petNBT.setString(""String_Node_Str"",myPet.getSkillTree().getName());
    }
    NBTTagCompound skillsNBT=new NBTTagCompound(""String_Node_Str"");
    Collection<MyPetGenericSkill> skillList=myPet.getSkills().getSkills();
    if (skillList.size() > 0) {
      for (      MyPetGenericSkill skill : skillList) {
        NBTTagCompound s=skill.save();
        if (s != null) {
          skillsNBT.set(skill.getName(),s);
        }
      }
    }
    petNBT.set(""String_Node_Str"",skillsNBT);
    petNBTlist.add(petNBT);
    petCount++;
  }
  for (  InactiveMyPet inactiveMyPet : MyPetList.getAllInactiveMyPets()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",inactiveMyPet.getLocation().getZ());
    locationNBT.setFloat(""String_Node_Str"",inactiveMyPet.getLocation().getYaw());
    locationNBT.setFloat(""String_Node_Str"",inactiveMyPet.getLocation().getPitch());
    locationNBT.setString(""String_Node_Str"",inactiveMyPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetType().getTypeName());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getHealth());
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getHungerValue());
    petNBT.setInt(""String_Node_Str"",inactiveMyPet.getRespawnTime());
    petNBT.setString(""String_Node_Str"",inactiveMyPet.getPetName());
    petNBT.setDouble(""String_Node_Str"",inactiveMyPet.getExp());
    petNBT.setCompound(""String_Node_Str"",inactiveMyPet.getInfo());
    if (inactiveMyPet.getSkillTree() != null) {
      petNBT.setString(""String_Node_Str"",inactiveMyPet.getSkillTree().getName());
    }
    petNBT.set(""String_Node_Str"",inactiveMyPet.getSkills());
    petNBTlist.add(petNBT);
    petCount++;
  }
  String[] version=this.getDescription().getVersion().split(""String_Node_Str"");
  nbtConfiguration.getNBTTagCompound().setString(""String_Node_Str"",version[0]);
  nbtConfiguration.getNBTTagCompound().setBoolean(""String_Node_Str"",shutdown);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",petNBTlist);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",savePlayers());
  nbtConfiguration.save();
  return petCount;
}",0.9914069513915608
187582,"public NBTTagCompound getInfo(){
  return NBTextendetInfo;
}","public NBTTagCompound getInfo(){
  if (NBTextendetInfo == null) {
    NBTextendetInfo=new NBTTagCompound(""String_Node_Str"");
  }
  return NBTextendetInfo;
}",0.5555555555555556
187583,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 1 && MyPetPermissions.has(player,""String_Node_Str"") && MyPetList.hasMyPet(args[0])) {
      MyPet myPet=MyPetList.getMyPet(args[0]);
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).activate(player);
      }
    }
 else     if (MyPetList.hasMyPet(player)) {
      MyPet myPet=MyPetList.getMyPet(player);
      if (myPet.status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.status == PetState.Dead) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
        return true;
      }
      if (args.length >= 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).stop(true);
        return true;
      }
      if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"")) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        myPet.getSkills().getSkill(""String_Node_Str"").activate();
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 1 && MyPetPermissions.has(player,""String_Node_Str"") && MyPetList.hasMyPet(args[0])) {
      MyPet myPet=MyPetList.getMyPet(args[0]);
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).activate(player);
      }
    }
 else     if (MyPetList.hasMyPet(player)) {
      MyPet myPet=MyPetList.getMyPet(player);
      if (!MyPetPermissions.hasExtended(player,""String_Node_Str"")) {
        myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (myPet.status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.status == PetState.Dead) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
        return true;
      }
      if (args.length >= 1 && args[0].equalsIgnoreCase(""String_Node_Str"")) {
        ((Beacon)myPet.getSkills().getSkill(""String_Node_Str"")).stop(true);
        return true;
      }
      if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"")) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
      if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        myPet.getSkills().getSkill(""String_Node_Str"").activate();
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.9470572426766998
187584,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
        if (args.length == 1) {
          if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Friendly.isActive()) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Friendly);
          }
 else           if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Aggressive.isActive()) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Aggressive);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Farm.isActive()) {
            behaviorSkill.activateBehavior(BehaviorState.Farm);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Raid.isActive()) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Raid);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Normal);
          }
 else {
            behaviorSkill.activate();
            return false;
          }
        }
 else {
          behaviorSkill.activate();
        }
      }
      return true;
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player petOwner=(Player)sender;
    if (MyPetList.hasMyPet(petOwner)) {
      MyPet myPet=MyPetList.getMyPet(petOwner);
      if (myPet.status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
        return true;
      }
 else       if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
        Behavior behaviorSkill=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
        if (args.length == 1) {
          if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Friendly.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Friendly);
          }
 else           if ((args[0].equalsIgnoreCase(""String_Node_Str"") || args[0].equalsIgnoreCase(""String_Node_Str"")) && BehaviorState.Aggressive.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Aggressive);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Farm.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(BehaviorState.Farm);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"") && BehaviorState.Raid.isActive()) {
            if (!MyPetPermissions.hasExtended(petOwner,""String_Node_Str"")) {
              myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
              return true;
            }
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Raid);
          }
 else           if (args[0].equalsIgnoreCase(""String_Node_Str"")) {
            behaviorSkill.activateBehavior(Behavior.BehaviorState.Normal);
          }
 else {
            behaviorSkill.activate();
            return false;
          }
        }
 else {
          behaviorSkill.activate();
        }
      }
      return true;
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.8137009189640768
187585,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    return false;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (MyPetConfig.automaticSkilltreeAssignment && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
 else     if (myPet.getSkillTree() != null && MyPetConfig.chooseSkilltreeOnce && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length == 1) {
        if (skillTreeMobType.hasSkillTree(args[0])) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[0]);
          if (MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"" + skillTree.getName())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",skillTree.getName())));
            }
 else {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
            }
          }
 else {
            sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
          }
        }
 else {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
        for (        String skillTreeName : skillTreeMobType.getSkillTreeNames()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTreeName)) {
            sender.sendMessage(""String_Node_Str"" + skillTreeName);
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    return false;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (MyPetConfig.automaticSkilltreeAssignment && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
 else     if (myPet.getSkillTree() != null && MyPetConfig.chooseSkilltreeOnce && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      if (!MyPetPermissions.hasExtended(player,""String_Node_Str"")) {
        myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length == 1) {
        if (skillTreeMobType.hasSkillTree(args[0])) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[0]);
          if (MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"" + skillTree.getName())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",skillTree.getName())));
            }
 else {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
            }
          }
 else {
            sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
          }
        }
 else {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
        for (        String skillTreeName : skillTreeMobType.getSkillTreeNames()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTreeName)) {
            sender.sendMessage(""String_Node_Str"" + skillTreeName);
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
  }
  return true;
}",0.9599674862832758
187586,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 0) {
      if (MyPetList.hasMyPet(player)) {
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.status == PetState.Despawned) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
          return true;
        }
        if (myPet.status == PetState.Dead) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
          return true;
        }
        if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"")) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
          return true;
        }
        if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
          myPet.getSkills().getSkill(""String_Node_Str"").activate();
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
      }
    }
 else     if (args.length == 1 && MyPetPermissions.has(player,""String_Node_Str"")) {
      if (MyPetList.hasMyPet(args[0])) {
        MyPet myPet=MyPetList.getMyPet(args[0]);
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          ((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).OpenInventory(player);
        }
      }
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (args.length == 0) {
      if (MyPetList.hasMyPet(player)) {
        MyPet myPet=MyPetList.getMyPet(player);
        if (myPet.status == PetState.Despawned) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
          return true;
        }
        if (myPet.status == PetState.Dead) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime));
          return true;
        }
        if (player.getGameMode() == GameMode.CREATIVE && !MyPetPermissions.has(player,""String_Node_Str"")) {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName));
          return true;
        }
        if (!MyPetPermissions.hasExtended(player,""String_Node_Str"")) {
          myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
          return true;
        }
        if (myPet.getSkills().hasSkill(""String_Node_Str"")) {
          myPet.getSkills().getSkill(""String_Node_Str"").activate();
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
      }
    }
 else     if (args.length == 1 && MyPetPermissions.has(player,""String_Node_Str"")) {
      if (MyPetList.hasMyPet(args[0])) {
        MyPet myPet=MyPetList.getMyPet(args[0]);
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          ((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).OpenInventory(player);
        }
      }
    }
  }
  return true;
}",0.9427534208321696
187587,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  if (isMyPet() && entityhuman.name.equalsIgnoreCase(myPet.getOwner().getName())) {
    if (this.hasRider()) {
      this.getOwner().mount(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.item.getId() && canMove()) {
        this.getOwner().mount(this);
        return true;
      }
    }
 else     if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.item.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    int addHunger=6;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < 6) {
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  if (isMyPet() && entityhuman.name.equalsIgnoreCase(myPet.getOwner().getName())) {
    if (this.hasRider()) {
      this.getOwner().mount(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.item.getId() && canMove()) {
        if (MyPetPermissions.hasExtended((Player)this.getOwner().getBukkitEntity(),""String_Node_Str"")) {
          this.getOwner().mount(this);
          return true;
        }
 else {
          getMyPet().sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        }
      }
    }
 else     if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.item.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    if (!MyPetPermissions.hasExtended((Player)this.getOwner().getBukkitEntity(),""String_Node_Str"")) {
      return true;
    }
    int addHunger=6;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < 6) {
      return true;
    }
  }
  return false;
}",0.8649045521292217
187588,"@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if ((event.getAction().equals(Action.RIGHT_CLICK_AIR) || event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) && event.getPlayer().getItemInHand().getType() == Control.item && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.status == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior behavior=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + behavior.getBehavior().name())));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            return;
          }
        }
        Block block=event.getPlayer().getTargetBlock(null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          ((Control)myPet.getSkills().getSkill(""String_Node_Str"")).setMoveTo(block.getLocation());
        }
      }
    }
  }
}","@EventHandler public void onPlayerInteract(final PlayerInteractEvent event){
  if ((event.getAction().equals(Action.RIGHT_CLICK_AIR) || event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) && event.getPlayer().getItemInHand().getType() == Control.item && MyPetList.hasMyPet(event.getPlayer())) {
    MyPet myPet=MyPetList.getMyPet(event.getPlayer());
    if (myPet.status == PetState.Here && myPet.getCraftPet().canMove()) {
      if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          Behavior behavior=(Behavior)myPet.getSkills().getSkill(""String_Node_Str"");
          if (behavior.getBehavior() == BehaviorState.Aggressive || behavior.getBehavior() == BehaviorState.Farm) {
            event.getPlayer().sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + behavior.getBehavior().name())));
            return;
          }
        }
        if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
          if (myPet.getCraftPet().getHandle().hasRider()) {
            return;
          }
        }
        if (!MyPetPermissions.hasExtended(event.getPlayer(),""String_Node_Str"")) {
          myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
          return;
        }
        Block block=event.getPlayer().getTargetBlock(null,100);
        if (block != null && block.getType() != Material.AIR) {
          for (          int i : ControllIgnoreBlocks) {
            if (block.getTypeId() == i) {
              block=block.getRelative(BlockFace.DOWN);
              break;
            }
          }
          ((Control)myPet.getSkills().getSkill(""String_Node_Str"")).setMoveTo(block.getLocation());
        }
      }
    }
  }
}",0.939834616481323
187589,"public static void loadConfiguration(){
  leashItem=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Control.item=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Ride.item=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Beacon.hungerDecreaseTime=config.getInt(""String_Node_Str"",100);
  HPregeneration.healtregenTime=config.getInt(""String_Node_Str"",60);
  Inventory.creative=config.getBoolean(""String_Node_Str"",true);
  Behavior.BehaviorState.Aggressive.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Farm.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Friendly.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Raid.setActive(config.getBoolean(""String_Node_Str"",true));
  skilltreeSwitchPenaltyFixed=config.getDouble(""String_Node_Str"",0.0);
  skilltreeSwitchPenaltyPercent=config.getInt(""String_Node_Str"",5);
  skilltreeSwitchPenaltyAdmin=config.getBoolean(""String_Node_Str"",false);
  inheritAlreadyInheritedSkills=config.getBoolean(""String_Node_Str"",false);
  passivePercentPerMonster=config.getInt(""String_Node_Str"",25);
  respawnTimeFactor=config.getInt(""String_Node_Str"",5);
  respawnTimeFixed=config.getInt(""String_Node_Str"",0);
  automaticSkilltreeAssignment=config.getBoolean(""String_Node_Str"",true);
  chooseSkilltreeOnce=config.getBoolean(""String_Node_Str"",true);
  levelSystem=config.getBoolean(""String_Node_Str"",true);
  ownerCanAttackPet=config.getBoolean(""String_Node_Str"",false);
  hungerSystem=config.getBoolean(""String_Node_Str"",true);
  hungerSystemTime=config.getInt(""String_Node_Str"",60);
  superperms=config.getBoolean(""String_Node_Str"",false);
  sendMetrics=config.getBoolean(""String_Node_Str"",true);
  checkForUpdates=config.getBoolean(""String_Node_Str"",false);
  debugLogger=config.getBoolean(""String_Node_Str"",false);
  MyPetPvP.useTowny=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useFactions=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useWorldGuard=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useCitizens=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useHeroes=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useMcMMO=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useMobArena=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useRegios=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useResidence=config.getBoolean(""String_Node_Str"",true);
  MyPetExperience.lossPercent=config.getInt(""String_Node_Str"");
  MyPetExperience.lossFixed=config.getDouble(""String_Node_Str"");
  for (  MyPetType petType : MyPetType.values()) {
    MyPet.setStartHP(petType.getMyPetClass(),config.getInt(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",20));
    MyPet.setStartDamage(petType.getMyPetClass(),config.getInt(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",2));
    MyPet.setStartSpeed(petType.getMyPetClass(),(float)config.getDouble(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",0.3F));
  }
  seperateFood(MyBat.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyBlaze.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCaveSpider.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyChicken.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCow.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCreeper.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyEnderman.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyGiant.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyIronGolem.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyMagmaCube.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyMooshroom.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyOcelot.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyPig.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyPigZombie.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySheep.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySilverfish.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySkeleton.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySlime.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySnowman.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySpider.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyVillager.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyWitch.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyWolf.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyZombie.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateLeashFlags(MyBat.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyBlaze.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyCaveSpider.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyChicken.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyCow.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyCreeper.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyEnderman.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyGiant.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyIronGolem.class,config.getString(""String_Node_Str"",LeashFlag.UserCreated.name()));
  seperateLeashFlags(MyMagmaCube.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyMooshroom.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyOcelot.class,config.getString(""String_Node_Str"",LeashFlag.Tamed.name()));
  seperateLeashFlags(MyPig.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyPigZombie.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySheep.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MySilverfish.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySkeleton.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySlime.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySnowman.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySpider.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyVillager.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyWitch.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyWolf.class,config.getString(""String_Node_Str"",LeashFlag.Tamed.name()));
  seperateLeashFlags(MyZombie.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name() + ""String_Node_Str"" + LeashFlag.Adult.name()));
  if (config.getStringList(""String_Node_Str"") != null) {
    double min;
    double max;
    for (    EntityType entityType : MyPetExperience.mobExp.keySet()) {
      min=0;
      max=0;
      if (config.contains(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"")) {
        max=config.getDouble(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",0.);
      }
      if (config.contains(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"")) {
        min=config.getDouble(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",0.);
      }
      if (min == max) {
        MyPetExperience.mobExp.get(entityType).setExp(max);
      }
 else {
        MyPetExperience.mobExp.get(entityType).setMin(min);
        MyPetExperience.mobExp.get(entityType).setMax(max);
      }
    }
  }
}","public static void loadConfiguration(){
  leashItem=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Control.item=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Ride.item=MyPetUtil.checkMaterial(config.getInt(""String_Node_Str"",287),Material.STRING);
  Beacon.hungerDecreaseTime=config.getInt(""String_Node_Str"",100);
  HPregeneration.healtregenTime=config.getInt(""String_Node_Str"",60);
  Inventory.creative=config.getBoolean(""String_Node_Str"",true);
  Behavior.BehaviorState.Aggressive.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Farm.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Friendly.setActive(config.getBoolean(""String_Node_Str"",true));
  Behavior.BehaviorState.Raid.setActive(config.getBoolean(""String_Node_Str"",true));
  skilltreeSwitchPenaltyFixed=config.getDouble(""String_Node_Str"",0.0);
  skilltreeSwitchPenaltyPercent=config.getInt(""String_Node_Str"",5);
  skilltreeSwitchPenaltyAdmin=config.getBoolean(""String_Node_Str"",false);
  inheritAlreadyInheritedSkills=config.getBoolean(""String_Node_Str"",false);
  passivePercentPerMonster=config.getInt(""String_Node_Str"",25);
  respawnTimeFactor=config.getInt(""String_Node_Str"",5);
  respawnTimeFixed=config.getInt(""String_Node_Str"",0);
  automaticSkilltreeAssignment=config.getBoolean(""String_Node_Str"",true);
  chooseSkilltreeOnce=config.getBoolean(""String_Node_Str"",true);
  levelSystem=config.getBoolean(""String_Node_Str"",true);
  ownerCanAttackPet=config.getBoolean(""String_Node_Str"",false);
  hungerSystem=config.getBoolean(""String_Node_Str"",true);
  hungerSystemTime=config.getInt(""String_Node_Str"",60);
  superperms=config.getBoolean(""String_Node_Str"",false);
  MyPetPermissions.useExtendedPermissions=config.getBoolean(""String_Node_Str"",false);
  sendMetrics=config.getBoolean(""String_Node_Str"",true);
  checkForUpdates=config.getBoolean(""String_Node_Str"",false);
  debugLogger=config.getBoolean(""String_Node_Str"",false);
  MyPetPvP.useTowny=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useFactions=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useWorldGuard=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useCitizens=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useHeroes=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useMcMMO=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useMobArena=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useRegios=config.getBoolean(""String_Node_Str"",true);
  MyPetPvP.useResidence=config.getBoolean(""String_Node_Str"",true);
  MyPetExperience.lossPercent=config.getInt(""String_Node_Str"");
  MyPetExperience.lossFixed=config.getDouble(""String_Node_Str"");
  for (  MyPetType petType : MyPetType.values()) {
    MyPet.setStartHP(petType.getMyPetClass(),config.getInt(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",20));
    MyPet.setStartDamage(petType.getMyPetClass(),config.getInt(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",2));
    MyPet.setStartSpeed(petType.getMyPetClass(),(float)config.getDouble(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",0.3F));
  }
  seperateFood(MyBat.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyBlaze.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCaveSpider.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyChicken.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCow.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyCreeper.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyEnderman.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyGiant.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyIronGolem.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyMagmaCube.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyMooshroom.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyOcelot.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyPig.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyPigZombie.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySheep.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySilverfish.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySkeleton.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySlime.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySnowman.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MySpider.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyVillager.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyWitch.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyWolf.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateFood(MyZombie.class,config.getString(""String_Node_Str"",""String_Node_Str""));
  seperateLeashFlags(MyBat.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyBlaze.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyCaveSpider.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyChicken.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyCow.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyCreeper.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyEnderman.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyGiant.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyIronGolem.class,config.getString(""String_Node_Str"",LeashFlag.UserCreated.name()));
  seperateLeashFlags(MyMagmaCube.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyMooshroom.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyOcelot.class,config.getString(""String_Node_Str"",LeashFlag.Tamed.name()));
  seperateLeashFlags(MyPig.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyPigZombie.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySheep.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MySilverfish.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySkeleton.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySlime.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySnowman.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MySpider.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyVillager.class,config.getString(""String_Node_Str"",LeashFlag.Baby.name()));
  seperateLeashFlags(MyWitch.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name()));
  seperateLeashFlags(MyWolf.class,config.getString(""String_Node_Str"",LeashFlag.Tamed.name()));
  seperateLeashFlags(MyZombie.class,config.getString(""String_Node_Str"",LeashFlag.LowHp.name() + ""String_Node_Str"" + LeashFlag.Adult.name()));
  if (config.getStringList(""String_Node_Str"") != null) {
    double min;
    double max;
    for (    EntityType entityType : MyPetExperience.mobExp.keySet()) {
      min=0;
      max=0;
      if (config.contains(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"")) {
        max=config.getDouble(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",0.);
      }
      if (config.contains(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"")) {
        min=config.getDouble(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",0.);
      }
      if (min == max) {
        MyPetExperience.mobExp.get(entityType).setExp(max);
      }
 else {
        MyPetExperience.mobExp.get(entityType).setMin(min);
        MyPetExperience.mobExp.get(entityType).setMax(max);
      }
    }
  }
}",0.9948949305473108
187590,"public static void setDefault(){
  setProperty(""String_Node_Str"",5);
  setProperty(""String_Node_Str"",0);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",0.0);
  setProperty(""String_Node_Str"",5);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",25);
  setProperty(""String_Node_Str"",0);
  setProperty(""String_Node_Str"",0.0);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",100);
  for (  MyPetType petType : MyPetType.values()) {
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",2);
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",20);
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",0.3F);
  }
  setProperty(""String_Node_Str"",Material.SPIDER_EYE.getId());
  setProperty(""String_Node_Str"",Material.SULPHUR.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.SEEDS.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.SULPHUR.getId());
  setProperty(""String_Node_Str"",Material.SOUL_SAND.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.IRON_INGOT.getId());
  setProperty(""String_Node_Str"",Material.REDSTONE.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.RAW_FISH.getId());
  setProperty(""String_Node_Str"",Material.CARROT_ITEM.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.SUGAR.getId());
  setProperty(""String_Node_Str"",Material.BONE.getId());
  setProperty(""String_Node_Str"",Material.SUGAR.getId());
  setProperty(""String_Node_Str"",Material.CARROT.getId() + ""String_Node_Str"" + Material.SNOW_BALL.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.APPLE.getId());
  setProperty(""String_Node_Str"",Material.RAW_BEEF.getId() + ""String_Node_Str"" + Material.RAW_CHICKEN.getId());
  setProperty(""String_Node_Str"",Material.APPLE.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.UserCreated.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.Tamed.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Tamed.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name() + ""String_Node_Str"" + LeashFlag.Adult.name());
  for (  EntityType entityType : MyPetExperience.mobExp.keySet()) {
    setProperty(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",MyPetExperience.mobExp.get(entityType).getMin());
    setProperty(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",MyPetExperience.mobExp.get(entityType).getMax());
  }
  MyPetPlugin.getPlugin().saveConfig();
}","public static void setDefault(){
  setProperty(""String_Node_Str"",5);
  setProperty(""String_Node_Str"",0);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",0.0);
  setProperty(""String_Node_Str"",5);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",25);
  setProperty(""String_Node_Str"",0);
  setProperty(""String_Node_Str"",0.0);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",60);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",true);
  setProperty(""String_Node_Str"",100);
  for (  MyPetType petType : MyPetType.values()) {
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",2);
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",20);
    setProperty(""String_Node_Str"" + petType.getTypeName() + ""String_Node_Str"",0.3F);
  }
  setProperty(""String_Node_Str"",Material.SPIDER_EYE.getId());
  setProperty(""String_Node_Str"",Material.SULPHUR.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.SEEDS.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.SULPHUR.getId());
  setProperty(""String_Node_Str"",Material.SOUL_SAND.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.IRON_INGOT.getId());
  setProperty(""String_Node_Str"",Material.REDSTONE.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.RAW_FISH.getId());
  setProperty(""String_Node_Str"",Material.CARROT_ITEM.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.WHEAT.getId());
  setProperty(""String_Node_Str"",Material.SUGAR.getId());
  setProperty(""String_Node_Str"",Material.BONE.getId());
  setProperty(""String_Node_Str"",Material.SUGAR.getId());
  setProperty(""String_Node_Str"",Material.CARROT.getId() + ""String_Node_Str"" + Material.SNOW_BALL.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",Material.APPLE.getId());
  setProperty(""String_Node_Str"",Material.RAW_BEEF.getId() + ""String_Node_Str"" + Material.RAW_CHICKEN.getId());
  setProperty(""String_Node_Str"",Material.APPLE.getId());
  setProperty(""String_Node_Str"",Material.ROTTEN_FLESH.getId());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.UserCreated.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.Tamed.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Baby.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name());
  setProperty(""String_Node_Str"",LeashFlag.Tamed.name());
  setProperty(""String_Node_Str"",LeashFlag.LowHp.name() + ""String_Node_Str"" + LeashFlag.Adult.name());
  for (  EntityType entityType : MyPetExperience.mobExp.keySet()) {
    setProperty(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",MyPetExperience.mobExp.get(entityType).getMin());
    setProperty(""String_Node_Str"" + entityType.getName() + ""String_Node_Str"",MyPetExperience.mobExp.get(entityType).getMax());
  }
  MyPetPlugin.getPlugin().saveConfig();
}",0.996133771505896
187591,"public void load(){
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  yamlConfiguration.saveConfig();
}","public void load(){
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  yamlConfiguration.saveConfig();
}",0.99622096254307
187592,"public int getMaxHealth(){
  if (isMyPet()) {
    return myPet.getMaxHealth();
  }
 else {
    return MyPet.getStartHP(MyPetType.getMyPetTypeByEntityClass(this.getClass()).getMyPetClass());
  }
}","@Override public int getMaxHealth(){
  return this.maxHealth;
}",0.3720930232558139
187593,"/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  if (isMyPet() && entityhuman.name.equalsIgnoreCase(myPet.getOwner().getName())) {
    if (this.hasRider()) {
      this.getOwner().mount(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.item.getId() && canMove()) {
        this.getOwner().mount(this);
        return true;
      }
    }
 else     if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.item.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    int addHunger=6;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.health+=Math.min(3,getMaxHealth() - getHealth());
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < 6) {
      return true;
    }
  }
  return false;
}","/** 
 * Is called when player rightclicks this MyPet return: true: there was a reaction on rightclick false: no reaction on rightclick
 */
public boolean a(EntityHuman entityhuman){
  if (super.a(entityhuman)) {
    return true;
  }
  ItemStack itemStack=entityhuman.inventory.getItemInHand();
  if (itemStack == null) {
    return false;
  }
  if (isMyPet() && entityhuman.name.equalsIgnoreCase(myPet.getOwner().getName())) {
    if (this.hasRider()) {
      this.getOwner().mount(null);
      return true;
    }
    if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Ride.item.getId() && canMove()) {
        this.getOwner().mount(this);
        return true;
      }
    }
 else     if (myPet.getSkills().isSkillActive(""String_Node_Str"")) {
      if (itemStack.id == Control.item.getId()) {
        return true;
      }
    }
  }
  if (canEat(itemStack)) {
    int addHunger=6;
    if (getHealth() < getMaxHealth()) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      addHunger-=Math.min(3,getMaxHealth() - getHealth()) * 2;
      this.heal(Math.min(3,getMaxHealth() - getHealth()),RegainReason.EATING);
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
 else     if (myPet.getHungerValue() < 100) {
      if (!entityhuman.abilities.canInstantlyBuild) {
        --itemStack.count;
      }
      if (itemStack.count <= 0) {
        entityhuman.inventory.setItem(entityhuman.inventory.itemInHandIndex,null);
      }
      this.tamedEffect(true);
    }
    if (addHunger > 0 && myPet.getHungerValue() < 100) {
      myPet.setHungerValue(myPet.getHungerValue() + addHunger);
      addHunger=0;
    }
    if (addHunger < 6) {
      return true;
    }
  }
  return false;
}",0.9847328244274808
187594,"public void setMyPet(MyPet myPet){
  if (myPet != null) {
    this.myPet=myPet;
    isMyPet=true;
    this.setHealth(myPet.getHealth());
  }
}","public void setMyPet(MyPet myPet){
  if (myPet != null) {
    this.myPet=myPet;
    isMyPet=true;
    ((LivingEntity)this.getBukkitEntity()).setMaxHealth(myPet.getMaxHealth());
    this.setHealth(myPet.getHealth());
  }
}",0.7823691460055097
187595,"@Override public void upgrade(MyPetSkillTreeSkill upgrade,boolean quiet){
  if (upgrade instanceof HP) {
    if (upgrade.getProperties().hasKey(""String_Node_Str"")) {
      hpIncrease+=upgrade.getProperties().getInt(""String_Node_Str"");
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + (MyPet.getStartHP(myPet.getClass()) + hpIncrease)));
      }
    }
  }
}","@Override public void upgrade(MyPetSkillTreeSkill upgrade,boolean quiet){
  if (upgrade instanceof HP) {
    if (upgrade.getProperties().hasKey(""String_Node_Str"")) {
      hpIncrease+=upgrade.getProperties().getInt(""String_Node_Str"");
      if (getMyPet().status == PetState.Here) {
        getMyPet().getCraftPet().setMaxHealth(getMyPet().getMaxHealth());
      }
      if (!quiet) {
        myPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + (MyPet.getStartHP(myPet.getClass()) + hpIncrease)));
      }
    }
  }
}",0.8871527777777778
187596,"public void schedule(){
  if (increaseHpBy > 0 && myPet.status == PetState.Here) {
    if (timeCounter-- <= 0) {
      timeCounter=healtregenTime - timeDecrease;
    }
  }
}","public void schedule(){
  if (increaseHpBy > 0 && myPet.status == PetState.Here) {
    if (timeCounter-- <= 0) {
      myPet.getCraftPet().getHandle().heal(increaseHpBy,EntityRegainHealthEvent.RegainReason.REGEN);
      timeCounter=healtregenTime - timeDecrease;
    }
  }
}",0.756152125279642
187597,"public int getHungerValue(){
  return hunger;
}","public int getHungerValue(){
  if (MyPetConfig.hungerSystem) {
    return hunger;
  }
 else {
    return 100;
  }
}",0.5802469135802469
187598,"public void scheduleTask(){
  if (status != PetState.Despawned && getOwner().isOnline()) {
    if (skills.getSkills().size() > 0) {
      for (      MyPetGenericSkill skill : skills.getSkills()) {
        skill.schedule();
      }
    }
    if (status == PetState.Dead) {
      respawnTime--;
      if (respawnTime <= 0) {
        respawnPet();
      }
    }
    if (MyPetConfig.hungerSystem && hunger > 1 && hungerTime-- <= 0) {
      hunger--;
      hungerTime=MyPetConfig.hungerSystemTime;
    }
  }
}","public void scheduleTask(){
  if (status != PetState.Despawned && getOwner().isOnline()) {
    if (skills.getSkills().size() > 0) {
      for (      MyPetGenericSkill skill : skills.getSkills()) {
        skill.schedule();
      }
    }
    if (status == PetState.Dead) {
      respawnTime--;
      if (respawnTime <= 0) {
        respawnPet();
      }
    }
    if (MyPetConfig.hungerSystem && hunger > 1 && --hungerTime <= 0) {
      hunger--;
      hungerTime=MyPetConfig.hungerSystemTime;
    }
  }
}",0.98015873015873
187599,"public static void loadSkillTrees(){
  YamlConfiguration MWConfig;
  MyPetUtil.getDebugLogger().info(""String_Node_Str"" + configPath);
  File skillFile;
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  MyPetSkillTreeMobType skillTreeMobType=new MyPetSkillTreeMobType(""String_Node_Str"");
  skillTreeMobTypes.put(""String_Node_Str"",skillTreeMobType);
  if (skillFile.exists()) {
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  for (  MyPetType mobType : MyPetType.values()) {
    skillFile=new File(configPath + File.separator + mobType.getTypeName()+ ""String_Node_Str"");
    skillTreeMobType=new MyPetSkillTreeMobType(mobType.getTypeName().toLowerCase());
    skillTreeMobTypes.put(mobType.getTypeName().toLowerCase(),skillTreeMobType);
    if (!skillFile.exists()) {
      if (!skillTreeMobType.getMobTypeName().equals(""String_Node_Str"")) {
        addDefault(skillTreeMobType);
      }
      manageInheritance(skillTreeMobType);
      continue;
    }
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"" + mobType.getTypeName().toLowerCase() + ""String_Node_Str"");
  }
}","public static void loadSkillTrees(){
  YamlConfiguration MWConfig;
  MyPetUtil.getDebugLogger().info(""String_Node_Str"" + configPath);
  File skillFile;
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  MyPetSkillTreeMobType skillTreeMobType=new MyPetSkillTreeMobType(""String_Node_Str"");
  skillTreeMobTypes.put(""String_Node_Str"",skillTreeMobType);
  if (skillFile.exists()) {
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  for (  MyPetType mobType : MyPetType.values()) {
    skillFile=new File(configPath + File.separator + mobType.getTypeName().toLowerCase()+ ""String_Node_Str"");
    skillTreeMobType=new MyPetSkillTreeMobType(mobType.getTypeName());
    skillTreeMobTypes.put(mobType.getTypeName().toLowerCase(),skillTreeMobType);
    if (!skillFile.exists()) {
      if (!skillTreeMobType.getMobTypeName().equals(""String_Node_Str"")) {
        addDefault(skillTreeMobType);
      }
      manageInheritance(skillTreeMobType);
      continue;
    }
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"" + mobType.getTypeName().toLowerCase() + ""String_Node_Str"");
  }
}",0.9891724671307038
187600,"public void onEnable(){
  plugin=this;
  MyPetLogger.setConsole(getServer().getConsoleSender());
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  String minecraftVersion=((CraftServer)getServer()).getHandle().getServer().getVersion();
  if (!CompatibleMinecraftVersion.equalsIgnoreCase(minecraftVersion)) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + CompatibleMinecraftVersion);
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"" + CompatibleMinecraftVersion);
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    this.setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + MyPetVersion + ""String_Node_Str""+ MyPetBuild);
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  UpdateCheck updateCheck=new UpdateCheck();
  if (MyPetConfig.checkForUpdates) {
    if (updateCheck.isUpdateAvailable(CompatibleMinecraftVersion,MyPetVersion)) {
      MyPetLogger.write(ChatColor.MAGIC + ""String_Node_Str"" + updateCheck.getLastAvailableUpdate().getTitle());
      MyPetUtil.getDebugLogger().info(""String_Node_Str"" + updateCheck.getLastAvailableUpdate().getTitle());
    }
 else {
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
 else {
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  if (!MyPetConfig.automaticSkilltreeAssignment) {
    getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  }
  MyPetSkills.registerSkill(Inventory.class);
  MyPetSkills.registerSkill(HPregeneration.class);
  MyPetSkills.registerSkill(Pickup.class);
  MyPetSkills.registerSkill(Behavior.class);
  MyPetSkills.registerSkill(Damage.class);
  MyPetSkills.registerSkill(Control.class);
  MyPetSkills.registerSkill(HP.class);
  MyPetSkills.registerSkill(Poison.class);
  MyPetSkills.registerSkill(Ride.class);
  MyPetSkills.registerSkill(Thorns.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMyBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntitySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.RED+ ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str"");
    debugLogger.info(""String_Node_Str"" + MyPet.getStartDamage(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getStartHP(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getFood(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getLeashFlags(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getStartSpeed(myPetType.getMyPetClass()));
  }
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetLogger.write(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetLogger.write(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetLogger.write(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  HeroesDamageFix.reset();
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.GREEN+ ""String_Node_Str"");
  for (  Player player : getServer().getOnlinePlayers()) {
    if (MyPetList.hasInactiveMyPets(player)) {
      for (      InactiveMyPet inactiveMyPet : MyPetList.getInactiveMyPets(player)) {
        if (MyPetPermissions.has(player,""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName())) {
          MyPetList.setMyPetActive(inactiveMyPet);
          MyPet myPet=MyPetList.getMyPet(player);
          if (myPet.status == PetState.Dead) {
            player.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
          }
 else           if (MyPetUtil.getDistance2D(myPet.getLocation(),player.getLocation()) < 75) {
            myPet.createPet();
          }
 else {
            myPet.status=PetState.Despawned;
          }
          break;
        }
      }
    }
  }
  this.isReady=true;
  debugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  MyPetLogger.setConsole(getServer().getConsoleSender());
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator).mkdirs();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  String minecraftVersion=((CraftServer)getServer()).getHandle().getServer().getVersion();
  if (!CompatibleMinecraftVersion.equalsIgnoreCase(minecraftVersion)) {
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + CompatibleMinecraftVersion);
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetLogger.write(ChatColor.RED + ""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"" + CompatibleMinecraftVersion);
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    MyPetUtil.getDebugLogger().warning(""String_Node_Str"");
    this.setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + MyPetVersion + ""String_Node_Str""+ MyPetBuild);
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  UpdateCheck updateCheck=new UpdateCheck();
  if (MyPetConfig.checkForUpdates) {
    if (updateCheck.isUpdateAvailable(CompatibleMinecraftVersion,MyPetVersion)) {
      MyPetLogger.write(ChatColor.MAGIC + ""String_Node_Str"" + updateCheck.getLastAvailableUpdate().getTitle());
      MyPetUtil.getDebugLogger().info(""String_Node_Str"" + updateCheck.getLastAvailableUpdate().getTitle());
    }
 else {
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
 else {
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  getCommand(""String_Node_Str"").setExecutor(new CommandChooseSkilltree());
  MyPetSkills.registerSkill(Inventory.class);
  MyPetSkills.registerSkill(HPregeneration.class);
  MyPetSkills.registerSkill(Pickup.class);
  MyPetSkills.registerSkill(Behavior.class);
  MyPetSkills.registerSkill(Damage.class);
  MyPetSkills.registerSkill(Control.class);
  MyPetSkills.registerSkill(HP.class);
  MyPetSkills.registerSkill(Poison.class);
  MyPetSkills.registerSkill(Ride.class);
  MyPetSkills.registerSkill(Thorns.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetLogger.write(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetLogger.write(ChatColor.RED + ""String_Node_Str"" + ChatColor.RESET+ ""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityCreeper.class,""String_Node_Str"",50);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityEnderman.class,""String_Node_Str"",58);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMagmaCube.class,""String_Node_Str"",62);
    a.invoke(a,EntityMyBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityBat.class,""String_Node_Str"",65);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntitySnowman.class,""String_Node_Str"",97);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.RED+ ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str"");
    debugLogger.info(""String_Node_Str"" + MyPet.getStartDamage(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getStartHP(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getFood(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getLeashFlags(myPetType.getMyPetClass()));
    debugLogger.info(""String_Node_Str"" + MyPet.getStartSpeed(myPetType.getMyPetClass()));
  }
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetLogger.write(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetLogger.write(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetLogger.write(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  HeroesDamageFix.reset();
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetLogger.write(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ChatColor.GREEN+ ""String_Node_Str"");
  for (  Player player : getServer().getOnlinePlayers()) {
    if (MyPetList.hasInactiveMyPets(player)) {
      for (      InactiveMyPet inactiveMyPet : MyPetList.getInactiveMyPets(player)) {
        if (MyPetPermissions.has(player,""String_Node_Str"" + inactiveMyPet.getPetType().getTypeName())) {
          MyPetList.setMyPetActive(inactiveMyPet);
          MyPet myPet=MyPetList.getMyPet(player);
          if (myPet.status == PetState.Dead) {
            player.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
          }
 else           if (MyPetUtil.getDistance2D(myPet.getLocation(),player.getLocation()) < 75) {
            myPet.createPet();
          }
 else {
            myPet.status=PetState.Despawned;
          }
          break;
        }
      }
    }
  }
  this.isReady=true;
  debugLogger.info(""String_Node_Str"");
}",0.9976703314668738
187601,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    return false;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (myPet.getSkillTree() != null && MyPetConfig.chooseSkilltreeOnce && !MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"")) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length == 1) {
        if (skillTreeMobType.hasSkillTree(args[0])) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[0]);
          if (MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"" + skillTree.getName())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",skillTree.getName())));
            }
 else {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
            }
          }
 else {
            sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
          }
        }
 else {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
        for (        String skillTreeName : skillTreeMobType.getSkillTreeNames()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTreeName)) {
            sender.sendMessage(""String_Node_Str"" + skillTreeName);
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (!(sender instanceof Player)) {
    return false;
  }
  Player player=(Player)sender;
  if (MyPetList.hasMyPet(player)) {
    MyPet myPet=MyPetList.getMyPet(player);
    if (MyPetConfig.automaticSkilltreeAssignment && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
 else     if (myPet.getSkillTree() != null && MyPetConfig.chooseSkilltreeOnce && !myPet.getOwner().isMyPetAdmin()) {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
    }
 else     if (MyPetSkillTreeMobType.hasMobType(myPet.getPetType().getTypeName())) {
      MyPetSkillTreeMobType skillTreeMobType=MyPetSkillTreeMobType.getMobTypeByName(myPet.getPetType().getTypeName());
      if (args.length == 1) {
        if (skillTreeMobType.hasSkillTree(args[0])) {
          MyPetSkillTree skillTree=skillTreeMobType.getSkillTree(args[0]);
          if (MyPetPermissions.has(myPet.getOwner().getPlayer(),""String_Node_Str"" + skillTree.getName())) {
            if (myPet.setSkilltree(skillTree)) {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",skillTree.getName())));
            }
 else {
              sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
            }
          }
 else {
            sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
          }
        }
 else {
          sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",args[0])));
        }
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName)));
        for (        String skillTreeName : skillTreeMobType.getSkillTreeNames()) {
          if (MyPetPermissions.has(player,""String_Node_Str"" + skillTreeName)) {
            sender.sendMessage(""String_Node_Str"" + skillTreeName);
          }
        }
      }
    }
  }
 else {
    sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
  }
  return true;
}",0.9444201312910284
187602,"public void load(){
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  yamlConfiguration.saveConfig();
}","public void load(){
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  addString(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  yamlConfiguration.saveConfig();
}",0.9906206896551724
187603,"public int getSize(){
  return this.datawatcher.getByte(16);
}","public int getSize(){
  int size=this.datawatcher.getByte(16);
  return size <= 0 ? 1 : size;
}",0.7133757961783439
187604,"public void setSize(int value){
  this.datawatcher.watch(16,(byte)value);
  Float[] entitySize=MyPet.getEntitySize(MyMagmaCube.class);
  this.a(entitySize[0] * value,entitySize[1] * value);
  ((MyMagmaCube)myPet).size=value;
}","public void setSize(int value){
  this.datawatcher.watch(16,new Byte((byte)value));
  Float[] entitySize=MyPet.getEntitySize(MyMagmaCube.class);
  this.a(entitySize[0] * value,entitySize[1] * value);
  ((MyMagmaCube)myPet).size=value;
}",0.9307359307359307
187605,"public int getSize(){
  return this.datawatcher.getByte(16);
}","public int getSize(){
  int size=this.datawatcher.getByte(16);
  return size <= 0 ? 1 : size;
}",0.7133757961783439
187606,"public void setSize(int value){
  this.datawatcher.watch(16,(byte)value);
  Float[] entitySize=MyPet.getEntitySize(MySlime.class);
  this.a(entitySize[0] * value,entitySize[1] * value);
  ((MySlime)myPet).size=value;
}","public void setSize(int value){
  this.datawatcher.watch(16,new Byte((byte)value));
  Float[] entitySize=MyPet.getEntitySize(MySlime.class);
  this.a(entitySize[0] * value,entitySize[1] * value);
  ((MySlime)myPet).size=value;
}",0.9775784753363228
187607,"public void j_(){
  super.j_();
  this.motY*=0.6000000238418579D;
  this.locY+=0.65;
}","public void j_(){
  super.j_();
  this.locY+=0.65;
}",0.7536231884057971
187608,"public boolean getPoison(){
  return random.nextDouble() <= level * chancePerLevel / 100;
}","public boolean getPoison(){
  return random.nextDouble() <= level * chancePerLevel / 100.;
}",0.994535519125683
187609,"public int getSize(){
  return items.size();
}","public int getSize(){
  return size;
}",0.9047619047619048
187610,"public void setSize(int Size){
  this.size=Size;
  for (int i=items.size(); i < Size; i++) {
    items.add(i,null);
  }
}","public void setSize(int size){
  this.size=size;
  for (int i=items.size(); i < size; i++) {
    items.add(i,null);
  }
}",0.975206611570248
187611,"public void e(){
  this.petEntity.getControllerLook().a(this.petEntity.getOwner(),10.0F,(float)this.petEntity.bp());
  if (this.petEntity.canMove()) {
    if (--this.setPathTimer <= 0) {
      this.setPathTimer=10;
      if (!this.nav.a(this.petEntity.getOwner(),this.walkSpeed)) {
        Location ownerLocation=this.petEntity.getMyPet().getOwner().getPlayer().getLocation();
        if (this.petEntity.e(this.petEntity.getOwner()) > this.teleportDistance && controlPathfinderGoal.moveTo == null && petEntity.goalTarget == null && MyPetUtil.canSpawn(ownerLocation,this.petEntity)) {
          this.petEntity.setPositionRotation(ownerLocation.getX(),ownerLocation.getY(),ownerLocation.getZ(),this.petEntity.yaw,this.petEntity.pitch);
        }
      }
    }
  }
}","public void e(){
  this.petEntity.getControllerLook().a(this.petEntity.getOwner(),10.0F,(float)this.petEntity.bp());
  if (this.petEntity.canMove()) {
    if (--this.setPathTimer <= 0) {
      this.setPathTimer=10;
      if (!this.nav.a(this.petEntity.getOwner(),this.walkSpeed)) {
        Location ownerLocation=this.petEntity.getMyPet().getOwner().getPlayer().getLocation();
        if (this.petEntity.e(this.petEntity.getOwner()) > this.teleportDistance && controlPathfinderGoal.moveTo == null && petEntity.goalTarget == null && MyPetUtil.canSpawn(ownerLocation,this.petEntity)) {
          this.petEntity.setPositionRotation(ownerLocation.getX(),ownerLocation.getY(),ownerLocation.getZ(),this.petEntity.yaw,this.petEntity.pitch);
          this.nav.a(this.petEntity.getOwner(),this.walkSpeed);
        }
      }
    }
  }
}",0.959748427672956
187612,"@Override public void schedule(){
  if (level > 0 && pickup && myPet.status == PetState.Here && myPet.getSkills().getSkillLevel(""String_Node_Str"") > 0) {
    for (    Entity e : myPet.getCraftPet().getNearbyEntities(level * rangePerLevel,level * rangePerLevel,rangePerLevel)) {
      if (e instanceof Item) {
        Item item=(Item)e;
        PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),item,item.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(playerPickupEvent);
        if (playerPickupEvent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        int itemAmount=inv.addItem(item.getItemStack());
        if (itemAmount == 0) {
          for (          Entity p : e.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().netServerHandler.sendPacket(new Packet22Collect(e.getEntityId(),myPet.getCraftPet().getEntityId()));
            }
          }
          e.remove();
        }
 else {
          item.getItemStack().setAmount(itemAmount);
        }
      }
    }
  }
}","@Override public void schedule(){
  if (level > 0 && pickup && myPet.status == PetState.Here && myPet.getSkills().getSkillLevel(""String_Node_Str"") > 0) {
    for (    Entity e : myPet.getCraftPet().getNearbyEntities(level * rangePerLevel,rangePerLevel,level * rangePerLevel)) {
      if (e instanceof Item) {
        Item item=(Item)e;
        PlayerPickupItemEvent playerPickupEvent=new PlayerPickupItemEvent(myPet.getOwner().getPlayer(),item,item.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(playerPickupEvent);
        if (playerPickupEvent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)myPet.getSkills().getSkill(""String_Node_Str"")).inv;
        int itemAmount=inv.addItem(item.getItemStack());
        if (itemAmount == 0) {
          for (          Entity p : e.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().netServerHandler.sendPacket(new Packet22Collect(e.getEntityId(),myPet.getCraftPet().getEntityId()));
            }
          }
          e.remove();
        }
 else {
          item.getItemStack().setAmount(itemAmount);
        }
      }
    }
  }
}",0.9885151763740772
187613,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyChicken)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyChicken)myPet).isBaby=flag;
}",0.8246913580246914
187614,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyCow)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyCow)myPet).isBaby=flag;
}",0.8211586901763224
187615,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyMooshroom)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyMooshroom)myPet).isBaby=flag;
}",0.8264058679706602
187616,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyOcelot)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyOcelot)myPet).isBaby=flag;
}",0.8238213399503722
187617,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyPig)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyPig)myPet).isBaby=flag;
}",0.8211586901763224
187618,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MySheep)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MySheep)myPet).isBaby=flag;
}",0.8229426433915212
187619,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyVillager)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyVillager)myPet).isBaby=flag;
}",0.8255528255528255
187620,"public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,-1);
  }
 else {
    this.datawatcher.watch(12,0);
  }
  ((MyWolf)myPet).isBaby=flag;
}","@SuppressWarnings(""String_Node_Str"") public void setBaby(boolean flag){
  if (flag) {
    this.datawatcher.watch(12,new Integer(-24000));
  }
 else {
    this.datawatcher.watch(12,new Integer(0));
  }
  ((MyWolf)myPet).isBaby=flag;
}",0.8220551378446115
187621,"public static void loadSkillTrees(){
  YamlConfiguration MWConfig;
  MyPetUtil.getDebugLogger().info(""String_Node_Str"" + configPath);
  File skillFile;
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  MyPetSkillTreeMobType skillTreeMobType=new MyPetSkillTreeMobType(""String_Node_Str"");
  skillTreeMobTypes.put(""String_Node_Str"",skillTreeMobType);
  if (skillFile.exists()) {
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  for (  MyPetType mobType : MyPetType.values()) {
    skillFile=new File(configPath + File.separator + mobType.getTypeName()+ ""String_Node_Str"");
    skillTreeMobType=new MyPetSkillTreeMobType(mobType.getTypeName().toLowerCase());
    skillTreeMobTypes.put(mobType.getTypeName().toLowerCase(),skillTreeMobType);
    if (!skillFile.exists()) {
      continue;
    }
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"" + mobType.getTypeName().toLowerCase() + ""String_Node_Str"");
  }
}","public static void loadSkillTrees(){
  YamlConfiguration MWConfig;
  MyPetUtil.getDebugLogger().info(""String_Node_Str"" + configPath);
  File skillFile;
  skillFile=new File(configPath + File.separator + ""String_Node_Str"");
  MyPetSkillTreeMobType skillTreeMobType=new MyPetSkillTreeMobType(""String_Node_Str"");
  skillTreeMobTypes.put(""String_Node_Str"",skillTreeMobType);
  if (skillFile.exists()) {
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  }
  for (  MyPetType mobType : MyPetType.values()) {
    skillFile=new File(configPath + File.separator + mobType.getTypeName()+ ""String_Node_Str"");
    skillTreeMobType=new MyPetSkillTreeMobType(mobType.getTypeName().toLowerCase());
    skillTreeMobTypes.put(mobType.getTypeName().toLowerCase(),skillTreeMobType);
    if (!skillFile.exists()) {
      if (!skillTreeMobType.getMobTypeName().equals(""String_Node_Str"")) {
        addDefault(skillTreeMobType);
      }
      manageInheritance(skillTreeMobType);
      continue;
    }
    MWConfig=new YamlConfiguration(skillFile);
    loadSkillTree(MWConfig,skillTreeMobType);
    MyPetUtil.getDebugLogger().info(""String_Node_Str"" + mobType.getTypeName().toLowerCase() + ""String_Node_Str"");
  }
}",0.9327280231118448
187622,"/** 
 * Checks whether this ai goal should be activated
 */
public boolean a(){
  if (!petEntity.canMove()) {
    return false;
  }
 else   if (this.petEntity.goalTarget == null) {
    return false;
  }
  if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
    Behavior behaviorSkill=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
    if (behaviorSkill.getLevel() > 0) {
      if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
      if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
        if (this.petEntity.goalTarget instanceof EntityTameableAnimal && ((EntityTameableAnimal)this.petEntity.goalTarget).isTamed()) {
          return false;
        }
        if (this.petEntity.goalTarget instanceof EntityMyPet) {
          return false;
        }
        if (this.petEntity.goalTarget instanceof EntityPlayer) {
          return false;
        }
      }
    }
  }
  if (this.target instanceof EntityPlayer) {
    Player targetPlayer=(Player)this.petEntity.goalTarget.getBukkitEntity();
    if (myPet.getOwner().equals(targetPlayer)) {
      return false;
    }
 else     if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (this.target instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)this.target).getMyPet();
    if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
  this.target=this.petEntity.goalTarget;
  this.petEntity.goalTarget=null;
  return true;
}","/** 
 * Checks whether this ai goal should be activated
 */
public boolean a(){
  if (!petEntity.canMove()) {
    return false;
  }
 else   if (this.petEntity.goalTarget == null) {
    return false;
  }
  if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
    Behavior behaviorSkill=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
    if (behaviorSkill.getLevel() > 0) {
      if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
      if (behaviorSkill.getBehavior() == BehaviorState.Raid) {
        if (this.petEntity.goalTarget instanceof EntityTameableAnimal && ((EntityTameableAnimal)this.petEntity.goalTarget).isTamed()) {
          return false;
        }
        if (this.petEntity.goalTarget instanceof EntityMyPet) {
          return false;
        }
        if (this.petEntity.goalTarget instanceof EntityPlayer) {
          return false;
        }
      }
    }
  }
  if (this.petEntity.goalTarget instanceof EntityPlayer) {
    Player targetPlayer=(Player)this.petEntity.goalTarget.getBukkitEntity();
    if (myPet.getOwner().equals(targetPlayer)) {
      return false;
    }
 else     if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
      return false;
    }
  }
 else   if (this.petEntity.goalTarget instanceof EntityMyPet) {
    MyPet targetMyPet=((EntityMyPet)this.target).getMyPet();
    if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetMyPet.getOwner().getPlayer())) {
      return false;
    }
  }
  this.target=this.petEntity.goalTarget;
  this.petEntity.goalTarget=null;
  return true;
}",0.989956057752668
187623,"@EventHandler public void onEntityDamage(final EntityDamageEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof CraftMyPet) {
      if (e.getDamager() instanceof Player || (e.getDamager() instanceof Arrow && ((Arrow)e.getDamager()).getShooter() instanceof Player)) {
        Player damager;
        if (e.getDamager() instanceof Arrow) {
          damager=(Player)((Arrow)e.getDamager()).getShooter();
        }
 else {
          damager=(Player)e.getDamager();
        }
        MyPet myPet=MyPetList.getMyPet(event.getEntity().getEntityId());
        if (myPet.getCraftPet().getHandle().isRidden()) {
          event.setCancelled(true);
          if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
            if (myPet.getCraftPet().getHandle().petPathfinderSelector.hasGoal(""String_Node_Str"")) {
              ((EntityAIRide)myPet.getCraftPet().getHandle().petPathfinderSelector.getGoal(""String_Node_Str"")).toggleRiding();
            }
          }
        }
 else         if (damager.getItemInHand().getType() == MyPetConfig.leashItem) {
          String msg;
          if (myPet.getHealth() > myPet.getMaxHealth() / 3 * 2) {
            msg=""String_Node_Str"" + ChatColor.GREEN + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
 else           if (myPet.getHealth() > myPet.getMaxHealth() / 3) {
            msg=""String_Node_Str"" + ChatColor.YELLOW + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
 else {
            msg=""String_Node_Str"" + ChatColor.RED + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName));
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",msg));
          if (!myPet.getOwner().equals(damager)) {
            damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.getOwner().getName()));
          }
 else {
            if (!myPet.isPassiv()) {
              int damage=MyPet.getStartDamage(myPet.getClass()) + (myPet.getSkillSystem().hasSkill(""String_Node_Str"") ? myPet.getSkillSystem().getSkillLevel(""String_Node_Str"") : 0);
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + damage));
            }
            if (MyPetConfig.hungerSystem) {
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + myPet.getHungerValue()));
            }
            if (MyPetConfig.levelSystem) {
              int lvl=myPet.getExperience().getLevel();
              double exp=myPet.getExperience().getCurrentExp();
              double reqEXP=myPet.getExperience().getRequiredExp();
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + lvl));
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",String.format(""String_Node_Str"",exp)).replace(""String_Node_Str"",String.format(""String_Node_Str"",reqEXP)));
            }
          }
          damager.sendMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
 else         if (myPet.getOwner().equals(damager) && (!MyPetConfig.ownerCanAttackPet || !MyPetUtil.canHurtAt(myPet.getOwner().getPlayer(),myPet.getLocation()))) {
          event.setCancelled(true);
        }
 else         if (!myPet.getOwner().equals(damager) && !MyPetUtil.canHurt(damager,myPet.getOwner().getPlayer())) {
          event.setCancelled(true);
        }
      }
    }
 else     if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
      if (e.getDamager() instanceof Player) {
        Player damager=(Player)e.getDamager();
        if (!MyPetList.hasMyPet(damager)) {
          LivingEntity leashTarget=(LivingEntity)event.getEntity();
          if (!MyPetPermissions.has(damager,""String_Node_Str"" + MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName()) || damager.getItemInHand().getType() != MyPetConfig.leashItem) {
            return;
          }
          boolean willBeLeashed=true;
          List<LeashFlag> leashFlags=MyPet.getLeashFlags(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getMyPetClass());
          for (          LeashFlag flag : leashFlags) {
            if (flag == LeashFlag.Adult) {
              if (leashTarget instanceof Ageable) {
                willBeLeashed=((Ageable)leashTarget).isAdult();
              }
 else               if (leashTarget instanceof Zombie) {
                willBeLeashed=!((Zombie)leashTarget).isBaby();
              }
            }
 else             if (flag == LeashFlag.Baby) {
              if (leashTarget instanceof Ageable) {
                willBeLeashed=!((Ageable)leashTarget).isAdult();
              }
 else               if (leashTarget instanceof Zombie) {
                willBeLeashed=((Zombie)leashTarget).isBaby();
              }
            }
 else             if (flag == LeashFlag.LowHp) {
              willBeLeashed=leashTarget.getHealth() <= 2;
            }
 else             if (flag == LeashFlag.UserCreated) {
              if (leashTarget instanceof IronGolem) {
                willBeLeashed=((IronGolem)leashTarget).isPlayerCreated();
              }
            }
 else             if (flag == LeashFlag.Wild) {
              if (leashTarget instanceof IronGolem) {
                willBeLeashed=!((IronGolem)leashTarget).isPlayerCreated();
              }
 else               if (leashTarget instanceof Tameable) {
                willBeLeashed=!((Tameable)leashTarget).isTamed();
              }
            }
 else             if (flag == LeashFlag.Tamed) {
              if (leashTarget instanceof Tameable) {
                willBeLeashed=((Tameable)leashTarget).isTamed();
              }
            }
            if (!willBeLeashed || flag == LeashFlag.None) {
              willBeLeashed=false;
              break;
            }
          }
          if (willBeLeashed) {
            event.setCancelled(true);
            InactiveMyPet inactiveMyPet=new InactiveMyPet(MyPetPlayer.getMyPetPlayer(damager.getName()));
            inactiveMyPet.setPetType(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()));
            inactiveMyPet.setPetName(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName());
            inactiveMyPet.setLocation(leashTarget.getLocation());
            NBTTagCompound extendedInfo=new NBTTagCompound(""String_Node_Str"");
            if (leashTarget instanceof Ocelot) {
              extendedInfo.setInt(""String_Node_Str"",((Ocelot)leashTarget).getCatType().getId());
              extendedInfo.setBoolean(""String_Node_Str"",((Ocelot)leashTarget).isSitting());
            }
 else             if (leashTarget instanceof Wolf) {
              extendedInfo.setBoolean(""String_Node_Str"",((Wolf)leashTarget).isSitting());
              extendedInfo.setBoolean(""String_Node_Str"",((Wolf)leashTarget).isTamed());
              extendedInfo.setByte(""String_Node_Str"",(byte)((CraftWolf)leashTarget).getHandle().getCollarColor());
            }
 else             if (leashTarget instanceof Sheep) {
              extendedInfo.setInt(""String_Node_Str"",((Sheep)leashTarget).getColor().getData());
              extendedInfo.setBoolean(""String_Node_Str"",((Sheep)leashTarget).isSheared());
            }
 else             if (leashTarget instanceof Villager) {
              extendedInfo.setInt(""String_Node_Str"",((Villager)leashTarget).getProfession().getId());
            }
 else             if (leashTarget instanceof Pig) {
              extendedInfo.setBoolean(""String_Node_Str"",((Pig)leashTarget).hasSaddle());
            }
 else             if (leashTarget instanceof Slime) {
              extendedInfo.setInt(""String_Node_Str"",((Slime)leashTarget).getSize());
            }
 else             if (leashTarget instanceof Creeper) {
              extendedInfo.setBoolean(""String_Node_Str"",((Creeper)leashTarget).isPowered());
            }
 else             if (leashTarget instanceof Zombie) {
              extendedInfo.setBoolean(""String_Node_Str"",((Zombie)leashTarget).isBaby());
              extendedInfo.setBoolean(""String_Node_Str"",((Zombie)leashTarget).isVillager());
            }
 else             if (leashTarget instanceof Ageable) {
              extendedInfo.setBoolean(""String_Node_Str"",!((Ageable)leashTarget).isAdult());
            }
 else             if (leashTarget instanceof Enderman) {
              extendedInfo.setShort(""String_Node_Str"",(short)((CraftEnderman)leashTarget).getHandle().getCarriedId());
              extendedInfo.setShort(""String_Node_Str"",(short)((CraftEnderman)leashTarget).getHandle().getCarriedData());
            }
            inactiveMyPet.setInfo(extendedInfo);
            event.getEntity().remove();
            MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
            myPet.createPet();
            MyPetUtil.getServer().getPluginManager().callEvent(new MyPetLeashEvent(myPet));
            MyPetUtil.getDebugLogger().info(""String_Node_Str"");
            MyPetUtil.getDebugLogger().info(""String_Node_Str"" + myPet.toString());
            MyPetUtil.getDebugLogger().info(MyPetPlugin.getPlugin().savePets(false) + ""String_Node_Str"");
            damager.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else   if (event.getEntity() instanceof CraftMyChicken || event.getEntity() instanceof CraftMyBat) {
    if (event.getCause() == DamageCause.FALL) {
      event.setCancelled(true);
    }
  }
 else   if (event.getEntity() instanceof CraftMyIronGolem) {
    if (event.getCause() == DamageCause.FALL || event.getCause() == DamageCause.DROWNING) {
      event.setCancelled(true);
    }
  }
}","@EventHandler public void onEntityDamage(final EntityDamageEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (event instanceof EntityDamageByEntityEvent) {
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (event.getEntity() instanceof CraftMyPet) {
      if (e.getDamager() instanceof Player || (e.getDamager() instanceof Arrow && ((Arrow)e.getDamager()).getShooter() instanceof Player)) {
        Player damager;
        if (e.getDamager() instanceof Arrow) {
          damager=(Player)((Arrow)e.getDamager()).getShooter();
        }
 else {
          damager=(Player)e.getDamager();
        }
        MyPet myPet=MyPetList.getMyPet(event.getEntity().getEntityId());
        if (myPet.getCraftPet().getHandle().isRidden()) {
          event.setCancelled(true);
          if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
            if (myPet.getCraftPet().getHandle().petPathfinderSelector.hasGoal(""String_Node_Str"")) {
              ((EntityAIRide)myPet.getCraftPet().getHandle().petPathfinderSelector.getGoal(""String_Node_Str"")).toggleRiding();
            }
          }
        }
 else         if (damager.getItemInHand().getType() == MyPetConfig.leashItem) {
          String msg;
          if (myPet.getHealth() > myPet.getMaxHealth() / 3 * 2) {
            msg=""String_Node_Str"" + ChatColor.GREEN + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
 else           if (myPet.getHealth() > myPet.getMaxHealth() / 3) {
            msg=""String_Node_Str"" + ChatColor.YELLOW + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
 else {
            msg=""String_Node_Str"" + ChatColor.RED + myPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ myPet.getMaxHealth();
          }
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName));
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",msg));
          if (!myPet.getOwner().equals(damager)) {
            damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.getOwner().getName()));
          }
 else {
            if (!myPet.isPassiv()) {
              int damage=MyPet.getStartDamage(myPet.getClass()) + (myPet.getSkillSystem().hasSkill(""String_Node_Str"") ? myPet.getSkillSystem().getSkillLevel(""String_Node_Str"") : 0);
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + damage));
            }
            if (MyPetConfig.hungerSystem) {
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + myPet.getHungerValue()));
            }
            if (MyPetConfig.levelSystem) {
              int lvl=myPet.getExperience().getLevel();
              double exp=myPet.getExperience().getCurrentExp();
              double reqEXP=myPet.getExperience().getRequiredExp();
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"" + lvl));
              damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",String.format(""String_Node_Str"",exp)).replace(""String_Node_Str"",String.format(""String_Node_Str"",reqEXP)));
            }
          }
          damager.sendMessage(""String_Node_Str"");
          event.setCancelled(true);
        }
 else         if (myPet.getOwner().equals(damager) && (!MyPetConfig.ownerCanAttackPet || !MyPetUtil.canHurtAt(myPet.getOwner().getPlayer(),myPet.getLocation()))) {
          event.setCancelled(true);
        }
 else         if (!myPet.getOwner().equals(damager) && !MyPetUtil.canHurt(damager,myPet.getOwner().getPlayer())) {
          event.setCancelled(true);
        }
      }
    }
 else     if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
      if (e.getDamager() instanceof Player) {
        Player damager=(Player)e.getDamager();
        if (!MyPetList.hasMyPet(damager)) {
          LivingEntity leashTarget=(LivingEntity)event.getEntity();
          if (!MyPetPermissions.has(damager,""String_Node_Str"" + MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName()) || damager.getItemInHand().getType() != MyPetConfig.leashItem) {
            return;
          }
          boolean willBeLeashed=true;
          List<LeashFlag> leashFlags=MyPet.getLeashFlags(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getMyPetClass());
          for (          LeashFlag flag : leashFlags) {
            if (flag == LeashFlag.Adult) {
              if (leashTarget instanceof Ageable) {
                willBeLeashed=((Ageable)leashTarget).isAdult();
              }
 else               if (leashTarget instanceof Zombie) {
                willBeLeashed=!((Zombie)leashTarget).isBaby();
              }
            }
 else             if (flag == LeashFlag.Baby) {
              if (leashTarget instanceof Ageable) {
                willBeLeashed=!((Ageable)leashTarget).isAdult();
              }
 else               if (leashTarget instanceof Zombie) {
                willBeLeashed=((Zombie)leashTarget).isBaby();
              }
            }
 else             if (flag == LeashFlag.LowHp) {
              willBeLeashed=leashTarget.getHealth() <= 2;
            }
 else             if (flag == LeashFlag.UserCreated) {
              if (leashTarget instanceof IronGolem) {
                willBeLeashed=((IronGolem)leashTarget).isPlayerCreated();
              }
            }
 else             if (flag == LeashFlag.Wild) {
              if (leashTarget instanceof IronGolem) {
                willBeLeashed=!((IronGolem)leashTarget).isPlayerCreated();
              }
 else               if (leashTarget instanceof Tameable) {
                willBeLeashed=!((Tameable)leashTarget).isTamed();
              }
            }
 else             if (flag == LeashFlag.Tamed) {
              if (leashTarget instanceof Tameable) {
                willBeLeashed=((Tameable)leashTarget).isTamed();
              }
            }
            if (!willBeLeashed || flag == LeashFlag.None) {
              willBeLeashed=false;
              break;
            }
          }
          if (willBeLeashed) {
            event.setCancelled(true);
            InactiveMyPet inactiveMyPet=new InactiveMyPet(MyPetPlayer.getMyPetPlayer(damager.getName()));
            inactiveMyPet.setPetType(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()));
            inactiveMyPet.setPetName(MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getTypeName());
            inactiveMyPet.setLocation(leashTarget.getLocation());
            NBTTagCompound extendedInfo=new NBTTagCompound(""String_Node_Str"");
            if (leashTarget instanceof Ocelot) {
              extendedInfo.setInt(""String_Node_Str"",((Ocelot)leashTarget).getCatType().getId());
              extendedInfo.setBoolean(""String_Node_Str"",((Ocelot)leashTarget).isSitting());
            }
 else             if (leashTarget instanceof Wolf) {
              extendedInfo.setBoolean(""String_Node_Str"",((Wolf)leashTarget).isSitting());
              extendedInfo.setBoolean(""String_Node_Str"",((Wolf)leashTarget).isTamed());
              extendedInfo.setByte(""String_Node_Str"",(byte)((CraftWolf)leashTarget).getHandle().getCollarColor());
            }
 else             if (leashTarget instanceof Sheep) {
              extendedInfo.setInt(""String_Node_Str"",((Sheep)leashTarget).getColor().getData());
              extendedInfo.setBoolean(""String_Node_Str"",((Sheep)leashTarget).isSheared());
            }
 else             if (leashTarget instanceof Villager) {
              extendedInfo.setInt(""String_Node_Str"",((Villager)leashTarget).getProfession().getId());
            }
 else             if (leashTarget instanceof Pig) {
              extendedInfo.setBoolean(""String_Node_Str"",((Pig)leashTarget).hasSaddle());
            }
 else             if (leashTarget instanceof Slime) {
              extendedInfo.setInt(""String_Node_Str"",((Slime)leashTarget).getSize());
            }
 else             if (leashTarget instanceof Creeper) {
              extendedInfo.setBoolean(""String_Node_Str"",((Creeper)leashTarget).isPowered());
            }
 else             if (leashTarget instanceof Zombie) {
              extendedInfo.setBoolean(""String_Node_Str"",((Zombie)leashTarget).isBaby());
              extendedInfo.setBoolean(""String_Node_Str"",((Zombie)leashTarget).isVillager());
            }
 else             if (leashTarget instanceof Enderman) {
              extendedInfo.setShort(""String_Node_Str"",(short)((CraftEnderman)leashTarget).getHandle().getCarriedId());
              extendedInfo.setShort(""String_Node_Str"",(short)((CraftEnderman)leashTarget).getHandle().getCarriedData());
            }
            if (leashTarget instanceof Ageable) {
              extendedInfo.setBoolean(""String_Node_Str"",!((Ageable)leashTarget).isAdult());
            }
            inactiveMyPet.setInfo(extendedInfo);
            event.getEntity().remove();
            MyPet myPet=MyPetList.setMyPetActive(inactiveMyPet);
            myPet.createPet();
            MyPetUtil.getServer().getPluginManager().callEvent(new MyPetLeashEvent(myPet));
            MyPetUtil.getDebugLogger().info(""String_Node_Str"");
            MyPetUtil.getDebugLogger().info(""String_Node_Str"" + myPet.toString());
            MyPetUtil.getDebugLogger().info(MyPetPlugin.getPlugin().savePets(false) + ""String_Node_Str"");
            damager.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
          }
        }
      }
    }
  }
 else   if (event.getEntity() instanceof CraftMyChicken || event.getEntity() instanceof CraftMyBat) {
    if (event.getCause() == DamageCause.FALL) {
      event.setCancelled(true);
    }
  }
 else   if (event.getEntity() instanceof CraftMyIronGolem) {
    if (event.getCause() == DamageCause.FALL || event.getCause() == DamageCause.DROWNING) {
      event.setCancelled(true);
    }
  }
}",0.9697088906372936
187624,"protected void a(){
  super.a();
  this.datawatcher.a(16,(byte)1);
}","protected void a(){
  super.a();
  this.datawatcher.a(16,new Byte((byte)1));
}",0.9315068493150684
187625,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageResult(EntityDamageEvent event){
  if (event.getEntity() instanceof CraftMyEnderman) {
    MyEnderman myEnderman=(MyEnderman)((CraftMyEnderman)event.getEntity()).getMyPet();
    ((EntityMyEnderman)myEnderman.getCraftPet().getHandle()).setScreaming(true);
    ((EntityMyEnderman)myEnderman.getCraftPet().getHandle()).setScreaming(false);
  }
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof LivingEntity) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (MyPetList.hasMyPet(damager)) {
        MyPet myPet=MyPetList.getMyPet(damager);
        if (myPet.status == PetState.Here && event.getEntity() != myPet.getCraftPet()) {
          myPet.getCraftPet().getHandle().goalTarget=((CraftLivingEntity)event.getEntity()).getHandle();
        }
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet myPet=((CraftMyPet)e.getDamager()).getHandle().getMyPet();
        if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
          Poison poisonSkill=(Poison)myPet.getSkillSystem().getSkill(""String_Node_Str"");
          if (poisonSkill.getPoison()) {
            PotionEffect effect=new PotionEffect(PotionEffectType.POISON,5,1);
            ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          }
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageResult(EntityDamageEvent event){
  if (event.getEntity() instanceof CraftMyEnderman) {
    MyEnderman myEnderman=(MyEnderman)((CraftMyEnderman)event.getEntity()).getMyPet();
    ((EntityMyEnderman)myEnderman.getCraftPet().getHandle()).setScreaming(true);
    ((EntityMyEnderman)myEnderman.getCraftPet().getHandle()).setScreaming(false);
  }
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof LivingEntity) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (MyPetList.hasMyPet(damager)) {
        MyPet myPet=MyPetList.getMyPet(damager);
        if (myPet.status == PetState.Here && event.getEntity() != myPet.getCraftPet()) {
          myPet.getCraftPet().getHandle().goalTarget=((CraftLivingEntity)event.getEntity()).getHandle();
        }
      }
    }
 else     if (e.getDamager() instanceof CraftMyPet) {
      MyPet myPet=((CraftMyPet)e.getDamager()).getHandle().getMyPet();
      if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
        Poison poisonSkill=(Poison)myPet.getSkillSystem().getSkill(""String_Node_Str"");
        if (poisonSkill.getPoison()) {
          PotionEffect effect=new PotionEffect(PotionEffectType.POISON,5,1);
          ((LivingEntity)event.getEntity()).addPotionEffect(effect);
        }
      }
    }
  }
}",0.9868334430546412
187626,"public boolean createPet(Location loc){
  if (status != PetState.Here && getOwner().isOnline()) {
    if (respawnTime <= 0) {
      this.petLocation=loc;
      net.minecraft.server.World mcWorld=((CraftWorld)loc.getWorld()).getHandle();
      EntityMyPet petEntity=getPetType().getNewEntityInstance(mcWorld,this);
      petEntity.setLocation(loc);
      if (!petLocation.getChunk().isLoaded()) {
        petLocation.getChunk().load();
      }
      if (!mcWorld.addEntity(petEntity,CreatureSpawnEvent.SpawnReason.CUSTOM)) {
        return false;
      }
      craftMyPet=(CraftMyPet)petEntity.getBukkitEntity();
      status=PetState.Here;
      return true;
    }
  }
  return false;
}","public boolean createPet(Location loc){
  if (status != PetState.Here && getOwner().isOnline()) {
    if (respawnTime <= 0) {
      this.petLocation=loc;
      net.minecraft.server.World mcWorld=((CraftWorld)loc.getWorld()).getHandle();
      EntityMyPet petEntity=getPetType().getNewEntityInstance(mcWorld,this);
      petEntity.setLocation(loc);
      if (!petLocation.getChunk().isLoaded()) {
        petLocation.getChunk().load();
      }
      if (!mcWorld.addEntity(petEntity,CreatureSpawnEvent.SpawnReason.CUSTOM)) {
        status=PetState.Despawned;
        return false;
      }
      craftMyPet=(CraftMyPet)petEntity.getBukkitEntity();
      status=PetState.Here;
      return true;
    }
  }
  return false;
}",0.9751243781094528
187627,"public static void main(String[] args){
  String path=SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().getPath();
  path=path.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",File.separator).substring(1);
  File bukkitFile=new File(path);
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    String[] buttons={""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + bukkitFile.getAbsolutePath() + ""String_Node_Str""+ bukkitFile.getParent(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      bukkitDownloaderFrame=new JFrame(""String_Node_Str"");
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.downloaderPanel);
      bukkitDownloaderFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
    return;
  }
  MyPetSkillTreeConfig.setConfigPath(bukkitFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  MyPetSkillTreeConfig.loadSkillTrees();
  skilltreeCreator=new SkilltreeCreator();
  skilltreeCreatorFrame=new JFrame(""String_Node_Str"");
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.skilltreeCreatorPanel);
  skilltreeCreatorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  levelCreator=new LevelCreator(skilltreeCreatorFrame);
  levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}","public static void main(String[] args){
  String path=""String_Node_Str"";
  try {
    path=SkilltreeCreator.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
  }
 catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  path=path.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",File.separator).substring(1);
  File bukkitFile=new File(path);
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception ignored) {
  }
  Image logoImage=new ImageIcon(ClassLoader.getSystemResource(""String_Node_Str"")).getImage();
  try {
    Class.forName(""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    String[] buttons={""String_Node_Str"",""String_Node_Str""};
    int result=JOptionPane.showOptionDialog(null,""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"" + bukkitFile.getAbsolutePath() + ""String_Node_Str""+ bukkitFile.getParent(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE,0,null,buttons,buttons[1]);
    if (result == 0) {
      System.exit(0);
    }
 else     if (result == 1) {
      bukkitDownloader=new BukkitDownloader();
      bukkitDownloaderFrame=new JFrame(""String_Node_Str"");
      bukkitDownloaderFrame.setContentPane(bukkitDownloader.downloaderPanel);
      bukkitDownloaderFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      bukkitDownloaderFrame.setIconImage(logoImage);
      bukkitDownloaderFrame.pack();
      bukkitDownloaderFrame.setVisible(true);
      bukkitDownloaderFrame.setLocationRelativeTo(null);
      bukkitDownloader.startDownload();
    }
    return;
  }
  MyPetSkillTreeConfig.setConfigPath(bukkitFile.getAbsolutePath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  MyPetSkillTreeConfig.loadSkillTrees();
  skilltreeCreator=new SkilltreeCreator();
  skilltreeCreatorFrame=new JFrame(""String_Node_Str"");
  skilltreeCreatorFrame.setContentPane(skilltreeCreator.skilltreeCreatorPanel);
  skilltreeCreatorFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  skilltreeCreatorFrame.setIconImage(logoImage);
  skilltreeCreatorFrame.pack();
  skilltreeCreatorFrame.setVisible(true);
  skilltreeCreatorFrame.setLocationRelativeTo(null);
  levelCreator=new LevelCreator(skilltreeCreatorFrame);
  levelCreatorFrame=levelCreator.getFrame();
  levelCreatorFrame.setContentPane(levelCreator.getMainPanel());
  levelCreatorFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
  levelCreatorFrame.setIconImage(logoImage);
  levelCreatorFrame.pack();
  levelCreatorFrame.setLocationRelativeTo(null);
  levelCreatorFrame.addWindowListener(new WindowListener(){
    public void windowOpened(    WindowEvent e){
    }
    public void windowClosing(    WindowEvent e){
      skilltreeCreatorFrame.setEnabled(true);
    }
    public void windowClosed(    WindowEvent e){
    }
    public void windowIconified(    WindowEvent e){
    }
    public void windowDeiconified(    WindowEvent e){
    }
    public void windowActivated(    WindowEvent e){
    }
    public void windowDeactivated(    WindowEvent e){
    }
  }
);
}",0.9816922315685304
187628,"public void setMoveTo(Location loc){
  moveTo=loc;
}","public void setMoveTo(Location loc){
  if (prevMoveTo != null) {
    if (MyPetUtil.getDistance2D(loc,prevMoveTo) > 1) {
      moveTo=loc;
      prevMoveTo=loc;
    }
  }
 else {
    moveTo=loc;
  }
}",0.4143426294820717
187629,"public void onEnable(){
  plugin=this;
  new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"").mkdir();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mpv=getDescription().getVersion();
    mpv=getDescription().getVersion().substring(mpv.indexOf('(') + 1,mpv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mpv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    this.setEnabled(false);
    return;
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ MyPet.getStartHP(myPetType.getMyPetClass()));
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet myPet=MyPetList.getMyPet(p);
        if (myPet.status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (MyPetUtil.getDistance2D(myPet.getLocation(),p.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  this.isReady=true;
  debugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  new File(getPlugin().getDataFolder().getAbsolutePath() + File.separator + ""String_Node_Str"").mkdirs();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mpv=getDescription().getVersion();
    mpv=getDescription().getVersion().substring(mpv.indexOf('(') + 1,mpv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mpv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    this.setEnabled(false);
    return;
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntitySkeleton.class,""String_Node_Str"",51);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ MyPet.getStartHP(myPetType.getMyPetClass()));
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet myPet=MyPetList.getMyPet(p);
        if (myPet.status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (MyPetUtil.getDistance2D(myPet.getLocation(),p.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  this.isReady=true;
  debugLogger.info(""String_Node_Str"");
}",0.9995468506117516
187630,"/** 
 * Checks whether this pathfinder should be activated
 */
public boolean a(){
  if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
    Behavior behavior=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
    if (behavior.getLevel() > 0) {
      if (behavior.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
 else       if (behavior.getBehavior() == Behavior.BehaviorState.Aggressive && myPet.getPet().canMove()) {
        if (target == null || !target.isAlive()) {
          for (float range=1.F; range <= this.range; range++) {
            for (            Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)range,4.0D,(double)range))) {
              Entity entity=(Entity)entityObj;
              EntityLiving entityLiving=(EntityLiving)entity;
              if (petEntity.az().canSee(entityLiving) && entityLiving != petEntity) {
                if (entityLiving instanceof EntityPlayer) {
                  Player targetPlayer=(Player)entityLiving.getBukkitEntity();
                  if (myPet.getOwner().equals(targetPlayer)) {
                    continue;
                  }
                  if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
                    continue;
                  }
                }
                this.target=entityLiving;
                return true;
              }
            }
          }
          return false;
        }
        return true;
      }
    }
  }
  return false;
}","/** 
 * Checks whether this pathfinder should be activated
 */
public boolean a(){
  if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
    Behavior behavior=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
    if (behavior.getLevel() > 0) {
      if (behavior.getBehavior() == Behavior.BehaviorState.Friendly) {
        return false;
      }
 else       if (behavior.getBehavior() == Behavior.BehaviorState.Aggressive && myPet.getPet().canMove()) {
        if (target == null || !target.isAlive()) {
          for (float range=1.F; range <= this.range; range++) {
            for (            Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)range,4.0D,(double)range))) {
              Entity entity=(Entity)entityObj;
              EntityLiving entityLiving=(EntityLiving)entity;
              if (petEntity.aA().canSee(entityLiving) && entityLiving != petEntity) {
                if (entityLiving instanceof EntityPlayer) {
                  Player targetPlayer=(Player)entityLiving.getBukkitEntity();
                  if (myPet.getOwner().equals(targetPlayer)) {
                    continue;
                  }
                  if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
                    continue;
                  }
                }
                this.target=entityLiving;
                return true;
              }
            }
          }
          return false;
        }
        return true;
      }
    }
  }
  return false;
}",0.999354422207876
187631,"/** 
 * Checks whether this pathfinder should be activated
 */
public boolean a(){
  if (controlPathfinderGoal.moveTo != null && petEntity.canMove()) {
    if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
      Behavior behaviorSkill=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
      if (behaviorSkill.getLevel() > 0) {
        if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
          return false;
        }
      }
    }
    for (    Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)this.range,4.0D,(double)this.range))) {
      Entity entity=(Entity)entityObj;
      EntityLiving entityLiving=(EntityLiving)entity;
      if (petEntity.az().canSee(entityLiving) && entityLiving != petEntity) {
        if (entityLiving instanceof EntityPlayer) {
          Player targetPlayer=(Player)entityLiving.getBukkitEntity();
          if (myPet.getOwner().equals(targetPlayer)) {
            continue;
          }
          if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
            continue;
          }
        }
        controlPathfinderGoal.stopControl();
        this.target=entityLiving;
        return true;
      }
    }
  }
  return false;
}","/** 
 * Checks whether this pathfinder should be activated
 */
public boolean a(){
  if (controlPathfinderGoal.moveTo != null && petEntity.canMove()) {
    if (myPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
      Behavior behaviorSkill=(Behavior)myPet.getSkillSystem().getSkill(""String_Node_Str"");
      if (behaviorSkill.getLevel() > 0) {
        if (behaviorSkill.getBehavior() == Behavior.BehaviorState.Friendly) {
          return false;
        }
      }
    }
    for (    Object entityObj : this.petEntity.world.a(EntityLiving.class,this.petEntity.boundingBox.grow((double)this.range,4.0D,(double)this.range))) {
      Entity entity=(Entity)entityObj;
      EntityLiving entityLiving=(EntityLiving)entity;
      if (petEntity.aA().canSee(entityLiving) && entityLiving != petEntity) {
        if (entityLiving instanceof EntityPlayer) {
          Player targetPlayer=(Player)entityLiving.getBukkitEntity();
          if (myPet.getOwner().equals(targetPlayer)) {
            continue;
          }
          if (!MyPetUtil.canHurt(myPet.getOwner().getPlayer(),targetPlayer)) {
            continue;
          }
        }
        controlPathfinderGoal.stopControl();
        this.target=entityLiving;
        return true;
      }
    }
  }
  return false;
}",0.9992107340173638
187632,"public void c(){
  this.petOwner=null;
  this.nav.f();
  this.nav.a(this.i);
}","public void c(){
  this.h=0;
  this.i=this.nav.a();
  this.nav.a(false);
}",0.7894736842105263
187633,"public void d(){
  this.petEntity.getControllerLook().a(this.petOwner,10.0F,(float)this.petEntity.bm());
  if (this.petEntity.canMove()) {
    if (--this.h <= 0) {
      this.h=10;
      if (!this.nav.a(this.petOwner,this.f)) {
        if (this.petEntity.e(this.petOwner) >= 144.0D && controlPathfinderGoal.moveTo == null && petEntity.goalTarget == null) {
          int i=MathHelper.floor(this.petOwner.locX) - 2;
          int j=MathHelper.floor(this.petOwner.locZ) - 2;
          int k=MathHelper.floor(this.petOwner.boundingBox.b);
          for (int l=0; l <= 4; ++l) {
            for (int i1=0; i1 <= 4; ++i1) {
              if ((l < 1 || i1 < 1 || l > 3 || i1 > 3) && this.world.t(i + l,k - 1,j + i1) && !this.world.t(i + l,k,j + i1)&& !this.world.t(i + l,k + 1,j + i1)) {
                this.petEntity.setPositionRotation((double)((float)(i + l) + 0.5F),(double)k,(double)((float)(j + i1) + 0.5F),this.petEntity.yaw,this.petEntity.pitch);
                this.nav.f();
                return;
              }
            }
          }
        }
      }
    }
  }
}","public void d(){
  this.petOwner=null;
  this.nav.f();
  this.nav.a(this.i);
}",0.1075455333911535
187634,"public void e(){
  this.h=0;
  this.i=this.nav.a();
  this.nav.a(false);
}","public void e(){
  this.petEntity.getControllerLook().a(this.petOwner,10.0F,(float)this.petEntity.bp());
  if (this.petEntity.canMove()) {
    if (--this.h <= 0) {
      this.h=10;
      if (!this.nav.a(this.petOwner,this.f)) {
        if (this.petEntity.e(this.petOwner) >= 144.0D && controlPathfinderGoal.moveTo == null && petEntity.goalTarget == null) {
          int i=MathHelper.floor(this.petOwner.locX) - 2;
          int j=MathHelper.floor(this.petOwner.locZ) - 2;
          int k=MathHelper.floor(this.petOwner.boundingBox.b);
          for (int l=0; l <= 4; ++l) {
            for (int i1=0; i1 <= 4; ++i1) {
              if ((l < 1 || i1 < 1 || l > 3 || i1 > 3) && this.world.t(i + l,k - 1,j + i1) && !this.world.t(i + l,k,j + i1)&& !this.world.t(i + l,k + 1,j + i1)) {
                this.petEntity.setPositionRotation((double)((float)(i + l) + 0.5F),(double)k,(double)((float)(j + i1) + 0.5F),this.petEntity.yaw,this.petEntity.pitch);
                this.nav.f();
                return;
              }
            }
          }
        }
      }
    }
  }
}",0.0661444734551784
187635,"public boolean a(){
  EntityLiving localEntityLiving=this.entityMyPet.getOwner();
  if (localEntityLiving == null) {
    return false;
  }
  this.b=localEntityLiving.aB();
  return a(this.b,false);
}","public boolean a(){
  EntityLiving localEntityLiving=this.entityMyPet.getOwner();
  if (localEntityLiving == null) {
    return false;
  }
  this.b=localEntityLiving.aC();
  return a(this.b,false);
}",0.9949748743718592
187636,"protected void a(){
  super.a();
  this.datawatcher.a(16,(byte)0);
}","protected void a(){
  super.a();
  this.datawatcher.a(16,new Byte((byte)0));
}",0.9315068493150684
187637,"protected void a(){
  super.a();
  this.datawatcher.a(12,0);
}","protected void a(){
  super.a();
  this.datawatcher.a(12,new Integer(0));
}",0.9051094890510948
187638,"protected void a(){
  super.a();
  this.datawatcher.a(16,(byte)0);
  this.datawatcher.a(18,(byte)0);
  this.datawatcher.a(12,0);
}","protected void a(){
  super.a();
  this.datawatcher.a(12,new Integer(0));
  this.datawatcher.a(16,new Byte((byte)0));
  this.datawatcher.a(18,new Byte((byte)0));
}",0.7030716723549488
187639,"protected void a(){
  super.a();
  this.datawatcher.a(16,0);
  this.datawatcher.a(12,0);
}","protected void a(){
  super.a();
  this.datawatcher.a(16,new Integer(0));
  this.datawatcher.a(12,new Integer(0));
}",0.8737864077669902
187640,"public void onEnable(){
  plugin=this;
  new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"").mkdir();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mwv=getDescription().getVersion();
    mwv=getDescription().getVersion().substring(mwv.indexOf('(') + 1,mwv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mwv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    try {
      for (      Method f : myPetType.getMyPetClass().getDeclaredMethods()) {
        if (f.getName().equals(""String_Node_Str"")) {
          f.setAccessible(true);
          debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ f.invoke(null).toString());
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet myPet=MyPetList.getMyPet(p);
        if (myPet.status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (MyPetUtil.getDistance2D(myPet.getLocation(),p.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  debugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"").mkdir();
  File delCraftBukkit=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (delCraftBukkit.exists()) {
    delCraftBukkit.delete();
  }
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mwv=getDescription().getVersion();
    mwv=getDescription().getVersion().substring(mwv.indexOf('(') + 1,mwv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mwv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
  }
  MyPetConfig.config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.debugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.mobExp.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.mobExp.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  getCommand(""String_Node_Str"").setExecutor(new CommandShowSkillTree());
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  File defaultSkillConfig=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str"");
  if (!defaultSkillConfig.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(defaultSkillConfig);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfigPath(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntitySpider.class,""String_Node_Str"",52);
    a.invoke(a,EntityMyZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityZombie.class,""String_Node_Str"",54);
    a.invoke(a,EntityMySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntitySlime.class,""String_Node_Str"",55);
    a.invoke(a,EntityMyPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityPigZombie.class,""String_Node_Str"",57);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    try {
      for (      Method f : myPetType.getMyPetClass().getDeclaredMethods()) {
        if (f.getName().equals(""String_Node_Str"")) {
          f.setAccessible(true);
          debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ f.invoke(null).toString());
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.levelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet myPet=MyPetList.getMyPet(p);
        if (myPet.status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",myPet.petName).replace(""String_Node_Str"",""String_Node_Str"" + myPet.respawnTime)));
        }
 else         if (MyPetUtil.getDistance2D(myPet.getLocation(),p.getLocation()) < 75) {
          myPet.createPet();
        }
 else {
          myPet.status=PetState.Despawned;
        }
      }
    }
  }
  debugLogger.info(""String_Node_Str"");
}",0.9997993981945836
187641,"public NBTConfiguration(File f){
  NBTFile=f;
  if (!NBTFile.exists()) {
    try {
      NBTFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","public NBTConfiguration(File f){
  NBTFile=f;
  if (!NBTFile.exists()) {
    try {
      NBTFile.createNewFile();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  f.setWritable(true);
  f.setReadable(true);
}",0.8857142857142857
187642,"public YamlConfiguration(File f){
  ConfigFile=f;
  Config=new org.bukkit.configuration.file.YamlConfiguration();
  try {
    Config.load(ConfigFile);
  }
 catch (  Exception ignored) {
  }
}","public YamlConfiguration(File f){
  ConfigFile=f;
  Config=new org.bukkit.configuration.file.YamlConfiguration();
  try {
    Config.load(ConfigFile);
  }
 catch (  Exception ignored) {
  }
  f.setWritable(true);
  f.setReadable(true);
}",0.8925233644859814
187643,"int loadPets(File f){
  int petCount=0;
  NBTConfiguration nbtConfiguration=new NBTConfiguration(f);
  nbtConfiguration.load();
  NBTTagList Wolves=nbtConfiguration.getNBTTagCompound().getList(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"");
  for (int i=0; i < Wolves.size(); i++) {
    NBTTagCompound MPetNBT=(NBTTagCompound)Wolves.get(i);
    NBTTagCompound Location=MPetNBT.getCompound(""String_Node_Str"");
    double PetX=Location.getDouble(""String_Node_Str"");
    double PetY=Location.getDouble(""String_Node_Str"");
    double PetZ=Location.getDouble(""String_Node_Str"");
    String PetWorld=Location.getString(""String_Node_Str"");
    double PetExp=MPetNBT.getDouble(""String_Node_Str"");
    int PetHealthNow=MPetNBT.getInt(""String_Node_Str"");
    int PetRespawnTime=MPetNBT.getInt(""String_Node_Str"");
    String PetName=MPetNBT.getString(""String_Node_Str"");
    String Owner=MPetNBT.getString(""String_Node_Str"");
    String PetType;
    if (MPetNBT.hasKey(""String_Node_Str"")) {
      PetType=MPetNBT.getString(""String_Node_Str"");
    }
 else {
      PetType=""String_Node_Str"";
    }
    boolean PetSitting=MPetNBT.getBoolean(""String_Node_Str"");
    InactiveMyPet IMPet=new InactiveMyPet(MyPetPlayer.getMyPetPlayer(Owner));
    IMPet.setLocation(new Location(MyPetUtil.getServer().getWorld(PetWorld) != null ? MyPetUtil.getServer().getWorld(PetWorld) : MyPetUtil.getServer().getWorlds().get(0),PetX,PetY,PetZ));
    IMPet.setHealth(PetHealthNow);
    IMPet.setRespawnTime(PetRespawnTime);
    IMPet.setName(PetName);
    IMPet.setSitting(PetSitting);
    IMPet.setExp(PetExp);
    IMPet.setSkills(MPetNBT.getCompound(""String_Node_Str""));
    IMPet.setType(MyPetType.valueOf(PetType));
    IMPet.setInfo(MPetNBT.getCompound(""String_Node_Str""));
    MyPetList.addInactiveMyPet(IMPet);
    debugLogger.info(""String_Node_Str"" + IMPet.toString());
    petCount++;
  }
  debugLogger.info(petCount + ""String_Node_Str"");
  MyPetUtil.getLogger().info(petCount + ""String_Node_Str"");
  return petCount;
}","int loadPets(File f){
  int petCount=0;
  NBTConfiguration nbtConfiguration=new NBTConfiguration(f);
  nbtConfiguration.load();
  NBTTagList Wolves=nbtConfiguration.getNBTTagCompound().getList(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"");
  for (int i=0; i < Wolves.size(); i++) {
    NBTTagCompound myPetNBT=(NBTTagCompound)Wolves.get(i);
    NBTTagCompound locationNBT=myPetNBT.getCompound(""String_Node_Str"");
    double PetX=locationNBT.getDouble(""String_Node_Str"");
    double PetY=locationNBT.getDouble(""String_Node_Str"");
    double PetZ=locationNBT.getDouble(""String_Node_Str"");
    String PetWorld=locationNBT.getString(""String_Node_Str"");
    double PetExp=myPetNBT.getDouble(""String_Node_Str"");
    int PetHealthNow=myPetNBT.getInt(""String_Node_Str"");
    int PetRespawnTime=myPetNBT.getInt(""String_Node_Str"");
    String PetName=myPetNBT.getString(""String_Node_Str"");
    String Owner=myPetNBT.getString(""String_Node_Str"");
    String PetType;
    if (myPetNBT.hasKey(""String_Node_Str"")) {
      PetType=myPetNBT.getString(""String_Node_Str"");
    }
 else {
      PetType=""String_Node_Str"";
    }
    boolean PetSitting=myPetNBT.getBoolean(""String_Node_Str"");
    InactiveMyPet IMPet=new InactiveMyPet(MyPetPlayer.getMyPetPlayer(Owner));
    IMPet.setLocation(new Location(MyPetUtil.getServer().getWorld(PetWorld) != null ? MyPetUtil.getServer().getWorld(PetWorld) : MyPetUtil.getServer().getWorlds().get(0),PetX,PetY,PetZ));
    IMPet.setHealth(PetHealthNow);
    IMPet.setRespawnTime(PetRespawnTime);
    IMPet.setName(PetName);
    IMPet.setSitting(PetSitting);
    IMPet.setExp(PetExp);
    IMPet.setSkills(myPetNBT.getCompound(""String_Node_Str""));
    IMPet.setType(MyPetType.valueOf(PetType));
    IMPet.setInfo(myPetNBT.getCompound(""String_Node_Str""));
    MyPetList.addInactiveMyPet(IMPet);
    debugLogger.info(""String_Node_Str"" + IMPet.toString());
    petCount++;
  }
  debugLogger.info(petCount + ""String_Node_Str"");
  MyPetUtil.getLogger().info(petCount + ""String_Node_Str"");
  return petCount;
}",0.984889769630914
187644,"public int savePets(){
  int petCount=0;
  NBTConfiguration nbtConfiguration=new NBTConfiguration(NBTPetFile);
  NBTTagList Pets=new NBTTagList();
  for (  MyPet MPet : MyPetList.getMyPetList()) {
    NBTTagCompound Pet=new NBTTagCompound();
    NBTTagCompound Location=new NBTTagCompound(""String_Node_Str"");
    Location.setDouble(""String_Node_Str"",MPet.getLocation().getX());
    Location.setDouble(""String_Node_Str"",MPet.getLocation().getY());
    Location.setDouble(""String_Node_Str"",MPet.getLocation().getZ());
    Location.setString(""String_Node_Str"",MPet.getLocation().getWorld().getName());
    Pet.setString(""String_Node_Str"",MPet.getPetType().getTypeName());
    Pet.setString(""String_Node_Str"",MPet.getOwner().getName());
    Pet.setCompound(""String_Node_Str"",Location);
    Pet.setInt(""String_Node_Str"",MPet.getHealth());
    Pet.setInt(""String_Node_Str"",MPet.RespawnTime);
    Pet.setString(""String_Node_Str"",MPet.Name);
    Pet.setBoolean(""String_Node_Str"",MPet.isSitting());
    Pet.setDouble(""String_Node_Str"",MPet.getExperience().getExp());
    Pet.setCompound(""String_Node_Str"",MPet.getExtendedInfo());
    NBTTagCompound SkillsNBTTagCompound=new NBTTagCompound(""String_Node_Str"");
    Collection<MyPetGenericSkill> skills=MPet.getSkillSystem().getSkills();
    if (skills.size() > 0) {
      for (      MyPetGenericSkill skill : skills) {
        NBTTagCompound s=skill.save();
        if (s != null) {
          SkillsNBTTagCompound.set(skill.getName(),s);
        }
      }
    }
    Pet.set(""String_Node_Str"",SkillsNBTTagCompound);
    Pets.add(Pet);
    petCount++;
  }
  for (  InactiveMyPet IMPet : MyPetList.getInactiveMyPetList()) {
    NBTTagCompound Pet=new NBTTagCompound();
    NBTTagCompound Location=new NBTTagCompound(""String_Node_Str"");
    Location.setDouble(""String_Node_Str"",IMPet.getLocation().getX());
    Location.setDouble(""String_Node_Str"",IMPet.getLocation().getY());
    Location.setDouble(""String_Node_Str"",IMPet.getLocation().getZ());
    Location.setString(""String_Node_Str"",IMPet.getLocation().getWorld().getName());
    Pet.setString(""String_Node_Str"",IMPet.getOwner().getName());
    Pet.setCompound(""String_Node_Str"",Location);
    Pet.setInt(""String_Node_Str"",IMPet.getHealth());
    Pet.setInt(""String_Node_Str"",IMPet.getRespawnTime());
    Pet.setString(""String_Node_Str"",IMPet.getName());
    Pet.setBoolean(""String_Node_Str"",IMPet.isSitting());
    Pet.setDouble(""String_Node_Str"",IMPet.getExp());
    Pet.set(""String_Node_Str"",IMPet.getSkills());
    Pets.add(Pet);
    petCount++;
  }
  String[] version=plugin.getDescription().getVersion().split(""String_Node_Str"");
  nbtConfiguration.getNBTTagCompound().setString(""String_Node_Str"",version[0]);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",Pets);
  nbtConfiguration.save();
  return petCount;
}","public int savePets(){
  int petCount=0;
  NBTConfiguration nbtConfiguration=new NBTConfiguration(NBTPetFile);
  NBTTagList petNBTlist=new NBTTagList();
  for (  MyPet MPet : MyPetList.getMyPetList()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",MPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",MPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",MPet.getLocation().getZ());
    locationNBT.setString(""String_Node_Str"",MPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",MPet.getPetType().getTypeName());
    petNBT.setString(""String_Node_Str"",MPet.getOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",MPet.getHealth());
    petNBT.setInt(""String_Node_Str"",MPet.RespawnTime);
    petNBT.setString(""String_Node_Str"",MPet.Name);
    petNBT.setBoolean(""String_Node_Str"",MPet.isSitting());
    petNBT.setDouble(""String_Node_Str"",MPet.getExperience().getExp());
    petNBT.setCompound(""String_Node_Str"",MPet.getExtendedInfo());
    NBTTagCompound skillsNBT=new NBTTagCompound(""String_Node_Str"");
    Collection<MyPetGenericSkill> skills=MPet.getSkillSystem().getSkills();
    if (skills.size() > 0) {
      for (      MyPetGenericSkill skill : skills) {
        NBTTagCompound s=skill.save();
        if (s != null) {
          skillsNBT.set(skill.getName(),s);
        }
      }
    }
    petNBT.set(""String_Node_Str"",skillsNBT);
    petNBTlist.add(petNBT);
    petCount++;
  }
  for (  InactiveMyPet IMPet : MyPetList.getInactiveMyPetList()) {
    NBTTagCompound petNBT=new NBTTagCompound();
    NBTTagCompound locationNBT=new NBTTagCompound(""String_Node_Str"");
    locationNBT.setDouble(""String_Node_Str"",IMPet.getLocation().getX());
    locationNBT.setDouble(""String_Node_Str"",IMPet.getLocation().getY());
    locationNBT.setDouble(""String_Node_Str"",IMPet.getLocation().getZ());
    locationNBT.setString(""String_Node_Str"",IMPet.getLocation().getWorld().getName());
    petNBT.setString(""String_Node_Str"",IMPet.getType().getTypeName());
    petNBT.setString(""String_Node_Str"",IMPet.getOwner().getName());
    petNBT.setCompound(""String_Node_Str"",locationNBT);
    petNBT.setInt(""String_Node_Str"",IMPet.getHealth());
    petNBT.setInt(""String_Node_Str"",IMPet.getRespawnTime());
    petNBT.setString(""String_Node_Str"",IMPet.getName());
    petNBT.setBoolean(""String_Node_Str"",IMPet.isSitting());
    petNBT.setDouble(""String_Node_Str"",IMPet.getExp());
    petNBT.set(""String_Node_Str"",IMPet.getSkills());
    petNBTlist.add(petNBT);
    petCount++;
  }
  String[] version=plugin.getDescription().getVersion().split(""String_Node_Str"");
  nbtConfiguration.getNBTTagCompound().setString(""String_Node_Str"",version[0]);
  nbtConfiguration.getNBTTagCompound().set(""String_Node_Str"",petNBTlist);
  nbtConfiguration.save();
  return petCount;
}",0.7671374440234241
187645,"public void onEnable(){
  plugin=this;
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mwv=getDescription().getVersion();
    mwv=getDescription().getVersion().substring(mwv.indexOf('(') + 1,mwv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mwv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
  }
  MyPetConfig.Config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.DebugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.MobEXP.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.MobEXP.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  YamlConfiguration MWSkillTreeConfig=new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (!MWSkillTreeConfig.ConfigFile.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(MWSkillTreeConfig.ConfigFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfig(MWSkillTreeConfig);
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    try {
      for (      Method f : myPetType.getMyPetClass().getDeclaredMethods()) {
        if (f.getName().equals(""String_Node_Str"")) {
          f.setAccessible(true);
          debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ f.invoke(null).toString());
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.LevelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(MyPetPlugin.getPlugin());
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        metrics.addCustomData(new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet MPet=MyPetList.getMyPet(p);
        if (MPet.Status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + MPet.RespawnTime)));
        }
 else         if (MyPetUtil.getDistance(MPet.getLocation(),p.getLocation()) < 75) {
          MPet.ResetSitTimer();
          MPet.createPet();
        }
 else {
          MPet.Status=PetState.Despawned;
        }
      }
    }
  }
  debugLogger.info(""String_Node_Str"");
}","public void onEnable(){
  plugin=this;
  if (!checkVersion(getServer().getVersion(),getDescription().getVersion())) {
    String mwv=getDescription().getVersion();
    mwv=getDescription().getVersion().substring(mwv.indexOf('(') + 1,mwv.indexOf(')'));
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"" + mwv);
    MyPetUtil.getLogger().warning(""String_Node_Str"");
    MyPetUtil.getLogger().warning(""String_Node_Str"");
  }
  MyPetConfig.Config=this.getConfig();
  MyPetConfig.setDefault();
  MyPetConfig.loadConfiguration();
  debugLogger=new DebugLogger(MyPetConfig.DebugLogger);
  debugLogger.info(""String_Node_Str"");
  debugLogger.info(""String_Node_Str"" + getDescription().getVersion());
  debugLogger.info(""String_Node_Str"" + getServer().getVersion());
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  for (  EntityType ET : MyPetExperience.MobEXP.keySet()) {
    debugLogger.info(""String_Node_Str"" + MyPetExperience.MobEXP.get(ET).toString());
  }
  MyPetUtil.getDebugLogger().info(""String_Node_Str"");
  MyPetPlayerListener playerListener=new MyPetPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,getPlugin());
  MyPetVehicleListener vehicleListener=new MyPetVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,getPlugin());
  MyPetWorldListener worldListener=new MyPetWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,getPlugin());
  MyPetEntityListener entityListener=new MyPetEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,getPlugin());
  MyPetLevelUpListener levelupListener=new MyPetLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,getPlugin());
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandSendAway());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  YamlConfiguration MWSkillTreeConfig=new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (!MWSkillTreeConfig.ConfigFile.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(MWSkillTreeConfig.ConfigFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      debugLogger.info(""String_Node_Str"");
    }
  }
  MyPetSkillTreeConfigLoader.setConfig(MWSkillTreeConfig);
  MyPetSkillTreeConfigLoader.loadSkillTrees();
  MyPetSkillSystem.registerSkill(Inventory.class);
  MyPetSkillSystem.registerSkill(HPregeneration.class);
  MyPetSkillSystem.registerSkill(Pickup.class);
  MyPetSkillSystem.registerSkill(Behavior.class);
  MyPetSkillSystem.registerSkill(Damage.class);
  MyPetSkillSystem.registerSkill(Control.class);
  MyPetSkillSystem.registerSkill(HP.class);
  MyPetSkillSystem.registerSkill(Poison.class);
  try {
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",Class.class,String.class,Integer.TYPE);
    a.setAccessible(true);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95);
    a.invoke(a,EntityMyOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityOcelot.class,""String_Node_Str"",98);
    a.invoke(a,EntityMyIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityIronGolem.class,""String_Node_Str"",99);
    a.invoke(a,EntityMySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntitySilverfish.class,""String_Node_Str"",60);
    a.invoke(a,EntityMyChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityChicken.class,""String_Node_Str"",93);
    a.invoke(a,EntityMyCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityCow.class,""String_Node_Str"",92);
    a.invoke(a,EntityMyMooshroom.class,""String_Node_Str"",96);
    a.invoke(a,EntityMushroomCow.class,""String_Node_Str"",96);
    a.invoke(a,EntityMyPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityPig.class,""String_Node_Str"",90);
    a.invoke(a,EntityMySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntitySheep.class,""String_Node_Str"",91);
    a.invoke(a,EntityMyVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityVillager.class,""String_Node_Str"",120);
    a.invoke(a,EntityMyCaveSpider.class,""String_Node_Str"",59);
    a.invoke(a,EntityCaveSpider.class,""String_Node_Str"",59);
    debugLogger.info(""String_Node_Str"");
  }
 catch (  Exception e) {
    MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    debugLogger.severe(""String_Node_Str"");
    debugLogger.severe(e.getMessage());
    setEnabled(false);
    return;
  }
  debugLogger.info(""String_Node_Str"");
  for (  MyPetType myPetType : MyPetType.values()) {
    try {
      for (      Method f : myPetType.getMyPetClass().getDeclaredMethods()) {
        if (f.getName().equals(""String_Node_Str"")) {
          f.setAccessible(true);
          debugLogger.info(""String_Node_Str"" + myPetType.getTypeName() + ""String_Node_Str""+ f.invoke(null).toString());
        }
      }
    }
 catch (    Exception ignored) {
    }
  }
  debugLogger.info(""String_Node_Str"");
  MyPetPermissions.setup();
  language=new MyPetLanguage(new YamlConfiguration(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  language.load();
  if (MyPetConfig.LevelSystem) {
    if (MyPetJSexp.setScriptPath(MyPetPlugin.plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"")) {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
 else {
      MyPetUtil.getLogger().info(""String_Node_Str"");
      MyPetUtil.getDebugLogger().info(""String_Node_Str"");
    }
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (NBTPetFile.exists()) {
    NBTPetFile.renameTo(new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
  NBTPetFile=new File(getPlugin().getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  loadPets(NBTPetFile);
  timer.startTimer();
  debugLogger.info(""String_Node_Str"");
  for (  MyPetPlayer myPetPlayer : MyPetPlayer.getPlayerList()) {
    debugLogger.info(""String_Node_Str"" + myPetPlayer.toString());
  }
  debugLogger.info(""String_Node_Str"");
  if (MyPetConfig.sendMetrics) {
    debugLogger.info(""String_Node_Str"");
    try {
      Metrics metrics=new Metrics(this);
      Graph graphPercent=metrics.createGraph(""String_Node_Str"");
      Graph graphCount=metrics.createGraph(""String_Node_Str"");
      for (      MyPetType MPT : MyPetType.values()) {
        final MyPetType petType=MPT;
        Plotter plotter=new Metrics.Plotter(petType.getTypeName()){
          final MyPetType type=petType;
          @Override public int getValue(){
            return MyPetList.countMyPets(type);
          }
        }
;
        graphPercent.addPlotter(plotter);
        graphCount.addPlotter(plotter);
      }
      metrics.start();
    }
 catch (    IOException e) {
      MyPetUtil.getLogger().info(e.getMessage());
    }
  }
 else {
    debugLogger.info(""String_Node_Str"");
  }
  debugLogger.info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  MyPetUtil.getLogger().info(""String_Node_Str"" + MyPetPlugin.plugin.getDescription().getVersion() + ""String_Node_Str"");
  for (  Player p : getServer().getOnlinePlayers()) {
    if (MyPetPermissions.has(p,""String_Node_Str"")) {
      if (MyPetList.hasInactiveMyPet(p)) {
        MyPetList.setMyPetActive(p,true);
        MyPet MPet=MyPetList.getMyPet(p);
        if (MPet.Status == PetState.Dead) {
          p.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + MPet.RespawnTime)));
        }
 else         if (MyPetUtil.getDistance(MPet.getLocation(),p.getLocation()) < 75) {
          MPet.ResetSitTimer();
          MPet.createPet();
        }
 else {
          MPet.Status=PetState.Despawned;
        }
      }
    }
  }
  debugLogger.info(""String_Node_Str"");
}",0.984838424081452
187646,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Here) {
        if (MPet.getLocation().getWorld() != owner.getLocation().getWorld()) {
          MPet.removePet();
          MPet.setLocation(owner.getLocation());
          MPet.createPet();
          MPet.setSitting(false);
        }
 else {
          if (MPet.Pet.isInsideVehicle()) {
            MPet.Pet.leaveVehicle();
          }
          MPet.Pet.teleport(owner);
        }
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetUtil.getServer().getPluginManager().callEvent(new MyPetSpoutEvent(MPet,MyPetSpoutEventReason.Call));
        return true;
      }
 else       if (MPet.Status == PetState.Despawned) {
        MPet.setLocation(owner.getLocation());
        MPet.createPet();
        MPet.setSitting(false);
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetUtil.getServer().getPluginManager().callEvent(new MyPetSpoutEvent(MPet,MyPetSpoutEventReason.Call));
        return true;
      }
 else       if (MPet.Status == PetState.Dead) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + MPet.RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Here) {
        if (MPet.getLocation().getWorld() != owner.getLocation().getWorld()) {
          MPet.removePet();
          MPet.setLocation(owner.getLocation());
          MPet.createPet();
          MPet.setSitting(false);
        }
 else {
          if (MPet.getPet().isInsideVehicle()) {
            MPet.getPet().leaveVehicle();
          }
          MPet.getPet().teleport(owner);
        }
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetUtil.getServer().getPluginManager().callEvent(new MyPetSpoutEvent(MPet,MyPetSpoutEventReason.Call));
        return true;
      }
 else       if (MPet.Status == PetState.Despawned) {
        MPet.setLocation(owner.getLocation());
        MPet.createPet();
        MPet.setSitting(false);
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetUtil.getServer().getPluginManager().callEvent(new MyPetSpoutEvent(MPet,MyPetSpoutEventReason.Call));
        return true;
      }
 else       if (MPet.Status == PetState.Dead) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + MPet.RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.9911218724778048
187647,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (args.length < 1) {
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        name+=arg + ""String_Node_Str"";
      }
      name=name.substring(0,name.length() - 1);
      if (MPet.Name.equalsIgnoreCase(name)) {
        if (MPet.getSkillSystem().hasSkill(""String_Node_Str"") && MPet.getSkillSystem().getSkill(""String_Node_Str"").getLevel() > 0) {
          World world=MPet.Pet.getHandle().world;
          Location loc=MPet.getLocation();
          for (          ItemStack is : ((Inventory)MPet.getSkillSystem().getSkill(""String_Node_Str"")).inv.getContents()) {
            if (is != null) {
              EntityItem entity=new EntityItem(world,loc.getX(),loc.getY(),loc.getZ(),is);
              entity.pickupDelay=10;
              world.addEntity(entity);
            }
          }
        }
        MPet.getLocation().getWorld().spawnCreature(MPet.getLocation(),MPet.getPetType().getEntityType());
        MPet.removePet();
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetList.removeMyPet(MPet);
        MyPetPlugin.getPlugin().savePets(MyPetPlugin.NBTPetFile);
        return true;
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        return false;
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (args.length < 1) {
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        name+=arg + ""String_Node_Str"";
      }
      name=name.substring(0,name.length() - 1);
      if (MPet.Name.equalsIgnoreCase(name)) {
        if (MPet.getSkillSystem().hasSkill(""String_Node_Str"") && MPet.getSkillSystem().getSkill(""String_Node_Str"").getLevel() > 0) {
          World world=MPet.getPet().getHandle().world;
          Location loc=MPet.getLocation();
          for (          ItemStack is : ((Inventory)MPet.getSkillSystem().getSkill(""String_Node_Str"")).inv.getContents()) {
            if (is != null) {
              EntityItem entity=new EntityItem(world,loc.getX(),loc.getY(),loc.getZ(),is);
              entity.pickupDelay=10;
              world.addEntity(entity);
            }
          }
        }
        MPet.getLocation().getWorld().spawnCreature(MPet.getLocation(),MPet.getPetType().getEntityType());
        MPet.removePet();
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        MyPetList.removeMyPet(MPet);
        MyPetPlugin.getPlugin().savePets(MyPetPlugin.NBTPetFile);
        return true;
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
        return false;
      }
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return false;
}",0.997320341047503
187648,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String playerName=sender.getName();
    if (args != null && args.length > 0) {
      playerName=args[0];
    }
    if (MyPetList.hasMyPet(MyPetUtil.getOfflinePlayer(playerName))) {
      MyPet MPet=MyPetList.getMyPet(MyPetUtil.getOfflinePlayer(playerName));
      player.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",MPet.skillTree.getName()));
      Collection<MyPetGenericSkill> skills=MPet.getSkillSystem().getSkills();
      if (skills.size() > 0) {
        for (        MyPetGenericSkill skill : skills) {
          if (skill.getLevel() > 0) {
            player.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",skill.getName()).replace(""String_Node_Str"",""String_Node_Str"" + skill.getLevel()));
          }
        }
      }
      return true;
    }
 else {
      if (args != null && args.length > 0) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",playerName)));
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
      }
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String playerName=sender.getName();
    if (args != null && args.length > 0) {
      playerName=args[0];
    }
    if (MyPetList.hasMyPet(MyPetUtil.getOfflinePlayer(playerName))) {
      MyPet MPet=MyPetList.getMyPet(MyPetUtil.getOfflinePlayer(playerName));
      player.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",MPet.getSkillTree().getName()));
      Collection<MyPetGenericSkill> skills=MPet.getSkillSystem().getSkills();
      if (skills.size() > 0) {
        for (        MyPetGenericSkill skill : skills) {
          if (skill.getLevel() > 0) {
            player.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",skill.getName()).replace(""String_Node_Str"",""String_Node_Str"" + skill.getLevel()));
          }
        }
      }
      return true;
    }
 else {
      if (args != null && args.length > 0) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",playerName)));
      }
 else {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
      }
    }
  }
  return true;
}",0.9974424552429668
187649,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
      MPet.Pet.getHandle().setTarget(null);
      MPet.Pet.getHandle().b((EntityLiving)null);
      MPet.Pet.getHandle().Goaltarget=null;
      return true;
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player owner=(Player)sender;
    if (MyPetList.hasMyPet(owner)) {
      MyPet MPet=MyPetList.getMyPet(owner);
      if (!MyPetPermissions.has(owner,""String_Node_Str"")) {
        return true;
      }
      if (MPet.Status == PetState.Despawned) {
        sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        return true;
      }
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
      MPet.getPet().getHandle().setTarget(null);
      MPet.getPet().getHandle().b((EntityLiving)null);
      MPet.getPet().getHandle().Goaltarget=null;
      return true;
    }
 else {
      sender.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.9820749592612712
187650,"public PathfinderGoalAggressiveTarget(MyPet MPet,float range){
  super(MPet.Pet.getHandle(),32.0F,false);
  this.pet=MPet.Pet.getHandle();
  this.MPet=MPet;
  this.range=range;
}","public PathfinderGoalAggressiveTarget(MyPet MPet,float range){
  super(MPet.getPet().getHandle(),32.0F,false);
  this.pet=MPet.getPet().getHandle();
  this.MPet=MPet;
  this.range=range;
}",0.9726775956284152
187651,"public boolean b(){
  Control control=(Control)MPet.getSkillSystem().getSkill(""String_Node_Str"");
  if (control.getLocation(false) != null) {
    moveTo=control.getLocation();
    TimeToMove=(int)MyPetUtil.getDistance(MPet.getLocation(),moveTo) / 3;
    if (!nav.a(this.moveTo.getX(),this.moveTo.getY(),this.moveTo.getZ(),this.speed)) {
      moveTo=null;
    }
  }
  return moveTo != null && !this.MPet.Pet.isSitting();
}","public boolean b(){
  Control control=(Control)MPet.getSkillSystem().getSkill(""String_Node_Str"");
  if (control.getLocation(false) != null) {
    moveTo=control.getLocation();
    TimeToMove=(int)MyPetUtil.getDistance(MPet.getLocation(),moveTo) / 3;
    if (!nav.a(this.moveTo.getX(),this.moveTo.getY(),this.moveTo.getZ(),this.speed)) {
      moveTo=null;
    }
  }
  return moveTo != null && !this.MPet.isSitting();
}",0.9952380952380953
187652,"public PathfinderGoalControl(MyPet MPet,float f){
  this.MPet=MPet;
  speed=f;
  nav=this.MPet.Pet.getHandle().al();
}","public PathfinderGoalControl(MyPet MPet,float f){
  this.MPet=MPet;
  speed=f;
  nav=this.MPet.getPet().getHandle().al();
}",0.979253112033195
187653,"public PathfinderGoalControlTarget(MyPet MPet,PathfinderGoalControl control,float range){
  super(MPet.Pet.getHandle(),32.0F,false);
  this.pet=MPet.Pet.getHandle();
  this.MPet=MPet;
  this.range=range;
  this.control=control;
}","public PathfinderGoalControlTarget(MyPet MPet,PathfinderGoalControl control,float range){
  super(MPet.getPet().getHandle(),32.0F,false);
  this.pet=MPet.getPet().getHandle();
  this.MPet=MPet;
  this.range=range;
  this.control=control;
}",0.9529914529914528
187654,"public PathfinderGoalOwnerHurtTarget(MyPet MPet){
  super(MPet.Pet.getHandle(),32.0F,false);
  this.pet=MPet.Pet.getHandle();
  this.MPet=MPet;
  this.a(1);
}","public PathfinderGoalOwnerHurtTarget(MyPet MPet){
  super(MPet.getPet().getHandle(),32.0F,false);
  this.pet=MPet.getPet().getHandle();
  this.MPet=MPet;
  this.a(1);
}",0.9693251533742332
187655,"public void createPet(){
  if (Status == PetState.Here || getOwner() == null) {
  }
 else {
    if (RespawnTime <= 0) {
      net.minecraft.server.World mcWorld=((CraftWorld)Location.getWorld()).getHandle();
      EntityMyPet MWentityMyPet=getPetType().getNewEntityInstance();
      MWentityMyPet.setLocation(Location);
      mcWorld.addEntity(MWentityMyPet,CreatureSpawnEvent.SpawnReason.CUSTOM);
      Pet=(CraftMyPet)MWentityMyPet.getBukkitEntity();
      Pet.setSitting(isSitting);
      Status=PetState.Here;
    }
  }
}","public void createPet(Location loc){
  if (Status == PetState.Here || getOwner() == null) {
  }
 else {
    if (RespawnTime <= 0) {
      this.Location=loc;
      net.minecraft.server.World mcWorld=((CraftWorld)loc.getWorld()).getHandle();
      EntityMyPet MWentityMyPet=getPetType().getNewEntityInstance(mcWorld,this);
      MWentityMyPet.setLocation(loc);
      mcWorld.addEntity(MWentityMyPet,CreatureSpawnEvent.SpawnReason.CUSTOM);
      Pet=(CraftMyPet)MWentityMyPet.getBukkitEntity();
      Pet.setSitting(isSitting);
      Status=PetState.Here;
    }
  }
}",0.9348025711662076
187656,"public EntityMyWolf(World world,MyWolf MPet){
  super(world,MPet);
  this.texture=""String_Node_Str"";
  this.b(0.6F,0.8F);
  this.bb=0.3F;
  this.al().a(true);
  PathfinderGoalControl Control=new PathfinderGoalControl(MPet,0.4F);
  this.goalSelector.a(1,new PathfinderGoalFloat(this));
  this.goalSelector.a(2,this.a);
  this.goalSelector.a(3,new PathfinderGoalLeapAtTarget(this,0.4F));
  this.goalSelector.a(4,new PathfinderGoalMeleeAttack(this,this.bb,true));
  this.goalSelector.a(5,Control);
  this.goalSelector.a(7,new de.Keyle.MyPet.entity.pathfinder.PathfinderGoalFollowOwner(this,this.bb,5.0F,2.0F,Control));
  this.goalSelector.a(8,new PathfinderGoalLookAtPlayer(this,EntityHuman.class,8.0F));
  this.goalSelector.a(8,new PathfinderGoalRandomLookaround(this));
  this.targetSelector.a(1,new PathfinderGoalOwnerHurtByTarget(this));
  this.targetSelector.a(2,new de.Keyle.MyPet.entity.pathfinder.PathfinderGoalOwnerHurtTarget(MPet));
  this.targetSelector.a(3,new PathfinderGoalHurtByTarget(this,true));
  this.targetSelector.a(4,new PathfinderGoalControlTarget(MPet,Control,1));
  this.targetSelector.a(5,new PathfinderGoalAggressiveTarget(MPet,10));
}","public EntityMyWolf(World world,MyPet MPet){
  super(world,MPet);
  this.texture=""String_Node_Str"";
  this.b(0.6F,0.8F);
  this.bb=0.3F;
  this.al().a(true);
  PathfinderGoalControl Control=new PathfinderGoalControl(MPet,0.4F);
  this.goalSelector.a(1,new PathfinderGoalFloat(this));
  this.goalSelector.a(2,this.a);
  this.goalSelector.a(3,new PathfinderGoalLeapAtTarget(this,0.4F));
  this.goalSelector.a(4,new PathfinderGoalMeleeAttack(this,this.bb,true));
  this.goalSelector.a(5,Control);
  this.goalSelector.a(7,new de.Keyle.MyPet.entity.pathfinder.PathfinderGoalFollowOwner(this,this.bb,5.0F,2.0F,Control));
  this.goalSelector.a(8,new PathfinderGoalLookAtPlayer(this,EntityHuman.class,8.0F));
  this.goalSelector.a(8,new PathfinderGoalRandomLookaround(this));
  this.targetSelector.a(1,new PathfinderGoalOwnerHurtByTarget(this));
  this.targetSelector.a(2,new de.Keyle.MyPet.entity.pathfinder.PathfinderGoalOwnerHurtTarget(MPet));
  this.targetSelector.a(3,new PathfinderGoalHurtByTarget(this,true));
  this.targetSelector.a(4,new PathfinderGoalControlTarget(MPet,Control,1));
  this.targetSelector.a(5,new PathfinderGoalAggressiveTarget(MPet,10));
}",0.9969788519637462
187657,"public MyWolf(OfflinePlayer Owner){
  super(Owner);
  if (MyPetSkillTreeConfigLoader.getSkillTreeNames().length > 0) {
    for (    String ST : MyPetSkillTreeConfigLoader.getSkillTreeNames()) {
      if (MyPetPermissions.has(Owner.getPlayer(),""String_Node_Str"" + ST)) {
        this.skillTree=MyPetSkillTreeConfigLoader.getSkillTree(ST);
        break;
      }
    }
  }
  if (this.skillTree == null) {
    this.skillTree=new MyPetSkillTree(""String_Node_Str"");
  }
  skillSystem=new MyPetSkillSystem(this);
  experience=new MyPetExperience(this);
}","public MyWolf(OfflinePlayer Owner){
  super(Owner);
  this.Name=""String_Node_Str"";
  if (MyPetSkillTreeConfigLoader.getSkillTreeNames().length > 0) {
    for (    String ST : MyPetSkillTreeConfigLoader.getSkillTreeNames()) {
      if (MyPetPermissions.has(Owner.getPlayer(),""String_Node_Str"" + ST)) {
        this.skillTree=MyPetSkillTreeConfigLoader.getSkillTree(ST);
        break;
      }
    }
  }
  if (this.skillTree == null) {
    this.skillTree=new MyPetSkillTree(""String_Node_Str"");
  }
  skillSystem=new MyPetSkillSystem(this);
  experience=new MyPetExperience(this);
}",0.9724933451641526
187658,"@EventHandler public void onEntityDamage(final EntityDamageEvent event){
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof CraftMyPet) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      MyPet MPet=MyPetList.getMyPet(event.getEntity().getEntityId());
      MPet.ResetSitTimer();
      if (damager.getItemInHand().getType() == MyPetConfig.LeashItem) {
        String msg;
        if (MPet.getHealth() > MPet.getMaxHealth() / 3 * 2) {
          msg=""String_Node_Str"" + ChatColor.GREEN + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
 else         if (MPet.getHealth() > MPet.getMaxHealth() / 3) {
          msg=""String_Node_Str"" + ChatColor.YELLOW + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
 else {
          msg=""String_Node_Str"" + ChatColor.RED + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
        damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",msg));
        if (MyPetConfig.LevelSystem) {
          int lvl=MPet.getExperience().getLevel();
          double EXP=MPet.getExperience().getCurrentExp();
          double reqEXP=MPet.getExperience().getRequiredExp();
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP)).replace(""String_Node_Str"",""String_Node_Str"" + lvl).replace(""String_Node_Str"",String.format(""String_Node_Str"",reqEXP)).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP * 100 / reqEXP)));
        }
        if (MPet.Pet.isSitting()) {
          MPet.Pet.setSitting(true);
        }
        event.setCancelled(true);
      }
      if (!event.getEntity().getLocation().getWorld().getPVP()) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtWorldGuard(MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtFactions(damager,MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtTowny(damager,MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
    }
  }
 else   if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (!MyPetList.hasMyPet(damager)) {
        if (!MyPetPermissions.has(damager,""String_Node_Str"") || damager.getItemInHand().getType() != MyPetConfig.LeashItem) {
          return;
        }
        Entity leashTarget=event.getEntity();
        boolean willBeLeashed=false;
        boolean sitting=false;
        if (leashTarget instanceof Wolf) {
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          sitting=((Wolf)event.getEntity()).isSitting();
          if (isTarmed && OwnerOfTheWolf.equals(Attacker.getName())) {
            willBeLeashed=true;
          }
        }
        if (willBeLeashed) {
          event.setCancelled(true);
          MyPet MPet=MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getNewMyPetInstance(damager);
          MyPetUtil.getServer().getPluginManager().callEvent(new MyPetLeashEvent(MPet));
          MyPetList.addMyPet(MPet);
          MPet.createPet();
          MPet.setSitting(sitting);
          event.getEntity().remove();
          MyPetUtil.getDebugLogger().info(""String_Node_Str"");
          MyPetUtil.getDebugLogger().info(""String_Node_Str"" + MPet.toString());
          MyPetPlugin.getPlugin().savePets(MyPetPlugin.NBTPetFile);
          damager.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        }
      }
    }
  }
}","@EventHandler public void onEntityDamage(final EntityDamageEvent event){
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof CraftMyPet) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      MyPet MPet=MyPetList.getMyPet(event.getEntity().getEntityId());
      MPet.ResetSitTimer();
      if (damager.getItemInHand().getType() == MyPetConfig.LeashItem) {
        String msg;
        if (MPet.getHealth() > MPet.getMaxHealth() / 3 * 2) {
          msg=""String_Node_Str"" + ChatColor.GREEN + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
 else         if (MPet.getHealth() > MPet.getMaxHealth() / 3) {
          msg=""String_Node_Str"" + ChatColor.YELLOW + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
 else {
          msg=""String_Node_Str"" + ChatColor.RED + MPet.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ MPet.getMaxHealth()+ ChatColor.WHITE;
        }
        damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",msg));
        if (MyPetConfig.LevelSystem) {
          int lvl=MPet.getExperience().getLevel();
          double EXP=MPet.getExperience().getCurrentExp();
          double reqEXP=MPet.getExperience().getRequiredExp();
          damager.sendMessage(MyPetUtil.setColors(""String_Node_Str"").replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP)).replace(""String_Node_Str"",""String_Node_Str"" + lvl).replace(""String_Node_Str"",String.format(""String_Node_Str"",reqEXP)).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP * 100 / reqEXP)));
        }
        if (MPet.getPet().isSitting()) {
          MPet.getPet().setSitting(true);
        }
        event.setCancelled(true);
      }
      if (!event.getEntity().getLocation().getWorld().getPVP()) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtWorldGuard(MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtFactions(damager,MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
      if (!MyPetUtil.canHurtTowny(damager,MPet.getOwner().getPlayer())) {
        event.setCancelled(true);
      }
    }
  }
 else   if (MyPetType.isLeashableEntityType(event.getEntity().getType())) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (!MyPetList.hasMyPet(damager)) {
        if (!MyPetPermissions.has(damager,""String_Node_Str"") || damager.getItemInHand().getType() != MyPetConfig.LeashItem) {
          return;
        }
        Entity leashTarget=event.getEntity();
        boolean willBeLeashed=false;
        boolean sitting=false;
        if (leashTarget instanceof Wolf) {
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          sitting=((Wolf)event.getEntity()).isSitting();
          if (isTarmed && OwnerOfTheWolf.equals(Attacker.getName())) {
            willBeLeashed=true;
          }
        }
        if (willBeLeashed) {
          event.setCancelled(true);
          MyPet MPet=MyPetType.getMyPetTypeByEntityType(leashTarget.getType()).getNewMyPetInstance(damager);
          MyPetUtil.getServer().getPluginManager().callEvent(new MyPetLeashEvent(MPet));
          MyPetList.addMyPet(MPet);
          MPet.createPet(leashTarget.getLocation());
          MPet.setSitting(sitting);
          event.getEntity().remove();
          MyPetUtil.getDebugLogger().info(""String_Node_Str"");
          MyPetUtil.getDebugLogger().info(""String_Node_Str"" + MPet.toString());
          MyPetPlugin.getPlugin().savePets(MyPetPlugin.NBTPetFile);
          damager.sendMessage(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")));
        }
      }
    }
  }
}",0.9944240123383556
187659,"@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageResult(EntityDamageEvent event){
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof LivingEntity) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (MyPetList.hasMyPet(damager)) {
        MyPet MPet=MyPetList.getMyPet(damager);
        if (MPet.Status == PetState.Here && event.getEntity() != MPet.Pet) {
          MyPetList.getMyPet(damager).Pet.getHandle().Goaltarget=((CraftLivingEntity)event.getEntity()).getHandle();
        }
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet MPet=((CraftMyPet)e.getDamager()).getHandle().getMyPet();
        if (MPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
          Poison poison=(Poison)MPet.getSkillSystem().getSkill(""String_Node_Str"");
          if (poison.getPoison()) {
            PotionEffect effect=new PotionEffect(PotionEffectType.POISON,5,1);
            ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          }
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onEntityDamageResult(EntityDamageEvent event){
  if (!(event instanceof EntityDamageByEntityEvent) || event.isCancelled()) {
    return;
  }
  EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
  if (event.getEntity() instanceof LivingEntity) {
    if (e.getDamager() instanceof Player) {
      Player damager=(Player)e.getDamager();
      if (MyPetList.hasMyPet(damager)) {
        MyPet MPet=MyPetList.getMyPet(damager);
        if (MPet.Status == PetState.Here && event.getEntity() != MPet.getPet()) {
          MyPetList.getMyPet(damager).getPet().getHandle().Goaltarget=((CraftLivingEntity)event.getEntity()).getHandle();
        }
      }
 else       if (e.getDamager() instanceof CraftMyPet) {
        MyPet MPet=((CraftMyPet)e.getDamager()).getHandle().getMyPet();
        if (MPet.getSkillSystem().hasSkill(""String_Node_Str"")) {
          Poison poison=(Poison)MPet.getSkillSystem().getSkill(""String_Node_Str"");
          if (poison.getPoison()) {
            PotionEffect effect=new PotionEffect(PotionEffectType.POISON,5,1);
            ((LivingEntity)event.getEntity()).addPotionEffect(effect);
          }
        }
      }
    }
  }
}",0.990924092409241
187660,"@EventHandler public void onLevelUp(MyPetLevelUpEvent eventMyPet){
  MyPet MPet=eventMyPet.getPet();
  if (!eventMyPet.isQuiet()) {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + eventMyPet.getLevel()));
  }
  int lvl=eventMyPet.getLevel();
  MyPetSkillTree st=MPet.skillTree;
  String[] Skills=st.getSkills(lvl);
  if (Skills.length > 0) {
    for (    String skill : Skills) {
      if (MPet.getSkillSystem().hasSkill(skill)) {
        if (eventMyPet.isQuiet()) {
          MPet.getSkillSystem().getSkill(skill).setLevel(MPet.getSkillSystem().getSkill(skill).getLevel() + 1);
        }
 else {
          MPet.getSkillSystem().getSkill(skill).upgrade();
        }
      }
    }
  }
  MPet.setHealth(MPet.getMaxHealth());
}","@EventHandler public void onLevelUp(MyPetLevelUpEvent eventMyPet){
  MyPet MPet=eventMyPet.getPet();
  if (!eventMyPet.isQuiet()) {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",""String_Node_Str"" + eventMyPet.getLevel()));
  }
  int lvl=eventMyPet.getLevel();
  MyPetSkillTree st=MPet.getSkillTree();
  String[] Skills=st.getSkills(lvl);
  if (Skills.length > 0) {
    for (    String skill : Skills) {
      if (MPet.getSkillSystem().hasSkill(skill)) {
        if (eventMyPet.isQuiet()) {
          MPet.getSkillSystem().getSkill(skill).setLevel(MPet.getSkillSystem().getSkill(skill).getLevel() + 1);
        }
 else {
          MPet.getSkillSystem().getSkill(skill).upgrade();
        }
      }
    }
  }
  MPet.setHealth(MPet.getMaxHealth());
}",0.9958992384299942
187661,"@EventHandler public void onPlayerInteractEntity(final PlayerInteractEntityEvent event){
  if (event.isCancelled() || event.getPlayer().getItemInHand().getType() != MyPetConfig.LeashItem || !(event.getRightClicked() instanceof LivingEntity)) {
    return;
  }
  if (MyPetList.hasMyPet(event.getPlayer())) {
    MyPet MPet=MyPetList.getMyPet(event.getPlayer());
    if (event.getRightClicked() != MPet.Pet) {
      MPet.Pet.getHandle().Goaltarget=((CraftLivingEntity)event.getRightClicked()).getHandle();
    }
  }
}","@EventHandler public void onPlayerInteractEntity(final PlayerInteractEntityEvent event){
  if (event.isCancelled() || event.getPlayer().getItemInHand().getType() != MyPetConfig.LeashItem || !(event.getRightClicked() instanceof LivingEntity)) {
    return;
  }
  if (MyPetList.hasMyPet(event.getPlayer())) {
    MyPet MPet=MyPetList.getMyPet(event.getPlayer());
    if (event.getRightClicked() != MPet.getPet()) {
      MPet.getPet().getHandle().Goaltarget=((CraftLivingEntity)event.getRightClicked()).getHandle();
    }
  }
}",0.9788461538461538
187662,"public void activateBehavior(BehaviorState behaviorState){
  if (Level > 0) {
    Behavior=behaviorState;
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
    if (Behavior == BehaviorState.Friendly) {
      MPet.Pet.setTarget(null);
    }
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",this.Name));
  }
}","public void activateBehavior(BehaviorState behaviorState){
  if (Level > 0) {
    Behavior=behaviorState;
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
    if (Behavior == BehaviorState.Friendly) {
      MPet.getPet().setTarget(null);
    }
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",this.Name));
  }
}",0.9900271985494108
187663,"public void setBehavior(BehaviorState behaviorState){
  Behavior=behaviorState;
  MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
  if (Behavior == BehaviorState.Friendly) {
    MPet.Pet.setTarget(null);
  }
}","public void setBehavior(BehaviorState behaviorState){
  Behavior=behaviorState;
  MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
  if (Behavior == BehaviorState.Friendly) {
    MPet.getPet().setTarget(null);
  }
}",0.9835082458770614
187664,"@Override public void activate(){
  if (Level > 0) {
    if (Behavior == BehaviorState.Normal) {
      Behavior=BehaviorState.Friendly;
      MPet.Pet.setTarget(null);
    }
 else     if (Behavior == BehaviorState.Friendly) {
      Behavior=BehaviorState.Aggressive;
    }
 else     if (Behavior == BehaviorState.Aggressive || Behavior == BehaviorState.Raid) {
      Behavior=BehaviorState.Normal;
    }
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",this.Name));
  }
}","@Override public void activate(){
  if (Level > 0) {
    if (Behavior == BehaviorState.Normal) {
      Behavior=BehaviorState.Friendly;
      MPet.getPet().setTarget(null);
    }
 else     if (Behavior == BehaviorState.Friendly) {
      Behavior=BehaviorState.Aggressive;
    }
 else     if (Behavior == BehaviorState.Aggressive || Behavior == BehaviorState.Raid) {
      Behavior=BehaviorState.Normal;
    }
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",Behavior.name()));
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name).replace(""String_Node_Str"",this.Name));
  }
}",0.992815153494448
187665,"public void schedule(){
  if (Level > 0 && MPet.Status == PetState.Here) {
    timeCounter--;
    if (timeCounter <= 0) {
      MPet.Pet.getHandle().heal(1,EntityRegainHealthEvent.RegainReason.REGEN);
      timeCounter=HealtregenTime - Level;
    }
  }
}","public void schedule(){
  if (Level > 0 && MPet.Status == PetState.Here) {
    timeCounter--;
    if (timeCounter <= 0) {
      MPet.getPet().getHandle().heal(1,EntityRegainHealthEvent.RegainReason.REGEN);
      timeCounter=HealtregenTime - Level;
    }
  }
}",0.9785575048732944
187666,"@Override public void activate(){
  if (Level > 0) {
    if (MPet.getLocation().getBlock().getType() != Material.STATIONARY_WATER && MPet.getLocation().getBlock().getType() != Material.WATER) {
      inv.setName(MPet.Name);
      OpenInventory(MPet.getOwner().getPlayer());
      if (!MPet.isSitting()) {
        PetChestOpened.add(MPet.getOwner().getPlayer());
      }
      MPet.Pet.setSitting(true);
    }
 else {
      MPet.sendMessageToOwner(MyPetLanguage.getString(""String_Node_Str""));
    }
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
  }
}","@Override public void activate(){
  if (Level > 0) {
    if (MPet.getLocation().getBlock().getType() != Material.STATIONARY_WATER && MPet.getLocation().getBlock().getType() != Material.WATER) {
      inv.setName(MPet.Name);
      OpenInventory(MPet.getOwner().getPlayer());
      if (!MPet.isSitting()) {
        PetChestOpened.add(MPet.getOwner().getPlayer());
      }
      MPet.getPet().setSitting(true);
    }
 else {
      MPet.sendMessageToOwner(MyPetLanguage.getString(""String_Node_Str""));
    }
  }
 else {
    MPet.sendMessageToOwner(MyPetUtil.setColors(MyPetLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",MPet.Name));
  }
}",0.9915188897455668
187667,"@Override public void schedule(){
  if (Level > 0 && Pickup && MPet.Status == PetState.Here && MPet.getSkillSystem().hasSkill(""String_Node_Str"") && MPet.getSkillSystem().getSkill(""String_Node_Str"").getLevel() > 0) {
    for (    Entity e : MPet.Pet.getNearbyEntities(Level * RangePerLevel,Level * RangePerLevel,RangePerLevel)) {
      if (e instanceof Item) {
        Item item=(Item)e;
        PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(MPet.getOwner().getPlayer(),item,item.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(ppievent);
        if (ppievent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)MPet.getSkillSystem().getSkill(""String_Node_Str"")).inv;
        int ItemAmount=inv.addItem(item.getItemStack());
        if (ItemAmount == 0) {
          for (          Entity p : e.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().netServerHandler.sendPacket(new Packet22Collect(e.getEntityId(),MPet.Pet.getEntityId()));
            }
          }
          e.remove();
        }
 else {
          item.getItemStack().setAmount(ItemAmount);
        }
      }
    }
  }
}","@Override public void schedule(){
  if (Level > 0 && Pickup && MPet.Status == PetState.Here && MPet.getSkillSystem().hasSkill(""String_Node_Str"") && MPet.getSkillSystem().getSkill(""String_Node_Str"").getLevel() > 0) {
    for (    Entity e : MPet.getPet().getNearbyEntities(Level * RangePerLevel,Level * RangePerLevel,RangePerLevel)) {
      if (e instanceof Item) {
        Item item=(Item)e;
        PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(MPet.getOwner().getPlayer(),item,item.getItemStack().getAmount());
        MyPetUtil.getServer().getPluginManager().callEvent(ppievent);
        if (ppievent.isCancelled()) {
          continue;
        }
        MyPetCustomInventory inv=((Inventory)MPet.getSkillSystem().getSkill(""String_Node_Str"")).inv;
        int ItemAmount=inv.addItem(item.getItemStack());
        if (ItemAmount == 0) {
          for (          Entity p : e.getNearbyEntities(20,20,20)) {
            if (p instanceof Player) {
              ((CraftPlayer)p).getHandle().netServerHandler.sendPacket(new Packet22Collect(e.getEntityId(),MPet.getPet().getEntityId()));
            }
          }
          e.remove();
        }
 else {
          item.getItemStack().setAmount(ItemAmount);
        }
      }
    }
  }
}",0.9911290322580644
187668,"public void createPet(Location loc){
  if (Status == PetState.Here || getOwner() == null) {
  }
 else {
    if (RespawnTime <= 0) {
      this.Location=loc;
      net.minecraft.server.World mcWorld=((CraftWorld)loc.getWorld()).getHandle();
      EntityMyPet MWentityMyPet=getPetType().getNewEntityInstance(mcWorld,this);
      MWentityMyPet.setLocation(loc);
      mcWorld.addEntity(MWentityMyPet,CreatureSpawnEvent.SpawnReason.CUSTOM);
      Pet=(CraftMyPet)MWentityMyPet.getBukkitEntity();
      Pet.setSitting(isSitting);
      Status=PetState.Here;
    }
  }
}","public void createPet(Location loc){
  if (Status == PetState.Here || getOwner() == null) {
  }
 else {
    if (RespawnTime <= 0) {
      this.Location=loc;
      net.minecraft.server.World mcWorld=((CraftWorld)loc.getWorld()).getHandle();
      EntityMyPet MPentityMyPet=getPetType().getNewEntityInstance(mcWorld,this);
      MPentityMyPet.setLocation(loc);
      if (!Location.getChunk().isLoaded()) {
        Location.getChunk().load();
      }
      if (!mcWorld.addEntity(MPentityMyPet,CreatureSpawnEvent.SpawnReason.CUSTOM)) {
        return;
      }
      Pet=(CraftMyPet)MPentityMyPet.getBukkitEntity();
      Pet.setSitting(isSitting);
      Status=PetState.Here;
    }
  }
}",0.8349358974358975
187669,"public static boolean has(Player player,String node){
  if (player.isOp()) {
    return true;
  }
 else   if (PermissionsMode == PermissionsType.NONE) {
    return true;
  }
 else   if (PermissionsMode == PermissionsType.Vault) {
    ((Permission)Permissions).has(player,node);
  }
 else   if (PermissionsMode == PermissionsType.BukkitPermissions) {
    player.hasPermission(node);
  }
  return false;
}","public static boolean has(Player player,String node){
  if (player.isOp()) {
    return true;
  }
 else   if (PermissionsMode == PermissionsType.NONE) {
    return true;
  }
 else   if (PermissionsMode == PermissionsType.Vault) {
    return ((Permission)Permissions).has(player,node);
  }
 else   if (PermissionsMode == PermissionsType.BukkitPermissions) {
    return player.hasPermission(node);
  }
  return false;
}",0.9829268292682928
187670,"public void onEnable(){
  Plugin=this;
  MyWolfConfig.Config=this.getConfig();
  MyWolfConfig.setDefault();
  MyWolfConfig.loadConfiguration();
  MyWolfPlayerListener playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyWolfVehicleListener vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyWolfWorldListener worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  MyWolfEntityListener entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyWolfLevelUpListener levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  MyWolfYamlConfiguration MWSkillTreeConfig=new MyWolfYamlConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (!MWSkillTreeConfig.ConfigFile.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(MWSkillTreeConfig.ConfigFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
  }
  MyWolfSkillTreeConfigLoader.setConfig(MWSkillTreeConfig);
  MyWolfSkillTreeConfigLoader.loadSkillTrees();
  MyWolfSkillSystem.registerSkill(Inventory.class);
  MyWolfSkillSystem.registerSkill(HPregeneration.class);
  MyWolfSkillSystem.registerSkill(Pickup.class);
  MyWolfSkillSystem.registerSkill(Behavior.class);
  MyWolfSkillSystem.registerSkill(Damage.class);
  MyWolfSkillSystem.registerSkill(Control.class);
  MyWolfSkillSystem.registerSkill(HP.class);
  try {
    Class[] args={Class.class,String.class,Integer.TYPE,Integer.TYPE,Integer.TYPE};
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",args);
    a.setAccessible(true);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95,14144467,13545366);
  }
 catch (  Exception e) {
    MyWolfUtil.getLogger().info(""String_Node_Str"" + MyWolfPlugin.Plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    setEnabled(false);
    return;
  }
  if (MyWolfConfig.PermissionsBukkit) {
    MyWolfPermissions.setup(PermissionsType.BukkitPermissions);
  }
 else {
    MyWolfPermissions.setup();
  }
  MWLanguage=new MyWolfLanguage(new MyWolfYamlConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  MWLanguage.loadVariables();
  if (MyWolfConfig.LevelSystem) {
    try {
      MyWolfExperience.JSreader=MyWolfUtil.readFileAsString(MyWolfPlugin.Plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    }
 catch (    Exception e) {
      MyWolfExperience.JSreader=null;
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
  }
  File MWWolvesConfigFile=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  NBTWolvesFile=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (MWWolvesConfigFile.exists()) {
    MyWolfYamlConfiguration MWWolvesConfig=new MyWolfYamlConfiguration(MWWolvesConfigFile);
    loadWolves(MWWolvesConfig);
    MWWolvesConfigFile.renameTo(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
 else {
    loadWolves(NBTWolvesFile);
  }
  Timer.startTimer();
  if (MyWolfConfig.sendMetrics) {
    try {
      Metrics metrics=new Metrics();
      metrics.addCustomData(getPlugin(),new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyWolfList.getMyWolfCount();
        }
      }
);
      metrics.beginMeasuringPlugin(getPlugin());
    }
 catch (    IOException e) {
      MyWolfUtil.getLogger().info(e.getMessage());
    }
  }
  MyWolfUtil.getLogger().info(""String_Node_Str"" + MyWolfPlugin.Plugin.getDescription().getVersion() + ""String_Node_Str"");
}","public void onEnable(){
  Plugin=this;
  MyWolfConfig.Config=this.getConfig();
  MyWolfConfig.setDefault();
  MyWolfConfig.loadConfiguration();
  MyWolfPlayerListener playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyWolfVehicleListener vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyWolfWorldListener worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  MyWolfEntityListener entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyWolfLevelUpListener levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  getCommand(""String_Node_Str"").setExecutor(new CommandName());
  getCommand(""String_Node_Str"").setExecutor(new CommandCall());
  getCommand(""String_Node_Str"").setExecutor(new CommandStop());
  getCommand(""String_Node_Str"").setExecutor(new CommandRelease());
  getCommand(""String_Node_Str"").setExecutor(new CommandHelp());
  getCommand(""String_Node_Str"").setExecutor(new CommandInventory());
  getCommand(""String_Node_Str"").setExecutor(new CommandPickup());
  getCommand(""String_Node_Str"").setExecutor(new CommandBehavior());
  getCommand(""String_Node_Str"").setExecutor(new CommandInfo());
  getCommand(""String_Node_Str"").setExecutor(new CommandAdmin());
  getCommand(""String_Node_Str"").setExecutor(new CommandSkill());
  MyWolfYamlConfiguration MWSkillTreeConfig=new MyWolfYamlConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (!MWSkillTreeConfig.ConfigFile.exists()) {
    try {
      InputStream template=getPlugin().getResource(""String_Node_Str"");
      OutputStream out=new FileOutputStream(MWSkillTreeConfig.ConfigFile);
      byte[] buf=new byte[1024];
      int len;
      while ((len=template.read(buf)) > 0) {
        out.write(buf,0,len);
      }
      template.close();
      out.close();
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
 catch (    IOException ex) {
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
  }
  MyWolfSkillTreeConfigLoader.setConfig(MWSkillTreeConfig);
  MyWolfSkillTreeConfigLoader.loadSkillTrees();
  MyWolfSkillSystem.registerSkill(Inventory.class);
  MyWolfSkillSystem.registerSkill(HPregeneration.class);
  MyWolfSkillSystem.registerSkill(Pickup.class);
  MyWolfSkillSystem.registerSkill(Behavior.class);
  MyWolfSkillSystem.registerSkill(Damage.class);
  MyWolfSkillSystem.registerSkill(Control.class);
  MyWolfSkillSystem.registerSkill(HP.class);
  try {
    Class[] args={Class.class,String.class,Integer.TYPE,Integer.TYPE,Integer.TYPE};
    Method a=EntityTypes.class.getDeclaredMethod(""String_Node_Str"",args);
    a.setAccessible(true);
    a.invoke(a,EntityMyWolf.class,""String_Node_Str"",95,14144467,13545366);
    a.invoke(a,EntityWolf.class,""String_Node_Str"",95,14144467,13545366);
  }
 catch (  Exception e) {
    MyWolfUtil.getLogger().info(""String_Node_Str"" + MyWolfPlugin.Plugin.getDescription().getVersion() + ""String_Node_Str"");
    e.printStackTrace();
    setEnabled(false);
    return;
  }
  if (MyWolfConfig.PermissionsBukkit) {
    MyWolfPermissions.setup(PermissionsType.BukkitPermissions);
  }
 else {
    MyWolfPermissions.setup();
  }
  MWLanguage=new MyWolfLanguage(new MyWolfYamlConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  MWLanguage.loadVariables();
  if (MyWolfConfig.LevelSystem) {
    try {
      MyWolfExperience.JSreader=MyWolfUtil.readFileAsString(MyWolfPlugin.Plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    }
 catch (    Exception e) {
      MyWolfExperience.JSreader=null;
      MyWolfUtil.getLogger().info(""String_Node_Str"");
    }
  }
  File MWWolvesConfigFile=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  NBTWolvesFile=new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  if (MWWolvesConfigFile.exists()) {
    MyWolfYamlConfiguration MWWolvesConfig=new MyWolfYamlConfiguration(MWWolvesConfigFile);
    loadWolves(MWWolvesConfig);
    MWWolvesConfigFile.renameTo(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  }
 else {
    loadWolves(NBTWolvesFile);
  }
  Timer.startTimer();
  if (MyWolfConfig.sendMetrics) {
    try {
      Metrics metrics=new Metrics();
      metrics.addCustomData(getPlugin(),new Metrics.Plotter(""String_Node_Str""){
        @Override public int getValue(){
          return MyWolfList.getMyWolfCount();
        }
      }
);
      metrics.beginMeasuringPlugin(getPlugin());
    }
 catch (    IOException e) {
      MyWolfUtil.getLogger().info(e.getMessage());
    }
  }
  MyWolfUtil.getLogger().info(""String_Node_Str"" + MyWolfPlugin.Plugin.getDescription().getVersion() + ""String_Node_Str"");
}",0.9925805468035368
187671,"public EntityMyWolf(World world,MyWolf MWolf){
  super(world);
  setMyWolf(MWolf);
  MyWolfUtil.getLogger().info(""String_Node_Str"");
}","public EntityMyWolf(World world,MyWolf MWolf){
  super(world);
  setMyWolf(MWolf);
}",0.7706422018348624
187672,"public void e(NBTTagCompound nbttagcompound){
  if (!isMyWolf) {
    MyWolfUtil.getLogger().info(""String_Node_Str"");
    super.d(nbttagcompound);
    EntityWolf entityWolf=new EntityWolf(world);
    entityWolf.d(nbttagcompound);
    this.getBukkitEntity().remove();
  }
 else {
    MyWolfUtil.getLogger().info(""String_Node_Str"");
    super.d(nbttagcompound);
  }
}","public void e(NBTTagCompound nbttagcompound){
  if (!isMyWolf) {
    super.d(nbttagcompound);
    EntityWolf entityWolf=new EntityWolf(world);
    entityWolf.d(nbttagcompound);
    this.getBukkitEntity().remove();
    MyWolfUtil.getLogger().severe(""String_Node_Str"");
  }
 else {
    super.d(nbttagcompound);
  }
}",0.4690265486725664
187673,"public void load(){
  try {
    DataInputStream F_In=new DataInputStream(new FileInputStream(NBTFile));
    nbtTagCompound=(NBTTagCompound)NBTBase.b(F_In);
    F_In.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public void load(){
  try {
    FileInputStream fi=new FileInputStream(NBTFile);
    fi.read();
    if (fi.read() != -1) {
      fi.close();
      fi=new FileInputStream(NBTFile);
      DataInputStream F_In=new DataInputStream(fi);
      nbtTagCompound=(NBTTagCompound)NBTBase.b(F_In);
      F_In.close();
    }
    fi.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",0.6538461538461539
187674,"@Override public void onEntityTarget(final EntityTargetEvent event){
  if (!event.isCancelled()) {
    if (event.getEntity() instanceof Wolf) {
      for (      MyWolf Wolf : ConfigBuffer.mWolves.values()) {
        if (Wolf.getID() == event.getEntity().getEntityId()) {
          Wolf.ResetSitTimer();
          if (Wolf.Behavior == de.Keyle.MyWolf.MyWolf.BehaviorState.Friendly) {
            event.setCancelled(true);
          }
 else           if (Wolf.Behavior == BehaviorState.Raid) {
            if (event.getTarget() instanceof Player || (event.getTarget() instanceof Wolf && ((Wolf)event.getTarget()).isTamed())) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}","@Override public void onEntityTarget(final EntityTargetEvent event){
  if (!event.isCancelled()) {
    if (event.getEntity() instanceof Wolf) {
      for (      MyWolf Wolf : ConfigBuffer.mWolves.values()) {
        if (Wolf.getID() == event.getEntity().getEntityId()) {
          Wolf.ResetSitTimer();
          if (Wolf.Behavior == de.Keyle.MyWolf.MyWolf.BehaviorState.Friendly) {
            event.setCancelled(true);
          }
 else           if (event.getTarget() instanceof Player && ((Player)event.getTarget()).getName() == Wolf.getOwner().getName()) {
            event.setCancelled(true);
          }
 else           if (Wolf.Behavior == BehaviorState.Raid) {
            if (event.getTarget() instanceof Player || (event.getTarget() instanceof Wolf && ((Wolf)event.getTarget()).isTamed())) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}",0.8733786287831995
187675,"public void run(){
  if (Status == WolfState.Despawned || getOwner() == null) {
    StopTimer();
  }
 else {
    if (Status == WolfState.Here) {
      Time2HPregen--;
      SitTimer--;
      if (MyWolfConfig.SitdownTime > 0 && SitTimer <= 0) {
        Wolf.setSitting(true);
      }
      if (Time2HPregen <= 0) {
        Time2HPregen=Healthregen;
        if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"") && getHealth() < HealthMax) {
          setHealth(getHealth() + 1);
        }
      }
      if (isPickup) {
        for (        Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
          if (e instanceof Item) {
            Item item=(Item)e;
            PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(getOwner(),item,item.getItemStack().getAmount());
            MyWolfUtil.getServer().getPluginManager().callEvent(ppievent);
            if (ppievent.isCancelled()) {
              continue;
            }
            int ItemID=item.getItemStack().getTypeId();
            int ItemDuarbility=item.getItemStack().getDurability();
            int ItemAmount=item.getItemStack().getAmount();
            int ItemMaxStack=item.getItemStack().getMaxStackSize();
            for (int i=0; i < inv.getSize(); i++) {
              if (inv.getItem(i) != null && inv.getItem(i).id == ItemID && inv.getItem(i).damage == ItemDuarbility && inv.getItem(i).count < ItemMaxStack) {
                if (ItemAmount >= ItemMaxStack - inv.getItem(i).count) {
                  ItemAmount=ItemAmount - (ItemMaxStack - inv.getItem(i).count);
                  inv.getItem(i).count=ItemMaxStack;
                }
 else {
                  inv.getItem(i).count+=ItemAmount;
                  ItemAmount=0;
                  break;
                }
              }
            }
            for (int i=0; i < inv.getSize(); i++) {
              if (ItemAmount <= 0) {
                break;
              }
              if (inv.getItem(i) == null) {
                if (ItemAmount <= ItemMaxStack) {
                  inv.setItem(i,new ItemStack(ItemID,ItemAmount,ItemDuarbility));
                  ItemAmount=0;
                }
 else {
                  inv.setItem(i,new ItemStack(ItemID,ItemMaxStack,ItemDuarbility));
                  ItemAmount-=ItemMaxStack;
                }
              }
            }
            if (ItemAmount == 0) {
              e.remove();
            }
 else {
              item.getItemStack().setAmount(ItemAmount);
            }
          }
        }
      }
      if (Behavior == BehaviorState.Aggressive) {
        if (Wolf.getTarget() == null || Wolf.getTarget().isDead()) {
          for (          Entity e : Wolf.getNearbyEntities(10,10,10)) {
            if (MyWolfUtil.getCreatureType(e) != null) {
              Wolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
    if (Status == WolfState.Dead) {
      RespawnTime--;
      if (RespawnTime <= 0) {
        RespawnWolf();
      }
    }
  }
}","public void run(){
  if (Status == WolfState.Despawned || getOwner() == null) {
    StopTimer();
  }
 else {
    if (Status == WolfState.Here) {
      Time2HPregen--;
      SitTimer--;
      if (MyWolfConfig.SitdownTime > 0 && SitTimer <= 0) {
        Wolf.setSitting(true);
      }
      if (Time2HPregen <= 0) {
        Time2HPregen=Healthregen;
        if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"") && getHealth() < HealthMax) {
          setHealth(getHealth() + 1);
        }
      }
      if (isPickup) {
        for (        Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
          if (e instanceof Item) {
            Item item=(Item)e;
            PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(getOwner(),item,item.getItemStack().getAmount());
            MyWolfUtil.getServer().getPluginManager().callEvent(ppievent);
            if (ppievent.isCancelled()) {
              continue;
            }
            int ItemID=item.getItemStack().getTypeId();
            int ItemDuarbility=item.getItemStack().getDurability();
            int ItemAmount=item.getItemStack().getAmount();
            int ItemMaxStack=item.getItemStack().getMaxStackSize();
            for (int i=0; i < inv.getSize(); i++) {
              if (inv.getItem(i) != null && inv.getItem(i).id == ItemID && inv.getItem(i).getData() == ItemDuarbility && inv.getItem(i).count < ItemMaxStack) {
                if (ItemAmount >= ItemMaxStack - inv.getItem(i).count) {
                  ItemAmount=ItemAmount - (ItemMaxStack - inv.getItem(i).count);
                  inv.getItem(i).count=ItemMaxStack;
                }
 else {
                  inv.getItem(i).count+=ItemAmount;
                  ItemAmount=0;
                  break;
                }
              }
            }
            for (int i=0; i < inv.getSize(); i++) {
              if (ItemAmount <= 0) {
                break;
              }
              if (inv.getItem(i) == null) {
                if (ItemAmount <= ItemMaxStack) {
                  inv.setItem(i,new ItemStack(ItemID,ItemAmount,ItemDuarbility));
                  ItemAmount=0;
                }
 else {
                  inv.setItem(i,new ItemStack(ItemID,ItemMaxStack,ItemDuarbility));
                  ItemAmount-=ItemMaxStack;
                }
              }
            }
            if (ItemAmount == 0) {
              e.remove();
            }
 else {
              item.getItemStack().setAmount(ItemAmount);
            }
          }
        }
      }
      if (Behavior == BehaviorState.Aggressive) {
        if (Wolf.getTarget() == null || Wolf.getTarget().isDead()) {
          for (          Entity e : Wolf.getNearbyEntities(10,10,10)) {
            if (MyWolfUtil.getCreatureType(e) != null) {
              Wolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
    if (Status == WolfState.Dead) {
      RespawnTime--;
      if (RespawnTime <= 0) {
        RespawnWolf();
      }
    }
  }
}",0.9975324888962
187676,"public void Timer(){
  if (Status != WolfState.Despawned) {
    if (Timer != -1) {
      StopTimer();
    }
    Timer=MyWolfPlugin.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(MyWolfPlugin.Plugin,new Runnable(){
      int Time2HPregen=Healthregen;
      public void run(){
        if (Status == WolfState.Despawned || getOwner() == null) {
          StopTimer();
        }
 else {
          if (Status == WolfState.Here) {
            Time2HPregen--;
            SitTimer--;
            if (MyWolfConfig.SitdownTime > 0 && SitTimer <= 0) {
              Wolf.setSitting(true);
            }
            if (Time2HPregen <= 0) {
              Time2HPregen=Healthregen;
              if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"") && getHealth() < HealthMax) {
                setHealth(getHealth() + 1);
              }
            }
            if (isPickup) {
              for (              Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(getOwner(),item,item.getItemStack().getAmount());
                  MyWolfUtil.getServer().getPluginManager().callEvent(ppievent);
                  if (ppievent.isCancelled()) {
                    continue;
                  }
                  int ItemID=item.getItemStack().getTypeId();
                  int ItemDuarbility=item.getItemStack().getDurability();
                  int ItemAmount=item.getItemStack().getAmount();
                  int ItemMaxStack=item.getItemStack().getMaxStackSize();
                  for (int i=0; i < inv.getSize(); i++) {
                    if (inv.getItem(i) != null && inv.getItem(i).id == ItemID && inv.getItem(i).damage == ItemDuarbility && inv.getItem(i).count < ItemMaxStack) {
                      if (ItemAmount >= ItemMaxStack - inv.getItem(i).count) {
                        ItemAmount=ItemAmount - (ItemMaxStack - inv.getItem(i).count);
                        inv.getItem(i).count=ItemMaxStack;
                      }
 else {
                        inv.getItem(i).count+=ItemAmount;
                        ItemAmount=0;
                        break;
                      }
                    }
                  }
                  for (int i=0; i < inv.getSize(); i++) {
                    if (ItemAmount <= 0) {
                      break;
                    }
                    if (inv.getItem(i) == null) {
                      if (ItemAmount <= ItemMaxStack) {
                        inv.setItem(i,new ItemStack(ItemID,ItemAmount,ItemDuarbility));
                        ItemAmount=0;
                      }
 else {
                        inv.setItem(i,new ItemStack(ItemID,ItemMaxStack,ItemDuarbility));
                        ItemAmount-=ItemMaxStack;
                      }
                    }
                  }
                  if (ItemAmount == 0) {
                    e.remove();
                  }
 else {
                    item.getItemStack().setAmount(ItemAmount);
                  }
                }
              }
            }
            if (Behavior == BehaviorState.Aggressive) {
              if (Wolf.getTarget() == null || Wolf.getTarget().isDead()) {
                for (                Entity e : Wolf.getNearbyEntities(10,10,10)) {
                  if (MyWolfUtil.getCreatureType(e) != null) {
                    Wolf.setTarget((LivingEntity)e);
                  }
                }
              }
            }
          }
          if (Status == WolfState.Dead) {
            RespawnTime--;
            if (RespawnTime <= 0) {
              RespawnWolf();
            }
          }
        }
      }
    }
,0L,20L);
  }
}","public void Timer(){
  if (Status != WolfState.Despawned) {
    if (Timer != -1) {
      StopTimer();
    }
    Timer=MyWolfPlugin.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(MyWolfPlugin.Plugin,new Runnable(){
      int Time2HPregen=Healthregen;
      public void run(){
        if (Status == WolfState.Despawned || getOwner() == null) {
          StopTimer();
        }
 else {
          if (Status == WolfState.Here) {
            Time2HPregen--;
            SitTimer--;
            if (MyWolfConfig.SitdownTime > 0 && SitTimer <= 0) {
              Wolf.setSitting(true);
            }
            if (Time2HPregen <= 0) {
              Time2HPregen=Healthregen;
              if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"") && getHealth() < HealthMax) {
                setHealth(getHealth() + 1);
              }
            }
            if (isPickup) {
              for (              Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  PlayerPickupItemEvent ppievent=new PlayerPickupItemEvent(getOwner(),item,item.getItemStack().getAmount());
                  MyWolfUtil.getServer().getPluginManager().callEvent(ppievent);
                  if (ppievent.isCancelled()) {
                    continue;
                  }
                  int ItemID=item.getItemStack().getTypeId();
                  int ItemDuarbility=item.getItemStack().getDurability();
                  int ItemAmount=item.getItemStack().getAmount();
                  int ItemMaxStack=item.getItemStack().getMaxStackSize();
                  for (int i=0; i < inv.getSize(); i++) {
                    if (inv.getItem(i) != null && inv.getItem(i).id == ItemID && inv.getItem(i).getData() == ItemDuarbility && inv.getItem(i).count < ItemMaxStack) {
                      if (ItemAmount >= ItemMaxStack - inv.getItem(i).count) {
                        ItemAmount=ItemAmount - (ItemMaxStack - inv.getItem(i).count);
                        inv.getItem(i).count=ItemMaxStack;
                      }
 else {
                        inv.getItem(i).count+=ItemAmount;
                        ItemAmount=0;
                        break;
                      }
                    }
                  }
                  for (int i=0; i < inv.getSize(); i++) {
                    if (ItemAmount <= 0) {
                      break;
                    }
                    if (inv.getItem(i) == null) {
                      if (ItemAmount <= ItemMaxStack) {
                        inv.setItem(i,new ItemStack(ItemID,ItemAmount,ItemDuarbility));
                        ItemAmount=0;
                      }
 else {
                        inv.setItem(i,new ItemStack(ItemID,ItemMaxStack,ItemDuarbility));
                        ItemAmount-=ItemMaxStack;
                      }
                    }
                  }
                  if (ItemAmount == 0) {
                    e.remove();
                  }
 else {
                    item.getItemStack().setAmount(ItemAmount);
                  }
                }
              }
            }
            if (Behavior == BehaviorState.Aggressive) {
              if (Wolf.getTarget() == null || Wolf.getTarget().isDead()) {
                for (                Entity e : Wolf.getNearbyEntities(10,10,10)) {
                  if (MyWolfUtil.getCreatureType(e) != null) {
                    Wolf.setTarget((LivingEntity)e);
                  }
                }
              }
            }
          }
          if (Status == WolfState.Dead) {
            RespawnTime--;
            if (RespawnTime <= 0) {
              RespawnWolf();
            }
          }
        }
      }
    }
,0L,20L);
  }
}",0.998037933289732
187677,"@Override public void activate(MyWolf wolf,Object args){
  if (!MyWolfUtil.hasSkill(wolf.Abilities,""String_Node_Str"")) {
    wolf.Abilities.put(""String_Node_Str"",true);
  }
  if (wolf.inv.getSize() >= 54) {
    return;
  }
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + (wolf.inv.getSize() + 9))) {
    return;
  }
  CustomMCInventory newinv=new CustomMCInventory(wolf.inv.getSize() + 9,wolf.Name + ""String_Node_Str"");
  for (int i=0; i < wolf.inv.getSize(); i++) {
    newinv.setItem(i,wolf.inv.getItem(i));
  }
  wolf.inv=newinv;
  wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.inv.getSize()));
}","@Override public void activate(MyWolf wolf,Object args){
  if (!MyWolfUtil.hasSkill(wolf.Abilities,""String_Node_Str"")) {
    wolf.Abilities.put(""String_Node_Str"",true);
  }
  if (wolf.inv.getSize() >= 54) {
    return;
  }
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + (wolf.inv.getSize() + 9))) {
    return;
  }
  CustomMCInventory newinv=new CustomMCInventory(wolf.inv.getSize() + 9,""String_Node_Str"");
  for (int i=0; i < wolf.inv.getSize(); i++) {
    newinv.setItem(i,wolf.inv.getItem(i));
  }
  wolf.inv=newinv;
  wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.inv.getSize()));
}",0.9919137466307276
187678,"@EventHandler() public void onEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    MyWolf wolf : ConfigBuffer.mWolves.values()) {
      if (wolf.getID() == event.getEntity().getEntityId()) {
        wolf.Status=WolfState.Dead;
        wolf.RespawnTime=MyWolfConfig.RespawnTimeFixed + (wolf.Experience.getLevel() * MyWolfConfig.RespawnTimeFactor);
        SendDeathMessage(event);
        wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.RespawnTime)));
        break;
      }
    }
  }
  if (MyWolfConfig.LevelSystem && event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    if (((EntityDamageByEntityEvent)event.getEntity().getLastDamageCause()).getDamager() instanceof Wolf) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      for (      MyWolf wolf : ConfigBuffer.mWolves.values()) {
        if (wolf.getID() == e.getDamager().getEntityId()) {
          if (MyWolfUtil.getCreatureType(e.getEntity()) != null) {
            if (MyWolfExperience.defaultEXPvalues) {
              wolf.Experience.addExp((double)event.getDroppedExp());
            }
 else {
              wolf.Experience.addEXP(MyWolfUtil.getCreatureType(e.getEntity()));
            }
          }
        }
      }
    }
  }
}","@EventHandler() public void onEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    MyWolf wolf : ConfigBuffer.mWolves.values()) {
      if (wolf.getID() == event.getEntity().getEntityId()) {
        wolf.Status=WolfState.Dead;
        wolf.RespawnTime=MyWolfConfig.RespawnTimeFixed + (wolf.Experience.getLevel() * MyWolfConfig.RespawnTimeFactor);
        SendDeathMessage(event);
        wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.RespawnTime)));
        break;
      }
    }
  }
  if (MyWolfConfig.LevelSystem && event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    if (((EntityDamageByEntityEvent)event.getEntity().getLastDamageCause()).getDamager() instanceof Wolf) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      for (      MyWolf wolf : ConfigBuffer.mWolves.values()) {
        if (wolf.getID() == e.getDamager().getEntityId()) {
          if (MyWolfUtil.getCreatureType(e.getEntity()) != null) {
            if (MyWolfExperience.defaultEXPvalues) {
              wolf.Experience.addExp((double)event.getDroppedExp());
            }
 else {
              wolf.Experience.addExp(MyWolfUtil.getCreatureType(e.getEntity()));
            }
          }
        }
      }
    }
  }
}",0.9986235375086028
187679,"@EventHandler() public void onLevelUp(MyWolfLevelUpEvent eventMyWolf){
  if (eventMyWolf.getWolf().Status == WolfState.Here && MyWolfConfig.SpoutSounds) {
    SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,(SpoutPlayer)eventMyWolf.getOwner(),MyWolfConfig.SpoutSoundLevelup,true);
  }
  if (ConfigBuffer.SkillPerLevel.containsKey(eventMyWolf.getLevel())) {
    for (    String skill : ConfigBuffer.SkillPerLevel.get(eventMyWolf.getLevel())) {
      if (ConfigBuffer.RegisteredSkills.containsKey(skill)) {
        ConfigBuffer.RegisteredSkills.get(skill).activate(eventMyWolf.getWolf(),0);
      }
    }
  }
}","@EventHandler() public void onLevelUp(MyWolfLevelUpEvent eventMyWolf){
  if (eventMyWolf.getWolf().Status == WolfState.Here && MyWolfConfig.SpoutSounds) {
    SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,(SpoutPlayer)eventMyWolf.getOwner(),MyWolfConfig.SpoutSoundLevelup,true);
    eventMyWolf.getWolf().sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",eventMyWolf.getWolf().Name).replace(""String_Node_Str"",""String_Node_Str"" + eventMyWolf.getLevel()));
  }
  if (ConfigBuffer.SkillPerLevel.containsKey(eventMyWolf.getLevel())) {
    for (    String skill : ConfigBuffer.SkillPerLevel.get(eventMyWolf.getLevel())) {
      if (ConfigBuffer.RegisteredSkills.containsKey(skill)) {
        MyWolfUtil.Log.info(skill);
        ConfigBuffer.RegisteredSkills.get(skill).activate(eventMyWolf.getWolf(),0);
      }
    }
  }
}",0.8212180746561886
187680,"public MyWolf(String Owner){
  this.Owner=Owner;
  if (MyWolfConfig.LevelSystem)   this.inv=new CustomMCInventory(0,Owner);
 else   this.inv=new CustomMCInventory(54,Owner);
  Experience=new MyWolfExperience(this);
}","public MyWolf(String Owner){
  this.Owner=Owner;
  if (MyWolfConfig.LevelSystem) {
    this.inv=new CustomMCInventory(0,Owner);
  }
 else {
    this.inv=new CustomMCInventory(54,Owner);
  }
  Experience=new MyWolfExperience(this);
}",0.9464285714285714
187681,"public void onEnable(){
  Plugin=this;
  MyWolfPlayerListener playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyWolfVehicleListener vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyWolfWorldListener worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  MyWolfEntityListener entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyWolfLevelUpListener levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  MyWolfInventoryListener inventoryListener=new MyWolfInventoryListener();
  getServer().getPluginManager().registerEvents(inventoryListener,this);
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfHelp());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInventory());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfPickup());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfBehavior());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCompass());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInfo());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfSkin());
  if (MyWolfConfig.LevelSystem) {
    getCommand(""String_Node_Str"").setExecutor(new MyWolfEXP());
  }
  new Inventory();
  new HP();
  new HPregeneration();
  new Pickup();
  new Behavior();
  new Damage();
  new MyWolfSkill(""String_Node_Str"").registerSkill();
  MyWolfConfig.Config=this.getConfig();
  MyWolfConfig.setStandart();
  MyWolfConfig.loadConfiguration();
  if (MyWolfConfig.PermissionsBukkit) {
    MyWolfPermissions.setup(PermissionsType.BukkitPermissions);
  }
 else {
    MyWolfPermissions.setup();
  }
  ConfigBuffer.lv=new MyWolfLanguage(new MyWolfConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  ConfigBuffer.lv.setDefault();
  ConfigBuffer.lv.loadVariables();
  ConfigBuffer.WolvesConfig=new MyWolfConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  LoadWolves(ConfigBuffer.WolvesConfig);
  if (MyWolfConfig.LevelSystem) {
    try {
      MyWolfExperience.JSreader=MyWolfUtil.readFileAsString(MyWolfPlugin.Plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    }
 catch (    Exception e) {
      MyWolfExperience.JSreader=null;
      MyWolfUtil.Log.info(""String_Node_Str"");
    }
  }
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (ConfigBuffer.mWolves.containsKey(p.getName()) && p.isOnline()) {
      ConfigBuffer.mWolves.get(p.getName()).createWolf(ConfigBuffer.mWolves.get(p.getName()).isSitting());
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + ConfigBuffer.pdfFile.getName() + ""String_Node_Str""+ ConfigBuffer.pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  Plugin=this;
  MyWolfPlayerListener playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvents(playerListener,this);
  MyWolfVehicleListener vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvents(vehicleListener,this);
  MyWolfWorldListener worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvents(worldListener,this);
  MyWolfEntityListener entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvents(entityListener,this);
  MyWolfLevelUpListener levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvents(levelupListener,this);
  MyWolfInventoryListener inventoryListener=new MyWolfInventoryListener();
  getServer().getPluginManager().registerEvents(inventoryListener,this);
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfHelp());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInventory());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfPickup());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfBehavior());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCompass());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInfo());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfSkin());
  if (MyWolfConfig.LevelSystem) {
    getCommand(""String_Node_Str"").setExecutor(new MyWolfEXP());
  }
  new Inventory();
  new HP();
  new HPregeneration();
  new Pickup();
  new Behavior();
  new Damage();
  new Control();
  MyWolfConfig.Config=this.getConfig();
  MyWolfConfig.setDefault();
  MyWolfConfig.loadConfiguration();
  if (MyWolfConfig.PermissionsBukkit) {
    MyWolfPermissions.setup(PermissionsType.BukkitPermissions);
  }
 else {
    MyWolfPermissions.setup();
  }
  ConfigBuffer.lv=new MyWolfLanguage(new MyWolfConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  ConfigBuffer.lv.loadVariables();
  ConfigBuffer.WolvesConfig=new MyWolfConfiguration(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
  LoadWolves(ConfigBuffer.WolvesConfig);
  if (MyWolfConfig.LevelSystem) {
    try {
      MyWolfExperience.JSreader=MyWolfUtil.readFileAsString(MyWolfPlugin.Plugin.getDataFolder().getPath() + File.separator + ""String_Node_Str"");
    }
 catch (    Exception e) {
      MyWolfExperience.JSreader=null;
      MyWolfUtil.Log.info(""String_Node_Str"");
    }
  }
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (ConfigBuffer.mWolves.containsKey(p.getName()) && p.isOnline()) {
      ConfigBuffer.mWolves.get(p.getName()).createWolf(ConfigBuffer.mWolves.get(p.getName()).isSitting());
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + ConfigBuffer.pdfFile.getName() + ""String_Node_Str""+ ConfigBuffer.pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9850366125437758
187682,"public MyWolfExperience(MyWolf Wolf){
  this.Wolf=Wolf;
}","public MyWolfExperience(MyWolf Wolf){
  this.Wolf=Wolf;
  MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(new MyWolfLevelUpEvent(Wolf,1));
}",0.5428571428571428
187683,"public void setExp(double Exp){
  MyWolfExpEvent event=new MyWolfExpEvent(Wolf,this.getExp(),Exp);
  MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return;
  }
  int tmplvl=getLevel();
  this.Exp=event.getEXP();
  for (int i=tmplvl; i < getLevel(); i++) {
    MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(new MyWolfLevelUpEvent(Wolf,i + 1));
  }
}","public void setExp(double Exp){
  MyWolfExpEvent event=new MyWolfExpEvent(Wolf,this.getExp(),Exp);
  MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return;
  }
  int tmplvl=getLevel();
  MyWolfUtil.Log.info(""String_Node_Str"" + tmplvl);
  MyWolfUtil.Log.info(""String_Node_Str"" + this.Exp);
  this.Exp=event.getEXP();
  MyWolfUtil.Log.info(""String_Node_Str"" + this.Exp);
  MyWolfUtil.Log.info(""String_Node_Str"" + getLevel());
  for (int i=tmplvl; i < getLevel(); i++) {
    MyWolfUtil.Log.info(""String_Node_Str"" + (i + 1));
    MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(new MyWolfLevelUpEvent(Wolf,i + 1));
  }
}",0.7586206896551724
187684,"public void addExp(double Exp){
  MyWolfExpEvent event=new MyWolfExpEvent(Wolf,this.Exp,this.Exp+=Exp);
  MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return;
  }
  int tmplvl=getLevel();
  this.Exp=event.getEXP();
  for (int i=tmplvl; i < getLevel(); i++) {
    MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(new MyWolfLevelUpEvent(Wolf,i + 1));
  }
}","public void addExp(CreatureType type){
  if (MobEXP.containsKey(type)) {
    MyWolfExpEvent event=new MyWolfExpEvent(Wolf,this.Exp,MobEXP.get(type) + this.Exp);
    MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(event);
    if (event.isCancelled()) {
      return;
    }
    int tmplvl=getLevel();
    MyWolfUtil.Log.info(""String_Node_Str"" + tmplvl);
    MyWolfUtil.Log.info(""String_Node_Str"" + this.Exp);
    this.Exp=event.getEXP();
    MyWolfUtil.Log.info(""String_Node_Str"" + this.Exp);
    MyWolfUtil.Log.info(""String_Node_Str"" + getLevel());
    for (int i=tmplvl; i < getLevel(); i++) {
      MyWolfUtil.Log.info(""String_Node_Str"" + (i + 1));
      MyWolfPlugin.Plugin.getServer().getPluginManager().callEvent(new MyWolfLevelUpEvent(Wolf,i + 1));
    }
  }
}",0.601165695253955
187685,"public double getExp(){
  return Exp;
}","public double getExp(){
  return this.Exp;
}",0.9397590361445785
187686,"@Override public void activate(MyWolf wolf,Object args){
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name)) {
    return;
  }
  wolf.Healthregen-=1;
  wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name)));
}","@Override public void activate(MyWolf wolf,Object args){
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name)) {
    return;
  }
  if (wolf.Healthregen > 1) {
    wolf.Healthregen-=1;
  }
  wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Healthregen)));
}",0.8599439775910365
187687,"@Override public void run(MyWolf wolf,Object args){
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name)) {
    return;
  }
  if (MyWolfSkill.hasSkill(wolf.Abilities,""String_Node_Str"")) {
    if (args != null && args instanceof Boolean) {
      wolf.isPickup=(Boolean)args;
    }
 else {
      if (wolf.isPickup) {
        wolf.isPickup=false;
        wolf.sendMessageToOwner(""String_Node_Str"");
      }
 else {
        wolf.isPickup=true;
        wolf.sendMessageToOwner(""String_Node_Str"");
      }
    }
  }
}","@Override public void run(MyWolf wolf,Object args){
  if (!MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name)) {
    return;
  }
  if (MyWolfSkill.hasSkill(wolf.Abilities,""String_Node_Str"")) {
    if (args != null && args instanceof Boolean) {
      wolf.isPickup=(Boolean)args;
    }
 else {
      if (wolf.isPickup) {
        wolf.isPickup=false;
        wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name));
      }
 else {
        wolf.isPickup=true;
        wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name));
      }
    }
  }
}",0.8077544426494345
187688,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      MyWolf Wolf=ConfigBuffer.mWolves.get(player.getName());
      sender.sendMessage(Wolf.Status.toString());
      if (!MyWolfPermissions.has(player,""String_Node_Str"")) {
        return true;
      }
      if (Wolf.Status == WolfState.Here) {
        if (MyWolfConfig.SpoutSounds) {
          SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,SpoutCraftPlayer.getPlayer((Player)sender),MyWolfConfig.SpoutSoundCall,true);
        }
        if (Wolf.getLocation().getWorld() != player.getLocation().getWorld()) {
          Wolf.removeWolf();
          Wolf.setLocation(player.getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.Wolf.teleport(player);
        }
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Despawned) {
        if (MyWolfConfig.SpoutSounds) {
          SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,SpoutCraftPlayer.getPlayer((Player)sender),MyWolfConfig.SpoutSoundCall,true);
        }
        Wolf.setLocation(player.getLocation());
        Wolf.createWolf(false);
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      MyWolf Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (!MyWolfPermissions.has(player,""String_Node_Str"")) {
        return true;
      }
      if (Wolf.Status == WolfState.Here) {
        if (MyWolfConfig.SpoutSounds) {
          SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,SpoutCraftPlayer.getPlayer((Player)sender),MyWolfConfig.SpoutSoundCall,true);
        }
        if (Wolf.getLocation().getWorld() != player.getLocation().getWorld()) {
          Wolf.removeWolf();
          Wolf.setLocation(player.getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.Wolf.teleport(player);
        }
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Despawned) {
        if (MyWolfConfig.SpoutSounds) {
          SpoutManager.getSoundManager().playCustomMusic(MyWolfPlugin.Plugin,SpoutCraftPlayer.getPlayer((Player)sender),MyWolfConfig.SpoutSoundCall,true);
        }
        Wolf.setLocation(player.getLocation());
        Wolf.createWolf(false);
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.9882408278457196
187689,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String playerName;
    if (args != null && args.length > 0)     playerName=args[0];
 else     playerName=sender.getName();
    if (ConfigBuffer.mWolves.containsKey(playerName)) {
      MyWolf wolf=ConfigBuffer.mWolves.get(playerName);
      String msg;
      if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
        msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
 else       if (wolf.getHealth() > wolf.HealthMax / 3) {
        msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
 else {
        msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
      player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
      if (MyWolfConfig.LevelSystem) {
        player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp())).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Experience.getLevel()).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getrequireEXP())).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp() * 100 / wolf.Experience.getrequireEXP())));
      }
      if (args != null && args.length > 0)       player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",playerName));
      return true;
    }
 else {
      if (args != null && args.length > 0)       sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",playerName)));
 else       sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    String playerName;
    if (args != null && args.length > 0)     playerName=args[0];
 else     playerName=sender.getName();
    if (ConfigBuffer.mWolves.containsKey(playerName)) {
      MyWolf wolf=ConfigBuffer.mWolves.get(playerName);
      String msg;
      if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
        msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
 else       if (wolf.getHealth() > wolf.HealthMax / 3) {
        msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
 else {
        msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
      }
      player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
      if (MyWolfConfig.LevelSystem) {
        int lvl=wolf.Experience.getLevel();
        double EXP=wolf.Experience.getActualEXP();
        double reqEXP=wolf.Experience.getrequireEXP();
        player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP)).replace(""String_Node_Str"",""String_Node_Str"" + lvl).replace(""String_Node_Str"",String.format(""String_Node_Str"",reqEXP)).replace(""String_Node_Str"",String.format(""String_Node_Str"",EXP * 100 / reqEXP)));
      }
      if (args != null && args.length > 0)       player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",playerName));
      return true;
    }
 else {
      if (args != null && args.length > 0)       sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",playerName)));
 else       sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.8789196612497139
187690,"public void onEntityDamage(final EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (ConfigBuffer.mWolves.containsKey(player.getName()) == false) {
          if (MyWolfPermissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != MyWolfConfig.LeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            ConfigBuffer.mWolves.put(player.getName(),new MyWolf(player.getName()));
            ConfigBuffer.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            MyWolfPlugin.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            player.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
          }
        }
        String WolfOwner=null;
        for (        String owner : ConfigBuffer.mWolves.keySet()) {
          if (ConfigBuffer.mWolves.get(owner).getID() == event.getEntity().getEntityId()) {
            WolfOwner=owner;
            break;
          }
        }
        if (WolfOwner != null && WolfOwner.equals(player.getName())) {
          MyWolf wolf=ConfigBuffer.mWolves.get(WolfOwner);
          wolf.ResetSitTimer();
          wolf.SetName();
          if (player.getItemInHand().getType() == MyWolfConfig.LeashItem) {
            String msg;
            if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
              msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else             if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
              msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else {
              msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp())).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Experience.getLevel()).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getrequireEXP())).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp() * 100 / wolf.Experience.getrequireEXP())));
            if (wolf.Wolf.isSitting()) {
              event.setCancelled(true);
              wolf.Wolf.setSitting(true);
            }
 else {
              event.setCancelled(true);
            }
          }
        }
        for (        MyWolf wolf : ConfigBuffer.mWolves.values()) {
          if (wolf.getID() == event.getEntity().getEntityId()) {
            wolf.ResetSitTimer();
            if (wolf.getHealth() > wolf.HealthMax) {
              wolf.setHealth(wolf.HealthMax);
            }
            if (event.isCancelled() == false && MyWolfUtil.getPVP(event.getEntity().getLocation()) == false) {
              event.setCancelled(true);
            }
            if (event.isCancelled() == false && event.getDamage() < wolf.getHealth()) {
              int demage=event.getDamage();
              if (wolf.getHealth() - 1 <= 0) {
                wolf.setHealth(wolf.getHealth() + 1);
              }
              event.setDamage(1);
              wolf.Demage(demage);
            }
          }
        }
      }
    }
  }
}","public void onEntityDamage(final EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (ConfigBuffer.mWolves.containsKey(player.getName()) == false) {
          if (MyWolfPermissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != MyWolfConfig.LeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            ConfigBuffer.mWolves.put(player.getName(),new MyWolf(player.getName()));
            ConfigBuffer.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            MyWolfPlugin.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            player.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
          }
        }
        String WolfOwner=null;
        for (        String owner : ConfigBuffer.mWolves.keySet()) {
          if (ConfigBuffer.mWolves.get(owner).getID() == event.getEntity().getEntityId()) {
            WolfOwner=owner;
            break;
          }
        }
        if (WolfOwner != null && WolfOwner.equals(player.getName())) {
          MyWolf wolf=ConfigBuffer.mWolves.get(WolfOwner);
          wolf.ResetSitTimer();
          wolf.SetName();
          if (player.getItemInHand().getType() == MyWolfConfig.LeashItem) {
            String msg;
            if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
              msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else             if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
              msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else {
              msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp())).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Experience.getLevel()).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getrequireEXP())).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp() * 100 / wolf.Experience.getrequireEXP())));
            if (wolf.Wolf.isSitting()) {
              event.setCancelled(true);
              wolf.Wolf.setSitting(true);
            }
 else {
              event.setCancelled(true);
            }
          }
        }
        for (        MyWolf wolf : ConfigBuffer.mWolves.values()) {
          if (wolf.getID() == event.getEntity().getEntityId()) {
            wolf.ResetSitTimer();
            if (wolf.getHealth() > wolf.HealthMax) {
              wolf.setHealth(wolf.HealthMax);
            }
            if (event.isCancelled() == false && MyWolfUtil.getPVP(event.getEntity().getLocation()) == false) {
              event.setCancelled(true);
            }
            if (event.isCancelled() == false) {
              wolf.SetName(wolf.getHealth() - event.getDamage());
            }
          }
        }
      }
    }
  }
}",0.9632782101167316
187691,"public void SetName(){
  String NameColor;
  if (MyWolfConfig.NameColor >= 0 && MyWolfConfig.NameColor <= 0xf) {
    NameColor=""String_Node_Str"" + MyWolfConfig.NameColor;
  }
 else {
    if (getHealth() > HealthMax / 3 * 2) {
      NameColor=""String_Node_Str"" + ChatColor.GREEN;
    }
 else     if (getHealth() > HealthMax / 3 * 1) {
      NameColor=""String_Node_Str"" + ChatColor.YELLOW;
    }
 else {
      NameColor=""String_Node_Str"" + ChatColor.RED;
    }
  }
  if (Status == WolfState.Here) {
    BukkitContrib.getAppearanceManager().setGlobalTitle(Wolf,NameColor + this.Name);
  }
}","public void SetName(int HP){
  String NameColor;
  if (MyWolfConfig.NameColor >= 0 && MyWolfConfig.NameColor <= 0xf) {
    NameColor=""String_Node_Str"" + MyWolfConfig.NameColor;
  }
 else {
    if (HP > HealthMax / 3 * 2) {
      NameColor=""String_Node_Str"" + ChatColor.GREEN;
    }
 else     if (HP > HealthMax / 3 * 1) {
      NameColor=""String_Node_Str"" + ChatColor.YELLOW;
    }
 else {
      NameColor=""String_Node_Str"" + ChatColor.RED;
    }
  }
  if (Status == WolfState.Here) {
    BukkitContrib.getAppearanceManager().setGlobalTitle(Wolf,NameColor + this.Name);
  }
}",0.9759036144578314
187692,"public int getHealth(){
  return HealthNow;
}","public int getHealth(){
  if (Status == WolfState.Here) {
    return Wolf.getHealth();
  }
 else {
    return HealthNow;
  }
}",0.5263157894736842
187693,"@Override public void activate(MyWolf wolf,Object args){
  if (MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name) == false) {
    return;
  }
  wolf.HealthMax+=1;
  wolf.setHealth(wolf.HealthMax);
  wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name)));
}","@Override public void activate(MyWolf wolf,Object args){
  if (MyWolfPermissions.has(wolf.getOwner(),""String_Node_Str"" + this.Name) == false) {
    return;
  }
  if (wolf.HealthMax < 20) {
    wolf.HealthMax+=1;
    wolf.setHealth(wolf.HealthMax);
    wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name)));
  }
}",0.946793997271487
187694,"public static boolean isNPC(Player player){
  Plugin plugin=server.getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    int version=Integer.parseInt(plugin.getDescription().getVersion().replace(""String_Node_Str"",""String_Node_Str""),109);
    if (version <= 108) {
      return com.fullwall.Citizens.NPCs.NPCManager.isNPC(player);
    }
 else {
      return com.citizens.NPCs.NPCManager.isNPC(player);
    }
  }
  return false;
}","public static boolean isNPC(Player player){
  Plugin plugin=server.getPluginManager().getPlugin(""String_Node_Str"");
  if (plugin != null) {
    return com.citizens.npcs.NPCManager.isNPC(player);
  }
  return false;
}",0.5967016491754122
187695,"public void setStandart(){
  Config.setProperty(""String_Node_Str"",287);
  Config.setProperty(""String_Node_Str"",340);
  Config.setProperty(""String_Node_Str"",54);
  Config.setProperty(""String_Node_Str"",357);
  Config.setProperty(""String_Node_Str"",354);
  Config.setProperty(""String_Node_Str"",287);
  Config.setProperty(""String_Node_Str"",false);
  Config.setProperty(""String_Node_Str"",false);
  Config.setProperty(""String_Node_Str"",false);
  Config.setProperty(""String_Node_Str"",2);
  Config.setProperty(""String_Node_Str"",331);
  Config.setProperty(""String_Node_Str"",5);
  Config.setProperty(""String_Node_Str"",20);
  Config.setProperty(""String_Node_Str"",-1);
  Config.save();
}","public void setStandart(){
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",340);
  setProperty(""String_Node_Str"",54);
  setProperty(""String_Node_Str"",357);
  setProperty(""String_Node_Str"",354);
  setProperty(""String_Node_Str"",287);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",false);
  setProperty(""String_Node_Str"",2);
  setProperty(""String_Node_Str"",331);
  setProperty(""String_Node_Str"",5);
  setProperty(""String_Node_Str"",20);
  setProperty(""String_Node_Str"",-1);
  Config.save();
}",0.9216
187696,"public void onEnable(){
  cb=new ConfigBuffer(this);
  playerListener=new MyWolfPlayerListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  vehicleListener=new MyWolfVehicleListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_ENTER,vehicleListener,Event.Priority.Low,this);
  entityListener=new MyWolfEntityListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  if (cb.Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    inventoryListener=new MyWolfInventoryListener(cb);
    getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,inventoryListener,Event.Priority.Normal,this);
  }
  cb.Permissions.setup();
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInfo());
  cb.cv=new ConfigVariables(this.getConfiguration());
  cb.cv.setStandart();
  cb.cv.loadVariables();
  cb.lv=new MyWolfLanguageVariables(new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"")));
  cb.lv.setStandart();
  cb.lv.loadVariables();
  cb.WolvesConfig=new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  cb.Plugin.LoadWolves();
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (cb.mWolves.containsKey(p.getName()) && p.isOnline() == true)     cb.mWolves.get(p.getName()).createWolf(cb.mWolves.get(p.getName()).isSitting);
  }
  cb.log.info(""String_Node_Str"" + cb.pdfFile.getName() + ""String_Node_Str""+ cb.pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  cb=new ConfigBuffer(this);
  playerListener=new MyWolfPlayerListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  vehicleListener=new MyWolfVehicleListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_ENTER,vehicleListener,Event.Priority.Low,this);
  entityListener=new MyWolfEntityListener(cb);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  if (cb.Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    inventoryListener=new MyWolfInventoryListener(cb);
    getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,inventoryListener,Event.Priority.Normal,this);
  }
  cb.Permissions.setup();
  if (cb.Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null && cb.Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"").getDescription().getVersion().equals(""String_Node_Str"")) {
    cb.hasBukkitContrib=true;
  }
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease(cb));
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInfo());
  cb.cv=new ConfigVariables(this.getConfiguration());
  cb.cv.setStandart();
  cb.cv.loadVariables();
  cb.lv=new MyWolfLanguageVariables(new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"")));
  cb.lv.setStandart();
  cb.lv.loadVariables();
  cb.WolvesConfig=new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  cb.Plugin.LoadWolves();
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (cb.mWolves.containsKey(p.getName()) && p.isOnline() == true)     cb.mWolves.get(p.getName()).createWolf(cb.mWolves.get(p.getName()).isSitting);
  }
  cb.log.info(""String_Node_Str"" + cb.pdfFile.getName() + ""String_Node_Str""+ cb.pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9523628048780488
187697,"private void DisplayName(){
  if (cb.Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    BukkitContrib.getAppearanceManager().setGlobalTitle(MyWolf,ChatColor.AQUA + Name);
  }
}","private void DisplayName(){
  if (cb.hasBukkitContrib) {
    BukkitContrib.getAppearanceManager().setGlobalTitle(MyWolf,ChatColor.AQUA + Name);
  }
}",0.7808988764044944
187698,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cb.mWolves.containsKey(player.getName())) {
      if (cb.Permissions.has(player,""String_Node_Str"") == false) {
        return true;
      }
      if (cb.mWolves.get(player.getName()).isDead == true || cb.mWolves.get(player.getName()).isThere == false) {
        sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_CallFirst));
        return true;
      }
      sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_StopAttack));
      cb.mWolves.get(player.getName()).MyWolf.setTarget((LivingEntity)null);
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_DontHaveWolf));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cb.mWolves.containsKey(player.getName())) {
      if (cb.Permissions.has(player,""String_Node_Str"") == false) {
        return true;
      }
      if (cb.mWolves.get(player.getName()).isDead == true || cb.mWolves.get(player.getName()).isThere == false) {
        sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_CallFirst));
        return true;
      }
      sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_StopAttack).replace(""String_Node_Str"",cb.mWolves.get(player.getName()).Name));
      cb.mWolves.get(player.getName()).MyWolf.setTarget((LivingEntity)null);
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(cb.lv.Msg_DontHaveWolf));
    }
  }
  return true;
}",0.9609140108238124
187699,"public void setStandart(){
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.save();
}","public void setStandart(){
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  setProperty(""String_Node_Str"",""String_Node_Str"");
  Config.save();
}",0.0439013351436976
187700,"public MyWolfLanguage(Configuration cfg){
  Config=cfg;
}","public MyWolfLanguage(Configuration cfg){
  Config=cfg;
  Config.load();
}",0.8702290076335878
187701,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    Wolves wolf : ConfigBuffer.mWolves.values()) {
      if (wolf.getID() == event.getEntity().getEntityId()) {
        if (MyWolfConfig.MaxLives > 0) {
          wolf.Lives-=1;
          if (wolf.Lives <= 0) {
            for (            ItemStack is : wolf.LargeInventory.getContents()) {
              if (is != null) {
                wolf.Wolf.getWorld().dropItem(wolf.getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
              }
            }
            wolf.getOwner().sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name));
            ConfigBuffer.mWolves.remove(wolf.getOwner().getName());
            MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            return;
          }
        }
        wolf.Status=WolfState.Dead;
        wolf.RespawnTime=wolf.Experience.getLevel() * MyWolfConfig.RespawnTimeFactor;
        SendDeathMessage(event);
        break;
      }
    }
  }
 else   if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    if (((EntityDamageByEntityEvent)event.getEntity().getLastDamageCause()).getDamager() instanceof Wolf) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      for (      Wolves wolf : ConfigBuffer.mWolves.values()) {
        if (wolf.getID() == e.getDamager().getEntityId()) {
          if (MyWolfUtil.getCreatureType(e.getEntity()) != null) {
            wolf.Experience.addEXP(MyWolfUtil.getCreatureType(e.getEntity()));
          }
        }
      }
    }
  }
}","@Override public void onEntityDeath(final EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    Wolves wolf : ConfigBuffer.mWolves.values()) {
      if (wolf.getID() == event.getEntity().getEntityId()) {
        if (MyWolfConfig.MaxLives > 0) {
          wolf.Lives-=1;
          if (wolf.Lives <= 0) {
            for (            ItemStack is : wolf.LargeInventory.getContents()) {
              if (is != null) {
                wolf.Wolf.getWorld().dropItem(wolf.getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
              }
            }
            SendDeathMessage(event);
            wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name));
            ConfigBuffer.mWolves.remove(wolf.getOwner().getName());
            MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            return;
          }
        }
        wolf.Status=WolfState.Dead;
        wolf.RespawnTime=wolf.Experience.getLevel() * MyWolfConfig.RespawnTimeFactor;
        SendDeathMessage(event);
        wolf.sendMessageToOwner(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",""String_Node_Str"" + wolf.RespawnTime)));
        break;
      }
    }
  }
 else   if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
    if (((EntityDamageByEntityEvent)event.getEntity().getLastDamageCause()).getDamager() instanceof Wolf) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      for (      Wolves wolf : ConfigBuffer.mWolves.values()) {
        if (wolf.getID() == e.getDamager().getEntityId()) {
          if (MyWolfUtil.getCreatureType(e.getEntity()) != null) {
            wolf.Experience.addEXP(MyWolfUtil.getCreatureType(e.getEntity()));
          }
        }
      }
    }
  }
}",0.9228680065181968
187702,"public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (ConfigBuffer.mWolves.containsKey(player.getName()) == false) {
          if (MyWolfPermissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != MyWolfConfig.LeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            ConfigBuffer.mWolves.put(player.getName(),new Wolves(player.getName()));
            ConfigBuffer.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            player.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
          }
        }
        String WolfOwner=null;
        for (        String owner : ConfigBuffer.mWolves.keySet()) {
          if (ConfigBuffer.mWolves.get(owner).getID() == event.getEntity().getEntityId()) {
            WolfOwner=owner;
            break;
          }
        }
        if (WolfOwner != null && WolfOwner.equals(player.getName())) {
          Wolves wolf=ConfigBuffer.mWolves.get(WolfOwner);
          wolf.ResetSitTimer();
          wolf.SetName();
          if (player.getItemInHand().getType() == MyWolfConfig.LeashItem) {
            String msg;
            if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
              msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else             if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
              msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else {
              msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp())).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Experience.getLevel()).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getrequireEXP())).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp() * 100 / wolf.Experience.getrequireEXP())));
            if (wolf.Wolf.isSitting()) {
              event.setCancelled(true);
              wolf.Wolf.setSitting(true);
            }
 else {
              event.setCancelled(true);
            }
          }
        }
        for (        Wolves wolf : ConfigBuffer.mWolves.values()) {
          if (wolf.getID() == event.getEntity().getEntityId()) {
            wolf.ResetSitTimer();
            if (wolf.getHealth() > wolf.HealthMax) {
              wolf.setHealth(wolf.HealthMax);
            }
            if (event.getDamage() < wolf.getHealth()) {
              wolf.setHealth(wolf.getHealth() + event.getDamage());
              wolf.Demage(event.getDamage());
            }
            if (event.isCancelled() == false && MyWolfUtil.getPVP(event.getEntity().getLocation()) == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}","public void onEntityDamage(final EntityDamageEvent event){
  if (event.getEntity() instanceof Wolf) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (ConfigBuffer.mWolves.containsKey(player.getName()) == false) {
          if (MyWolfPermissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != MyWolfConfig.LeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().getOwnerName();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            ConfigBuffer.mWolves.put(player.getName(),new Wolves(player.getName()));
            ConfigBuffer.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
            player.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
          }
        }
        String WolfOwner=null;
        for (        String owner : ConfigBuffer.mWolves.keySet()) {
          if (ConfigBuffer.mWolves.get(owner).getID() == event.getEntity().getEntityId()) {
            WolfOwner=owner;
            break;
          }
        }
        if (WolfOwner != null && WolfOwner.equals(player.getName())) {
          Wolves wolf=ConfigBuffer.mWolves.get(WolfOwner);
          wolf.ResetSitTimer();
          wolf.SetName();
          if (player.getItemInHand().getType() == MyWolfConfig.LeashItem) {
            String msg;
            if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
              msg=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else             if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
              msg=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
 else {
              msg=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax+ ChatColor.WHITE;
            }
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",msg));
            player.sendMessage(MyWolfUtil.SetColors(""String_Node_Str"").replace(""String_Node_Str"",wolf.Name).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp())).replace(""String_Node_Str"",""String_Node_Str"" + wolf.Experience.getLevel()).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getrequireEXP())).replace(""String_Node_Str"",String.format(""String_Node_Str"",wolf.Experience.getExp() * 100 / wolf.Experience.getrequireEXP())));
            if (wolf.Wolf.isSitting()) {
              event.setCancelled(true);
              wolf.Wolf.setSitting(true);
            }
 else {
              event.setCancelled(true);
            }
          }
        }
        for (        Wolves wolf : ConfigBuffer.mWolves.values()) {
          if (wolf.getID() == event.getEntity().getEntityId()) {
            wolf.ResetSitTimer();
            if (wolf.getHealth() > wolf.HealthMax) {
              wolf.setHealth(wolf.HealthMax);
            }
            if (event.getDamage() < wolf.getHealth()) {
              wolf.setHealth(wolf.getHealth() + event.getDamage());
              wolf.Demage(event.getDamage());
            }
            if (event.isCancelled() == false && MyWolfUtil.getPVP(event.getEntity().getLocation()) == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}",0.999260537342864
187703,"@Override public void onEntityTarget(EntityTargetEvent event){
  if (!event.isCancelled()) {
    if (event.getEntity() instanceof Wolf) {
      for (      Wolves Wolf : ConfigBuffer.mWolves.values()) {
        if (Wolf.getID() == event.getEntity().getEntityId()) {
          Wolf.ResetSitTimer();
          if (Wolf.Behavior == de.Keyle.MyWolf.Wolves.BehaviorState.Friendly) {
            event.setCancelled(true);
          }
 else           if (Wolf.Behavior == BehaviorState.Raid) {
            if (event.getTarget() instanceof Player || (event.getTarget() instanceof Wolf && ((Wolf)event.getTarget()).isTamed() == true)) {
              continue;
            }
          }
        }
      }
    }
  }
}","@Override public void onEntityTarget(final EntityTargetEvent event){
  if (!event.isCancelled()) {
    if (event.getEntity() instanceof Wolf) {
      for (      Wolves Wolf : ConfigBuffer.mWolves.values()) {
        if (Wolf.getID() == event.getEntity().getEntityId()) {
          Wolf.ResetSitTimer();
          if (Wolf.Behavior == de.Keyle.MyWolf.Wolves.BehaviorState.Friendly) {
            event.setCancelled(true);
          }
 else           if (Wolf.Behavior == BehaviorState.Raid) {
            if (event.getTarget() instanceof Player || (event.getTarget() instanceof Wolf && ((Wolf)event.getTarget()).isTamed() == true)) {
              continue;
            }
          }
        }
      }
    }
  }
}",0.995768688293371
187704,"private void SendDeathMessage(EntityDeathEvent event){
  Wolves wolf=null;
  String Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
  for (  Wolves w : ConfigBuffer.mWolves.values()) {
    if (w.getID() == event.getEntity().getEntityId()) {
      wolf=w;
    }
  }
  if (wolf != null) {
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByProjectileEvent) {
      EntityDamageByProjectileEvent e=(EntityDamageByProjectileEvent)event.getEntity().getLastDamageCause();
      if (event.getEntity().getLastDamageCause() instanceof Player) {
        if (((Player)e.getDamager()) == wolf.getOwner()) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((Player)e.getDamager()).getName());
        }
      }
 else       if (event.getEntity().getLastDamageCause() instanceof Skeleton) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (event.getEntity().getLastDamageCause() instanceof Ghast) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
    }
 else     if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        if (((Player)e.getDamager()) == wolf.getOwner()) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((Player)e.getDamager()).getName());
        }
      }
 else       if (e.getDamager() instanceof Zombie) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Creeper) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Spider) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Slime) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Giant) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Wolf) {
        Wolf w=(Wolf)e.getDamager();
        if (w.isTamed() == true) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((CraftWolf)w).getHandle().getOwnerName());
          ;
          Killer=""String_Node_Str"" + ((Player)w.getOwner()).getName();
          for (          String owner : ConfigBuffer.mWolves.keySet()) {
            if (ConfigBuffer.mWolves.get(owner).getID() == w.getEntityId()) {
            }
          }
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
      }
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.BLOCK_EXPLOSION)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.DROWNING)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.FALL)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.FIRE)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.LAVA)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.LIGHTNING)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.VOID)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
    wolf.getOwner().sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name) + Killer);
  }
}","private void SendDeathMessage(final EntityDeathEvent event){
  Wolves wolf=null;
  String Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
  for (  Wolves w : ConfigBuffer.mWolves.values()) {
    if (w.getID() == event.getEntity().getEntityId()) {
      wolf=w;
    }
  }
  if (wolf != null) {
    if (event.getEntity().getLastDamageCause() instanceof EntityDamageByProjectileEvent) {
      EntityDamageByProjectileEvent e=(EntityDamageByProjectileEvent)event.getEntity().getLastDamageCause();
      if (event.getEntity().getLastDamageCause() instanceof Player) {
        if (((Player)e.getDamager()) == wolf.getOwner()) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((Player)e.getDamager()).getName());
        }
      }
 else       if (event.getEntity().getLastDamageCause() instanceof Skeleton) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (event.getEntity().getLastDamageCause() instanceof Ghast) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
    }
 else     if (event.getEntity().getLastDamageCause() instanceof EntityDamageByEntityEvent) {
      EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event.getEntity().getLastDamageCause();
      if (e.getDamager() instanceof Player) {
        if (((Player)e.getDamager()) == wolf.getOwner()) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((Player)e.getDamager()).getName());
        }
      }
 else       if (e.getDamager() instanceof Zombie) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Creeper) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Spider) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Slime) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Giant) {
        Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
      }
 else       if (e.getDamager() instanceof Wolf) {
        Wolf w=(Wolf)e.getDamager();
        if (w.isTamed() == true) {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",((CraftWolf)w).getHandle().getOwnerName());
          ;
          Killer=""String_Node_Str"" + ((Player)w.getOwner()).getName();
          for (          String owner : ConfigBuffer.mWolves.keySet()) {
            if (ConfigBuffer.mWolves.get(owner).getID() == w.getEntityId()) {
            }
          }
        }
 else {
          Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
        }
      }
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.BLOCK_EXPLOSION)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.DROWNING)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.FALL)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.FIRE)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.LAVA)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.LIGHTNING)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
 else     if (event.getEntity().getLastDamageCause().getCause().equals(DamageCause.VOID)) {
      Killer=MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str""));
    }
    wolf.getOwner().sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",wolf.Name) + Killer);
  }
}",0.999348109517601
187705,"@Override public void onPlayerQuit(PlayerQuitEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    if (Wolf.Status == WolfState.Here) {
      Wolf.removeWolf();
      if (Wolf.getLocation() == null) {
        Wolf.setLocation(event.getPlayer().getLocation());
      }
    }
    MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
  }
}","@Override public void onPlayerQuit(final PlayerQuitEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    if (Wolf.Status == WolfState.Here) {
      Wolf.removeWolf();
      if (Wolf.getLocation() == null) {
        Wolf.setLocation(event.getPlayer().getLocation());
      }
    }
    Wolf.StopTimer();
    MyWolf.Plugin.SaveWolves(ConfigBuffer.WolvesConfig);
  }
}",0.9692982456140352
187706,"@Override public void onPlayerMove(PlayerMoveEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    Wolf.ResetSitTimer();
    if (Wolf.Status == WolfState.Here) {
      if (Wolf.getLocation().getWorld() != event.getPlayer().getLocation().getWorld()) {
        if (Wolf.isSitting() == false) {
          Wolf.removeWolf();
          Wolf.setLocation(event.getPlayer().getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.removeWolf();
        }
      }
 else       if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) > 75) {
        Wolf.removeWolf();
      }
    }
 else     if (Wolf.Status == WolfState.Despawned) {
      if (Wolf.getLocation().getWorld() == event.getPlayer().getLocation().getWorld()) {
        if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) < 75) {
          Wolf.createWolf(Wolf.isSitting());
        }
      }
    }
  }
}","@Override public void onPlayerMove(final PlayerMoveEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    Wolf.ResetSitTimer();
    if (Wolf.Status == WolfState.Here) {
      if (Wolf.getLocation().getWorld() != event.getPlayer().getLocation().getWorld()) {
        if (Wolf.isSitting() == false) {
          Wolf.removeWolf();
          Wolf.setLocation(event.getPlayer().getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.removeWolf();
        }
      }
 else       if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) > 75) {
        Wolf.removeWolf();
      }
    }
 else     if (Wolf.Status == WolfState.Despawned) {
      if (Wolf.getLocation().getWorld() == event.getPlayer().getLocation().getWorld()) {
        if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) < 75) {
          Wolf.createWolf(Wolf.isSitting());
        }
      }
    }
  }
}",0.9971153846153846
187707,"@Override public void onPlayerJoin(final PlayerJoinEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) < 75) {
      Wolf.ResetSitTimer();
      Wolf.createWolf(Wolf.isSitting());
    }
 else {
      Wolf.Status=WolfState.Despawned;
    }
  }
}","@Override public void onPlayerJoin(final PlayerJoinEvent event){
  if (ConfigBuffer.mWolves.containsKey(event.getPlayer().getName())) {
    Wolves Wolf=ConfigBuffer.mWolves.get(event.getPlayer().getName());
    if (Wolf.Status == WolfState.Dead) {
      Wolf.Timer();
    }
 else     if (MyWolfUtil.getDistance(Wolf.getLocation(),event.getPlayer().getLocation()) < 75) {
      Wolf.ResetSitTimer();
      Wolf.createWolf(Wolf.isSitting());
    }
 else {
      Wolf.Status=WolfState.Despawned;
    }
  }
}",0.9219251336898396
187708,"public void LoadWolves(Configuration Config){
  int anzahlWolves=0;
  Config.load();
  List<String> WolfList=Config.getKeys(""String_Node_Str"");
  if (WolfList != null) {
    for (    String ownername : WolfList) {
      int invSlot=0;
      double WolfX=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfY=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfZ=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfEXP=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      String WolfWorld=Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",getServer().getWorlds().get(0).getName());
      int WolfHealthNow=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      int WolfLives=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",3);
      int WolfHealthRespawnTime=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      String WolfName=Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"");
      boolean Wolvesitting=Config.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      if (WolfLives == 0) {
        continue;
      }
      if (getServer().getWorld(WolfWorld) == null) {
        MyWolfUtil.Log.info(""String_Node_Str"" + WolfWorld + ""String_Node_Str""+ ownername+ ""String_Node_Str""+ WolfName+ ""String_Node_Str"");
        continue;
      }
      ConfigBuffer.mWolves.put(ownername,new Wolves(ownername));
      ConfigBuffer.mWolves.get(ownername).setLocation(new Location(this.getServer().getWorld(WolfWorld),WolfX,WolfY,WolfZ));
      if (WolfLives > MyWolfConfig.MaxLives) {
        WolfLives=MyWolfConfig.MaxLives;
      }
      ConfigBuffer.mWolves.get(ownername).setHealth(WolfHealthNow);
      ConfigBuffer.mWolves.get(ownername).RespawnTime=WolfHealthRespawnTime;
      ConfigBuffer.mWolves.get(ownername).Name=WolfName;
      ConfigBuffer.mWolves.get(ownername).Wolf.setSitting(Wolvesitting);
      ConfigBuffer.mWolves.get(ownername).Experience.setExp(WolfEXP);
      for (int i=0; i < 2; i++) {
        invSlot=0;
        for (        String item : Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str""+ (i + 1)).split(""String_Node_Str"")) {
          String[] itemvalues=item.split(""String_Node_Str"");
          if (itemvalues.length == 3 && MyWolfUtil.isInt(itemvalues[0]) && MyWolfUtil.isInt(itemvalues[1]) && MyWolfUtil.isInt(itemvalues[2])) {
            if (Material.getMaterial(Integer.parseInt(itemvalues[0])) != null) {
              if (Integer.parseInt(itemvalues[1]) <= 64) {
                ConfigBuffer.mWolves.get(ownername).Inventory[i].setItem(invSlot,new ItemStack(Integer.parseInt(itemvalues[0]),Integer.parseInt(itemvalues[1]),Integer.parseInt(itemvalues[2])));
              }
            }
          }
          invSlot++;
        }
      }
      anzahlWolves++;
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ anzahlWolves+ ""String_Node_Str"");
}","public void LoadWolves(Configuration Config){
  int anzahlWolves=0;
  Config.load();
  List<String> WolfList=Config.getKeys(""String_Node_Str"");
  if (WolfList != null) {
    for (    String ownername : WolfList) {
      int invSlot=0;
      double WolfX=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfY=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfZ=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      double WolfEXP=Config.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      String WolfWorld=Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",getServer().getWorlds().get(0).getName());
      int WolfHealthNow=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      int WolfLives=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",3);
      int WolfRespawnTime=Config.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      String WolfName=Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"");
      boolean Wolvesitting=Config.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      if (WolfLives == 0) {
        continue;
      }
      if (getServer().getWorld(WolfWorld) == null) {
        MyWolfUtil.Log.info(""String_Node_Str"" + WolfWorld + ""String_Node_Str""+ ownername+ ""String_Node_Str""+ WolfName+ ""String_Node_Str"");
        continue;
      }
      ConfigBuffer.mWolves.put(ownername,new Wolves(ownername));
      ConfigBuffer.mWolves.get(ownername).setLocation(new Location(this.getServer().getWorld(WolfWorld),WolfX,WolfY,WolfZ));
      if (WolfLives > MyWolfConfig.MaxLives) {
        WolfLives=MyWolfConfig.MaxLives;
      }
      ConfigBuffer.mWolves.get(ownername).setHealth(WolfHealthNow);
      ConfigBuffer.mWolves.get(ownername).RespawnTime=WolfRespawnTime;
      if (WolfRespawnTime > 0) {
        ConfigBuffer.mWolves.get(ownername).Status=WolfState.Dead;
      }
 else {
        ConfigBuffer.mWolves.get(ownername).Status=WolfState.Despawned;
      }
      ConfigBuffer.mWolves.get(ownername).Name=WolfName;
      ConfigBuffer.mWolves.get(ownername).setSitting(Wolvesitting);
      ConfigBuffer.mWolves.get(ownername).Experience.setExp(WolfEXP);
      for (int i=0; i < 2; i++) {
        invSlot=0;
        for (        String item : Config.getString(""String_Node_Str"" + ownername + ""String_Node_Str""+ (i + 1)).split(""String_Node_Str"")) {
          String[] itemvalues=item.split(""String_Node_Str"");
          if (itemvalues.length == 3 && MyWolfUtil.isInt(itemvalues[0]) && MyWolfUtil.isInt(itemvalues[1]) && MyWolfUtil.isInt(itemvalues[2])) {
            if (Material.getMaterial(Integer.parseInt(itemvalues[0])) != null) {
              if (Integer.parseInt(itemvalues[1]) <= 64) {
                ConfigBuffer.mWolves.get(ownername).Inventory[i].setItem(invSlot,new ItemStack(Integer.parseInt(itemvalues[0]),Integer.parseInt(itemvalues[1]),Integer.parseInt(itemvalues[2])));
              }
            }
          }
          invSlot++;
        }
      }
      anzahlWolves++;
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ anzahlWolves+ ""String_Node_Str"");
}",0.9637987776210624
187709,"public void onEnable(){
  Plugin=this;
  if (this.getServer().getPluginManager().getPlugin(""String_Node_Str"") == null) {
    try {
      download(MyWolfUtil.Log,new URL(""String_Node_Str""),new File(""String_Node_Str""));
      this.getServer().getPluginManager().loadPlugin(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""));
      this.getServer().getPluginManager().enablePlugin(this.getServer().getPluginManager().getPlugin(""String_Node_Str""));
    }
 catch (    final Exception ex) {
      MyWolfUtil.Log.warning(""String_Node_Str"");
    }
  }
  playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_ENTER,vehicleListener,Event.Priority.Low,this);
  worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,levelupListener,Event.Priority.Normal,this);
  inventoryListener=new MyWolfInventoryListener();
  getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,inventoryListener,Event.Priority.Normal,this);
  MyWolfPermissions.setup();
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfHelp());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInventory());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfPickup());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfBehavior());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfEXP());
  new Inventory();
  new HP();
  new Live();
  new Pickup();
  new Behavior();
  MyWolfConfig.setStandart();
  MyWolfConfig.loadVariables();
  ConfigBuffer.lv=new MyWolfLanguage(new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"")));
  ConfigBuffer.lv.setStandart();
  ConfigBuffer.lv.loadVariables();
  ConfigBuffer.WolvesConfig=new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  LoadWolves(ConfigBuffer.WolvesConfig);
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (ConfigBuffer.mWolves.containsKey(p.getName()) && p.isOnline() == true) {
      ConfigBuffer.mWolves.get(p.getName()).createWolf(ConfigBuffer.mWolves.get(p.getName()).isSitting());
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + ConfigBuffer.pdfFile.getName() + ""String_Node_Str""+ ConfigBuffer.pdfFile.getVersion()+ ""String_Node_Str"");
}","public void onEnable(){
  Plugin=this;
  if (this.getServer().getPluginManager().getPlugin(""String_Node_Str"") == null) {
    try {
      download(MyWolfUtil.Log,new URL(""String_Node_Str""),new File(""String_Node_Str""));
      this.getServer().getPluginManager().loadPlugin(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""));
      this.getServer().getPluginManager().enablePlugin(this.getServer().getPluginManager().getPlugin(""String_Node_Str""));
    }
 catch (    final Exception ex) {
      MyWolfUtil.Log.warning(""String_Node_Str"");
    }
  }
  playerListener=new MyWolfPlayerListener();
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_PORTAL,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_JOIN,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_MOVE,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_QUIT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT,playerListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.PLAYER_INTERACT_ENTITY,playerListener,Event.Priority.Normal,this);
  vehicleListener=new MyWolfVehicleListener();
  getServer().getPluginManager().registerEvent(Event.Type.VEHICLE_ENTER,vehicleListener,Event.Priority.Low,this);
  worldListener=new MyWolfWorldListener();
  getServer().getPluginManager().registerEvent(Event.Type.CHUNK_UNLOAD,worldListener,Event.Priority.Normal,this);
  entityListener=new MyWolfEntityListener();
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DAMAGE,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_TARGET,entityListener,Event.Priority.Normal,this);
  getServer().getPluginManager().registerEvent(Event.Type.ENTITY_DEATH,entityListener,Event.Priority.Normal,this);
  levelupListener=new MyWolfLevelUpListener();
  getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,levelupListener,Event.Priority.Normal,this);
  inventoryListener=new MyWolfInventoryListener();
  getServer().getPluginManager().registerEvent(Event.Type.CUSTOM_EVENT,inventoryListener,Event.Priority.Normal,this);
  MyWolfPermissions.setup();
  getCommand(""String_Node_Str"").setExecutor(new MyWolfName());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfCall());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfStop());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfRelease());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfHelp());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfInventory());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfPickup());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfBehavior());
  getCommand(""String_Node_Str"").setExecutor(new MyWolfEXP());
  new Inventory();
  new HP();
  new Live();
  new Pickup();
  new Behavior();
  MyWolfConfig.Config=this.getConfiguration();
  MyWolfConfig.setStandart();
  MyWolfConfig.loadVariables();
  ConfigBuffer.lv=new MyWolfLanguage(new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str"")));
  ConfigBuffer.lv.setStandart();
  ConfigBuffer.lv.loadVariables();
  ConfigBuffer.WolvesConfig=new Configuration(new File(this.getDataFolder().getPath() + File.separator + ""String_Node_Str""));
  LoadWolves(ConfigBuffer.WolvesConfig);
  for (  Player p : this.getServer().getOnlinePlayers()) {
    if (ConfigBuffer.mWolves.containsKey(p.getName()) && p.isOnline() == true) {
      ConfigBuffer.mWolves.get(p.getName()).createWolf(ConfigBuffer.mWolves.get(p.getName()).isSitting());
    }
  }
  MyWolfUtil.Log.info(""String_Node_Str"" + ConfigBuffer.pdfFile.getName() + ""String_Node_Str""+ ConfigBuffer.pdfFile.getVersion()+ ""String_Node_Str"");
}",0.9787788048431194
187710,"public Pickup(){
  this.Name=""String_Node_Str"";
}","public Pickup(){
  this.Name=""String_Node_Str"";
  registerSkill();
}",0.8376068376068376
187711,"public void run(){
  if (Status == WolfState.Despawned || getOwner() == null) {
    StopTimer();
  }
 else {
    if (Status == WolfState.Here) {
      EntityWolf wolf=((CraftWolf)Wolf).getHandle();
      Block CheckWayPoint=MyWolfUtil.getServer().getWorld(getLocation().getWorld().getUID()).getBlockAt(wolf.pathEntity.c().a,wolf.pathEntity.c().b,wolf.pathEntity.c().c);
      MyWolfUtil.Log.info(""String_Node_Str"");
      MyWolfUtil.Log.info(""String_Node_Str"" + CheckWayPoint);
      MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().a);
      MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().b);
      MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().c);
      SitTimer--;
      if (SitTimer <= 0) {
        Wolf.setSitting(true);
      }
      if (isPickup) {
        for (        Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
          if (e instanceof Item) {
            Item item=(Item)e;
            int amountleft=Inventory[0].addItem(item);
            if (amountleft == 0) {
              e.remove();
            }
 else {
              if (item.getItemStack().getAmount() > amountleft) {
                item.getItemStack().setAmount(amountleft);
              }
              if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"")) {
                amountleft=Inventory[1].addItem(item);
                if (amountleft == 0) {
                  e.remove();
                }
 else {
                  if (item.getItemStack().getAmount() > amountleft) {
                    item.getItemStack().setAmount(amountleft);
                  }
                }
              }
            }
          }
        }
      }
      if (Behavior == BehaviorState.Agressive) {
        if (Wolf.getTarget() == null) {
          for (          Entity e : Wolf.getNearbyEntities(10,10,10)) {
            if (MyWolfUtil.getCreatureType(e) != null) {
              Wolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
    if (Status == WolfState.Dead) {
      RespawnTime--;
      if (RespawnTime <= 0) {
        RespawnWolf();
      }
    }
  }
}","public void run(){
  if (Status == WolfState.Despawned || getOwner() == null) {
    StopTimer();
  }
 else {
    if (Status == WolfState.Here) {
      SitTimer--;
      if (SitTimer <= 0) {
        Wolf.setSitting(true);
      }
      if (isPickup) {
        for (        Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
          if (e instanceof Item) {
            Item item=(Item)e;
            int amountleft=Inventory[0].addItem(item);
            if (amountleft == 0) {
              e.remove();
            }
 else {
              if (item.getItemStack().getAmount() > amountleft) {
                item.getItemStack().setAmount(amountleft);
              }
              if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"")) {
                amountleft=Inventory[1].addItem(item);
                if (amountleft == 0) {
                  e.remove();
                }
 else {
                  if (item.getItemStack().getAmount() > amountleft) {
                    item.getItemStack().setAmount(amountleft);
                  }
                }
              }
            }
          }
        }
      }
      if (Behavior == BehaviorState.Agressive) {
        if (Wolf.getTarget() == null) {
          for (          Entity e : Wolf.getNearbyEntities(10,10,10)) {
            if (MyWolfUtil.getCreatureType(e) != null) {
              Wolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
    if (Status == WolfState.Dead) {
      RespawnTime--;
      if (RespawnTime <= 0) {
        RespawnWolf();
      }
    }
  }
}",0.856841550224097
187712,"public void Timer(){
  if (Status != WolfState.Despawned) {
    if (Timer != -1) {
      StopTimer();
    }
    Timer=MyWolf.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(MyWolf.Plugin,new Runnable(){
      public void run(){
        if (Status == WolfState.Despawned || getOwner() == null) {
          StopTimer();
        }
 else {
          if (Status == WolfState.Here) {
            EntityWolf wolf=((CraftWolf)Wolf).getHandle();
            Block CheckWayPoint=MyWolfUtil.getServer().getWorld(getLocation().getWorld().getUID()).getBlockAt(wolf.pathEntity.c().a,wolf.pathEntity.c().b,wolf.pathEntity.c().c);
            MyWolfUtil.Log.info(""String_Node_Str"");
            MyWolfUtil.Log.info(""String_Node_Str"" + CheckWayPoint);
            MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().a);
            MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().b);
            MyWolfUtil.Log.info(""String_Node_Str"" + wolf.pathEntity.c().c);
            SitTimer--;
            if (SitTimer <= 0) {
              Wolf.setSitting(true);
            }
            if (isPickup) {
              for (              Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  int amountleft=Inventory[0].addItem(item);
                  if (amountleft == 0) {
                    e.remove();
                  }
 else {
                    if (item.getItemStack().getAmount() > amountleft) {
                      item.getItemStack().setAmount(amountleft);
                    }
                    if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"")) {
                      amountleft=Inventory[1].addItem(item);
                      if (amountleft == 0) {
                        e.remove();
                      }
 else {
                        if (item.getItemStack().getAmount() > amountleft) {
                          item.getItemStack().setAmount(amountleft);
                        }
                      }
                    }
                  }
                }
              }
            }
            if (Behavior == BehaviorState.Agressive) {
              if (Wolf.getTarget() == null) {
                for (                Entity e : Wolf.getNearbyEntities(10,10,10)) {
                  if (MyWolfUtil.getCreatureType(e) != null) {
                    Wolf.setTarget((LivingEntity)e);
                  }
                }
              }
            }
          }
          if (Status == WolfState.Dead) {
            RespawnTime--;
            if (RespawnTime <= 0) {
              RespawnWolf();
            }
          }
        }
      }
    }
,0L,20L);
  }
}","public void Timer(){
  if (Status != WolfState.Despawned) {
    if (Timer != -1) {
      StopTimer();
    }
    Timer=MyWolf.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(MyWolf.Plugin,new Runnable(){
      public void run(){
        if (Status == WolfState.Despawned || getOwner() == null) {
          StopTimer();
        }
 else {
          if (Status == WolfState.Here) {
            SitTimer--;
            if (SitTimer <= 0) {
              Wolf.setSitting(true);
            }
            if (isPickup) {
              for (              Entity e : Wolf.getNearbyEntities(MyWolfConfig.PickupRange,MyWolfConfig.PickupRange,MyWolfConfig.PickupRange)) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  int amountleft=Inventory[0].addItem(item);
                  if (amountleft == 0) {
                    e.remove();
                  }
 else {
                    if (item.getItemStack().getAmount() > amountleft) {
                      item.getItemStack().setAmount(amountleft);
                    }
                    if (MyWolfUtil.hasSkill(Abilities,""String_Node_Str"")) {
                      amountleft=Inventory[1].addItem(item);
                      if (amountleft == 0) {
                        e.remove();
                      }
 else {
                        if (item.getItemStack().getAmount() > amountleft) {
                          item.getItemStack().setAmount(amountleft);
                        }
                      }
                    }
                  }
                }
              }
            }
            if (Behavior == BehaviorState.Agressive) {
              if (Wolf.getTarget() == null) {
                for (                Entity e : Wolf.getNearbyEntities(10,10,10)) {
                  if (MyWolfUtil.getCreatureType(e) != null) {
                    Wolf.setTarget((LivingEntity)e);
                  }
                }
              }
            }
          }
          if (Status == WolfState.Dead) {
            RespawnTime--;
            if (RespawnTime <= 0) {
              RespawnWolf();
            }
          }
        }
      }
    }
,0L,20L);
  }
}",0.8819850716158967
187713,"public boolean RespawnWolf(){
  if (Status == WolfState.Dead) {
    return false;
  }
 else {
    HealthNow=HealthMax;
    Location=getOwner().getLocation();
    getOwner().sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",Name));
    createWolf(false);
    RespawnTime=0;
    return true;
  }
}","public boolean RespawnWolf(){
  if (Status == WolfState.Here) {
    return false;
  }
 else {
    HealthNow=HealthMax;
    Location=getOwner().getLocation();
    getOwner().sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",Name));
    createWolf(false);
    RespawnTime=0;
    return true;
  }
}",0.988538681948424
187714,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (MyWolfPermissions.has(player,""String_Node_Str"") == false) {
        return true;
      }
      if (Wolf.Status == WolfState.Here) {
        BukkitContrib.getSoundManager().playCustomMusic(MyWolf.Plugin,ContribCraftPlayer.getContribPlayer((Player)sender),""String_Node_Str"",true);
        if (Wolf.getLocation().getWorld() != player.getLocation().getWorld()) {
          Wolf.removeWolf();
          Wolf.setLocation(player.getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.Wolf.teleport(player);
        }
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Despawned) {
        BukkitContrib.getSoundManager().playCustomMusic(MyWolf.Plugin,ContribCraftPlayer.getContribPlayer((Player)sender),""String_Node_Str"",true);
        Wolf.setLocation(player.getLocation());
        Wolf.createWolf(false);
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      sender.sendMessage(Wolf.Status.toString());
      if (MyWolfPermissions.has(player,""String_Node_Str"") == false) {
        return true;
      }
      if (Wolf.Status == WolfState.Here) {
        BukkitContrib.getSoundManager().playCustomMusic(MyWolf.Plugin,ContribCraftPlayer.getContribPlayer((Player)sender),""String_Node_Str"",true);
        if (Wolf.getLocation().getWorld() != player.getLocation().getWorld()) {
          Wolf.removeWolf();
          Wolf.setLocation(player.getLocation());
          Wolf.createWolf(false);
        }
 else {
          Wolf.Wolf.teleport(player);
        }
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Despawned) {
        BukkitContrib.getSoundManager().playCustomMusic(MyWolf.Plugin,ContribCraftPlayer.getContribPlayer((Player)sender),""String_Node_Str"",true);
        Wolf.setLocation(player.getLocation());
        Wolf.createWolf(false);
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.987611496531219
187715,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (Wolf.Status == WolfState.Despawned) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"") || MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"")) {
        ConfigBuffer.RegisteredSkills.get(""String_Node_Str"").run(Wolf,null);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (Wolf.Status == WolfState.Despawned) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
      if (MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"") || MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"")) {
        ConfigBuffer.RegisteredSkills.get(""String_Node_Str"").run(Wolf,null);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.8339658444022771
187716,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (Wolf.Status == WolfState.Despawned) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
        return true;
      }
      if (MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"")) {
        ConfigBuffer.RegisteredSkills.get(""String_Node_Str"").run(Wolf,null);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (ConfigBuffer.mWolves.containsKey(player.getName())) {
      Wolves Wolf=ConfigBuffer.mWolves.get(player.getName());
      if (Wolf.Status == WolfState.Despawned) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
        return true;
      }
 else       if (Wolf.Status == WolfState.Dead) {
        sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")).replace(""String_Node_Str"",ConfigBuffer.mWolves.get(player.getName()).Name).replace(""String_Node_Str"",""String_Node_Str"" + ConfigBuffer.mWolves.get(player.getName()).RespawnTime));
        return true;
      }
      if (MyWolfUtil.hasSkill(Wolf.Abilities,""String_Node_Str"")) {
        ConfigBuffer.RegisteredSkills.get(""String_Node_Str"").run(Wolf,null);
      }
 else {
        sender.sendMessage(""String_Node_Str"");
      }
      return true;
    }
 else {
      sender.sendMessage(MyWolfUtil.SetColors(MyWolfLanguage.getString(""String_Node_Str"")));
    }
  }
  return true;
}",0.8244734202607823
187717,"public boolean isNPC(Player p){
  if (Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null && com.fullwall.Citizens.NPCs.NPCManager.isNPC(p) == true) {
    return true;
  }
 else {
    return false;
  }
}","public boolean isNPC(Player p){
  if (Plugin.getServer().getPluginManager().getPlugin(""String_Node_Str"") != null) {
    return com.fullwall.Citizens.NPCs.NPCManager.isNPC(p);
  }
  return false;
}",0.8672985781990521
187718,"public void LoadWolves(){
  int anzahlWolves=0;
  int invSlot=0;
  double WolfX;
  double WolfY;
  double WolfZ;
  String WolfWorld;
  int WolfHealthNow;
  int WolfHealthMax;
  int WolfLives;
  int WolfHealthRespawnTime;
  String WolfName;
  boolean Wolvesitting;
  boolean WolfhasInventory;
  boolean WolfhasPickup;
  cb.WolvesConfig.load();
  List<String> WolfList=cb.WolvesConfig.getKeys(""String_Node_Str"");
  if (WolfList != null) {
    for (    String ownername : WolfList) {
      invSlot=0;
      WolfX=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfY=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfZ=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfWorld=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",cb.Plugin.getServer().getWorlds().get(0).getName());
      WolfHealthNow=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      WolfHealthMax=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      WolfLives=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",3);
      WolfHealthRespawnTime=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfName=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"");
      Wolvesitting=cb.WolvesConfig.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      WolfhasInventory=cb.WolvesConfig.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      WolfhasPickup=cb.WolvesConfig.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      if (WolfLives == 0) {
        continue;
      }
      if (cb.Plugin.getServer().getWorld(WolfWorld) == null) {
        cb.log.info(""String_Node_Str"" + WolfWorld + ""String_Node_Str""+ ownername+ ""String_Node_Str""+ WolfName+ ""String_Node_Str"");
        continue;
      }
      cb.mWolves.put(ownername,new Wolves(cb,ownername));
      cb.mWolves.get(ownername).Location=new Location(this.getServer().getWorld(WolfWorld),WolfX,WolfY,WolfZ);
      if (WolfLives > cb.cv.WolfMaxLives) {
        WolfLives=cb.cv.WolfMaxLives;
      }
      if (WolfHealthMax > cb.cv.WolfRespawnMaxHP) {
        WolfHealthMax=cb.cv.WolfRespawnMaxHP;
      }
      if (WolfHealthNow > WolfHealthMax) {
        WolfHealthNow=WolfHealthMax;
      }
      if (WolfHealthRespawnTime == 0 && WolfHealthNow <= 0) {
        WolfHealthNow=WolfHealthMax;
      }
      cb.mWolves.get(ownername).HealthMax=WolfHealthMax;
      cb.mWolves.get(ownername).setWolfHealth(WolfHealthNow);
      cb.mWolves.get(ownername).RespawnTime=WolfHealthRespawnTime;
      cb.mWolves.get(ownername).Name=WolfName;
      cb.mWolves.get(ownername).isSitting=Wolvesitting;
      cb.mWolves.get(ownername).hasInventory=WolfhasInventory;
      cb.mWolves.get(ownername).hasPickup=WolfhasPickup;
      for (      String item : cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")) {
        String[] itemvalues=item.split(""String_Node_Str"");
        if (itemvalues.length == 3 && isInt(itemvalues[0]) && isInt(itemvalues[1]) && isInt(itemvalues[2])) {
          if (Material.getMaterial(Integer.parseInt(itemvalues[0])) != null) {
            if (Integer.parseInt(itemvalues[1]) <= 64) {
              cb.mWolves.get(ownername).Inventory.setItem(invSlot,new ItemStack(Integer.parseInt(itemvalues[0]),Integer.parseInt(itemvalues[1]),Integer.parseInt(itemvalues[2])));
            }
          }
        }
        invSlot++;
      }
      anzahlWolves++;
    }
  }
  cb.log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ anzahlWolves+ ""String_Node_Str"");
}","public void LoadWolves(){
  int anzahlWolves=0;
  int invSlot=0;
  double WolfX;
  double WolfY;
  double WolfZ;
  String WolfWorld;
  int WolfHealthNow;
  int WolfHealthMax;
  int WolfLives;
  int WolfHealthRespawnTime;
  String WolfInventoryMode;
  String WolfName;
  boolean Wolvesitting;
  boolean WolfhasPickup;
  cb.WolvesConfig.load();
  List<String> WolfList=cb.WolvesConfig.getKeys(""String_Node_Str"");
  if (WolfList != null) {
    for (    String ownername : WolfList) {
      invSlot=0;
      WolfX=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfY=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfZ=cb.WolvesConfig.getDouble(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfWorld=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",cb.Plugin.getServer().getWorlds().get(0).getName());
      WolfHealthNow=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      WolfHealthMax=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",6);
      WolfLives=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",3);
      WolfHealthRespawnTime=cb.WolvesConfig.getInt(""String_Node_Str"" + ownername + ""String_Node_Str"",0);
      WolfName=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"");
      Wolvesitting=cb.WolvesConfig.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      WolfInventoryMode=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"");
      WolfhasPickup=cb.WolvesConfig.getBoolean(""String_Node_Str"" + ownername + ""String_Node_Str"",false);
      if (WolfInventoryMode.equals(""String_Node_Str"") == false && WolfInventoryMode.equals(""String_Node_Str"") == false && WolfInventoryMode.equals(""String_Node_Str"") == false) {
        WolfInventoryMode=WolfInventoryMode.equalsIgnoreCase(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
      }
      if (WolfLives == 0) {
        continue;
      }
      if (cb.Plugin.getServer().getWorld(WolfWorld) == null) {
        cb.log.info(""String_Node_Str"" + WolfWorld + ""String_Node_Str""+ ownername+ ""String_Node_Str""+ WolfName+ ""String_Node_Str"");
        continue;
      }
      cb.mWolves.put(ownername,new Wolves(cb,ownername));
      cb.mWolves.get(ownername).Location=new Location(this.getServer().getWorld(WolfWorld),WolfX,WolfY,WolfZ);
      if (WolfLives > cb.cv.WolfMaxLives) {
        WolfLives=cb.cv.WolfMaxLives;
      }
      if (WolfHealthMax > cb.cv.WolfRespawnMaxHP) {
        WolfHealthMax=cb.cv.WolfRespawnMaxHP;
      }
      if (WolfHealthNow > WolfHealthMax) {
        WolfHealthNow=WolfHealthMax;
      }
      if (WolfHealthRespawnTime == 0 && WolfHealthNow <= 0) {
        WolfHealthNow=WolfHealthMax;
      }
      cb.mWolves.get(ownername).HealthMax=WolfHealthMax;
      cb.mWolves.get(ownername).setWolfHealth(WolfHealthNow);
      cb.mWolves.get(ownername).RespawnTime=WolfHealthRespawnTime;
      cb.mWolves.get(ownername).Name=WolfName;
      cb.mWolves.get(ownername).isSitting=Wolvesitting;
      cb.mWolves.get(ownername).InventoryMode=InventoryType.valueOf(WolfInventoryMode);
      cb.mWolves.get(ownername).hasPickup=WolfhasPickup;
      String inv1=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"");
      if (inv1.startsWith(""String_Node_Str"")) {
        inv1=cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"");
      }
      for (      String item : inv1.split(""String_Node_Str"")) {
        String[] itemvalues=item.split(""String_Node_Str"");
        if (itemvalues.length == 3 && isInt(itemvalues[0]) && isInt(itemvalues[1]) && isInt(itemvalues[2])) {
          if (Material.getMaterial(Integer.parseInt(itemvalues[0])) != null) {
            if (Integer.parseInt(itemvalues[1]) <= 64) {
              cb.mWolves.get(ownername).Inventory1.setItem(invSlot,new ItemStack(Integer.parseInt(itemvalues[0]),Integer.parseInt(itemvalues[1]),Integer.parseInt(itemvalues[2])));
            }
          }
        }
        invSlot++;
      }
      if (cb.mWolves.get(ownername).InventoryMode == InventoryType.LARGE) {
        invSlot=0;
        for (        String item : cb.WolvesConfig.getString(""String_Node_Str"" + ownername + ""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")) {
          String[] itemvalues=item.split(""String_Node_Str"");
          if (itemvalues.length == 3 && isInt(itemvalues[0]) && isInt(itemvalues[1]) && isInt(itemvalues[2])) {
            if (Material.getMaterial(Integer.parseInt(itemvalues[0])) != null) {
              if (Integer.parseInt(itemvalues[1]) <= 64) {
                cb.mWolves.get(ownername).Inventory2.setItem(invSlot,new ItemStack(Integer.parseInt(itemvalues[0]),Integer.parseInt(itemvalues[1]),Integer.parseInt(itemvalues[2])));
              }
            }
          }
          invSlot++;
        }
      }
      anzahlWolves++;
    }
  }
  cb.log.info(""String_Node_Str"" + this.getDescription().getName() + ""String_Node_Str""+ anzahlWolves+ ""String_Node_Str"");
}",0.8172425286079325
187719,"public void SaveWolves(){
  cb.WolvesConfig.removeProperty(""String_Node_Str"");
  for (  String owner : cb.mWolves.keySet()) {
    Wolves wolf=cb.mWolves.get(owner);
    String Items=""String_Node_Str"";
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0)     for (    ItemStack Item : cb.mWolves.get(owner).Inventory.getContents()) {
      if (Item != null) {
        Items+=Item.id + ""String_Node_Str"" + Item.count+ ""String_Node_Str""+ Item.damage+ ""String_Node_Str"";
      }
 else {
        Items+=""String_Node_Str"";
      }
    }
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0) {
      Items=Items.substring(0,Items.length() - 1);
    }
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getX());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getY());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getZ());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getWorld().getName());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getHealth());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.HealthMax);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Lives);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.RespawnTime);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",Items);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Name);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.isSitting());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasInventory);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasPickup);
  }
  cb.WolvesConfig.save();
}","public void SaveWolves(){
  cb.WolvesConfig.removeProperty(""String_Node_Str"");
  for (  String owner : cb.mWolves.keySet()) {
    Wolves wolf=cb.mWolves.get(owner);
    String Items=""String_Node_Str"";
    if (cb.mWolves.get(owner).Inventory1.getContents().length > 0) {
      for (      ItemStack Item : cb.mWolves.get(owner).Inventory1.getContents()) {
        if (Item != null) {
          Items+=Item.id + ""String_Node_Str"" + Item.count+ ""String_Node_Str""+ Item.damage+ ""String_Node_Str"";
        }
 else {
          Items+=""String_Node_Str"";
        }
      }
      Items=Items.substring(0,Items.length() - 1);
    }
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",Items);
    if (cb.mWolves.get(owner).InventoryMode == InventoryType.LARGE) {
      String Items2=""String_Node_Str"";
      if (cb.mWolves.get(owner).Inventory2.getContents().length > 0) {
        for (        ItemStack Item : cb.mWolves.get(owner).Inventory2.getContents()) {
          if (Item != null) {
            Items2+=Item.id + ""String_Node_Str"" + Item.count+ ""String_Node_Str""+ Item.damage+ ""String_Node_Str"";
          }
 else {
            Items2+=""String_Node_Str"";
          }
        }
        Items2=Items2.substring(0,Items2.length() - 1);
      }
      cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",Items2);
    }
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getX());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getY());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getZ());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getWorld().getName());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getHealth());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.HealthMax);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Lives);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.RespawnTime);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Name);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.isSitting());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.InventoryMode.name());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasPickup);
  }
  cb.WolvesConfig.save();
}",0.7451408604498799
187720,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    String owner : cb.mWolves.keySet()) {
      if (cb.mWolves.get(owner).ID == event.getEntity().getEntityId()) {
        if (cb.cv.WolfMaxLives > -1) {
          cb.mWolves.get(owner).Lives-=1;
          if (cb.mWolves.get(owner).Lives <= 0) {
            cb.mWolves.get(owner).StopDropTimer();
            for (            ItemStack is : cb.mWolves.get(owner).Inventory.getContents()) {
              cb.mWolves.get(owner).MyWolf.getWorld().dropItem(cb.mWolves.get(owner).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
            }
            cb.mWolves.get(owner).getPlayer().sendMessage(ChatColor.AQUA + cb.mWolves.get(owner).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
            cb.mWolves.remove(cb.mWolves.get(owner).getPlayer().getName());
            cb.Plugin.SaveWolves();
          }
 else {
            cb.mWolves.get(owner).StopDropTimer();
            cb.mWolves.get(owner).isDead=true;
            cb.mWolves.get(owner).RespawnTimer();
          }
        }
 else {
          cb.mWolves.get(owner).StopDropTimer();
          cb.mWolves.get(owner).isDead=true;
          cb.mWolves.get(owner).RespawnTimer();
        }
        SendDeathMessage(event);
        break;
      }
    }
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    String owner : cb.mWolves.keySet()) {
      if (cb.mWolves.get(owner).ID == event.getEntity().getEntityId()) {
        if (cb.cv.WolfMaxLives > -1) {
          cb.mWolves.get(owner).Lives-=1;
          if (cb.mWolves.get(owner).Lives <= 0) {
            cb.mWolves.get(owner).StopDropTimer();
            for (            ItemStack is : cb.mWolves.get(owner).LargeInventory.getContents()) {
              cb.mWolves.get(owner).MyWolf.getWorld().dropItem(cb.mWolves.get(owner).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
            }
            cb.mWolves.get(owner).getPlayer().sendMessage(ChatColor.AQUA + cb.mWolves.get(owner).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
            cb.mWolves.remove(cb.mWolves.get(owner).getPlayer().getName());
            cb.Plugin.SaveWolves();
          }
 else {
            cb.mWolves.get(owner).StopDropTimer();
            cb.mWolves.get(owner).isDead=true;
            cb.mWolves.get(owner).RespawnTimer();
          }
        }
 else {
          cb.mWolves.get(owner).StopDropTimer();
          cb.mWolves.get(owner).isDead=true;
          cb.mWolves.get(owner).RespawnTimer();
        }
        SendDeathMessage(event);
        break;
      }
    }
  }
}",0.9982499124956248
187721,"@Override public void onEntityDamage(EntityDamageEvent event){
  if ((event.getEntity() instanceof Wolf)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (cb.mWolves.containsKey(player.getName()) == false) {
          if (cb.Permissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != cb.cv.WolfLeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().x();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            cb.mWolves.put(player.getName(),new Wolves(cb,player.getName()));
            cb.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            cb.Plugin.SaveWolves();
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
        for (        String owner : cb.mWolves.keySet()) {
          Wolves wolf=cb.mWolves.get(owner);
          if (wolf.getID() == event.getEntity().getEntityId()) {
            if (cb.mWolves.get(owner).getHealth() > cb.mWolves.get(owner).HealthMax) {
              cb.mWolves.get(owner).setWolfHealth(cb.mWolves.get(owner).HealthMax);
            }
            if (player.getItemInHand().getType() == cb.cv.WolfLeashItem && cb.cv.WolfLeashItemSneak == player.isSneaking()) {
              if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                return;
              }
{
                String msg=""String_Node_Str"" + ChatColor.GREEN;
                if (wolf.Name != null) {
                  msg+=wolf.Name + ChatColor.WHITE + ""String_Node_Str"";
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.WHITE + ""String_Node_Str"";
                }
                if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                  msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else                 if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                  msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
                player.sendMessage(msg);
                if (wolf.MyWolf.isSitting()) {
                  event.setCancelled(true);
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                  event.setCancelled(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestAddItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == false) {
                  wolf.hasInventory=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodLivesItem) {
              if (cb.cv.WolfMaxLives > -1 && wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.Lives < cb.cv.WolfMaxLives) {
                  wolf.Lives+=1;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfMaxLives+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfPickupItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasPickup == false) {
                  wolf.hasPickup=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  wolf.DropTimer();
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str""+ cb.cv.WolfPickupRange+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestOpenItem && cb.cv.WolfChestOpenItemSneak == player.isSneaking()) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == true) {
                  EntityPlayer eh=((CraftPlayer)player).getHandle();
                  eh.a(wolf.Inventory);
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodHPItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.HealthMax < cb.cv.WolfRespawnMaxHP) {
                  String msg=""String_Node_Str"" + ChatColor.AQUA + wolf.Name+ ChatColor.WHITE+ ""String_Node_Str"";
                  wolf.HealthMax+=1;
                  wolf.setWolfHealth(wolf.getHealth() + 1);
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                    msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else                   if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                    msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else {
                    msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                  player.sendMessage(msg);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfRespawnMaxHP+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (event.isCancelled() == false && event.getEntity().getWorld().getPVP() == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if ((event.getEntity() instanceof Wolf)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (cb.mWolves.containsKey(player.getName()) == false) {
          if (cb.Permissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != cb.cv.WolfLeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().x();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            cb.mWolves.put(player.getName(),new Wolves(cb,player.getName()));
            cb.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            cb.Plugin.SaveWolves();
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
        for (        String owner : cb.mWolves.keySet()) {
          Wolves wolf=cb.mWolves.get(owner);
          if (wolf.getID() == event.getEntity().getEntityId()) {
            if (cb.mWolves.get(owner).getHealth() > cb.mWolves.get(owner).HealthMax) {
              cb.mWolves.get(owner).setWolfHealth(cb.mWolves.get(owner).HealthMax);
            }
            if (player.getItemInHand().getType() == cb.cv.WolfLeashItem && cb.cv.WolfLeashItemSneak == player.isSneaking()) {
              if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                return;
              }
{
                String msg=""String_Node_Str"" + ChatColor.AQUA;
                if (wolf.Name != null) {
                  msg+=wolf.Name + ChatColor.WHITE + ""String_Node_Str"";
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.WHITE + ""String_Node_Str"";
                }
                if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                  msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else                 if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                  msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
                player.sendMessage(msg);
                if (wolf.MyWolf.isSitting()) {
                  event.setCancelled(true);
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                  event.setCancelled(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestAddItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.InventoryMode == InventoryType.NONE || wolf.InventoryMode == InventoryType.SMALL) {
                  wolf.InventoryMode=(wolf.InventoryMode == InventoryType.NONE ? InventoryType.SMALL : InventoryType.LARGE);
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str""+ (wolf.InventoryMode == InventoryType.SMALL ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodLivesItem) {
              if (cb.cv.WolfMaxLives > -1 && wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.Lives < cb.cv.WolfMaxLives) {
                  wolf.Lives+=1;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfMaxLives+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfPickupItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasPickup == false) {
                  wolf.hasPickup=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  wolf.DropTimer();
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str""+ cb.cv.WolfPickupRange+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestOpenItem && cb.cv.WolfChestOpenItemSneak == player.isSneaking()) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.InventoryMode != InventoryType.NONE) {
                  wolf.OpenInventory();
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodHPItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.HealthMax < cb.cv.WolfRespawnMaxHP) {
                  String msg=""String_Node_Str"" + ChatColor.AQUA + wolf.Name+ ChatColor.WHITE+ ""String_Node_Str"";
                  wolf.HealthMax+=1;
                  wolf.setWolfHealth(wolf.getHealth() + 1);
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                    msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else                   if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                    msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else {
                    msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                  player.sendMessage(msg);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfRespawnMaxHP+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (event.isCancelled() == false && event.getEntity().getWorld().getPVP() == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}",0.9780432845988576
187722,"@Override public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && event.getPlayer().getItemInHand().getType() == cb.cv.WolfControlItem && cb.cv.WolfControlItemSneak == event.getPlayer().isSneaking() && cb.mWolves.containsKey(event.getPlayer().getName())) {
    if (cb.mWolves.get(event.getPlayer().getName()).isThere=true && cb.mWolves.get(event.getPlayer().getName()).isDead == false && cb.mWolves.get(event.getPlayer().getName()).MyWolf.isSitting() == false) {
      if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
        return;
      }
      Block block=event.getPlayer().getTargetBlock(null,100);
      if (block != null) {
        PathPoint[] loc={new PathPoint(block.getLocation().getBlockX(),block.getLocation().getBlockY(),block.getLocation().getBlockZ())};
        EntityWolf wolf=((CraftWolf)cb.mWolves.get(event.getPlayer().getName()).MyWolf).getHandle();
        wolf.a(new PathEntity(loc));
        if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
          return;
        }
        for (        Entity e : cb.mWolves.get(event.getPlayer().getName()).MyWolf.getNearbyEntities(1,1,1)) {
          if (e instanceof LivingEntity) {
            if (e instanceof Player) {
              cb.log.info(""String_Node_Str"" + cb.isNPC(event.getPlayer()));
              if (((Player)e).equals(cb.mWolves.get(event.getPlayer().getName()).getPlayer()) == false && cb.isNPC(event.getPlayer()) == false) {
                cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
              }
            }
 else {
              cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && event.getPlayer().getItemInHand().getType() == cb.cv.WolfControlItem && cb.cv.WolfControlItemSneak == event.getPlayer().isSneaking() && cb.mWolves.containsKey(event.getPlayer().getName())) {
    if (cb.mWolves.get(event.getPlayer().getName()).isThere=true && cb.mWolves.get(event.getPlayer().getName()).isDead == false && cb.mWolves.get(event.getPlayer().getName()).MyWolf.isSitting() == false) {
      if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
        return;
      }
      Block block=event.getPlayer().getTargetBlock(null,100);
      if (block != null) {
        PathPoint[] loc={new PathPoint(block.getLocation().getBlockX(),block.getLocation().getBlockY(),block.getLocation().getBlockZ())};
        EntityWolf wolf=((CraftWolf)cb.mWolves.get(event.getPlayer().getName()).MyWolf).getHandle();
        wolf.a(new PathEntity(loc));
        if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
          return;
        }
        for (        Entity e : cb.mWolves.get(event.getPlayer().getName()).MyWolf.getNearbyEntities(1,1,1)) {
          if (e instanceof LivingEntity) {
            if (e instanceof Player) {
              if (((Player)e).equals(cb.mWolves.get(event.getPlayer().getName()).getPlayer()) == false && cb.isNPC((Player)e) == false) {
                cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
              }
            }
 else {
              cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
  }
}",0.9718076285240465
187723,"@Override public void onPlayerJoin(final PlayerJoinEvent event){
  if (cb.mWolves.containsKey(event.getPlayer().getName())) {
    double dist=Math.sqrt(Math.pow(cb.mWolves.get(event.getPlayer().getName()).getLocation().getX() - event.getPlayer().getLocation().getX(),2.0D) + Math.pow(cb.mWolves.get(event.getPlayer().getName()).getLocation().getZ() - event.getPlayer().getLocation().getZ(),2.0D));
    if (dist < 75) {
      cb.mWolves.get(event.getPlayer().getName()).createWolf(cb.mWolves.get(event.getPlayer().getName()).isSitting);
    }
  }
}","@Override public void onPlayerJoin(final PlayerJoinEvent event){
  if (cb.mWolves.containsKey(event.getPlayer().getName())) {
    double dist=Math.sqrt(Math.pow(cb.mWolves.get(event.getPlayer().getName()).getLocation().getX() - event.getPlayer().getLocation().getX(),2.0D) + Math.pow(cb.mWolves.get(event.getPlayer().getName()).getLocation().getZ() - event.getPlayer().getLocation().getZ(),2.0D));
    if (dist < 75) {
      cb.mWolves.get(event.getPlayer().getName()).createWolf(cb.mWolves.get(event.getPlayer().getName()).isSitting);
    }
 else {
      cb.mWolves.get(event.getPlayer().getName()).isThere=false;
    }
  }
}",0.9326513213981245
187724,"public void DropTimer(){
  if (isThere == true) {
    DropTimer=cb.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(cb.Plugin,new Runnable(){
      public void run(){
        if (isThere == false || isDead == true || getPlayer() == null) {
          StopDropTimer();
        }
 else {
          if (getPlayer() != null) {
            try {
              for (              Entity e : MyWolf.getWorld().getEntities()) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
                  if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
                    int amountleft=Inventory.addItem(item);
                    if (amountleft == 0) {
                      e.remove();
                    }
 else {
                      if (item.getItemStack().getAmount() > amountleft) {
                        item.getItemStack().setAmount(amountleft);
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              System.out.println(""String_Node_Str"");
              e.printStackTrace();
            }
          }
 else {
            StopDropTimer();
          }
        }
      }
    }
,0L,20L);
  }
}","public void DropTimer(){
  if (isThere == true) {
    DropTimer=cb.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(cb.Plugin,new Runnable(){
      public void run(){
        if (isThere == false || isDead == true || getPlayer() == null) {
          StopDropTimer();
        }
 else {
          if (getPlayer() != null) {
            try {
              for (              Entity e : MyWolf.getWorld().getEntities()) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
                  if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
                    int amountleft=Inventory1.addItem(item);
                    if (amountleft == 0) {
                      e.remove();
                    }
 else {
                      if (item.getItemStack().getAmount() > amountleft) {
                        item.getItemStack().setAmount(amountleft);
                      }
                      if (InventoryMode == InventoryType.LARGE) {
                        amountleft=Inventory2.addItem(item);
                        if (amountleft == 0) {
                          e.remove();
                        }
 else {
                          if (item.getItemStack().getAmount() > amountleft) {
                            item.getItemStack().setAmount(amountleft);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              System.out.println(""String_Node_Str"");
              e.printStackTrace();
            }
          }
 else {
            StopDropTimer();
          }
        }
      }
    }
,0L,20L);
  }
}",0.8553996339231239
187725,"public void run(){
  if (isThere == false || isDead == true || getPlayer() == null) {
    StopDropTimer();
  }
 else {
    if (getPlayer() != null) {
      try {
        for (        Entity e : MyWolf.getWorld().getEntities()) {
          if (e instanceof Item) {
            Item item=(Item)e;
            Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
            if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
              int amountleft=Inventory.addItem(item);
              if (amountleft == 0) {
                e.remove();
              }
 else {
                if (item.getItemStack().getAmount() > amountleft) {
                  item.getItemStack().setAmount(amountleft);
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      StopDropTimer();
    }
  }
}","public void run(){
  if (isThere == false || isDead == true || getPlayer() == null) {
    StopDropTimer();
  }
 else {
    if (getPlayer() != null) {
      try {
        for (        Entity e : MyWolf.getWorld().getEntities()) {
          if (e instanceof Item) {
            Item item=(Item)e;
            Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
            if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
              int amountleft=Inventory1.addItem(item);
              if (amountleft == 0) {
                e.remove();
              }
 else {
                if (item.getItemStack().getAmount() > amountleft) {
                  item.getItemStack().setAmount(amountleft);
                }
                if (InventoryMode == InventoryType.LARGE) {
                  amountleft=Inventory2.addItem(item);
                  if (amountleft == 0) {
                    e.remove();
                  }
 else {
                    if (item.getItemStack().getAmount() > amountleft) {
                      item.getItemStack().setAmount(amountleft);
                    }
                  }
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      StopDropTimer();
    }
  }
}",0.8325242718446602
187726,"public void createWolf(Wolf wolf){
  MyWolf=wolf;
  ID=MyWolf.getEntityId();
  Location=MyWolf.getLocation();
  isThere=true;
  isDead=false;
  if (cb.Permissions.has(getPlayer(),""String_Node_Str"") && hasPickup == true) {
    DropTimer();
  }
}","public void createWolf(Wolf wolf){
  MyWolf=wolf;
  ID=MyWolf.getEntityId();
  Location=MyWolf.getLocation();
  isThere=true;
  isDead=false;
  DisplayName();
  if (cb.Permissions.has(getPlayer(),""String_Node_Str"") && hasPickup == true) {
    DropTimer();
  }
}",0.9663366336633664
187727,"public void SaveWolves(){
  cb.WolvesConfig.removeProperty(""String_Node_Str"");
  for (  String owner : cb.mWolves.keySet()) {
    Wolves wolf=cb.mWolves.get(owner);
    String Items=""String_Node_Str"";
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0)     for (    ItemStack Item : cb.mWolves.get(owner).Inventory.getContents()) {
      Items+=(Item != null ? Items+=Item.id + ""String_Node_Str"" + Item.count+ ""String_Node_Str""+ Item.damage+ ""String_Node_Str"" : ""String_Node_Str"");
    }
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0) {
      Items=Items.substring(0,Items.length() - 1);
    }
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getX());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getY());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getZ());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getWorld().getName());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getHealth());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.HealthMax);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Lives);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.RespawnTime);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",Items);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Name);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.isSitting());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasInventory);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasPickup);
  }
  cb.WolvesConfig.save();
}","public void SaveWolves(){
  cb.WolvesConfig.removeProperty(""String_Node_Str"");
  for (  String owner : cb.mWolves.keySet()) {
    Wolves wolf=cb.mWolves.get(owner);
    String Items=""String_Node_Str"";
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0)     for (    ItemStack Item : cb.mWolves.get(owner).Inventory.getContents()) {
      if (Item != null) {
        Items+=Item.id + ""String_Node_Str"" + Item.count+ ""String_Node_Str""+ Item.damage+ ""String_Node_Str"";
      }
 else {
        Items+=""String_Node_Str"";
      }
    }
    if (cb.mWolves.get(owner).Inventory.getContents().length > 0) {
      Items=Items.substring(0,Items.length() - 1);
    }
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getX());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getY());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getZ());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getLocation().getWorld().getName());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.getHealth());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.HealthMax);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Lives);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.RespawnTime);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",Items);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.Name);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.isSitting());
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasInventory);
    cb.WolvesConfig.setProperty(""String_Node_Str"" + owner + ""String_Node_Str"",wolf.hasPickup);
  }
  cb.WolvesConfig.save();
}",0.9740193581253184
187728,"@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    String owner : cb.mWolves.keySet()) {
      if (cb.mWolves.get(owner).ID == event.getEntity().getEntityId()) {
        if (cb.cv.WolfMaxLives > -1) {
          cb.mWolves.get(owner).Lives-=1;
          if (cb.mWolves.get(owner).Lives <= 0) {
            for (            ItemStack is : cb.mWolves.get(owner).Inventory.getContents()) {
              cb.mWolves.get(owner).MyWolf.getWorld().dropItem(cb.mWolves.get(owner).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
            }
            cb.mWolves.get(owner).getPlayer().sendMessage(ChatColor.AQUA + cb.mWolves.get(owner).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
            cb.mWolves.remove(cb.mWolves.get(owner).getPlayer().getName());
            cb.Plugin.SaveWolves();
          }
 else {
            cb.mWolves.get(owner).isDead=true;
            cb.mWolves.get(owner).RespawnTimer();
          }
        }
 else {
          cb.mWolves.get(owner).isDead=true;
          cb.mWolves.get(owner).RespawnTimer();
        }
        SendDeathMessage(event);
        break;
      }
    }
  }
}","@Override public void onEntityDeath(EntityDeathEvent event){
  if (event.getEntity() instanceof Wolf) {
    for (    String owner : cb.mWolves.keySet()) {
      if (cb.mWolves.get(owner).ID == event.getEntity().getEntityId()) {
        if (cb.cv.WolfMaxLives > -1) {
          cb.mWolves.get(owner).Lives-=1;
          if (cb.mWolves.get(owner).Lives <= 0) {
            cb.mWolves.get(owner).StopDropTimer();
            for (            ItemStack is : cb.mWolves.get(owner).Inventory.getContents()) {
              cb.mWolves.get(owner).MyWolf.getWorld().dropItem(cb.mWolves.get(owner).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
            }
            cb.mWolves.get(owner).getPlayer().sendMessage(ChatColor.AQUA + cb.mWolves.get(owner).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.RED+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
            cb.mWolves.remove(cb.mWolves.get(owner).getPlayer().getName());
            cb.Plugin.SaveWolves();
          }
 else {
            cb.mWolves.get(owner).StopDropTimer();
            cb.mWolves.get(owner).isDead=true;
            cb.mWolves.get(owner).RespawnTimer();
          }
        }
 else {
          cb.mWolves.get(owner).StopDropTimer();
          cb.mWolves.get(owner).isDead=true;
          cb.mWolves.get(owner).RespawnTimer();
        }
        SendDeathMessage(event);
        break;
      }
    }
  }
}",0.944094779711218
187729,"@Override public void onEntityDamage(EntityDamageEvent event){
  if ((event.getEntity() instanceof Wolf)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (cb.mWolves.containsKey(player.getName()) == false) {
          if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
            return;
          }
          if (((Wolf)event.getEntity()).isTamed() == true && ((Player)((Wolf)event.getEntity()).getOwner()).getName().equals(player.getName())) {
            event.setCancelled(true);
            cb.mWolves.put(player.getName(),new Wolves(cb,player.getName()));
            cb.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            cb.Plugin.SaveWolves();
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
        for (        String owner : cb.mWolves.keySet()) {
          Wolves wolf=cb.mWolves.get(owner);
          if (wolf.getID() == event.getEntity().getEntityId()) {
            if (cb.mWolves.get(owner).getHealth() > cb.mWolves.get(owner).HealthMax) {
              cb.mWolves.get(owner).setWolfHealth(cb.mWolves.get(owner).HealthMax);
            }
            if (player.getItemInHand().getType() == cb.cv.WolfLeashItem && cb.cv.WolfLeashItemSneak == player.isSneaking()) {
              if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                return;
              }
{
                String msg=""String_Node_Str"" + ChatColor.GREEN;
                if (wolf.Name != null) {
                  msg+=wolf.Name + ChatColor.WHITE + ""String_Node_Str"";
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.WHITE + ""String_Node_Str"";
                }
                if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                  msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else                 if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                  msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
                player.sendMessage(msg);
                if (wolf.MyWolf.isSitting()) {
                  event.setCancelled(true);
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                  event.setCancelled(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestAddItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == false) {
                  wolf.hasInventory=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodLivesItem) {
              if (cb.cv.WolfMaxLives > -1 && wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.Lives < cb.cv.WolfMaxLives) {
                  wolf.Lives+=1;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfMaxLives+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfPickupItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasPickup == false) {
                  wolf.hasPickup=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  wolf.DropTimer();
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str""+ cb.cv.WolfPickupRange+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestOpenItem && cb.cv.WolfChestOpenItemSneak == player.isSneaking()) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == true) {
                  EntityPlayer eh=((CraftPlayer)player).getHandle();
                  eh.a(wolf.Inventory);
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodHPItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.HealthMax < cb.cv.WolfRespawnMaxHP) {
                  String msg=""String_Node_Str"" + ChatColor.AQUA + wolf.Name+ ChatColor.WHITE+ ""String_Node_Str"";
                  wolf.HealthMax+=1;
                  wolf.setWolfHealth(wolf.getHealth() + 1);
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                    msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else                   if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                    msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else {
                    msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                  player.sendMessage(msg);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfRespawnMaxHP+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (event.isCancelled() == false && event.getEntity().getWorld().getPVP() == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}","@Override public void onEntityDamage(EntityDamageEvent event){
  if ((event.getEntity() instanceof Wolf)) {
    if (!(event instanceof EntityDamageByEntityEvent)) {
      return;
    }
    EntityDamageByEntityEvent e=(EntityDamageByEntityEvent)event;
    if (e.getDamager() instanceof Player) {
      Player player=(Player)e.getDamager();
      if (event.isCancelled() == false) {
        if (cb.mWolves.containsKey(player.getName()) == false) {
          if (cb.Permissions.has(player,""String_Node_Str"") == false || player.getItemInHand().getType() != cb.cv.WolfLeashItem) {
            return;
          }
          Wolf TargetWolf=(Wolf)event.getEntity();
          String OwnerOfTheWolf=((CraftWolf)TargetWolf).getHandle().x();
          Player Attacker=(Player)e.getDamager();
          boolean isTarmed=TargetWolf.isTamed();
          if (isTarmed == true && OwnerOfTheWolf.equals(Attacker.getName())) {
            event.setCancelled(true);
            cb.mWolves.put(player.getName(),new Wolves(cb,player.getName()));
            cb.mWolves.get(player.getName()).createWolf((Wolf)event.getEntity());
            cb.Plugin.SaveWolves();
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          }
        }
        for (        String owner : cb.mWolves.keySet()) {
          Wolves wolf=cb.mWolves.get(owner);
          if (wolf.getID() == event.getEntity().getEntityId()) {
            if (cb.mWolves.get(owner).getHealth() > cb.mWolves.get(owner).HealthMax) {
              cb.mWolves.get(owner).setWolfHealth(cb.mWolves.get(owner).HealthMax);
            }
            if (player.getItemInHand().getType() == cb.cv.WolfLeashItem && cb.cv.WolfLeashItemSneak == player.isSneaking()) {
              if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                return;
              }
{
                String msg=""String_Node_Str"" + ChatColor.GREEN;
                if (wolf.Name != null) {
                  msg+=wolf.Name + ChatColor.WHITE + ""String_Node_Str"";
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.WHITE + ""String_Node_Str"";
                }
                if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                  msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else                 if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                  msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
 else {
                  msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                }
                player.sendMessage(msg);
                if (wolf.MyWolf.isSitting()) {
                  event.setCancelled(true);
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                  event.setCancelled(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestAddItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == false) {
                  wolf.hasInventory=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodLivesItem) {
              if (cb.cv.WolfMaxLives > -1 && wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.Lives < cb.cv.WolfMaxLives) {
                  wolf.Lives+=1;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfMaxLives+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfPickupItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasPickup == false) {
                  wolf.hasPickup=true;
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                  wolf.DropTimer();
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.WHITE+ ""String_Node_Str""+ cb.cv.WolfPickupRange+ ""String_Node_Str"");
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfChestOpenItem && cb.cv.WolfChestOpenItemSneak == player.isSneaking()) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.hasInventory == true) {
                  EntityPlayer eh=((CraftPlayer)player).getHandle();
                  eh.a(wolf.Inventory);
                  event.setCancelled(true);
                  wolf.MyWolf.setSitting(true);
                }
              }
            }
            if (player.getItemInHand().getType() == cb.cv.WolfFoodHPItem) {
              if (wolf.MyWolf.getEntityId() == event.getEntity().getEntityId()) {
                if (cb.Permissions != null && cb.Permissions.has(player,""String_Node_Str"") == false) {
                  return;
                }
                if (wolf.HealthMax < cb.cv.WolfRespawnMaxHP) {
                  String msg=""String_Node_Str"" + ChatColor.AQUA + wolf.Name+ ChatColor.WHITE+ ""String_Node_Str"";
                  wolf.HealthMax+=1;
                  wolf.setWolfHealth(wolf.getHealth() + 1);
                  if (player.getItemInHand().getAmount() > 1) {
                    player.getItemInHand().setAmount(player.getItemInHand().getAmount() - 1);
                  }
 else {
                    player.getInventory().removeItem(player.getInventory().getItemInHand());
                  }
                  if (wolf.getHealth() > wolf.HealthMax / 3 * 2) {
                    msg+=""String_Node_Str"" + ChatColor.GREEN + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else                   if (wolf.getHealth() > wolf.HealthMax / 3 * 1) {
                    msg+=""String_Node_Str"" + ChatColor.YELLOW + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
 else {
                    msg+=""String_Node_Str"" + ChatColor.RED + wolf.getHealth()+ ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.YELLOW+ wolf.HealthMax;
                  }
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.AQUA+ wolf.Name);
                  player.sendMessage(msg);
                }
 else {
                  player.sendMessage(ChatColor.AQUA + wolf.Name + ChatColor.RED+ ""String_Node_Str""+ cb.cv.WolfRespawnMaxHP+ ""String_Node_Str"");
                }
                if (wolf.MyWolf.isSitting()) {
                  wolf.isSitting=true;
                  wolf.MyWolf.setSitting(true);
                }
 else {
                  wolf.isSitting=false;
                }
                event.setCancelled(true);
              }
            }
            if (event.isCancelled() == false && event.getEntity().getWorld().getPVP() == false) {
              event.setCancelled(true);
            }
          }
        }
      }
    }
  }
}",0.9795220018178902
187730,"@Override public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && event.getPlayer().getItemInHand().getType() == cb.cv.WolfControlItem && cb.cv.WolfControlItemSneak == event.getPlayer().isSneaking() && cb.mWolves.containsKey(event.getPlayer().getName())) {
    if (cb.mWolves.get(event.getPlayer().getName()).isThere=true && cb.mWolves.get(event.getPlayer().getName()).isDead == false && cb.mWolves.get(event.getPlayer().getName()).MyWolf.isSitting() == false) {
      if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
        return;
      }
      Block block=event.getPlayer().getTargetBlock(null,300);
      if (block != null) {
        PathPoint[] loc={new PathPoint(block.getLocation().getBlockX(),block.getLocation().getBlockY(),block.getLocation().getBlockZ())};
        EntityWolf wolf=((CraftWolf)cb.mWolves.get(event.getPlayer().getName()).MyWolf).getHandle();
        wolf.a(new PathEntity(loc));
        if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
          return;
        }
        for (        Entity e : cb.mWolves.get(event.getPlayer().getName()).MyWolf.getNearbyEntities(1,1,1)) {
          if (e instanceof LivingEntity) {
            if (e instanceof Player) {
              if (((Player)e).equals(cb.mWolves.get(event.getPlayer().getName()).getPlayer()) == false && cb.isNPC(event.getPlayer()) == false) {
                cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
              }
            }
 else {
              cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
  }
}","@Override public void onPlayerInteract(final PlayerInteractEvent event){
  if (event.getAction().equals(Action.RIGHT_CLICK_AIR) && event.getPlayer().getItemInHand().getType() == cb.cv.WolfControlItem && cb.cv.WolfControlItemSneak == event.getPlayer().isSneaking() && cb.mWolves.containsKey(event.getPlayer().getName())) {
    if (cb.mWolves.get(event.getPlayer().getName()).isThere=true && cb.mWolves.get(event.getPlayer().getName()).isDead == false && cb.mWolves.get(event.getPlayer().getName()).MyWolf.isSitting() == false) {
      if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
        return;
      }
      Block block=event.getPlayer().getTargetBlock(null,100);
      if (block != null) {
        PathPoint[] loc={new PathPoint(block.getLocation().getBlockX(),block.getLocation().getBlockY(),block.getLocation().getBlockZ())};
        EntityWolf wolf=((CraftWolf)cb.mWolves.get(event.getPlayer().getName()).MyWolf).getHandle();
        wolf.a(new PathEntity(loc));
        if (cb.Permissions != null && cb.Permissions.has(event.getPlayer(),""String_Node_Str"") == false) {
          return;
        }
        for (        Entity e : cb.mWolves.get(event.getPlayer().getName()).MyWolf.getNearbyEntities(1,1,1)) {
          if (e instanceof LivingEntity) {
            if (e instanceof Player) {
              cb.log.info(""String_Node_Str"" + cb.isNPC(event.getPlayer()));
              if (((Player)e).equals(cb.mWolves.get(event.getPlayer().getName()).getPlayer()) == false && cb.isNPC(event.getPlayer()) == false) {
                cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
              }
            }
 else {
              cb.mWolves.get(event.getPlayer().getName()).MyWolf.setTarget((LivingEntity)e);
            }
          }
        }
      }
    }
  }
}",0.9784886927744072
187731,"public void DropTimer(){
  if (isThere == true) {
    DropTimer=cb.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(cb.Plugin,new Runnable(){
      public void run(){
        if (isThere == false || isDead == true || getPlayer() == null) {
          cb.Plugin.getServer().getScheduler().cancelTask(DropTimer);
        }
 else {
          if (getPlayer() != null) {
            try {
              for (              Entity e : MyWolf.getWorld().getEntities()) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
                  if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
                    int amountleft=Inventory.addItem(item);
                    if (amountleft == 0) {
                      e.remove();
                    }
 else {
                      if (item.getItemStack().getAmount() > amountleft) {
                        item.getItemStack().setAmount(amountleft);
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              System.out.println(""String_Node_Str"");
              e.printStackTrace();
            }
          }
 else {
            cb.Plugin.getServer().getScheduler().cancelTask(DropTimer);
          }
        }
      }
    }
,0L,20L);
  }
}","public void DropTimer(){
  if (isThere == true) {
    DropTimer=cb.Plugin.getServer().getScheduler().scheduleSyncRepeatingTask(cb.Plugin,new Runnable(){
      public void run(){
        if (isThere == false || isDead == true || getPlayer() == null) {
          StopDropTimer();
        }
 else {
          if (getPlayer() != null) {
            try {
              for (              Entity e : MyWolf.getWorld().getEntities()) {
                if (e instanceof Item) {
                  Item item=(Item)e;
                  Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
                  if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
                    int amountleft=Inventory.addItem(item);
                    if (amountleft == 0) {
                      e.remove();
                    }
 else {
                      if (item.getItemStack().getAmount() > amountleft) {
                        item.getItemStack().setAmount(amountleft);
                      }
                    }
                  }
                }
              }
            }
 catch (            Exception e) {
              System.out.println(""String_Node_Str"");
              e.printStackTrace();
            }
          }
 else {
            StopDropTimer();
          }
        }
      }
    }
,0L,20L);
  }
}",0.9647058823529412
187732,"public void removeWolf(){
  isSitting=MyWolf.isSitting();
  HealthNow=MyWolf.getHealth();
  Location=MyWolf.getLocation();
  isThere=false;
  ((LivingEntity)MyWolf).remove();
  MyWolf=null;
}","public void removeWolf(){
  StopDropTimer();
  isSitting=MyWolf.isSitting();
  HealthNow=MyWolf.getHealth();
  Location=MyWolf.getLocation();
  isThere=false;
  ((LivingEntity)MyWolf).remove();
  MyWolf=null;
}",0.9526184538653366
187733,"public void run(){
  if (isThere == false || isDead == true || getPlayer() == null) {
    cb.Plugin.getServer().getScheduler().cancelTask(DropTimer);
  }
 else {
    if (getPlayer() != null) {
      try {
        for (        Entity e : MyWolf.getWorld().getEntities()) {
          if (e instanceof Item) {
            Item item=(Item)e;
            Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
            if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
              int amountleft=Inventory.addItem(item);
              if (amountleft == 0) {
                e.remove();
              }
 else {
                if (item.getItemStack().getAmount() > amountleft) {
                  item.getItemStack().setAmount(amountleft);
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      cb.Plugin.getServer().getScheduler().cancelTask(DropTimer);
    }
  }
}","public void run(){
  if (isThere == false || isDead == true || getPlayer() == null) {
    StopDropTimer();
  }
 else {
    if (getPlayer() != null) {
      try {
        for (        Entity e : MyWolf.getWorld().getEntities()) {
          if (e instanceof Item) {
            Item item=(Item)e;
            Vector distance=getLocation().toVector().add(new Vector(0.5,0,0.5)).subtract(item.getLocation().toVector());
            if (distance.lengthSquared() < 1.0 * cb.cv.WolfPickupRange * cb.cv.WolfPickupRange + 1) {
              int amountleft=Inventory.addItem(item);
              if (amountleft == 0) {
                e.remove();
              }
 else {
                if (item.getItemStack().getAmount() > amountleft) {
                  item.getItemStack().setAmount(amountleft);
                }
              }
            }
          }
        }
      }
 catch (      Exception e) {
        System.out.println(""String_Node_Str"");
        e.printStackTrace();
      }
    }
 else {
      StopDropTimer();
    }
  }
}",0.9524253731343284
187734,"public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cb.mWolves.containsKey(player.getName())) {
      if (cb.Permissions.has(player,""String_Node_Str"") == false) {
        return false;
      }
      if (cb.mWolves.get(player.getName()).isDead == true || cb.mWolves.get(player.getName()).isThere == false) {
        player.sendMessage(""String_Node_Str"");
        return false;
      }
      if (args.length < 1) {
        player.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str"");
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        name+=arg + ""String_Node_Str"";
      }
      name=name.substring(0,name.length() - 1);
      if (cb.mWolves.get(player.getName()).Name.equalsIgnoreCase(name)) {
        cb.mWolves.get(player.getName()).MyWolf.setOwner(null);
        for (        ItemStack is : cb.mWolves.get(player.getName()).Inventory.getContents()) {
          if (is != null) {
            cb.mWolves.get(player.getName()).MyWolf.getWorld().dropItem(cb.mWolves.get(player.getName()).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
          }
        }
        player.sendMessage(ChatColor.AQUA + cb.mWolves.get(player.getName()).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        cb.mWolves.remove(player.getName());
        cb.Plugin.SaveWolves();
        return true;
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(""String_Node_Str"");
    }
  }
  return false;
}","public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (sender instanceof Player) {
    Player player=(Player)sender;
    if (cb.mWolves.containsKey(player.getName())) {
      if (cb.Permissions.has(player,""String_Node_Str"") == false) {
        return false;
      }
      if (cb.mWolves.get(player.getName()).isDead == true || cb.mWolves.get(player.getName()).isThere == false) {
        player.sendMessage(""String_Node_Str"");
        return false;
      }
      if (args.length < 1) {
        player.sendMessage(""String_Node_Str"");
        player.sendMessage(""String_Node_Str"" + ChatColor.AQUA + ""String_Node_Str"");
        return false;
      }
      String name=""String_Node_Str"";
      for (      String arg : args) {
        name+=arg + ""String_Node_Str"";
      }
      name=name.substring(0,name.length() - 1);
      if (cb.mWolves.get(player.getName()).Name.equalsIgnoreCase(name)) {
        cb.mWolves.get(player.getName()).MyWolf.setOwner(null);
        cb.mWolves.get(player.getName()).StopDropTimer();
        for (        ItemStack is : cb.mWolves.get(player.getName()).Inventory.getContents()) {
          if (is != null) {
            cb.mWolves.get(player.getName()).MyWolf.getWorld().dropItem(cb.mWolves.get(player.getName()).getLocation(),new org.bukkit.inventory.ItemStack(is.id,is.count,(short)is.damage));
          }
        }
        player.sendMessage(ChatColor.AQUA + cb.mWolves.get(player.getName()).Name + ChatColor.WHITE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ ChatColor.WHITE+ ""String_Node_Str"");
        cb.mWolves.remove(player.getName());
        cb.Plugin.SaveWolves();
        return true;
      }
 else {
        player.sendMessage(""String_Node_Str"");
      }
    }
 else {
      sender.sendMessage(""String_Node_Str"");
    }
  }
  return false;
}",0.9839690436705362
187735,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.infoactivity);
  mApplicationStrings=new String[mApplications.length];
  for (int i=0; i < mApplications.length; i++) {
    mApplicationStrings[i]=getString(mApplications[i]);
  }
  setListAdapter(new FontArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mApplicationStrings));
  ListView listview=getListView();
  listview.setOnItemClickListener(this);
  TypedArray a=obtainStyledAttributes(mTheme,R.styleable.ShoppingList);
  String typefaceName=a.getString(R.styleable.ShoppingList_textTypeface);
  mTextSizeMedium=a.getDimensionPixelOffset(R.styleable.ShoppingList_textSizeMedium,23);
  mTextSizeLarge=a.getDimensionPixelOffset(R.styleable.ShoppingList_textSizeLarge,28);
  mTextColor=a.getColor(R.styleable.ShoppingList_textColor,Color.BLACK);
  Drawable background=a.getDrawable(R.styleable.ShoppingList_background);
  View v=findViewById(R.id.background);
  v.setBackgroundDrawable(background);
  mTypeface=Typeface.createFromAsset(getResources().getAssets(),typefaceName);
  TextView tv=(TextView)findViewById(R.id.text);
  tv.setTypeface(mTypeface);
  tv.setTextSize(mTextSizeMedium);
  tv.setTextColor(mTextColor);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.infoactivity);
  mApplicationStrings=new String[mApplications.length];
  for (int i=0; i < mApplications.length; i++) {
    mApplicationStrings[i]=getString(mApplications[i]);
  }
  setListAdapter(new FontArrayAdapter<String>(this,android.R.layout.simple_list_item_1,mApplicationStrings));
  ListView listview=getListView();
  listview.setOnItemClickListener(this);
  TypedArray a=obtainStyledAttributes(mTheme,R.styleable.ShoppingList);
  String typefaceName=a.getString(R.styleable.ShoppingList_textTypeface);
  mTextSizeMedium=a.getDimensionPixelOffset(R.styleable.ShoppingList_textSizeMedium,23);
  mTextSizeLarge=a.getDimensionPixelOffset(R.styleable.ShoppingList_textSizeLarge,28);
  mTextColor=a.getColor(R.styleable.ShoppingList_textColor,Color.BLACK);
  Drawable background=a.getDrawable(R.styleable.ShoppingList_background);
  View v=findViewById(R.id.background);
  v.setBackgroundDrawable(background);
  mTypeface=Typeface.create(typefaceName,Typeface.NORMAL);
  TextView tv=(TextView)findViewById(R.id.text);
  tv.setTypeface(mTypeface);
  tv.setTextSize(mTextSizeMedium);
  tv.setTextColor(mTextColor);
}",0.9696243005595524
187736,"public void run(){
  Log.v(TAG,""String_Node_Str"" + currentDirectory);
  File[] files=currentDirectory.listFiles();
  int fileCount=0;
  int dirCount=0;
  int sdCount=0;
  int totalCount=0;
  if (cancel) {
    Log.v(TAG,""String_Node_Str"");
    clearData();
    return;
  }
  if (files == null) {
    Log.v(TAG,""String_Node_Str"");
    totalCount=0;
  }
 else {
    totalCount=files.length;
  }
  operationStartTime=SystemClock.uptimeMillis();
  Log.v(TAG,""String_Node_Str"" + totalCount + ""String_Node_Str"");
  int progress=0;
  List<IconifiedText> listDir=new ArrayList<IconifiedText>(totalCount);
  List<File> listDirFile=new ArrayList<File>(totalCount);
  List<IconifiedText> listFile=new ArrayList<IconifiedText>(totalCount);
  List<File> listFileFile=new ArrayList<File>(totalCount);
  List<IconifiedText> listSdCard=new ArrayList<IconifiedText>(3);
  boolean noMedia=false;
  Drawable sdIcon=context.getResources().getDrawable(R.drawable.ic_launcher_sdcard);
  Drawable folderIcon=context.getResources().getDrawable(R.drawable.ic_launcher_folder);
  Drawable genericFileIcon=context.getResources().getDrawable(R.drawable.icon_file);
  Drawable currentIcon=null;
  boolean displayHiddenFiles=PreferenceActivity.getDisplayHiddenFiles(context);
  if (files != null) {
    for (    File currentFile : files) {
      if (cancel) {
        Log.v(TAG,""String_Node_Str"");
        clearData();
        return;
      }
      progress++;
      updateProgress(progress,totalCount);
      if (!displayHiddenFiles && currentFile.isHidden()) {
        continue;
      }
      if (currentFile.isDirectory()) {
        if (currentFile.getAbsolutePath().equals(mSdCardPath)) {
          currentIcon=sdIcon;
          listSdCard.add(new IconifiedText(currentFile.getName(),""String_Node_Str"",currentIcon));
        }
 else {
          if (!mWriteableOnly || currentFile.canWrite()) {
            listDirFile.add(currentFile);
          }
        }
      }
 else {
        String fileName=currentFile.getName();
        if (!noMedia) {
          if (fileName.equalsIgnoreCase(""String_Node_Str"")) {
            noMedia=true;
          }
        }
        String mimetype=mMimeTypes.getMimeType(fileName);
        String filetype=FileUtils.getExtension(fileName);
        boolean ext_allow=filetype.equalsIgnoreCase(mFilterFiletype) || mFilterFiletype == ""String_Node_Str"";
        boolean mime_allow=mFilterMimetype != null && (mimetype.contentEquals(mFilterMimetype) || mFilterMimetype.contentEquals(""String_Node_Str"") || mFilterFiletype == null);
        if (!mDirectoriesOnly && (ext_allow || mime_allow)) {
          listFileFile.add(currentFile);
        }
      }
    }
  }
  Log.v(TAG,""String_Node_Str"");
  int sortBy=PreferenceActivity.getSortBy(context);
  boolean ascending=PreferenceActivity.getAscending(context);
  Collections.sort(listDirFile,Comparators.getForDirectory(sortBy,ascending));
  Collections.sort(listFileFile,Comparators.getForFile(sortBy,ascending));
  for (  File f : listDirFile) {
    listDir.add(new IconifiedText(f.getName(),""String_Node_Str"",folderIcon));
  }
  for (  File currentFile : listFileFile) {
    String mimetype=mMimeTypes.getMimeType(currentFile.getName());
    currentIcon=getDrawableForMimetype(currentFile,mimetype);
    if (currentIcon == null) {
      currentIcon=genericFileIcon;
    }
 else {
      int width=genericFileIcon.getIntrinsicWidth();
      int height=genericFileIcon.getIntrinsicHeight();
      currentIcon=resizeDrawable(currentIcon,width,height);
    }
    String size=""String_Node_Str"";
    try {
      size=(String)formatter_formatFileSize.invoke(null,context,currentFile.length());
    }
 catch (    Exception e) {
      size=Long.toString(currentFile.length() / 1024);
      size+=""String_Node_Str"";
    }
    listFile.add(new IconifiedText(currentFile.getName(),size + ""String_Node_Str"" + FileUtils.formatDate(context,currentFile.lastModified()),currentIcon));
  }
  if (!cancel) {
    Log.v(TAG,""String_Node_Str"");
    DirectoryContents contents=new DirectoryContents();
    contents.listDir=listDir;
    contents.listFile=listFile;
    contents.listSdCard=listSdCard;
    contents.noMedia=noMedia;
    Message msg=handler.obtainMessage(FileManagerActivity.MESSAGE_SHOW_DIRECTORY_CONTENTS);
    msg.obj=contents;
    msg.sendToTarget();
  }
  clearData();
}","public void run(){
  Log.v(TAG,""String_Node_Str"" + currentDirectory);
  File[] files=currentDirectory.listFiles();
  int fileCount=0;
  int dirCount=0;
  int sdCount=0;
  int totalCount=0;
  if (cancel) {
    Log.v(TAG,""String_Node_Str"");
    clearData();
    return;
  }
  if (files == null) {
    Log.v(TAG,""String_Node_Str"");
    totalCount=0;
  }
 else {
    totalCount=files.length;
  }
  operationStartTime=SystemClock.uptimeMillis();
  Log.v(TAG,""String_Node_Str"" + totalCount + ""String_Node_Str"");
  int progress=0;
  List<IconifiedText> listDir=new ArrayList<IconifiedText>(totalCount);
  List<File> listDirFile=new ArrayList<File>(totalCount);
  List<IconifiedText> listFile=new ArrayList<IconifiedText>(totalCount);
  List<File> listFileFile=new ArrayList<File>(totalCount);
  List<IconifiedText> listSdCard=new ArrayList<IconifiedText>(3);
  boolean noMedia=false;
  Drawable sdIcon=context.getResources().getDrawable(R.drawable.ic_launcher_sdcard);
  Drawable folderIcon=context.getResources().getDrawable(R.drawable.ic_launcher_folder);
  Drawable genericFileIcon=context.getResources().getDrawable(R.drawable.icon_file);
  Drawable currentIcon=null;
  boolean displayHiddenFiles=PreferenceActivity.getDisplayHiddenFiles(context);
  if (files != null) {
    for (    File currentFile : files) {
      if (cancel) {
        Log.v(TAG,""String_Node_Str"");
        clearData();
        return;
      }
      progress++;
      updateProgress(progress,totalCount);
      if (!displayHiddenFiles && currentFile.isHidden()) {
        continue;
      }
      if (currentFile.isDirectory()) {
        if (currentFile.getAbsolutePath().equals(mSdCardPath)) {
          currentIcon=sdIcon;
          listSdCard.add(new IconifiedText(currentFile.getName(),""String_Node_Str"",currentIcon));
        }
 else {
          if (!mWriteableOnly || currentFile.canWrite()) {
            listDirFile.add(currentFile);
          }
        }
      }
 else {
        String fileName=currentFile.getName();
        if (!noMedia) {
          if (fileName.equalsIgnoreCase(""String_Node_Str"")) {
            noMedia=true;
          }
        }
        String mimetype=mMimeTypes.getMimeType(fileName);
        String filetype=FileUtils.getExtension(fileName);
        boolean ext_allow=filetype.equalsIgnoreCase(mFilterFiletype) || mFilterFiletype == ""String_Node_Str"";
        boolean mime_allow=mFilterMimetype != null && (mimetype.contentEquals(mFilterMimetype) || mFilterMimetype.contentEquals(""String_Node_Str"") || mFilterFiletype == null);
        if (!mDirectoriesOnly && (ext_allow || mime_allow)) {
          listFileFile.add(currentFile);
        }
      }
    }
  }
  Log.v(TAG,""String_Node_Str"");
  int sortBy=PreferenceActivity.getSortBy(context);
  boolean ascending=PreferenceActivity.getAscending(context);
  Collections.sort(listDirFile,Comparators.getForDirectory(sortBy,ascending));
  Collections.sort(listFileFile,Comparators.getForFile(sortBy,ascending));
  for (  File f : listDirFile) {
    listDir.add(new IconifiedText(f.getName(),""String_Node_Str"",folderIcon));
  }
  for (  File currentFile : listFileFile) {
    String mimetype=mMimeTypes.getMimeType(currentFile.getName());
    currentIcon=getDrawableForMimetype(currentFile,mimetype);
    if (currentIcon == null) {
      currentIcon=genericFileIcon;
    }
 else {
      int width=genericFileIcon.getIntrinsicWidth();
      int height=genericFileIcon.getIntrinsicHeight();
      currentIcon=ImageUtils.resizeDrawable(currentIcon,width,height);
    }
    String size=""String_Node_Str"";
    try {
      size=(String)formatter_formatFileSize.invoke(null,context,currentFile.length());
    }
 catch (    Exception e) {
      size=Long.toString(currentFile.length() / 1024);
      size+=""String_Node_Str"";
    }
    listFile.add(new IconifiedText(currentFile.getName(),size + ""String_Node_Str"" + FileUtils.formatDate(context,currentFile.lastModified()),currentIcon));
  }
  if (!cancel) {
    Log.v(TAG,""String_Node_Str"");
    DirectoryContents contents=new DirectoryContents();
    contents.listDir=listDir;
    contents.listFile=listFile;
    contents.listSdCard=listSdCard;
    contents.noMedia=noMedia;
    Message msg=handler.obtainMessage(FileManagerActivity.MESSAGE_SHOW_DIRECTORY_CONTENTS);
    msg.obj=contents;
    msg.sendToTarget();
  }
  clearData();
}",0.9987264096329744
187737,"/** 
 * @param parentFile The parentFile, so we can obtain the full path of the bitmap
 * @param fileName The name of the file, also the text in the list item.
 * @return The resized and resampled bitmap, if can not be decoded it returns null.
 */
private Bitmap decodeFile(String parentFile,String fileName){
  if (!cancel) {
    try {
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      options.outWidth=0;
      options.outHeight=0;
      options.inSampleSize=1;
      String filePath=FileUtils.getFile(parentFile,fileName).getPath();
      BitmapFactory.decodeFile(filePath,options);
      if (options.outWidth > 0 && options.outHeight > 0) {
        if (!cancel) {
          int widthFactor=(options.outWidth + thumbnailWidth - 1) / thumbnailWidth;
          int heightFactor=(options.outHeight + thumbnailHeight - 1) / thumbnailHeight;
          widthFactor=Math.max(widthFactor,heightFactor);
          widthFactor=Math.max(widthFactor,1);
          if (widthFactor > 1) {
            if ((widthFactor & (widthFactor - 1)) != 0) {
              while ((widthFactor & (widthFactor - 1)) != 0) {
                widthFactor&=widthFactor - 1;
              }
              widthFactor<<=1;
            }
          }
          options.inSampleSize=widthFactor;
          options.inJustDecodeBounds=false;
          Bitmap bitmap=BitmapFactory.decodeFile(filePath,options);
          if (bitmap != null) {
            return bitmap;
          }
        }
      }
 else {
        if (!mBlacklist.contains(fileName)) {
          mBlacklist.add(fileName);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return null;
}","/** 
 * @param parentFile The parentFile, so we can obtain the full path of the bitmap
 * @param fileName The name of the file, also the text in the list item.
 * @return The resized and resampled bitmap, if can not be decoded it returns null.
 */
private Bitmap decodeFile(String parentFile,String fileName){
  if (!cancel) {
    try {
      BitmapFactory.Options options=new BitmapFactory.Options();
      options.inJustDecodeBounds=true;
      options.outWidth=0;
      options.outHeight=0;
      options.inSampleSize=1;
      String filePath=FileUtils.getFile(parentFile,fileName).getPath();
      BitmapFactory.decodeFile(filePath,options);
      if (options.outWidth > 0 && options.outHeight > 0) {
        if (!cancel) {
          int widthFactor=(options.outWidth + thumbnailWidth - 1) / thumbnailWidth;
          int heightFactor=(options.outHeight + thumbnailHeight - 1) / thumbnailHeight;
          widthFactor=Math.max(widthFactor,heightFactor);
          widthFactor=Math.max(widthFactor,1);
          if (widthFactor > 1) {
            if ((widthFactor & (widthFactor - 1)) != 0) {
              while ((widthFactor & (widthFactor - 1)) != 0) {
                widthFactor&=widthFactor - 1;
              }
              widthFactor<<=1;
            }
          }
          options.inSampleSize=widthFactor;
          options.inJustDecodeBounds=false;
          Bitmap bitmap=ImageUtils.resizeBitmap(BitmapFactory.decodeFile(filePath,options),72,72);
          if (bitmap != null) {
            return bitmap;
          }
        }
      }
 else {
        if (!mBlacklist.contains(fileName)) {
          mBlacklist.add(fileName);
        }
      }
    }
 catch (    Exception e) {
    }
  }
  return null;
}",0.99091175608326
187738,"/** 
 * Return the Drawable that is associated with a specific mime type for the VIEW action.
 * @param mimetype
 * @return
 */
Drawable getDrawableForMimetype(File file,String mimetype){
  if (mimetype == null) {
    return null;
  }
  PackageManager pm=context.getPackageManager();
  if (mimetype.equals(MIME_APK)) {
    String path=file.getPath();
    PackageInfo pInfo=pm.getPackageArchiveInfo(path,PackageManager.GET_ACTIVITIES);
    ApplicationInfo aInfo=pInfo.applicationInfo;
    if (Build.VERSION.SDK_INT >= 8) {
      aInfo.sourceDir=path;
      aInfo.publicSourceDir=path;
    }
    return aInfo.loadIcon(pm);
  }
  Uri data=FileUtils.getUri(file);
  Intent intent=new Intent(Intent.ACTION_VIEW);
  intent.setDataAndType(data,mimetype);
  final List<ResolveInfo> lri=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);
  if (lri != null && lri.size() > 0) {
    int index=0;
    index=lri.size() - 1;
    final ResolveInfo ri=lri.get(index);
    return ri.loadIcon(pm);
  }
  return null;
}","/** 
 * Return the Drawable that is associated with a specific mime type for the VIEW action.
 * @param mimetype
 * @return
 */
Drawable getDrawableForMimetype(File file,String mimetype){
  if (mimetype == null) {
    return null;
  }
  PackageManager pm=context.getPackageManager();
  if (mimetype.equals(MIME_APK)) {
    String path=file.getPath();
    PackageInfo pInfo=pm.getPackageArchiveInfo(path,PackageManager.GET_ACTIVITIES);
    if (pInfo != null) {
      ApplicationInfo aInfo=pInfo.applicationInfo;
      if (Build.VERSION.SDK_INT >= 8) {
        aInfo.sourceDir=path;
        aInfo.publicSourceDir=path;
      }
      return aInfo.loadIcon(pm);
    }
  }
  Uri data=FileUtils.getUri(file);
  Intent intent=new Intent(Intent.ACTION_VIEW);
  intent.setDataAndType(data,mimetype);
  final List<ResolveInfo> lri=pm.queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);
  if (lri != null && lri.size() > 0) {
    int index=0;
    index=lri.size() - 1;
    final ResolveInfo ri=lri.get(index);
    return ri.loadIcon(pm);
  }
  return null;
}",0.979297063071738
187739,"private static boolean usingListSpinner(){
  return (Build.VERSION.SDK_INT < Build.VERSION_CODES.HONEYCOMB);
}","private boolean usingListSpinner(){
  return (findViewById(android.R.id.list) == null);
}",0.592964824120603
187740,"private void addAction(final Action action){
  addSeparator();
  ImageButton actionButton=(ImageButton)inflate(R.layout.actionbar_button);
  actionButton.setImageResource(action.iconResId);
  actionButton.setScaleType(ImageView.ScaleType.FIT_START);
  actionButton.setAdjustViewBounds(true);
  actionButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      action.onClickListener.onClick(view);
    }
  }
);
  mContentView.addView(actionButton);
}","private View addAction(final Action action){
  addSeparator();
  ImageButton actionButton=(ImageButton)inflate(R.layout.actionbar_button);
  actionButton.setImageResource(action.iconResId);
  actionButton.setScaleType(ImageView.ScaleType.FIT_START);
  actionButton.setAdjustViewBounds(true);
  actionButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      action.onClickListener.onClick(view);
    }
  }
);
  mContentView.addView(actionButton);
  return actionButton;
}",0.9690927218344964
187741,"public void setup(){
  if (mTitle == null) {
    addImage(R.drawable.actionbar_logo);
    addTitleAndSpacing();
  }
 else {
    addImage(R.drawable.actionbar_logo_short);
    addTitleAndSpacing();
    for (    Action a : mActions)     addAction(a);
  }
  Action actionMoreMenu=new Action(R.drawable.ic_menu_more,new OnClickListener(){
    public void onClick(    View v){
      ActionBarDropDownMenu dropDownMenu=new ActionBarDropDownMenu(mContext);
      MenuModel menuMore=new MoreMenuBuilder().build(mContext,inactiveMoreMenuFunction);
      dropDownMenu.setMenu(menuMore);
      dropDownMenu.show(mContentView);
    }
  }
);
  addAction(actionMoreMenu);
}","public void setup(){
  if (mTitle == null) {
    addImage(R.drawable.actionbar_logo);
    addTitleAndSpacing();
  }
 else {
    addImage(R.drawable.actionbar_logo_short);
    addTitleAndSpacing();
    for (    Action a : mActions)     addAction(a);
  }
  Action actionMoreMenu=new Action(R.drawable.ic_menu_more,new OnClickListener(){
    public void onClick(    View v){
      ActionBarDropDownMenu dropDownMenu=new ActionBarDropDownMenu(mContext);
      MenuModel menuMore=new MoreMenuBuilder().build(mContext,inactiveMoreMenuFunction);
      dropDownMenu.setMenu(menuMore);
      dropDownMenu.show(mMoreMenuAnchor);
    }
  }
);
  mMoreMenuAnchor=addAction(actionMoreMenu);
}",0.9693343305908751
187742,"/** 
 * Returns the controller component of a sensor by name. (by accessing mSensorSimulator.controller list with all controllers)
 * @param sensorName
 * @return
 */
private SensorController getSensorCtrlFromName(String sensorName){
  SensorSimulatorController ctrl=mSensorSimulator.controller;
  if (sensorName.compareTo(SensorModel.ACCELEROMETER) == 0)   return ctrl.getAccelerometer();
 else   if (sensorName.compareTo(SensorModel.MAGNETIC_FIELD) == 0)   return ctrl.getMagneticField();
 else   if (sensorName.compareTo(SensorModel.ORIENTATION) == 0)   return ctrl.getOrientation();
 else   if (sensorName.compareTo(SensorModel.TEMPERATURE) == 0)   return ctrl.getTemperature();
 else   if (sensorName.compareTo(SensorModel.BARCODE_READER) == 0)   return ctrl.getBarcodeReader();
 else   if (sensorName.compareTo(SensorModel.LIGHT) == 0)   return ctrl.getLight();
 else   if (sensorName.compareTo(SensorModel.PROXIMITY) == 0)   return ctrl.getProximity();
 else   if (sensorName.compareTo(SensorModel.PRESSURE) == 0)   return ctrl.getPressure();
 else   if (sensorName.compareTo(SensorModel.LINEAR_ACCELERATION) == 0)   return ctrl.getLinearAcceleration();
 else   if (sensorName.compareTo(SensorModel.GRAVITY) == 0)   return ctrl.getGravity();
 else   if (sensorName.compareTo(SensorModel.ROTATION_VECTOR) == 0)   return ctrl.getRotationVector();
  return null;
}","/** 
 * Returns the controller component of a sensor by name. (by accessing mSensorSimulator.controller list with all controllers)
 * @param sensorName
 * @return
 */
private SensorController getSensorCtrlFromName(String sensorName){
  SensorSimulatorController ctrl=mSensorSimulator.controller;
  if (sensorName.compareTo(SensorModel.ACCELEROMETER) == 0)   return ctrl.getAccelerometer();
 else   if (sensorName.compareTo(SensorModel.MAGNETIC_FIELD) == 0)   return ctrl.getMagneticField();
 else   if (sensorName.compareTo(SensorModel.ORIENTATION) == 0)   return ctrl.getOrientation();
 else   if (sensorName.compareTo(SensorModel.TEMPERATURE) == 0)   return ctrl.getTemperature();
 else   if (sensorName.compareTo(SensorModel.BARCODE_READER) == 0)   return ctrl.getBarcodeReader();
 else   if (sensorName.compareTo(SensorModel.LIGHT) == 0)   return ctrl.getLight();
 else   if (sensorName.compareTo(SensorModel.PROXIMITY) == 0)   return ctrl.getProximity();
 else   if (sensorName.compareTo(SensorModel.PRESSURE) == 0)   return ctrl.getPressure();
 else   if (sensorName.compareTo(SensorModel.LINEAR_ACCELERATION) == 0)   return ctrl.getLinearAcceleration();
 else   if (sensorName.compareTo(SensorModel.GRAVITY) == 0)   return ctrl.getGravity();
 else   if (sensorName.compareTo(SensorModel.ROTATION_VECTOR) == 0)   return ctrl.getRotationVector();
 else   if (sensorName.compareTo(SensorModel.GYROSCOPE) == 0)   return ctrl.getGyroscope();
  return null;
}",0.958981612446959
187743,"/** 
 * Returns the model component of a sensor by name. (by accessing mSensorSimulator.modellist with all models)
 * @param sensorName
 * @return
 */
private SensorModel getSensorModelFromName(String sensorName){
  SensorSimulatorModel model=mSensorSimulator.model;
  if (sensorName.compareTo(SensorModel.ACCELEROMETER) == 0)   return model.getAccelerometer();
 else   if (sensorName.compareTo(SensorModel.MAGNETIC_FIELD) == 0)   return model.getMagneticField();
 else   if (sensorName.compareTo(SensorModel.ORIENTATION) == 0)   return model.getOrientation();
 else   if (sensorName.compareTo(SensorModel.TEMPERATURE) == 0)   return model.getTemperature();
 else   if (sensorName.compareTo(SensorModel.BARCODE_READER) == 0)   return model.getBarcodeReader();
 else   if (sensorName.compareTo(SensorModel.LIGHT) == 0)   return model.getLight();
 else   if (sensorName.compareTo(SensorModel.PROXIMITY) == 0)   return model.getProximity();
 else   if (sensorName.compareTo(SensorModel.PRESSURE) == 0)   return model.getPressure();
 else   if (sensorName.compareTo(SensorModel.LINEAR_ACCELERATION) == 0)   return model.getLinearAcceleration();
 else   if (sensorName.compareTo(SensorModel.GRAVITY) == 0)   return model.getGravity();
 else   if (sensorName.compareTo(SensorModel.ROTATION_VECTOR) == 0)   return model.getRotationVector();
  return null;
}","/** 
 * Returns the model component of a sensor by name. (by accessing mSensorSimulator.modellist with all models)
 * @param sensorName
 * @return
 */
private SensorModel getSensorModelFromName(String sensorName){
  SensorSimulatorModel model=mSensorSimulator.model;
  if (sensorName.compareTo(SensorModel.ACCELEROMETER) == 0)   return model.getAccelerometer();
 else   if (sensorName.compareTo(SensorModel.MAGNETIC_FIELD) == 0)   return model.getMagneticField();
 else   if (sensorName.compareTo(SensorModel.ORIENTATION) == 0)   return model.getOrientation();
 else   if (sensorName.compareTo(SensorModel.TEMPERATURE) == 0)   return model.getTemperature();
 else   if (sensorName.compareTo(SensorModel.BARCODE_READER) == 0)   return model.getBarcodeReader();
 else   if (sensorName.compareTo(SensorModel.LIGHT) == 0)   return model.getLight();
 else   if (sensorName.compareTo(SensorModel.PROXIMITY) == 0)   return model.getProximity();
 else   if (sensorName.compareTo(SensorModel.PRESSURE) == 0)   return model.getPressure();
 else   if (sensorName.compareTo(SensorModel.LINEAR_ACCELERATION) == 0)   return model.getLinearAcceleration();
 else   if (sensorName.compareTo(SensorModel.GRAVITY) == 0)   return model.getGravity();
 else   if (sensorName.compareTo(SensorModel.ROTATION_VECTOR) == 0)   return model.getRotationVector();
 else   if (sensorName.compareTo(SensorModel.GYROSCOPE) == 0)   return model.getGyroscope();
  return null;
}",0.958109559613319
187744,"/** 
 * Handles communication with the client. In a simple protocol, all Android Sensors class methods are received and answered. If necessary, exceptions are thrown as specified in the Sensors class.
 */
public void listenThread(){
  try {
    PrintWriter out=new PrintWriter(mClientSocket.getOutputStream(),true);
    BufferedReader in=new BufferedReader(new InputStreamReader(mClientSocket.getInputStream()));
    String inputLine, outputLine;
    outputLine=""String_Node_Str"";
    out.println(outputLine);
    mSensorSimulator.addMessage(""String_Node_Str"");
    while ((inputLine=in.readLine()) != null) {
      if (inputLine.compareTo(""String_Node_Str"") == 0) {
        String[] supportedSensors=getSupportedSensors();
        out.println(supportedSensors.length);
        for (int i=0; i < supportedSensors.length; i++) {
          out.println(supportedSensors[i]);
        }
      }
 else {
        executeCommand(out,in,inputLine);
      }
    }
    out.close();
    in.close();
    mClientSocket.close();
  }
 catch (  IOException e) {
    if (mTalking) {
      System.err.println(""String_Node_Str"");
      try {
        if (mClientSocket != null)         mClientSocket.close();
      }
 catch (      IOException e2) {
        System.err.println(""String_Node_Str"");
      }
    }
 else {
    }
  }
  if (mPreviousThread != null) {
    mPreviousThread.mNextThread=mNextThread;
  }
  if (mNextThread != null) {
    mNextThread.mPreviousThread=mPreviousThread;
  }
  mSensorSimulator.addMessage(""String_Node_Str"");
}","/** 
 * Handles communication with the client. In a simple protocol, all Android Sensors class methods are received and answered. If necessary, exceptions are thrown as specified in the Sensors class.
 */
public void listenThread(){
  try {
    PrintWriter out=new PrintWriter(mClientSocket.getOutputStream(),true);
    BufferedReader in=new BufferedReader(new InputStreamReader(mClientSocket.getInputStream()));
    String inputLine, outputLine;
    outputLine=""String_Node_Str"";
    out.println(outputLine);
    mSensorSimulator.addMessage(""String_Node_Str"");
    while ((inputLine=in.readLine()) != null) {
      if (inputLine.compareTo(""String_Node_Str"") == 0) {
        String[] supportedSensors=getSupportedSensors();
        out.println(supportedSensors.length);
        for (int i=0; i < supportedSensors.length; i++) {
          out.println(supportedSensors[i]);
        }
      }
 else {
        executeCommand(out,in,inputLine);
      }
    }
    out.close();
    in.close();
    mClientSocket.close();
  }
 catch (  IOException e) {
    if (mTalking) {
      System.err.println(""String_Node_Str"");
      try {
        if (mClientSocket != null) {
          mClientSocket.close();
        }
      }
 catch (      IOException e2) {
        System.err.println(""String_Node_Str"");
      }
    }
 else {
    }
  }
  if (mPreviousThread != null) {
    mPreviousThread.mNextThread=mNextThread;
  }
  if (mNextThread != null) {
    mNextThread.mPreviousThread=mPreviousThread;
  }
  mSensorSimulator.addMessage(""String_Node_Str"");
}",0.9954218443427076
187745,"/** 
 * Method to call only once thread.
 */
public void run(){
  listenThread();
}","/** 
 * Method to call only once thread.
 */
@Override public void run(){
  listenThread();
}",0.9431818181818182
187746,"/** 
 * Here each command is executed following the protocol between server and client application.
 * @param out OutputStream (to write in)
 * @param in InputStream (to read from)
 * @param cmd command to be executed
 * @throws IOException
 */
private void executeCommand(PrintWriter out,BufferedReader in,String cmd) throws IOException {
  String sensorName=in.readLine();
  SensorController sensorCtrl=getSensorCtrlFromName(sensorName);
  SensorModel sensorModel=getSensorModelFromName(sensorName);
  if (cmd.compareTo(""String_Node_Str"") == 0)   sensorModel.getNumSensorValues(out);
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    String args=in.readLine();
    if (sensorModel.isEnabled()) {
      int updateDelay=Integer.parseInt(args);
      sensorCtrl.setCurrentUpdateRate(updateDelay);
      sensorModel.setSensorUpdateRate(out);
    }
 else {
      System.out.println(sensorName + ""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    sensorModel.unsetSensorUpdateRate(out);
    sensorCtrl.setCurrentUpdateRate(sensorModel.getDefaultUpdateRate());
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    if (sensorCtrl != null) {
      sensorCtrl.readSensor(out);
      sensorCtrl.updateEmulatorRefresh(mSensorSimulator.view.getRefreshCount());
    }
 else {
      out.println(""String_Node_Str"");
      mSensorSimulator.addMessage(""String_Node_Str"" + cmd);
    }
  }
 else   out.println(""String_Node_Str"");
}","/** 
 * Here each command is executed following the protocol between server and client application.
 * @param out OutputStream (to write in)
 * @param in InputStream (to read from)
 * @param cmd command to be executed
 * @throws IOException
 */
private void executeCommand(PrintWriter out,BufferedReader in,String cmd) throws IOException {
  String sensorName=in.readLine();
  SensorController sensorCtrl=getSensorCtrlFromName(sensorName);
  SensorModel sensorModel=getSensorModelFromName(sensorName);
  if (cmd.compareTo(""String_Node_Str"") == 0) {
    sensorModel.getNumSensorValues(out);
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    String args=in.readLine();
    if (sensorModel.isEnabled()) {
      int updateDelay=Integer.parseInt(args);
      sensorCtrl.setCurrentUpdateRate(updateDelay);
      sensorModel.setSensorUpdateRate(out);
    }
 else {
      System.out.println(sensorName + ""String_Node_Str"");
      out.println(""String_Node_Str"");
    }
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    sensorModel.unsetSensorUpdateRate(out);
    sensorCtrl.setCurrentUpdateRate(sensorModel.getDefaultUpdateRate());
  }
 else   if (cmd.compareTo(""String_Node_Str"") == 0) {
    if (sensorCtrl != null) {
      sensorCtrl.readSensor(out);
      sensorCtrl.updateEmulatorRefresh(mSensorSimulator.view.getRefreshCount());
    }
 else {
      out.println(""String_Node_Str"");
      mSensorSimulator.addMessage(""String_Node_Str"" + cmd);
    }
  }
 else {
    out.println(""String_Node_Str"");
  }
}",0.9947019867549668
187747,"private void createList(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mShoppingListsView=(ListView)findViewById(android.R.id.list);
    ((ListView)mShoppingListsView).setOnItemSelectedListener(new OnItemSelectedListener(){
      public void onItemSelected(      AdapterView parent,      View v,      int position,      long id){
        if (debug)         Log.d(TAG,""String_Node_Str"");
        getSelectedListId();
        setListTheme(loadListTheme());
        fillItems(id == mItemsView.getListId());
        applyListTheme();
        ((ListView)mShoppingListsView).setItemChecked(position,true);
      }
      public void onNothingSelected(      AdapterView arg0){
        if (debug)         Log.d(TAG,""String_Node_Str"" + mIsActive);
        if (mIsActive) {
          fillItems(false);
        }
      }
    }
);
  }
 else {
    mShoppingListsView=(Spinner)findViewById(R.id.spinner_listfilter);
    ((Spinner)mShoppingListsView).setOnItemSelectedListener(new OnItemSelectedListener(){
      public void onItemSelected(      AdapterView parent,      View v,      int position,      long id){
        if (debug)         Log.d(TAG,""String_Node_Str"");
        getSelectedListId();
        setListTheme(loadListTheme());
        fillItems(id == mItemsView.getListId());
        applyListTheme();
      }
      public void onNothingSelected(      AdapterView arg0){
        if (debug)         Log.d(TAG,""String_Node_Str"" + mIsActive);
        if (mIsActive) {
          fillItems(false);
        }
      }
    }
);
  }
}","private void createList(){
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    mShoppingListsView=(ListView)findViewById(android.R.id.list);
    ((ListView)mShoppingListsView).setOnItemSelectedListener(new OnItemSelectedListener(){
      public void onItemSelected(      AdapterView parent,      View v,      int position,      long id){
        if (debug)         Log.d(TAG,""String_Node_Str"");
        getSelectedListId();
        setListTheme(loadListTheme());
        fillItems(id == mItemsView.getListId());
        applyListTheme();
        updateTitle();
        ((ListView)mShoppingListsView).setItemChecked(position,true);
      }
      public void onNothingSelected(      AdapterView arg0){
        if (debug)         Log.d(TAG,""String_Node_Str"" + mIsActive);
        if (mIsActive) {
          fillItems(false);
        }
      }
    }
);
  }
 else {
    mShoppingListsView=(Spinner)findViewById(R.id.spinner_listfilter);
    ((Spinner)mShoppingListsView).setOnItemSelectedListener(new OnItemSelectedListener(){
      public void onItemSelected(      AdapterView parent,      View v,      int position,      long id){
        if (debug)         Log.d(TAG,""String_Node_Str"");
        getSelectedListId();
        setListTheme(loadListTheme());
        fillItems(id == mItemsView.getListId());
        updateTitle();
        applyListTheme();
      }
      public void onNothingSelected(      AdapterView arg0){
        if (debug)         Log.d(TAG,""String_Node_Str"" + mIsActive);
        if (mIsActive) {
          fillItems(false);
        }
      }
    }
);
  }
}",0.9853222718570516
187748,"@Override protected void onResume(){
  if (debug)   Log.i(TAG,""String_Node_Str"");
  super.onResume();
  if (debug)   Log.i(TAG,""String_Node_Str"");
  initFromPreferences();
  mIsActive=true;
  if (mState == STATE_MAIN || mState == STATE_VIEW_LIST) {
  }
 else   if ((mState == STATE_PICK_ITEM) || (mState == STATE_GET_CONTENT_ITEM)) {
    setTitle(getText(R.string.pick_item));
    setTitleColor(0xFFAAAAFF);
  }
  getSelectedListId();
  setListTheme(loadListTheme());
  applyListTheme();
  mItemsView.onResume();
  mEditText.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
  if (!mUpdating) {
    mUpdating=true;
  }
  registerSensor();
  if (debug)   Log.i(TAG,""String_Node_Str"");
}","@Override protected void onResume(){
  if (debug)   Log.i(TAG,""String_Node_Str"");
  super.onResume();
  if (debug)   Log.i(TAG,""String_Node_Str"");
  initFromPreferences();
  mIsActive=true;
  getSelectedListId();
  setListTheme(loadListTheme());
  applyListTheme();
  mItemsView.onResume();
  updateTitle();
  mEditText.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
  if (!mUpdating) {
    mUpdating=true;
  }
  registerSensor();
  if (debug)   Log.i(TAG,""String_Node_Str"");
}",0.8107680126682502
187749,"private void onModeChanged(){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  fillItems(false);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    try {
      java.lang.reflect.Method method=Activity.class.getMethod(""String_Node_Str"");
      method.invoke(this);
    }
 catch (    Exception e) {
    }
  }
  if (mItemsView.mMode == MODE_IN_SHOP) {
    setTitle(getString(R.string.shopping_title,getCurrentListName()));
    registerSensor();
  }
 else {
    setTitle(getString(R.string.pick_items_titel,getCurrentListName()));
    unregisterSensor();
  }
}","private void onModeChanged(){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  fillItems(false);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
    try {
      java.lang.reflect.Method method=Activity.class.getMethod(""String_Node_Str"");
      method.invoke(this);
    }
 catch (    Exception e) {
    }
  }
  updateTitle();
}",0.7266739846322722
187750,"private String getCurrentListName(){
  long listId=getSelectedListId();
  return mCursorShoppingLists.getString(mStringListFilterNAME);
}","private String getCurrentListName(){
  long listId=getSelectedListId();
  if (listId >= 0) {
    return mCursorShoppingLists.getString(mStringListFilterNAME);
  }
 else {
    return ""String_Node_Str"";
  }
}",0.7988338192419825
187751,"public void onItemSelected(AdapterView parent,View v,int position,long id){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  getSelectedListId();
  setListTheme(loadListTheme());
  fillItems(id == mItemsView.getListId());
  applyListTheme();
}","public void onItemSelected(AdapterView parent,View v,int position,long id){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  getSelectedListId();
  setListTheme(loadListTheme());
  fillItems(id == mItemsView.getListId());
  updateTitle();
  applyListTheme();
}",0.9659318637274548
187752,"public void run(){
  try {
    Writer writer;
    Encoding enc=(Encoding)mSpinnerEncoding.getSelectedItem();
    if (enc == null) {
      writer=new OutputStreamWriter(new FileOutputStream(file));
    }
 else {
      writer=new OutputStreamWriter(new FileOutputStream(file),enc.name());
    }
    doExport(writer);
    writer.close();
    dispatchSuccess(R.string.export_finished);
  }
 catch (  IOException e) {
    dispatchError(R.string.error_writing_file);
    Log.i(TAG,""String_Node_Str"",e);
  }
  smHasWorkerThread=false;
}","public void run(){
  try {
    Writer writer;
    Encoding enc=getCurrentEncoding();
    if (enc == null) {
      writer=new OutputStreamWriter(new FileOutputStream(file));
    }
 else {
      writer=new OutputStreamWriter(new FileOutputStream(file),enc.name());
    }
    doExport(writer);
    writer.close();
    dispatchSuccess(R.string.export_finished);
  }
 catch (  IOException e) {
    dispatchError(R.string.error_writing_file);
    Log.i(TAG,""String_Node_Str"",e);
  }
  smHasWorkerThread=false;
}",0.9574468085106383
187753,"@Override protected Encoding getDefaultEncoding(){
  if (1 == mSpinner.getSelectedItemId()) {
    return Encoding.ISO_8859_1;
  }
 else {
    return super.getDefaultEncoding();
  }
}","@Override protected Encoding getDefaultEncoding(){
  long id=mSpinner.getSelectedItemId();
  if (0 == id) {
    return Encoding.ISO_8859_1;
  }
 else   if (1 == id) {
    return Encoding.UTF_8;
  }
 else {
    return super.getDefaultEncoding();
  }
}",0.7407407407407407
187754,"/** 
 * @param dos
 * @throws IOException
 */
public void exportHandyShopperCsv(Writer writer,long listId) throws IOException {
  CSVWriter csvwriter=new CSVWriter(writer);
  csvwriter.setLineEnd(""String_Node_Str"");
  csvwriter.setQuoteCharacter(CSVWriter.NO_QUOTE_CHARACTER);
  csvwriter.write(handyShopperColumns);
  csvwriter.writeNewline();
  Cursor ci=mContext.getContentResolver().query(Shopping.ContainsFull.CONTENT_URI,PROJECTION_CONTAINS_FULL_HANDY_SHOPPER,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"",new String[]{""String_Node_Str"" + listId},Shopping.ContainsFull.DEFAULT_SORT_ORDER);
  if (ci != null) {
    int itemcount=ci.getCount();
    ConvertCsvBaseActivity.dispatchSetMaxProgress(itemcount);
    int progress=0;
    while (ci.moveToNext()) {
      ConvertCsvBaseActivity.dispatchConversionProgress(progress++);
      String itemname=ci.getString(ci.getColumnIndexOrThrow(Shopping.ContainsFull.ITEM_NAME));
      int status=ci.getInt(ci.getColumnIndexOrThrow(Shopping.ContainsFull.STATUS));
      String tags=ci.getString(ci.getColumnIndexOrThrow(Shopping.ContainsFull.ITEM_TAGS));
      String priority=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.PRIORITY));
      String quantity=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.QUANTITY));
      long price=ci.getLong(ci.getColumnIndex(Shopping.ContainsFull.ITEM_PRICE));
      String pricestring=""String_Node_Str"";
      if (price != 0) {
        pricestring+=(double)price / 100.d;
      }
      String unit=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.ITEM_UNITS));
      long itemId=ci.getInt(ci.getColumnIndex(Shopping.ContainsFull.ITEM_ID));
      String statusText=getHandyShopperStatusText(status);
      if (tags == null) {
        tags=""String_Node_Str"";
      }
      int t=tags.indexOf(""String_Node_Str"");
      String firstTag=""String_Node_Str"";
      String otherTags=""String_Node_Str"";
      if (t >= 0) {
        firstTag=tags.substring(0,t);
        otherTags=tags.substring(t + 1);
      }
 else {
        firstTag=tags;
        otherTags=""String_Node_Str"";
      }
      String note=getHandyShopperNote(itemId);
      String stores=getHandyShopperStores(itemId);
      String perStoreInfo=getHandyShopperPerStoreInfo(itemId);
      csvwriter.write(statusText);
      csvwriter.write(priority);
      csvwriter.write(itemname);
      csvwriter.write(otherTags);
      csvwriter.write(quantity);
      csvwriter.write(unit);
      csvwriter.write(pricestring);
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(firstTag);
      csvwriter.write(stores);
      csvwriter.write(perStoreInfo);
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(note);
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.write(""String_Node_Str"");
      csvwriter.writeNewline();
    }
    ci.close();
  }
  csvwriter.close();
}","/** 
 * @param dos
 * @throws IOException
 */
public void exportHandyShopperCsv(Writer writer,long listId) throws IOException {
  CSVWriter csvwriter=new CSVWriter(writer);
  csvwriter.setLineEnd(""String_Node_Str"");
  csvwriter.setQuoteCharacter(CSVWriter.NO_QUOTE_CHARACTER);
  csvwriter.write(handyShopperColumns);
  csvwriter.writeNewline();
  csvwriter.setQuoteCharacter(CSVWriter.DEFAULT_QUOTE_CHARACTER);
  Cursor ci=mContext.getContentResolver().query(Shopping.ContainsFull.CONTENT_URI,PROJECTION_CONTAINS_FULL_HANDY_SHOPPER,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"",new String[]{""String_Node_Str"" + listId},Shopping.ContainsFull.DEFAULT_SORT_ORDER);
  if (ci != null) {
    int itemcount=ci.getCount();
    ConvertCsvBaseActivity.dispatchSetMaxProgress(itemcount);
    int progress=0;
    while (ci.moveToNext()) {
      ConvertCsvBaseActivity.dispatchConversionProgress(progress++);
      String itemname=ci.getString(ci.getColumnIndexOrThrow(Shopping.ContainsFull.ITEM_NAME));
      int status=ci.getInt(ci.getColumnIndexOrThrow(Shopping.ContainsFull.STATUS));
      String tags=ci.getString(ci.getColumnIndexOrThrow(Shopping.ContainsFull.ITEM_TAGS));
      String priority=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.PRIORITY));
      String quantity=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.QUANTITY));
      long price=ci.getLong(ci.getColumnIndex(Shopping.ContainsFull.ITEM_PRICE));
      String pricestring=""String_Node_Str"";
      if (price != 0) {
        pricestring+=(double)price / 100.d;
      }
      String unit=ci.getString(ci.getColumnIndex(Shopping.ContainsFull.ITEM_UNITS));
      long itemId=ci.getInt(ci.getColumnIndex(Shopping.ContainsFull.ITEM_ID));
      String statusText=getHandyShopperStatusText(status);
      if (tags == null) {
        tags=""String_Node_Str"";
      }
      int t=tags.indexOf(""String_Node_Str"");
      String firstTag=""String_Node_Str"";
      String otherTags=""String_Node_Str"";
      if (t >= 0) {
        firstTag=tags.substring(0,t);
        otherTags=tags.substring(t + 1);
      }
 else {
        firstTag=tags;
        otherTags=""String_Node_Str"";
      }
      String note=getHandyShopperNote(itemId);
      if (note != null) {
        note=note.replace(""String_Node_Str"",""String_Node_Str"");
      }
      String stores=getHandyShopperStores(itemId);
      String perStoreInfo=getHandyShopperPerStoreInfo(itemId);
      csvwriter.writeValue(statusText);
      csvwriter.writeValue(priority);
      csvwriter.writeValue(itemname);
      csvwriter.writeValue(otherTags);
      csvwriter.writeValue(quantity);
      csvwriter.writeValue(unit);
      csvwriter.writeValue(pricestring);
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(firstTag);
      csvwriter.writeValue(stores);
      csvwriter.writeValue(perStoreInfo);
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.write(note);
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeValue(""String_Node_Str"");
      csvwriter.writeNewline();
    }
    ci.close();
  }
  csvwriter.close();
}",0.7792481203007519
187755,"private void sendFile(File file){
  String filename=file.getName();
  String content=""String_Node_Str"";
  Log.i(TAG,""String_Node_Str"" + filename);
  Log.i(TAG,""String_Node_Str"" + content);
  Intent i=new Intent();
  i.setAction(Intent.ACTION_SEND);
  i.setType(mMimeTypes.getMimeType(file.getName()));
  i.putExtra(Intent.EXTRA_SUBJECT,filename);
  i.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + FileManagerProvider.AUTHORITY + ""String_Node_Str""+ file.getAbsolutePath()));
  i=Intent.createChooser(i,getString(R.string.menu_send));
  try {
    startActivity(i);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.send_not_available,Toast.LENGTH_SHORT).show();
    Log.e(TAG,""String_Node_Str"");
  }
}","private void sendFile(File file){
  String filename=file.getName();
  String content=""String_Node_Str"";
  Log.i(TAG,""String_Node_Str"" + filename);
  Log.i(TAG,""String_Node_Str"" + content);
  Intent i=new Intent();
  i.setAction(Intent.ACTION_SEND);
  i.setType(mMimeTypes.getMimeType(file.getName()));
  i.putExtra(Intent.EXTRA_SUBJECT,filename);
  i.putExtra(Intent.EXTRA_STREAM,Uri.parse(""String_Node_Str"" + FileManagerProvider.AUTHORITY + file.getAbsolutePath()));
  i=Intent.createChooser(i,getString(R.string.menu_send));
  try {
    startActivity(i);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.send_not_available,Toast.LENGTH_SHORT).show();
    Log.e(TAG,""String_Node_Str"");
  }
}",0.9869952087611226
187756,"/** 
 * @return
 */
public List<CategoryEntry> fetchAllCategoryRows(){
  ArrayList<CategoryEntry> ret=new ArrayList<CategoryEntry>();
  try {
    Cursor c=db.query(TABLE_CATEGORIES,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; ++i) {
      CategoryEntry row=new CategoryEntry();
      row.id=c.getLong(0);
      row.name=c.getString(1);
      ret.add(row);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
    Log.d(TAG,""String_Node_Str"" + e.getLocalizedMessage());
  }
  return ret;
}","/** 
 * @return
 */
public List<CategoryEntry> fetchAllCategoryRows(){
  ArrayList<CategoryEntry> ret=new ArrayList<CategoryEntry>();
  if (db == null) {
    return ret;
  }
  try {
    Cursor c=db.query(TABLE_CATEGORIES,new String[]{""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; ++i) {
      CategoryEntry row=new CategoryEntry();
      row.id=c.getLong(0);
      row.name=c.getString(1);
      ret.add(row);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
    Log.d(TAG,""String_Node_Str"" + e.getLocalizedMessage());
  }
  return ret;
}",0.968944099378882
187757,"private long[] getRowsIds(){
  if (debug)   Log.d(TAG,""String_Node_Str"" + rows);
  if (rows != null) {
    long[] ids=new long[rows.size()];
    Iterator<PassEntry> passIter=rows.iterator();
    int i=0;
    while (passIter.hasNext()) {
      ids[i]=passIter.next().id;
      i++;
    }
    return ids;
  }
 else {
    return null;
  }
}","public static long[] getRowsIds(List<PassEntry> rows){
  if (debug)   Log.d(TAG,""String_Node_Str"" + rows);
  if (rows != null) {
    long[] ids=new long[rows.size()];
    Iterator<PassEntry> passIter=rows.iterator();
    int i=0;
    while (passIter.hasNext()) {
      ids[i]=passIter.next().id;
      i++;
    }
    return ids;
  }
 else {
    return null;
  }
}",0.9457142857142856
187758,"private void viewPassword(int position){
  Intent vi=new Intent(this,PassView.class);
  vi.putExtra(KEY_ID,rows.get(position).id);
  vi.putExtra(KEY_CATEGORY_ID,CategoryId);
  vi.putExtra(KEY_ROWIDS,getRowsIds());
  vi.putExtra(KEY_LIST_POSITION,position);
  startActivityForResult(vi,REQUEST_VIEW_PASSWORD);
}","private void viewPassword(int position){
  Intent vi=new Intent(this,PassView.class);
  vi.putExtra(KEY_ID,rows.get(position).id);
  vi.putExtra(KEY_CATEGORY_ID,CategoryId);
  vi.putExtra(KEY_ROWIDS,getRowsIds(rows));
  vi.putExtra(KEY_LIST_POSITION,position);
  startActivityForResult(vi,REQUEST_VIEW_PASSWORD);
}",0.9935897435897436
187759,"protected void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (debug)   Log.d(TAG,""String_Node_Str"" + position);
  if ((results == null) || (results.size() == 0)) {
    return;
  }
  Intent passView=new Intent(this,PassView.class);
  passView.putExtra(PassList.KEY_ID,results.get(position).id);
  if (debug)   Log.d(TAG,""String_Node_Str"" + results.get(position).category);
  passView.putExtra(PassList.KEY_CATEGORY_ID,results.get(position).category);
  startActivityForResult(passView,REQUEST_VIEW_PASSWORD);
}","protected void onListItemClick(ListView l,View v,int position,long id){
  super.onListItemClick(l,v,position,id);
  if (debug)   Log.d(TAG,""String_Node_Str"" + position);
  if ((results == null) || (results.size() == 0)) {
    return;
  }
  Intent passView=new Intent(this,PassView.class);
  passView.putExtra(PassList.KEY_ID,results.get(position).id);
  if (debug)   Log.d(TAG,""String_Node_Str"" + results.get(position).category);
  passView.putExtra(PassList.KEY_CATEGORY_ID,results.get(position).category);
  passView.putExtra(PassList.KEY_ROWIDS,PassList.getRowsIds(results));
  passView.putExtra(PassList.KEY_LIST_POSITION,position);
  startActivityForResult(passView,REQUEST_VIEW_PASSWORD);
}",0.8978622327790974
187760,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
    if (resultCode == RESULT_OK) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      if (service == null) {
        mServiceIntent=data;
        return;
      }
      setServiceParametersFromExtrasAndDispatchAction(data);
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      moveTaskToBack(true);
      setResult(RESULT_CANCELED);
      finish();
    }
  break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
if (service == null) {
  if (debug)   Log.i(TAG,""String_Node_Str"");
}
 else if (salt == null) {
  try {
    salt=service.getSalt();
    masterKey=service.getPassword();
    if (debug)     Log.d(TAG,""String_Node_Str"");
    actionDispatch();
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
    finish();
  }
}
 else {
  if (debug)   Log.i(TAG,""String_Node_Str"");
  actionDispatch();
}
break;
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
    if (resultCode == RESULT_OK) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      if (service == null) {
        mServiceIntent=data;
        delayedFinish=true;
        return;
      }
      setServiceParametersFromExtrasAndDispatchAction(data);
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      moveTaskToBack(true);
      setResult(RESULT_CANCELED);
      finish();
    }
  break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
if (service == null) {
  if (debug)   Log.i(TAG,""String_Node_Str"");
}
 else if (salt == null) {
  try {
    salt=service.getSalt();
    masterKey=service.getPassword();
    if (debug)     Log.d(TAG,""String_Node_Str"");
    actionDispatch();
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
    finish();
  }
}
 else {
  if (debug)   Log.i(TAG,""String_Node_Str"");
  actionDispatch();
}
break;
}
}",0.987012987012987
187761,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  initService();
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  initService();
  if (delayedFinish == true) {
    delayedFinish=false;
    setResult(RESULT_OK);
    finish();
  }
}",0.7058823529411765
187762,"/** 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (requestCode == REQUEST_EDIT_PASS) {
    if (resultCode == PassEdit.RESULT_DELETED) {
      entryEdited=true;
      finish();
    }
    if ((resultCode == RESULT_OK) || (PassEdit.entryEdited)) {
      View current=this.flipper.getCurrentView();
      populateFields(RowId,current);
      entryEdited=true;
    }
  }
}","/** 
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (requestCode == REQUEST_EDIT_PASS) {
    if (resultCode == PassEdit.RESULT_DELETED) {
      entryEdited=true;
      finish();
    }
    if ((resultCode == RESULT_OK) || (PassEdit.entryEdited)) {
      if (flipper != null) {
        View current=this.flipper.getCurrentView();
        populateFields(RowId,current);
      }
      entryEdited=true;
    }
  }
}",0.9615023474178404
187763,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    startActivity(frontdoor);
    return;
  }
  IntentFilter filter=new IntentFilter(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mIntentReceiver,filter);
  Passwords.Initialize(this);
  if (flipper == null) {
    initFlipper();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    startActivity(frontdoor);
    return;
  }
  IntentFilter filter=new IntentFilter(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mIntentReceiver,filter);
  Passwords.Initialize(this);
  if (flipper == null) {
    initFlipper();
  }
  if (entryEdited) {
    View current=this.flipper.getCurrentView();
    populateFields(RowId,current);
  }
}",0.8797327394209354
187764,"public EditItemDialog(Context context,Uri itemUri,Uri relationUri){
  super(context);
  mContext=context;
  LayoutInflater inflater=LayoutInflater.from(context);
  final View view=inflater.inflate(R.layout.dialog_edit_item,null);
  setView(view);
  mEditText=(EditText)view.findViewById(R.id.edittext);
  mTags=(MultiAutoCompleteTextView)view.findViewById(R.id.edittags);
  mPrice=(EditText)view.findViewById(R.id.editprice);
  mQuantity=(EditText)view.findViewById(R.id.editquantity);
  mPriority=(EditText)view.findViewById(R.id.editpriority);
  mNote=(ImageView)view.findViewById(R.id.note);
  mNote.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Uri uri=ContentUris.withAppendedId(Shopping.Notes.CONTENT_URI,mItemId);
      if (mNoteText == null) {
        ContentValues values=new ContentValues();
        values.put(""String_Node_Str"",""String_Node_Str"");
        mContext.getContentResolver().update(mItemUri,values,null,null);
        mContext.getContentResolver().notifyChange(mItemUri,null);
      }
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(uri);
      try {
        mContext.startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        GetFromMarketDialog g=new GetFromMarketDialog(mContext,R.string.notepad_not_available,R.string.notepad_get,R.string.notepad_app_url,R.string.notepad_app_developer);
        g.show();
      }
    }
  }
);
  mPriceLabel=(TextView)view.findViewById(R.id.labeleditprice);
  final KeyListener kl=PreferenceActivity.getCapitalizationKeyListenerFromPrefs(context);
  mEditText.setKeyListener(kl);
  mTags.setKeyListener(kl);
  mTags.setImeOptions(EditorInfo.IME_ACTION_DONE);
  mTags.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());
  mTags.setThreshold(0);
  mTags.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      toggleTaglistPopup();
    }
  }
);
  setTitle(R.string.ask_edit_item);
  setItemUri(itemUri);
  setRelationUri(relationUri);
  setButton(context.getText(R.string.ok),this);
  setButton2(context.getText(R.string.cancel),this);
  mQuantity.addTextChangedListener(mTextWatcher);
  mPrice.addTextChangedListener(mTextWatcher);
}","public EditItemDialog(Context context,Uri itemUri,Uri relationUri){
  super(context);
  mContext=context;
  LayoutInflater inflater=LayoutInflater.from(context);
  final View view=inflater.inflate(R.layout.dialog_edit_item,null);
  setView(view);
  mEditText=(EditText)view.findViewById(R.id.edittext);
  mTags=(MultiAutoCompleteTextView)view.findViewById(R.id.edittags);
  mPrice=(EditText)view.findViewById(R.id.editprice);
  mQuantity=(EditText)view.findViewById(R.id.editquantity);
  mPriority=(EditText)view.findViewById(R.id.editpriority);
  mNote=(ImageView)view.findViewById(R.id.note);
  mNote.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Uri uri=ContentUris.withAppendedId(Shopping.Notes.CONTENT_URI,mItemId);
      if (mNoteText == null) {
        String[] shortProjection={Shopping.Items.NOTE};
        Cursor c=mContext.getContentResolver().query(mItemUri,shortProjection,null,null,null);
        if (c != null && c.moveToFirst()) {
          mNoteText=c.getString(0);
        }
      }
      if (mNoteText == null) {
        ContentValues values=new ContentValues();
        values.put(""String_Node_Str"",""String_Node_Str"");
        mContext.getContentResolver().update(mItemUri,values,null,null);
        mContext.getContentResolver().notifyChange(mItemUri,null);
      }
      Intent i=new Intent(Intent.ACTION_VIEW);
      i.setData(uri);
      try {
        mContext.startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        GetFromMarketDialog g=new GetFromMarketDialog(mContext,R.string.notepad_not_available,R.string.notepad_get,R.string.notepad_app_url,R.string.notepad_app_developer);
        g.show();
      }
    }
  }
);
  mPriceLabel=(TextView)view.findViewById(R.id.labeleditprice);
  final KeyListener kl=PreferenceActivity.getCapitalizationKeyListenerFromPrefs(context);
  mEditText.setKeyListener(kl);
  mTags.setKeyListener(kl);
  mTags.setImeOptions(EditorInfo.IME_ACTION_DONE);
  mTags.setTokenizer(new MultiAutoCompleteTextView.CommaTokenizer());
  mTags.setThreshold(0);
  mTags.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      toggleTaglistPopup();
    }
  }
);
  setTitle(R.string.ask_edit_item);
  setItemUri(itemUri);
  setRelationUri(relationUri);
  setButton(context.getText(R.string.ok),this);
  setButton2(context.getText(R.string.cancel),this);
  mQuantity.addTextChangedListener(mTextWatcher);
  mPrice.addTextChangedListener(mTextWatcher);
}",0.9407783417935702
187765,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (((requestCode == REQUEST_VIEW_PASSWORD) && (PassView.entryEdited)) || (resultCode == RESULT_OK)) {
    searchThreadStart();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (((requestCode == REQUEST_VIEW_PASSWORD) && (PassView.entryEdited)) || (resultCode == RESULT_OK)) {
    searchCriteria=etSearchCriteria.getText().toString().trim().toLowerCase();
    searchThreadStart();
  }
}",0.8727858293075684
187766,"/** 
 * @return
 */
public List<PassEntry> fetchAllRows(Long CategoryId){
  ArrayList<PassEntry> ret=new ArrayList<PassEntry>();
  try {
    Cursor c;
    if (CategoryId == 0) {
      c=db.query(TABLE_PASSWORDS,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    }
 else {
      c=db.query(TABLE_PASSWORDS,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"" + CategoryId,null,null,null,null);
    }
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; ++i) {
      PassEntry row=new PassEntry();
      row.id=c.getLong(0);
      row.password=c.getString(1);
      row.description=c.getString(2);
      row.username=c.getString(3);
      row.website=c.getString(4);
      row.note=c.getString(5);
      row.category=c.getLong(6);
      row.uniqueName=c.getString(7);
      row.lastEdited=c.getString(8);
      ret.add(row);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
    Log.d(TAG,""String_Node_Str"" + e.getLocalizedMessage());
  }
  return ret;
}","/** 
 * @return
 */
public List<PassEntry> fetchAllRows(Long CategoryId){
  ArrayList<PassEntry> ret=new ArrayList<PassEntry>();
  if (db == null) {
    return ret;
  }
  try {
    Cursor c;
    if (CategoryId == 0) {
      c=db.query(TABLE_PASSWORDS,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},null,null,null,null,null);
    }
 else {
      c=db.query(TABLE_PASSWORDS,new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""},""String_Node_Str"" + CategoryId,null,null,null,null);
    }
    int numRows=c.getCount();
    c.moveToFirst();
    for (int i=0; i < numRows; ++i) {
      PassEntry row=new PassEntry();
      row.id=c.getLong(0);
      row.password=c.getString(1);
      row.description=c.getString(2);
      row.username=c.getString(3);
      row.website=c.getString(4);
      row.note=c.getString(5);
      row.category=c.getLong(6);
      row.uniqueName=c.getString(7);
      row.lastEdited=c.getString(8);
      ret.add(row);
      c.moveToNext();
    }
    c.close();
  }
 catch (  SQLException e) {
    Log.d(TAG,""String_Node_Str"" + e.getLocalizedMessage());
  }
  return ret;
}",0.9848828420256992
187767,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_FOLDER,0,R.string.menu_new_folder).setIcon(android.R.drawable.ic_menu_add).setShortcut('0','f');
  mIncludeMediaScanMenuItem=menu.add(0,MENU_INCLUDE_IN_MEDIA_SCAN,0,R.string.menu_include_in_media_scan).setShortcut('1','s').setIcon(android.R.drawable.ic_menu_gallery);
  mExcludeMediaScanMenuItem=menu.add(0,MENU_EXCLUDE_FROM_MEDIA_SCAN,0,R.string.menu_exclude_from_media_scan).setShortcut('1','s').setIcon(android.R.drawable.ic_menu_gallery);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_FOLDER,0,R.string.menu_new_folder).setIcon(android.R.drawable.ic_menu_add).setShortcut('0','f');
  mIncludeMediaScanMenuItem=menu.add(0,MENU_INCLUDE_IN_MEDIA_SCAN,0,R.string.menu_include_in_media_scan).setShortcut('1','s').setIcon(android.R.drawable.ic_menu_gallery);
  mExcludeMediaScanMenuItem=menu.add(0,MENU_EXCLUDE_FROM_MEDIA_SCAN,0,R.string.menu_exclude_from_media_scan).setShortcut('1','s').setIcon(android.R.drawable.ic_menu_gallery);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.menu_update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}",0.9967083607636604
187768,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_COLOR,0,R.string.color).setIcon(android.R.drawable.ic_menu_manage).setShortcut('3','c');
  menu.add(0,MENU_SETTINGS,0,R.string.preferences).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('4','p');
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_COLOR,0,R.string.color).setIcon(android.R.drawable.ic_menu_manage).setShortcut('3','c');
  menu.add(0,MENU_SETTINGS,0,R.string.preferences).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('4','p');
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.menu_update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}",0.9952153110047848
187769,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  if (mExtraItems != null) {
    menu.add(0,MENU_INSERT_FROM_EXTRAS,0,R.string.menu_auto_add).setIcon(android.R.drawable.ic_menu_upload);
  }
  menu.add(0,MENU_NEW_LIST,0,R.string.new_list).setIcon(R.drawable.ic_menu_add_list).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,0,R.string.clean_up_list).setIcon(R.drawable.ic_menu_clean_up).setShortcut('1','c');
  ;
  menu.add(0,MENU_PICK_ITEMS,0,R.string.menu_pick_items).setIcon(android.R.drawable.ic_menu_add).setShortcut('2','p');
  ;
  menu.add(0,MENU_THEME,0,R.string.theme).setIcon(android.R.drawable.ic_menu_manage).setShortcut('3','t');
  menu.add(0,MENU_PREFERENCES,0,R.string.preferences).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('4','p');
  menu.add(0,MENU_RENAME_LIST,0,R.string.rename_list).setIcon(android.R.drawable.ic_menu_edit).setShortcut('5','r');
  menu.add(0,MENU_DELETE_LIST,0,R.string.delete_list).setIcon(android.R.drawable.ic_menu_delete).setShortcut('6','d');
  menu.add(0,MENU_SEND,0,R.string.send).setIcon(android.R.drawable.ic_menu_send).setShortcut('7','s');
  if (addLocationAlertPossible()) {
    menu.add(0,MENU_ADD_LOCATION_ALERT,0,R.string.shopping_add_alert).setIcon(android.R.drawable.ic_menu_mylocation).setShortcut('8','l');
  }
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  if (mExtraItems != null) {
    menu.add(0,MENU_INSERT_FROM_EXTRAS,0,R.string.menu_auto_add).setIcon(android.R.drawable.ic_menu_upload);
  }
  menu.add(0,MENU_NEW_LIST,0,R.string.new_list).setIcon(R.drawable.ic_menu_add_list).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,0,R.string.clean_up_list).setIcon(R.drawable.ic_menu_clean_up).setShortcut('1','c');
  ;
  menu.add(0,MENU_PICK_ITEMS,0,R.string.menu_pick_items).setIcon(android.R.drawable.ic_menu_add).setShortcut('2','p');
  ;
  menu.add(0,MENU_THEME,0,R.string.theme).setIcon(android.R.drawable.ic_menu_manage).setShortcut('3','t');
  menu.add(0,MENU_PREFERENCES,0,R.string.preferences).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('4','p');
  menu.add(0,MENU_RENAME_LIST,0,R.string.rename_list).setIcon(android.R.drawable.ic_menu_edit).setShortcut('5','r');
  menu.add(0,MENU_DELETE_LIST,0,R.string.delete_list).setIcon(android.R.drawable.ic_menu_delete).setShortcut('6','d');
  menu.add(0,MENU_SEND,0,R.string.send).setIcon(android.R.drawable.ic_menu_send).setShortcut('7','s');
  if (addLocationAlertPossible()) {
    menu.add(0,MENU_ADD_LOCATION_ALERT,0,R.string.shopping_add_alert).setIcon(android.R.drawable.ic_menu_mylocation).setShortcut('8','l');
  }
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.menu_update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  return true;
}",0.998372925479987
187770,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('1','i').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_SEARCH,0,R.string.menu_search).setShortcut('2','s').setIcon(android.R.drawable.ic_menu_search);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('3','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  if (debug)   Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('1','i').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_SEARCH,0,R.string.menu_search).setShortcut('2','s').setIcon(android.R.drawable.ic_menu_search);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('3','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.menu_update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  if (debug)   Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}",0.9977866312527668
187771,"private void openFile(File aFile){
  if (!aFile.exists()) {
    Toast.makeText(this,R.string.error_file_does_not_exists,Toast.LENGTH_SHORT).show();
    return;
  }
  Intent intent=new Intent(android.content.Intent.ACTION_VIEW);
  Uri data=FileUtils.getUri(aFile);
  String type=mMimeTypes.getMimeType(aFile.getName());
  intent.setDataAndType(data,type);
  Intent originalIntent=getIntent();
  if (originalIntent != null && originalIntent.getAction() != null && originalIntent.getAction().equals(Intent.ACTION_GET_CONTENT)) {
    setResult(RESULT_OK,intent);
    finish();
    return;
  }
  try {
    startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.application_not_available,Toast.LENGTH_SHORT).show();
  }
  ;
}","private void openFile(File aFile){
  if (!aFile.exists()) {
    Toast.makeText(this,R.string.error_file_does_not_exists,Toast.LENGTH_SHORT).show();
    return;
  }
  Intent intent=new Intent(android.content.Intent.ACTION_VIEW);
  Uri data=FileUtils.getUri(aFile);
  String type=mMimeTypes.getMimeType(aFile.getName());
  intent.setDataAndType(data,type);
  Intent originalIntent=getIntent();
  if (originalIntent != null && originalIntent.getAction() != null && originalIntent.getAction().equals(Intent.ACTION_GET_CONTENT)) {
    intent.setData(Uri.parse(FileManagerProvider.MIME_TYPE_PREFIX + aFile));
    setResult(RESULT_OK,intent);
    finish();
    return;
  }
  try {
    startActivity(intent);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.application_not_available,Toast.LENGTH_SHORT).show();
  }
  ;
}",0.9520846297448662
187772,"/** 
 * Adds a new item to a specific list and returns its id. If the item exists already, the existing id is returned.
 * @param itemId The id of the new item.
 * @param listId The id of the shopping list the item is added.
 * @param quantity
 * @param itemType The type of the new item
 * @return id of the ""contains"" table entry, or -1 if insert failed.
 */
public static long addItemToList(Context context,final long itemId,final long listId,String quantity){
  long id=-1;
  long status=Status.WANT_TO_BUY;
  Cursor existingItems=context.getContentResolver().query(Shopping.Contains.CONTENT_URI,new String[]{Shopping.Contains._ID,Shopping.Contains.STATUS},""String_Node_Str"",new String[]{String.valueOf(listId),String.valueOf(itemId)},null);
  if (existingItems.getCount() > 0) {
    existingItems.moveToFirst();
    id=existingItems.getLong(0);
    long oldstatus=existingItems.getLong(1);
    if (oldstatus == Status.WANT_TO_BUY) {
      status=Status.BOUGHT;
    }
    ContentValues values=new ContentValues(2);
    values.put(Shopping.Contains.STATUS,status);
    values.put(Shopping.Contains.QUANTITY,quantity);
    try {
      Uri uri=Uri.withAppendedPath(Shopping.Contains.CONTENT_URI,String.valueOf(id));
      context.getContentResolver().update(uri,values,null,null);
      Log.i(TAG,""String_Node_Str"" + uri);
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
 else {
    ContentValues values=new ContentValues(2);
    values.put(Shopping.Contains.ITEM_ID,itemId);
    values.put(Shopping.Contains.LIST_ID,listId);
    values.put(Shopping.Contains.STATUS,status);
    values.put(Shopping.Contains.QUANTITY,quantity);
    try {
      Uri uri=context.getContentResolver().insert(Shopping.Contains.CONTENT_URI,values);
      Log.i(TAG,""String_Node_Str"" + uri);
      id=Long.parseLong(uri.getPathSegments().get(1));
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
  existingItems.close();
  return id;
}","/** 
 * Adds a new item to a specific list and returns its id. If the item exists already, the existing id is returned.
 * @param itemId The id of the new item.
 * @param listId The id of the shopping list the item is added.
 * @param quantity
 * @param itemType The type of the new item
 * @return id of the ""contains"" table entry, or -1 if insert failed.
 */
public static long addItemToList(Context context,final long itemId,final long listId,String quantity){
  long id=-1;
  long status=Status.WANT_TO_BUY;
  Cursor existingItems=context.getContentResolver().query(Shopping.Contains.CONTENT_URI,new String[]{Shopping.Contains._ID,Shopping.Contains.STATUS},""String_Node_Str"",new String[]{String.valueOf(listId),String.valueOf(itemId)},null);
  if (existingItems.getCount() > 0) {
    existingItems.moveToFirst();
    id=existingItems.getLong(0);
    long oldstatus=existingItems.getLong(1);
    if (oldstatus == Status.WANT_TO_BUY) {
      status=Status.BOUGHT;
    }
    ContentValues values=new ContentValues(2);
    values.put(Shopping.Contains.STATUS,status);
    if (quantity != null) {
      values.put(Shopping.Contains.QUANTITY,quantity);
    }
    try {
      Uri uri=Uri.withAppendedPath(Shopping.Contains.CONTENT_URI,String.valueOf(id));
      context.getContentResolver().update(uri,values,null,null);
      Log.i(TAG,""String_Node_Str"" + uri);
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
 else {
    ContentValues values=new ContentValues(2);
    values.put(Shopping.Contains.ITEM_ID,itemId);
    values.put(Shopping.Contains.LIST_ID,listId);
    values.put(Shopping.Contains.STATUS,status);
    values.put(Shopping.Contains.QUANTITY,quantity);
    try {
      Uri uri=context.getContentResolver().insert(Shopping.Contains.CONTENT_URI,values);
      Log.i(TAG,""String_Node_Str"" + uri);
      id=Long.parseLong(uri.getPathSegments().get(1));
    }
 catch (    Exception e) {
      Log.i(TAG,""String_Node_Str"",e);
    }
  }
  existingItems.close();
  return id;
}",0.9909819639278558
187773,"private void getNoteFromContentProvider(){
  if (mCursor != null && mCursor.requery() && mCursor.moveToFirst()) {
    if (mState == STATE_EDIT) {
      setTitle(getText(R.string.title_edit));
    }
 else     if (mState == STATE_INSERT) {
      setTitle(getText(R.string.title_create));
    }
    long id=mCursor.getLong(COLUMN_INDEX_ID);
    String note=mCursor.getString(COLUMN_INDEX_NOTE);
    mEncrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    mTheme=mCursor.getString(COLUMN_INDEX_THEME);
    if (mEncrypted == 0) {
      if (!note.equals(mText.getText().toString())) {
        mText.setTextKeepState(note);
        mText.setSelection(mSelectionStart,mSelectionStop);
      }
    }
 else {
      if (mDecryptedText != null) {
        mText.setTextKeepState(mDecryptedText);
        mText.setSelection(mSelectionStart,mSelectionStop);
        setFeatureDrawableResource(Window.FEATURE_RIGHT_ICON,android.R.drawable.ic_lock_idle_lock);
      }
 else {
        Intent i=new Intent();
        i.setAction(CryptoIntents.ACTION_DECRYPT);
        i.putExtra(CryptoIntents.EXTRA_TEXT,note);
        i.putExtra(PrivateNotePadIntents.EXTRA_ID,id);
        try {
          startActivityForResult(i,REQUEST_CODE_DECRYPT);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    if (mOriginalContent == null) {
      mOriginalContent=note;
    }
  }
 else {
    setTitle(getText(R.string.error_title));
    mText.setText(getText(R.string.error_message));
  }
}","private void getNoteFromContentProvider(){
  if (mCursor != null && mCursor.requery() && mCursor.moveToFirst()) {
    if (mState == STATE_EDIT) {
      setTitle(getText(R.string.title_edit));
    }
 else     if (mState == STATE_INSERT) {
      setTitle(getText(R.string.title_create));
    }
    long id=mCursor.getLong(COLUMN_INDEX_ID);
    String note=mCursor.getString(COLUMN_INDEX_NOTE);
    mEncrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    mTheme=mCursor.getString(COLUMN_INDEX_THEME);
    if (mEncrypted == 0) {
      if (!note.equals(mText.getText().toString())) {
        mText.setTextKeepState(note);
        mText.setSelection(mSelectionStart,mSelectionStop);
      }
    }
 else {
      if (mDecryptedText != null) {
        if (debug)         Log.d(TAG,""String_Node_Str"" + mDecryptedText);
        mText.setTextKeepState(mDecryptedText);
        mText.setSelection(mSelectionStart,mSelectionStop);
        setFeatureDrawableResource(Window.FEATURE_RIGHT_ICON,android.R.drawable.ic_lock_idle_lock);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"" + note);
        Intent i=new Intent();
        i.setAction(CryptoIntents.ACTION_DECRYPT);
        i.putExtra(CryptoIntents.EXTRA_TEXT,note);
        i.putExtra(PrivateNotePadIntents.EXTRA_ID,id);
        try {
          startActivityForResult(i,REQUEST_CODE_DECRYPT);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    if (mOriginalContent == null) {
      mOriginalContent=note;
    }
  }
 else {
    setTitle(getText(R.string.error_title));
    mText.setText(getText(R.string.error_message));
  }
}",0.7164979154258487
187774,"/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(boolean encryptTags){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  if (!encryptTags) {
    tags=null;
  }
  Intent i=new Intent(this,EncryptActivity.class);
  i.putExtra(PrivateNotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
  i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,tags));
  i.putExtra(PrivateNotePadIntents.EXTRA_URI,mUri.toString());
  startActivity(i);
  mDecryptedText=null;
  mText.setText(R.string.encrypted);
}","/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(boolean encryptTags){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  if (!encryptTags) {
    tags=null;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"" + text);
  if (EncryptActivity.getPendingEncryptActivities() == 0) {
    Intent i=new Intent(this,EncryptActivity.class);
    i.putExtra(PrivateNotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
    i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,tags));
    i.putExtra(PrivateNotePadIntents.EXTRA_URI,mUri.toString());
    startActivity(i);
    if (debug)     Log.d(TAG,""String_Node_Str"" + text);
    sDecryptedText=text;
    mDecryptedText=null;
    EncryptActivity.confirmEncryptActivityCalled();
    mText.setText(R.string.encrypted);
  }
 else {
  }
}",0.7973941368078176
187775,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      mDecryptedText=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  mApplyText=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  mApplyTextBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  mApplyTextAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
if (debug) Log.d(TAG,""String_Node_Str"" + mOriginalContent + ""String_Node_Str""+ mFileContent);
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      if (debug)       Log.d(TAG,""String_Node_Str"" + decryptedText);
      mDecryptedText=decryptedText;
      mOriginalContent=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  mApplyText=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  mApplyTextBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  mApplyTextAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
if (debug) Log.d(TAG,""String_Node_Str"" + mOriginalContent + ""String_Node_Str""+ mFileContent);
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}",0.9621506897771488
187776,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mDecryptedText=null;
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
    if (mApplyText == null && mApplyTextBefore == null && mApplyTextAfter == null) {
      mApplyText=savedInstanceState.getString(BUNDLE_APPLY_TEXT);
      mApplyTextBefore=savedInstanceState.getString(BUNDLE_APPLY_TEXT_BEFORE);
      mApplyTextAfter=savedInstanceState.getString(BUNDLE_APPLY_TEXT_AFTER);
    }
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      ContentValues values=new ContentValues(1);
      String theme=getMostRecentlyUsedTheme();
      values.put(Notes.THEME,theme);
      String tags=intent.getStringExtra(NotepadInternalIntents.EXTRA_TAGS);
      values.put(Notes.TAGS,tags);
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),values);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mDecryptedText=sDecryptedText;
  if (sDecryptedText != null) {
    EncryptActivity.cancelEncrypt();
    if (EncryptActivity.getPendingEncryptActivities() == 0) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      sDecryptedText=null;
    }
  }
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
    if (mApplyText == null && mApplyTextBefore == null && mApplyTextAfter == null) {
      mApplyText=savedInstanceState.getString(BUNDLE_APPLY_TEXT);
      mApplyTextBefore=savedInstanceState.getString(BUNDLE_APPLY_TEXT_BEFORE);
      mApplyTextAfter=savedInstanceState.getString(BUNDLE_APPLY_TEXT_AFTER);
    }
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      ContentValues values=new ContentValues(1);
      String theme=getMostRecentlyUsedTheme();
      values.put(Notes.THEME,theme);
      String tags=intent.getStringExtra(NotepadInternalIntents.EXTRA_TAGS);
      values.put(Notes.TAGS,tags);
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),values);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}",0.9517324253955538
187777,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  int autoLink=PreferenceActivity.getAutoLinkFromPreference(this);
  mText.setAutoLinkMask(autoLink);
  mEncrypted=0;
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
  if (mEncrypted == 0 || mDecryptedText != null) {
    applyInsertText();
  }
  mText.setMovementMethod(new ArrowKeyMovementMethod(){
    public boolean onTouchEvent(    TextView widget,    Spannable buffer,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_UP) {
        int x=(int)event.getX();
        int y=(int)event.getY();
        x-=widget.getTotalPaddingLeft();
        y-=widget.getTotalPaddingTop();
        x+=widget.getScrollX();
        y+=widget.getScrollY();
        Layout layout=widget.getLayout();
        int line=layout.getLineForVertical(y);
        int off=layout.getOffsetForHorizontal(line,x);
        ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
        if (link.length != 0) {
          link[0].onClick(widget);
          return true;
        }
      }
      return super.onTouchEvent(widget,buffer,event);
    }
  }
);
  setTheme(loadTheme());
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (debug)   Log.d(TAG,""String_Node_Str"" + mDecryptedText);
  int autoLink=PreferenceActivity.getAutoLinkFromPreference(this);
  mText.setAutoLinkMask(autoLink);
  mEncrypted=0;
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
  if (mEncrypted == 0 || mDecryptedText != null) {
    applyInsertText();
  }
  mText.setMovementMethod(new ArrowKeyMovementMethod(){
    public boolean onTouchEvent(    TextView widget,    Spannable buffer,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_UP) {
        int x=(int)event.getX();
        int y=(int)event.getY();
        x-=widget.getTotalPaddingLeft();
        y-=widget.getTotalPaddingTop();
        x+=widget.getScrollX();
        y+=widget.getScrollY();
        Layout layout=widget.getLayout();
        int line=layout.getLineForVertical(y);
        int off=layout.getOffsetForHorizontal(line,x);
        ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
        if (link.length != 0) {
          link[0].onClick(widget);
          return true;
        }
      }
      return super.onTouchEvent(widget,buffer,event);
    }
  }
);
  setTheme(loadTheme());
}",0.9773391812865496
187778,"@Override protected void onSaveInstanceState(Bundle outState){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (debug)   Log.d(TAG,""String_Node_Str"" + mFileContent);
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
  outState.putString(BUNDLE_APPLY_TEXT,mApplyText);
  outState.putString(BUNDLE_APPLY_TEXT_BEFORE,mApplyTextBefore);
  outState.putString(BUNDLE_APPLY_TEXT_AFTER,mApplyTextAfter);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  if (debug)   Log.d(TAG,""String_Node_Str"" + mSelectionStart + ""String_Node_Str""+ mSelectionStop+ ""String_Node_Str""+ mFileContent);
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
  outState.putString(BUNDLE_APPLY_TEXT,mApplyText);
  outState.putString(BUNDLE_APPLY_TEXT_BEFORE,mApplyTextBefore);
  outState.putString(BUNDLE_APPLY_TEXT_AFTER,mApplyTextAfter);
}",0.8026159334126041
187779,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  Intent i=getIntent();
  i.setComponent(null);
  String action=i.getStringExtra(PrivateNotePadIntents.EXTRA_ACTION);
  setResult(RESULT_CANCELED);
  if (!action.equals(CryptoIntents.ACTION_ENCRYPT) && !action.equals(CryptoIntents.ACTION_DECRYPT)) {
    Log.e(TAG,""String_Node_Str"" + action);
    finish();
    return;
  }
  i.setAction(action);
  if (IntentUtils.isIntentAvailable(this,i)) {
    try {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      startActivityForResult(i,REQUEST_CODE_ENCRYPT_OR_UNENCRYPT);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    showDialog(DIALOG_ID_GET_FROM_MARKET);
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  sPendingEncryptActivities--;
  if (sCancelEncrypt) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    sCancelEncrypt=false;
    setResult(RESULT_CANCELED);
    finish();
    return;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
  NoteEditor.deleteStaticDecryptedText();
  Intent i=getIntent();
  i.setComponent(null);
  String action=i.getStringExtra(PrivateNotePadIntents.EXTRA_ACTION);
  setResult(RESULT_CANCELED);
  if (!action.equals(CryptoIntents.ACTION_ENCRYPT) && !action.equals(CryptoIntents.ACTION_DECRYPT)) {
    Log.e(TAG,""String_Node_Str"" + action);
    finish();
    return;
  }
  i.setAction(action);
  if (IntentUtils.isIntentAvailable(this,i)) {
    try {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      startActivityForResult(i,REQUEST_CODE_ENCRYPT_OR_UNENCRYPT);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    showDialog(DIALOG_ID_GET_FROM_MARKET);
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.8713692946058091
187780,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ENCRYPT_OR_UNENCRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String[] textArray=data.getStringArrayExtra(CryptoIntents.EXTRA_TEXT_ARRAY);
      String text=textArray[0];
      String title=textArray[1];
      String tags=textArray[2];
      String action=data.getAction();
      String uristring=data.getStringExtra(PrivateNotePadIntents.EXTRA_URI);
      Uri uri=null;
      if (uristring != null) {
        uri=Uri.parse(uristring);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      if (debug)       Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ text+ ""String_Node_Str""+ tags);
      ContentValues values=new ContentValues();
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      if (title != null) {
        values.put(Notes.TITLE,title);
      }
      if (text != null) {
        values.put(Notes.NOTE,text);
      }
      if (tags != null) {
        values.put(Notes.TAGS,tags);
      }
      if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
        values.put(Notes.ENCRYPTED,1);
      }
 else       if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
        values.put(Notes.ENCRYPTED,0);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      getContentResolver().update(uri,values,null,null);
      setResult(RESULT_OK);
      finish();
    }
 else {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ENCRYPT_OR_UNENCRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String[] textArray=data.getStringArrayExtra(CryptoIntents.EXTRA_TEXT_ARRAY);
      String text=textArray[0];
      String title=textArray[1];
      String tags=textArray[2];
      String action=data.getAction();
      String uristring=data.getStringExtra(PrivateNotePadIntents.EXTRA_URI);
      Uri uri=null;
      if (uristring != null) {
        uri=Uri.parse(uristring);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      if (debug)       Log.d(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ text+ ""String_Node_Str""+ tags);
      ContentValues values=new ContentValues();
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      if (title != null) {
        values.put(Notes.TITLE,title);
      }
      if (text != null) {
        values.put(Notes.NOTE,text);
      }
      if (tags != null) {
        values.put(Notes.TAGS,tags);
      }
      if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
        values.put(Notes.ENCRYPTED,1);
      }
 else       if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
        values.put(Notes.ENCRYPTED,0);
      }
 else {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      getContentResolver().update(uri,values,null,null);
      getContentResolver().notifyChange(uri,null);
      setResult(RESULT_OK);
      finish();
    }
 else {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
}
}",0.9866036249014972
187781,"/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(boolean encryptTags){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  if (!encryptTags) {
    tags=null;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"" + text);
  if (EncryptActivity.getPendingEncryptActivities() == 0) {
    Intent i=new Intent(this,EncryptActivity.class);
    i.putExtra(PrivateNotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
    i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,tags));
    i.putExtra(PrivateNotePadIntents.EXTRA_URI,mUri.toString());
    if (text.equals(mOriginalContent)) {
      i.putExtra(PrivateNotePadIntents.EXTRA_CONTENT_UNCHANGED,true);
    }
    startActivity(i);
    if (debug)     Log.d(TAG,""String_Node_Str"" + text);
    sDecryptedText=text;
    mDecryptedText=null;
    EncryptActivity.confirmEncryptActivityCalled();
    mText.setText(R.string.encrypted);
  }
 else {
  }
}","/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(boolean encryptTags){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  boolean isNoteEncrypted=!isNoteUnencrypted();
  if (!encryptTags) {
    tags=null;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"" + text);
  if (EncryptActivity.getPendingEncryptActivities() == 0) {
    Intent i=new Intent(this,EncryptActivity.class);
    i.putExtra(PrivateNotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
    i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,tags));
    i.putExtra(PrivateNotePadIntents.EXTRA_URI,mUri.toString());
    if (text.equals(mOriginalContent) && isNoteEncrypted) {
      i.putExtra(PrivateNotePadIntents.EXTRA_CONTENT_UNCHANGED,true);
    }
    startActivity(i);
    if (debug)     Log.d(TAG,""String_Node_Str"" + text);
    sDecryptedText=text;
    if (isNoteEncrypted) {
      mDecryptedText=null;
      mText.setText(R.string.encrypted);
    }
 else {
    }
    EncryptActivity.confirmEncryptActivityCalled();
  }
 else {
    if (debug)     Log.d(TAG,""String_Node_Str"");
  }
}",0.8891904115784712
187782,"@Override public boolean onPrepareOptionsMenu(Menu menu){
  boolean contentChanged=!mOriginalContent.equals(mText.getText().toString());
  long encrypted=0;
  if (mCursor != null && mCursor.moveToFirst()) {
    encrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
  }
  boolean isNoteUnencrypted=(encrypted == 0);
  menu.setGroupVisible(Menu.CATEGORY_ALTERNATIVE,isNoteUnencrypted);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    menu.setGroupVisible(0,false);
    menu.setGroupVisible(1,false);
    menu.setGroupVisible(2,true);
    menu.findItem(MENU_SAVE).setEnabled(contentChanged);
  }
 else {
    menu.setGroupVisible(0,contentChanged || mUndoRevert != null);
    menu.setGroupVisible(1,true);
    menu.setGroupVisible(2,false);
    menu.findItem(MENU_ENCRYPT).setVisible(isNoteUnencrypted);
    menu.findItem(MENU_UNENCRYPT).setVisible(!isNoteUnencrypted);
  }
  return super.onPrepareOptionsMenu(menu);
}","@Override public boolean onPrepareOptionsMenu(Menu menu){
  boolean contentChanged=!mOriginalContent.equals(mText.getText().toString());
  boolean isNoteUnencrypted=isNoteUnencrypted();
  menu.setGroupVisible(Menu.CATEGORY_ALTERNATIVE,isNoteUnencrypted);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    menu.setGroupVisible(0,false);
    menu.setGroupVisible(1,false);
    menu.setGroupVisible(2,true);
    menu.findItem(MENU_SAVE).setEnabled(contentChanged);
  }
 else {
    menu.setGroupVisible(0,contentChanged || mUndoRevert != null);
    menu.setGroupVisible(1,true);
    menu.setGroupVisible(2,false);
    menu.findItem(MENU_ENCRYPT).setVisible(isNoteUnencrypted);
    menu.findItem(MENU_UNENCRYPT).setVisible(!isNoteUnencrypted);
  }
  return super.onPrepareOptionsMenu(menu);
}",0.8965922444183314
187783,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mDecryptedText=sDecryptedText;
  if (sDecryptedText != null) {
    EncryptActivity.cancelEncrypt();
    if (EncryptActivity.getPendingEncryptActivities() == 0) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      sDecryptedText=null;
    }
  }
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mUndoRevert=savedInstanceState.getString(BUNDLE_UNDO_REVERT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
    if (mApplyText == null && mApplyTextBefore == null && mApplyTextAfter == null) {
      mApplyText=savedInstanceState.getString(BUNDLE_APPLY_TEXT);
      mApplyTextBefore=savedInstanceState.getString(BUNDLE_APPLY_TEXT_BEFORE);
      mApplyTextAfter=savedInstanceState.getString(BUNDLE_APPLY_TEXT_AFTER);
    }
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      ContentValues values=new ContentValues(1);
      String theme=getMostRecentlyUsedTheme();
      values.put(Notes.THEME,theme);
      String tags=intent.getStringExtra(NotepadInternalIntents.EXTRA_TAGS);
      values.put(Notes.TAGS,tags);
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),values);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (savedInstanceState == null) {
    sDecryptedText=null;
  }
  mDecryptedText=sDecryptedText;
  if (sDecryptedText != null) {
    EncryptActivity.cancelEncrypt();
    if (EncryptActivity.getPendingEncryptActivities() == 0) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      sDecryptedText=null;
    }
  }
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mUndoRevert=savedInstanceState.getString(BUNDLE_UNDO_REVERT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
    if (mApplyText == null && mApplyTextBefore == null && mApplyTextAfter == null) {
      mApplyText=savedInstanceState.getString(BUNDLE_APPLY_TEXT);
      mApplyTextBefore=savedInstanceState.getString(BUNDLE_APPLY_TEXT_BEFORE);
      mApplyTextAfter=savedInstanceState.getString(BUNDLE_APPLY_TEXT_AFTER);
    }
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      ContentValues values=new ContentValues(1);
      String theme=getMostRecentlyUsedTheme();
      values.put(Notes.THEME,theme);
      String tags=intent.getStringExtra(NotepadInternalIntents.EXTRA_TAGS);
      values.put(Notes.TAGS,tags);
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),values);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}",0.988009592326139
187784,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  sPendingEncryptActivities--;
  if (sCancelEncrypt) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    sCancelEncrypt=false;
    setResult(RESULT_CANCELED);
    finish();
    return;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
  NoteEditor.deleteStaticDecryptedText();
  Intent i=getIntent();
  i.setComponent(null);
  String action=i.getStringExtra(PrivateNotePadIntents.EXTRA_ACTION);
  setResult(RESULT_CANCELED);
  boolean contentUnchanged=i.getBooleanExtra(PrivateNotePadIntents.EXTRA_CONTENT_UNCHANGED,false);
  if (contentUnchanged) {
    finish();
    return;
  }
  if (!action.equals(CryptoIntents.ACTION_ENCRYPT) && !action.equals(CryptoIntents.ACTION_DECRYPT)) {
    Log.e(TAG,""String_Node_Str"" + action);
    finish();
    return;
  }
  i.setAction(action);
  if (IntentUtils.isIntentAvailable(this,i)) {
    try {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      startActivityForResult(i,REQUEST_CODE_ENCRYPT_OR_UNENCRYPT);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    showDialog(DIALOG_ID_GET_FROM_MARKET);
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (sPendingEncryptActivities > 0) {
    sPendingEncryptActivities--;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"" + sPendingEncryptActivities);
  if (sCancelEncrypt) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    sCancelEncrypt=false;
    setResult(RESULT_CANCELED);
    finish();
    return;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
  NoteEditor.deleteStaticDecryptedText();
  Intent i=getIntent();
  i.setComponent(null);
  String action=i.getStringExtra(PrivateNotePadIntents.EXTRA_ACTION);
  setResult(RESULT_CANCELED);
  boolean contentUnchanged=i.getBooleanExtra(PrivateNotePadIntents.EXTRA_CONTENT_UNCHANGED,false);
  if (contentUnchanged) {
    finish();
    return;
  }
  if (!action.equals(CryptoIntents.ACTION_ENCRYPT) && !action.equals(CryptoIntents.ACTION_DECRYPT)) {
    Log.e(TAG,""String_Node_Str"" + action);
    finish();
    return;
  }
  i.setAction(action);
  if (IntentUtils.isIntentAvailable(this,i)) {
    try {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      startActivityForResult(i,REQUEST_CODE_ENCRYPT_OR_UNENCRYPT);
    }
 catch (    ActivityNotFoundException e) {
      Toast.makeText(this,R.string.encryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
    }
  }
 else {
    showDialog(DIALOG_ID_GET_FROM_MARKET);
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.958970792767733
187785,"public static int getPendingEncryptActivities(){
  return sPendingEncryptActivities;
}","public static int getPendingEncryptActivities(){
  if (debug)   Log.d(TAG,""String_Node_Str"" + sPendingEncryptActivities);
  return sPendingEncryptActivities;
}",0.7020408163265306
187786,"public static void confirmEncryptActivityCalled(){
  sPendingEncryptActivities++;
}","public static void confirmEncryptActivityCalled(){
  sPendingEncryptActivities++;
  if (debug)   Log.d(TAG,""String_Node_Str"" + sPendingEncryptActivities);
}",0.694560669456067
187787,"private void getNoteFromContentProvider(){
  if (mCursor != null && mCursor.requery() && mCursor.moveToFirst()) {
    if (mState == STATE_EDIT) {
      setTitle(getText(R.string.title_edit));
    }
 else     if (mState == STATE_INSERT) {
      setTitle(getText(R.string.title_create));
    }
    long id=mCursor.getLong(COLUMN_INDEX_ID);
    String note=mCursor.getString(COLUMN_INDEX_NOTE);
    long encrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    mTheme=mCursor.getString(COLUMN_INDEX_THEME);
    if (encrypted == 0) {
      if (!note.equals(mText.getText().toString())) {
        mText.setTextKeepState(note);
        mText.setSelection(mSelectionStart,mSelectionStop);
      }
    }
 else {
      if (mDecryptedText != null) {
        mText.setTextKeepState(mDecryptedText);
        mText.setSelection(mSelectionStart,mSelectionStop);
        setFeatureDrawableResource(Window.FEATURE_RIGHT_ICON,android.R.drawable.ic_lock_idle_lock);
      }
 else {
        Intent i=new Intent();
        i.setAction(CryptoIntents.ACTION_DECRYPT);
        i.putExtra(CryptoIntents.EXTRA_TEXT,note);
        i.putExtra(PrivateNotePadIntents.EXTRA_ID,id);
        try {
          startActivityForResult(i,REQUEST_CODE_DECRYPT);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    if (mOriginalContent == null) {
      mOriginalContent=note;
    }
  }
 else {
    setTitle(getText(R.string.error_title));
    mText.setText(getText(R.string.error_message));
  }
}","private void getNoteFromContentProvider(){
  if (mCursor != null && mCursor.requery() && mCursor.moveToFirst()) {
    if (mState == STATE_EDIT) {
      setTitle(getText(R.string.title_edit));
    }
 else     if (mState == STATE_INSERT) {
      setTitle(getText(R.string.title_create));
    }
    long id=mCursor.getLong(COLUMN_INDEX_ID);
    String note=mCursor.getString(COLUMN_INDEX_NOTE);
    mEncrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    mTheme=mCursor.getString(COLUMN_INDEX_THEME);
    if (mEncrypted == 0) {
      if (!note.equals(mText.getText().toString())) {
        mText.setTextKeepState(note);
        mText.setSelection(mSelectionStart,mSelectionStop);
      }
    }
 else {
      if (mDecryptedText != null) {
        mText.setTextKeepState(mDecryptedText);
        mText.setSelection(mSelectionStart,mSelectionStop);
        setFeatureDrawableResource(Window.FEATURE_RIGHT_ICON,android.R.drawable.ic_lock_idle_lock);
      }
 else {
        Intent i=new Intent();
        i.setAction(CryptoIntents.ACTION_DECRYPT);
        i.putExtra(CryptoIntents.EXTRA_TEXT,note);
        i.putExtra(PrivateNotePadIntents.EXTRA_ID,id);
        try {
          startActivityForResult(i,REQUEST_CODE_DECRYPT);
        }
 catch (        ActivityNotFoundException e) {
          Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
          Log.e(TAG,""String_Node_Str"");
        }
      }
    }
    if (mOriginalContent == null) {
      mOriginalContent=note;
    }
  }
 else {
    setTitle(getText(R.string.error_title));
    mText.setText(getText(R.string.error_message));
  }
}",0.9965870307167236
187788,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      mDecryptedText=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  String text=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  String textBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  String textAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
  insertAtPoint(textBefore,text,textAfter);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
if (debug) Log.d(TAG,""String_Node_Str"" + mOriginalContent + ""String_Node_Str""+ mFileContent);
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.e(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      mDecryptedText=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  mApplyText=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  mApplyTextBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  mApplyTextAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
if (debug) Log.d(TAG,""String_Node_Str"" + mOriginalContent + ""String_Node_Str""+ mFileContent);
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}",0.9678352005782436
187789,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mDecryptedText=null;
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),null);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mDecryptedText=null;
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
    if (mApplyText == null && mApplyTextBefore == null && mApplyTextAfter == null) {
      mApplyText=savedInstanceState.getString(BUNDLE_APPLY_TEXT);
      mApplyTextBefore=savedInstanceState.getString(BUNDLE_APPLY_TEXT_BEFORE);
      mApplyTextAfter=savedInstanceState.getString(BUNDLE_APPLY_TEXT_AFTER);
    }
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),null);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}",0.920899671468284
187790,"/** 
 * Insert textToInsert at current position. Optionally, if textBefore or textAfter are non-null, replace the text before or after the current selection.
 * @author isaac
 * @author Peli
 */
private void insertAtPoint(String textBefore,String textToInsert,String textAfter){
  String originalText=mText.getText().toString();
  int startPos=mText.getSelectionStart();
  int endPos=mText.getSelectionEnd();
  int newStartPos=startPos;
  int newEndPos=endPos;
  ContentValues values=new ContentValues();
  String newNote=""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  if (textBefore != null) {
    sb.append(textBefore);
    newStartPos=textBefore.length();
  }
 else {
    sb.append(originalText.substring(0,startPos));
  }
  if (textToInsert != null) {
    sb.append(textToInsert);
    newEndPos=newStartPos + textToInsert.length();
  }
 else {
    String text=originalText.substring(startPos,endPos);
    sb.append(text);
    newEndPos=newStartPos + text.length();
  }
  if (textAfter != null) {
    sb.append(textAfter);
  }
 else {
    sb.append(originalText.substring(endPos));
  }
  newNote=sb.toString();
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mFileContent=newNote;
    mSelectionStart=newStartPos;
    mSelectionStop=newEndPos;
  }
 else {
    if (!mNoteOnly) {
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      String title=ExtractTitle.extractTitle(newNote);
      values.put(Notes.TITLE,title);
    }
    values.put(Notes.NOTE,newNote);
    getContentResolver().update(mUri,values,null,null);
  }
  mText.setTextKeepState(newNote);
  mText.setSelection(newStartPos,newEndPos);
}","/** 
 * Insert textToInsert at current position. Optionally, if textBefore or textAfter are non-null, replace the text before or after the current selection.
 * @author isaac
 * @author Peli
 */
private void insertAtPoint(String textBefore,String textToInsert,String textAfter){
  String originalText=mText.getText().toString();
  int startPos=mText.getSelectionStart();
  int endPos=mText.getSelectionEnd();
  if (mDecryptedText != null) {
    originalText=mDecryptedText;
    startPos=mSelectionStart;
    endPos=mSelectionStop;
  }
  int newStartPos=startPos;
  int newEndPos=endPos;
  ContentValues values=new ContentValues();
  String newNote=""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  if (textBefore != null) {
    sb.append(textBefore);
    newStartPos=textBefore.length();
  }
 else {
    sb.append(originalText.substring(0,startPos));
  }
  if (textToInsert != null) {
    sb.append(textToInsert);
    newEndPos=newStartPos + textToInsert.length();
  }
 else {
    String text=originalText.substring(startPos,endPos);
    sb.append(text);
    newEndPos=newStartPos + text.length();
  }
  if (textAfter != null) {
    sb.append(textAfter);
  }
 else {
    sb.append(originalText.substring(endPos));
  }
  newNote=sb.toString();
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mFileContent=newNote;
    mSelectionStart=newStartPos;
    mSelectionStop=newEndPos;
  }
 else   if (mDecryptedText != null) {
    mDecryptedText=newNote;
  }
 else {
    if (!mNoteOnly) {
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      String title=ExtractTitle.extractTitle(newNote);
      values.put(Notes.TITLE,title);
    }
    values.put(Notes.NOTE,newNote);
    getContentResolver().update(mUri,values,null,null);
  }
  mText.setTextKeepState(newNote);
  mText.setSelection(newStartPos,newEndPos);
}",0.9435158501440922
187791,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  int autoLink=PreferenceActivity.getAutoLinkFromPreference(this);
  mText.setAutoLinkMask(autoLink);
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
  mText.setMovementMethod(new ArrowKeyMovementMethod(){
    public boolean onTouchEvent(    TextView widget,    Spannable buffer,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_UP) {
        int x=(int)event.getX();
        int y=(int)event.getY();
        x-=widget.getTotalPaddingLeft();
        y-=widget.getTotalPaddingTop();
        x+=widget.getScrollX();
        y+=widget.getScrollY();
        Layout layout=widget.getLayout();
        int line=layout.getLineForVertical(y);
        int off=layout.getOffsetForHorizontal(line,x);
        ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
        if (link.length != 0) {
          link[0].onClick(widget);
          return true;
        }
      }
      return super.onTouchEvent(widget,buffer,event);
    }
  }
);
  setTheme(loadTheme());
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  int autoLink=PreferenceActivity.getAutoLinkFromPreference(this);
  mText.setAutoLinkMask(autoLink);
  mEncrypted=0;
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
  if (mEncrypted == 0 || mDecryptedText != null) {
    applyInsertText();
  }
  mText.setMovementMethod(new ArrowKeyMovementMethod(){
    public boolean onTouchEvent(    TextView widget,    Spannable buffer,    MotionEvent event){
      int action=event.getAction();
      if (action == MotionEvent.ACTION_UP) {
        int x=(int)event.getX();
        int y=(int)event.getY();
        x-=widget.getTotalPaddingLeft();
        y-=widget.getTotalPaddingTop();
        x+=widget.getScrollX();
        y+=widget.getScrollY();
        Layout layout=widget.getLayout();
        int line=layout.getLineForVertical(y);
        int off=layout.getOffsetForHorizontal(line,x);
        ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
        if (link.length != 0) {
          link[0].onClick(widget);
          return true;
        }
      }
      return super.onTouchEvent(widget,buffer,event);
    }
  }
);
  setTheme(loadTheme());
}",0.9635658914728682
187792,"@Override protected void onSaveInstanceState(Bundle outState){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (debug)   Log.d(TAG,""String_Node_Str"" + mFileContent);
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (debug)   Log.d(TAG,""String_Node_Str"" + mFileContent);
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
  outState.putString(BUNDLE_APPLY_TEXT,mApplyText);
  outState.putString(BUNDLE_APPLY_TEXT_BEFORE,mApplyTextBefore);
  outState.putString(BUNDLE_APPLY_TEXT_AFTER,mApplyTextAfter);
}",0.8741258741258742
187793,"private void onModeChanged(){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
  if (mMode == MODE_IN_SHOP) {
    setTitle(getString(R.string.shopping_title,getCurrentListName()));
    registerSensor();
  }
 else {
    setTitle(getString(R.string.pick_items_titel,getCurrentListName()));
    unregisterSensor();
  }
}","private void onModeChanged(){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
  if (mMode == MODE_IN_SHOP) {
    registerSensor();
  }
 else {
    unregisterSensor();
  }
}",0.7037037037037037
187794,"public NewListDialog(Context context,DialogActionListener listener){
  super(context);
  setDialogActionListener(listener);
}","public NewListDialog(Context context,DialogActionListener listener){
  super(context);
  setTitle(R.string.ask_new_list);
  setDialogActionListener(listener);
}",0.8771929824561403
187795,"protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT_TITLE:
    if (resultCode == RESULT_OK && intent != null) {
      String decryptedText=intent.getStringExtra(CryptoIntents.EXTRA_TEXT);
      String encryptedText=intent.getStringExtra(PrivateNotePadIntents.EXTRA_ENCRYPTED_TEXT);
      if (encryptedText != null) {
        NotesListCursor.mEncryptedStringHashMap.put(encryptedText,decryptedText);
        Log.i(TAG,""String_Node_Str"" + encryptedText + ""String_Node_Str""+ decryptedText);
      }
      mDecryptionSucceeded=true;
      NotesListCursor.mLoggedIn=true;
      decryptDelayed();
    }
 else {
      mDecryptionFailed=true;
      setProgressBarIndeterminateVisibility(false);
    }
  break;
case REQUEST_CODE_OPEN:
if (resultCode == RESULT_OK && intent != null) {
  File filename=FileUriUtils.getFile(intent.getData());
  if (filename.exists() && !filename.isDirectory()) {
    Intent i=new Intent(this,NoteEditor.class);
    i.setAction(Intent.ACTION_VIEW);
    i.setData(intent.getData());
    startActivity(i);
  }
 else {
    Toast.makeText(this,R.string.file_not_found,Toast.LENGTH_SHORT).show();
  }
}
break;
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent intent){
  if (debug)   Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT_TITLE:
    if (resultCode == RESULT_OK && intent != null) {
      String decryptedText=intent.getStringExtra(CryptoIntents.EXTRA_TEXT);
      String encryptedText=intent.getStringExtra(PrivateNotePadIntents.EXTRA_ENCRYPTED_TEXT);
      if (encryptedText != null) {
        NotesListCursor.mEncryptedStringHashMap.put(encryptedText,decryptedText);
        if (debug)         Log.i(TAG,""String_Node_Str"" + encryptedText + ""String_Node_Str""+ decryptedText);
      }
      mDecryptionSucceeded=true;
      NotesListCursor.mLoggedIn=true;
      decryptDelayed();
    }
 else {
      mDecryptionFailed=true;
      setProgressBarIndeterminateVisibility(false);
    }
  break;
case REQUEST_CODE_OPEN:
if (resultCode == RESULT_OK && intent != null) {
  File filename=FileUriUtils.getFile(intent.getData());
  if (filename.exists() && !filename.isDirectory()) {
    Intent i=new Intent(this,NoteEditor.class);
    i.setAction(Intent.ACTION_VIEW);
    i.setData(intent.getData());
    startActivity(i);
  }
 else {
    Toast.makeText(this,R.string.file_not_found,Toast.LENGTH_SHORT).show();
  }
}
break;
}
}",0.987682832948422
187796,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(Notes.CONTENT_URI);
  }
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.noteslist);
  getListView().setOnCreateContextMenuListener(this);
  getListView().setEmptyView(findViewById(R.id.empty));
  getListView().setTextFilterEnabled(true);
  getListView().setOnScrollListener(this);
  mLastFilter=null;
  if (savedInstanceState != null) {
    mLastFilter=savedInstanceState.getString(BUNDLE_LAST_FILTER);
  }
  mCursorUtils=new NotesListCursor(this,getIntent());
  if (Intent.ACTION_CREATE_SHORTCUT.equals(intent.getAction())) {
    setTitle(R.string.title_pick_note_for_shortcut);
  }
  mDecryptionFailed=false;
  mDecryptionSucceeded=false;
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"" + (savedInstanceState == null ? ""String_Node_Str"" : ""String_Node_Str""));
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setDefaultKeyMode(DEFAULT_KEYS_SHORTCUT);
  Intent intent=getIntent();
  if (intent.getData() == null) {
    intent.setData(Notes.CONTENT_URI);
  }
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  setContentView(R.layout.noteslist);
  getListView().setOnCreateContextMenuListener(this);
  getListView().setEmptyView(findViewById(R.id.empty));
  getListView().setTextFilterEnabled(true);
  getListView().setOnScrollListener(this);
  mLastFilter=null;
  if (savedInstanceState != null) {
    mLastFilter=savedInstanceState.getString(BUNDLE_LAST_FILTER);
    if (savedInstanceState.containsKey(BUNDLE_CONTEXTMENUINFO_ID)) {
      long id=savedInstanceState.getLong(BUNDLE_CONTEXTMENUINFO_ID);
      int position=savedInstanceState.getInt(BUNDLE_CONTEXTMENUINFO_POSITION);
      mContextMenuInfo=new AdapterView.AdapterContextMenuInfo(null,position,id);
    }
  }
  mCursorUtils=new NotesListCursor(this,getIntent());
  checkAdapter();
  if (Intent.ACTION_CREATE_SHORTCUT.equals(intent.getAction())) {
    setTitle(R.string.title_pick_note_for_shortcut);
  }
  mDecryptionFailed=false;
  mDecryptionSucceeded=false;
}",0.8148774302620456
187797,"private void saveFile(Uri uri,File file){
  Log.i(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ file);
  Cursor c=getContentResolver().query(uri,new String[]{Notes.ENCRYPTED,Notes.NOTE},null,null,null);
  if (c != null && c.getCount() > 0) {
    c.moveToFirst();
    long encrypted=c.getLong(0);
    String note=c.getString(1);
    if (encrypted == 0) {
      Log.d(TAG,""String_Node_Str"");
      writeToFile(file,note);
    }
 else {
      Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"" + uri);
  }
}","private void saveFile(Uri uri,File file){
  if (debug)   Log.i(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ file);
  Cursor c=getContentResolver().query(uri,new String[]{Notes.ENCRYPTED,Notes.NOTE},null,null,null);
  if (c != null && c.getCount() > 0) {
    c.moveToFirst();
    long encrypted=c.getLong(0);
    String note=c.getString(1);
    if (encrypted == 0) {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      writeToFile(file,note);
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"" + uri);
  }
}",0.9579982126899016
187798,"@Override public void onReceive(Context context,Intent intent){
  Log.i(TAG,""String_Node_Str"");
  NotesListCursor.flushDecryptedStringHashMap();
  mAdapter.getCursor().requery();
}","@Override public void onReceive(Context context,Intent intent){
  if (debug)   Log.i(TAG,""String_Node_Str"");
  NotesListCursor.flushDecryptedStringHashMap();
  mAdapter.getCursor().requery();
}",0.96514745308311
187799,"@Override protected void onResume(){
  super.onResume();
  NotesListCursor.mSuspendQueries=false;
  if (mAdapter == null) {
    Cursor cursor=mCursorUtils.query(null);
    mAdapter=new NotesListCursorAdapter(this,cursor,mCursorUtils);
    setListAdapter(mAdapter);
    Log.i(TAG,""String_Node_Str"" + mLastFilter);
    if (mLastFilter != null) {
      cursor=mAdapter.runQueryOnBackgroundThread(mLastFilter);
      mAdapter.changeCursor(cursor);
    }
  }
 else {
    mAdapter.getCursor().requery();
  }
  if (!mDecryptionFailed) {
    decryptDelayed();
  }
 else {
    mDecryptionFailed=false;
  }
  if (mDecryptionSucceeded) {
    NotesListCursor.mLoggedIn=true;
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mBroadcastReceiver,filter);
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  NotesListCursor.mSuspendQueries=false;
  checkAdapter();
  if (!mDecryptionFailed) {
    decryptDelayed();
  }
 else {
    mDecryptionFailed=false;
  }
  if (mDecryptionSucceeded) {
    NotesListCursor.mLoggedIn=true;
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mBroadcastReceiver,filter);
}",0.6295436968290796
187800,"@Override protected void onPrepareDialog(int id,Dialog dialog){
  FilenameDialog fd;
switch (id) {
case DIALOG_TAGS:
    TagsDialog d=(TagsDialog)dialog;
  Uri uri=ContentUris.withAppendedId(getIntent().getData(),mContextMenuInfo.id);
Cursor c=mAdapter.getCursor();
c.moveToPosition(mContextMenuInfo.position);
String tags=c.getString(NotesListCursor.COLUMN_INDEX_TAGS);
long encrypted=c.getLong(NotesListCursor.COLUMN_INDEX_ENCRYPTED);
d.setUri(uri);
d.setTags(tags);
d.setEncrypted(encrypted);
String[] taglist=getTaglist(c);
d.setTagList(taglist);
break;
case DIALOG_ABOUT:
break;
}
}","@Override protected void onPrepareDialog(int id,Dialog dialog){
  if (debug)   Log.d(TAG,""String_Node_Str"");
switch (id) {
case DIALOG_TAGS:
    TagsDialog d=(TagsDialog)dialog;
  Uri uri=ContentUris.withAppendedId(getIntent().getData(),mContextMenuInfo.id);
Cursor c=mAdapter.getCursor();
c.moveToPosition(mContextMenuInfo.position);
String tags=c.getString(NotesListCursor.COLUMN_INDEX_TAGS);
long encrypted=c.getLong(NotesListCursor.COLUMN_INDEX_ENCRYPTED);
d.setUri(uri);
d.setTags(tags);
d.setEncrypted(encrypted);
String[] taglist=getTaglist(c);
d.setTagList(taglist);
break;
case DIALOG_ABOUT:
break;
}
}",0.9532554257095158
187801,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(BUNDLE_LAST_FILTER,mCursorUtils.mCurrentFilter);
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putString(BUNDLE_LAST_FILTER,mCursorUtils.mCurrentFilter);
  if (mContextMenuInfo != null) {
    outState.putLong(BUNDLE_CONTEXTMENUINFO_ID,mContextMenuInfo.id);
    outState.putInt(BUNDLE_CONTEXTMENUINFO_POSITION,mContextMenuInfo.position);
  }
}",0.649155722326454
187802,"private void sendNoteByEmail(long id){
  Uri noteUri=ContentUris.withAppendedId(getIntent().getData(),id);
  Cursor c=getContentResolver().query(noteUri,new String[]{NotePad.Notes.TITLE,NotePad.Notes.NOTE},null,null,PreferenceActivity.getSortOrderFromPrefs(this));
  String title=""String_Node_Str"";
  String content=getString(R.string.empty_note);
  if (c != null) {
    c.moveToFirst();
    title=c.getString(0);
    content=c.getString(1);
  }
  Log.i(TAG,""String_Node_Str"" + title);
  Log.i(TAG,""String_Node_Str"" + content);
  Intent i=new Intent();
  i.setAction(Intent.ACTION_SEND);
  i.setType(""String_Node_Str"");
  i.putExtra(Intent.EXTRA_SUBJECT,title);
  i.putExtra(Intent.EXTRA_TEXT,content);
  try {
    startActivity(i);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.email_not_available,Toast.LENGTH_SHORT).show();
    Log.e(TAG,""String_Node_Str"");
  }
}","private void sendNoteByEmail(long id){
  Uri noteUri=ContentUris.withAppendedId(getIntent().getData(),id);
  Cursor c=getContentResolver().query(noteUri,new String[]{NotePad.Notes.TITLE,NotePad.Notes.NOTE},null,null,PreferenceActivity.getSortOrderFromPrefs(this));
  String title=""String_Node_Str"";
  String content=getString(R.string.empty_note);
  if (c != null) {
    c.moveToFirst();
    title=c.getString(0);
    content=c.getString(1);
  }
  if (debug)   Log.i(TAG,""String_Node_Str"" + title);
  if (debug)   Log.i(TAG,""String_Node_Str"" + content);
  Intent i=new Intent();
  i.setAction(Intent.ACTION_SEND);
  i.setType(""String_Node_Str"");
  i.putExtra(Intent.EXTRA_SUBJECT,title);
  i.putExtra(Intent.EXTRA_TEXT,content);
  try {
    startActivity(i);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.email_not_available,Toast.LENGTH_SHORT).show();
    Log.e(TAG,""String_Node_Str"");
  }
}",0.9857299670691548
187803,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('3','a').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('4','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('3','a').setIcon(android.R.drawable.ic_menu_add);
  menu.add(0,MENU_OPEN,0,R.string.menu_open_from_sdcard).setShortcut('4','o').setIcon(R.drawable.ic_menu_folder);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_SETTINGS,0,R.string.settings).setIcon(android.R.drawable.ic_menu_preferences).setShortcut('9','s');
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  if (debug)   Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}",0.9935419771485344
187804,"@Override public void onDestroy(){
  super.onDestroy();
  unregisterReceiver(mIntentReceiver);
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","@Override public void onDestroy(){
  super.onDestroy();
  if (mIntentReceiver != null) {
    unregisterReceiver(mIntentReceiver);
    mIntentReceiver=null;
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.6974063400576369
187805,"@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
  mEncrypted=savedInstanceState.getLong(BUNDLE_ENCRYPTED);
  mTagList=savedInstanceState.getStringArray(BUNDLE_TAGLIST);
}","@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
  mEncrypted=savedInstanceState.getLong(BUNDLE_ENCRYPTED);
  mTagList=savedInstanceState.getStringArray(BUNDLE_TAGLIST);
  setTagList(mTagList);
}",0.962382445141066
187806,"/** 
 * Modifies an activity to pass along the currently selected text.
 * @param intent
 */
private void startTextSelectionActivity(Intent intent){
  Intent newIntent=new Intent(intent);
  String text=mText.getText().toString();
  int start=mText.getSelectionStart();
  int end=mText.getSelectionEnd();
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT,text.substring(start,end));
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION,text.substring(0,start));
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION,text.substring(end));
  startActivityForResult(newIntent,REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE);
}","/** 
 * Modifies an activity to pass along the currently selected text.
 * @param intent
 */
private void startTextSelectionActivity(Intent intent){
  Intent newIntent=new Intent(intent);
  String text=mText.getText().toString();
  int start=mText.getSelectionStart();
  int end=mText.getSelectionEnd();
  if (end < start) {
    int swap=end;
    end=start;
    start=swap;
  }
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT,text.substring(start,end));
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION,text.substring(0,start));
  newIntent.putExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION,text.substring(end));
  startActivityForResult(newIntent,REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE);
}",0.9446935724962632
187807,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      mDecryptedText=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  String text=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  String textBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  String textAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
  insertAtPoint(textBefore,text,textAfter);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_DECRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String decryptedText=data.getStringExtra(CryptoIntents.EXTRA_TEXT);
      long id=data.getLongExtra(PrivateNotePadIntents.EXTRA_ID,-1);
      if (id == -1) {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        finish();
        return;
      }
      mDecryptedText=decryptedText;
    }
 else {
      Toast.makeText(this,R.string.decryption_failed,Toast.LENGTH_SHORT).show();
      Log.e(TAG,""String_Node_Str"");
      finish();
    }
  break;
case REQUEST_CODE_TEXT_SELECTION_ALTERNATIVE:
if (resultCode == RESULT_OK && data != null) {
  String text=data.getStringExtra(NotepadIntents.EXTRA_TEXT);
  String textBefore=data.getStringExtra(NotepadIntents.EXTRA_TEXT_BEFORE_SELECTION);
  String textAfter=data.getStringExtra(NotepadIntents.EXTRA_TEXT_AFTER_SELECTION);
  insertAtPoint(textBefore,text,textAfter);
}
break;
case REQUEST_CODE_SAVE_AS:
if (resultCode == RESULT_OK && data != null) {
mUri=data.getData();
if (debug) Log.i(TAG,""String_Node_Str"" + mOriginalContent + ""String_Node_Str""+ mFileContent);
mOriginalContent=mFileContent;
updateTitleSdCard();
}
}
}",0.9597340229035832
187808,"private void getNoteFromFile(){
  mText.setTextKeepState(mFileContent);
  mText.setSelection(mSelectionStart,mSelectionStop);
  if (mOriginalContent == null) {
    mOriginalContent=mFileContent;
  }
  updateTitleSdCard();
}","private void getNoteFromFile(){
  if (debug)   Log.i(TAG,""String_Node_Str"" + mFileContent);
  mText.setTextKeepState(mFileContent);
  try {
    mText.setSelection(mSelectionStart,mSelectionStop);
  }
 catch (  IndexOutOfBoundsException e) {
  }
  if (mOriginalContent == null) {
    mOriginalContent=mFileContent;
  }
  updateTitleSdCard();
}",0.7893805309734513
187809,"private void updateTitleSdCard(){
  mFileContent=mText.getText().toString();
  String modified=""String_Node_Str"";
  if (!mOriginalContent.equals(mFileContent)) {
    modified=""String_Node_Str"";
  }
  String filename=FileUriUtils.getFilename(mUri);
  setTitle(modified + filename);
}","private void updateTitleSdCard(){
  String modified=""String_Node_Str"";
  if (!mOriginalContent.equals(mFileContent)) {
    modified=""String_Node_Str"";
  }
  String filename=FileUriUtils.getFilename(mUri);
  setTitle(modified + filename);
}",0.9174664107485604
187810,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mDecryptedText=null;
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),null);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.i(TAG,""String_Node_Str"");
  mDecryptedText=null;
  mSelectionStart=0;
  mSelectionStop=0;
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(BUNDLE_ORIGINAL_CONTENT);
    mState=savedInstanceState.getInt(BUNDLE_STATE);
    mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
    mSelectionStart=savedInstanceState.getInt(BUNDLE_SELECTION_START);
    mSelectionStop=savedInstanceState.getInt(BUNDLE_SELECTION_STOP);
    mFileContent=savedInstanceState.getString(BUNDLE_FILE_CONTENT);
  }
 else {
    final Intent intent=getIntent();
    final String action=intent.getAction();
    if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
      mState=STATE_EDIT;
      mUri=intent.getData();
      if (mUri.getScheme().equals(""String_Node_Str"")) {
        mState=STATE_EDIT_NOTE_FROM_SDCARD;
        mFileContent=readFile(FileUriUtils.getFile(mUri));
      }
    }
 else     if (Intent.ACTION_INSERT.equals(action)) {
      mState=STATE_INSERT;
      mUri=getContentResolver().insert(intent.getData(),null);
      if (mUri == null) {
        Log.e(TAG,""String_Node_Str"" + getIntent().getData());
        finish();
        return;
      }
      setResult(RESULT_OK,intent);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
      finish();
      return;
    }
  }
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mText.addTextChangedListener(mTextWatcherSdCard);
  }
  if (mState != STATE_EDIT_NOTE_FROM_SDCARD) {
    mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  }
 else {
    mCursor=null;
  }
}",0.3373159210891914
187811,"@Override public void afterTextChanged(Editable s){
  Log.i(TAG,""String_Node_Str"");
  updateTitleSdCard();
}","@Override public void afterTextChanged(Editable s){
  Log.i(TAG,""String_Node_Str"");
  mFileContent=s.toString();
  updateTitleSdCard();
}",0.8816326530612245
187812,"/** 
 * Insert textToInsert at current position. Optionally, if textBefore or textAfter are non-null, replace the text before or after the current selection.
 * @author isaac
 * @author Peli
 */
private void insertAtPoint(String textBefore,String textToInsert,String textAfter){
  String originalText=mText.getText().toString();
  int startPos=mText.getSelectionStart();
  int endPos=mText.getSelectionEnd();
  int newStartPos=startPos;
  int newEndPos=endPos;
  ContentValues values=new ContentValues();
  String newNote=""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  if (textBefore != null) {
    sb.append(textBefore);
    newStartPos=textBefore.length();
  }
 else {
    sb.append(originalText.substring(0,startPos));
  }
  if (textToInsert != null) {
    sb.append(textToInsert);
    newEndPos=newStartPos + textToInsert.length();
  }
 else {
    String text=originalText.substring(startPos,endPos);
    sb.append(text);
    newEndPos=newStartPos + text.length();
  }
  if (textAfter != null) {
    sb.append(textAfter);
  }
 else {
    sb.append(originalText.substring(endPos));
  }
  newNote=sb.toString();
  if (!mNoteOnly) {
    values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
    String title=ExtractTitle.extractTitle(newNote);
    values.put(Notes.TITLE,title);
  }
  values.put(Notes.NOTE,newNote);
  getContentResolver().update(mUri,values,null,null);
  mText.setTextKeepState(newNote);
  mText.setSelection(newStartPos,newEndPos);
}","/** 
 * Insert textToInsert at current position. Optionally, if textBefore or textAfter are non-null, replace the text before or after the current selection.
 * @author isaac
 * @author Peli
 */
private void insertAtPoint(String textBefore,String textToInsert,String textAfter){
  String originalText=mText.getText().toString();
  int startPos=mText.getSelectionStart();
  int endPos=mText.getSelectionEnd();
  int newStartPos=startPos;
  int newEndPos=endPos;
  ContentValues values=new ContentValues();
  String newNote=""String_Node_Str"";
  StringBuffer sb=new StringBuffer();
  if (textBefore != null) {
    sb.append(textBefore);
    newStartPos=textBefore.length();
  }
 else {
    sb.append(originalText.substring(0,startPos));
  }
  if (textToInsert != null) {
    sb.append(textToInsert);
    newEndPos=newStartPos + textToInsert.length();
  }
 else {
    String text=originalText.substring(startPos,endPos);
    sb.append(text);
    newEndPos=newStartPos + text.length();
  }
  if (textAfter != null) {
    sb.append(textAfter);
  }
 else {
    sb.append(originalText.substring(endPos));
  }
  newNote=sb.toString();
  if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    mFileContent=newNote;
    mSelectionStart=newStartPos;
    mSelectionStop=newEndPos;
  }
 else {
    if (!mNoteOnly) {
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      String title=ExtractTitle.extractTitle(newNote);
      values.put(Notes.TITLE,title);
    }
    values.put(Notes.NOTE,newNote);
    getContentResolver().update(mUri,values,null,null);
  }
  mText.setTextKeepState(newNote);
  mText.setSelection(newStartPos,newEndPos);
}",0.9465894465894464
187813,"@Override protected void onResume(){
  super.onResume();
  Log.d(TAG,""String_Node_Str"");
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (mState == STATE_EDIT || mState == STATE_INSERT) {
    getNoteFromContentProvider();
  }
 else   if (mState == STATE_EDIT_NOTE_FROM_SDCARD) {
    getNoteFromFile();
  }
}",0.9759704251386322
187814,"@Override protected void onSaveInstanceState(Bundle outState){
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
}","@Override protected void onSaveInstanceState(Bundle outState){
  if (debug)   Log.i(TAG,""String_Node_Str"");
  if (debug)   Log.i(TAG,""String_Node_Str"" + mFileContent);
  mSelectionStart=mText.getSelectionStart();
  mSelectionStop=mText.getSelectionEnd();
  mFileContent=mText.getText().toString();
  outState.putString(BUNDLE_ORIGINAL_CONTENT,mOriginalContent);
  outState.putInt(BUNDLE_STATE,mState);
  outState.putString(BUNDLE_URI,mUri.toString());
  outState.putInt(BUNDLE_SELECTION_START,mSelectionStart);
  outState.putInt(BUNDLE_SELECTION_STOP,mSelectionStop);
  outState.putString(BUNDLE_FILE_CONTENT,mFileContent);
}",0.9082969432314412
187815,"/** 
 * Convert Uri into String.
 * @param uri
 * @return file
 */
public static String getFilename(Uri uri){
  if (uri != null) {
    String filepath=uri.toString();
    if (filepath.startsWith(""String_Node_Str"")) {
      filepath=filepath.substring(7);
    }
    return filepath;
  }
  return null;
}","/** 
 * Convert Uri into String.
 * @param uri
 * @return file
 */
public static String getFilename(Uri uri){
  File file=getFile(uri);
  if (file != null) {
    return file.getAbsolutePath();
  }
  return null;
}",0.5553398058252427
187816,"/** 
 * Convert String into Uri.
 * @param file
 * @return uri
 */
public static Uri getUri(String filename){
  return Uri.parse(""String_Node_Str"" + filename);
}","/** 
 * Convert String into Uri.
 * @param file
 * @return uri
 */
public static Uri getUri(String filename){
  return getUri(new File(filename));
}",0.8802588996763754
187817,"public Cursor runQuery(CharSequence constraint){
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
  return mItemsCursor;
}","public Cursor runQuery(CharSequence constraint){
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"",new String[]{""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str""},""String_Node_Str"");
  return mItemsCursor;
}",0.9556886227544912
187818,"/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
      mListItemsView.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      Log.d(TAG,""String_Node_Str"" + mIsActive);
      Log.i(TAG,""String_Node_Str"" + mIsActive);
      if (mIsActive) {
        fillItems();
      }
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
    mItemsCursor.close();
    mItemsCursor=null;
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      if (mItemsCursor != null) {
        Log.d(TAG,""String_Node_Str"");
        stopManagingCursor(mItemsCursor);
      }
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItemsView=(ShoppingListView)findViewById(R.id.list_items);
  mListItemsView.setThemedBackground(findViewById(R.id.background));
  TextView tv=(TextView)findViewById(R.id.total_1);
  mListItemsView.setTotalCheckedTextView(tv);
  tv=(TextView)findViewById(R.id.total_2);
  mListItemsView.setTotalTextView(tv);
  mListItemsView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItemsView.toggleItemBought(pos);
      }
    }
  }
);
  mListItemsView.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('1','e');
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('2','m');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}","/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
      mListItemsView.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      Log.d(TAG,""String_Node_Str"" + mIsActive);
      Log.i(TAG,""String_Node_Str"" + mIsActive);
      if (mIsActive) {
        fillItems();
      }
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
    mItemsCursor.close();
    mItemsCursor=null;
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      if (mItemsCursor != null) {
        Log.d(TAG,""String_Node_Str"");
        stopManagingCursor(mItemsCursor);
      }
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"",new String[]{""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str""},""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItemsView=(ShoppingListView)findViewById(R.id.list_items);
  mListItemsView.setThemedBackground(findViewById(R.id.background));
  TextView tv=(TextView)findViewById(R.id.total_1);
  mListItemsView.setTotalCheckedTextView(tv);
  tv=(TextView)findViewById(R.id.total_2);
  mListItemsView.setTotalTextView(tv);
  mListItemsView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItemsView.toggleItemBought(pos);
      }
    }
  }
);
  mListItemsView.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('1','e');
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('2','m');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}",0.9950921872927444
187819,"public void onNothingSelected(AdapterView arg0){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
}","public void onNothingSelected(AdapterView arg0){
  Log.d(TAG,""String_Node_Str"" + mIsActive);
  Log.i(TAG,""String_Node_Str"" + mIsActive);
  if (mIsActive) {
    fillItems();
  }
}",0.7054545454545454
187820,"public Cursor runQuery(CharSequence constraint){
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
  return mItemsCursor;
}","public Cursor runQuery(CharSequence constraint){
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
    mItemsCursor.close();
    mItemsCursor=null;
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
  return mItemsCursor;
}",0.7936085219707057
187821,"@Override protected void onResume(){
  super.onResume();
  Log.i(TAG,""String_Node_Str"");
  if (mState == STATE_MAIN || mState == STATE_VIEW_LIST) {
  }
 else   if ((mState == STATE_PICK_ITEM) || (mState == STATE_GET_CONTENT_ITEM)) {
    setTitle(getText(R.string.pick_item));
    setTitleColor(0xFFAAAAFF);
  }
  mListItemsView.setListTheme(loadListTheme());
  mListItemsView.onResume();
  mEditText.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
  if (!mUpdating) {
    mUpdating=true;
  }
  initFromPreferences();
  registerSensor();
}","@Override protected void onResume(){
  Log.i(TAG,""String_Node_Str"");
  super.onResume();
  Log.i(TAG,""String_Node_Str"");
  mIsActive=true;
  if (mState == STATE_MAIN || mState == STATE_VIEW_LIST) {
  }
 else   if ((mState == STATE_PICK_ITEM) || (mState == STATE_GET_CONTENT_ITEM)) {
    setTitle(getText(R.string.pick_item));
    setTitleColor(0xFFAAAAFF);
  }
  mListItemsView.setListTheme(loadListTheme());
  mListItemsView.onResume();
  mEditText.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
  if (!mUpdating) {
    mUpdating=true;
  }
  initFromPreferences();
  registerSensor();
}",0.9267100977198696
187822,"@Override protected void onPause(){
  super.onPause();
  Log.i(TAG,""String_Node_Str"");
  unregisterSensor();
  SharedPreferences sp=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  SharedPreferences.Editor editor=sp.edit();
  editor.putInt(PreferenceActivity.PREFS_LASTUSED,new Long(getSelectedListId()).intValue());
  editor.commit();
  mListItemsView.onPause();
}","@Override protected void onPause(){
  super.onPause();
  Log.i(TAG,""String_Node_Str"");
  Log.i(TAG,""String_Node_Str"" + mIsActive);
  mIsActive=false;
  Log.i(TAG,""String_Node_Str"" + mIsActive);
  unregisterSensor();
  SharedPreferences sp=getSharedPreferences(""String_Node_Str"",MODE_PRIVATE);
  SharedPreferences.Editor editor=sp.edit();
  editor.putInt(PreferenceActivity.PREFS_LASTUSED,new Long(getSelectedListId()).intValue());
  editor.commit();
  mListItemsView.onPause();
}",0.8742655699177438
187823,"/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
      mListItemsView.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItemsView=(ShoppingListView)findViewById(R.id.list_items);
  mListItemsView.setThemedBackground(findViewById(R.id.background));
  mListItemsView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItemsView.toggleItemBought(pos);
      }
    }
  }
);
  mListItemsView.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('2','e');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}","/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
      mListItemsView.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      Log.d(TAG,""String_Node_Str"" + mIsActive);
      Log.i(TAG,""String_Node_Str"" + mIsActive);
      if (mIsActive) {
        fillItems();
      }
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  if (mItemsCursor != null) {
    Log.d(TAG,""String_Node_Str"");
    stopManagingCursor(mItemsCursor);
    mItemsCursor.close();
    mItemsCursor=null;
  }
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      if (mItemsCursor != null) {
        Log.d(TAG,""String_Node_Str"");
        stopManagingCursor(mItemsCursor);
        mItemsCursor.close();
        mItemsCursor=null;
      }
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItemsView=(ShoppingListView)findViewById(R.id.list_items);
  mListItemsView.setThemedBackground(findViewById(R.id.background));
  mListItemsView.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItemsView.toggleItemBought(pos);
      }
    }
  }
);
  mListItemsView.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('2','e');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}",0.9317151630355316
187824,"/** 
 */
private void populateFields(){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (RowId != null) {
    CategoryEntry catEntry=Passwords.getCategoryEntry(RowId);
    nameText.setText(catEntry.plainName);
  }
}","/** 
 */
private void populateFields(){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if ((RowId != null) && (RowId > 0)) {
    CategoryEntry catEntry=Passwords.getCategoryEntry(RowId);
    if (catEntry == null) {
      return;
    }
    nameText.setText(catEntry.plainName);
  }
}",0.8697394789579158
187825,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (!CategoryList.isSignedIn()) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
  }
  populateFields();
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (!CategoryList.isSignedIn()) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
    return;
  }
  populateFields();
}",0.9776119402985076
187826,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  if (!isSignedIn()) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
  }
  try {
    Passwords.InitCrypto(CryptoHelper.EncryptionMedium,salt,masterKey);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Toast.makeText(CategoryList.this,""String_Node_Str"" + getString(R.string.crypto_error),Toast.LENGTH_SHORT).show();
  }
  setContentView(R.layout.cat_list);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.categories);
  setTitle(title);
  if (Passwords.getPrePopulate() == true) {
    prePopulate();
    Passwords.clearPrePopulate();
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mIntentReceiver,filter);
  fillData();
  final ListView list=getListView();
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  registerForContextMenu(list);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  if (isSignedIn() == false) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
    return;
  }
  try {
    Passwords.InitCrypto(CryptoHelper.EncryptionMedium,salt,masterKey);
  }
 catch (  Exception e) {
    e.printStackTrace();
    Toast.makeText(CategoryList.this,""String_Node_Str"" + getString(R.string.crypto_error),Toast.LENGTH_SHORT).show();
  }
  setContentView(R.layout.cat_list);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.categories);
  setTitle(title);
  if (Passwords.getPrePopulate() == true) {
    prePopulate();
    Passwords.clearPrePopulate();
  }
  IntentFilter filter=new IntentFilter();
  filter.addAction(Intent.ACTION_SCREEN_OFF);
  filter.addAction(CryptoIntents.ACTION_CRYPTO_LOGGED_OUT);
  registerReceiver(mIntentReceiver,filter);
  fillData();
  final ListView list=getListView();
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  registerForContextMenu(list);
}",0.9818611987381703
187827,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (!isSignedIn()) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
  }
  showFirstTimeWarningDialog();
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (isSignedIn() == false) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
    return;
  }
  showFirstTimeWarningDialog();
}",0.959409594095941
187828,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
  }
  setContentView(R.layout.chg_pass);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.change_password);
  setTitle(title);
  Button changePasswordButton=(Button)findViewById(R.id.change_password_button);
  changePasswordButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      performChangePass();
    }
  }
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  setContentView(R.layout.chg_pass);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.change_password);
  setTitle(title);
  Button changePasswordButton=(Button)findViewById(R.id.change_password_button);
  changePasswordButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      performChangePass();
    }
  }
);
}",0.990950226244344
187829,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.help);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.help);
  setTitle(title);
  try {
    InputStream is=getAssets().open(""String_Node_Str"");
    int size=is.available();
    byte[] buffer=new byte[size];
    is.read(buffer);
    is.close();
    String text=new String(buffer);
    final String mimeType=""String_Node_Str"";
    final String encoding=""String_Node_Str"";
    WebView wv=(WebView)findViewById(R.id.help);
    wv.loadData(text,mimeType,encoding);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  setContentView(R.layout.help);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.help);
  setTitle(title);
  try {
    InputStream is=getAssets().open(""String_Node_Str"");
    int size=is.available();
    byte[] buffer=new byte[size];
    is.read(buffer);
    is.close();
    String text=new String(buffer);
    final String mimeType=""String_Node_Str"";
    final String encoding=""String_Node_Str"";
    WebView wv=(WebView)findViewById(R.id.help);
    wv.loadData(text,mimeType,encoding);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0.9496598639455782
187830,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
}",0.9649122807017544
187831,"public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  frontdoor=new Intent(this,FrontDoor.class);
  if (!CategoryList.isSignedIn()) {
    startActivity(frontdoor);
  }
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.edit_entry);
  setTitle(title);
  setContentView(R.layout.pass_edit);
  descriptionText=(EditText)findViewById(R.id.description);
  passwordText=(EditText)findViewById(R.id.password);
  usernameText=(EditText)findViewById(R.id.username);
  noteText=(EditText)findViewById(R.id.note);
  websiteText=(EditText)findViewById(R.id.website);
  Button goButton=(Button)findViewById(R.id.go);
  RowId=icicle != null ? icicle.getLong(PassList.KEY_ID) : null;
  if (RowId == null) {
    Bundle extras=getIntent().getExtras();
    RowId=extras != null ? extras.getLong(PassList.KEY_ID) : null;
  }
  entryEdited=false;
  goButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      Toast.makeText(PassEdit.this,R.string.copy_to_clipboard,Toast.LENGTH_SHORT).show();
      ClipboardManager cb=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
      cb.setText(passwordText.getText().toString());
      Intent i=new Intent(Intent.ACTION_VIEW);
      String link=websiteText.getText().toString();
      Uri u=Uri.parse(link);
      i.setData(u);
      try {
        startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        u=Uri.parse(""String_Node_Str"" + link);
        i.setData(u);
        try {
          startActivity(i);
        }
 catch (        ActivityNotFoundException e2) {
          Toast.makeText(PassEdit.this,R.string.invalid_website,Toast.LENGTH_SHORT).show();
        }
      }
    }
  }
);
  restoreMe();
  sendBroadcast(restartTimerIntent);
}","public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  frontdoor=new Intent(this,FrontDoor.class);
  if (CategoryList.isSignedIn() == false) {
    startActivity(frontdoor);
  }
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.edit_entry);
  setTitle(title);
  setContentView(R.layout.pass_edit);
  descriptionText=(EditText)findViewById(R.id.description);
  passwordText=(EditText)findViewById(R.id.password);
  usernameText=(EditText)findViewById(R.id.username);
  noteText=(EditText)findViewById(R.id.note);
  websiteText=(EditText)findViewById(R.id.website);
  Button goButton=(Button)findViewById(R.id.go);
  RowId=icicle != null ? icicle.getLong(PassList.KEY_ID) : null;
  if (RowId == null) {
    Bundle extras=getIntent().getExtras();
    RowId=extras != null ? extras.getLong(PassList.KEY_ID) : null;
  }
  entryEdited=false;
  goButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      Toast.makeText(PassEdit.this,R.string.copy_to_clipboard,Toast.LENGTH_SHORT).show();
      ClipboardManager cb=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
      cb.setText(passwordText.getText().toString());
      Intent i=new Intent(Intent.ACTION_VIEW);
      String link=websiteText.getText().toString();
      Uri u=Uri.parse(link);
      i.setData(u);
      try {
        startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        u=Uri.parse(""String_Node_Str"" + link);
        i.setData(u);
        try {
          startActivity(i);
        }
 catch (        ActivityNotFoundException e2) {
          Toast.makeText(PassEdit.this,R.string.invalid_website,Toast.LENGTH_SHORT).show();
        }
      }
    }
  }
);
  restoreMe();
  sendBroadcast(restartTimerIntent);
}",0.9974039460020768
187832,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    saveState();
    finish();
  }
  populateFields();
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    saveState();
    finish();
    return;
  }
  populateFields();
}",0.971153846153846
187833,"public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.pass_gen);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"";
  setTitle(title);
  pass_view=(EditText)findViewById(R.id.pass_view);
  pass_len=(EditText)findViewById(R.id.pass_length);
  pass_upper=(CheckBox)findViewById(R.id.pass_upper);
  pass_lower=(CheckBox)findViewById(R.id.pass_lower);
  pass_num=(CheckBox)findViewById(R.id.pass_num);
  pass_symbol=(CheckBox)findViewById(R.id.pass_symbol);
  pass_view.setOnClickListener(update_click);
  pass_len.setOnKeyListener(update_key);
  pass_len.setOnFocusChangeListener(update_focus);
  pass_upper.setOnCheckedChangeListener(update_checked);
  pass_lower.setOnCheckedChangeListener(update_checked);
  pass_num.setOnCheckedChangeListener(update_checked);
  pass_symbol.setOnCheckedChangeListener(update_checked);
  copy_clip=(Button)findViewById(R.id.copy_clip);
  copy_entry=(Button)findViewById(R.id.copy_entry);
  cancel=(Button)findViewById(R.id.cancel);
  copy_clip.setOnClickListener(copy_clip_listener);
  copy_entry.setOnClickListener(copy_entry_listener);
  cancel.setOnClickListener(cancel_listener);
}","public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  setContentView(R.layout.pass_gen);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"";
  setTitle(title);
  pass_view=(EditText)findViewById(R.id.pass_view);
  pass_len=(EditText)findViewById(R.id.pass_length);
  pass_upper=(CheckBox)findViewById(R.id.pass_upper);
  pass_lower=(CheckBox)findViewById(R.id.pass_lower);
  pass_num=(CheckBox)findViewById(R.id.pass_num);
  pass_symbol=(CheckBox)findViewById(R.id.pass_symbol);
  pass_view.setOnClickListener(update_click);
  pass_len.setOnKeyListener(update_key);
  pass_len.setOnFocusChangeListener(update_focus);
  pass_upper.setOnCheckedChangeListener(update_checked);
  pass_lower.setOnCheckedChangeListener(update_checked);
  pass_num.setOnCheckedChangeListener(update_checked);
  pass_symbol.setOnCheckedChangeListener(update_checked);
  copy_clip=(Button)findViewById(R.id.copy_clip);
  copy_entry=(Button)findViewById(R.id.copy_entry);
  cancel=(Button)findViewById(R.id.cancel);
  copy_clip.setOnClickListener(copy_clip_listener);
  copy_entry.setOnClickListener(copy_entry_listener);
  cancel.setOnClickListener(cancel_listener);
}",0.9696472518457752
187834,"@Override protected void onResume(){
  super.onResume();
  if (!CategoryList.isSignedIn()) {
    finish();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
}",0.9098360655737704
187835,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (!CategoryList.isSignedIn()) {
    finish();
  }
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  setContentView(R.layout.pass_list);
  CategoryId=icicle != null ? icicle.getLong(CategoryList.KEY_ID) : null;
  if (CategoryId == null) {
    Bundle extras=getIntent().getExtras();
    CategoryId=extras != null ? extras.getLong(CategoryList.KEY_ID) : null;
  }
  if (CategoryId < 1) {
    finish();
  }
  String categoryName=Passwords.getCategoryEntry(CategoryId).plainName;
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.passwords)+ ""String_Node_Str""+ categoryName;
  setTitle(title);
  fillData();
  final ListView list=getListView();
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  registerForContextMenu(list);
  sendBroadcast(restartTimerIntent);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  restartTimerIntent=new Intent(CryptoIntents.ACTION_RESTART_TIMER);
  setContentView(R.layout.pass_list);
  CategoryId=icicle != null ? icicle.getLong(CategoryList.KEY_ID) : null;
  if (CategoryId == null) {
    Bundle extras=getIntent().getExtras();
    CategoryId=extras != null ? extras.getLong(CategoryList.KEY_ID) : null;
  }
  if (CategoryId < 1) {
    finish();
    return;
  }
  String categoryName=Passwords.getCategoryEntry(CategoryId).plainName;
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.passwords)+ ""String_Node_Str""+ categoryName;
  setTitle(title);
  fillData();
  final ListView list=getListView();
  list.setFocusable(true);
  list.setOnCreateContextMenuListener(this);
  registerForContextMenu(list);
  sendBroadcast(restartTimerIntent);
}",0.9839924670433146
187836,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
}",0.9649122807017544
187837,"public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (!CategoryList.isSignedIn()) {
    finish();
  }
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.view_entry);
  setTitle(title);
  setContentView(R.layout.pass_view);
  descriptionText=(TextView)findViewById(R.id.description);
  websiteText=(TextView)findViewById(R.id.website);
  usernameText=(TextView)findViewById(R.id.username);
  passwordText=(TextView)findViewById(R.id.password);
  noteText=(TextView)findViewById(R.id.note);
  lastEditedText=(TextView)findViewById(R.id.last_edited);
  uniqueNameText=(TextView)findViewById(R.id.uniquename);
  packageAccessText=(TextView)findViewById(R.id.packageaccess);
  entryEdited=false;
  Button goButton=(Button)findViewById(R.id.go);
  RowId=icicle != null ? icicle.getLong(PassList.KEY_ID) : null;
  if (RowId == null) {
    Bundle extras=getIntent().getExtras();
    RowId=extras != null ? extras.getLong(PassList.KEY_ID) : null;
  }
  CategoryId=icicle != null ? icicle.getLong(PassList.KEY_CATEGORY_ID) : null;
  if (CategoryId == null) {
    Bundle extras=getIntent().getExtras();
    CategoryId=extras != null ? extras.getLong(PassList.KEY_CATEGORY_ID) : null;
  }
  populateFields();
  goButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      Toast.makeText(PassView.this,R.string.copy_to_clipboard,Toast.LENGTH_SHORT).show();
      ClipboardManager cb=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
      cb.setText(passwordText.getText().toString());
      Intent i=new Intent(Intent.ACTION_VIEW);
      String link=websiteText.getText().toString();
      Uri u=Uri.parse(link);
      i.setData(u);
      try {
        startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        u=Uri.parse(""String_Node_Str"" + link);
        i.setData(u);
        try {
          startActivity(i);
        }
 catch (        ActivityNotFoundException e2) {
          Toast.makeText(PassView.this,R.string.invalid_website,Toast.LENGTH_SHORT).show();
        }
      }
    }
  }
);
}","public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.view_entry);
  setTitle(title);
  setContentView(R.layout.pass_view);
  descriptionText=(TextView)findViewById(R.id.description);
  websiteText=(TextView)findViewById(R.id.website);
  usernameText=(TextView)findViewById(R.id.username);
  passwordText=(TextView)findViewById(R.id.password);
  noteText=(TextView)findViewById(R.id.note);
  lastEditedText=(TextView)findViewById(R.id.last_edited);
  uniqueNameText=(TextView)findViewById(R.id.uniquename);
  packageAccessText=(TextView)findViewById(R.id.packageaccess);
  entryEdited=false;
  Button goButton=(Button)findViewById(R.id.go);
  RowId=icicle != null ? icicle.getLong(PassList.KEY_ID) : null;
  if (RowId == null) {
    Bundle extras=getIntent().getExtras();
    RowId=extras != null ? extras.getLong(PassList.KEY_ID) : null;
  }
  CategoryId=icicle != null ? icicle.getLong(PassList.KEY_CATEGORY_ID) : null;
  if (CategoryId == null) {
    Bundle extras=getIntent().getExtras();
    CategoryId=extras != null ? extras.getLong(PassList.KEY_CATEGORY_ID) : null;
  }
  populateFields();
  goButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      Toast.makeText(PassView.this,R.string.copy_to_clipboard,Toast.LENGTH_SHORT).show();
      ClipboardManager cb=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
      cb.setText(passwordText.getText().toString());
      Intent i=new Intent(Intent.ACTION_VIEW);
      String link=websiteText.getText().toString();
      Uri u=Uri.parse(link);
      i.setData(u);
      try {
        startActivity(i);
      }
 catch (      ActivityNotFoundException e) {
        u=Uri.parse(""String_Node_Str"" + link);
        i.setData(u);
        try {
          startActivity(i);
        }
 catch (        ActivityNotFoundException e2) {
          Toast.makeText(PassView.this,R.string.invalid_website,Toast.LENGTH_SHORT).show();
        }
      }
    }
  }
);
}",0.9949656750572082
187838,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
}",0.9649122807017544
187839,"public static CategoryEntry getCategoryEntry(Long id){
  CategoryEntry catEntry=categoryEntries.get(id);
  if (catEntry.nameNeedsDecrypt) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    try {
      catEntry.plainName=ch.decrypt(catEntry.name);
    }
 catch (    CryptoHelperException e) {
      Log.e(TAG,e.toString());
    }
    catEntry.nameNeedsDecrypt=false;
    categoryEntries.put(id,catEntry);
  }
  return catEntry;
}","public static CategoryEntry getCategoryEntry(Long id){
  CategoryEntry catEntry=categoryEntries.get(id);
  if (catEntry == null) {
    return null;
  }
  if (catEntry.nameNeedsDecrypt) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    try {
      catEntry.plainName=ch.decrypt(catEntry.name);
    }
 catch (    CryptoHelperException e) {
      Log.e(TAG,e.toString());
    }
    catEntry.nameNeedsDecrypt=false;
    categoryEntries.put(id,catEntry);
  }
  return catEntry;
}",0.9484083424807904
187840,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.preferences);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (CategoryList.isSignedIn() == false) {
    finish();
    return;
  }
  addPreferencesFromResource(R.xml.preferences);
}",0.8021390374331551
187841,"@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  firstTime=icicle != null ? icicle.getBoolean(Restore.KEY_FIRST_TIME) : false;
  if (firstTime == false) {
    Bundle extras=getIntent().getExtras();
    firstTime=extras != null ? extras.getBoolean(Restore.KEY_FIRST_TIME) : false;
  }
  if ((!firstTime) && (!CategoryList.isSignedIn())) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
  }
  setContentView(R.layout.restore);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.restore);
  setTitle(title);
  if (filename == null) {
    filename=CategoryList.BACKUP_FILENAME;
  }
  TextView filenameText;
  filenameText=(TextView)findViewById(R.id.restore_filename);
  filenameText.setText(filename);
  TextView restoreInfoText;
  restoreInfoText=(TextView)findViewById(R.id.restore_info);
  EditText passwordText;
  passwordText=(EditText)findViewById(R.id.restore_password);
  Button restoreButton;
  restoreButton=(Button)findViewById(R.id.restore_button);
  if (!backupFileExists(filename)) {
    passwordText.setVisibility(0);
    restoreButton.setVisibility(0);
    restoreInfoText.setText(R.string.restore_no_file);
    return;
  }
  restoreInfoText.setText(R.string.restore_set_password);
  passwordText.setVisibility(1);
  restoreButton.setVisibility(1);
  restoreButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      EditText passwordText;
      passwordText=(EditText)findViewById(R.id.restore_password);
      String masterPassword=passwordText.getText().toString();
      read(filename,masterPassword);
    }
  }
);
}","@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  firstTime=icicle != null ? icicle.getBoolean(Restore.KEY_FIRST_TIME) : false;
  if (firstTime == false) {
    Bundle extras=getIntent().getExtras();
    firstTime=extras != null ? extras.getBoolean(Restore.KEY_FIRST_TIME) : false;
  }
  if ((!firstTime) && (CategoryList.isSignedIn() == false)) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
    return;
  }
  setContentView(R.layout.restore);
  String title=getResources().getString(R.string.app_name) + ""String_Node_Str"" + getResources().getString(R.string.restore);
  setTitle(title);
  if (filename == null) {
    filename=CategoryList.BACKUP_FILENAME;
  }
  TextView filenameText;
  filenameText=(TextView)findViewById(R.id.restore_filename);
  filenameText.setText(filename);
  TextView restoreInfoText;
  restoreInfoText=(TextView)findViewById(R.id.restore_info);
  EditText passwordText;
  passwordText=(EditText)findViewById(R.id.restore_password);
  Button restoreButton;
  restoreButton=(Button)findViewById(R.id.restore_button);
  if (!backupFileExists(filename)) {
    passwordText.setVisibility(0);
    restoreButton.setVisibility(0);
    restoreInfoText.setText(R.string.restore_no_file);
    return;
  }
  restoreInfoText.setText(R.string.restore_set_password);
  passwordText.setVisibility(1);
  restoreButton.setVisibility(1);
  restoreButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      EditText passwordText;
      passwordText=(EditText)findViewById(R.id.restore_password);
      String masterPassword=passwordText.getText().toString();
      read(filename,masterPassword);
    }
  }
);
}",0.9937888198757764
187842,"@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if ((!firstTime) && (!CategoryList.isSignedIn())) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
  }
}","@Override protected void onResume(){
  super.onResume();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if ((!firstTime) && (CategoryList.isSignedIn() == false)) {
    Intent frontdoor=new Intent(this,FrontDoor.class);
    startActivity(frontdoor);
    finish();
    return;
  }
}",0.9592592592592591
187843,"public void onNothingSelected(AdapterView arg0){
  fillItems();
}","public void onNothingSelected(AdapterView arg0){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
}",0.8024691358024691
187844,"/** 
 * Rename item from dialog.
 * @param price
 * @param tags
 * @return true if new list was renamed. False if new list was not renamed,because user has not given any name.
 */
private boolean updateItem(String newName,String tags,Long price){
  if (newName.equals(""String_Node_Str"")) {
    Toast.makeText(this,getString(R.string.please_enter_name),Toast.LENGTH_SHORT).show();
    return false;
  }
  String oldItemName=mCursorItems.getString(mStringItemsITEMNAME);
  String newItemName=newName;
  long itemId=mCursorItems.getLong(mStringItemsITEMID);
  Cursor cursor=getContentResolver().query(Shopping.Items.CONTENT_URI,Shopping.Items.PROJECTION,Shopping.Items._ID + ""String_Node_Str"",new String[]{""String_Node_Str"" + itemId},Shopping.Items.DEFAULT_SORT_ORDER);
  if (cursor != null && cursor.moveToNext()) {
    ContentValues values=new ContentValues();
    values.put(Items.NAME,newItemName);
    values.put(Items.TAGS,tags);
    if (price != null) {
      values.put(Items.PRICE,price);
    }
    getContentResolver().update(Uri.withAppendedPath(Items.CONTENT_URI,cursor.getString(0)),values,null,null);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  mCursorItems.requery();
  return true;
}","/** 
 * Rename item from dialog.
 * @param price
 * @param tags
 * @return true if new list was renamed. False if new list was not renamed,because user has not given any name.
 */
private boolean updateItem(String newName,String tags,Long price){
  Log.d(TAG,""String_Node_Str"");
  if (newName.equals(""String_Node_Str"")) {
    Toast.makeText(this,getString(R.string.please_enter_name),Toast.LENGTH_SHORT).show();
    return false;
  }
  mCursorItems.moveToPosition(mEditItemPosition);
  String oldItemName=mCursorItems.getString(mStringItemsITEMNAME);
  String newItemName=newName;
  dumpCursorItems();
  long itemId=mCursorItems.getLong(mStringItemsITEMID);
  Log.d(TAG,""String_Node_Str"" + mCursorItems.getPosition());
  Log.d(TAG,""String_Node_Str"" + mCursorItems.getString(mStringItemsITEMNAME));
  Log.d(TAG,""String_Node_Str"" + itemId);
  Cursor cursor=getContentResolver().query(Shopping.Items.CONTENT_URI,Shopping.Items.PROJECTION,Shopping.Items._ID + ""String_Node_Str"",new String[]{""String_Node_Str"" + itemId},Shopping.Items.DEFAULT_SORT_ORDER);
  if (cursor != null && cursor.moveToNext()) {
    ContentValues values=new ContentValues();
    values.put(Items.NAME,newItemName);
    values.put(Items.TAGS,tags);
    if (price != null) {
      values.put(Items.PRICE,price);
    }
    getContentResolver().update(Uri.withAppendedPath(Items.CONTENT_URI,cursor.getString(0)),values,null,null);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  mCursorItems.requery();
  return true;
}",0.8945022288261516
187845,"private void onModeChanged(){
  fillItems();
  if (mMode == MODE_IN_SHOP) {
    setTitle(getString(R.string.shopping_title,getCurrentListName()));
    registerSensor();
  }
 else {
    setTitle(getString(R.string.pick_items_titel,getCurrentListName()));
    unregisterSensor();
  }
}","private void onModeChanged(){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
  if (mMode == MODE_IN_SHOP) {
    setTitle(getString(R.string.shopping_title,getCurrentListName()));
    registerSensor();
  }
 else {
    setTitle(getString(R.string.pick_items_titel,getCurrentListName()));
    unregisterSensor();
  }
}",0.9464882943143812
187846,"private void fillItems(){
  long listId=getSelectedListId();
  if (listId < 0) {
    return;
  }
  mCursorItems=mListItems.fillItems(listId);
  startManagingCursor(mCursorItems);
  mCursorItems.moveToFirst();
}","private void fillItems(){
  Log.d(TAG,""String_Node_Str"");
  long listId=getSelectedListId();
  if (listId < 0) {
    return;
  }
  mCursorItems=mListItems.fillItems(listId);
  startManagingCursor(mCursorItems);
  dumpCursorItems();
  mCursorItems.moveToFirst();
  if (mEditItemPosition != -1) {
    Log.d(TAG,""String_Node_Str"" + mEditItemPosition);
    mCursorItems.moveToPosition(mEditItemPosition);
  }
}",0.6818181818181818
187847,"/** 
 * Edit item 
 */
void editItem(int position){
  mCursorItems.moveToPosition(position);
  showListDialog(MENU_EDIT_ITEM);
}","/** 
 * Edit item 
 */
void editItem(int position){
  Log.d(TAG,""String_Node_Str"" + position);
  mCursorItems.moveToPosition(position);
  mEditItemPosition=position;
  showListDialog(MENU_EDIT_ITEM);
}",0.7781155015197568
187848,"/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      fillItems();
      mListItems.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      fillItems();
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItems=(ShoppingListView)findViewById(R.id.list_items);
  mListItems.setThemedBackground(findViewById(R.id.background));
  mListItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItems.toggleItemBought(pos);
      }
    }
  }
);
  mListItems.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('2','e');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}","/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
      mListItems.setListTheme(loadListTheme());
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      Log.d(TAG,""String_Node_Str"");
      fillItems();
    }
  }
);
  mEditText=(AutoCompleteTextView)findViewById(R.id.autocomplete_add_item);
  mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},null,null,""String_Node_Str"");
  SimpleCursorAdapter adapter=new SimpleCursorAdapter(this,android.R.layout.simple_dropdown_item_1line,mItemsCursor,new String[]{Items.NAME},new int[]{android.R.id.text1});
  adapter.setStringConversionColumn(1);
  adapter.setFilterQueryProvider(new FilterQueryProvider(){
    public Cursor runQuery(    CharSequence constraint){
      mItemsCursor=managedQuery(Items.CONTENT_URI,new String[]{Items._ID,Items.NAME},""String_Node_Str"" + (constraint == null ? ""String_Node_Str"" : constraint.toString().toUpperCase()) + ""String_Node_Str"",null,""String_Node_Str"");
      return mItemsCursor;
    }
  }
);
  mEditText.setAdapter(adapter);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      Log.i(TAG,""String_Node_Str"" + key.getAction());
      Log.i(TAG,""String_Node_Str"" + keyCode);
      if (key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItems=(ShoppingListView)findViewById(R.id.list_items);
  mListItems.setThemedBackground(findViewById(R.id.background));
  mListItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        mListItems.toggleItemBought(pos);
      }
    }
  }
);
  mListItems.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.menu_mark_item).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.menu_edit_item).setShortcut('2','e');
      contextmenu.add(0,MENU_REMOVE_ITEM_FROM_LIST,0,R.string.menu_remove_item).setShortcut('3','r');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.menu_delete_item).setShortcut('4','d');
    }
  }
);
}",0.9885568976478069
187849,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setContentView(R.layout.shopping);
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=initFromPreferences();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action == null) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_MAIN.equals(action)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(this,intent.getData().getLastPathSegment());
    }
 else     if (intent.getData() != null) {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(getApplicationContext(),intent.getData().getLastPathSegment());
    }
 else     if (intent.getData() != null) {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  createView();
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setTextKeepState(prevText);
    }
    mTextEntryMenu=icicle.getInt(BUNDLE_TEXT_ENTRY_MENU);
  }
  mEditText.requestFocus();
  initFromPreferences();
  onModeChanged();
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setContentView(R.layout.shopping);
  mEditItemPosition=-1;
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=initFromPreferences();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action == null) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_MAIN.equals(action)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(this,intent.getData().getLastPathSegment());
    }
 else     if (intent.getData() != null) {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(getApplicationContext(),intent.getData().getLastPathSegment());
    }
 else     if (intent.getData() != null) {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  createView();
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setTextKeepState(prevText);
    }
    mTextEntryMenu=icicle.getInt(BUNDLE_TEXT_ENTRY_MENU);
    mEditItemPosition=icicle.getInt(BUNDLE_CURSOR_ITEMS_POSITION);
  }
  mEditText.requestFocus();
  initFromPreferences();
  onModeChanged();
}",0.9829811109033104
187850,"public void onItemSelected(AdapterView parent,View v,int position,long id){
  fillItems();
  mListItems.setListTheme(loadListTheme());
  bindGTalkIfNeeded();
}","public void onItemSelected(AdapterView parent,View v,int position,long id){
  Log.d(TAG,""String_Node_Str"");
  fillItems();
  mListItems.setListTheme(loadListTheme());
  bindGTalkIfNeeded();
}",0.9085714285714286
187851,"@Override protected Dialog onCreateDialog(int id){
  if (debug)   Log.d(TAG,""String_Node_Str"" + mTextEntryMenu);
switch (id) {
case DIALOG_ABOUT:
    return new AboutDialog(this);
case DIALOG_TEXT_ENTRY:
  LayoutInflater factory=LayoutInflater.from(this);
final View textEntryView=factory.inflate(R.layout.input_box,null);
final Dialog dlg=new AlertDialog.Builder(this).setIcon(android.R.drawable.ic_menu_edit).setTitle(R.string.ask_new_list).setView(textEntryView).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
  dialog.dismiss();
  doTextEntryDialogAction(mTextEntryMenu,(Dialog)dialog);
}
}
).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
  dialog.cancel();
}
}
).create();
EditText et=(EditText)textEntryView.findViewById(R.id.edittext);
et.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
et.setOnKeyListener(new OnKeyListener(){
public boolean onKey(final View v,final int keyCode,final KeyEvent key){
if (mTextEntryMenu != MENU_EDIT_ITEM && key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
doTextEntryDialogAction(mTextEntryMenu,dlg);
return true;
}
return false;
}
}
);
prepareTextDialog(dlg,textEntryView);
return dlg;
}
return null;
}","@Override protected Dialog onCreateDialog(int id){
  if (debug)   Log.d(TAG,""String_Node_Str"" + mTextEntryMenu);
switch (id) {
case DIALOG_ABOUT:
    return new AboutDialog(this);
case DIALOG_TEXT_ENTRY:
  LayoutInflater factory=LayoutInflater.from(this);
final View textEntryView=factory.inflate(R.layout.input_box,null);
final Dialog dlg=new AlertDialog.Builder(this).setIcon(android.R.drawable.ic_menu_edit).setTitle(R.string.ask_new_list).setView(textEntryView).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
  dialog.dismiss();
  doTextEntryDialogAction(mTextEntryMenu,(Dialog)dialog);
}
}
).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
public void onClick(DialogInterface dialog,int whichButton){
  dialog.cancel();
}
}
).create();
EditText et=(EditText)textEntryView.findViewById(R.id.edittext);
et.setKeyListener(PreferenceActivity.getCapitalizationKeyListenerFromPrefs(getApplicationContext()));
et.setOnKeyListener(new OnKeyListener(){
public boolean onKey(final View v,final int keyCode,final KeyEvent key){
if (mTextEntryMenu != MENU_EDIT_ITEM && key.getAction() == KeyEvent.ACTION_DOWN && keyCode == KeyEvent.KEYCODE_ENTER) {
doTextEntryDialogAction(mTextEntryMenu,dlg);
return true;
}
return false;
}
}
);
prepareTextDialog(dlg,textEntryView);
dlg.setOnDismissListener(new Dialog.OnDismissListener(){
@Override public void onDismiss(DialogInterface dialog){
Log.i(TAG,""String_Node_Str"");
mEditItemPosition=-1;
}
}
);
return dlg;
}
return null;
}",0.9261880687563196
187852,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  Log.i(TAG,""String_Node_Str"");
  String s=mEditText.getText().toString();
  outState.putString(ORIGINAL_ITEM,s);
  outState.putInt(BUNDLE_TEXT_ENTRY_MENU,mTextEntryMenu);
  mUpdating=false;
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  Log.i(TAG,""String_Node_Str"");
  String s=mEditText.getText().toString();
  outState.putString(ORIGINAL_ITEM,s);
  outState.putInt(BUNDLE_TEXT_ENTRY_MENU,mTextEntryMenu);
  int pos=mEditItemPosition;
  Log.d(TAG,""String_Node_Str"" + pos);
  outState.putInt(BUNDLE_CURSOR_ITEMS_POSITION,pos);
  mUpdating=false;
}",0.8305084745762712
187853,"public void onResume(){
  registerContentObserver();
}","public void onResume(){
}",0.6329113924050633
187854,"public void process(byte[] inbuf,int inOfs,byte[] outbuf,int outOfs,int len) throws ESJException {
  int s11=s[0];
  int s12=s[1];
  int s13=s[2];
  int s21=s[3];
  int s22=s[4];
  int s23=s[5];
  int s31=s[6];
  int s32=s[7];
  int s33=s[8];
  int s34=s[9];
  int outEnd=outOfs + (len & ~3);
  for (; outOfs < outEnd; outOfs+=4, inOfs+=4) {
    int t1, t2, t3, reg;
    t1=((s13 << 96 - 66) | (s12 >>> 66 - 64)) ^ ((s13 << 96 - 93) | (s12 >>> 93 - 64));
    t2=((s23 << 96 - 69) | (s22 >>> 69 - 64)) ^ ((s23 << 96 - 84) | (s22 >>> 84 - 64));
    t3=((s33 << 96 - 66) | (s32 >>> 66 - 64)) ^ ((s34 << 128 - 111) | (s33 >>> 111 - 96));
    reg=t1 ^ t2 ^ t3;
    outbuf[outOfs]=(byte)(inbuf[inOfs] ^ reg);
    outbuf[outOfs + 1]=(byte)(inbuf[inOfs + 1] ^ reg >> 8);
    outbuf[outOfs + 2]=(byte)(inbuf[inOfs + 2] ^ reg >> 16);
    outbuf[outOfs + 3]=(byte)(inbuf[inOfs + 3] ^ reg >> 24);
    t1^=(((s13 << 96 - 91) | (s12 >>> 91 - 64)) & ((s13 << 96 - 92) | (s12 >>> 92 - 64))) ^ ((s23 << 96 - 78) | (s22 >>> 78 - 64));
    t2^=(((s23 << 96 - 82) | (s22 >>> 82 - 64)) & ((s23 << 96 - 83) | (s22 >>> 83 - 64))) ^ ((s33 << 96 - 87) | (s32 >>> 87 - 64));
    t3^=(((s34 << 128 - 109) | (s33 >>> 109 - 96)) & ((s34 << 128 - 110) | (s33 >>> 110 - 96))) ^ ((s13 << 96 - 69) | (s12 >>> 69 - 64));
    s13=s12;
    s12=s11;
    s11=t3;
    s23=s22;
    s22=s21;
    s21=t1;
    s34=s33;
    s33=s32;
    s32=s31;
    s31=t2;
  }
  outEnd=outOfs + (len & 3);
  if (0 < outEnd) {
    int t1, t2, t3, reg;
    t1=((s13 << 96 - 66) | (s12 >>> 66 - 64)) ^ ((s13 << 96 - 93) | (s12 >>> 93 - 64));
    t2=((s23 << 96 - 69) | (s22 >>> 69 - 64)) ^ ((s23 << 96 - 84) | (s22 >>> 84 - 64));
    t3=((s33 << 96 - 66) | (s32 >>> 66 - 64)) ^ ((s34 << 128 - 111) | (s33 >>> 111 - 96));
    reg=t1 ^ t2 ^ t3;
    for (; outOfs < outEnd; outOfs++, inOfs++) {
      outbuf[outOfs]=(byte)(inbuf[inOfs] ^ reg);
      reg>>=8;
    }
    t1^=(((s13 << 96 - 91) | (s12 >>> 91 - 64)) & ((s13 << 96 - 92) | (s12 >>> 92 - 64))) ^ ((s23 << 96 - 78) | (s22 >>> 78 - 64));
    t2^=(((s23 << 96 - 82) | (s22 >>> 82 - 64)) & ((s23 << 96 - 83) | (s22 >>> 83 - 64))) ^ ((s33 << 96 - 87) | (s32 >>> 87 - 64));
    t3^=(((s34 << 128 - 109) | (s33 >>> 109 - 96)) & ((s34 << 128 - 110) | (s33 >>> 110 - 96))) ^ ((s13 << 96 - 69) | (s12 >>> 69 - 64));
    s13=s12;
    s12=s11;
    s11=t3;
    s23=s22;
    s22=s21;
    s21=t1;
    s34=s33;
    s33=s32;
    s32=s31;
    s31=t2;
  }
  s[0]=s11;
  s[1]=s12;
  s[2]=s13;
  s[3]=s21;
  s[4]=s22;
  s[5]=s23;
  s[6]=s31;
  s[7]=s32;
  s[8]=s33;
  s[9]=s34;
}","public void process(byte[] inbuf,int inOfs,byte[] outbuf,int outOfs,int len) throws ESJException {
  int s11=s[0];
  int s12=s[1];
  int s13=s[2];
  int s21=s[3];
  int s22=s[4];
  int s23=s[5];
  int s31=s[6];
  int s32=s[7];
  int s33=s[8];
  int s34=s[9];
  int outEnd=outOfs + (len & ~3);
  for (; outOfs < outEnd; outOfs+=4, inOfs+=4) {
    int t1, t2, t3, reg;
    t1=((s13 << 96 - 66) | (s12 >>> 66 - 64)) ^ ((s13 << 96 - 93) | (s12 >>> 93 - 64));
    t2=((s23 << 96 - 69) | (s22 >>> 69 - 64)) ^ ((s23 << 96 - 84) | (s22 >>> 84 - 64));
    t3=((s33 << 96 - 66) | (s32 >>> 66 - 64)) ^ ((s34 << 128 - 111) | (s33 >>> 111 - 96));
    reg=t1 ^ t2 ^ t3;
    outbuf[outOfs]=(byte)(inbuf[inOfs] ^ reg);
    outbuf[outOfs + 1]=(byte)(inbuf[inOfs + 1] ^ reg >> 8);
    outbuf[outOfs + 2]=(byte)(inbuf[inOfs + 2] ^ reg >> 16);
    outbuf[outOfs + 3]=(byte)(inbuf[inOfs + 3] ^ reg >> 24);
    t1^=(((s13 << 96 - 91) | (s12 >>> 91 - 64)) & ((s13 << 96 - 92) | (s12 >>> 92 - 64))) ^ ((s23 << 96 - 78) | (s22 >>> 78 - 64));
    t2^=(((s23 << 96 - 82) | (s22 >>> 82 - 64)) & ((s23 << 96 - 83) | (s22 >>> 83 - 64))) ^ ((s33 << 96 - 87) | (s32 >>> 87 - 64));
    t3^=(((s34 << 128 - 109) | (s33 >>> 109 - 96)) & ((s34 << 128 - 110) | (s33 >>> 110 - 96))) ^ ((s13 << 96 - 69) | (s12 >>> 69 - 64));
    s13=s12;
    s12=s11;
    s11=t3;
    s23=s22;
    s22=s21;
    s21=t1;
    s34=s33;
    s33=s32;
    s32=s31;
    s31=t2;
  }
  outEnd=outOfs + (len & 3);
  if (outOfs < outEnd) {
    int t1, t2, t3, reg;
    t1=((s13 << 96 - 66) | (s12 >>> 66 - 64)) ^ ((s13 << 96 - 93) | (s12 >>> 93 - 64));
    t2=((s23 << 96 - 69) | (s22 >>> 69 - 64)) ^ ((s23 << 96 - 84) | (s22 >>> 84 - 64));
    t3=((s33 << 96 - 66) | (s32 >>> 66 - 64)) ^ ((s34 << 128 - 111) | (s33 >>> 111 - 96));
    reg=t1 ^ t2 ^ t3;
    for (; outOfs < outEnd; outOfs++, inOfs++) {
      outbuf[outOfs]=(byte)(inbuf[inOfs] ^ reg);
      reg>>=8;
    }
    t1^=(((s13 << 96 - 91) | (s12 >>> 91 - 64)) & ((s13 << 96 - 92) | (s12 >>> 92 - 64))) ^ ((s23 << 96 - 78) | (s22 >>> 78 - 64));
    t2^=(((s23 << 96 - 82) | (s22 >>> 82 - 64)) & ((s23 << 96 - 83) | (s22 >>> 83 - 64))) ^ ((s33 << 96 - 87) | (s32 >>> 87 - 64));
    t3^=(((s34 << 128 - 109) | (s33 >>> 109 - 96)) & ((s34 << 128 - 110) | (s33 >>> 110 - 96))) ^ ((s13 << 96 - 69) | (s12 >>> 69 - 64));
    s13=s12;
    s12=s11;
    s11=t3;
    s23=s22;
    s22=s21;
    s21=t1;
    s34=s33;
    s33=s32;
    s32=s31;
    s31=t2;
  }
  s[0]=s11;
  s[1]=s12;
  s[2]=s13;
  s[3]=s21;
  s[4]=s22;
  s[5]=s23;
  s[6]=s31;
  s[7]=s32;
  s[8]=s33;
  s[9]=s34;
}",0.998630940739292
187855,"/** 
 * encrypt a string using a random session key
 * @author Peli
 * @param plaintext
 * @return encrypted String
 * @throws Exception
 */
public Uri encryptFileWithSessionKey(ContentResolver contentResolver,Uri fileUri) throws CryptoHelperException {
  Log.i(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  String outputPath=""String_Node_Str"";
  try {
    InputStream is;
    if (fileUri.getScheme().equals(""String_Node_Str"")) {
      is=new java.io.FileInputStream(fileUri.getPath());
      outputPath=fileUri.getPath() + ""String_Node_Str"";
    }
 else {
      is=contentResolver.openInputStream(fileUri);
      outputPath=Environment.getExternalStorageDirectory().toString() + ""String_Node_Str"";
    }
    FileOutputStream os=new FileOutputStream(outputPath);
    byte[] cipherSessionKey={};
    byte[] ciphertext={};
    SecretKey sessionKey=null;
    byte[] sessionKeyEncoded=null;
    String sessionKeyString=null;
    try {
      KeyGenerator keygen;
      keygen=KeyGenerator.getInstance(""String_Node_Str"");
      keygen.init(256);
      sessionKey=keygen.generateKey();
      sessionKeyEncoded=sessionKey.getEncoded();
      sessionKeyString=new String(sessionKeyEncoded);
    }
 catch (    NoSuchAlgorithmException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    try {
      pbeCipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParamSpec);
      cipherSessionKey=pbeCipher.doFinal(sessionKeyEncoded);
    }
 catch (    IllegalBlockSizeException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    BadPaddingException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidKeyException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidAlgorithmParameterException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    String stringCipherVersion=""String_Node_Str"";
    byte[] bytesCipherVersion=stringCipherVersion.getBytes();
    os.write(bytesCipherVersion,0,bytesCipherVersion.length);
    os.write(cipherSessionKey,0,cipherSessionKey.length);
    Log.d(TAG,""String_Node_Str"" + bytesCipherVersion.length);
    Log.d(TAG,""String_Node_Str"" + cipherSessionKey.length);
    Trivium tri=new Trivium();
    try {
      tri.setupKey(Trivium.MODE_ENCRYPT,sessionKeyEncoded,0);
      tri.setupNonce(sessionKeyEncoded,10);
      final int bytesLen=4096;
      byte[] bytesIn=new byte[bytesLen];
      byte[] bytesOut=new byte[bytesLen];
      int offset=0;
      int numRead=0;
      while ((numRead=is.read(bytesIn,0,bytesLen)) >= 0) {
        if ((numRead | 3) != 0) {
          Log.d(TAG,""String_Node_Str"" + numRead);
        }
        tri.process(bytesIn,0,bytesOut,0,numRead);
        os.write(bytesOut,0,numRead);
        offset+=numRead;
      }
      if (offset < is.available()) {
        throw new IOException(""String_Node_Str"");
      }
      is.close();
      os.close();
    }
 catch (    ESJException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return Uri.parse(""String_Node_Str"" + outputPath);
}","/** 
 * encrypt a string using a random session key
 * @author Peli
 * @param plaintext
 * @return encrypted String
 * @throws Exception
 */
public Uri encryptFileWithSessionKey(ContentResolver contentResolver,Uri fileUri) throws CryptoHelperException {
  Log.i(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  String outputPath=""String_Node_Str"";
  try {
    InputStream is;
    if (fileUri.getScheme().equals(""String_Node_Str"")) {
      is=new java.io.FileInputStream(fileUri.getPath());
      outputPath=fileUri.getPath() + ""String_Node_Str"";
    }
 else {
      is=contentResolver.openInputStream(fileUri);
      outputPath=Environment.getExternalStorageDirectory().toString() + ""String_Node_Str"";
    }
    FileOutputStream os=new FileOutputStream(outputPath);
    byte[] cipherSessionKey={};
    byte[] ciphertext={};
    SecretKey sessionKey=null;
    byte[] sessionKeyEncoded=null;
    String sessionKeyString=null;
    try {
      KeyGenerator keygen;
      keygen=KeyGenerator.getInstance(""String_Node_Str"");
      keygen.init(256);
      sessionKey=keygen.generateKey();
      sessionKeyEncoded=sessionKey.getEncoded();
      sessionKeyString=new String(sessionKeyEncoded);
    }
 catch (    NoSuchAlgorithmException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    try {
      pbeCipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParamSpec);
      cipherSessionKey=pbeCipher.doFinal(sessionKeyEncoded);
    }
 catch (    IllegalBlockSizeException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    BadPaddingException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidKeyException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidAlgorithmParameterException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    String stringCipherVersion=""String_Node_Str"";
    byte[] bytesCipherVersion=stringCipherVersion.getBytes();
    os.write(bytesCipherVersion,0,bytesCipherVersion.length);
    os.write(cipherSessionKey,0,cipherSessionKey.length);
    Log.d(TAG,""String_Node_Str"" + bytesCipherVersion.length);
    Log.d(TAG,""String_Node_Str"" + cipherSessionKey.length);
    Trivium tri=new Trivium();
    try {
      tri.setupKey(Trivium.MODE_ENCRYPT,sessionKeyEncoded,0);
      tri.setupNonce(sessionKeyEncoded,10);
      final int bytesLen=4096;
      byte[] bytesIn=new byte[bytesLen];
      byte[] bytesOut=new byte[bytesLen];
      int offset=0;
      int numRead=0;
      while ((numRead=is.read(bytesIn,0,bytesLen)) >= 0) {
        if ((numRead & 3) != 0) {
          Log.d(TAG,""String_Node_Str"" + numRead + ""String_Node_Str""+ (numRead | 3));
        }
        tri.process(bytesIn,0,bytesOut,0,numRead);
        os.write(bytesOut,0,numRead);
        offset+=numRead;
      }
      if (offset < is.available()) {
        throw new IOException(""String_Node_Str"");
      }
      is.close();
      os.close();
    }
 catch (    ESJException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return Uri.parse(""String_Node_Str"" + outputPath);
}",0.9943640517897944
187856,"/** 
 * unencrypt encrypted string previously encrypted with encryptWithSessionKey()
 * @author Peli
 * @param ciphertext
 * @return decrypted String
 * @throws Exception
 */
public Uri decryptFileWithSessionKey(ContentResolver contentResolver,Uri fileUri) throws CryptoHelperException {
  Log.d(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  String outputPath=""String_Node_Str"";
  try {
    InputStream is;
    if (fileUri.getScheme().equals(""String_Node_Str"")) {
      is=new java.io.FileInputStream(fileUri.getPath());
      String encryptedFile=fileUri.getPath();
      outputPath=fileUri.getPath() + ""String_Node_Str"";
      if (encryptedFile.endsWith(""String_Node_Str"")) {
        outputPath=encryptedFile.substring(0,encryptedFile.length() - 7);
      }
      Log.d(TAG,""String_Node_Str"" + fileUri.getPath());
      Log.d(TAG,""String_Node_Str"" + outputPath);
    }
 else {
      is=contentResolver.openInputStream(fileUri);
      outputPath=Environment.getExternalStorageDirectory().toString() + ""String_Node_Str"";
    }
    FileOutputStream os=new FileOutputStream(outputPath);
    int numReadTotal=0;
    int numRead=0;
    byte[] byteCipherVersion=new byte[1];
    while ((numRead=is.read(byteCipherVersion,numRead,byteCipherVersion.length - numRead)) >= 0 && numReadTotal < byteCipherVersion.length) {
      Log.d(TAG,""String_Node_Str"" + numRead);
      numReadTotal+=numRead;
    }
    String cipherVersion=new String(byteCipherVersion);
    byte[] byteCipherSessionKey=null;
    try {
      Log.d(TAG,""String_Node_Str"" + cipherVersion);
      if (cipherVersion.equals(""String_Node_Str"")) {
        numRead=0;
        numReadTotal=0;
        byteCipherSessionKey=new byte[48];
        while ((numRead=is.read(byteCipherSessionKey,numRead,byteCipherSessionKey.length - numRead)) >= 0 && numReadTotal < byteCipherSessionKey.length) {
          Log.d(TAG,""String_Node_Str"" + numRead);
          numReadTotal+=numRead;
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"" + cipherVersion);
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    byte[] byteSessionKey={};
    try {
      pbeCipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParamSpec);
      byteSessionKey=pbeCipher.doFinal(byteCipherSessionKey);
      status=true;
    }
 catch (    IllegalBlockSizeException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    BadPaddingException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidKeyException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidAlgorithmParameterException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    Trivium tri=new Trivium();
    try {
      tri.setupKey(Trivium.MODE_DECRYPT,byteSessionKey,0);
      tri.setupNonce(byteSessionKey,10);
      final int bytesLen=4096;
      byte[] bytesIn=new byte[bytesLen];
      byte[] bytesOut=new byte[bytesLen];
      int offset=0;
      numRead=0;
      while ((numRead=is.read(bytesIn,0,bytesLen)) >= 0) {
        if ((numRead | 3) != 0) {
          Log.d(TAG,""String_Node_Str"" + numRead);
        }
        tri.process(bytesIn,0,bytesOut,0,numRead);
        os.write(bytesOut,0,numRead);
        offset+=numRead;
      }
      if (offset < is.available()) {
        throw new IOException(""String_Node_Str"");
      }
      is.close();
      os.close();
    }
 catch (    ESJException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return Uri.parse(""String_Node_Str"" + outputPath);
}","/** 
 * unencrypt encrypted string previously encrypted with encryptWithSessionKey()
 * @author Peli
 * @param ciphertext
 * @return decrypted String
 * @throws Exception
 */
public Uri decryptFileWithSessionKey(ContentResolver contentResolver,Uri fileUri) throws CryptoHelperException {
  Log.d(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  String outputPath=""String_Node_Str"";
  try {
    InputStream is;
    if (fileUri.getScheme().equals(""String_Node_Str"")) {
      is=new java.io.FileInputStream(fileUri.getPath());
      String encryptedFile=fileUri.getPath();
      outputPath=fileUri.getPath() + ""String_Node_Str"";
      if (encryptedFile.endsWith(""String_Node_Str"")) {
        outputPath=encryptedFile.substring(0,encryptedFile.length() - 7);
      }
      Log.d(TAG,""String_Node_Str"" + fileUri.getPath());
      Log.d(TAG,""String_Node_Str"" + outputPath);
    }
 else {
      is=contentResolver.openInputStream(fileUri);
      outputPath=Environment.getExternalStorageDirectory().toString() + ""String_Node_Str"";
    }
    FileOutputStream os=new FileOutputStream(outputPath);
    int numReadTotal=0;
    int numRead=0;
    byte[] byteCipherVersion=new byte[1];
    while ((numRead=is.read(byteCipherVersion,numRead,byteCipherVersion.length - numRead)) >= 0 && numReadTotal < byteCipherVersion.length) {
      Log.d(TAG,""String_Node_Str"" + numRead);
      numReadTotal+=numRead;
    }
    String cipherVersion=new String(byteCipherVersion);
    byte[] byteCipherSessionKey=null;
    try {
      Log.d(TAG,""String_Node_Str"" + cipherVersion);
      if (cipherVersion.equals(""String_Node_Str"")) {
        numRead=0;
        numReadTotal=0;
        byteCipherSessionKey=new byte[48];
        while ((numRead=is.read(byteCipherSessionKey,numRead,byteCipherSessionKey.length - numRead)) >= 0 && numReadTotal < byteCipherSessionKey.length) {
          Log.d(TAG,""String_Node_Str"" + numRead);
          numReadTotal+=numRead;
        }
      }
 else {
        Log.e(TAG,""String_Node_Str"" + cipherVersion);
        return null;
      }
    }
 catch (    IndexOutOfBoundsException e) {
      Log.e(TAG,""String_Node_Str"");
      return null;
    }
    byte[] byteSessionKey={};
    try {
      pbeCipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParamSpec);
      byteSessionKey=pbeCipher.doFinal(byteCipherSessionKey);
      status=true;
    }
 catch (    IllegalBlockSizeException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    BadPaddingException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidKeyException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
catch (    InvalidAlgorithmParameterException e) {
      Log.e(TAG,""String_Node_Str"" + e.toString());
    }
    Trivium tri=new Trivium();
    try {
      tri.setupKey(Trivium.MODE_DECRYPT,byteSessionKey,0);
      tri.setupNonce(byteSessionKey,10);
      final int bytesLen=4096;
      byte[] bytesIn=new byte[bytesLen];
      byte[] bytesOut=new byte[bytesLen];
      int offset=0;
      numRead=0;
      while ((numRead=is.read(bytesIn,0,bytesLen)) >= 0) {
        if ((numRead & 3) != 0) {
          Log.d(TAG,""String_Node_Str"" + numRead);
        }
        tri.process(bytesIn,0,bytesOut,0,numRead);
        os.write(bytesOut,0,numRead);
        offset+=numRead;
      }
      if (offset < is.available()) {
        throw new IOException(""String_Node_Str"");
      }
      is.close();
      os.close();
    }
 catch (    ESJException e) {
      Log.e(TAG,""String_Node_Str"",e);
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
catch (  IOException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
  return Uri.parse(""String_Node_Str"" + outputPath);
}",0.9997374639012864
187857,"void saveTags(){
  if (mTextView == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  String tags=mTextView.getText().toString();
  if (mEncrypted == 0) {
    ContentValues values=new ContentValues(1);
    values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
    values.put(Notes.TAGS,tags);
    mContext.getContentResolver().update(mUri,values,null,null);
    mContext.getContentResolver().notifyChange(mUri,null);
  }
 else {
    Intent i=new Intent(mContext,EncryptActivity.class);
    i.putExtra(NotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
    i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(null,null,tags));
    i.putExtra(NotePadIntents.EXTRA_URI,mUri.toString());
    mContext.startActivity(i);
  }
}","void saveTags(){
  if (mTextView == null) {
    Log.e(TAG,""String_Node_Str"");
    return;
  }
  String tags=mTextView.getText().toString();
  if (mEncrypted == 0) {
    ContentValues values=new ContentValues(2);
    values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
    values.put(Notes.TAGS,tags);
    mContext.getContentResolver().update(mUri,values,null,null);
    mContext.getContentResolver().notifyChange(mUri,null);
  }
 else {
    Intent i=new Intent(mContext,EncryptActivity.class);
    i.putExtra(NotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
    i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(null,null,tags));
    i.putExtra(NotePadIntents.EXTRA_URI,mUri.toString());
    mContext.startActivity(i);
  }
}",0.9987029831387808
187858,"@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  String tags=savedInstanceState.getString(BUNDLE_TAGS);
}","@Override public void onRestoreInstanceState(Bundle savedInstanceState){
  super.onRestoreInstanceState(savedInstanceState);
  mUri=Uri.parse(savedInstanceState.getString(BUNDLE_URI));
  mEncrypted=savedInstanceState.getLong(BUNDLE_ENCRYPTED);
}",0.7897196261682243
187859,"@Override public Bundle onSaveInstanceState(){
  Bundle state=super.onSaveInstanceState();
  state.putString(BUNDLE_TAGS,""String_Node_Str"");
  return state;
}","@Override public Bundle onSaveInstanceState(){
  Bundle state=super.onSaveInstanceState();
  state.putString(BUNDLE_URI,mUri.toString());
  state.putLong(BUNDLE_ENCRYPTED,mEncrypted);
  return state;
}",0.7688022284122563
187860,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mServiceIntent=null;
  mPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  initService();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mServiceIntent=null;
  mPreferences=PreferenceManager.getDefaultSharedPreferences(this);
}",0.9629629629629628
187861,"public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  if (mServiceIntent != null) {
    setServiceParametersFromExtrasAndDispatchAction(mServiceIntent);
    mServiceIntent=null;
    return;
  }
  boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
  if (debug)   Log.d(TAG,""String_Node_Str"" + promptforpassword);
  try {
    if (service.getPassword() == null) {
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  if (mServiceIntent != null) {
    setServiceParametersFromExtrasAndDispatchAction(mServiceIntent);
    mServiceIntent=null;
    return;
  }
  try {
    if (service.getPassword() == null) {
      boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
      if (debug)       Log.d(TAG,""String_Node_Str"" + promptforpassword);
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.9672424061941632
187862,"@Override protected void onResume(){
  super.onPause();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (dbHelper == null) {
    dbHelper=new DBHelper(this);
  }
}","@Override protected void onResume(){
  super.onPause();
  if (debug)   Log.d(TAG,""String_Node_Str"");
  if (dbHelper == null) {
    dbHelper=new DBHelper(this);
  }
  initService();
}",0.9510086455331412
187863,"@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  menu.setHeaderTitle(cursor.getString(NotesListCursor.COLUMN_INDEX_TITLE));
  menu.add(0,MENU_ITEM_SEND_BY_EMAIL,0,R.string.menu_send_by_email);
  menu.add(0,MENU_ITEM_EDIT_TAGS,0,R.string.menu_edit_tags);
  menu.add(0,MENU_ITEM_SAVE,0,R.string.menu_save_to_sdcard);
  long encrypted=cursor.getLong(NotesListCursor.COLUMN_INDEX_ENCRYPTED);
  if (encrypted <= 0) {
    menu.add(0,MENU_ITEM_ENCRYPT,0,R.string.menu_encrypt);
  }
 else {
    menu.add(0,MENU_ITEM_UNENCRYPT,0,R.string.menu_undo_encryption);
  }
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_delete);
}","@Override public void onCreateContextMenu(ContextMenu menu,View view,ContextMenuInfo menuInfo){
  AdapterView.AdapterContextMenuInfo info;
  try {
    info=(AdapterView.AdapterContextMenuInfo)menuInfo;
  }
 catch (  ClassCastException e) {
    Log.e(TAG,""String_Node_Str"",e);
    return;
  }
  Cursor cursor=(Cursor)getListAdapter().getItem(info.position);
  if (cursor == null) {
    return;
  }
  long encrypted=cursor.getLong(NotesListCursor.COLUMN_INDEX_ENCRYPTED);
  menu.setHeaderTitle(cursor.getString(NotesListCursor.COLUMN_INDEX_TITLE));
  menu.add(0,MENU_ITEM_EDIT_TAGS,0,R.string.menu_edit_tags);
  if (encrypted == 0) {
    menu.add(0,MENU_ITEM_SEND_BY_EMAIL,0,R.string.menu_send_by_email);
    menu.add(0,MENU_ITEM_SAVE,0,R.string.menu_save_to_sdcard);
    menu.add(0,MENU_ITEM_ENCRYPT,0,R.string.menu_encrypt);
  }
 else {
    menu.add(0,MENU_ITEM_UNENCRYPT,0,R.string.menu_undo_encryption);
  }
  menu.add(0,MENU_ITEM_DELETE,0,R.string.menu_delete);
}",0.6742738589211619
187864,"@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (dbHelper == null) {
    dbHelper=new DBHelper(this);
  }
  if (((requestCode == REQUEST_VIEW_PASSWORD) && (PassView.entryEdited)) || ((requestCode == REQUEST_EDIT_PASSWORD) && (PassEdit.entryEdited)) || (resultCode == RESULT_OK)) {
    fillData();
  }
}","@Override protected void onActivityResult(int requestCode,int resultCode,Intent i){
  super.onActivityResult(requestCode,resultCode,i);
  if (dbHelper == null) {
    dbHelper=new DBHelper(this);
  }
  if (((requestCode == REQUEST_VIEW_PASSWORD) && (PassView.entryEdited)) || ((requestCode == REQUEST_EDIT_PASSWORD) && (PassEdit.entryEdited)) || ((requestCode == REQUEST_ADD_PASSWORD) && (PassEdit.entryEdited))|| (resultCode == RESULT_OK)) {
    fillData();
  }
}",0.9207459207459208
187865,"/** 
 * @param data
 */
private void setServiceParametersFromExtrasAndDispatchAction(Intent data){
  salt=data.getStringExtra(""String_Node_Str"");
  masterKey=data.getStringExtra(""String_Node_Str"");
  String timeout=mPreferences.getString(Preferences.PREFERENCE_LOCK_TIMEOUT,Preferences.PREFERENCE_LOCK_TIMEOUT_DEFAULT_VALUE);
  int timeoutMinutes=5;
  try {
    timeoutMinutes=Integer.valueOf(timeout);
  }
 catch (  NumberFormatException e) {
    Log.d(TAG,""String_Node_Str"");
  }
  try {
    service.setTimeoutMinutes(timeoutMinutes);
    service.setSalt(salt);
    service.setPassword(masterKey);
  }
 catch (  RemoteException e1) {
    e1.printStackTrace();
  }
  boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
  boolean isLocal=isIntentLocal();
  if (isLocal || externalAccess) {
    actionDispatch();
  }
 else {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    showDialogAllowExternalAccess();
  }
}","/** 
 * @param data
 */
private void setServiceParametersFromExtrasAndDispatchAction(Intent data){
  salt=data.getStringExtra(""String_Node_Str"");
  masterKey=data.getStringExtra(""String_Node_Str"");
  String timeout=mPreferences.getString(Preferences.PREFERENCE_LOCK_TIMEOUT,Preferences.PREFERENCE_LOCK_TIMEOUT_DEFAULT_VALUE);
  int timeoutMinutes=5;
  try {
    timeoutMinutes=Integer.valueOf(timeout);
  }
 catch (  NumberFormatException e) {
    Log.d(TAG,""String_Node_Str"");
  }
  try {
    service.setTimeoutMinutes(timeoutMinutes);
    service.setSalt(salt);
    service.setPassword(masterKey);
  }
 catch (  RemoteException e1) {
    e1.printStackTrace();
  }
  boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
  boolean isLocal=isIntentLocal();
  if (isLocal || externalAccess) {
    actionDispatch();
  }
 else {
  }
}",0.9532608695652174
187866,"@Override protected void onPause(){
  super.onPause();
  if (discardEntry == false) {
    savePassword();
  }
  dbHelper.close();
  dbHelper=null;
}","@Override protected void onPause(){
  super.onPause();
  if (isFinishing() && discardEntry == false) {
    savePassword();
  }
  dbHelper.close();
  dbHelper=null;
}",0.9456869009584664
187867,"/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  Intent i=new Intent(this,EncryptActivity.class);
  i.putExtra(NotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
  i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,null));
  i.putExtra(NotePadIntents.EXTRA_URI,mUri.toString());
  startActivity(i);
}","/** 
 * Encrypt the current note.
 * @param text
 */
private void encryptNote(boolean encryptTags){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  Log.i(TAG,""String_Node_Str"" + tags);
  if (!encryptTags) {
    tags=null;
  }
  Intent i=new Intent(this,EncryptActivity.class);
  i.putExtra(NotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_ENCRYPT);
  i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(text,title,tags));
  i.putExtra(NotePadIntents.EXTRA_URI,mUri.toString());
  startActivity(i);
}",0.8761726078799249
187868,"@Override protected void onPause(){
  super.onPause();
  Log.d(TAG,""String_Node_Str"");
  if (mCursor != null) {
    mCursor.moveToFirst();
    long encrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    if (encrypted == 0) {
      String text=mText.getText().toString();
      int length=text.length();
      if (isFinishing() && (length == 0) && !mNoteOnly) {
        setResult(RESULT_CANCELED);
        deleteNote();
      }
 else {
        ContentValues values=new ContentValues();
        if (!mNoteOnly) {
          values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
          String title=ExtractTitle.extractTitle(text);
          values.put(Notes.TITLE,title);
        }
        values.put(Notes.NOTE,text);
        getContentResolver().update(mUri,values,null,null);
      }
    }
 else {
      if (mDecryptedText != null) {
        encryptNote();
      }
    }
  }
}","@Override protected void onPause(){
  super.onPause();
  Log.d(TAG,""String_Node_Str"");
  if (mCursor != null) {
    mCursor.moveToFirst();
    long encrypted=mCursor.getLong(COLUMN_INDEX_ENCRYPTED);
    if (encrypted == 0) {
      String text=mText.getText().toString();
      int length=text.length();
      if (isFinishing() && (length == 0) && !mNoteOnly) {
        setResult(RESULT_CANCELED);
        deleteNote();
      }
 else {
        ContentValues values=new ContentValues();
        if (!mNoteOnly) {
          values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
          String title=ExtractTitle.extractTitle(text);
          values.put(Notes.TITLE,title);
        }
        values.put(Notes.NOTE,text);
        getContentResolver().update(mUri,values,null,null);
      }
    }
 else {
      if (mDecryptedText != null) {
        encryptNote(false);
      }
    }
  }
}",0.9971830985915492
187869,"/** 
 * Unencrypt the current note.
 * @param text
 */
private void unencryptNote(){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  ContentValues values=new ContentValues();
  values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
  values.put(Notes.TITLE,title);
  values.put(Notes.NOTE,text);
  values.put(Notes.ENCRYPTED,0);
  getContentResolver().update(mUri,values,null,null);
  mCursor.requery();
  setFeatureDrawable(Window.FEATURE_RIGHT_ICON,null);
}","/** 
 * Unencrypt the current note.
 * @param text
 */
private void unencryptNote(){
  String text=mText.getText().toString();
  String title=ExtractTitle.extractTitle(text);
  String tags=getTags();
  Log.i(TAG,""String_Node_Str"" + tags);
  ContentValues values=new ContentValues();
  values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
  values.put(Notes.TITLE,title);
  values.put(Notes.NOTE,text);
  values.put(Notes.ENCRYPTED,0);
  getContentResolver().update(mUri,values,null,null);
  mCursor.requery();
  setFeatureDrawable(Window.FEATURE_RIGHT_ICON,null);
  Intent i=new Intent(this,EncryptActivity.class);
  i.putExtra(NotePadIntents.EXTRA_ACTION,CryptoIntents.ACTION_DECRYPT);
  i.putExtra(CryptoIntents.EXTRA_TEXT_ARRAY,EncryptActivity.getCryptoStringArray(null,null,tags));
  i.putExtra(NotePadIntents.EXTRA_URI,mUri.toString());
  startActivity(i);
}",0.737300435413643
187870,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MENU_DELETE:
    deleteNote();
  finish();
break;
case MENU_DISCARD:
cancelNote();
break;
case MENU_REVERT:
cancelNote();
break;
case MENU_ENCRYPT:
encryptNote();
break;
case MENU_UNENCRYPT:
unencryptNote();
break;
}
return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case MENU_DELETE:
    deleteNote();
  finish();
break;
case MENU_DISCARD:
cancelNote();
break;
case MENU_REVERT:
cancelNote();
break;
case MENU_ENCRYPT:
encryptNote(true);
break;
case MENU_UNENCRYPT:
unencryptNote();
break;
}
return super.onOptionsItemSelected(item);
}",0.994413407821229
187871,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent i=getIntent();
  if (i != null && savedInstanceState == null) {
    int dialogId=i.getIntExtra(EXTRA_DIALOG_ID,0);
switch (dialogId) {
case DIALOG_ID_SAVE:
      Log.i(TAG,""String_Node_Str"");
    saveFile();
  break;
case DIALOG_ID_OPEN:
Log.i(TAG,""String_Node_Str"");
openFile();
break;
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_NO_FILE_MANAGER_AVAILABLE);
case DIALOG_ID_ALLOW_EXTERNAL_ACCESS:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_ALLOW_EXTERNAL_ACCESS);
break;
case DIALOG_ID_FIRST_TIME_WARNING:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_FIRST_TIME_WARNING);
break;
}
}
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  Intent i=getIntent();
  if (i != null && savedInstanceState == null) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    int dialogId=i.getIntExtra(EXTRA_DIALOG_ID,0);
switch (dialogId) {
case DIALOG_ID_SAVE:
      Log.i(TAG,""String_Node_Str"");
    saveFile();
  break;
case DIALOG_ID_OPEN:
Log.i(TAG,""String_Node_Str"");
openFile();
break;
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_NO_FILE_MANAGER_AVAILABLE);
case DIALOG_ID_ALLOW_EXTERNAL_ACCESS:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_ALLOW_EXTERNAL_ACCESS);
break;
case DIALOG_ID_FIRST_TIME_WARNING:
Log.i(TAG,""String_Node_Str"");
showDialog(DIALOG_ID_FIRST_TIME_WARNING);
break;
}
}
}",0.9414694894146948
187872,"@Override protected void onPrepareDialog(int id,Dialog dialog){
  FilenameDialog fd;
  dialog.setOnDismissListener(mDismissListener);
switch (id) {
case DIALOG_ID_SAVE:
    fd=(FilenameDialog)dialog;
  break;
case DIALOG_ID_OPEN:
fd=(FilenameDialog)dialog;
break;
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
Log.i(TAG,""String_Node_Str"");
break;
}
}","@Override protected void onPrepareDialog(int id,Dialog dialog){
  super.onPrepareDialog(id,dialog);
  if (debug)   Log.d(TAG,""String_Node_Str"");
switch (id) {
case DIALOG_ID_SAVE:
    break;
case DIALOG_ID_OPEN:
  break;
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
break;
}
}",0.3392568659127625
187873,"@Override protected Dialog onCreateDialog(int id){
switch (id) {
case DIALOG_ID_SAVE:
    return new FilenameDialog(this);
case DIALOG_ID_OPEN:
  return new FilenameDialog(this);
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
Log.i(TAG,""String_Node_Str"");
return new GetFromMarketDialog(this,RD.string.filemanager_not_available,RD.string.filemanager_get_oi_filemanager,RD.string.filemanager_market_uri);
case DIALOG_ID_ALLOW_EXTERNAL_ACCESS:
return new AllowExternalAccessDialog(this);
case DIALOG_ID_FIRST_TIME_WARNING:
return new FirstTimeWarningDialog(this);
}
return null;
}","@Override protected Dialog onCreateDialog(int id){
  if (debug)   Log.d(TAG,""String_Node_Str"");
  Dialog dialog=null;
switch (id) {
case DIALOG_ID_SAVE:
    dialog=new FilenameDialog(this);
  break;
case DIALOG_ID_OPEN:
dialog=new FilenameDialog(this);
break;
case DIALOG_ID_NO_FILE_MANAGER_AVAILABLE:
Log.i(TAG,""String_Node_Str"");
dialog=new GetFromMarketDialog(this,RD.string.filemanager_not_available,RD.string.filemanager_get_oi_filemanager,RD.string.filemanager_market_uri);
break;
case DIALOG_ID_ALLOW_EXTERNAL_ACCESS:
dialog=new AllowExternalAccessDialog(this);
break;
case DIALOG_ID_FIRST_TIME_WARNING:
dialog=new FirstTimeWarningDialog(this);
break;
}
if (dialog == null) {
dialog=super.onCreateDialog(id);
}
if (dialog != null) {
dialog.setOnDismissListener(mDismissListener);
}
return dialog;
}",0.4934687953555878
187874,"public void onDismiss(DialogInterface dialoginterface){
  Log.i(TAG,""String_Node_Str"");
  if (!mIsPausing) {
    DialogHostingActivity.this.finish();
  }
 else {
  }
}","public void onDismiss(DialogInterface dialoginterface){
  if (debug)   Log.d(TAG,""String_Node_Str"" + mIsPausing);
  if (!mIsPausing) {
    if (debug)     Log.d(TAG,""String_Node_Str"");
    DialogHostingActivity.this.finish();
  }
 else {
  }
}",0.8117359413202934
187875,"@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  mIsPausing=true;
}","@Override protected void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  mIsPausing=true;
  if (debug)   Log.d(TAG,""String_Node_Str"" + mIsPausing);
}",0.7031700288184438
187876,"/** 
 * unencrypt encrypted string previously encrypted with encryptWithSessionKey()
 * @author Peli
 * @param ciphertext
 * @return decrypted String
 * @throws Exception
 */
public String decryptWithSessionKey(String ciphertext) throws CryptoHelperException {
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  if ((ciphertext == null) || (ciphertext == ""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  String cipherSessionKey=null;
  try {
    cipherSessionKey=ciphertext.substring(0,96);
    ciphertext=ciphertext.substring(96);
  }
 catch (  IndexOutOfBoundsException e) {
    Log.e(TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
  byte[] byteCipherSessionKey=hexStringToBytes(cipherSessionKey);
  byte[] byteSessionKey={};
  try {
    pbeCipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParamSpec);
    byteSessionKey=pbeCipher.doFinal(byteCipherSessionKey);
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  String stringSessionKey=new String(byteSessionKey);
  PBEKeySpec sessionPbeKeySpec=new PBEKeySpec(stringSessionKey.toCharArray());
  SecretKey sessionPbeKey=null;
  try {
    sessionPbeKey=keyFac.generateSecret(sessionPbeKeySpec);
  }
 catch (  InvalidKeySpecException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  byte[] byteCiphertext=hexStringToBytes(ciphertext);
  byte[] plaintext={};
  try {
    pbeCipher.init(Cipher.DECRYPT_MODE,sessionPbeKey,pbeParamSpec);
    plaintext=pbeCipher.doFinal(byteCiphertext);
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  return new String(plaintext);
}","/** 
 * unencrypt encrypted string previously encrypted with encryptWithSessionKey()
 * @author Peli
 * @param ciphertext
 * @return decrypted String
 * @throws Exception
 */
public String decryptWithSessionKey(String ciphertext) throws CryptoHelperException {
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  if ((ciphertext == null) || (ciphertext == ""String_Node_Str"")) {
    return ""String_Node_Str"";
  }
  String cipherVersion=null;
  String cipherSessionKey=null;
  try {
    cipherVersion=ciphertext.substring(0,1);
    if (cipherVersion.equals(""String_Node_Str"")) {
      cipherSessionKey=ciphertext.substring(1,97);
      ciphertext=ciphertext.substring(97);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + cipherVersion);
      return ""String_Node_Str"";
    }
  }
 catch (  IndexOutOfBoundsException e) {
    Log.e(TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
  byte[] byteCipherSessionKey=hexStringToBytes(cipherSessionKey);
  byte[] byteSessionKey={};
  try {
    pbeCipher.init(Cipher.DECRYPT_MODE,pbeKey,pbeParamSpec);
    byteSessionKey=pbeCipher.doFinal(byteCipherSessionKey);
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  String stringSessionKey=new String(byteSessionKey);
  PBEKeySpec sessionPbeKeySpec=new PBEKeySpec(stringSessionKey.toCharArray());
  SecretKey sessionPbeKey=null;
  try {
    sessionPbeKey=keyFac.generateSecret(sessionPbeKeySpec);
  }
 catch (  InvalidKeySpecException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  byte[] byteCiphertext=hexStringToBytes(ciphertext);
  byte[] plaintext={};
  try {
    pbeCipher.init(Cipher.DECRYPT_MODE,sessionPbeKey,pbeParamSpec);
    plaintext=pbeCipher.doFinal(byteCiphertext);
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  return new String(plaintext);
}",0.9446632124352332
187877,"/** 
 * encrypt a string using a random session key
 * @author Peli
 * @param plaintext
 * @return encrypted String
 * @throws Exception
 */
public String encryptWithSessionKey(String plaintext) throws CryptoHelperException {
  Log.i(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  byte[] cipherSessionKey={};
  byte[] ciphertext={};
  SecretKey sessionKey=null;
  byte[] sessionKeyEncoded=null;
  String sessionKeyString=null;
  try {
    KeyGenerator keygen;
    keygen=KeyGenerator.getInstance(""String_Node_Str"");
    keygen.init(256);
    sessionKey=keygen.generateKey();
    sessionKeyEncoded=sessionKey.getEncoded();
    sessionKeyString=new String(sessionKeyEncoded);
  }
 catch (  NoSuchAlgorithmException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  PBEKeySpec sessionPbeKeySpec=new PBEKeySpec(sessionKeyString.toCharArray());
  SecretKey sessionPbeKey=null;
  try {
    sessionPbeKey=keyFac.generateSecret(sessionPbeKeySpec);
  }
 catch (  InvalidKeySpecException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  try {
    pbeCipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParamSpec);
    cipherSessionKey=pbeCipher.doFinal(sessionKeyEncoded);
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  try {
    pbeCipher.init(Cipher.ENCRYPT_MODE,sessionPbeKey,pbeParamSpec);
    ciphertext=pbeCipher.doFinal(plaintext.getBytes());
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  String stringCipherSessionKey=toHexString(cipherSessionKey);
  String stringCiphertext=toHexString(ciphertext);
  Log.i(TAG,""String_Node_Str"" + stringCipherSessionKey.length() + ""String_Node_Str""+ stringCipherSessionKey);
  return stringCipherSessionKey + stringCiphertext;
}","/** 
 * encrypt a string using a random session key
 * @author Peli
 * @param plaintext
 * @return encrypted String
 * @throws Exception
 */
public String encryptWithSessionKey(String plaintext) throws CryptoHelperException {
  Log.i(TAG,""String_Node_Str"");
  status=false;
  if (password == null) {
    String msg=""String_Node_Str"";
    throw new CryptoHelperException(msg);
  }
  byte[] cipherSessionKey={};
  byte[] ciphertext={};
  SecretKey sessionKey=null;
  byte[] sessionKeyEncoded=null;
  String sessionKeyString=null;
  try {
    KeyGenerator keygen;
    keygen=KeyGenerator.getInstance(""String_Node_Str"");
    keygen.init(256);
    sessionKey=keygen.generateKey();
    sessionKeyEncoded=sessionKey.getEncoded();
    sessionKeyString=new String(sessionKeyEncoded);
  }
 catch (  NoSuchAlgorithmException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  PBEKeySpec sessionPbeKeySpec=new PBEKeySpec(sessionKeyString.toCharArray());
  SecretKey sessionPbeKey=null;
  try {
    sessionPbeKey=keyFac.generateSecret(sessionPbeKeySpec);
  }
 catch (  InvalidKeySpecException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  try {
    pbeCipher.init(Cipher.ENCRYPT_MODE,pbeKey,pbeParamSpec);
    cipherSessionKey=pbeCipher.doFinal(sessionKeyEncoded);
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  try {
    pbeCipher.init(Cipher.ENCRYPT_MODE,sessionPbeKey,pbeParamSpec);
    ciphertext=pbeCipher.doFinal(plaintext.getBytes());
    status=true;
  }
 catch (  IllegalBlockSizeException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  BadPaddingException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidKeyException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
catch (  InvalidAlgorithmParameterException e) {
    Log.e(TAG,""String_Node_Str"" + e.toString());
  }
  String stringCipherVersion=""String_Node_Str"";
  String stringCipherSessionKey=toHexString(cipherSessionKey);
  String stringCiphertext=toHexString(ciphertext);
  Log.i(TAG,""String_Node_Str"" + stringCipherSessionKey.length() + ""String_Node_Str""+ stringCipherSessionKey);
  StringBuilder sb=new StringBuilder(stringCipherVersion.length() + stringCipherSessionKey.length() + stringCiphertext.length());
  sb.append(stringCipherVersion);
  sb.append(stringCipherSessionKey);
  sb.append(stringCiphertext);
  return sb.toString();
}",0.9448543689320388
187878,"public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
  if (debug)   Log.d(TAG,""String_Node_Str"" + promptforpassword);
  try {
    if (service.getPassword() == null) {
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
  if (debug)   Log.d(TAG,""String_Node_Str"" + promptforpassword);
  try {
    if (service.getPassword() == null) {
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.903161397670549
187879,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
      salt=data.getStringExtra(""String_Node_Str"");
    masterKey=data.getStringExtra(""String_Node_Str"");
  String timeout=mPreferences.getString(Preferences.PREFERENCE_LOCK_TIMEOUT,Preferences.PREFERENCE_LOCK_TIMEOUT_DEFAULT_VALUE);
int timeoutMinutes=5;
try {
timeoutMinutes=Integer.valueOf(timeout);
}
 catch (NumberFormatException e) {
Log.d(TAG,""String_Node_Str"");
}
try {
service.setTimeoutMinutes(timeoutMinutes);
service.setSalt(salt);
service.setPassword(masterKey);
}
 catch (RemoteException e1) {
e1.printStackTrace();
}
boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
boolean isLocal=isIntentLocal();
if (isLocal || externalAccess) {
actionDispatch();
}
 else {
showDialogAllowExternalAccess();
}
break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
actionDispatch();
break;
}
}
 else {
setResult(RESULT_CANCELED);
finish();
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
    if (resultCode == RESULT_OK) {
      salt=data.getStringExtra(""String_Node_Str"");
      masterKey=data.getStringExtra(""String_Node_Str"");
      String timeout=mPreferences.getString(Preferences.PREFERENCE_LOCK_TIMEOUT,Preferences.PREFERENCE_LOCK_TIMEOUT_DEFAULT_VALUE);
      int timeoutMinutes=5;
      try {
        timeoutMinutes=Integer.valueOf(timeout);
      }
 catch (      NumberFormatException e) {
        Log.d(TAG,""String_Node_Str"");
      }
      try {
        service.setTimeoutMinutes(timeoutMinutes);
        service.setSalt(salt);
        service.setPassword(masterKey);
      }
 catch (      RemoteException e1) {
        e1.printStackTrace();
      }
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      boolean isLocal=isIntentLocal();
      if (isLocal || externalAccess) {
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
 else {
      setResult(RESULT_CANCELED);
      finish();
    }
  break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
actionDispatch();
break;
}
}",0.7792421746293245
187880,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  initService();
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mServiceIntent=null;
  mPreferences=PreferenceManager.getDefaultSharedPreferences(this);
  initService();
}",0.9492273730684326
187881,"public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
  if (debug)   Log.d(TAG,""String_Node_Str"" + promptforpassword);
  try {
    if (service.getPassword() == null) {
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}","public void onServiceConnected(ComponentName className,IBinder boundService){
  service=ServiceDispatch.Stub.asInterface((IBinder)boundService);
  if (mServiceIntent != null) {
    setServiceParametersFromExtrasAndDispatchAction(mServiceIntent);
    mServiceIntent=null;
    return;
  }
  boolean promptforpassword=getIntent().getBooleanExtra(CryptoIntents.EXTRA_PROMPT,true);
  if (debug)   Log.d(TAG,""String_Node_Str"" + promptforpassword);
  try {
    if (service.getPassword() == null) {
      if (promptforpassword) {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        Intent askPass=new Intent(getApplicationContext(),AskPassword.class);
        final Intent thisIntent=getIntent();
        String inputBody=thisIntent.getStringExtra(CryptoIntents.EXTRA_TEXT);
        askPass.putExtra(CryptoIntents.EXTRA_TEXT,inputBody);
        askPass.putExtra(AskPassword.EXTRA_IS_LOCAL,askPassIsLocal);
        startActivityForResult(askPass,REQUEST_CODE_ASK_PASSWORD);
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
      }
    }
 else {
      if (debug)       Log.d(TAG,""String_Node_Str"");
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      if (askPassIsLocal || externalAccess) {
        salt=service.getSalt();
        masterKey=service.getPassword();
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
  }
  if (debug)   Log.d(TAG,""String_Node_Str"");
}",0.9556803995006242
187882,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
    if (resultCode == RESULT_OK) {
      salt=data.getStringExtra(""String_Node_Str"");
      masterKey=data.getStringExtra(""String_Node_Str"");
      String timeout=mPreferences.getString(Preferences.PREFERENCE_LOCK_TIMEOUT,Preferences.PREFERENCE_LOCK_TIMEOUT_DEFAULT_VALUE);
      int timeoutMinutes=5;
      try {
        timeoutMinutes=Integer.valueOf(timeout);
      }
 catch (      NumberFormatException e) {
        Log.d(TAG,""String_Node_Str"");
      }
      if (service == null) {
        Log.d(TAG,""String_Node_Str"");
        setResult(RESULT_CANCELED);
        finish();
        return;
      }
      try {
        service.setTimeoutMinutes(timeoutMinutes);
        service.setSalt(salt);
        service.setPassword(masterKey);
      }
 catch (      RemoteException e1) {
        e1.printStackTrace();
      }
      boolean externalAccess=mPreferences.getBoolean(Preferences.PREFERENCE_ALLOW_EXTERNAL_ACCESS,false);
      boolean isLocal=isIntentLocal();
      if (isLocal || externalAccess) {
        actionDispatch();
      }
 else {
        if (debug)         Log.d(TAG,""String_Node_Str"");
        showDialogAllowExternalAccess();
      }
    }
 else {
      setResult(RESULT_CANCELED);
      finish();
    }
  break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
actionDispatch();
break;
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (debug)   Log.d(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ASK_PASSWORD:
    if (resultCode == RESULT_OK) {
      if (service == null) {
        mServiceIntent=data;
        return;
      }
      setServiceParametersFromExtrasAndDispatchAction(data);
    }
 else {
      setResult(RESULT_CANCELED);
      finish();
    }
  break;
case REQUEST_CODE_ALLOW_EXTERNAL_ACCESS:
if (service == null) {
  if (debug)   Log.i(TAG,""String_Node_Str"");
}
 else if (salt == null) {
  try {
    salt=service.getSalt();
    masterKey=service.getPassword();
    actionDispatch();
  }
 catch (  RemoteException e) {
    Log.d(TAG,e.toString());
    finish();
  }
}
 else {
  if (debug)   Log.i(TAG,""String_Node_Str"");
  actionDispatch();
}
break;
}
}",0.2804827299209321
187883,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ENCRYPT_OR_UNENCRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String[] textArray=data.getStringArrayExtra(CryptoIntents.EXTRA_TEXT_ARRAY);
      String text=textArray[0];
      String title=textArray[1];
      String tags=textArray[2];
      String action=data.getAction();
      String uristring=data.getStringExtra(NotePadIntents.EXTRA_URI);
      Uri uri=null;
      if (uristring != null) {
        uri=Uri.parse(uristring);
      }
 else {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      Log.i(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ text+ ""String_Node_Str""+ tags);
      ContentValues values=new ContentValues();
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      if (title != null) {
        values.put(Notes.TITLE,title);
      }
      if (text != null) {
        values.put(Notes.NOTE,text);
      }
      if (tags != null) {
        values.put(Notes.TAGS,tags);
      }
      if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
        values.put(Notes.ENCRYPTED,1);
      }
 else       if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
        values.put(Notes.ENCRYPTED,0);
      }
 else {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      getContentResolver().update(uri,values,null,null);
      finish();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    }
  break;
}
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.i(TAG,""String_Node_Str"" + requestCode + ""String_Node_Str""+ resultCode);
switch (requestCode) {
case REQUEST_CODE_ENCRYPT_OR_UNENCRYPT:
    if (resultCode == RESULT_OK && data != null) {
      String[] textArray=data.getStringArrayExtra(CryptoIntents.EXTRA_TEXT_ARRAY);
      String text=textArray[0];
      String title=textArray[1];
      String tags=textArray[2];
      String action=data.getAction();
      String uristring=data.getStringExtra(NotePadIntents.EXTRA_URI);
      Uri uri=null;
      if (uristring != null) {
        uri=Uri.parse(uristring);
      }
 else {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      Log.i(TAG,""String_Node_Str"" + uri + ""String_Node_Str""+ text+ ""String_Node_Str""+ tags);
      ContentValues values=new ContentValues();
      values.put(Notes.MODIFIED_DATE,System.currentTimeMillis());
      if (title != null) {
        values.put(Notes.TITLE,title);
      }
      if (text != null) {
        values.put(Notes.NOTE,text);
      }
      if (tags != null) {
        values.put(Notes.TAGS,tags);
      }
      if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
        values.put(Notes.ENCRYPTED,1);
      }
 else       if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
        values.put(Notes.ENCRYPTED,0);
      }
 else {
        Log.i(TAG,""String_Node_Str"");
        Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
        return;
      }
      getContentResolver().update(uri,values,null,null);
      finish();
    }
 else {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      finish();
    }
  break;
}
}",0.9954545454545456
187884,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (!EulaActivity.checkEula(this,getIntent())) {
    return;
  }
  Intent thisIntent=getIntent();
  boolean isLocal=thisIntent.getBooleanExtra(EXTRA_IS_LOCAL,false);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  dbHelper=new DBHelper(this);
  ch=new CryptoHelper(CryptoHelper.EncryptionStrong);
  if (dbHelper.needsUpgrade()) {
switch (dbHelper.fetchVersion()) {
case 2:
      databaseVersionError();
  }
}
setContentView(R.layout.front_door);
ImageView icon=(ImageView)findViewById(R.id.entry_icon);
icon.setImageResource(R.drawable.icon_safe);
TextView header=(TextView)findViewById(R.id.entry_header);
String version=VersionUtils.getVersionNumber(this);
String appName=VersionUtils.getApplicationName(this);
String head=appName + ""String_Node_Str"" + version+ ""String_Node_Str"";
header.setText(head);
pbeKey=(EditText)findViewById(R.id.password);
introText=(TextView)findViewById(R.id.first_time);
remoteAsk=(TextView)findViewById(R.id.remote);
confirmPass=(EditText)findViewById(R.id.pass_confirm);
confirmText=(TextView)findViewById(R.id.confirm_lbl);
salt=dbHelper.fetchSalt();
masterKey=dbHelper.fetchMasterKey();
if (masterKey.length() == 0) {
  firstTime=true;
  introText.setVisibility(View.VISIBLE);
  confirmText.setVisibility(View.VISIBLE);
  confirmPass.setVisibility(View.VISIBLE);
  checkForBackup();
}
if (!isLocal) {
  if (remoteAsk != null) {
    remoteAsk.setVisibility(View.VISIBLE);
  }
}
Button continueButton=(Button)findViewById(R.id.continue_button);
continueButton.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View arg0){
    PBEKey=pbeKey.getText().toString();
    try {
      ch.setSalt(dbHelper.fetchSalt());
      ch.setPassword(PBEKey);
    }
 catch (    CryptoHelperException e2) {
      e2.printStackTrace();
      return;
    }
    if (PBEKey.length() < 4) {
      Toast.makeText(AskPassword.this,R.string.notify_blank_pass,Toast.LENGTH_SHORT).show();
      Animation shake=AnimationUtils.loadAnimation(AskPassword.this,R.anim.shake);
      findViewById(R.id.password).startAnimation(shake);
      return;
    }
    if (firstTime) {
      if (pbeKey.getText().toString().compareTo(confirmPass.getText().toString()) != 0) {
        Toast.makeText(AskPassword.this,R.string.confirm_pass_fail,Toast.LENGTH_SHORT).show();
        return;
      }
      try {
        salt=CryptoHelper.generateSalt();
        masterKey=CryptoHelper.generateMasterKey();
      }
 catch (      NoSuchAlgorithmException e1) {
        e1.printStackTrace();
      }
      if (debug)       Log.i(TAG,""String_Node_Str"" + masterKey);
      try {
        ch.setSalt(salt);
        String encryptedMasterKey=ch.encrypt(masterKey);
        dbHelper.storeSalt(salt);
        dbHelper.storeMasterKey(encryptedMasterKey);
      }
 catch (      CryptoHelperException e) {
        Log.e(TAG,e.toString());
      }
    }
 else     if (!checkUserPassword()) {
      Toast.makeText(AskPassword.this,R.string.invalid_password,Toast.LENGTH_SHORT).show();
      Animation shake=AnimationUtils.loadAnimation(AskPassword.this,R.anim.shake);
      findViewById(R.id.password).startAnimation(shake);
      return;
    }
    Intent callbackIntent=new Intent();
    if (debug)     Log.d(TAG,""String_Node_Str"" + masterKey + ""String_Node_Str""+ salt);
    callbackIntent.putExtra(""String_Node_Str"",masterKey);
    callbackIntent.putExtra(""String_Node_Str"",salt);
    setResult(RESULT_OK,callbackIntent);
    finish();
  }
}
);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  if (!EulaActivity.checkEula(this,getIntent())) {
    return;
  }
  Intent thisIntent=getIntent();
  boolean isLocal=thisIntent.getBooleanExtra(EXTRA_IS_LOCAL,false);
  if (debug)   Log.d(TAG,""String_Node_Str"");
  dbHelper=new DBHelper(this);
  ch=new CryptoHelper(CryptoHelper.EncryptionStrong);
  if (dbHelper.needsUpgrade()) {
switch (dbHelper.fetchVersion()) {
case 2:
      databaseVersionError();
  }
}
setContentView(R.layout.front_door);
ImageView icon=(ImageView)findViewById(R.id.entry_icon);
icon.setImageResource(R.drawable.icon_safe);
TextView header=(TextView)findViewById(R.id.entry_header);
String version=VersionUtils.getVersionNumber(this);
String appName=VersionUtils.getApplicationName(this);
String head=appName + ""String_Node_Str"" + version+ ""String_Node_Str"";
header.setText(head);
pbeKey=(EditText)findViewById(R.id.password);
introText=(TextView)findViewById(R.id.first_time);
remoteAsk=(TextView)findViewById(R.id.remote);
confirmPass=(EditText)findViewById(R.id.pass_confirm);
confirmText=(TextView)findViewById(R.id.confirm_lbl);
salt=dbHelper.fetchSalt();
masterKey=dbHelper.fetchMasterKey();
if (masterKey.length() == 0) {
  firstTime=true;
  introText.setVisibility(View.VISIBLE);
  confirmText.setVisibility(View.VISIBLE);
  confirmPass.setVisibility(View.VISIBLE);
  checkForBackup();
}
if (!isLocal) {
  if (remoteAsk != null) {
    remoteAsk.setVisibility(View.VISIBLE);
  }
}
Button continueButton=(Button)findViewById(R.id.continue_button);
continueButton.setOnClickListener(new View.OnClickListener(){
  public void onClick(  View arg0){
    PBEKey=pbeKey.getText().toString();
    if (!firstTime) {
      try {
        ch.setSalt(dbHelper.fetchSalt());
        ch.setPassword(PBEKey);
      }
 catch (      CryptoHelperException e2) {
        e2.printStackTrace();
        return;
      }
    }
    if (PBEKey.length() < 4) {
      Toast.makeText(AskPassword.this,R.string.notify_blank_pass,Toast.LENGTH_SHORT).show();
      Animation shake=AnimationUtils.loadAnimation(AskPassword.this,R.anim.shake);
      findViewById(R.id.password).startAnimation(shake);
      return;
    }
    if (firstTime) {
      if (pbeKey.getText().toString().compareTo(confirmPass.getText().toString()) != 0) {
        Toast.makeText(AskPassword.this,R.string.confirm_pass_fail,Toast.LENGTH_SHORT).show();
        return;
      }
      try {
        salt=CryptoHelper.generateSalt();
        masterKey=CryptoHelper.generateMasterKey();
      }
 catch (      NoSuchAlgorithmException e1) {
        e1.printStackTrace();
      }
      if (debug)       Log.i(TAG,""String_Node_Str"" + masterKey);
      try {
        ch.setSalt(salt);
        String encryptedMasterKey=ch.encrypt(masterKey);
        dbHelper.storeSalt(salt);
        dbHelper.storeMasterKey(encryptedMasterKey);
      }
 catch (      CryptoHelperException e) {
        Log.e(TAG,e.toString());
      }
    }
 else     if (!checkUserPassword()) {
      Toast.makeText(AskPassword.this,R.string.invalid_password,Toast.LENGTH_SHORT).show();
      Animation shake=AnimationUtils.loadAnimation(AskPassword.this,R.anim.shake);
      findViewById(R.id.password).startAnimation(shake);
      return;
    }
    Intent callbackIntent=new Intent();
    if (debug)     Log.d(TAG,""String_Node_Str"" + masterKey + ""String_Node_Str""+ salt);
    callbackIntent.putExtra(""String_Node_Str"",masterKey);
    callbackIntent.putExtra(""String_Node_Str"",salt);
    setResult(RESULT_OK,callbackIntent);
    finish();
  }
}
);
}",0.9930342713847868
187885,"public void setPreferencesUsed(){
  PREFERENCE_FILENAME=PreferenceActivity.PREFS_SHOPPINGLIST_FILENAME;
  DEFAULT_FILENAME=getString(R.string.default_shoppinglist_path);
  PREFERENCE_FORMAT=PreferenceActivity.PREFS_SHOPPINGLIST_FILENAME;
  DEFAULT_FORMAT=""String_Node_Str"";
  RES_STRING_FILEMANAGER_TITLE=R.string.filemanager_title_shoppinglist;
  RES_ARRAY_CSV_FILE_FORMAT=R.array.shoppinglist_format;
  RES_ARRAY_CSV_FILE_FORMAT_VALUE=R.array.shoppinglist_format_value;
}","public void setPreferencesUsed(){
  PREFERENCE_FILENAME=PreferenceActivity.PREFS_SHOPPINGLIST_FILENAME;
  DEFAULT_FILENAME=getString(R.string.default_shoppinglist_path);
  PREFERENCE_FORMAT=PreferenceActivity.PREFS_SHOPPINGLIST_FORMAT;
  DEFAULT_FORMAT=""String_Node_Str"";
  RES_STRING_FILEMANAGER_TITLE=R.string.filemanager_title_shoppinglist;
  RES_ARRAY_CSV_FILE_FORMAT=R.array.shoppinglist_format;
  RES_ARRAY_CSV_FILE_FORMAT_VALUE=R.array.shoppinglist_format_value;
}",0.9872881355932204
187886,"/** 
 * @param reader
 * @throws IOException
 */
public void doImport(FileReader reader) throws IOException {
  ImportCsv ic=new ImportCsv(this);
  ic.importCsv(reader);
}","/** 
 * @param reader
 * @throws IOException
 */
public void doImport(FileReader reader) throws IOException, WrongFormatException {
  ImportCsv ic=new ImportCsv(this);
  ic.importCsv(reader);
}",0.9395604395604396
187887,"/** 
 * @param dis
 * @throws IOException
 */
public void importCsv(Reader reader) throws IOException {
  CSVReader csvreader=new CSVReader(reader);
  String[] nextLine;
  while ((nextLine=csvreader.readNext()) != null) {
    if (nextLine[1].equals(mContext.getString(R.string.header_percent_complete))) {
      continue;
    }
    String itemname=nextLine[0];
    long status=(nextLine[1].equals(""String_Node_Str"")) ? 1 : 0;
    String listname=nextLine[2];
    long listId=ShoppingUtils.getOrCreateListId(mContext,listname);
    long itemId=ShoppingUtils.getItemId(mContext,itemname);
    if (status == 1) {
      status=Shopping.Status.BOUGHT;
    }
 else {
      status=Shopping.Status.WANT_TO_BUY;
    }
    ShoppingUtils.addItemToList(mContext,itemId,listId,status);
  }
}","/** 
 * @param dis
 * @throws IOException
 */
public void importCsv(Reader reader) throws IOException, WrongFormatException {
  CSVReader csvreader=new CSVReader(reader);
  String[] nextLine;
  while ((nextLine=csvreader.readNext()) != null) {
    if (nextLine.length != 3) {
      throw new WrongFormatException();
    }
    String statusstring=nextLine[1];
    if (statusstring.equals(mContext.getString(R.string.header_percent_complete))) {
      continue;
    }
    String itemname=nextLine[0];
    long status=(statusstring.equals(""String_Node_Str"")) ? 1 : 0;
    String listname=nextLine[2];
    long listId=ShoppingUtils.getOrCreateListId(mContext,listname);
    long itemId=ShoppingUtils.getItemId(mContext,itemname);
    if (status == 1) {
      status=Shopping.Status.BOUGHT;
    }
 else {
      status=Shopping.Status.WANT_TO_BUY;
    }
    ShoppingUtils.addItemToList(mContext,itemId,listId,status);
  }
}",0.9050147492625368
187888,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Log.i(TAG,""String_Node_Str"");
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setContentView(R.layout.shopping);
  Shopping.mContentResolver=getContentResolver();
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=(int)Shopping.getDefaultList();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action == null) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_MAIN.equals(action)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(intent.getData().getLastPathSegment());
    }
 else {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  mTypefaceHandwriting=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypefaceDigital=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypeface=null;
  mTypeface=mTypefaceHandwriting;
  createView();
  setListTheme(1);
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  fillItems();
  setListTheme(loadListTheme());
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setText(prevText);
    }
  }
  mEditText.requestFocus();
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Log.i(TAG,""String_Node_Str"");
  if (!EulaActivity.checkEula(this)) {
    return;
  }
  setContentView(R.layout.shopping);
  Shopping.mContentResolver=getContentResolver();
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=(int)Shopping.getDefaultList();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action == null) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_MAIN.equals(action)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(intent.getData().getLastPathSegment());
    }
 else     if (intent.getData() != null) {
      mListUri=intent.getData();
    }
  }
 else   if (Intent.ACTION_PICK.equals(action)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (Intent.ACTION_GET_CONTENT.equals(action)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  mTypefaceHandwriting=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypefaceDigital=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypeface=null;
  mTypeface=mTypefaceHandwriting;
  createView();
  setListTheme(1);
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  fillItems();
  setListTheme(loadListTheme());
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setText(prevText);
    }
  }
  mEditText.requestFocus();
}",0.9931423961274708
187889,"private void saveState(){
  PassEntry entry=new PassEntry();
  String passwordPlain=passwordText.getText().toString();
  String notePlain=noteText.getText().toString();
  String usernamePlain=usernameText.getText().toString();
  String websitePlain=websiteText.getText().toString();
  String descPlain=descriptionText.getText().toString();
  try {
    entry.category=PassList.getCategoryId();
    entry.description=ch.encrypt(descPlain);
    entry.username=ch.encrypt(usernamePlain);
    entry.password=ch.encrypt(passwordPlain);
    entry.note=ch.encrypt(notePlain);
    entry.website=ch.encrypt(websitePlain);
  }
 catch (  CryptoHelperException e) {
    Log.e(TAG,e.toString());
  }
  if (RowId == null || RowId == -1) {
    dbHelper.addPassword(entry);
  }
 else {
    PassEntry storedEntry=dbHelper.fetchPassword(RowId);
    entry.uniqueName=storedEntry.uniqueName;
    dbHelper.updatePassword(RowId,entry);
  }
}","private void saveState(){
  PassEntry entry=new PassEntry();
  String passwordPlain=passwordText.getText().toString();
  String notePlain=noteText.getText().toString();
  String usernamePlain=usernameText.getText().toString();
  String websitePlain=websiteText.getText().toString();
  String descPlain=descriptionText.getText().toString();
  try {
    entry.category=PassList.getCategoryId();
    entry.description=ch.encrypt(descPlain);
    entry.username=ch.encrypt(usernamePlain);
    entry.password=ch.encrypt(passwordPlain);
    entry.note=ch.encrypt(notePlain);
    entry.website=ch.encrypt(websitePlain);
  }
 catch (  CryptoHelperException e) {
    Log.e(TAG,e.toString());
  }
  if (RowId == null || RowId == -1) {
    RowId=dbHelper.addPassword(entry);
  }
 else {
    PassEntry storedEntry=dbHelper.fetchPassword(RowId);
    entry.uniqueName=storedEntry.uniqueName;
    dbHelper.updatePassword(RowId,entry);
  }
}",0.996742671009772
187890,"protected void actionDispatch(){
  final Intent thisIntent=getIntent();
  final String action=thisIntent.getAction();
  Intent callbackIntent=getIntent();
  int callbackResult=RESULT_CANCELED;
  PassList.setMasterKey(masterKey);
  CategoryList.setMasterKey(masterKey);
  if (ch == null) {
    ch=new CryptoHelper(CryptoHelper.EncryptionMedium);
    ch.setPassword(masterKey);
  }
  boolean externalAccess=mPreferences.getBoolean(""String_Node_Str"",false);
  if (action == null || action.equals(Intent.ACTION_MAIN)) {
    Intent i=new Intent(getApplicationContext(),CategoryList.class);
    startActivity(i);
  }
 else   if (externalAccess) {
    if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
      callbackResult=encryptIntent(thisIntent,callbackIntent);
    }
 else     if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
      callbackResult=decryptIntent(thisIntent,callbackIntent);
    }
 else     if (action.equals(CryptoIntents.ACTION_GET_PASSWORD) || action.equals(CryptoIntents.ACTION_SET_PASSWORD)) {
      try {
        callbackIntent=getSetPassword(thisIntent,callbackIntent);
        callbackResult=RESULT_OK;
      }
 catch (      CryptoHelperException e) {
        Log.e(TAG,e.toString());
        Toast.makeText(FrontDoor.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
catch (      Exception e) {
        Log.e(TAG,e.toString());
        Toast.makeText(FrontDoor.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
    }
    setResult(callbackResult,callbackIntent);
  }
  finish();
}","protected void actionDispatch(){
  final Intent thisIntent=getIntent();
  final String action=thisIntent.getAction();
  Intent callbackIntent=getIntent();
  int callbackResult=RESULT_CANCELED;
  PassList.setMasterKey(masterKey);
  CategoryList.setMasterKey(masterKey);
  if (ch == null) {
    ch=new CryptoHelper(CryptoHelper.EncryptionMedium);
    ch.setPassword(masterKey);
  }
  boolean externalAccess=mPreferences.getBoolean(""String_Node_Str"",false);
  if (action == null || action.equals(Intent.ACTION_MAIN)) {
    Intent i=new Intent(getApplicationContext(),CategoryList.class);
    startActivity(i);
  }
 else   if (externalAccess) {
    if (action.equals(CryptoIntents.ACTION_ENCRYPT)) {
      callbackResult=encryptIntent(thisIntent,callbackIntent);
    }
 else     if (action.equals(CryptoIntents.ACTION_DECRYPT)) {
      callbackResult=decryptIntent(thisIntent,callbackIntent);
    }
 else     if (action.equals(CryptoIntents.ACTION_GET_PASSWORD) || action.equals(CryptoIntents.ACTION_SET_PASSWORD)) {
      try {
        callbackIntent=getSetPassword(thisIntent,callbackIntent);
        callbackResult=RESULT_OK;
      }
 catch (      CryptoHelperException e) {
        Log.e(TAG,e.toString(),e);
        Toast.makeText(FrontDoor.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
catch (      Exception e) {
        Log.e(TAG,e.toString(),e);
        Toast.makeText(FrontDoor.this,""String_Node_Str"" + e.getMessage(),Toast.LENGTH_SHORT).show();
      }
    }
    setResult(callbackResult,callbackIntent);
  }
  finish();
}",0.9987154784842646
187891,"private Intent getSetPassword(Intent thisIntent,Intent callbackIntent) throws CryptoHelperException, Exception {
  String action=thisIntent.getAction();
  Log.d(TAG,""String_Node_Str"");
  String username=null;
  String password=null;
  String clearUniqueName=thisIntent.getStringExtra(CryptoIntents.EXTRA_UNIQUE_NAME);
  if (clearUniqueName == null)   throw new Exception(""String_Node_Str"");
  String uniqueName=ch.encrypt(clearUniqueName);
  PassEntry row=dbHelper.fetchPassword(uniqueName);
  boolean passExists=row.id > 1;
  String clearCallingPackage=getCallingPackage();
  String callingPackage=ch.encrypt(clearCallingPackage);
  if (passExists) {
    ArrayList<String> packageAccess=dbHelper.fetchPackageAccess(row.id);
    if (!PassEntry.checkPackageAccess(packageAccess,callingPackage)) {
      throw new Exception(""String_Node_Str"");
    }
  }
  if (action.equals(CryptoIntents.ACTION_GET_PASSWORD)) {
    if (passExists) {
      username=ch.decrypt(row.username);
      password=ch.decrypt(row.password);
    }
 else     throw new Exception(""String_Node_Str"" + clearUniqueName);
    callbackIntent.putExtra(CryptoIntents.EXTRA_USERNAME,username);
    callbackIntent.putExtra(CryptoIntents.EXTRA_PASSWORD,password);
  }
 else   if (action.equals(CryptoIntents.ACTION_SET_PASSWORD)) {
    String clearUsername=thisIntent.getStringExtra(CryptoIntents.EXTRA_USERNAME);
    String clearPassword=thisIntent.getStringExtra(CryptoIntents.EXTRA_PASSWORD);
    if (clearPassword == null) {
      throw new Exception(""String_Node_Str"");
    }
    row.username=ch.encrypt(clearUsername == null ? ""String_Node_Str"" : clearUsername);
    row.password=ch.encrypt(clearPassword);
    if (passExists) {
      if (clearUsername.equals(""String_Node_Str"") && clearPassword.equals(""String_Node_Str"")) {
        dbHelper.deletePassword(row.id);
      }
 else {
        dbHelper.updatePassword(row.id,row);
      }
    }
 else {
      row.uniqueName=uniqueName;
      row.description=uniqueName;
      row.website=""String_Node_Str"";
      row.note=""String_Node_Str"";
      String category=ch.encrypt(""String_Node_Str"");
      CategoryEntry c=new CategoryEntry();
      c.name=category;
      row.category=dbHelper.addCategory(c);
      row.id=dbHelper.addPassword(row);
    }
    dbHelper.addPackageAccess(row.id,callingPackage);
  }
  return (callbackIntent);
}","private Intent getSetPassword(Intent thisIntent,Intent callbackIntent) throws CryptoHelperException, Exception {
  String action=thisIntent.getAction();
  Log.d(TAG,""String_Node_Str"");
  String username=null;
  String password=null;
  String clearUniqueName=thisIntent.getStringExtra(CryptoIntents.EXTRA_UNIQUE_NAME);
  if (clearUniqueName == null)   throw new Exception(""String_Node_Str"");
  if (dbHelper == null) {
    dbHelper=new DBHelper(this);
  }
  String uniqueName=ch.encrypt(clearUniqueName);
  PassEntry row=dbHelper.fetchPassword(uniqueName);
  boolean passExists=row.id > 1;
  String clearCallingPackage=getCallingPackage();
  String callingPackage=ch.encrypt(clearCallingPackage);
  if (passExists) {
    ArrayList<String> packageAccess=dbHelper.fetchPackageAccess(row.id);
    if (!PassEntry.checkPackageAccess(packageAccess,callingPackage)) {
      throw new Exception(""String_Node_Str"");
    }
  }
  if (action.equals(CryptoIntents.ACTION_GET_PASSWORD)) {
    if (passExists) {
      username=ch.decrypt(row.username);
      password=ch.decrypt(row.password);
    }
 else     throw new Exception(""String_Node_Str"" + clearUniqueName);
    callbackIntent.putExtra(CryptoIntents.EXTRA_USERNAME,username);
    callbackIntent.putExtra(CryptoIntents.EXTRA_PASSWORD,password);
  }
 else   if (action.equals(CryptoIntents.ACTION_SET_PASSWORD)) {
    String clearUsername=thisIntent.getStringExtra(CryptoIntents.EXTRA_USERNAME);
    String clearPassword=thisIntent.getStringExtra(CryptoIntents.EXTRA_PASSWORD);
    if (clearPassword == null) {
      throw new Exception(""String_Node_Str"");
    }
    row.username=ch.encrypt(clearUsername == null ? ""String_Node_Str"" : clearUsername);
    row.password=ch.encrypt(clearPassword);
    if (passExists) {
      if (clearUsername.equals(""String_Node_Str"") && clearPassword.equals(""String_Node_Str"")) {
        dbHelper.deletePassword(row.id);
      }
 else {
        dbHelper.updatePassword(row.id,row);
      }
    }
 else {
      row.uniqueName=uniqueName;
      row.description=uniqueName;
      row.website=""String_Node_Str"";
      row.note=""String_Node_Str"";
      String category=ch.encrypt(""String_Node_Str"");
      CategoryEntry c=new CategoryEntry();
      c.name=category;
      row.category=dbHelper.addCategory(c);
      row.id=dbHelper.addPassword(row);
    }
    dbHelper.addPackageAccess(row.id,callingPackage);
  }
  return (callbackIntent);
}",0.9867619247741122
187892,"private void browseTo(final File aDirectory){
  Log.i(TAG,""String_Node_Str"" + aDirectory.getAbsoluteFile());
  if (aDirectory.isDirectory()) {
    if (aDirectory.equals(currentDirectory)) {
      showDirectoryInput(true);
    }
 else {
      File previousDirectory=currentDirectory;
      currentDirectory=aDirectory;
      refreshList();
      selectInList(previousDirectory);
      refreshDirectoryPanel();
    }
  }
 else {
    if (mState == STATE_BROWSE) {
      openFile(aDirectory);
    }
 else     if (mState == STATE_PICK) {
      mEditFilename.setText(aDirectory.getName());
    }
  }
}","private void browseTo(final File aDirectory){
  if (aDirectory.isDirectory()) {
    if (aDirectory.equals(currentDirectory)) {
      showDirectoryInput(true);
    }
 else {
      File previousDirectory=currentDirectory;
      currentDirectory=aDirectory;
      refreshList();
      selectInList(previousDirectory);
      refreshDirectoryPanel();
    }
  }
 else {
    if (mState == STATE_BROWSE) {
      openFile(aDirectory);
    }
 else     if (mState == STATE_PICK) {
      mEditFilename.setText(aDirectory.getName());
    }
  }
}",0.9440993788819876
187893,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.filelist);
  getListView().setOnCreateContextMenuListener(this);
  getListView().setEmptyView(findViewById(R.id.empty));
  mDirectoryButtons=(LinearLayout)findViewById(R.id.directory_buttons);
  mEditFilename=(EditText)findViewById(R.id.filename);
  mButtonPick=(Button)findViewById(R.id.button_pick);
  mButtonPick.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      pickFile();
    }
  }
);
  mDirectoryInput=null;
  getMimeTypes();
  getSdCardPath();
  mState=STATE_BROWSE;
  Intent intent=getIntent();
  String action=intent.getAction();
  File browseto=new File(""String_Node_Str"");
  if (!TextUtils.isEmpty(mSdCardPath)) {
    browseto=new File(mSdCardPath);
  }
  if (action != null && action.equals(FileManagerIntents.ACTION_PICK_FILE)) {
    mState=STATE_PICK;
    File file=FileUtils.getFile(intent.getData());
    if (file != null) {
      browseto=FileUtils.getPathWithoutFilename(file);
      mEditFilename.setText(file.getName());
    }
 else {
    }
    String title=intent.getStringExtra(FileManagerIntents.EXTRA_TITLE);
    if (title != null) {
      setTitle(title);
    }
    String buttontext=intent.getStringExtra(FileManagerIntents.EXTRA_BUTTON_TEXT);
    if (buttontext != null) {
      mButtonPick.setText(buttontext);
    }
  }
 else {
    mState=STATE_BROWSE;
    mEditFilename.setVisibility(View.GONE);
    mButtonPick.setVisibility(View.GONE);
  }
  if (icicle != null) {
    browseto=new File(icicle.getString(BUNDLE_CURRENT_DIRECTORY));
    mContextFile=new File(icicle.getString(BUNDLE_CONTEXT_FILE));
    mContextText=icicle.getString(BUNDLE_CONTEXT_TEXT);
    boolean show=icicle.getBoolean(BUNDLE_SHOW_DIRECTORY_INPUT);
    showDirectoryInput(show);
  }
  browseTo(browseto);
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.filelist);
  getListView().setOnCreateContextMenuListener(this);
  getListView().setEmptyView(findViewById(R.id.empty));
  mDirectoryButtons=(LinearLayout)findViewById(R.id.directory_buttons);
  mEditFilename=(EditText)findViewById(R.id.filename);
  mButtonPick=(Button)findViewById(R.id.button_pick);
  mButtonPick.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View arg0){
      pickFile();
    }
  }
);
  mDirectoryInput=null;
  getMimeTypes();
  getSdCardPath();
  mState=STATE_BROWSE;
  Intent intent=getIntent();
  String action=intent.getAction();
  File browseto=new File(""String_Node_Str"");
  if (!TextUtils.isEmpty(mSdCardPath)) {
    browseto=new File(mSdCardPath);
  }
  if (action != null && action.equals(FileManagerIntents.ACTION_PICK_FILE)) {
    mState=STATE_PICK;
    File file=FileUtils.getFile(intent.getData());
    if (file != null) {
      File dir=FileUtils.getPathWithoutFilename(file);
      if (file.isDirectory()) {
        browseto=dir;
      }
      mEditFilename.setText(file.getName());
    }
 else {
    }
    String title=intent.getStringExtra(FileManagerIntents.EXTRA_TITLE);
    if (title != null) {
      setTitle(title);
    }
    String buttontext=intent.getStringExtra(FileManagerIntents.EXTRA_BUTTON_TEXT);
    if (buttontext != null) {
      mButtonPick.setText(buttontext);
    }
  }
 else {
    mState=STATE_BROWSE;
    mEditFilename.setVisibility(View.GONE);
    mButtonPick.setVisibility(View.GONE);
  }
  if (icicle != null) {
    browseto=new File(icicle.getString(BUNDLE_CURRENT_DIRECTORY));
    mContextFile=new File(icicle.getString(BUNDLE_CONTEXT_FILE));
    mContextText=icicle.getString(BUNDLE_CONTEXT_TEXT);
    boolean show=icicle.getBoolean(BUNDLE_SHOW_DIRECTORY_INPUT);
    showDirectoryInput(show);
  }
  browseTo(browseto);
}",0.9798657718120806
187894,"/** 
 * Returns the path only (without file name).
 * @param file
 * @return
 */
public static File getPathWithoutFilename(File file){
  if (file != null) {
    String filename=file.getName();
    String filepath=file.getAbsolutePath();
    String pathwithoutname=filepath.substring(0,filepath.length() - filename.length());
    if (pathwithoutname.endsWith(""String_Node_Str"")) {
      pathwithoutname=pathwithoutname.substring(0,pathwithoutname.length() - 1);
    }
    return new File(pathwithoutname);
  }
  return null;
}","/** 
 * Returns the path only (without file name).
 * @param file
 * @return
 */
public static File getPathWithoutFilename(File file){
  if (file != null) {
    if (file.isDirectory()) {
      return file;
    }
 else {
      String filename=file.getName();
      String filepath=file.getAbsolutePath();
      String pathwithoutname=filepath.substring(0,filepath.length() - filename.length());
      if (pathwithoutname.endsWith(""String_Node_Str"")) {
        pathwithoutname=pathwithoutname.substring(0,pathwithoutname.length() - 1);
      }
      return new File(pathwithoutname);
    }
  }
  return null;
}",0.9267431597528684
187895,"/** 
 * Opens the file manager.
 */
private void openFileManager(){
  String fileName=mEditText.getText().toString();
  Intent intent=new Intent(FileManagerIntents.ACTION_PICK_FILE);
  intent.setData(Uri.parse(""String_Node_Str"" + fileName));
  intent.putExtra(FileManagerIntents.EXTRA_TITLE,getString(R.string.open_title));
  intent.putExtra(FileManagerIntents.EXTRA_BUTTON_TEXT,getString(R.string.open_button));
  try {
    startActivityForResult(intent,REQUEST_CODE_PICK_FILE);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.no_filemanager_installed,Toast.LENGTH_SHORT).show();
  }
}","/** 
 * Opens the file manager.
 */
private void openFileManager(){
  String fileName=mEditText.getText().toString();
  Intent intent=new Intent(FileManagerIntents.ACTION_PICK_FILE);
  intent.setData(Uri.parse(""String_Node_Str"" + fileName));
  intent.putExtra(FileManagerIntents.EXTRA_TITLE,getString(R.string.open_title));
  intent.putExtra(FileManagerIntents.EXTRA_BUTTON_TEXT,getString(R.string.open_button));
  intent.putExtra(FileManagerIntents.EXTRA_TITLE,""String_Node_Str"");
  intent.putExtra(FileManagerIntents.EXTRA_BUTTON_TEXT,""String_Node_Str"");
  try {
    startActivityForResult(intent,REQUEST_CODE_PICK_FILE);
  }
 catch (  ActivityNotFoundException e) {
    Toast.makeText(this,R.string.no_filemanager_installed,Toast.LENGTH_SHORT).show();
  }
}",0.8953488372093024
187896,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('3','a').setIcon(android.R.drawable.ic_menu_add);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(Menu.CATEGORY_ALTERNATIVE,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ITEM_INSERT,0,R.string.menu_insert).setShortcut('3','a').setIcon(android.R.drawable.ic_menu_add);
  UpdateMenu.addUpdateMenu(this,menu,0,MENU_UPDATE,0,R.string.update);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(android.R.drawable.ic_menu_info_details).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  Log.i(TAG,""String_Node_Str"" + intent.getDataString());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  MenuIntentOptionsWithIcons menu2=new MenuIntentOptionsWithIcons(this,menu);
  menu2.addIntentOptions(CATEGORY_ALTERNATIVE_GLOBAL,0,0,new ComponentName(this,NotesList.class),null,intent,0,null);
  return true;
}",0.953283683141503
187897,"@Override protected void onPause(){
  super.onPause();
  if (mCursor != null) {
    ContentValues values=new ContentValues();
    long now=System.currentTimeMillis();
    values.put(Durations.MODIFIED_DATE,now);
    String text=mText.getText().toString();
    values.put(Durations.TITLE,text);
    mDuration=mDurationPicker.getDuration();
    values.put(Durations.DURATION,mDuration);
    values.put(Durations.DEADLINE_DATE,mDeadline);
    values.put(Durations.RING,mRing);
    Log.i(TAG,""String_Node_Str"" + mRing);
    String uristring=null;
    if (mRingtoneUri != null) {
      uristring=mRingtoneUri.toString();
    }
    values.put(Durations.RINGTONE,uristring);
    Log.i(TAG,""String_Node_Str"" + uristring);
    values.put(Durations.VIBRATE,mVibrate);
    Log.i(TAG,""String_Node_Str"" + mVibrate);
    getContentResolver().update(mUri,values,null,null);
  }
}","@Override protected void onPause(){
  super.onPause();
  if (mCursor != null) {
    ContentValues values=new ContentValues();
    long now=System.currentTimeMillis();
    values.put(Durations.MODIFIED_DATE,now);
    String text=mText.getText().toString();
    values.put(Durations.TITLE,text);
    mDuration=mDurationPicker.getDuration();
    values.put(Durations.DURATION,mDuration);
    values.put(Durations.DEADLINE_DATE,mDeadline);
    values.put(Durations.RING,mRing);
    Log.i(TAG,""String_Node_Str"" + mRing);
    String uristring=null;
    if (mRingtoneUri != null) {
      uristring=mRingtoneUri.toString();
    }
    values.put(Durations.RINGTONE,uristring);
    Log.i(TAG,""String_Node_Str"" + uristring);
    values.put(Durations.VIBRATE,mVibrate);
    Log.i(TAG,""String_Node_Str"" + mVibrate);
    getContentResolver().update(mUri,values,null,null);
  }
  mHandler.removeMessages(MSG_UPDATE_DISPLAY);
}",0.9735211267605632
187898,"@Override public void onCheckedChanged(CompoundButton view,boolean checked){
  if (checked) {
    mVibrate=CHECKED;
  }
 else {
    mVibrate=UNCHECKED;
  }
}","@Override public void onCheckedChanged(CompoundButton view,boolean checked){
  setVibrate(checked);
}",0.7131782945736435
187899,"private final void cont(){
  mCountdownState=STATE_COUNTDOWN_RUNNING;
  mStartCountdown=true;
  long now=System.currentTimeMillis();
  mDuration=mDurationPicker.getDuration();
  mDeadline=now + mDuration;
  mDuration=mOriginalDuration;
  mDurationPicker.setDuration(mDuration);
  cancelAlarm();
  mHandler.removeMessages(MSG_UPDATE_DISPLAY);
  setAlarm(mDeadline);
  updateViews();
}","private final void cont(){
  mCountdownState=STATE_COUNTDOWN_RUNNING;
  long now=System.currentTimeMillis();
  mDuration=mDurationPicker.getDuration();
  mDeadline=now + mDuration;
  mDuration=mOriginalDuration;
  mDurationPicker.setDuration(mDuration);
  cancelAlarm();
  mHandler.removeMessages(MSG_UPDATE_DISPLAY);
  setAlarm(mDeadline);
  updateViews();
}",0.967654986522911
187900,"/** 
 */
private void updateCountdown(){
  long now=System.currentTimeMillis();
  long delta=mDeadline - now;
  if (mCountdownState == STATE_COUNTDOWN_MODIFY) {
    mDurationPicker.setVisibility(View.VISIBLE);
    mCountdownView.setVisibility(View.INVISIBLE);
  }
 else   if (delta > 0) {
    mCountdownState=STATE_COUNTDOWN_RUNNING;
    mDurationPicker.setVisibility(View.INVISIBLE);
    mCountdownView.setVisibility(View.VISIBLE);
    mCountdownView.setText(""String_Node_Str"" + CountdownUtils.getDurationString(delta));
    mCountdownView.setTextAppearance(this,android.R.style.TextAppearance_Large);
    mCountdownView.setTextSize(64);
    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_UPDATE_DISPLAY),1000);
  }
 else   if (delta > -3000) {
    mCountdownState=STATE_COUNTDOWN_RUNNING;
    mDurationPicker.setVisibility(View.INVISIBLE);
    mCountdownView.setVisibility(View.VISIBLE);
    mCountdownView.setText(""String_Node_Str"" + CountdownUtils.getDurationString(0));
    mCountdownView.setTextColor(0xffff0000);
    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_UPDATE_DISPLAY),1000);
  }
 else {
    mCountdownState=STATE_COUNTDOWN_IDLE;
    mDurationPicker.setVisibility(View.VISIBLE);
    mCountdownView.setVisibility(View.INVISIBLE);
  }
}","/** 
 */
private void updateCountdown(){
  long now=System.currentTimeMillis();
  long delta=mDeadline - now;
  if (mCountdownState == STATE_COUNTDOWN_MODIFY) {
    mDurationPicker.setVisibility(View.VISIBLE);
    mCountdownView.setVisibility(View.INVISIBLE);
  }
 else   if (delta > 0) {
    mCountdownState=STATE_COUNTDOWN_RUNNING;
    mDurationPicker.setVisibility(View.INVISIBLE);
    mCountdownView.setVisibility(View.VISIBLE);
    mCountdownView.setText(""String_Node_Str"" + CountdownUtils.getDurationString(delta));
    mCountdownView.setTextAppearance(this,android.R.style.TextAppearance_Large);
    mCountdownView.setTextSize(64);
    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_UPDATE_DISPLAY),1000);
    if (delta < 2000) {
      ContentValues values=new ContentValues();
      values.put(Durations.TITLE,mText.getText().toString());
      getContentResolver().update(mUri,values,null,null);
      mCursor.requery();
    }
  }
 else   if (delta > -3000) {
    mCountdownState=STATE_COUNTDOWN_RUNNING;
    mDurationPicker.setVisibility(View.INVISIBLE);
    mCountdownView.setVisibility(View.VISIBLE);
    mCountdownView.setText(""String_Node_Str"" + CountdownUtils.getDurationString(0));
    mCountdownView.setTextColor(0xffff0000);
    mHandler.sendMessageDelayed(mHandler.obtainMessage(MSG_UPDATE_DISPLAY),1000);
  }
 else {
    mCountdownState=STATE_COUNTDOWN_IDLE;
    mDurationPicker.setVisibility(View.VISIBLE);
    mCountdownView.setVisibility(View.INVISIBLE);
  }
}",0.919173613628126
187901,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  mStartCountdown=false;
  mCountdownState=STATE_COUNTDOWN_IDLE;
  mRingtoneType=RingtoneManager.TYPE_ALL;
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
    cancelNotification(mUri);
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    ContentValues cv=new ContentValues();
    cv.put(Durations.RING,CHECKED);
    cv.put(Durations.RINGTONE,RingtoneManager.getDefaultUri(mRingtoneType).toString());
    cv.put(Durations.VIBRATE,CHECKED);
    mUri=getContentResolver().insert(intent.getData(),cv);
    intent.setAction(Intent.ACTION_EDIT);
    intent.setData(mUri);
    setIntent(intent);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.countdown_editor);
  mText=(EditText)findViewById(R.id.title);
  mDurationPicker=(DurationPicker)findViewById(R.id.durationpicker);
  mDurationPicker.setCurrentMinute(0);
  mDurationPicker.setCurrentSecond(0);
  mCountdownView=(TextView)findViewById(R.id.countdown);
  mStart=(Button)findViewById(R.id.start);
  mStart.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      start();
    }
  }
);
  mStop=(Button)findViewById(R.id.stop);
  mStop.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      stop();
    }
  }
);
  mModify=(Button)findViewById(R.id.modify);
  mModify.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      modify();
    }
  }
);
  mCont=(Button)findViewById(R.id.cont);
  mCont.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      cont();
    }
  }
);
  mRingtoneView=(CheckBox)findViewById(R.id.ringtone);
  mRingtoneView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton view,    boolean checked){
      setRingtone(checked);
    }
  }
);
  mVibrateView=(CheckBox)findViewById(R.id.vibrate);
  mVibrateView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton view,    boolean checked){
      if (checked) {
        mVibrate=CHECKED;
      }
 else {
        mVibrate=UNCHECKED;
      }
    }
  }
);
  mCursor=managedQuery(mUri,Durations.PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  mCountdownState=STATE_COUNTDOWN_IDLE;
  mRingtoneType=RingtoneManager.TYPE_ALL;
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
    cancelNotification(mUri);
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    ContentValues cv=new ContentValues();
    cv.put(Durations.RING,CHECKED);
    cv.put(Durations.RINGTONE,RingtoneManager.getDefaultUri(mRingtoneType).toString());
    cv.put(Durations.VIBRATE,CHECKED);
    mUri=getContentResolver().insert(intent.getData(),cv);
    intent.setAction(Intent.ACTION_EDIT);
    intent.setData(mUri);
    setIntent(intent);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.countdown_editor);
  mText=(EditText)findViewById(R.id.title);
  mDurationPicker=(DurationPicker)findViewById(R.id.durationpicker);
  mDurationPicker.setCurrentMinute(0);
  mDurationPicker.setCurrentSecond(0);
  mCountdownView=(TextView)findViewById(R.id.countdown);
  mStart=(Button)findViewById(R.id.start);
  mStart.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      start();
    }
  }
);
  mStop=(Button)findViewById(R.id.stop);
  mStop.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      stop();
    }
  }
);
  mModify=(Button)findViewById(R.id.modify);
  mModify.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      modify();
    }
  }
);
  mCont=(Button)findViewById(R.id.cont);
  mCont.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View arg0){
      cont();
    }
  }
);
  mRingtoneView=(CheckBox)findViewById(R.id.ringtone);
  mRingtoneView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton view,    boolean checked){
      setRing(checked);
    }
  }
);
  mVibrateView=(CheckBox)findViewById(R.id.vibrate);
  mVibrateView.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton view,    boolean checked){
      setVibrate(checked);
    }
  }
);
  mCursor=managedQuery(mUri,Durations.PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}",0.978656949505466
187902,"private final void start(){
  mCountdownState=STATE_COUNTDOWN_RUNNING;
  mStartCountdown=true;
  long now=System.currentTimeMillis();
  mDuration=mDurationPicker.getDuration();
  mDeadline=now + mDuration;
  setAlarm(mDeadline);
  updateViews();
}","private final void start(){
  mCountdownState=STATE_COUNTDOWN_RUNNING;
  long now=System.currentTimeMillis();
  mDuration=mDurationPicker.getDuration();
  mDeadline=now + mDuration;
  setAlarm(mDeadline);
  updateViews();
}",0.948936170212766
187903,"/** 
 * Modify the current time. Note that the countdown continues to run in the background. One can see this by pressing the ""back"" button, then entering again.
 */
private final void modify(){
  mCountdownState=STATE_COUNTDOWN_MODIFY;
  long now=System.currentTimeMillis();
  long temporaryDuration=mDeadline - now;
  if (temporaryDuration < 0) {
    temporaryDuration=0;
  }
  mOriginalDuration=mDuration;
  mDurationPicker.setDuration(temporaryDuration);
  mStartCountdown=true;
  updateViews();
}","/** 
 * Modify the current time. Note that the countdown continues to run in the background. One can see this by pressing the ""back"" button, then entering again.
 */
private final void modify(){
  mCountdownState=STATE_COUNTDOWN_MODIFY;
  long now=System.currentTimeMillis();
  long temporaryDuration=mDeadline - now;
  if (temporaryDuration < 0) {
    temporaryDuration=0;
  }
  mOriginalDuration=mDuration;
  mDurationPicker.setDuration(temporaryDuration);
  updateViews();
}",0.9754601226993864
187904,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    mUri=getContentResolver().insert(intent.getData(),null);
    intent.setAction(Intent.ACTION_EDIT);
    setIntent(intent);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    mUri=getContentResolver().insert(intent.getData(),null);
    intent.setAction(Intent.ACTION_EDIT);
    intent.setData(mUri);
    setIntent(intent);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}",0.987487969201155
187905,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.title_editor);
  mUri=getIntent().getData();
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  mText=(EditText)this.findViewById(R.id.title);
  mText.setOnClickListener(this);
  Button b=(Button)findViewById(R.id.ok);
  b.setOnClickListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.title_editor);
  mUri=getIntent().getData();
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  mText=(EditText)this.findViewById(R.id.title);
  Button b=(Button)findViewById(R.id.ok);
  b.setOnClickListener(this);
}",0.8347107438016529
187906,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    mUri=getContentResolver().insert(intent.getData(),null);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  final Intent intent=getIntent();
  final String action=intent.getAction();
  if (Intent.ACTION_EDIT.equals(action) || Intent.ACTION_VIEW.equals(action)) {
    mState=STATE_EDIT;
    mUri=intent.getData();
  }
 else   if (Intent.ACTION_INSERT.equals(action)) {
    mState=STATE_INSERT;
    mUri=getContentResolver().insert(intent.getData(),null);
    intent.setAction(Intent.ACTION_EDIT);
    setIntent(intent);
    if (mUri == null) {
      Log.e(TAG,""String_Node_Str"" + getIntent().getData());
      finish();
      return;
    }
    setResult(RESULT_OK,(new Intent()).setAction(mUri.toString()));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  setContentView(R.layout.note_editor);
  mText=(EditText)findViewById(R.id.note);
  mCursor=managedQuery(mUri,PROJECTION,null,null,null);
  if (savedInstanceState != null) {
    mOriginalContent=savedInstanceState.getString(ORIGINAL_CONTENT);
  }
}",0.9672873678912934
187907,"@Override public boolean onCreateOptionsMenu(Menu menu){
  boolean superResult=super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_USE_CENTER,R.string.locations_use_center,R.drawable.location_center001a);
  menu.add(0,MENU_RESTORE_VALUES,R.string.locations_restore_values,R.drawable.restore001a);
  menu.add(0,MENU_ABOUT,R.string.about,R.drawable.about001a);
  return superResult;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  boolean superResult=super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_USE_CENTER,0,R.string.locations_use_center).setIcon(R.drawable.location_center001a);
  menu.add(0,MENU_RESTORE_VALUES,0,R.string.locations_restore_values).setIcon(R.drawable.restore001a);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(R.drawable.about001a);
  return superResult;
}",0.9509433962264152
187908,"/** 
 * Creates the menu structure.
 */
@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ABOUT,R.string.about,R.drawable.about001a).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE,0,0,new ComponentName(this,OpenIntentsView.class),null,intent,0,null);
  return true;
}","/** 
 * Creates the menu structure.
 */
@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_ABOUT,0,R.string.about).setIcon(R.drawable.about001a).setShortcut('0','a');
  Intent intent=new Intent(null,getIntent().getData());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE,0,0,new ComponentName(this,OpenIntentsView.class),null,intent,0,null);
  return true;
}",0.9860064585575888
187909,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_OPEN_AUDIO,R.string.open_audio,R.drawable.music001a).setShortcut('0','o');
  menu.add(0,MENU_OPEN_VIDEO,R.string.open_video,R.drawable.video002a).setShortcut('0','o');
  Intent intent=new Intent(null,getIntent().getData());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE,0,0,new ComponentName(this,ShoppingView.class),null,intent,0,null);
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_OPEN_AUDIO,0,R.string.open_audio).setIcon(R.drawable.music001a).setShortcut('0','o');
  menu.add(0,MENU_OPEN_VIDEO,0,R.string.open_video).setIcon(R.drawable.video002a).setShortcut('0','o');
  Intent intent=new Intent(null,getIntent().getData());
  intent.addCategory(Intent.CATEGORY_ALTERNATIVE);
  menu.addIntentOptions(Menu.CATEGORY_ALTERNATIVE,0,0,new ComponentName(this,ShoppingView.class),null,intent,0,null);
  return true;
}",0.9754716981132076
187910,"public void onCreateContextMenu(ContextMenu contextmenu,View view,ContextMenuInfo info){
  contextmenu.add(0,MENU_MARK_ITEM,R.string.mark_item,R.drawable.shoppinglistcleanup001b).setShortcut('1','m');
  contextmenu.add(0,MENU_EDIT_ITEM,R.string.edit_item,R.drawable.shoppinglistrename001b).setShortcut('2','e');
  contextmenu.add(0,MENU_DELETE_ITEM,R.string.delete_item,R.drawable.shoppinglistdelete001b).setShortcut('3','d');
}","public void onCreateContextMenu(ContextMenu contextmenu,View view,ContextMenuInfo info){
  contextmenu.add(0,MENU_MARK_ITEM,0,R.string.mark_item).setIcon(R.drawable.shoppinglistcleanup001b).setShortcut('1','m');
  contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.edit_item).setIcon(R.drawable.shoppinglistrename001b).setShortcut('2','e');
  contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.delete_item).setIcon(R.drawable.shoppinglistdelete001b).setShortcut('3','d');
}",0.8706411698537683
187911,"/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mLinearLayoutBackground=(LinearLayout)findViewById(R.id.background);
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      fillItems();
      setListTheme(loadListTheme());
      checkListLength();
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      fillItems();
      checkListLength();
    }
  }
);
  mEditText=(EditText)findViewById(R.id.edittext_add_item);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      if (key.getAction() == key.ACTION_DOWN && keyCode == Integer.parseInt(getString(R.string.key_return))) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItems=(ListView)findViewById(R.id.list_items);
  mListItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        toggleItemBought(c);
      }
    }
  }
);
  mListItems.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      checkListLength();
    }
    public void onNothingSelected(    AdapterView arg0){
      checkListLength();
    }
  }
);
  mListItems.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,R.string.mark_item,R.drawable.shoppinglistcleanup001b).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,R.string.edit_item,R.drawable.shoppinglistrename001b).setShortcut('2','e');
      contextmenu.add(0,MENU_DELETE_ITEM,R.string.delete_item,R.drawable.shoppinglistdelete001b).setShortcut('3','d');
    }
  }
);
}","/** 
 * Hook up buttons, lists, and edittext with functionality.
 */
private void createView(){
  mLinearLayoutBackground=(LinearLayout)findViewById(R.id.background);
  mSpinnerListFilter=(Spinner)findViewById(R.id.spinner_listfilter);
  mSpinnerListFilter.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      fillItems();
      setListTheme(loadListTheme());
      checkListLength();
      bindGTalkIfNeeded();
    }
    public void onNothingSelected(    AdapterView arg0){
      fillItems();
      checkListLength();
    }
  }
);
  mEditText=(EditText)findViewById(R.id.edittext_add_item);
  mEditText.setOnKeyListener(new OnKeyListener(){
    public boolean onKey(    View v,    int keyCode,    KeyEvent key){
      if (key.getAction() == key.ACTION_DOWN && keyCode == Integer.parseInt(getString(R.string.key_return))) {
        insertNewItem();
        return true;
      }
      ;
      return false;
    }
  }
);
  Button button=(Button)findViewById(R.id.button_add_item);
  button.setOnClickListener(new OnClickListener(){
    public void onClick(    View v){
      insertNewItem();
    }
  }
);
  mLayoutParamsItems=new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  mListItems=(ListView)findViewById(R.id.list_items);
  mListItems.setOnItemClickListener(new OnItemClickListener(){
    public void onItemClick(    AdapterView parent,    View v,    int pos,    long id){
      Cursor c=(Cursor)parent.getItemAtPosition(pos);
      if (mState == STATE_PICK_ITEM) {
        pickItem(c);
      }
 else {
        toggleItemBought(c);
      }
    }
  }
);
  mListItems.setOnItemSelectedListener(new OnItemSelectedListener(){
    public void onItemSelected(    AdapterView parent,    View v,    int position,    long id){
      checkListLength();
    }
    public void onNothingSelected(    AdapterView arg0){
      checkListLength();
    }
  }
);
  mListItems.setOnCreateContextMenuListener(new View.OnCreateContextMenuListener(){
    public void onCreateContextMenu(    ContextMenu contextmenu,    View view,    ContextMenuInfo info){
      contextmenu.add(0,MENU_MARK_ITEM,0,R.string.mark_item).setIcon(R.drawable.shoppinglistcleanup001b).setShortcut('1','m');
      contextmenu.add(0,MENU_EDIT_ITEM,0,R.string.edit_item).setIcon(R.drawable.shoppinglistrename001b).setShortcut('2','e');
      contextmenu.add(0,MENU_DELETE_ITEM,0,R.string.delete_item).setIcon(R.drawable.shoppinglistdelete001b).setShortcut('3','d');
    }
  }
);
}",0.9924520998645248
187912,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_LIST,R.string.new_list,R.drawable.shoppinglistnew001b).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,R.string.clean_up_list,R.drawable.shoppinglistcleanup001b).setShortcut('1','c');
  menu.add(0,MENU_RENAME_LIST,R.string.rename_list,R.drawable.shoppinglistrename001b).setShortcut('2','r');
  ;
  menu.add(0,MENU_DELETE_LIST,R.string.delete_list,R.drawable.shoppinglistdelete001b).setShortcut('3','d');
  menu.add(0,MENU_SHARE,R.string.share,R.drawable.contact_share001a).setShortcut('4','s');
  menu.add(0,MENU_THEME,R.string.theme,R.drawable.shoppinglisttheme001a).setShortcut('5','t');
  menu.add(0,MENU_ADD_LOCATION_ALERT,R.string.shopping_add_alert,R.drawable.locations_add_alert001a).setShortcut('6','l');
  menu.add(0,MENU_SENSOR_SERVICE,R.string.shake_control,R.drawable.mobile_shake001a).setShortcut('0','s');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_LIST,0,R.string.new_list).setIcon(R.drawable.shoppinglistnew001b).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,0,R.string.clean_up_list).setIcon(R.drawable.shoppinglistcleanup001b).setShortcut('1','c');
  menu.add(0,MENU_RENAME_LIST,0,R.string.rename_list).setIcon(R.drawable.shoppinglistrename001b).setShortcut('2','r');
  ;
  menu.add(0,MENU_DELETE_LIST,0,R.string.delete_list).setIcon(R.drawable.shoppinglistdelete001b).setShortcut('3','d');
  menu.add(0,MENU_SHARE,0,R.string.share).setIcon(R.drawable.contact_share001a).setShortcut('4','s');
  menu.add(0,MENU_THEME,0,R.string.theme).setIcon(R.drawable.shoppinglisttheme001a).setShortcut('5','t');
  menu.add(0,MENU_ADD_LOCATION_ALERT,0,R.string.shopping_add_alert).setIcon(R.drawable.locations_add_alert001a).setShortcut('6','l');
  menu.add(0,MENU_SENSOR_SERVICE,0,R.string.shake_control).setIcon(R.drawable.mobile_shake001a).setShortcut('0','s');
  return true;
}",0.831
187913,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,PACKAGE_ADD_ID,R.string.menu_package_add,R.drawable.new_doc).setShortcut('3','i');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,PACKAGE_ADD_ID,0,R.string.menu_package_add).setIcon(R.drawable.new_doc).setShortcut('3','i');
  return true;
}",0.9689737470167064
187914,"/** 
 * Returns an array of Strings containing the supported sensor types.
 * @return array of Strings containing the supported sensor types
 */
public static String[] getSupportedSensors(){
  if (mClient.connected) {
    return mClient.getSupportedSensors();
  }
 else {
    return null;
  }
}","/** 
 * Returns an array of Strings containing the supported sensor types.
 * @return array of Strings containing the supported sensor types
 */
public static String[] getSupportedSensors(){
  if (mClient.connected) {
    return mClient.getSupportedSensors();
  }
 else {
    return new String[]{};
  }
}",0.9732441471571908
187915,"/** 
 * Confirm 'delete list' command by AlertDialog.
 */
private void deleteListConfirm(){
}","/** 
 * Confirm 'delete list' command by AlertDialog.
 */
private void deleteListConfirm(){
  new AlertDialog.Builder(this).setTitle(R.string.delete_list).setPositiveButton(R.string.ok,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
      deleteList();
    }
  }
).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    public void onClick(    DialogInterface dialog,    int whichButton){
    }
  }
).show();
}",0.3157894736842105
187916,"@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_LIST,0,R.string.new_list).setIcon(R.drawable.shoppinglistnew001b).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,0,R.string.clean_up_list).setIcon(R.drawable.shoppinglistcleanup001b).setShortcut('1','c');
  menu.add(0,MENU_RENAME_LIST,0,R.string.rename_list).setIcon(R.drawable.shoppinglistrename001b).setShortcut('2','r');
  ;
  menu.add(0,MENU_DELETE_LIST,0,R.string.delete_list).setIcon(R.drawable.shoppinglistdelete001b).setShortcut('3','d');
  menu.add(0,MENU_SHARE,0,R.string.share).setIcon(R.drawable.contact_share001a).setShortcut('4','s');
  menu.add(0,MENU_THEME,0,R.string.theme).setIcon(R.drawable.shoppinglisttheme001a).setShortcut('5','t');
  menu.add(0,MENU_ADD_LOCATION_ALERT,0,R.string.shopping_add_alert).setIcon(R.drawable.locations_add_alert001a).setShortcut('6','l');
  menu.add(0,MENU_SENSOR_SERVICE,0,R.string.shake_control).setIcon(R.drawable.mobile_shake001a).setShortcut('0','s');
  return true;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  super.onCreateOptionsMenu(menu);
  menu.add(0,MENU_NEW_LIST,0,R.string.new_list).setIcon(R.drawable.shoppinglistnew001b).setShortcut('0','n');
  menu.add(0,MENU_CLEAN_UP_LIST,0,R.string.clean_up_list).setIcon(R.drawable.shoppinglistcleanup001b).setShortcut('1','c');
  menu.add(0,MENU_RENAME_LIST,0,R.string.rename_list).setIcon(R.drawable.shoppinglistrename001b).setShortcut('2','r');
  ;
  menu.add(0,MENU_DELETE_LIST,0,R.string.delete_list).setIcon(R.drawable.shoppinglistdelete001b).setShortcut('3','d');
  menu.add(0,MENU_THEME,0,R.string.theme).setIcon(R.drawable.shoppinglisttheme001a).setShortcut('5','t');
  menu.add(0,MENU_ADD_LOCATION_ALERT,0,R.string.shopping_add_alert).setIcon(R.drawable.locations_add_alert001a).setShortcut('6','l');
  menu.add(0,MENU_SENSOR_SERVICE,0,R.string.shake_control).setIcon(R.drawable.mobile_shake001a).setShortcut('0','s');
  return true;
}",0.9486404833836858
187917,"public static void registerManagedService(String serviceClassName,long timeIntervall,boolean useWhileRoaming){
  long minTime=0;
  ContentValues cv=new ContentValues();
  Cursor c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,ManagedService.SERVICE_CLASS + ""String_Node_Str"" + serviceClassName+ ""String_Node_Str"",null,null);
  if (c != null && c.count() > 0) {
    c.first();
    c.updateString(c.getColumnIndex(ManagedService.TIME_INTERVALL),Long.toString(timeIntervall));
    c.updateString(c.getColumnIndex(ManagedService.DO_ROAMING),Boolean.toString(useWhileRoaming));
    c.commitUpdates();
    c.close();
  }
 else {
  }
  c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,null,null,null);
  c.first();
  minTime=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
  while (!c.isAfterLast()) {
    long l=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
    if (l < minTime) {
      minTime=l;
    }
    c.next();
  }
  c.close();
  c=mContentResolver.query(DateTime.CONTENT_URI,DateTime.PROJECTION,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null,null);
  String now=""String_Node_Str"" + System.currentTimeMillis();
  cv.put(DateTime.TIME,now);
  cv.put(DateTime.REOCCURENCE,minTime);
  cv.put(DateTime.INTENT,org.openintents.OpenIntents.SERVICE_MANAGER);
  cv.put(DateTime.NATURE,Alert.NATURE_SYSTEM);
  cv.put(DateTime.ACTIVATE_ON_BOOT,true);
  cv.put(DateTime.ACTIVE,true);
  cv.put(DateTime.TYPE,Alert.TYPE_DATE_TIME);
  if (c != null && c.count() > 0) {
    update(DateTime.CONTENT_URI,cv,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null);
    alarmManager.cancel(new Intent().setAction(org.openintents.OpenIntents.SERVICE_MANAGER));
    registerDateTimeAlert(cv);
  }
 else {
    insert(DateTime.CONTENT_URI,cv);
  }
}","public static void registerManagedService(String serviceClassName,long timeIntervall,boolean useWhileRoaming){
  long minTime=0;
  ContentValues cv=null;
  Cursor c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,ManagedService.SERVICE_CLASS + ""String_Node_Str"" + serviceClassName+ ""String_Node_Str"",null,null);
  if (c != null && c.count() > 0) {
    c.first();
    c.updateString(c.getColumnIndex(ManagedService.TIME_INTERVALL),Long.toString(timeIntervall));
    c.updateString(c.getColumnIndex(ManagedService.DO_ROAMING),Boolean.toString(useWhileRoaming));
    c.commitUpdates();
    c.close();
  }
 else {
    cv=new ContentValues();
    cv.put(ManagedService.SERVICE_CLASS,serviceClassName);
    cv.put(ManagedService.TIME_INTERVALL,timeIntervall);
    cv.put(ManagedService.DO_ROAMING,useWhileRoaming);
    insert(ManagedService.CONTENT_URI,cv);
  }
  c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,null,null,null);
  c.first();
  minTime=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
  while (!c.isAfterLast()) {
    long l=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
    if (l < minTime) {
      minTime=l;
    }
    c.next();
  }
  c.close();
  c=mContentResolver.query(DateTime.CONTENT_URI,DateTime.PROJECTION,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null,null);
  String now=""String_Node_Str"" + System.currentTimeMillis();
  cv=new ContentValues();
  cv.put(DateTime.TIME,now);
  cv.put(DateTime.REOCCURENCE,minTime);
  cv.put(DateTime.INTENT,org.openintents.OpenIntents.SERVICE_MANAGER);
  cv.put(DateTime.NATURE,Alert.NATURE_SYSTEM);
  cv.put(DateTime.ACTIVATE_ON_BOOT,true);
  cv.put(DateTime.ACTIVE,true);
  cv.put(DateTime.TYPE,Alert.TYPE_DATE_TIME);
  if (c != null && c.count() > 0) {
    update(DateTime.CONTENT_URI,cv,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null);
    alarmManager.cancel(new Intent().setAction(org.openintents.OpenIntents.SERVICE_MANAGER));
    registerDateTimeAlert(cv);
  }
 else {
    insert(DateTime.CONTENT_URI,cv);
  }
}",0.9294261294261296
187918,"@Override protected Cursor queryInternal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + uri + ""String_Node_Str"");
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String orderBy=null;
  boolean didMatch=false;
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    qb.setTables(TABLE_ALERTS);
  qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
  orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
  orderBy=sortOrder;
}
break;
case ALERT_LOCATION:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_COMBINED:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_GENERIC_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_LOCATION_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_COMBINED_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case MANAGED_SERVICE:
qb.setTables(TABLE_SERVICES);
qb.setProjectionMap(SERVICE_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case MANAGED_SERVICE_ID:
qb.setTables(TABLE_SERVICES);
qb.setProjectionMap(SERVICE_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
Cursor c=qb.query(getDatabase(),projection,selection,selectionArgs,null,null,orderBy);
Log.v(TAG,""String_Node_Str"" + selection + ""String_Node_Str""+ (selectionArgs != null && selectionArgs.length > 0 ? selectionArgs[0] : selectionArgs)+ ""String_Node_Str""+ c.count());
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
}","@Override protected Cursor queryInternal(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + uri + ""String_Node_Str"");
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  SQLiteQueryBuilder qb=new SQLiteQueryBuilder();
  String orderBy=null;
  boolean didMatch=false;
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    qb.setTables(TABLE_ALERTS);
  qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
  orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
  orderBy=sortOrder;
}
break;
case ALERT_LOCATION:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_COMBINED:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_DATE_TIME:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Generic.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_GENERIC_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_LOCATION_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_DATE_TIME_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case ALERT_COMBINED_ID:
qb.setTables(TABLE_ALERTS);
qb.setProjectionMap(GENERIC_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case MANAGED_SERVICE:
qb.setTables(TABLE_SERVICES);
qb.setProjectionMap(SERVICE_PROJECTION_MAP);
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
case MANAGED_SERVICE_ID:
qb.setTables(TABLE_SERVICES);
qb.setProjectionMap(SERVICE_PROJECTION_MAP);
qb.appendWhere(""String_Node_Str"" + uri.getLastPathSegment());
if (TextUtils.isEmpty(sortOrder)) {
orderBy=Alert.Location.DEFAULT_SORT_ORDER;
}
 else {
orderBy=sortOrder;
}
break;
default :
throw new IllegalArgumentException(""String_Node_Str"" + uri);
}
Cursor c=qb.query(getDatabase(),projection,selection,selectionArgs,null,null,orderBy);
Log.v(TAG,""String_Node_Str"" + selection + ""String_Node_Str""+ (selectionArgs != null && selectionArgs.length > 0 ? selectionArgs[0] : selectionArgs)+ ""String_Node_Str""+ c.count());
c.setNotificationUri(getContext().getContentResolver(),uri);
return c;
}",0.9197104310628496
187919,"@Override protected int deleteInternal(Uri uri,String selection,String[] selectionArgs){
  int res=0;
  String alertID=""String_Node_Str"";
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    res=getDatabase().delete(TABLE_ALERTS,selection,selectionArgs);
  break;
case ALERT_GENERIC_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_ALERTS,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
case ALERT_LOCATION:
res=getDatabase().delete(TABLE_ALERTS,selection,selectionArgs);
break;
case ALERT_LOCATION_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_ALERTS,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
case MANAGED_SERVICE:
res=getDatabase().delete(TABLE_SERVICES,selection,selectionArgs);
break;
case MANAGED_SERVICE_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_SERVICES,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
}
getContext().getContentResolver().notifyChange(uri,null);
return res;
}","@Override protected int deleteInternal(Uri uri,String selection,String[] selectionArgs){
  int res=0;
  String alertID=""String_Node_Str"";
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    res=getDatabase().delete(TABLE_ALERTS,selection,selectionArgs);
  break;
case ALERT_GENERIC_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_ALERTS,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
case ALERT_LOCATION:
res=getDatabase().delete(TABLE_ALERTS,selection,selectionArgs);
break;
case ALERT_LOCATION_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_ALERTS,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
case ALERT_DATE_TIME:
res=getDatabase().delete(TABLE_ALERTS,selection,selectionArgs);
break;
case ALERT_DATE_TIME_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_ALERTS,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
case MANAGED_SERVICE:
res=getDatabase().delete(TABLE_SERVICES,selection,selectionArgs);
break;
case MANAGED_SERVICE_ID:
alertID=uri.getPathSegments().get(1);
res=getDatabase().delete(TABLE_SERVICES,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
break;
}
getContext().getContentResolver().notifyChange(uri,null);
return res;
}",0.8897612037945698
187920,"@Override protected Uri insertInternal(Uri uri,ContentValues values){
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    if (!values.containsKey(Alert.Generic.NATURE)) {
      values.put(Alert.Generic.NATURE,Alert.NATURE_USER);
    }
  rowID=getDatabase().insert(TABLE_ALERTS,""String_Node_Str"",values);
if (rowID > 0) {
  Uri nUri=ContentUris.withAppendedId(Alert.Generic.CONTENT_URI,rowID);
  getContext().getContentResolver().notifyChange(nUri,null);
  return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
case ALERT_LOCATION:
if (!values.containsKey(Alert.Generic.NATURE)) {
values.put(Alert.Generic.NATURE,Alert.NATURE_USER);
}
if (!values.containsKey(Alert.Location.TYPE)) {
values.put(Alert.Location.TYPE,Alert.TYPE_LOCATION);
}
rowID=getDatabase().insert(TABLE_ALERTS,""String_Node_Str"",values);
if (rowID > 0) {
Uri nUri=ContentUris.withAppendedId(Alert.Location.CONTENT_URI,rowID);
getContext().getContentResolver().notifyChange(nUri,null);
return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
case MANAGED_SERVICE:
rowID=getDatabase().insert(TABLE_SERVICES,""String_Node_Str"",values);
if (rowID > 0) {
Uri nUri=ContentUris.withAppendedId(Alert.ManagedService.CONTENT_URI,rowID);
getContext().getContentResolver().notifyChange(nUri,null);
return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
}
return null;
}","@Override protected Uri insertInternal(Uri uri,ContentValues values){
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  long rowID=0;
switch (match) {
case ALERT_GENERIC:
    if (!values.containsKey(Alert.Generic.NATURE)) {
      values.put(Alert.Generic.NATURE,Alert.NATURE_USER);
    }
  rowID=getDatabase().insert(TABLE_ALERTS,""String_Node_Str"",values);
if (rowID > 0) {
  Uri nUri=ContentUris.withAppendedId(Alert.Generic.CONTENT_URI,rowID);
  getContext().getContentResolver().notifyChange(nUri,null);
  return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
case ALERT_LOCATION:
if (!values.containsKey(Alert.Generic.NATURE)) {
values.put(Alert.Generic.NATURE,Alert.NATURE_USER);
}
if (!values.containsKey(Alert.Location.TYPE)) {
values.put(Alert.Location.TYPE,Alert.TYPE_LOCATION);
}
rowID=getDatabase().insert(TABLE_ALERTS,""String_Node_Str"",values);
if (rowID > 0) {
Uri nUri=ContentUris.withAppendedId(Alert.Location.CONTENT_URI,rowID);
getContext().getContentResolver().notifyChange(nUri,null);
return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
case ALERT_DATE_TIME:
if (!values.containsKey(Alert.Generic.NATURE)) {
values.put(Alert.Generic.NATURE,Alert.NATURE_USER);
}
if (!values.containsKey(Alert.Location.TYPE)) {
values.put(Alert.Location.TYPE,Alert.TYPE_LOCATION);
}
rowID=getDatabase().insert(TABLE_ALERTS,""String_Node_Str"",values);
if (rowID > 0) {
Uri nUri=ContentUris.withAppendedId(Alert.DateTime.CONTENT_URI,rowID);
getContext().getContentResolver().notifyChange(nUri,null);
return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
case MANAGED_SERVICE:
rowID=getDatabase().insert(TABLE_SERVICES,""String_Node_Str"",values);
if (rowID > 0) {
Uri nUri=ContentUris.withAppendedId(Alert.ManagedService.CONTENT_URI,rowID);
getContext().getContentResolver().notifyChange(nUri,null);
return nUri;
}
throw new SQLException(""String_Node_Str"" + uri);
}
return null;
}",0.8255269320843092
187921,"protected int updateInternal(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  int result=0;
  String alertID=""String_Node_Str"";
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  String rowID=""String_Node_Str"";
switch (match) {
case ALERT_GENERIC:
    result=getDatabase().update(TABLE_ALERTS,values,selection,selectionArgs);
  getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_GENERIC_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_LOCATION:
result=getDatabase().update(TABLE_ALERTS,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_LOCATION_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case MANAGED_SERVICE:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_SERVICES,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case MANAGED_SERVICE_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
}
return result;
}","protected int updateInternal(Uri uri,ContentValues values,String selection,String[] selectionArgs){
  int result=0;
  String alertID=""String_Node_Str"";
  int match=URL_MATCHER.match(uri);
  Log.d(this.TAG,""String_Node_Str"" + match + ""String_Node_Str"");
  String rowID=""String_Node_Str"";
switch (match) {
case ALERT_GENERIC:
    result=getDatabase().update(TABLE_ALERTS,values,selection,selectionArgs);
  getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_GENERIC_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_LOCATION:
result=getDatabase().update(TABLE_ALERTS,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_LOCATION_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_DATE_TIME:
result=getDatabase().update(TABLE_ALERTS,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case ALERT_DATE_TIME_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case MANAGED_SERVICE:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_SERVICES,values,selection,selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
case MANAGED_SERVICE_ID:
alertID=uri.getPathSegments().get(1);
result=getDatabase().update(TABLE_ALERTS,values,""String_Node_Str"" + alertID + (!TextUtils.isEmpty(selection) ? ""String_Node_Str"" + selection + ')' : ""String_Node_Str""),selectionArgs);
getContext().getContentResolver().notifyChange(uri,null);
break;
}
return result;
}",0.8446096654275093
187922,"@Override protected void onResume(){
  super.onResume();
  if (mState == STATE_MAIN || mState == STATE_VIEW_LIST) {
    setTitle(getText(R.string.shopping_list));
  }
 else   if ((mState == STATE_PICK_ITEM) || (mState == STATE_GET_CONTENT_ITEM)) {
    setTitle(getText(R.string.pick_item));
    setTitleColor(0xFFAAAAFF);
  }
  checkListLength();
  if (!mUpdating) {
    mUpdating=true;
  }
  if (mGTalkSender != null) {
    bindGTalkIfNeeded();
  }
  IntentFilter intentfilter=new IntentFilter(OpenIntents.REFRESH_ACTION);
  registerReceiver(mIntentReceiver,intentfilter);
}","@Override protected void onResume(){
  super.onResume();
  Log.i(TAG,""String_Node_Str"");
  if (mState == STATE_MAIN || mState == STATE_VIEW_LIST) {
    setTitle(getText(R.string.shopping_list));
  }
 else   if ((mState == STATE_PICK_ITEM) || (mState == STATE_GET_CONTENT_ITEM)) {
    setTitle(getText(R.string.pick_item));
    setTitleColor(0xFFAAAAFF);
  }
  checkListLength();
  if (!mUpdating) {
    mUpdating=true;
  }
  if (mGTalkSender != null) {
    bindGTalkIfNeeded();
  }
  IntentFilter intentfilter=new IntentFilter(OpenIntents.REFRESH_ACTION);
  registerReceiver(mIntentReceiver,intentfilter);
}",0.9729272419627748
187923,"@Override protected void onFreeze(Bundle outState){
  super.onFreeze(outState);
  String s=mEditText.getText().toString();
  outState.putString(ORIGINAL_ITEM,s);
  mUpdating=false;
  if (mGTalkSender != null) {
    mGTalkSender.unbindGTalkService();
  }
}","@Override protected void onFreeze(Bundle outState){
  super.onFreeze(outState);
  Log.i(TAG,""String_Node_Str"");
  String s=mEditText.getText().toString();
  outState.putString(ORIGINAL_ITEM,s);
  mUpdating=false;
}",0.7761194029850746
187924,"@Override protected void onPause(){
  super.onPause();
  unregisterReceiver(mIntentReceiver);
}","@Override protected void onPause(){
  super.onPause();
  Log.i(TAG,""String_Node_Str"");
  unregisterReceiver(mIntentReceiver);
  if (mGTalkSender != null) {
    mGTalkSender.unbindGTalkService();
  }
}",0.6440677966101694
187925,"/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  setContentView(R.layout.shopping);
  Shopping.mContentResolver=getContentResolver();
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=(int)Shopping.getDefaultList();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action.equals(Intent.MAIN_ACTION)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (action.equals(Intent.VIEW_ACTION)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(intent.getData().getLastPathSegment());
    }
 else {
      mListUri=intent.getData();
    }
  }
 else   if (action.equals(Intent.PICK_ACTION)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (action.equals(Intent.GET_CONTENT_ACTION)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  mTypefaceHandwriting=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypefaceDigital=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypeface=null;
  mTypeface=mTypefaceHandwriting;
  createView();
  setListTheme(1);
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  fillItems();
  setListTheme(loadListTheme());
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setText(prevText);
    }
  }
  mEditText.requestFocus();
  mIntentReceiver=new ListIntentReceiver();
}","/** 
 * Called when the activity is first created.
 */
@Override public void onCreate(Bundle icicle){
  super.onCreate(icicle);
  Log.i(TAG,""String_Node_Str"");
  setContentView(R.layout.shopping);
  Shopping.mContentResolver=getContentResolver();
  mGTalkSender=new GTalkSender(this);
  mUpdateInterval=2000;
  mUpdating=false;
  mListUri=Shopping.Lists.CONTENT_URI;
  mItemUri=Shopping.Items.CONTENT_URI;
  int defaultShoppingList=(int)Shopping.getDefaultList();
  final Intent intent=getIntent();
  final String type=intent.resolveType(this);
  final String action=intent.getAction();
  if (action.equals(Intent.MAIN_ACTION)) {
    mState=STATE_MAIN;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
    intent.setData(mListUri);
  }
 else   if (action.equals(Intent.VIEW_ACTION)) {
    mState=STATE_VIEW_LIST;
    if (Shopping.ITEM_TYPE.equals(type)) {
      mListUri=Shopping.getListForItem(intent.getData().getLastPathSegment());
    }
 else {
      mListUri=intent.getData();
    }
  }
 else   if (action.equals(Intent.PICK_ACTION)) {
    mState=STATE_PICK_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else   if (action.equals(Intent.GET_CONTENT_ACTION)) {
    mState=STATE_GET_CONTENT_ITEM;
    mListUri=Uri.withAppendedPath(Shopping.Lists.CONTENT_URI,""String_Node_Str"" + defaultShoppingList);
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    finish();
    return;
  }
  mTypefaceHandwriting=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypefaceDigital=Typeface.createFromAsset(getAssets(),""String_Node_Str"");
  mTypeface=null;
  mTypeface=mTypefaceHandwriting;
  createView();
  setListTheme(1);
  fillListFilter();
  int selectList;
  try {
    selectList=Integer.parseInt(mListUri.getLastPathSegment());
  }
 catch (  NumberFormatException e) {
    selectList=defaultShoppingList;
  }
  setSelectedListId(selectList);
  fillItems();
  setListTheme(loadListTheme());
  bindGTalkIfNeeded();
  if (icicle != null) {
    String prevText=icicle.getString(ORIGINAL_ITEM);
    if (prevText != null) {
      mEditText.setText(prevText);
    }
  }
  mEditText.requestFocus();
  mIntentReceiver=new ListIntentReceiver();
}",0.9928730512249444
187926,"/** 
 * Rename item from dialog.
 * @return true if new list was renamed. False if new list was not renamed, because user has not given any name.
 */
private boolean renameItem(){
  EditText edittext=(EditText)mDialog.findViewById(R.id.edittext);
  String s=edittext.getText().toString();
  if (s.equals(""String_Node_Str"")) {
    Toast.makeText(this,getString(R.string.please_enter_name),Toast.LENGTH_SHORT).show();
    return false;
  }
  String oldItemName=mCursorItems.getString(mStringItemsITEMNAME);
  String newItemName=s;
  mCursorItems.updateString(mStringItemsITEMNAME,newItemName);
  mCursorItems.commitUpdates();
  mCursorItems.requery();
  edittext.setText(""String_Node_Str"");
  String recipients=mCursorListFilter.getString(mStringListFilterSHARECONTACTS);
  if (!recipients.equals(""String_Node_Str"")) {
    String shareName=mCursorListFilter.getString(mStringListFilterSHARENAME);
    long status=mCursorItems.getLong(mStringItemsSTATUS);
    mGTalkSender.sendItemUpdate(recipients,shareName,oldItemName,newItemName,status,status);
  }
  return true;
}","/** 
 * Rename item from dialog.
 * @return true if new list was renamed. False if new list was not renamed, because user has not given any name.
 */
private boolean renameItem(){
  EditText edittext=(EditText)mDialog.findViewById(R.id.edittext);
  String s=edittext.getText().toString();
  if (s.equals(""String_Node_Str"")) {
    Toast.makeText(this,getString(R.string.please_enter_name),Toast.LENGTH_SHORT).show();
    return false;
  }
  String oldItemName=mCursorItems.getString(mStringItemsITEMNAME);
  String newItemName=s;
  long itemId=mCursorItems.getLong(mStringItemsITEMID);
  Cursor cursor=getContentResolver().query(Shopping.Items.CONTENT_URI,Shopping.Items.PROJECTION,Shopping.Items._ID + ""String_Node_Str"",new String[]{""String_Node_Str"" + itemId},Shopping.Items.DEFAULT_SORT_ORDER);
  if (cursor != null && cursor.next()) {
    cursor.updateString(Shopping.Items.PROJECTION_NAME,newItemName);
    cursor.commitUpdates();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
  mCursorItems.requery();
  String recipients=mCursorListFilter.getString(mStringListFilterSHARECONTACTS);
  if (!recipients.equals(""String_Node_Str"")) {
    String shareName=mCursorListFilter.getString(mStringListFilterSHARENAME);
    long status=mCursorItems.getLong(mStringItemsSTATUS);
    mGTalkSender.sendItemUpdate(recipients,shareName,oldItemName,newItemName,status,status);
  }
  return true;
}",0.8027709861450693
187927,"/** 
 * Delete item 
 */
void deleteItem(int position){
  mCursorItems.moveTo(position);
  mCursorItems.deleteRow();
  mCursorItems.requery();
}","/** 
 * Delete item 
 */
void deleteItem(int position){
  String itemName=mCursorItems.getString(mStringItemsITEMNAME);
  long oldstatus=mCursorItems.getLong(mStringItemsSTATUS);
  mCursorItems.moveTo(position);
  mCursorItems.deleteRow();
  mCursorItems.requery();
  String recipients=mCursorListFilter.getString(mStringListFilterSHARECONTACTS);
  if (!recipients.equals(""String_Node_Str"")) {
    String shareName=mCursorListFilter.getString(mStringListFilterSHARENAME);
    long newstatus=Shopping.Status.BOUGHT;
    Log.i(TAG,""String_Node_Str"" + ""String_Node_Str"" + recipients + ""String_Node_Str""+ shareName+ ""String_Node_Str""+ newstatus);
    mGTalkSender.sendItemUpdate(recipients,shareName,itemName,itemName,oldstatus,newstatus);
  }
}",0.3254237288135593
187928,"/** 
 * Updates information about an item in a list. If the item does not exist yet, it is created. Update could include to strike an item through.
 * @param bundle
 */
void updateItem(Bundle bundle){
  if (bundle != null) {
    String shareListName=bundle.getString(Shopping.Lists.SHARE_NAME);
    String itemNameOld=bundle.getString(Shopping.Items.NAME + GTalkSender.OLD);
    String itemName=bundle.getString(Shopping.Items.NAME);
    String itemStatusOld=bundle.getString(Shopping.Contains.STATUS + GTalkSender.OLD);
    String itemStatus=bundle.getString(Shopping.Contains.STATUS);
    String itemSender=bundle.getString(GTalkSender.SENDER);
    if (shareListName == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (itemName == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (itemNameOld == null || itemStatusOld == null || itemStatus == null || itemSender == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    Cursor c=mContentResolver.query(Shopping.Lists.CONTENT_URI,mProjectionLists,Shopping.Lists.SHARE_NAME + ""String_Node_Str"" + shareListName+ ""String_Node_Str"",null,Shopping.Lists.DEFAULT_SORT_ORDER);
    if (c == null || c.count() < 1) {
      Log.i(TAG,""String_Node_Str"");
    }
 else {
      c.first();
      long listId=c.getLong(mProjectionListsID);
      Cursor citem=mContentResolver.query(Shopping.ContainsFull.CONTENT_URI,mProjectionContainsFull,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"" + listId+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.ITEM_NAME+ ""String_Node_Str""+ itemNameOld+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.STATUS+ ""String_Node_Str""+ itemStatusOld+ ""String_Node_Str"",null,null);
      if (citem == null || citem.count() < 1) {
        citem=mContentResolver.query(Shopping.ContainsFull.CONTENT_URI,mProjectionContainsFull,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"" + listId+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.ITEM_NAME+ ""String_Node_Str""+ itemNameOld+ ""String_Node_Str"",null,null);
      }
      if (citem == null || citem.count() < 1) {
        Log.i(TAG,""String_Node_Str"");
        long itemId=Shopping.getItem(itemName);
        ContentValues values=new ContentValues(2);
        values.put(Contains.ITEM_ID,itemId);
        values.put(Contains.LIST_ID,listId);
        values.put(Contains.STATUS,Long.parseLong(itemStatus));
        values.put(Contains.SHARE_MODIFIED_BY,itemSender);
        try {
          Uri uri=mContentResolver.insert(Contains.CONTENT_URI,values);
          Log.i(TAG,""String_Node_Str"" + uri);
        }
 catch (        Exception e) {
          Log.i(TAG,""String_Node_Str"",e);
        }
      }
 else {
        citem.first();
        long itemId=citem.getLong(mProjectionContainsFullITEMID);
        long containsId=citem.getLong(mProjectionContainsFullCONTAINSID);
        Uri itemUri=Uri.withAppendedPath(Shopping.Items.CONTENT_URI,""String_Node_Str"" + itemId);
        ContentValues values=new ContentValues(1);
        values.put(Shopping.Items.NAME,itemName);
        mContentResolver.update(itemUri,values,null,null);
        Uri containsUri=Uri.withAppendedPath(Shopping.Contains.CONTENT_URI,""String_Node_Str"" + containsId);
        values=new ContentValues(2);
        values.put(Shopping.Contains.STATUS,Long.parseLong(itemStatus));
        values.put(Shopping.Contains.SHARE_MODIFIED_BY,itemSender);
        mContentResolver.update(containsUri,values,null,null);
      }
    }
    mContext.broadcastIntent(new Intent(OpenIntents.REFRESH_ACTION));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}","/** 
 * Updates information about an item in a list. If the item does not exist yet, it is created. Update could include to strike an item through.
 * @param bundle
 */
void updateItem(Bundle bundle){
  if (bundle != null) {
    String shareListName=bundle.getString(Shopping.Lists.SHARE_NAME);
    String itemNameOld=bundle.getString(Shopping.Items.NAME + GTalkSender.OLD);
    String itemName=bundle.getString(Shopping.Items.NAME);
    String itemStatusOld=bundle.getString(Shopping.Contains.STATUS + GTalkSender.OLD);
    String itemStatus=bundle.getString(Shopping.Contains.STATUS);
    String itemSender=bundle.getString(GTalkSender.SENDER);
    if (shareListName == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (itemName == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    if (itemNameOld == null || itemStatusOld == null || itemStatus == null || itemSender == null) {
      Log.e(TAG,""String_Node_Str"");
      return;
    }
    Cursor c=mContentResolver.query(Shopping.Lists.CONTENT_URI,mProjectionLists,Shopping.Lists.SHARE_NAME + ""String_Node_Str"" + shareListName+ ""String_Node_Str"",null,Shopping.Lists.DEFAULT_SORT_ORDER);
    if (c == null || c.count() < 1) {
      Log.i(TAG,""String_Node_Str"");
    }
 else {
      c.first();
      long listId=c.getLong(mProjectionListsID);
      Log.i(TAG,""String_Node_Str"" + itemNameOld + ""String_Node_Str""+ itemStatusOld);
      Cursor citem=mContentResolver.query(Shopping.ContainsFull.CONTENT_URI,mProjectionContainsFull,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"" + listId+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.ITEM_NAME+ ""String_Node_Str""+ itemNameOld+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.STATUS+ ""String_Node_Str""+ itemStatusOld+ ""String_Node_Str"",null,null);
      if (citem == null || citem.count() < 1) {
        Log.i(TAG,""String_Node_Str"" + itemNameOld);
        citem=mContentResolver.query(Shopping.ContainsFull.CONTENT_URI,mProjectionContainsFull,Shopping.ContainsFull.LIST_ID + ""String_Node_Str"" + listId+ ""String_Node_Str""+ ""String_Node_Str""+ Shopping.ContainsFull.ITEM_NAME+ ""String_Node_Str""+ itemNameOld+ ""String_Node_Str"",null,null);
      }
      if (citem == null || citem.count() < 1) {
        Log.i(TAG,""String_Node_Str"");
        long itemId=Shopping.getItem(itemName);
        ContentValues values=new ContentValues(2);
        values.put(Contains.ITEM_ID,itemId);
        values.put(Contains.LIST_ID,listId);
        values.put(Contains.STATUS,Long.parseLong(itemStatus));
        values.put(Contains.SHARE_MODIFIED_BY,itemSender);
        try {
          Uri uri=mContentResolver.insert(Contains.CONTENT_URI,values);
          Log.i(TAG,""String_Node_Str"" + uri);
        }
 catch (        Exception e) {
          Log.i(TAG,""String_Node_Str"",e);
        }
      }
 else {
        citem.first();
        long itemId=citem.getLong(mProjectionContainsFullITEMID);
        long containsId=citem.getLong(mProjectionContainsFullCONTAINSID);
        Uri itemUri=Uri.withAppendedPath(Shopping.Items.CONTENT_URI,""String_Node_Str"" + itemId);
        ContentValues values=new ContentValues(1);
        values.put(Shopping.Items.NAME,itemName);
        mContentResolver.update(itemUri,values,null,null);
        Uri containsUri=Uri.withAppendedPath(Shopping.Contains.CONTENT_URI,""String_Node_Str"" + containsId);
        values=new ContentValues(2);
        values.put(Shopping.Contains.STATUS,Long.parseLong(itemStatus));
        values.put(Shopping.Contains.SHARE_MODIFIED_BY,itemSender);
        mContentResolver.update(containsUri,values,null,null);
      }
    }
    mContext.broadcastIntent(new Intent(OpenIntents.REFRESH_ACTION));
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}",0.981398506449423
187929,"public static void registerManagedService(String serviceClassName,long timeIntervall,boolean useWhileRoaming){
  long minTime=0;
  ContentValues cv=null;
  Cursor c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,ManagedService.SERVICE_CLASS + ""String_Node_Str"" + serviceClassName+ ""String_Node_Str"",null,null);
  if (c != null && c.count() > 0) {
    c.first();
    c.updateString(c.getColumnIndex(ManagedService.TIME_INTERVALL),Long.toString(timeIntervall));
    c.updateString(c.getColumnIndex(ManagedService.DO_ROAMING),Boolean.toString(useWhileRoaming));
    c.commitUpdates();
    c.close();
  }
 else {
    cv=new ContentValues();
    cv.put(ManagedService.SERVICE_CLASS,serviceClassName);
    cv.put(ManagedService.TIME_INTERVALL,timeIntervall);
    cv.put(ManagedService.DO_ROAMING,useWhileRoaming);
    insert(ManagedService.CONTENT_URI,cv);
  }
  c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,null,null,null);
  c.first();
  minTime=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
  while (!c.isAfterLast()) {
    long l=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
    if (l < minTime) {
      minTime=l;
    }
    c.next();
  }
  c.close();
  c=mContentResolver.query(DateTime.CONTENT_URI,DateTime.PROJECTION,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null,null);
  String now=""String_Node_Str"" + System.currentTimeMillis();
  cv=new ContentValues();
  cv.put(DateTime.TIME,now);
  cv.put(DateTime.REOCCURENCE,minTime);
  cv.put(DateTime.INTENT,org.openintents.OpenIntents.SERVICE_MANAGER);
  cv.put(DateTime.NATURE,Alert.NATURE_SYSTEM);
  cv.put(DateTime.ACTIVATE_ON_BOOT,true);
  cv.put(DateTime.ACTIVE,true);
  cv.put(DateTime.TYPE,Alert.TYPE_DATE_TIME);
  if (c != null && c.count() > 0) {
    update(DateTime.CONTENT_URI,cv,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null);
    alarmManager.cancel(new Intent().setAction(org.openintents.OpenIntents.SERVICE_MANAGER));
    registerDateTimeAlert(cv);
  }
 else {
    insert(DateTime.CONTENT_URI,cv);
  }
}","public static void registerManagedService(String serviceClassName,long timeIntervall,boolean useWhileRoaming){
  long minTime=0;
  ContentValues cv=null;
  Cursor c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,ManagedService.SERVICE_CLASS + ""String_Node_Str"" + serviceClassName+ ""String_Node_Str"",null,null);
  if (c != null && c.count() > 0) {
    c.first();
    c.updateString(c.getColumnIndex(ManagedService.TIME_INTERVALL),Long.toString(timeIntervall));
    c.updateString(c.getColumnIndex(ManagedService.DO_ROAMING),Boolean.toString(useWhileRoaming));
    c.commitUpdates();
    c.close();
  }
 else {
    cv=new ContentValues();
    cv.put(ManagedService.SERVICE_CLASS,serviceClassName);
    cv.put(ManagedService.TIME_INTERVALL,timeIntervall);
    cv.put(ManagedService.DO_ROAMING,useWhileRoaming);
    insert(ManagedService.CONTENT_URI,cv);
  }
  c=mContentResolver.query(ManagedService.CONTENT_URI,ManagedService.PROJECTION,null,null,null);
  c.first();
  minTime=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
  while (!c.isAfterLast()) {
    long l=c.getLong(c.getColumnIndex(ManagedService.TIME_INTERVALL));
    if (l < minTime) {
      minTime=l;
    }
    c.next();
  }
  c.close();
  c=mContentResolver.query(DateTime.CONTENT_URI,DateTime.PROJECTION,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null,null);
  String now=""String_Node_Str"" + System.currentTimeMillis();
  cv=new ContentValues();
  cv.put(DateTime.TIME,now);
  cv.put(DateTime.REOCCURENCE,minTime);
  cv.put(DateTime.INTENT,org.openintents.OpenIntents.SERVICE_MANAGER);
  cv.put(DateTime.NATURE,Alert.NATURE_SYSTEM);
  cv.put(DateTime.ACTIVATE_ON_BOOT,true);
  cv.put(DateTime.ACTIVE,true);
  cv.put(DateTime.TYPE,Alert.TYPE_DATE_TIME);
  if (c != null && c.count() > 0) {
    update(DateTime.CONTENT_URI,cv,DateTime.INTENT + ""String_Node_Str"" + org.openintents.OpenIntents.SERVICE_MANAGER+ ""String_Node_Str"",null);
    alarmManager.cancel(new Intent().setAction(org.openintents.OpenIntents.SERVICE_MANAGER));
    registerDateTimeAlert(cv);
  }
 else {
    insert(DateTime.CONTENT_URI,cv);
  }
  Log.d(_TAG,""String_Node_Str"");
}",0.9924674731796392
187930,"public static void registerDateTimeAlert(ContentValues cv){
  String myDate=cv.getAsString(DateTime.TIME);
  String s[]=myDate.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + s[0] + ""String_Node_Str""+ s[1]+ ""String_Node_Str"");
  long time=0;
  long myReoccurence=cv.getAsLong(DateTime.REOCCURENCE);
  Intent i=new Intent();
  Bundle b=new Bundle();
  b.putString(DateTime.TIME,myDate);
  b.putLong(DateTime.REOCCURENCE,myReoccurence);
  i.setAction(org.openintents.OpenIntents.DATE_TIME_ALERT_DISPATCH);
  try {
    time=Long.parseLong(s[1]);
  }
 catch (  NumberFormatException nfe) {
    Log.e(_TAG,""String_Node_Str"" + myDate + ""String_Node_Str"");
    return;
  }
  if (myReoccurence == 0) {
    alarmManager.set(AlarmManager.RTC,time,i);
  }
 else {
    alarmManager.setRepeating(AlarmManager.RTC,time,myReoccurence,i);
  }
}","public static void registerDateTimeAlert(ContentValues cv){
  String myDate=cv.getAsString(DateTime.TIME);
  String s[]=myDate.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + s[0] + ""String_Node_Str""+ s[1]+ ""String_Node_Str"");
  long time=0;
  long myReoccurence=cv.getAsLong(DateTime.REOCCURENCE);
  Intent i=new Intent();
  Bundle b=new Bundle();
  b.putString(DateTime.TIME,myDate);
  b.putLong(DateTime.REOCCURENCE,myReoccurence);
  i.setAction(org.openintents.OpenIntents.DATE_TIME_ALERT_DISPATCH);
  try {
    time=Long.parseLong(s[1]);
  }
 catch (  NumberFormatException nfe) {
    Log.e(_TAG,""String_Node_Str"" + myDate + ""String_Node_Str"");
    return;
  }
  if (myReoccurence == 0) {
    alarmManager.set(AlarmManager.RTC,time,i);
    Log.d(_TAG,""String_Node_Str"" + time + ""String_Node_Str"");
  }
 else {
    alarmManager.setRepeating(AlarmManager.RTC,time,myReoccurence,i);
    Log.d(_TAG,""String_Node_Str"" + time + ""String_Node_Str""+ myReoccurence+ ""String_Node_Str"");
  }
}",0.9139433551198256
187931,"private void updateChannelsList(){
  mRSSCursor.requery();
  mAtomCursor.requery();
  int rssCursorItems=mRSSCursor.count();
  int atmCursorItems=mAtomCursor.count();
  String[] namesList=new String[rssCursorItems + atmCursorItems];
  int namesRowIndex=mRSSCursor.getColumnIndex(News.RSSFeeds.CHANNEL_NAME);
  int idRowIndex=mRSSCursor.getColumnIndex(News.RSSFeeds._ID);
  List<HashMap> dataList=new Vector<HashMap>();
  mRSSCursor.first();
  mAtomCursor.first();
  for (int i=0; i < rssCursorItems; i++) {
    HashMap<String,String> data=new HashMap<String,String>();
    String tID=mRSSCursor.getString(idRowIndex);
    Log.d(_TAG,""String_Node_Str"" + tID + ""String_Node_Str"");
    Cursor tempCursor=News.mContentResolver.query(News.RSSFeedContents.CONTENT_URI,RSS_CONTENTS_PROJECTION,News.RSSFeedContents.CHANNEL_ID + ""String_Node_Str"" + tID,null,""String_Node_Str"");
    int count=tempCursor.count();
    tempCursor.close();
    data.put(News._ID,tID);
    data.put(News.RSSFeeds.CHANNEL_NAME,mRSSCursor.getString(namesRowIndex));
    data.put(News.MESSAGE_COUNT,Integer.toString(count));
    data.put(News.FEED_TYPE,News.FEED_TYPE_RSS);
    dataList.add(data);
    mRSSCursor.next();
  }
  namesRowIndex=mAtomCursor.getColumnIndex(News.AtomFeeds.FEED_TITLE);
  idRowIndex=mAtomCursor.getColumnIndex(News.AtomFeeds._ID);
  for (int i=0; i < atmCursorItems; i++) {
    HashMap<String,String> data=new HashMap<String,String>();
    String tID=mAtomCursor.getString(idRowIndex);
    Log.d(_TAG,""String_Node_Str"" + tID + ""String_Node_Str"");
    Cursor tempCursor=News.mContentResolver.query(News.AtomFeedContents.CONTENT_URI,ATOM_CONTENTS_PROJECTION,News.AtomFeedContents.FEED_ID + ""String_Node_Str"" + tID,null,""String_Node_Str"");
    int count=tempCursor.count();
    tempCursor.close();
    data.put(News._ID,tID);
    data.put(News.AtomFeeds.FEED_TITLE,mAtomCursor.getString(namesRowIndex));
    data.put(News.MESSAGE_COUNT,Integer.toString(count));
    data.put(News.FEED_TYPE,News.FEED_TYPE_ATOM);
    dataList.add(data);
    mAtomCursor.next();
  }
  ListAdapter channelsAdapter=new ChannelListAdapter(this,dataList);
  Log.d(_TAG,""String_Node_Str"" + channelsAdapter.getCount() + ""String_Node_Str"");
  mChannelsView.setAdapter(channelsAdapter);
  mChannelsView.debug();
}","private void updateChannelsList(){
  mRSSCursor.requery();
  mAtomCursor.requery();
  int rssCursorItems=mRSSCursor.count();
  int atmCursorItems=mAtomCursor.count();
  String[] namesList=new String[rssCursorItems + atmCursorItems];
  int namesRowIndex=mRSSCursor.getColumnIndex(News.RSSFeeds.CHANNEL_NAME);
  int idRowIndex=mRSSCursor.getColumnIndex(News.RSSFeeds._ID);
  List<HashMap> dataList=new Vector<HashMap>();
  mRSSCursor.first();
  mAtomCursor.first();
  for (int i=0; i < rssCursorItems; i++) {
    HashMap<String,String> data=new HashMap<String,String>();
    String tID=mRSSCursor.getString(idRowIndex);
    Log.d(_TAG,""String_Node_Str"" + tID + ""String_Node_Str"");
    Cursor tempCursor=News.mContentResolver.query(News.RSSFeedContents.CONTENT_URI,RSS_CONTENTS_PROJECTION,News.RSSFeedContents.CHANNEL_ID + ""String_Node_Str"" + tID,null,""String_Node_Str"");
    int count=tempCursor.count();
    tempCursor.close();
    data.put(News._ID,tID);
    data.put(News.RSSFeeds.CHANNEL_NAME,mRSSCursor.getString(namesRowIndex));
    data.put(News.MESSAGE_COUNT,Integer.toString(count));
    data.put(News.FEED_TYPE,News.FEED_TYPE_RSS);
    dataList.add(data);
    mRSSCursor.next();
  }
  namesRowIndex=mAtomCursor.getColumnIndex(News.AtomFeeds.FEED_TITLE);
  idRowIndex=mAtomCursor.getColumnIndex(News.AtomFeeds._ID);
  for (int i=0; i < atmCursorItems; i++) {
    HashMap<String,String> data=new HashMap<String,String>();
    String tID=mAtomCursor.getString(idRowIndex);
    Log.d(_TAG,""String_Node_Str"" + tID + ""String_Node_Str"");
    Cursor tempCursor=News.mContentResolver.query(News.AtomFeedContents.CONTENT_URI,ATOM_CONTENTS_PROJECTION,News.AtomFeedContents.FEED_ID + ""String_Node_Str"" + tID,null,""String_Node_Str"");
    int count=tempCursor.count();
    tempCursor.close();
    data.put(News._ID,tID);
    data.put(News.AtomFeeds.FEED_TITLE,mAtomCursor.getString(namesRowIndex));
    data.put(News.MESSAGE_COUNT,Integer.toString(count));
    data.put(News.FEED_TYPE,News.FEED_TYPE_ATOM);
    dataList.add(data);
    mAtomCursor.next();
  }
  ListAdapter channelsAdapter=new ChannelListAdapter(this,dataList);
  if (dataList.size() == 0) {
    Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
  Log.d(_TAG,""String_Node_Str"" + channelsAdapter.getCount() + ""String_Node_Str"");
  mChannelsView.setAdapter(channelsAdapter);
  mChannelsView.debug();
}",0.9778637438211908
187932,"public void bindCursor(final Cursor cursor){
  final String packageName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String name=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mAlertinfoString=""String_Node_Str"";
  mIconDrawable=null;
  new Thread(){
    @Override public void run(){
      PackageManager pm=mContext.getPackageManager();
      try {
        ProviderInfo providerInfo=pm.resolveContentProvider(packageName,0);
        if (providerInfo != null) {
          mIconDrawable=providerInfo.loadIcon(pm);
        }
 else {
          mIconDrawable=pm.getApplicationIcon(packageName);
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
        mIconDrawable=pm.getDefaultActivityIcon();
      }
      String data=cursor.getString(2);
      Uri uri=Uri.parse(data);
      Intent intent=new Intent(Intent.PICK_ACTION,uri);
      if (pm.resolveActivity(intent,0) == null) {
        intent.setAction(Intent.GET_CONTENT_ACTION);
        if (pm.resolveActivity(intent,0) == null) {
          mAlertinfoString=""String_Node_Str"";
        }
      }
      ;
      mHandler.post(updateViews);
    }
  }
.start();
  mName.setText(name);
  mPackageName.setText(packageName);
}","public void bindCursor(final Cursor cursor){
  final String packageName=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  String name=cursor.getString(cursor.getColumnIndex(""String_Node_Str""));
  mAlertinfoString=""String_Node_Str"";
  mIconDrawable=null;
  new Thread(){
    @Override public void run(){
      PackageManager pm=mContext.getPackageManager();
      try {
        ProviderInfo providerInfo=pm.resolveContentProvider(packageName,0);
        if (providerInfo != null) {
          mIconDrawable=providerInfo.loadIcon(pm);
        }
 else {
          mIconDrawable=pm.getApplicationIcon(packageName);
        }
      }
 catch (      Exception e) {
        Log.e(""String_Node_Str"",""String_Node_Str"",e);
        mIconDrawable=pm.getDefaultActivityIcon();
      }
      String data=cursor.getString(2);
      Uri uri=Uri.parse(data);
      Intent intent=new Intent(Intent.PICK_ACTION,uri);
      mAlertinfoString=""String_Node_Str"";
      if (pm.resolveActivity(intent,0) == null) {
        intent.setAction(Intent.GET_CONTENT_ACTION);
        if (pm.resolveActivity(intent,0) == null) {
          mAlertinfoString=""String_Node_Str"";
        }
      }
      ;
      mHandler.post(updateViews);
    }
  }
.start();
  mName.setText(name);
  mPackageName.setText(packageName);
  mAlertInfo.setText(mAlertinfoString);
}",0.9682416731216112
187933,"@Override public void run(){
  PackageManager pm=mContext.getPackageManager();
  try {
    ProviderInfo providerInfo=pm.resolveContentProvider(packageName,0);
    if (providerInfo != null) {
      mIconDrawable=providerInfo.loadIcon(pm);
    }
 else {
      mIconDrawable=pm.getApplicationIcon(packageName);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"",e);
    mIconDrawable=pm.getDefaultActivityIcon();
  }
  String data=cursor.getString(2);
  Uri uri=Uri.parse(data);
  Intent intent=new Intent(Intent.PICK_ACTION,uri);
  if (pm.resolveActivity(intent,0) == null) {
    intent.setAction(Intent.GET_CONTENT_ACTION);
    if (pm.resolveActivity(intent,0) == null) {
      mAlertinfoString=""String_Node_Str"";
    }
  }
  ;
  mHandler.post(updateViews);
}","@Override public void run(){
  PackageManager pm=mContext.getPackageManager();
  try {
    ProviderInfo providerInfo=pm.resolveContentProvider(packageName,0);
    if (providerInfo != null) {
      mIconDrawable=providerInfo.loadIcon(pm);
    }
 else {
      mIconDrawable=pm.getApplicationIcon(packageName);
    }
  }
 catch (  Exception e) {
    Log.e(""String_Node_Str"",""String_Node_Str"",e);
    mIconDrawable=pm.getDefaultActivityIcon();
  }
  String data=cursor.getString(2);
  Uri uri=Uri.parse(data);
  Intent intent=new Intent(Intent.PICK_ACTION,uri);
  mAlertinfoString=""String_Node_Str"";
  if (pm.resolveActivity(intent,0) == null) {
    intent.setAction(Intent.GET_CONTENT_ACTION);
    if (pm.resolveActivity(intent,0) == null) {
      mAlertinfoString=""String_Node_Str"";
    }
  }
  ;
  mHandler.post(updateViews);
}",0.976456009913259
187934,"public void onReceiveIntent(Context context,Intent intent){
  SharedPreferences settings=context.getSharedPreferences(NewsreaderService.PREFS_NAME,0);
  useWhileRoaming=settings.getBoolean(NewsreaderService.DO_ROAMING,false);
  debugMode=settings.getBoolean(NewsreaderService.DEBUG_MODE,false);
  Log.d(_TAG,""String_Node_Str"" + useWhileRoaming);
  String action=intent.getAction();
  Log.d(_TAG,action);
  if (action == null) {
    Log.e(_TAG,""String_Node_Str"");
    return;
  }
 else   if (android.content.Intent.SERVICE_STATE_CHANGED_ACTION.equals(action)) {
    Bundle b=intent.getExtras();
    isRoaming=b.getBoolean(""String_Node_Str"");
    Log.d(_TAG,""String_Node_Str"" + b.getString(""String_Node_Str"") + ""String_Node_Str"");
    if (isRoaming && !useWhileRoaming) {
      Log.d(_TAG,""String_Node_Str"");
      context.stopService(new Intent(context,NewsreaderService1.class));
      didStop=true;
    }
 else     if (!isRoaming && !useWhileRoaming && didStop) {
      didStop=false;
      Log.d(_TAG,""String_Node_Str"");
      context.startService(new Intent(context,NewsreaderService1.class),null);
    }
  }
}","public void onReceiveIntent(Context context,Intent intent){
  SharedPreferences settings=context.getSharedPreferences(NewsreaderService.PREFS_NAME,0);
  useWhileRoaming=settings.getBoolean(NewsreaderService.DO_ROAMING,false);
  debugMode=settings.getBoolean(NewsreaderService.DEBUG_MODE,false);
  Log.d(_TAG,""String_Node_Str"" + useWhileRoaming);
  String action=intent.getAction();
  Log.d(_TAG,action);
  if (action == null) {
    Log.e(_TAG,""String_Node_Str"");
    return;
  }
 else   if (android.content.Intent.SERVICE_STATE_CHANGED_ACTION.equals(action)) {
    Bundle b=intent.getExtras();
    isRoaming=intent.getBooleanExtra(""String_Node_Str"",false);
    Log.d(_TAG,""String_Node_Str"" + isRoaming + ""String_Node_Str"");
    Log.d(_TAG,""String_Node_Str"" + didStop + ""String_Node_Str"");
    if (isRoaming && !useWhileRoaming) {
      Log.d(_TAG,""String_Node_Str"");
      context.stopService(new Intent(context,NewsreaderService1.class));
      didStop=true;
    }
 else     if (!isRoaming && !useWhileRoaming && didStop) {
      didStop=false;
      Log.d(_TAG,""String_Node_Str"");
      context.startService(new Intent(context,NewsreaderService1.class),null);
    }
  }
}",0.9308836395450568
187935,"@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mMainView=new LinearLayout(this);
  mMainView.setGravity(Gravity.LEFT);
  mMainView.setOrientation(LinearLayout.VERTICAL);
  setContentView(mMainView);
  setTheme(android.R.style.Theme_Dialog);
  mLocation=new Location(this.getContentResolver());
  mTag=new Tag(this);
  News.mContentResolver=this.getContentResolver();
  Button button=createButton();
  button.setText(R.string.init_add_all_values);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      addLocations();
      addNewsFeeds();
      Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
    }
  }
);
  button=createButton();
  button.setText(R.string.init_add_locations);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      addLocations();
      Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
    }
  }
);
  button=createButton();
  button.setText(R.string.init_add_news_feeds);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      addNewsFeeds();
      Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
    }
  }
);
}","@Override protected void onCreate(Bundle icicle){
  super.onCreate(icicle);
  mMainView=new LinearLayout(this);
  mMainView.setGravity(Gravity.LEFT);
  mMainView.setOrientation(LinearLayout.VERTICAL);
  setContentView(mMainView);
  setTheme(android.R.style.Theme_Dialog);
  mLocation=new Location(this.getContentResolver());
  mTag=new Tag(this);
  News.mContentResolver=this.getContentResolver();
  Button button=createButton();
  button.setText(R.string.init_add_all_values);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      addLocations();
      addNewsFeeds();
      Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
    }
  }
);
  button=createButton();
  button.setText(R.string.init_add_locations);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      addLocations();
      Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
    }
  }
);
  TextView t=new TextView(this);
  android.widget.LinearLayout.LayoutParams params=new LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.FILL_PARENT,LinearLayout.LayoutParams.WRAP_CONTENT);
  t.setLayoutParams(params);
  t.setHeight(40);
  t.setWidth(1);
  mMainView.addView(t);
  button=createButton();
  button.setText(R.string.init_view_locations);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      Intent intent=new Intent();
      intent.setClassName(""String_Node_Str"",""String_Node_Str"");
      intent.addCategory(Intent.DEFAULT_CATEGORY);
      startActivity(intent);
    }
  }
);
  button=createButton();
  button.setText(R.string.init_view_news);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View view){
      Intent intent=new Intent();
      intent.setAction(""String_Node_Str"");
      intent.addCategory(Intent.DEFAULT_CATEGORY);
      startActivity(intent);
    }
  }
);
}",0.6279780085522297
187936,"public void onClick(View view){
  addNewsFeeds();
  Toast.makeText(InitView.this,R.string.init_done,Toast.LENGTH_SHORT).show();
}","public void onClick(View view){
  Intent intent=new Intent();
  intent.setAction(""String_Node_Str"");
  intent.addCategory(Intent.DEFAULT_CATEGORY);
  startActivity(intent);
}",0.4224422442244224
187937,"private void menuDelete(){
  boolean res=false;
  int pos=getSelectedItemPosition();
  mCursor.moveTo(pos);
  res=mCursor.deleteRow();
  Log.d(_TAG,""String_Node_Str"" + pos + ""String_Node_Str""+ res);
}","private void menuDelete(){
  boolean res=false;
  int pos=getSelectedItemPosition();
  if (pos > -1) {
    mCursor.moveTo(pos);
    res=mCursor.deleteRow();
    Log.d(_TAG,""String_Node_Str"" + pos + ""String_Node_Str""+ res);
  }
}",0.9345794392523364
187938,"private void menuMagnolia(){
  Bundle b=new Bundle();
  int pos=getSelectedItemPosition();
  mCursor.moveTo(pos);
  String strUri=""String_Node_Str"";
  String desc=""String_Node_Str"";
  if (feedType.equals(News.FEED_TYPE_RSS)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_TITLE));
  }
 else   if (feedType.equals(News.FEED_TYPE_ATOM)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_TITLE));
  }
  b.putString(MagnoliaTagging.URI,strUri);
  b.putString(MagnoliaTagging.DESCRIPTION,desc);
  Intent intent=new Intent();
  intent.setAction(""String_Node_Str"");
  intent.addCategory(Intent.DEFAULT_CATEGORY);
  intent.putExtras(b);
  startActivity(intent);
}","private void menuMagnolia(){
  Bundle b=new Bundle();
  int pos=getSelectedItemPosition();
  if (pos > -1) {
    mCursor.moveTo(pos);
    String strUri=""String_Node_Str"";
    String desc=""String_Node_Str"";
    if (feedType.equals(News.FEED_TYPE_RSS)) {
      strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
      desc=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_TITLE));
    }
 else     if (feedType.equals(News.FEED_TYPE_ATOM)) {
      strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
      desc=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_TITLE));
    }
    b.putString(MagnoliaTagging.URI,strUri);
    b.putString(MagnoliaTagging.DESCRIPTION,desc);
    Intent intent=new Intent();
    intent.setAction(""String_Node_Str"");
    intent.addCategory(Intent.DEFAULT_CATEGORY);
    intent.putExtras(b);
    startActivity(intent);
  }
}",0.9684439608269858
187939,"private void followItemLink(){
  int pos=getSelectedItemPosition();
  mCursor.moveTo(pos);
  Uri uri=null;
  if (feedType.equals(News.FEED_TYPE_RSS)) {
    String strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
    uri=Uri.parse(strUri);
  }
 else   if (feedType.equals(News.FEED_TYPE_ATOM)) {
    String strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
    uri=Uri.parse(strUri);
  }
  Intent intent=new Intent(Intent.VIEW_ACTION,uri);
  startActivity(intent);
}","private void followItemLink(){
  int pos=getSelectedItemPosition();
  Log.d(_TAG,""String_Node_Str"" + pos + ""String_Node_Str"");
  if (pos > -1) {
    mCursor.moveTo(pos);
    Uri uri=null;
    if (feedType.equals(News.FEED_TYPE_RSS)) {
      String strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
      uri=Uri.parse(strUri);
    }
 else     if (feedType.equals(News.FEED_TYPE_ATOM)) {
      String strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
      uri=Uri.parse(strUri);
    }
    Intent intent=new Intent(Intent.VIEW_ACTION,uri);
    startActivity(intent);
  }
}",0.9101796407185628
187940,"@Override public boolean onCreateOptionsMenu(Menu menu){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  android.view.SubMenu submenu;
  boolean result=super.onCreateOptionsMenu(menu);
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_FOLLOW,""String_Node_Str"");
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_DELETE,""String_Node_Str"");
  submenu=menu.addSubMenu(0,AFeedMessages.MENU_TAGS,""String_Node_Str"");
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_TAG,""String_Node_Str"",R.drawable.tagging_application001a);
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_MAGNOLIA,""String_Node_Str"",R.drawable.tagging_magnolia_application001a);
  return result;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  android.view.SubMenu submenu;
  boolean result=super.onCreateOptionsMenu(menu);
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_FOLLOW,""String_Node_Str"");
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_DELETE,""String_Node_Str"",R.drawable.shoppinglistdelete001b);
  submenu=menu.addSubMenu(0,AFeedMessages.MENU_TAGS,""String_Node_Str"",R.drawable.tagging_application001a);
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_MAGNOLIA,""String_Node_Str"",R.drawable.tagging_magnolia_application001a);
  return result;
}",0.8362204724409449
187941,"public boolean addPost(String itemUrl,String description,String extended,String[] tags,boolean shared) throws java.io.IOException {
  String rpc=mAPI + ""String_Node_Str"";
  StringBuffer rpcBuf=new StringBuffer();
  StringBuffer tagsBuf=new StringBuffer();
  Element tag;
  URL u=null;
  String dateStamp;
  if (description == null || description.equals(""String_Node_Str"")) {
    description=""String_Node_Str"";
  }
  if (extended == null) {
    extended=new String();
  }
  try {
    rpcBuf.append(""String_Node_Str"" + itemUrl);
    rpcBuf.append(""String_Node_Str"" + URLEncoder.encode(description));
    rpcBuf.append(""String_Node_Str"" + URLEncoder.encode(extended));
    int tagsLen=tags.length;
    if (mAPI.equals(MAGNOLIA_API)) {
      for (int i=0; i < tagsLen; i++) {
        tagsBuf.append(URLEncoder.encode(tags[i]) + ""String_Node_Str"");
      }
    }
 else     if (mAPI.equals(DELICIOUS_API)) {
      for (int i=0; i < tagsLen; i++) {
        tagsBuf.append(URLEncoder.encode(tags[i]) + ""String_Node_Str"");
      }
    }
    rpcBuf.append(""String_Node_Str"" + tagsBuf.toString());
    if (shared) {
      rpcBuf.append(""String_Node_Str"");
    }
 else {
      rpcBuf.append(""String_Node_Str"");
    }
    rpcBuf.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  rpc+=rpcBuf.toString();
  System.out.println(""String_Node_Str"" + rpc + ""String_Node_Str"");
  try {
    u=new URL(rpc);
  }
 catch (  java.net.MalformedURLException mu) {
    System.out.println(""String_Node_Str"" + mu.getMessage());
  }
  String s=new Scanner(u.openStream()).useDelimiter(""String_Node_Str"").next();
  if (s.equals(""String_Node_Str"")) {
    return true;
  }
  return false;
}","public boolean addPost(String itemUrl,String description,String extended,String[] tags,boolean shared) throws java.io.IOException {
  String rpc=mAPI + ""String_Node_Str"";
  StringBuffer rpcBuf=new StringBuffer();
  StringBuffer tagsBuf=new StringBuffer();
  Element tag;
  URL u=null;
  String dateStamp;
  if (description == null || description.equals(""String_Node_Str"")) {
    description=""String_Node_Str"";
  }
  if (extended == null) {
    extended=new String();
  }
  try {
    rpcBuf.append(""String_Node_Str"" + itemUrl);
    rpcBuf.append(""String_Node_Str"" + URLEncoder.encode(description));
    rpcBuf.append(""String_Node_Str"" + URLEncoder.encode(extended));
    int tagsLen=tags.length;
    if (mAPI.equals(MAGNOLIA_API)) {
      for (int i=0; i < tagsLen; i++) {
        tagsBuf.append(URLEncoder.encode(tags[i]) + ""String_Node_Str"");
      }
    }
 else     if (mAPI.equals(DELICIOUS_API)) {
      for (int i=0; i < tagsLen; i++) {
        tagsBuf.append(URLEncoder.encode(tags[i]) + ""String_Node_Str"");
      }
    }
    rpcBuf.append(""String_Node_Str"" + tagsBuf.toString());
    if (shared) {
      rpcBuf.append(""String_Node_Str"");
    }
 else {
      rpcBuf.append(""String_Node_Str"");
    }
    rpcBuf.append(""String_Node_Str"");
  }
 catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"");
    e.printStackTrace();
  }
  rpc+=rpcBuf.toString();
  System.out.println(""String_Node_Str"" + rpc + ""String_Node_Str"");
  try {
    u=new URL(rpc);
  }
 catch (  java.net.MalformedURLException mu) {
    System.out.println(""String_Node_Str"" + mu.getMessage());
  }
  String s=""String_Node_Str"";
  try {
    javax.net.ssl.HttpsURLConnection connection=(javax.net.ssl.HttpsURLConnection)u.openConnection();
    javax.net.ssl.HostnameVerifier v=new org.apache.http.conn.ssl.AllowAllHostnameVerifier();
    connection.setHostnameVerifier(v);
    s=new Scanner(connection.getInputStream()).useDelimiter(""String_Node_Str"").next();
  }
 catch (  java.io.IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe.getMessage());
    Log.e(_TAG,""String_Node_Str"" + ioe.getMessage());
  }
catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"" + u);
    System.out.println(""String_Node_Str"" + u);
    e.printStackTrace();
  }
  if (s.equals(""String_Node_Str"")) {
    return true;
  }
  return false;
}",0.8470879801734821
187942,"public String[] getTags() throws java.io.IOException {
  String[] result=null;
  String rpc=mAPI + ""String_Node_Str"";
  Element tag;
  URL u=null;
  try {
    u=new URL(rpc);
  }
 catch (  java.net.MalformedURLException mu) {
    System.out.println(""String_Node_Str"" + mu.getMessage());
  }
  Document doc=null;
  try {
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    doc=db.parse(u.openStream());
  }
 catch (  java.io.IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe.getMessage());
    Log.e(_TAG,""String_Node_Str"" + ioe.getMessage());
  }
catch (  ParserConfigurationException pce) {
    System.out.println(""String_Node_Str"" + pce.getMessage());
    Log.e(_TAG,""String_Node_Str"" + pce.getMessage());
  }
catch (  SAXException se) {
    System.out.println(""String_Node_Str"" + se.getMessage());
    Log.e(_TAG,""String_Node_Str"" + se.getMessage());
  }
  if (doc == null) {
    Log.e(_TAG,""String_Node_Str"");
    throw new java.io.IOException(""String_Node_Str"" + rpc + ""String_Node_Str"");
  }
  int tagsLen=doc.getElementsByTagName(""String_Node_Str"").getLength();
  result=new String[tagsLen];
  for (int i=0; i < tagsLen; i++) {
    tag=(Element)doc.getElementsByTagName(""String_Node_Str"").item(i);
    result[i]=new String(tag.getAttribute(""String_Node_Str"").trim());
  }
  return result;
}","public String[] getTags() throws java.io.IOException {
  String[] result=null;
  String rpc=mAPI + ""String_Node_Str"";
  Element tag;
  java.net.URL u=null;
  try {
    u=new URL(rpc);
  }
 catch (  java.net.MalformedURLException mu) {
    System.out.println(""String_Node_Str"" + mu.getMessage());
  }
  Document doc=null;
  try {
    javax.net.ssl.HttpsURLConnection connection=(javax.net.ssl.HttpsURLConnection)u.openConnection();
    javax.net.ssl.HostnameVerifier v=new org.apache.http.conn.ssl.AllowAllHostnameVerifier();
    connection.setHostnameVerifier(v);
    DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();
    DocumentBuilder db=dbf.newDocumentBuilder();
    doc=db.parse(connection.getInputStream());
  }
 catch (  java.io.IOException ioe) {
    System.out.println(""String_Node_Str"" + ioe.getMessage());
    Log.e(_TAG,""String_Node_Str"" + ioe.getMessage());
  }
catch (  ParserConfigurationException pce) {
    System.out.println(""String_Node_Str"" + pce.getMessage());
    Log.e(_TAG,""String_Node_Str"" + pce.getMessage());
  }
catch (  SAXException se) {
    System.out.println(""String_Node_Str"" + se.getMessage());
    Log.e(_TAG,""String_Node_Str"" + se.getMessage());
  }
catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"" + u);
    System.out.println(""String_Node_Str"" + u);
    e.printStackTrace();
  }
  if (doc == null) {
    Log.e(_TAG,""String_Node_Str"");
    throw new java.io.IOException(""String_Node_Str"" + rpc + ""String_Node_Str"");
  }
  int tagsLen=doc.getElementsByTagName(""String_Node_Str"").getLength();
  result=new String[tagsLen];
  for (int i=0; i < tagsLen; i++) {
    tag=(Element)doc.getElementsByTagName(""String_Node_Str"").item(i);
    result[i]=new String(tag.getAttribute(""String_Node_Str"").trim());
  }
  return result;
}",0.8602150537634409
187943,"public void saveBookmark(){
  Log.d(_TAG,""String_Node_Str"");
  boolean remoteResult=false;
  String bookmarkURL=mCURL.getText().toString();
  String strOtags=mOutboundTags.getText().toString();
  String description=mDescription.getText().toString();
  boolean shared=mShared.isChecked();
  String[] oTags=strOtags.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + oTags.toString() + ""String_Node_Str"");
  if (!bookmarkURL.startsWith(""String_Node_Str"")) {
    Log.d(_TAG,""String_Node_Str"");
    bookmarkURL=""String_Node_Str"" + bookmarkURL;
  }
  DeliciousApiHelper dah=new DeliciousApiHelper(DeliciousApiHelper.MAGNOLIA_API,mScreenName,mPassWd);
  mProgress.setIndeterminate(true);
  mProgress.setVisibility(ProgressBar.VISIBLE);
  try {
    TaggThread t=new TaggThread(dah,bookmarkURL,description,oTags,shared);
    t.run();
    t.join();
  }
 catch (  java.lang.InterruptedException ioe2) {
    Log.e(_TAG,""String_Node_Str"" + ioe2.getMessage() + ""String_Node_Str"");
  }
  if (remoteResult) {
    int otl=oTags.length;
    for (int i=0; i < otl; i++) {
      insertTag(oTags[i],bookmarkURL);
    }
    setResult(Activity.RESULT_OK);
    finish();
  }
  mProgress.setIndeterminate(false);
  mProgress.setVisibility(ProgressBar.GONE);
  Log.d(_TAG,""String_Node_Str"");
}","public void saveBookmark(){
  Log.d(_TAG,""String_Node_Str"");
  boolean remoteResult=false;
  String bookmarkURL=mCURL.getText().toString();
  String strOtags=mOutboundTags.getText().toString();
  String description=mDescription.getText().toString();
  boolean shared=mShared.isChecked();
  String[] oTags=strOtags.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + oTags.toString() + ""String_Node_Str"");
  if (!bookmarkURL.startsWith(""String_Node_Str"")) {
    Log.d(_TAG,""String_Node_Str"");
    bookmarkURL=""String_Node_Str"" + bookmarkURL;
  }
  DeliciousApiHelper dah=new DeliciousApiHelper(DeliciousApiHelper.MAGNOLIA_API,mScreenName,mPassWd);
  try {
    TaggThread t=new TaggThread(dah,bookmarkURL,description,oTags,shared);
    t.run();
    t.join();
    remoteResult=t.getResult();
  }
 catch (  java.lang.InterruptedException ioe2) {
    Log.e(_TAG,""String_Node_Str"" + ioe2.getMessage() + ""String_Node_Str"");
  }
  if (remoteResult) {
    int otl=oTags.length;
    for (int i=0; i < otl; i++) {
      insertTag(oTags[i],bookmarkURL);
    }
    setResult(Activity.RESULT_OK);
    finish();
  }
  Log.d(_TAG,""String_Node_Str"");
}",0.9181141439205956
187944,"public TaggThread(DeliciousApiHelper dah,String u,String d,String[] t,boolean s){
  this.dah=dah;
  this.bmUri=u;
  this.desc=d;
  this.tags=t;
  this.shared=s;
}","public TaggThread(DeliciousApiHelper dah,String u,String d,String[] t,boolean s,ProgressDialog pg){
  this.dah=dah;
  this.bmUri=u;
  this.desc=d;
  this.tags=t;
  this.shared=s;
  this.callback=pg;
}",0.8950276243093923
187945,"public void saveBookmark(){
  Log.d(_TAG,""String_Node_Str"");
  boolean remoteResult=false;
  String bookmarkURL=mCURL.getText().toString();
  String strOtags=mOutboundTags.getText().toString();
  String description=mDescription.getText().toString();
  boolean shared=mShared.isChecked();
  String[] oTags=strOtags.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + oTags.toString() + ""String_Node_Str"");
  if (!bookmarkURL.startsWith(""String_Node_Str"")) {
    Log.d(_TAG,""String_Node_Str"");
    bookmarkURL=""String_Node_Str"" + bookmarkURL;
  }
  DeliciousApiHelper dah=new DeliciousApiHelper(DeliciousApiHelper.MAGNOLIA_API,mScreenName,mPassWd);
  mProgress.setIndeterminate(true);
  mProgress.setVisibility(ProgressBar.VISIBLE);
  try {
    remoteResult=dah.addPost(bookmarkURL,description,null,oTags,shared);
  }
 catch (  java.io.IOException ioe) {
    Log.e(_TAG,""String_Node_Str"" + ioe.getMessage() + ""String_Node_Str"");
  }
  if (remoteResult) {
    int otl=oTags.length;
    for (int i=0; i < otl; i++) {
      insertTag(oTags[i],bookmarkURL);
    }
    setResult(Activity.RESULT_OK);
    finish();
  }
  mProgress.setIndeterminate(false);
  mProgress.setVisibility(ProgressBar.GONE);
  Log.d(_TAG,""String_Node_Str"");
}","public void saveBookmark(){
  Log.d(_TAG,""String_Node_Str"");
  boolean remoteResult=false;
  String bookmarkURL=mCURL.getText().toString();
  String strOtags=mOutboundTags.getText().toString();
  String description=mDescription.getText().toString();
  boolean shared=mShared.isChecked();
  String[] oTags=strOtags.split(""String_Node_Str"");
  Log.d(_TAG,""String_Node_Str"" + oTags.toString() + ""String_Node_Str"");
  if (!bookmarkURL.startsWith(""String_Node_Str"")) {
    Log.d(_TAG,""String_Node_Str"");
    bookmarkURL=""String_Node_Str"" + bookmarkURL;
  }
  DeliciousApiHelper dah=new DeliciousApiHelper(DeliciousApiHelper.MAGNOLIA_API,mScreenName,mPassWd);
  mProgress.setIndeterminate(true);
  mProgress.setVisibility(ProgressBar.VISIBLE);
  try {
    TaggThread t=new TaggThread(dah,bookmarkURL,description,oTags,shared);
    t.run();
    t.join();
  }
 catch (  java.lang.InterruptedException ioe2) {
    Log.e(_TAG,""String_Node_Str"" + ioe2.getMessage() + ""String_Node_Str"");
  }
  if (remoteResult) {
    int otl=oTags.length;
    for (int i=0; i < otl; i++) {
      insertTag(oTags[i],bookmarkURL);
    }
    setResult(Activity.RESULT_OK);
    finish();
  }
  mProgress.setIndeterminate(false);
  mProgress.setVisibility(ProgressBar.GONE);
  Log.d(_TAG,""String_Node_Str"");
}",0.950597609561753
187946,"private void fillDataTags(){
  Log.d(_TAG,""String_Node_Str"");
  String filter=null;
  String[] filterArray=null;
  if (mFilter != null) {
    filter=""String_Node_Str"";
    filterArray=new String[]{mFilter};
  }
  Cursor c=getContentResolver().query(Tags.CONTENT_URI,new String[]{Tags._ID,Tags.TAG_ID,Tags.CONTENT_ID,Tags.URI_1,Tags.URI_2},filter,filterArray,Tags.DEFAULT_SORT_ORDER);
  startManagingCursor(c);
  Log.d(_TAG,""String_Node_Str"" + c.count() + ""String_Node_Str"");
  if (c == null) {
    Log.e(_TAG,""String_Node_Str"");
    mTags.setAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,new String[]{""String_Node_Str""}));
    return;
  }
  ListAdapter adapter=new SimpleCursorAdapter(this,R.layout.tag_row,c,new String[]{Tags.URI_1},new int[]{R.id.tag_uri_1});
  Log.d(_TAG,""String_Node_Str"" + adapter.toString() + ""String_Node_Str"");
  mTags.setAdapter(adapter);
}","private void fillDataTags(){
  Log.d(_TAG,""String_Node_Str"");
  String filter=null;
  String[] filterArray=null;
  if (mFilter != null) {
    filter=""String_Node_Str"";
    filterArray=new String[]{mFilter};
  }
  Cursor c=getContentResolver().query(Tags.CONTENT_URI,new String[]{Tags._ID,Tags.TAG_ID,Tags.CONTENT_ID,Tags.URI_1,Tags.URI_2},filter,filterArray,Tags.DEFAULT_SORT_ORDER);
  startManagingCursor(c);
  Log.d(_TAG,""String_Node_Str"" + c.count() + ""String_Node_Str"");
  if (c == null) {
    Log.e(_TAG,""String_Node_Str"");
    mTags.setAdapter(new ArrayAdapter(this,android.R.layout.simple_list_item_1,new String[]{""String_Node_Str""}));
    return;
  }
  ListAdapter adapter=new SimpleCursorAdapter(this,R.layout.magnolia_tag_row,c,new String[]{Tags.URI_1},new int[]{R.id.tag_uri_1});
  Log.d(_TAG,""String_Node_Str"" + adapter.toString() + ""String_Node_Str"");
  mTags.setAdapter(adapter);
}",0.9949466591802358
187947,"private void saveDataSet(){
  Log.d(_TAG,""String_Node_Str"");
  Log.v(_TAG,""String_Node_Str"" + mCursor.requery());
  Log.v(_TAG,""String_Node_Str"" + mCursor.next());
  mCursor.updateString(cond1Row,mCond1.getText().toString());
  mCursor.updateString(cond2Row,mCond2.getText().toString());
  mCursor.updateString(intentRow,mIntent.getText().toString());
  mCursor.updateString(intentCatRow,mIntentCat.getText().toString());
  mCursor.updateString(intentUriRow,mIntentUri.getText().toString());
  mCursor.updateString(typeRow,((String)mType.getSelectedItem()));
  if (mActive.isChecked()) {
    mCursor.updateInt(activeRow,1);
  }
 else {
    mCursor.updateInt(activeRow,0);
  }
  if (mOnBoot.isChecked()) {
    mCursor.updateInt(onBootRow,1);
  }
 else {
    mCursor.updateInt(onBootRow,0);
  }
  mCursor.commitUpdates();
  if (Alert.TYPE_LOCATION.equals(mType.getSelectedItem())) {
    ContentValues cv=new ContentValues();
    cv.put(Location.POSITION,mCond1.getText().toString());
    cv.put(Location.DISTANCE,mCond2.getText().toString());
    Alert.registerLocationAlert(cv);
  }
}","private void saveDataSet(){
  Log.d(_TAG,""String_Node_Str"");
  Log.v(_TAG,""String_Node_Str"" + mCursor.first());
  CharSequence c=null;
  String s=new String();
  c=mCond1.getText();
  if (TextUtils.isEmpty(c)) {
    s=""String_Node_Str"";
  }
 else {
    s=c.toString();
  }
  mCursor.updateString(cond1Row,s);
  c=mCond2.getText();
  if (TextUtils.isEmpty(c)) {
    s=""String_Node_Str"";
  }
 else {
    s=c.toString();
  }
  Log.d(_TAG,""String_Node_Str"" + s + ""String_Node_Str"");
  try {
    mCursor.updateString(mCursor.getColumnIndex(Alert.Generic.CONDITION2),s);
  }
 catch (  Exception ex) {
    Log.e(_TAG,""String_Node_Str"");
  }
  c=mIntent.getText();
  if (TextUtils.isEmpty(c)) {
    s=""String_Node_Str"";
  }
 else {
    s=c.toString();
  }
  mCursor.updateString(intentRow,s);
  c=mIntentCat.getText();
  if (TextUtils.isEmpty(c)) {
    s=""String_Node_Str"";
  }
 else {
    s=c.toString();
  }
  mCursor.updateString(intentCatRow,s);
  c=mIntentUri.getText();
  if (TextUtils.isEmpty(c)) {
    s=""String_Node_Str"";
  }
 else {
    s=c.toString();
  }
  mCursor.updateString(intentUriRow,s);
  mCursor.updateString(typeRow,((String)mType.getSelectedItem()));
  if (mActive.isChecked()) {
    mCursor.updateInt(activeRow,1);
  }
 else {
    mCursor.updateInt(activeRow,0);
  }
  if (mOnBoot.isChecked()) {
    mCursor.updateInt(onBootRow,1);
  }
 else {
    mCursor.updateInt(onBootRow,0);
  }
  mCursor.commitUpdates();
  if (Alert.TYPE_LOCATION.equals(mType.getSelectedItem())) {
    ContentValues cv=new ContentValues();
    cv.put(Location.POSITION,mCond1.getText().toString());
    cv.put(Location.DISTANCE,mCond2.getText().toString());
    Alert.registerLocationAlert(cv);
  }
}",0.5546339704291381
187948,"public void onPause(){
  super.onPause();
  if (mState == STATE_CREATE) {
    createDataSet();
  }
 else   if (mState == STATE_EDIT) {
    saveDataSet();
  }
  if (mCursor != null) {
    mCursor.close();
  }
}","public void onPause(){
  super.onPause();
  Log.d(_TAG,""String_Node_Str"" + mState + ""String_Node_Str"");
  if (mState == STATE_CREATE) {
    createDataSet();
  }
 else   if (mState == STATE_EDIT) {
    saveDataSet();
  }
  if (mCursor != null) {
    mCursor.close();
  }
}",0.8708333333333333
187949,"@Override public boolean onOptionsItemSelected(Item item){
  super.onOptionsItemSelected(item);
  boolean result=true;
  Intent intent;
switch (item.getId()) {
case MENU_PICK_LOC:
    intent=new Intent(Intent.PICK_ACTION,Locations.CONTENT_URI);
  startSubActivity(intent,REQUEST_PICK_LOC);
break;
case MENU_PICK_ACTION:
intent=new Intent(Intent.PICK_ACTION,Intents.CONTENT_URI);
intent.putExtra(Intents.EXTRA_ACTION_LIST,Intent.VIEW_ACTION);
startSubActivity(intent,REQUEST_PICK_ACTION);
break;
case MENU_PICK_DATE_TIME:
break;
default :
result=false;
}
return result;
}","@Override public boolean onOptionsItemSelected(Item item){
  super.onOptionsItemSelected(item);
  boolean result=true;
  Intent intent;
switch (item.getId()) {
case MENU_PICK_LOC:
    intent=new Intent(Intent.PICK_ACTION,Locations.CONTENT_URI);
  if (mState == STATE_CREATE) {
    mState=STATE_SUB_CREATE;
  }
 else   if (mState == STATE_EDIT) {
    mState=STATE_SUB_EDIT;
  }
startSubActivity(intent,REQUEST_PICK_LOC);
break;
case MENU_PICK_ACTION:
intent=new Intent(Intent.PICK_ACTION,Intents.CONTENT_URI);
intent.putExtra(Intents.EXTRA_ACTION_LIST,Intent.VIEW_ACTION);
if (mState == STATE_CREATE) {
mState=STATE_SUB_CREATE;
}
 else if (mState == STATE_EDIT) {
mState=STATE_SUB_EDIT;
}
startSubActivity(intent,REQUEST_PICK_ACTION);
break;
case MENU_PICK_DATE_TIME:
break;
default :
result=false;
}
return result;
}",0.8225108225108225
187950,"public MessageListAdapter(Cursor c,Context context,boolean autoRequery,String feedType){
  super(c,context,autoRequery);
  initBoolTable(c.count());
  this.feedType=feedType;
}","public MessageListAdapter(Cursor c,Context context,boolean autoRequery,String feedType){
  super(c,context,autoRequery);
  registerDataSetObserver(new MyObserver(this));
  initBoolTable(c.count());
  this.feedType=feedType;
}",0.8778054862842892
187951,"private void menuMagnolia(){
  Bundle b=new Bundle();
  int pos=getSelectedItemPosition();
  mCursor.moveTo(pos);
  String strUri=""String_Node_Str"";
  String desc=""String_Node_Str"";
  if (feedType.equals(News.FEED_TYPE_RSS)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_TITLE));
  }
 else   if (feedType.equals(News.FEED_TYPE_ATOM)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_TITLE));
  }
}","private void menuMagnolia(){
  Bundle b=new Bundle();
  int pos=getSelectedItemPosition();
  mCursor.moveTo(pos);
  String strUri=""String_Node_Str"";
  String desc=""String_Node_Str"";
  if (feedType.equals(News.FEED_TYPE_RSS)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.RSSFeedContents.ITEM_TITLE));
  }
 else   if (feedType.equals(News.FEED_TYPE_ATOM)) {
    strUri=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_LINK));
    desc=mCursor.getString(mCursor.getColumnIndex(News.AtomFeedContents.ENTRY_TITLE));
  }
  b.putString(org.openintents.tags.MagnoliaTagging.URI,strUri);
  b.putString(org.openintents.tags.MagnoliaTagging.DESCRIPTION,desc);
  Intent intent=new Intent();
  intent.setAction(""String_Node_Str"");
  intent.addCategory(Intent.DEFAULT_CATEGORY);
  intent.putExtras(b);
  startActivity(intent);
}",0.80970625798212
187952,"@Override public boolean onCreateOptionsMenu(Menu menu){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  android.view.SubMenu submenu;
  boolean result=super.onCreateOptionsMenu(menu);
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_FOLLOW,""String_Node_Str"");
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_DELETE,""String_Node_Str"");
  submenu=menu.addSubMenu(0,AFeedMessages.MENU_TAGS,""String_Node_Str"");
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_TAG,""String_Node_Str"");
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_MAGNOLIA,""String_Node_Str"");
  return result;
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  Log.v(""String_Node_Str"",""String_Node_Str"");
  android.view.SubMenu submenu;
  boolean result=super.onCreateOptionsMenu(menu);
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_FOLLOW,""String_Node_Str"");
  menu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_DELETE,""String_Node_Str"");
  submenu=menu.addSubMenu(0,AFeedMessages.MENU_TAGS,""String_Node_Str"");
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_TAG,""String_Node_Str"",R.drawable.tagging_application001a);
  submenu.add(0,AFeedMessages.SUBMENU_CHANNELITEM_MAGNOLIA,""String_Node_Str"",R.drawable.tagging_magnolia_application001a);
  return result;
}",0.9358245329000812
187953,"@Override public void onCreate(Bundle icicle){
  Log.v(_TAG,""String_Node_Str"");
  try {
    super.onCreate(icicle);
    Log.v(_TAG,Integer.toString(R.layout.newsreader));
    try {
      News.mContentResolver=getContentResolver();
      mRSSCursor=managedQuery(News.RSSFeeds.CONTENT_URI,RSS_PROJECTION,null,null);
      startManagingCursor(mRSSCursor);
      Log.d(_TAG,""String_Node_Str"" + mRSSCursor);
      Log.d(_TAG,""String_Node_Str"" + mRSSCursor.count() + ""String_Node_Str"");
    }
 catch (    Exception x) {
      Log.e(_TAG,""String_Node_Str"" + x.getMessage() + ""String_Node_Str"");
    }
    setContentView(R.layout.newsreader);
    mChannelsView=(ListView)findViewById(R.id.newsreader_listitems);
    mChannelsView.setOnItemClickListener(new OnItemClickListener(){
      public void onItemClick(      AdapterView parent,      View v,      int position,      long id){
        parent.setSelection(position);
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Newsreader.this.openChannel();
      }
    }
);
    updateChannelsList();
  }
 catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
}","@Override public void onCreate(Bundle icicle){
  this.setTitle(""String_Node_Str"");
  try {
    super.onCreate(icicle);
    Log.v(_TAG,Integer.toString(R.layout.newsreader));
    try {
      News.mContentResolver=getContentResolver();
      mRSSCursor=managedQuery(News.RSSFeeds.CONTENT_URI,RSS_PROJECTION,null,null);
      startManagingCursor(mRSSCursor);
      Log.d(_TAG,""String_Node_Str"" + mRSSCursor);
      Log.d(_TAG,""String_Node_Str"" + mRSSCursor.count() + ""String_Node_Str"");
    }
 catch (    Exception x) {
      Log.e(_TAG,""String_Node_Str"" + x.getMessage() + ""String_Node_Str"");
    }
    setContentView(R.layout.newsreader);
    mChannelsView=(ListView)findViewById(R.id.newsreader_listitems);
    mChannelsView.setOnItemClickListener(new OnItemClickListener(){
      public void onItemClick(      AdapterView parent,      View v,      int position,      long id){
        parent.setSelection(position);
        Log.d(""String_Node_Str"",""String_Node_Str"");
        Newsreader.this.openChannel();
      }
    }
);
    updateChannelsList();
  }
 catch (  Exception e) {
    Log.e(_TAG,""String_Node_Str"" + e.getMessage() + ""String_Node_Str"");
  }
}",0.9900475984422328
187954,"/** 
 * Raises the data changed event, notifying observers that the data has changed.
 */
public void notifyDataSetChanged(){
  if (modified) {
    dataChangedEvent.raiseEvent(this,this);
  }
  modified=false;
}","/** 
 * Raises the data changed event, notifying observers that the data has changed, only if no transaction is currently being run.
 */
public void notifyDataSetChanged(){
  if (modified && !runningTransaction) {
    dataChangedEvent.raiseEvent(this,this);
  }
  modified=false;
}",0.8577235772357723
187955,"/** 
 * Ends the current transaction. This will raise the data changed event if any modifications have been made.
 * @see ObservableListAdapter#beginTransaction()
 * @throws IllegalStateException if no transaction is currently running.
 */
public void endTransaction(){
  if (runningTransaction) {
    runningTransaction=false;
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}","/** 
 * Ends the current transaction. This will raise the data changed event if any modifications have been made.
 * @see ObservableListAdapter#beginTransaction()
 * @throws IllegalStateException if no transaction is currently running.
 */
public void endTransaction(){
  if (runningTransaction) {
    runningTransaction=false;
    notifyDataSetChanged();
  }
 else {
    throw new IllegalStateException(""String_Node_Str"");
  }
}",0.9662650602409638
187956,"/** 
 * Parse double value
 * @param value  String representation
 * @return         Raw representation, -1 if not a number
 */
public static double parseDouble(String value){
  try {
    return Double.parseDouble(value);
  }
 catch (  Throwable err) {
    return -1.0;
  }
}","/** 
 * Parse double value
 * @param value         String representation
 * @param defaultValue  Default value that will be used if that string starts with a ‘y’ or ‘Y’
 * @return                Raw representation, -1 if not a number
 */
public static double parseDouble(String value,double defaultValue){
  if (value.startsWith(""String_Node_Str"") || value.startsWith(""String_Node_Str""))   return defaultValue;
  try {
    return Double.parseDouble(value);
  }
 catch (  Throwable err) {
    return -1.0;
  }
}",0.6853503184713375
187957,"/** 
 * Place a balloon in the top left of a   {@link Pony} and create a link
 * @param pony   The pony to edit
 * @param space  The additional space at the top
 */
public static void insertBalloon(Pony pony,int space){
  int y=0, x=0, w=pony.width;
  outer:   for (int h=pony.height; y <= h; y++) {
    if (y == h) {
      y=x=-1;
      break;
    }
    for (x=0; x < w; x++) {
      Pony.Cell cell=pony.matrix[y][x];
      int character=cell == null ? ' ' : cell.character;
      if (character >= 0) {
        if ((character != ' ') && (character != ' '))         break outer;
      }
 else       if (character == Pony.Cell.PIXELS)       if ((cell.upperColour != null) && (cell.lowerColour != null))       break outer;
    }
  }
  if (y >= 0) {
    System.arraycopy(pony.matrix,0,pony.matrix=new Pony.Cell[pony.height + 1 + space][],1 + space,pony.height);
    System.arraycopy(pony.metamatrix,0,pony.metamatrix=new Pony.Meta[pony.height + 1 + space][][],1 + space,pony.height);
    for (int i=0, mw=w + 1; i <= space; i++) {
      pony.matrix[i]=new Pony.Cell[w];
      pony.metamatrix[i]=new Pony.Meta[mw][];
    }
    pony.height+=1 + space;
    y+=1 + space;
    if (y > x)     for (int i=0, my=y + 1, mw=w + 1, h=pony.height; i <= h; i++) {
      System.arraycopy(pony.matrix[i],0,pony.matrix[i]=new Pony.Cell[y],0,w);
      System.arraycopy(pony.metamatrix[i],0,pony.metamatrix[i]=new Pony.Meta[my][],0,mw);
    }
    x-=y;
    for (int i=1; i < y; i++)     pony.matrix[i][x + i]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
  }
 else   if ((pony.height == 0) || (w == 0)) {
    pony.height=pony.width=1;
    pony.matrix=new Pony.Cell[1][1];
    pony.metamatrix=new Pony.Meta[1][1][];
  }
  Pony.Balloon speechballoon=new Pony.Balloon(null,null,new Integer(Math.max(x,5)),null,null,null,Pony.Balloon.NONE);
  if (pony.metamatrix[0][0] == null)   pony.metamatrix[0][0]=new Pony.Meta[]{speechballoon};
 else {
    System.arraycopy(pony.metamatrix[0][0],0,pony.metamatrix[0][0]=new Pony.Meta[pony.metamatrix[0][0].length + 1],1,pony.metamatrix[0][0].length - 1);
    pony.metamatrix[0][0][0]=speechballoon;
  }
}","/** 
 * Place a balloon in the top left of a   {@link Pony} and create a link
 * @param pony   The pony to edit
 * @param space  The additional space at the top
 */
public static void insertBalloon(Pony pony,int space){
  int y=0, x=0, w=pony.width;
  outer:   for (int h=pony.height; y <= h; y++) {
    if (y == h) {
      y=x=-1;
      break;
    }
    for (x=0; x < w; x++) {
      Pony.Cell cell=pony.matrix[y][x];
      int character=cell == null ? ' ' : cell.character;
      if (character >= 0) {
        if ((character != ' ') && (character != ' '))         break outer;
      }
 else       if (character == Pony.Cell.PIXELS)       if ((cell.upperColour != null) && (cell.lowerColour != null))       break outer;
    }
  }
  if (y >= 0) {
    System.arraycopy(pony.matrix,0,pony.matrix=new Pony.Cell[pony.height + 1 + space][],1 + space,pony.height);
    System.arraycopy(pony.metamatrix,0,pony.metamatrix=new Pony.Meta[pony.height + 1 + space][][],1 + space,pony.height);
    for (int i=0, mw=w + 1; i <= space; i++) {
      pony.matrix[i]=new Pony.Cell[w];
      pony.metamatrix[i]=new Pony.Meta[mw][];
    }
    pony.height+=1 + space;
    y+=1 + space;
    if (y > x)     for (int i=0, my=y + 1, mw=w + 1, h=pony.height; i < h; i++) {
      System.arraycopy(pony.matrix[i],0,pony.matrix[i]=new Pony.Cell[y],0,w);
      System.arraycopy(pony.metamatrix[i],0,pony.metamatrix[i]=new Pony.Meta[my][],0,mw);
    }
    x-=y;
    for (int i=1; i < y; i++)     pony.matrix[i][x + i]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
  }
 else   if ((pony.height == 0) || (w == 0)) {
    pony.height=pony.width=1;
    pony.matrix=new Pony.Cell[1][1];
    pony.metamatrix=new Pony.Meta[1][1][];
  }
  Pony.Balloon speechballoon=new Pony.Balloon(null,null,new Integer(Math.max(x,5)),null,null,null,Pony.Balloon.NONE);
  if (pony.metamatrix[0][0] == null)   pony.metamatrix[0][0]=new Pony.Meta[]{speechballoon};
 else {
    System.arraycopy(pony.metamatrix[0][0],0,pony.metamatrix[0][0]=new Pony.Meta[pony.metamatrix[0][0].length + 1],1,pony.metamatrix[0][0].length - 1);
    pony.metamatrix[0][0][0]=speechballoon;
  }
}",0.9997642065550578
187958,"/** 
 * Parse integer value
 * @param value  String representation
 * @return         Raw representation, -1 if not an integer
 */
public static int parseInteger(String value){
  try {
    return Integer.parseInt(value);
  }
 catch (  Throwable err) {
    return -1;
  }
}","/** 
 * Parse integer value
 * @param value         String representation
 * @param defaultValue  Default value that will be used if that string starts with a ‘y’ or ‘Y’
 * @return                Raw representation, -1 if not an integer
 */
public static int parseInteger(String value,int defaultValue){
  if (value.startsWith(""String_Node_Str"") || value.startsWith(""String_Node_Str""))   return defaultValue;
  try {
    return Integer.parseInt(value);
  }
 catch (  Throwable err) {
    return -1;
  }
}",0.6855670103092784
187959,"/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null)) {
    Color colour=palette[0]=this.palette[0];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if (this.fullcolour == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
  }
  if ((oldForeground != null) && (newForeground == null)) {
    Color colour=palette[7]=this.palette[7];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if (this.fullcolour == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
    int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
    colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
    if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))     colourindex2fore^=8;
  }
  if (colourindex2back != -1)   if (this.fullcolour == false) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour == false) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null)) {
    Color colour=palette[0]=this.palette[0];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if (this.fullcolour == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
  }
  if ((oldForeground != null) && (newForeground == null)) {
    Color colour=palette[7]=this.palette[7];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if (this.fullcolour == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
    int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
    colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
    if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))     colourindex2fore^=8;
  }
  if (colourindex2back != -1) {
    Color colour=this.fullcolour ? newBackground : palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1) {
    Color colour=this.fullcolour ? newForeground : palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}",0.8837886251679355
187960,"/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.fullcolour)     colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,1,6,this.chroma) : 7;
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.fullcolour) {
      int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 9 : 1);
      int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 5);
      colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
      if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))       colourindex2fore^=8;
    }
 else     colourindex2fore=colourindex1fore;
  }
  if (colourindex2back != -1)   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.fullcolour)     colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,1,6,this.chroma) : 7;
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.fullcolour) {
      int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 9 : 1);
      int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 5);
      colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
      if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))       colourindex2fore^=8;
    }
 else     colourindex2fore=colourindex1fore;
  }
  if (colourindex2back != -1)   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}",0.9995038451997024
187961,"/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null)) {
    Color colour=palette[0]=this.palette[0];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if (this.fullcolour == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
  }
  if ((oldForeground != null) && (newForeground == null)) {
    Color colour=palette[7]=this.palette[7];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if (this.fullcolour == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
    int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
    colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
    if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))     colourindex2fore^=8;
  }
  if (colourindex2back != -1) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null)) {
    Color colour=palette[0]=this.palette[0];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if (this.fullcolour == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
  }
  if ((oldForeground != null) && (newForeground == null)) {
    Color colour=palette[7]=this.palette[7];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
  }
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if (this.fullcolour == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
    int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
    colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
    if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))     colourindex2fore^=8;
  }
  if (colourindex2back != -1)   if (this.fullcolour == false) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour == false) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}",0.9736010830324908
187962,"/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.fullcolour)     colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.fullcolour) {
      int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
      int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
      colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
      if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))       colourindex2fore^=8;
    }
 else     colourindex2fore=colourindex1fore;
  }
  if (colourindex2back != -1)   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}","/** 
 * {@inheritDoc}
 */
public String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.fullcolour)     colourindex2back=this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.palette,0,8,this.chroma) : 7;
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.fullcolour) {
      int s=((newFormat.length > 9) && newFormat[9]) ? 0 : (newFormat[0] ? 8 : 0);
      int e=((newFormat.length > 9) && newFormat[9]) ? 16 : (s + 8);
      colourindex2fore=this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.palette,s,e,this.chroma) : 15;
      if (((colourindex2fore == 0) && (newBackground == null)) || (colourindex2fore == colourindex2back))       colourindex2fore^=8;
    }
 else     colourindex2fore=colourindex1fore;
  }
  if (colourindex2back != -1)   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore & 7);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  boolean _=newFormat[0];
  newFormat[0]=(colourindex2fore == -1) ? oldFormat[0] : ((8 <= colourindex2fore) && (colourindex2fore < 16));
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if ((oldFormat[i]=newFormat[i])) {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i + 1);
  }
  newFormat[0]=_;
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}",0.9995038451997024
187963,"/** 
 * Parse palette
 * @param value  String representation, without ESC, ] or P
 * @return         Raw representation
 */
protected static Color[] parsePalette(String value){
  String defvalue=""String_Node_Str"" + ""String_Node_Str"";
  Color[] palette=new Color[16];
  for (int ptr=0, n=defvalue.length(); ptr < n; ptr+=7) {
    int index=Integer.parseInt(defvalue.substring(ptr + 0,1),16);
    int red=Integer.parseInt(defvalue.substring(ptr + 1,2),16);
    int green=Integer.parseInt(defvalue.substring(ptr + 3,2),16);
    int blue=Integer.parseInt(defvalue.substring(ptr + 5,2),16);
    palette[index]=new Color(red,green,blue);
  }
  for (int ptr=0, n=value.length(); ptr < n; ptr+=7) {
    int index=Integer.parseInt(value.substring(ptr + 0,1),16);
    int red=Integer.parseInt(value.substring(ptr + 1,2),16);
    int green=Integer.parseInt(value.substring(ptr + 3,2),16);
    int blue=Integer.parseInt(value.substring(ptr + 5,2),16);
    palette[index]=new Color(red,green,blue);
  }
  return palette;
}","/** 
 * Parse palette
 * @param value  String representation, without ESC, ] or P
 * @return         Raw representation
 */
protected static Color[] parsePalette(String value){
  String defvalue=""String_Node_Str"" + ""String_Node_Str"";
  Color[] palette=new Color[16];
  for (int ptr=0, n=defvalue.length(); ptr < n; ptr+=7) {
    int index=Integer.parseInt(defvalue.substring(ptr + 0,ptr + 1),16);
    int red=Integer.parseInt(defvalue.substring(ptr + 1,ptr + 3),16);
    int green=Integer.parseInt(defvalue.substring(ptr + 3,ptr + 5),16);
    int blue=Integer.parseInt(defvalue.substring(ptr + 5,ptr + 7),16);
    palette[index]=new Color(red,green,blue);
  }
  for (int ptr=0, n=value.length(); ptr < n; ptr+=7) {
    int index=Integer.parseInt(value.substring(ptr + 0,ptr + 1),16);
    int red=Integer.parseInt(value.substring(ptr + 1,ptr + 3),16);
    int green=Integer.parseInt(value.substring(ptr + 3,ptr + 5),16);
    int blue=Integer.parseInt(value.substring(ptr + 5,ptr + 7),16);
    palette[index]=new Color(red,green,blue);
  }
  return palette;
}",0.9709583736689256
187964,"/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param ttypalette     The user's TTY colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color[] ttypalette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],palette,0,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
    if (this.tty)     if (colourindex2fore == colourindex2back)     colourindex2fore|=8;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return ""String_Node_Str"" + _rc.substring(1) + ""String_Node_Str"";
}","/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param ttypalette     The user's TTY colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color[] ttypalette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],this.tty ? ttypalette : palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newForeground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],this.tty ? ttypalette : palette,8,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex2fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2fore < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return (""String_Node_Str"" + _rc.substring(1)).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
}",0.9577055726992194
187965,"/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  BufferedImage image=ImageIO.read(new File(this.file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,y * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(a,r,g,b),null,null);
    if ((y + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(a,r,g,b);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix[y][x]=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  BufferedImage image=ImageIO.read(new File(this.file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height - 1; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,y * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y >> 1][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(r,g,b,a),null,null);
    if ((y + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(r,g,b,a);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix[y][x]=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}",0.995572870550735
187966,"/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] plain=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=plain;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1][],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr][],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,plain));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,plain));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Store(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.metamatrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] PLAIN=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=PLAIN;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1][],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr][],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,PLAIN));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,PLAIN));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Store(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.metamatrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}",0.9983943481053308
187967,"/** 
 * Export a pony to the file
 * @param pony  The pony
 * @throws IOException  On I/O error
 */
public void exportPony(Pony pony) throws IOException {
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] plain=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : pony.tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,plain);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],this.left,matrix[y]=new Pony.Cell[w + this.left],0,w);
      System.arraycopy(metamatrix[y],this.left,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],0,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,this.top,matrix=new Pony.Cell[h + this.top][],0,h);
    System.arraycopy(matrix,0,appendix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][][];
    System.arraycopy(metamatrix,this.top,metamatrix=new Pony.Meta[h + this.top][w + 1][],0,h);
    System.arraycopy(metamatrix,0,metaappendix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(matrix,h,appendix,0,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metamatrix,h,metaappendix,0,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  Pony.Cell defaultcell=new Pony.Cell(' ',null,null,plain);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[row.length];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) {
          Class<?> metaclass=meta.getClass();
          if (metaclass == Pony.Store.class)           databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
 else           if (metaclass == Pony.Recall.class) {
            Pony.Recall recall=(Pony.Recall)meta;
            Color back=((recall.backgroundColour == null) || (recall.backgroundColour.getAlpha() < 112)) ? null : recall.backgroundColour;
            Color fore=((recall.foregroundColour == null) || (recall.foregroundColour.getAlpha() < 112)) ? null : recall.foregroundColour;
            databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
            databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
 else           if (metaclass == Pony.Balloon.class) {
            databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
            Pony.Balloon balloon=(Pony.Balloon)meta;
            if (balloon.left != null) {
              int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
                char[] spaces=new char[balloon.left.intValue()];
              Arrays.fill(spaces,' ');
            databuf.append(new String(spaces));
          databuf.append(""String_Node_Str"" + balloon.left.intValue());
        break;
case Pony.Balloon.LEFT:
      databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
    databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
  break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
}
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lowerColour == null) if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upperColour,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=null,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour.equals(cell.lowerColour)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=this.spacesave ? foreground : cell.lowerColour,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=plain));
databuf.append('▄');
}
}
}
background=foreground=null;
format=plain;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else {
metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str"") + 5);
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int i=0, n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) databuf.append(dollar);
 else {
databuf.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
databuf.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}","/** 
 * Export a pony to the file
 * @param pony  The pony
 * @throws IOException  On I/O error
 */
public void exportPony(Pony pony) throws IOException {
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] PLAIN=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : pony.tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,PLAIN);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.left],this.left,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],this.left,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.top][],this.top,h);
    System.arraycopy(appendix,0,matrix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.top][w + 1][],this.top,h);
    System.arraycopy(metaappendix,0,metamatrix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(appendix,0,matrix,h,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metaappendix,0,metamatrix,h,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  Pony.Cell defaultcell=new Pony.Cell(' ',null,null,PLAIN);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[x];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) {
          Class<?> metaclass=meta.getClass();
          if (metaclass == Pony.Store.class)           databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
 else           if (metaclass == Pony.Recall.class) {
            Pony.Recall recall=(Pony.Recall)meta;
            Color back=((recall.backgroundColour == null) || (recall.backgroundColour.getAlpha() < 112)) ? null : recall.backgroundColour;
            Color fore=((recall.foregroundColour == null) || (recall.foregroundColour.getAlpha() < 112)) ? null : recall.foregroundColour;
            databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
            databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
 else           if (metaclass == Pony.Balloon.class) {
            databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=PLAIN));
            Pony.Balloon balloon=(Pony.Balloon)meta;
            if (balloon.left != null) {
              int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
                char[] spaces=new char[balloon.left.intValue()];
              Arrays.fill(spaces,' ');
            databuf.append(new String(spaces));
          databuf.append(""String_Node_Str"" + balloon.left.intValue());
        break;
case Pony.Balloon.LEFT:
      databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
    databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
  break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
}
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=PLAIN));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=PLAIN));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lowerColour == null) if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=PLAIN));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upperColour,format=PLAIN));
databuf.append('▀');
}
 else if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=null,format=PLAIN));
databuf.append('▀');
}
 else if (cell.upperColour.equals(cell.lowerColour)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.lowerColour,format=PLAIN));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lowerColour,foreground=cell.lowerColour,format=PLAIN));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=this.spacesave ? foreground : cell.lowerColour,format=PLAIN));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=PLAIN));
databuf.append('▄');
}
}
}
background=foreground=null;
format=PLAIN;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else {
metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str"") + 5);
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int i=0, n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) databuf.append(dollar);
 else {
databuf.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
databuf.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}",0.9453794064927306
187968,"/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],palette,0,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
    if (colourindex2fore == colourindex2back)     colourindex2fore|=8;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return ""String_Node_Str"" + _rc.substring(1) + ""String_Node_Str"";
}","/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false))   if (newBackground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false))   if (newForeground != null) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],palette,0,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
    if (colourindex2fore == colourindex2back)     colourindex2fore|=8;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return ""String_Node_Str"" + _rc.substring(1) + ""String_Node_Str"";
}",0.9946146703806872
187969,"/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  BufferedImage image=ImageIO.read(new File(file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,(y * 2) * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(a,r,g,b),null,null);
    if ((y * 2 + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y * 2 + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(a,r,g,b);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  BufferedImage image=ImageIO.read(new File(file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,(y * 2) * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(a,r,g,b),null,null);
    if ((y * 2 + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y * 2 + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(a,r,g,b);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix[y][x]=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}",0.9989161849710982
187970,"/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] plain=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=plain;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,plain));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,plain));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Recall(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.matrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.matrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.matrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] plain=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=plain;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1][],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr][],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,plain));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,plain));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Store(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.metamatrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}",0.998910543517734
187971,"/** 
 * Export a pony to the file
 * @param pony  The pony
 */
public void exportPony(Pony pony){
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] plain=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,plain);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],this.left,matrix[y]=new Pony.Cell[w + this.left],0,w);
      System.arraycopy(metamatrix[y],this.left,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],0,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,this.top,matrix=new Pony.Cell[h + this.top][],0,h);
    System.arraycopy(matrix,0,appendix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][][];
    System.arraycopy(metamatrix,this.top,metamatrix=new Pony.Meta[h + this.top][w + 1][],0,h);
    System.arraycopy(metamatrix,0,metaappendix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(matrix,h,appendix,0,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metamatrix,h,metaappendix,0,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  defaultcell=new Pony.Cell(' ',null,null,plain);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[row.length];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) switch (meta.getClass()) {
case Pony.Store.class:
          databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
        break;
case Pony.Recall.class:
      Pony.Recall recall=(Pony.Recall)meta;
    Color back=((cell.background == null) || (cell.background.getAlpha() < 112)) ? null : cell.background;
  Color fore=((cell.foreground == null) || (cell.foreground.getAlpha() < 112)) ? null : cell.foreground;
databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
break;
case Pony.Balloon.class:
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
Pony.Balloon balloon=(Pony.Balloon)meta;
if (balloon.left != null) {
int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
char[] spaces=new char[balloon.left.intValue()];
Arrays.fill(spaces,' ');
databuf.append(new String(spaces));
databuf.append(""String_Node_Str"" + balloon.left.intValue());
break;
case Pony.Balloon.LEFT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
break;
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lower,foreground=cell.upper,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lower == null) if (cell.upper == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upper,format=plain));
databuf.append('▀');
}
 else if (cell.upper == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lower,foreground=null,format=plain));
databuf.append('▀');
}
 else if (cell.upper.equals(cell.lower)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lower,foreground=cell.lower,format=plain));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lower,foreground=cell.lower,format=plain));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lower,foreground=this.spacesave ? foreground : cell.lower,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lower,foreground=cell.upper,format=plain));
databuf.append('▄');
}
}
}
background=foreground=null;
format=plain;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
String metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str""));
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) data.append(dollar);
 else {
data.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
data.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}","/** 
 * Export a pony to the file
 * @param pony  The pony
 */
public void exportPony(Pony pony){
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] plain=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : pony.tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,plain);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],this.left,matrix[y]=new Pony.Cell[w + this.left],0,w);
      System.arraycopy(metamatrix[y],this.left,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],0,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,this.top,matrix=new Pony.Cell[h + this.top][],0,h);
    System.arraycopy(matrix,0,appendix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][][];
    System.arraycopy(metamatrix,this.top,metamatrix=new Pony.Meta[h + this.top][w + 1][],0,h);
    System.arraycopy(metamatrix,0,metaappendix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(matrix,h,appendix,0,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metamatrix,h,metaappendix,0,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  Pony.Cell defaultcell=new Pony.Cell(' ',null,null,plain);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[row.length];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) {
          Class<?> metaclass=meta.getClass();
          if (metaclass == Pony.Store.class)           databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
 else           if (metaclass == Pony.Recall.class) {
            Pony.Recall recall=(Pony.Recall)meta;
            Color back=((recall.backgroundColour == null) || (recall.backgroundColour.getAlpha() < 112)) ? null : recall.backgroundColour;
            Color fore=((recall.foregroundColour == null) || (recall.foregroundColour.getAlpha() < 112)) ? null : recall.foregroundColour;
            databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
            databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
 else           if (metaclass == Pony.Balloon.class) {
            databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
            Pony.Balloon balloon=(Pony.Balloon)meta;
            if (balloon.left != null) {
              int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
                char[] spaces=new char[balloon.left.intValue()];
              Arrays.fill(spaces,' ');
            databuf.append(new String(spaces));
          databuf.append(""String_Node_Str"" + balloon.left.intValue());
        break;
case Pony.Balloon.LEFT:
      databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
    databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
  break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
}
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lowerColour == null) if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upperColour,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=null,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour.equals(cell.lowerColour)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=this.spacesave ? foreground : cell.lowerColour,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=plain));
databuf.append('▄');
}
}
}
background=foreground=null;
format=plain;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
String metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str""));
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int i=0, n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) data.append(dollar);
 else {
data.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
data.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}",0.977026003534461
187972,"/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importCow(){
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  Scanner sc=new Scanner(in,""String_Node_Str"");
  StringBuilder cow=new StringBuilder();
  StringBuilder data=new StringBuilder();
  boolean meta=false;
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  while (sc.hasNextLine()) {
    String line=sc.nextLine();
    if (line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").startsWith(""String_Node_Str"")) {
      if (meta == false) {
        meta=true;
        data.append(""String_Node_Str"");
      }
      line=line.substring(line.indexOf(""String_Node_Str"") + 1);
      if (line.equals(""String_Node_Str""))       line=""String_Node_Str"";
      data.append(line + ""String_Node_Str"");
      data.append('\n');
    }
 else {
      cow.append(line.replace(""String_Node_Str"",""String_Node_Str""));
      cow.append('\n');
    }
  }
  if (meta)   data.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  if (in != System.in)   in.close();
  String pony=new String(execCow(cow.toString()),""String_Node_Str"");
  String line=pony.substring(0,pony.indexOf('\n'));
  int pos=line.indexOf(""String_Node_Str"") + 3;
  if (pos > 3)   data.append(""String_Node_Str"" + pos + ""String_Node_Str"");
 else   data.append(""String_Node_Str"");
  data.append(pony);
  InputStream stdin=System.in;
  try {
    final byte[] streamdata=data.toString().getBytes(""String_Node_Str"");
    System.setIn(new InputStream(){
      int ptr=0;
      @Override public int read(){
        if (this.ptr == streamdata.length)         return -1;
        return streamdata[this.ptr++] & 255;
      }
      @Override public int available(){
        return streamdata.length - this.ptr;
      }
    }
);
    this.flags.put(""String_Node_Str"",null);
    Ponysay ponysay=new Ponysay(this.flags);
    if (ponysay.version == this.version)     throw new Error(""String_Node_Str"");
    return ponysay.importPony();
  }
  finally {
    System.setIn(stdin);
  }
}","/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importCow() throws IOException {
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  Scanner sc=new Scanner(in,""String_Node_Str"");
  StringBuilder cow=new StringBuilder();
  StringBuilder data=new StringBuilder();
  boolean meta=false;
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  while (sc.hasNextLine()) {
    String line=sc.nextLine();
    if (line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").startsWith(""String_Node_Str"")) {
      if (meta == false) {
        meta=true;
        data.append(""String_Node_Str"");
      }
      line=line.substring(line.indexOf(""String_Node_Str"") + 1);
      if (line.equals(""String_Node_Str""))       line=""String_Node_Str"";
      data.append(line + ""String_Node_Str"");
      data.append('\n');
    }
 else {
      cow.append(line.replace(""String_Node_Str"",""String_Node_Str""));
      cow.append('\n');
    }
  }
  if (meta)   data.append(""String_Node_Str"");
  cow.append(""String_Node_Str"");
  if (in != System.in)   in.close();
  String pony=new String(execCow(cow.toString()),""String_Node_Str"");
  String line=pony.substring(0,pony.indexOf('\n'));
  int pos=line.indexOf(""String_Node_Str"") + 3;
  if (pos > 3)   data.append(""String_Node_Str"" + pos + ""String_Node_Str"");
 else   data.append(""String_Node_Str"");
  data.append(pony);
  InputStream stdin=System.in;
  try {
    final byte[] streamdata=data.toString().getBytes(""String_Node_Str"");
    System.setIn(new InputStream(){
      int ptr=0;
      @Override public int read(){
        if (this.ptr == streamdata.length)         return -1;
        return streamdata[this.ptr++] & 255;
      }
      @Override public int available(){
        return streamdata.length - this.ptr;
      }
    }
);
    this.flags.put(""String_Node_Str"",null);
    Ponysay ponysay=new Ponysay(this.flags);
    if (ponysay.version == this.version)     throw new Error(""String_Node_Str"");
    return ponysay.importPony();
  }
  finally {
    System.setIn(stdin);
  }
}",0.98711281935338
187973,"/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  BufferedImage image=ImageIO.read(new File(file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,(y * 2) * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(a,r,g,b),null,null);
    if ((y * 2 + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y * 2 + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(a,r,g,b);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix[y][x]=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  BufferedImage image=ImageIO.read(new File(file));
  int width=image.getWidth() / this.magnified;
  int height=image.getHeight() / this.magnified;
  int div=this.magnified * this.magnified;
  Pony.Cell cell;
  Pony pony=new Pony(height >> 1,width,null,null);
  for (int y=0; y < height; y+=2)   for (int x=0; x < width; x++) {
    int a=0, r=0, g=0, b=0;
    for (int yy=0; yy < this.magnified; yy++)     for (int xx=0; xx < this.magnified; xx++) {
      int argb=image.getRGB(x * this.magnified + xx,(y * 2) * this.magnified + yy);
      a+=(argb >> 24) & 255;
      r+=(argb >> 16) & 255;
      g+=(argb >> 8) & 255;
      b+=argb & 255;
    }
    a/=div;
    r/=div;
    g/=div;
    b/=div;
    pony.matrix[y][x]=cell=new Pony.Cell(Pony.Cell.PIXELS,new Color(a,r,g,b),null,null);
    if ((y * 2 + 2) * this.magnified <= image.getHeight()) {
      a=r=g=b=0;
      for (int yy=0; yy < this.magnified; yy++)       for (int xx=0; xx < this.magnified; xx++) {
        int argb=image.getRGB(x * this.magnified + xx,(y * 2 + 1) * this.magnified + yy);
        a+=(argb >> 24) & 255;
        r+=(argb >> 16) & 255;
        g+=(argb >> 8) & 255;
        b+=argb & 255;
      }
      a/=div;
      r/=div;
      g/=div;
      b/=div;
      cell.lowerColour=new Color(a,r,g,b);
    }
    if (encoded && (cell.upperColour.getAlpha() == cell.lowerColour.getAlpha())) {
      r=cell.upperColour.getRed();
      g=cell.upperColour.getGreen();
      b=cell.upperColour.getBlue();
      int r2=cell.upperColour.getRed();
      int g2=cell.upperColour.getGreen();
      int b2=cell.upperColour.getBlue();
switch (cell.upperColour.getAlpha()) {
case 100:
        if ((r == 0) && (g == 0) && (b == 255))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNE_SSW,null,null,null);
 else         if ((r == 255) && (g == 0) && (b == 0))         pony.matrix[y][x]=new Pony.Cell(Pony.Cell.NNW_SSE,null,null,null);
      break;
case 99:
    boolean jl=(r & 128) == 128;
  boolean jr=(g & 128) == 128;
int left=r & 127;
int minw=g & 127;
int maxw=b;
boolean jt=(r2 & 128) == 128;
boolean jb=(g2 & 128) == 128;
int top=r2 & 127;
int minh=g2 & 127;
int maxh=b2;
int justification=(jl ? Pony.Balloon.LEFT : Pony.Balloon.NONE) | (jr ? Pony.Balloon.RIGHT : Pony.Balloon.NONE) | (jt ? Pony.Balloon.TOP : Pony.Balloon.NONE)| (jb ? Pony.Balloon.BOTTOM : Pony.Balloon.NONE);
pony.matrix[y][x]=null;
pony.metamatrix[y][x]=new Pony.Meta[]{new Pony.Balloon(left == 0 ? null : new Integer(left),top == 0 ? null : new Integer(top),minw == 0 ? null : new Integer(minw),minh == 0 ? null : new Integer(minh),maxw == 0 ? null : new Integer(maxw),maxh == 0 ? null : new Integer(maxh),justification)};
break;
}
}
}
return pony;
}",0.989819610644758
187974,"/** 
 * Import the pony from file
 * @return  The pony
 */
public Pony importPony(){
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] plain=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=plain;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1][],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr][],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,plain));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,plain));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Store(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.metamatrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}","/** 
 * Import the pony from file
 * @return  The pony
 * @throws IOException  On I/O error
 */
public Pony importPony() throws IOException {
  if (this.version == VERSION_COWSAY)   return this.importCow();
  boolean[] plain=new boolean[9];
  Color[] colours=new Color[256];
  boolean[] format=plain;
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  InputStream in=System.in;
  if (this.file != null)   in=new BufferedInputStream(new FileInputStream(this.file));
  boolean dollar=false;
  boolean escape=false;
  boolean csi=false;
  boolean osi=false;
  int[] buf=new int[256];
  int ptr=0;
  int dollareql=-1;
  int width=0;
  int curwidth=0;
  int height=1;
  LinkedList<Object> items=new LinkedList<Object>();
  String comment=null;
  String[][] tags=null;
  int tagptr=0;
  int[] unmetabuf=new int[4];
  int unmetaptr=0;
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  unmetabuf[unmetaptr++]=in.read();
  if ((unmetabuf[0] == '$') && (unmetabuf[1] == '$') && (unmetabuf[2] == '$')&& (unmetabuf[3] == '\n')) {
    unmetaptr=0;
    byte[] data=new byte[256];
    int d=0;
    while ((d=in.read()) != -1) {
      if (ptr == data.length)       System.arraycopy(data,0,data=new byte[ptr << 1],0,ptr);
      data[ptr++]=(byte)d;
      if ((ptr >= 5) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')&& (data[ptr - 5] == '\n')) {
        ptr-=5;
        break;
      }
      if ((ptr == 4) && (data[ptr - 1] == '\n') && (data[ptr - 2] == '$')&& (data[ptr - 3] == '$')&& (data[ptr - 4] == '$')) {
        ptr-=4;
        break;
      }
    }
    if (d == -1)     throw new RuntimeException(""String_Node_Str"");
    String[] code=(new String(data,0,ptr,""String_Node_Str"")).split(""String_Node_Str"");
    StringBuilder commentbuf=new StringBuilder();
    for (    String line : code) {
      int colon=line.indexOf(':');
      boolean istag=colon > 0;
      String name=null, value=null;
      block: {
        if (istag) {
          istag=false;
          name=line.substring(0,colon);
          value=line.substring(colon + 1);
          char c;
          for (int i=0, n=name.length(); i < n; i++)           if ((c=name.charAt(i)) != ' ')           if (('A' > c) || (c > 'Z'))           break block;
          istag=true;
        }
      }
      if (istag) {
        if (tags == null)         tags=new String[32][];
 else         if (tagptr == tags.length)         System.arraycopy(tags,0,tags=new String[tagptr << 1][],0,tagptr);
        tags[tagptr++]=new String[]{name.trim(),value.trim()};
      }
 else {
        commentbuf.append(line);
        commentbuf.append('\n');
      }
    }
    ptr=0;
    comment=commentbuf.toString();
    while ((ptr < comment.length()) && (comment.charAt(ptr) == '\n'))     ptr++;
    if (ptr > 0) {
      comment=comment.substring(ptr);
      ptr=0;
    }
    if (comment.isEmpty())     comment=null;
    if ((tags != null) && (tagptr < tags.length))     System.arraycopy(tags,0,tags=new String[tagptr][],0,tagptr);
  }
  for (int d=0, stored=-1, c; ; ) {
    if (unmetaptr > 0) {
      d=unmetabuf[3 - --unmetaptr];
      if (d == -1)       break;
    }
 else     if ((d=stored) != -1)     stored=-1;
 else     if ((d=in.read()) == -1)     break;
    if (((c=d) & 0x80) == 0x80) {
      int n=0;
      while ((c & 0x80) == 0x80) {
        c<<=1;
        n++;
      }
      c=(c & 255) >> n;
      while (((d=in.read()) & 0xC0) == 0x80)       c=(c << 6) | (d & 0x3F);
      stored=d;
    }
    if (dollar)     if ((d == '\033') && !escape)     escape=true;
 else     if ((d == '$') && !escape) {
      dollar=false;
      if (dollareql == -1) {
        int[] _name=new int[ptr];
        System.arraycopy(buf,0,_name,0,_name.length);
        String name=utf32to16(_name);
        if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNE_SSW,null,null,plain));
        }
 else         if (name.equals(""String_Node_Str"")) {
          curwidth++;
          items.add(new Pony.Cell(this.ignorelink ? ' ' : Pony.Cell.NNW_SSE,null,null,plain));
        }
 else         if (name.startsWith(""String_Node_Str"") == false)         items.add(new Pony.Recall(name,foreground,background,format));
 else         if (this.ignoreballoon == false) {
          String[] parts=(name.substring(""String_Node_Str"".length()) + ""String_Node_Str"").split(""String_Node_Str"");
          Integer h=parts[1].isEmpty() ? null : new Integer(parts[1]);
          int justify=Pony.Balloon.NONE;
          if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.LEFT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.RIGHT;
 else           if (parts[0].contains(""String_Node_Str""))           justify=Pony.Balloon.CENTRE;
 else           items.add(new Pony.Balloon(null,null,parts[0].isEmpty() ? null : new Integer(parts[0]),h,null,null,Pony.Balloon.NONE));
          if (justify != Pony.Balloon.NONE) {
            parts=parts[0].replace('l',',').replace('r',',').replace('c',',').split(""String_Node_Str"");
            int part0=Integer.parseInt(parts[0]), part1=Integer.parseInt(parts[1]);
            items.add(new Pony.Balloon(new Integer(part0),null,new Integer(part1 - part0 + 1),h,null,null,justify));
          }
        }
      }
 else {
        int[] name=new int[dollareql];
        System.arraycopy(buf,0,name,0,name.length);
        int[] value=new int[ptr - dollareql - 1];
        System.arraycopy(buf,dollareql + 1,value,0,value.length);
        items.add(new Pony.Store(utf32to16(name),utf32to16(value)));
      }
      ptr=0;
      dollareql=-1;
    }
 else {
      escape=false;
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      if ((dollareql == -1) && (d == '='))       dollareql=ptr;
      buf[ptr++]=d;
    }
 else     if (escape)     if (osi)     if (ptr > 0) {
      buf[ptr++ - 1]=d;
      if (ptr == 8) {
        ptr=0;
        osi=escape=false;
        int index=(buf[0] < 'A') ? (buf[0] & 15) : ((buf[0] ^ '@') + 9);
        int red=(buf[1] < 'A') ? (buf[1] & 15) : ((buf[1] ^ '@') + 9);
        red=(red << 4) | ((buf[2] < 'A') ? (buf[2] & 15) : ((buf[2] ^ '@') + 9));
        int green=(buf[3] < 'A') ? (buf[3] & 15) : ((buf[3] ^ '@') + 9);
        green=(green << 4) | ((buf[4] < 'A') ? (buf[4] & 15) : ((buf[4] ^ '@') + 9));
        int blue=(buf[5] < 'A') ? (buf[5] & 15) : ((buf[5] ^ '@') + 9);
        blue=(blue << 4) | ((buf[6] < 'A') ? (buf[6] & 15) : ((buf[6] ^ '@') + 9));
        colours[index]=new Color(red,green,blue);
      }
    }
 else     if (ptr < 0) {
      if (~ptr == buf.length)       System.arraycopy(buf,0,buf=new int[~ptr << 1],0,~ptr);
      if (d == '\\') {
        ptr=~ptr;
        ptr--;
        if ((ptr > 8) && (buf[ptr] == '\033') && (buf[0] == ';')) {
          int[] _code=new int[ptr - 1];
          System.arraycopy(buf,1,_code,0,ptr - 1);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          if (code.length == 2) {
            int index=Integer.parseInt(code[0]);
            code=code[1].split(""String_Node_Str"");
            if ((code.length == 3) && (code[0].startsWith(""String_Node_Str""))) {
              code[0]=code[0].substring(4);
              int red=Integer.parseInt(code[0],16);
              int green=Integer.parseInt(code[1],16);
              int blue=Integer.parseInt(code[2],16);
              colours[index]=new Color(red,green,blue);
            }
          }
        }
        ptr=0;
        osi=escape=false;
      }
 else {
        buf[~ptr]=d;
        ptr--;
      }
    }
 else     if (d == 'P')     ptr=1;
 else     if (d == '4')     ptr=~0;
 else {
      osi=escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(']',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
    }
 else     if (csi) {
      if (ptr == buf.length)       System.arraycopy(buf,0,buf=new int[ptr << 1],0,ptr);
      buf[ptr++]=d;
      if ((('a' <= d) && (d <= 'z')) || (('A' <= d) && (d <= 'Z')) || (d == '~')) {
        csi=escape=false;
        ptr--;
        if (d == 'm') {
          int[] _code=new int[ptr];
          System.arraycopy(buf,0,_code,0,ptr);
          String[] code=utf32to16(_code).split(""String_Node_Str"");
          int xterm256=0;
          boolean back=false;
          for (          String seg : code) {
            int value=Integer.parseInt(seg);
            if (xterm256 == 2) {
              xterm256=0;
              if (back)               background=colours[value];
 else               foreground=colours[value];
            }
 else             if (value == 0) {
              for (int i=0; i < 9; i++)               format[i]=false;
              background=foreground=null;
            }
 else             if (xterm256 == 1)             xterm256=value == 5 ? 2 : 0;
 else             if (value < 10)             format[value - 1]=true;
 else             if ((20 < value) && (value < 30))             format[value - 21]=false;
 else             if (value == 39)             foreground=null;
 else             if (value == 49)             background=null;
 else             if (value < 38)             foreground=colours[value - 30];
 else             if (value < 48)             background=colours[value - 40];
 else             if (value == 38)             xterm256=1;
 else             if (value == 48)             xterm256=1;
            if (xterm256 == 1)             back=value == 48;
          }
        }
        ptr=0;
      }
    }
 else     if (d == '[') {
      csi=true;
      ptr=0;
    }
 else     if (d == ']')     osi=true;
 else {
      escape=false;
      items.add(new Pony.Cell('\033',foreground,background,format));
      items.add(new Pony.Cell(d,foreground,background,format));
      curwidth+=2;
    }
 else     if (d == '\033')     escape=true;
 else     if (d == '$')     dollar=true;
 else     if (d == '\n') {
      if (width < curwidth)       width=curwidth;
      curwidth=0;
      height=0;
      items.add(null);
    }
 else {
      boolean combining=false;
      if ((0x0300 <= c) && (c <= 0x036F))       combining=true;
      if ((0x20D0 <= c) && (c <= 0x20FF))       combining=true;
      if ((0x1DC0 <= c) && (c <= 0x1DFF))       combining=true;
      if ((0xFE20 <= c) && (c <= 0xFE2F))       combining=true;
      if (combining)       items.add(new Pony.Combining(c,foreground,background,format));
 else {
        curwidth++;
        Color fore=foreground == null ? colours[7] : foreground;
        if (c == '▀')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,background,format));
 else         if (c == '▄')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,fore,format));
 else         if (c == '█')         items.add(new Pony.Cell(Pony.Cell.PIXELS,fore,fore,format));
 else         if (c == ' ')         items.add(new Pony.Cell(Pony.Cell.PIXELS,background,background,format));
 else         items.add(new Pony.Cell(c,foreground,background,format));
      }
    }
  }
  if (in != System.in)   in.close();
  Pony pony=new Pony(height,width,comment,tags);
  int y=0, x=0;
  Pony.Meta[] metabuf=new Pony.Meta[256];
  int metaptr=0;
  for (  Object obj : items)   if (obj == null) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    y++;
    x=0;
  }
 else   if (obj instanceof Pony.Cell) {
    if (metaptr != 0) {
      Pony.Meta[] metacell=new Pony.Meta[metaptr];
      System.arraycopy(metabuf,0,metacell,0,metaptr);
      pony.metamatrix[y][x]=metacell;
      metaptr=0;
    }
    Pony.Cell cell=(Pony.Cell)obj;
    pony.matrix[y][x++]=cell;
  }
 else {
    Pony.Meta meta=(Pony.Meta)obj;
    if (metaptr == metabuf.length)     System.arraycopy(metabuf,0,metabuf=new Pony.Meta[metaptr << 1],0,metaptr);
    metabuf[metaptr++]=meta;
  }
  if (metaptr != 0) {
    Pony.Meta[] metacell=new Pony.Meta[metaptr];
    System.arraycopy(metabuf,0,metacell,0,metaptr);
    pony.metamatrix[y][x]=metacell;
    metaptr=0;
  }
  return pony;
}",0.9977066988533494
187975,"/** 
 * Export a pony to the file
 * @param pony  The pony
 */
public void exportPony(Pony pony){
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] plain=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : pony.tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,plain);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],this.left,matrix[y]=new Pony.Cell[w + this.left],0,w);
      System.arraycopy(metamatrix[y],this.left,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],0,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,this.top,matrix=new Pony.Cell[h + this.top][],0,h);
    System.arraycopy(matrix,0,appendix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][][];
    System.arraycopy(metamatrix,this.top,metamatrix=new Pony.Meta[h + this.top][w + 1][],0,h);
    System.arraycopy(metamatrix,0,metaappendix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(matrix,h,appendix,0,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metamatrix,h,metaappendix,0,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  Pony.Cell defaultcell=new Pony.Cell(' ',null,null,plain);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[row.length];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) {
          Class<?> metaclass=meta.getClass();
          if (metaclass == Pony.Store.class)           databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
 else           if (metaclass == Pony.Recall.class) {
            Pony.Recall recall=(Pony.Recall)meta;
            Color back=((recall.backgroundColour == null) || (recall.backgroundColour.getAlpha() < 112)) ? null : recall.backgroundColour;
            Color fore=((recall.foregroundColour == null) || (recall.foregroundColour.getAlpha() < 112)) ? null : recall.foregroundColour;
            databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
            databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
 else           if (metaclass == Pony.Balloon.class) {
            databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
            Pony.Balloon balloon=(Pony.Balloon)meta;
            if (balloon.left != null) {
              int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
                char[] spaces=new char[balloon.left.intValue()];
              Arrays.fill(spaces,' ');
            databuf.append(new String(spaces));
          databuf.append(""String_Node_Str"" + balloon.left.intValue());
        break;
case Pony.Balloon.LEFT:
      databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
    databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
  break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
}
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lowerColour == null) if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upperColour,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=null,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour.equals(cell.lowerColour)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=this.spacesave ? foreground : cell.lowerColour,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=plain));
databuf.append('▄');
}
}
}
background=foreground=null;
format=plain;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
String metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str""));
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int i=0, n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) data.append(dollar);
 else {
data.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
data.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}","/** 
 * Export a pony to the file
 * @param pony  The pony
 * @throws IOException  On I/O error
 */
public void exportPony(Pony pony) throws IOException {
  Color[] colours=new Color[256];
  boolean[] format=new boolean[9];
  Color background=null, foreground=null;
  for (int i=0; i < 256; i++) {
    Colour colour=new Colour(i);
    colours[i]=new Color(colour.red,colour.green,colour.blue);
  }
  if (this.palette != null)   System.arraycopy(this.palette,0,colours,0,16);
  StringBuilder resetpalette=null;
  if (this.tty)   if (this.colourful) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else {
    resetpalette=new StringBuilder();
    for (    int i : new int[]{7,15}) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(i));
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
    }
  }
 else   if (this.fullcolour) {
    resetpalette=new StringBuilder();
    for (int i=0; i < 16; i++) {
      Colour colour=new Colour(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(i);
      resetpalette.append(""String_Node_Str"");
      resetpalette.append(""String_Node_Str"".charAt(colour.red >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.red & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.green >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.green & 15));
      resetpalette.append('/');
      resetpalette.append(""String_Node_Str"".charAt(colour.blue >>> 4));
      resetpalette.append(""String_Node_Str"".charAt(colour.blue & 15));
      resetpalette.append(""String_Node_Str"");
    }
  }
  StringBuilder databuf=new StringBuilder();
  int curleft=0, curright=0, curtop=0, curbottom=0;
  Pony.Cell[][] matrix=pony.matrix;
  Pony.Meta[][][] metamatrix=pony.metamatrix;
  boolean[] plain=new boolean[9];
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (pony.tags != null)   for (  String[] tag : pony.tags) {
    databuf.append(tag[0].toUpperCase());
    databuf.append(""String_Node_Str"");
    databuf.append(tag[1]);
  }
  if (pony.comment != null) {
    if ((pony.tags != null) && (pony.tags.length != 0))     databuf.append('\n');
    String comment='\n' + pony.comment.trim() + '\n';
    while (comment.contains(""String_Node_Str""))     comment=comment.replace(""String_Node_Str"",""String_Node_Str"");
    comment=comment.substring(1,comment.length() - 1);
    databuf.append(comment);
  }
  if ((pony.tags != null) || (pony.comment != null))   databuf.append(""String_Node_Str"");
  if (this.ignoreballoon)   for (  Pony.Meta[][] row : metamatrix)   for (  Pony.Meta[] cell : row)   if (cell != null)   for (int i=0, n=cell.length; i < n; i++)   if ((cell[i] != null) && (cell[i] instanceof Pony.Balloon))   row[i]=null;
  if (this.ignorelink)   for (  Pony.Cell[] row : matrix)   for (int i=0, n=row.length; i < n; i++) {
    Pony.Cell cell;
    if ((cell=row[i]) != null)     if (this.ignorelink && ((cell.character == Pony.Cell.NNE_SSW) || (cell.character == Pony.Cell.NNW_SSE)))     row[i]=new Pony.Cell(' ',null,null,plain);
 else {
      Color back=((cell.lowerColour == null) || (cell.lowerColour.getAlpha() < 112)) ? null : cell.lowerColour;
      Color fore=((cell.upperColour == null) || (cell.upperColour.getAlpha() < 112)) ? null : cell.upperColour;
      row[i]=new Pony.Cell(cell.character,back,fore,cell.format);
    }
  }
  if (this.left >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length; cur < n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.left-=cur;
  }
 else   this.left=0;
  if (this.right >= 0) {
    int cur=0;
    outer:     for (int n=matrix[0].length - 1; cur <= n; cur++)     for (int j=0, m=matrix.length; j < m; j++) {
      boolean cellpass=true;
      Pony.Cell cell=matrix[j][n - cur];
      if (cell != null)       if ((cell.character != ' ') || (cell.lowerColour != null))       if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))       cellpass=false;
      if (cellpass == false) {
        Pony.Meta[] meta=metamatrix[j][n - cur];
        if ((meta != null) && (meta.length != 0)) {
          for (int k=0, l=meta.length; k < l; k++)           if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))           break outer;
        }
 else         break outer;
      }
    }
    this.right-=cur;
  }
 else   this.right=0;
  if (this.top >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length; cur < n; cur++) {
      Pony.Cell[] row=matrix[cur];
      Pony.Meta[][] metarow=metamatrix[cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.top-=cur;
  }
 else   this.top=0;
  if (this.bottom >= 0) {
    int cur=0, m=matrix[0].length - this.right;
    outer:     for (int n=matrix.length - 1 - this.top; cur <= n; cur++) {
      Pony.Cell[] row=matrix[n - cur];
      Pony.Meta[][] metarow=metamatrix[n - cur];
      for (int j=this.left; j < m; j++) {
        boolean cellpass=true;
        Pony.Cell cell=row[j];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[j];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break outer;
          }
 else           break outer;
        }
      }
    }
    this.bottom-=cur;
  }
 else   this.bottom=0;
  if (this.left > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],this.left,matrix[y]=new Pony.Cell[w + this.left],0,w);
      System.arraycopy(metamatrix[y],this.left,metamatrix[y]=new Pony.Meta[w + 1 + this.left][],0,w + 1);
    }
    this.left=0;
  }
 else   this.left=-this.left;
  if (this.right > 0) {
    int w=matrix[0].length;
    for (int y=0, h=matrix.length; y < h; y++) {
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w + this.right],0,w);
      System.arraycopy(metamatrix[y],0,metamatrix[y]=new Pony.Meta[w + 1 + this.right][],0,w + 1);
    }
    this.right=0;
  }
 else   this.right=-this.right;
  if (this.top > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.top][w];
    System.arraycopy(matrix,this.top,matrix=new Pony.Cell[h + this.top][],0,h);
    System.arraycopy(matrix,0,appendix,0,this.top);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.top][][];
    System.arraycopy(metamatrix,this.top,metamatrix=new Pony.Meta[h + this.top][w + 1][],0,h);
    System.arraycopy(metamatrix,0,metaappendix,0,this.top);
    this.top=0;
  }
 else   this.top=-this.top;
  if (this.bottom > 0) {
    int h=matrix.length, w=matrix[0].length;
    Pony.Cell[][] appendix=new Pony.Cell[this.bottom][w];
    System.arraycopy(matrix,0,matrix=new Pony.Cell[h + this.bottom][],0,h);
    System.arraycopy(matrix,h,appendix,0,this.bottom);
    Pony.Meta[][][] metaappendix=new Pony.Meta[this.bottom][w + 1][];
    System.arraycopy(metamatrix,0,metamatrix=new Pony.Meta[h + this.bottom][][],0,h);
    System.arraycopy(metamatrix,h,metaappendix,0,this.bottom);
    this.bottom=0;
  }
 else   this.bottom=-this.bottom;
  for (int y=0; y < this.top; y++) {
    Pony.Meta[][] metarow=metamatrix[y];
    for (int x=0, w=metarow.length; x < w; x++) {
      Pony.Meta[] metacell=metarow[x];
      for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta metaelem;
        if (((metaelem=metacell[z]) != null) && (metaelem instanceof Pony.Store))         databuf.append(""String_Node_Str"" + (((Pony.Store)(metaelem)).name + ""String_Node_Str"" + ((Pony.Store)(metaelem)).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
      }
    }
  }
  if (this.right != 0) {
    int w=matrix[0].length, r=metamatrix[0].length - this.right;
    Pony.Meta[] leftovers=new Pony.Meta[32];
    for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
      int ptr=0;
      Pony.Meta[][] metarow=metamatrix[y];
      for (int x=r; x <= w; x++)       if (metarow[x] != null)       for (      Pony.Meta meta : metarow[x])       if ((meta != null) && (meta instanceof Pony.Store)) {
        if (ptr == leftovers.length)         System.arraycopy(leftovers,0,leftovers=new Pony.Meta[ptr << 1],0,ptr);
        leftovers[ptr++]=meta;
      }
      if (ptr != 0) {
        Pony.Meta[] metacell=metarow[r];
        System.arraycopy(metacell,0,metarow[r]=metacell=new Pony.Meta[metacell.length + ptr],0,metacell.length - ptr);
        System.arraycopy(leftovers,0,metacell,metacell.length - ptr,ptr);
      }
      System.arraycopy(matrix[y],0,matrix[y]=new Pony.Cell[w - this.right],0,w - this.right);
      System.arraycopy(metarow,0,metamatrix[y]=new Pony.Meta[w - this.right + 1][],0,w - this.right + 1);
    }
  }
  int[] endings=null;
  if (this.even == false) {
    int w=matrix[0].length;
    endings=new int[matrix.length];
    for (int y=0, h=matrix.length; y < h; y++) {
      Pony.Cell[] row=matrix[y];
      Pony.Meta[][] metarow=metamatrix[y];
      int cur=0;
      mid:       for (int n=w - 1; cur <= n; cur++) {
        boolean cellpass=true;
        Pony.Cell cell=row[n - cur];
        if (cell != null)         if ((cell.character != ' ') || (cell.lowerColour != null))         if ((cell.character != Pony.Cell.PIXELS) || (cell.lowerColour != null) || (cell.upperColour != null))         cellpass=false;
        if (cellpass == false) {
          Pony.Meta[] meta=metarow[n - cur];
          if ((meta != null) && (meta.length != 0)) {
            for (int k=0, l=meta.length; k < l; k++)             if ((meta[k] != null) && ((meta[k] instanceof Pony.Store) == false))             break mid;
          }
 else           break mid;
        }
      }
      endings[y]=w - cur;
    }
  }
  Pony.Cell defaultcell=new Pony.Cell(' ',null,null,plain);
  for (int y=this.top, h=matrix.length - this.bottom; y < h; y++) {
    Pony.Cell[] row=matrix[y];
    Pony.Meta[][] metarow=metamatrix[y];
    int ending=endings == null ? row.length : endings[y];
    for (int x=0, w=row.length; x <= w; x++) {
      Pony.Meta[] metacell=metarow[row.length];
      if (metacell != null)       for (int z=0, d=metacell.length; z < d; z++) {
        Pony.Meta meta=metacell[z];
        if ((meta != null) && ((x >= this.left) || (meta instanceof Pony.Store))) {
          Class<?> metaclass=meta.getClass();
          if (metaclass == Pony.Store.class)           databuf.append(""String_Node_Str"" + (((Pony.Store)meta).name + ""String_Node_Str"" + ((Pony.Store)meta).value).replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
 else           if (metaclass == Pony.Recall.class) {
            Pony.Recall recall=(Pony.Recall)meta;
            Color back=((recall.backgroundColour == null) || (recall.backgroundColour.getAlpha() < 112)) ? null : recall.backgroundColour;
            Color fore=((recall.foregroundColour == null) || (recall.foregroundColour.getAlpha() < 112)) ? null : recall.foregroundColour;
            databuf.append(applyColour(colours,background,foreground,format,background=back,foreground=fore,recall.format));
            databuf.append(""String_Node_Str"" + recall.name.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
          }
 else           if (metaclass == Pony.Balloon.class) {
            databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
            Pony.Balloon balloon=(Pony.Balloon)meta;
            if (balloon.left != null) {
              int justification=balloon.minWidth != null ? balloon.justification & (Pony.Balloon.LEFT | Pony.Balloon.RIGHT) : Pony.Balloon.NONE;
switch (justification) {
case Pony.Balloon.NONE:
                char[] spaces=new char[balloon.left.intValue()];
              Arrays.fill(spaces,' ');
            databuf.append(new String(spaces));
          databuf.append(""String_Node_Str"" + balloon.left.intValue());
        break;
case Pony.Balloon.LEFT:
      databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
    databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
  break;
case Pony.Balloon.RIGHT:
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
default :
databuf.append(""String_Node_Str"" + balloon.left.intValue() + ""String_Node_Str"");
databuf.append(balloon.left.intValue() + balloon.minWidth.intValue() - 1);
break;
}
}
 else if (balloon.minWidth != null) databuf.append(""String_Node_Str"" + balloon.minWidth.toString());
if (balloon.minHeight != null) databuf.append(""String_Node_Str"" + balloon.minHeight.toString());
databuf.append(""String_Node_Str"");
}
}
}
if ((x != w) && (x >= this.left) && (x < ending)) {
Pony.Cell cell=row[x];
if (cell == null) cell=defaultcell;
if (cell.character >= 0) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=cell.format));
databuf.append(cell.character);
}
 else if (cell.character == Pony.Cell.NNE_SSW) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.NNW_SSE) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=null,format=plain));
databuf.append(""String_Node_Str"");
}
 else if (cell.character == Pony.Cell.PIXELS) if (cell.lowerColour == null) if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=this.spacesave ? foreground : null,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=null,foreground=cell.upperColour,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour == null) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=null,format=plain));
databuf.append('▀');
}
 else if (cell.upperColour.equals(cell.lowerColour)) if (this.zebra) {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('▄');
}
 else if (this.fullblocks) {
databuf.append(applyColour(colours,background,foreground,format,background=this.spacesave ? background : cell.lowerColour,foreground=cell.lowerColour,format=plain));
databuf.append('█');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=this.spacesave ? foreground : cell.lowerColour,format=plain));
databuf.append(' ');
}
 else {
databuf.append(applyColour(colours,background,foreground,format,background=cell.lowerColour,foreground=cell.upperColour,format=plain));
databuf.append('▄');
}
}
}
background=foreground=null;
format=plain;
databuf.append(""String_Node_Str"");
}
String data=databuf.toString();
if (this.version == VERSION_COWSAY) {
String metadata=null;
if (data.startsWith(""String_Node_Str"")) {
metadata=data.substring(4);
if (metadata.startsWith(""String_Node_Str"")) metadata=null;
 else {
metadata=metadata.substring(0,metadata.indexOf(""String_Node_Str"") + 5);
data=data.substring(data.indexOf(""String_Node_Str"") + 5);
metadata='#' + metadata.replace(""String_Node_Str"",""String_Node_Str"");
}
}
String eop=""String_Node_Str"";
while (data.contains(eop + '\n')) eop+='P';
data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
while (data.contains(""String_Node_Str"")) {
int start=data.indexOf(""String_Node_Str"");
int end=data.indexOf(""String_Node_Str"",start + 8);
data=data.substring(0,start) + data.substring(end + 1);
}
data=""String_Node_Str"" + eop + ""String_Node_Str""+ data;
data+=eop + '\n';
if (metadata != null) data=metadata + data;
if (this.utf8 == false) data=data.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
}
 else {
if (this.version < VERSION_METADATA) {
if (data.startsWith(""String_Node_Str"")) data=data.substring(data.indexOf(""String_Node_Str"") + 5);
}
if (this.version < VERSION_HORIZONTAL_JUSTIFICATION) {
databuf=new StringBuilder();
int pos=data.indexOf(""String_Node_Str"");
pos+=pos < 0 ? 1 : 5;
databuf.append(data.substring(0,pos));
StringBuilder dollarbuf=null;
boolean esc=false;
for (int i=0, n=data.length(); i < n; ) {
char c=data.charAt(i++);
if (dollarbuf != null) {
dollarbuf.append(c);
if (esc || (c == '\033')) esc^=true;
 else if (c == '$') {
String dollar=dollarbuf.toString();
dollarbuf=null;
if (dollar.startsWith(""String_Node_Str"") == false) databuf.append(dollar);
 else {
databuf.append(""String_Node_Str"");
dollar=dollar.substring(8);
if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('l') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('r') + 1);
 else if (dollar.contains(""String_Node_Str"")) dollar=dollar.substring(dollar.indexOf('c') + 1);
databuf.append(dollar);
}
}
}
 else if (c == '$') dollarbuf=new StringBuilder(""String_Node_Str"");
 else databuf.append(c);
}
data=databuf.toString();
}
}
if (resetpalette != null) data+=resetpalette.toString();
if (this.escesc) data=data.replace(""String_Node_Str"",""String_Node_Str"");
OutputStream out=System.out;
if (this.file != null) out=new FileOutputStream(this.file);
out.write(data.getBytes(""String_Node_Str""));
out.flush();
if (out != System.out) out.close();
}",0.9979803017080164
187976,"/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],palette,0,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
    if (colourindex2fore == colourindex2back)     colourindex2fore|=8;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(this.colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(this.colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return ""String_Node_Str"" + _rc.substring(1) + ""String_Node_Str"";
}","/** 
 * Get ANSI colour sequence to append to the output
 * @param palette        The current colour palette
 * @param oldBackground  The current background colour
 * @param oldForeground  The current foreground colour
 * @parma  oldFormat      The current text format
 * @param newBackground  The new background colour
 * @param newForeground  The new foreground colour
 * @parma  newFormat      The new text format
 */
protected String applyColour(Color[] palette,Color oldBackground,Color oldForeground,boolean[] oldFormat,Color newBackground,Color newForeground,boolean[] newFormat){
  StringBuilder rc=new StringBuilder();
  int colourindex1back=-1, colourindex2back=-1;
  int colourindex1fore=-1, colourindex2fore=-1;
  if ((oldBackground != null) && (newBackground == null))   rc.append(""String_Node_Str"");
 else   if ((oldBackground == null) || (oldBackground.equals(newBackground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1back=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2back=(this.colourful ? matchColour(this.fullcolour ? newBackground : palette[colourindex1back],palette,0,8,this.chroma) : 7);
 else     colourindex2back=colourindex1back;
  }
  if ((oldForeground != null) && (newForeground == null))   rc.append(""String_Node_Str"");
 else   if ((oldForeground == null) || (oldForeground.equals(newForeground) == false)) {
    if ((this.fullcolour && this.tty) == false)     colourindex1fore=matchColour(newBackground,palette,16,256,this.chroma);
    if (this.tty || this.fullcolour)     colourindex2fore=(this.colourful ? matchColour(this.fullcolour ? newForeground : palette[colourindex1fore],palette,0,16,this.chroma) : 15);
 else     colourindex2fore=colourindex1fore;
    if (colourindex2fore == colourindex2back)     colourindex2fore|=8;
  }
  if (colourindex2back != -1)   if (this.tty) {
    Color colour=palette[colourindex1back];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1back));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else   if (this.fullcolour) {
    Color colour=newBackground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
    palette[colourindex2back]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2back);
  }
  if (colourindex2fore != -1)   if (this.tty) {
    Color colour=palette[colourindex1fore];
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colourindex1fore));
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else   if (this.fullcolour) {
    Color colour=newForeground;
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    rc.append(""String_Node_Str"");
    rc.append(""String_Node_Str"".charAt(colour.getRed() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getRed() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getGreen() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getGreen() & 15));
    rc.append('/');
    rc.append(""String_Node_Str"".charAt(colour.getBlue() >>> 4));
    rc.append(""String_Node_Str"".charAt(colour.getBlue() & 15));
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
    palette[colourindex2fore]=colour;
  }
 else   if (colourindex2back < 16) {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(colourindex2fore);
  }
  if (this.tty && (colourindex2fore >= 0))   newFormat[0]=(colourindex2fore & 8) == 8;
  for (int i=0; i < 9; i++)   if (newFormat[i] ^ oldFormat[i])   if (newFormat[i]) {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
 else {
    rc.append(""String_Node_Str"");
    rc.append(i);
  }
  String _rc=rc.toString();
  if (_rc.isEmpty())   return ""String_Node_Str"";
  return ""String_Node_Str"" + _rc.substring(1) + ""String_Node_Str"";
}",0.9990673381831748
187977,"/** 
 * Import the pony from file using the cowsay format
 * @return  The pony
 */
protected Pony importCow(){
  this.version++;
  InputStream stdin=System.in;
  try {
    InputStream in=System.in;
    if (this.file != null)     in=new BufferedInputStream(new FileInputStream(this.file));
    Scanner sc=new Scanner(in,""String_Node_Str"");
    StringBuilder cow=new StringBuilder();
    StringBuilder data=new StringBuilder();
    boolean meta=false;
    while (sc.hasNextLine()) {
      String line=sc.nextLine();
      if (line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").startsWith(""String_Node_Str"")) {
        if (meta == false) {
          meta=true;
          data.append(""String_Node_Str"");
        }
        line=line.substring(line.indexOf(""String_Node_Str"") + 1);
        if (line.equals(""String_Node_Str""))         line=""String_Node_Str"";
        data.append(line);
        data.append('\n');
      }
 else {
        line=line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        cow.append(line);
        cow.append('\n');
      }
    }
    if (meta)     data.append(""String_Node_Str"");
    String pony=cow.toString();
    pony=pony.substring(pony.indexOf(""String_Node_Str"") + 8);
    pony=pony.substring(pony.indexOf(""String_Node_Str"") + 2);
    String eop=pony.substring(0,pony.indexOf(""String_Node_Str""));
    if (eop.startsWith(""String_Node_Str""))     pony=eop.substring(1);
 else {
      pony=pony.substring(pony.indexOf('\n') + 1);
      pony=pony.substring(0,pony.indexOf('\n' + eop + '\n'));
    }
    data.append(""String_Node_Str"" + (pony.indexOf(""String_Node_Str"") + 2) + ""String_Node_Str"");
    data.append(pony);
    final byte[] streamdata=data.toString().getBytes(""String_Node_Str"");
    System.setIn(new InputStream(){
      int ptr=0;
      @Override public int read(){
        if (this.ptr == streamdata.length)         return -1;
        return streamdata[this.ptr++] & 255;
      }
      @Override public int available(){
        return streamdata.length - this.ptr;
      }
    }
);
    this.file=null;
    return this.importPony();
  }
  finally {
    System.setIn(stdin);
  }
}","/** 
 * Import the pony from file using the cowsay format
 * @return  The pony
 * @throws IOException  On I/O error
 */
protected Pony importCow() throws IOException {
  this.version++;
  InputStream stdin=System.in;
  try {
    InputStream in=System.in;
    if (this.file != null)     in=new BufferedInputStream(new FileInputStream(this.file));
    Scanner sc=new Scanner(in,""String_Node_Str"");
    StringBuilder cow=new StringBuilder();
    StringBuilder data=new StringBuilder();
    boolean meta=false;
    while (sc.hasNextLine()) {
      String line=sc.nextLine();
      if (line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").startsWith(""String_Node_Str"")) {
        if (meta == false) {
          meta=true;
          data.append(""String_Node_Str"");
        }
        line=line.substring(line.indexOf(""String_Node_Str"") + 1);
        if (line.equals(""String_Node_Str""))         line=""String_Node_Str"";
        data.append(line);
        data.append('\n');
      }
 else {
        line=line.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        line=line.replace(""String_Node_Str"",""String_Node_Str"");
        cow.append(line);
        cow.append('\n');
      }
    }
    if (meta)     data.append(""String_Node_Str"");
    String pony=cow.toString();
    pony=pony.substring(pony.indexOf(""String_Node_Str"") + 8);
    pony=pony.substring(pony.indexOf(""String_Node_Str"") + 2);
    String eop=pony.substring(0,pony.indexOf(""String_Node_Str""));
    if (eop.startsWith(""String_Node_Str""))     pony=eop.substring(1);
 else {
      pony=pony.substring(pony.indexOf('\n') + 1);
      pony=pony.substring(0,pony.indexOf('\n' + eop + '\n'));
    }
    data.append(""String_Node_Str"" + (pony.indexOf(""String_Node_Str"") + 2) + ""String_Node_Str"");
    data.append(pony);
    final byte[] streamdata=data.toString().getBytes(""String_Node_Str"");
    System.setIn(new InputStream(){
      int ptr=0;
      @Override public int read(){
        if (this.ptr == streamdata.length)         return -1;
        return streamdata[this.ptr++] & 255;
      }
      @Override public int available(){
        return streamdata.length - this.ptr;
      }
    }
);
    this.file=null;
    return this.importPony();
  }
  finally {
    System.setIn(stdin);
  }
}",0.989363687255085
187978,"private static void convert(final InputStream in,final PrintStream out) throws IOException {
  out.println(""String_Node_Str"");
  boolean dollar=false;
  for (int d; (d=in.read()) != -1; )   if (d == '$') {
    dollar^=true;
    out.write(d);
  }
 else   if (dollar)   out.write(d);
 else   if (d == '\033') {
    d=in.read();
    if (d == '[') {
      d=in.read();
      if (d == 'm')       out.print(""String_Node_Str"");
      int lastlast=0;
      int last=0;
      int item=0;
      for (; ; ) {
        if ((d == ';') || (d == 'm')) {
          item=-item;
          if (item == 0)           out.print(""String_Node_Str"");
 else           if (item == 39)           out.print(""String_Node_Str"");
 else           if (item == 49)           out.print(""String_Node_Str"");
 else           if ((last == 5) && (lastlast == 38)) {
            Colour colour=new Colour(item);
            out.print(getOSIPCode(colour.red,colour.green,colour.blue,false));
          }
 else           if ((last == 5) && (lastlast == 48)) {
            Colour colour=new Colour(item);
            out.print(getOSIPCode(colour.red,colour.green,colour.blue,true));
          }
 else           if ((item != 5) || ((last != 38) && (last != 48)))           if ((item != 38) && (item != 48)) {
            System.err.println(""String_Node_Str"");
            System.exit(-1);
          }
          lastlast=last;
          last=item;
          item=0;
          if (d == 'm')           break;
        }
 else         item=(item * 10) - (d & 15);
        d=in.read();
      }
    }
 else {
      System.err.println(""String_Node_Str"");
      System.exit(-1);
    }
  }
 else   out.write(d);
}","private static void convert(final InputStream in,final PrintStream out) throws IOException {
  out.print(""String_Node_Str"");
  boolean dollar=false;
  for (int d; (d=in.read()) != -1; )   if (d == '$') {
    dollar^=true;
    out.write(d);
  }
 else   if (dollar)   out.write(d);
 else   if (d == '\033') {
    d=in.read();
    if (d == '[') {
      d=in.read();
      if (d == 'm')       out.print(""String_Node_Str"");
      int lastlast=0;
      int last=0;
      int item=0;
      for (; ; ) {
        if ((d == ';') || (d == 'm')) {
          item=-item;
          if (item == 0)           out.print(""String_Node_Str"");
 else           if (item == 39)           out.print(""String_Node_Str"");
 else           if (item == 49)           out.print(""String_Node_Str"");
 else           if ((last == 5) && (lastlast == 38)) {
            Colour colour=new Colour(item);
            out.print(getOSIPCode(colour.red,colour.green,colour.blue,false));
          }
 else           if ((last == 5) && (lastlast == 48)) {
            Colour colour=new Colour(item);
            out.print(getOSIPCode(colour.red,colour.green,colour.blue,true));
          }
 else           if ((item != 5) || ((last != 38) && (last != 48)))           if ((item != 38) && (item != 48)) {
            System.err.println(""String_Node_Str"");
            System.exit(-1);
          }
          lastlast=last;
          last=item;
          item=0;
          if (d == 'm')           break;
        }
 else         item=(item * 10) - (d & 15);
        d=in.read();
      }
    }
 else {
      System.err.println(""String_Node_Str"");
      System.exit(-1);
    }
  }
 else   out.write(d);
}",0.9993954050785974
187979,"/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if ((args.length == 0) || args[0].equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  boolean useP=false;
  boolean useC=false;
  int ai=0;
  int ps=1;
  double cw=1;
  String file=null;
  for (; ai < args.length; ai++)   if (args[ai].equals(""String_Node_Str""))   ps=2;
 else   if (args[ai].equals(""String_Node_Str""))   useP=true;
 else   if (args[ai].equals(""String_Node_Str"")) {
    useC=true;
    cw=Double.valueOf(args[++ai]);
  }
 else   if (args[ai].equals(""String_Node_Str"")) {
    ai++;
    break;
  }
 else   file=args[ai];
  if (useC && useP) {
    System.err.print(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  if (file == null)   file=args[ai++];
  final PrintStream out=System.out;
  final BufferedImage img=ImageIO.read(new File(file));
  int w=img.getWidth() / ps;
  int h=img.getHeight() / ps;
  int maxx=0;
  int minx=w;
  int[][] pony=new int[h + 1][w];
  final int[] emptyset=new int[w];
  for (int x=0; x < w; x++)   emptyset[x]=-1;
  for (int y=0; y < h; y++) {
    boolean empty=true;
    for (int x=0; x < w; x++) {
      final int argb=img.getRGB(x * ps,y * ps);
      int a=(argb >> 24) & 0xFF;
      int r=(argb >> 16) & 0xFF;
      int g=(argb >> 8) & 0xFF;
      int b=argb & 0xFF;
      if ((0 < a) && (a < 255)) {
        r=r * a / 255 + 255 - a;
        g=g * a / 255 + 255 - a;
        b=b * a / 255 + 255 - a;
      }
      if (a != 0) {
        if (useP)         pony[y][x]=((r << 16) | (g << 8) | b);
 else         if (useC)         pony[y][x]=(new Colour(r,g,b,cw)).index;
 else         pony[y][x]=(new Colour(r,g,b)).index;
        empty=false;
        if (maxx < x)         maxx=x;
        if (minx > x)         minx=x;
      }
 else       pony[y][x]=-1;
    }
    if (empty)     pony[y]=null;
  }
  int yoff=0;
  while (pony[yoff] == null)   yoff++;
  for (int y=yoff; y < h; y++)   pony[y - yoff]=pony[y];
  h-=yoff;
  while (pony[h - 1] == null)   h--;
  for (int y=0; y < h; y++)   if (pony[y] == null)   pony[y]=emptyset;
  pony[h]=emptyset;
  int fore=-1;
  int back=-1;
  minx=(minx-=1) < 0 ? 0 : minx;
  int bw=0;
  String offl=new String();
  for (int x=minx; x <= maxx; x++) {
    if (pony[0][x] >= 0)     break;
    if (x - minx > 3) {
      offl+=' ';
      bw++;
    }
  }
  if (useP)   System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (bw + 3) + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  for (int y=0; y < h; y+=2) {
    for (int x=minx; x <= maxx; x++) {
      final int upper=pony[y][x];
      final int lower=pony[y + 1][x];
      if ((upper < 0) && (lower < 0)) {
        if (fore >= 0)         System.out.print(""String_Node_Str"");
        if (back >= 0)         System.out.print(""String_Node_Str"");
        fore=back=-1;
        System.out.print(' ');
      }
 else       if (upper < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
 else       if (lower < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else       if ((back == lower) || (fore == upper)) {
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        if (back != lower)         if (useP)         System.out.print(getOSIPCode(back=lower,true));
 else         System.out.print(""String_Node_Str"" + (back=lower) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else {
        if (back != upper)         if (useP)         System.out.print(getOSIPCode(back=upper,true));
 else         System.out.print(""String_Node_Str"" + (back=upper) + ""String_Node_Str"");
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
    }
    fore=back=-1;
    if (useP) {
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if ((args.length == 0) || args[0].equals(""String_Node_Str"")) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  boolean useP=false;
  boolean useC=false;
  int ai=0;
  int ps=1;
  double cw=1;
  String file=null;
  for (; ai < args.length; ai++)   if (args[ai].equals(""String_Node_Str""))   ps=2;
 else   if (args[ai].equals(""String_Node_Str""))   useP=true;
 else   if (args[ai].equals(""String_Node_Str"")) {
    useC=true;
    cw=Double.valueOf(args[++ai]);
  }
 else   if (args[ai].equals(""String_Node_Str"")) {
    ai++;
    break;
  }
 else   file=args[ai];
  if (useC && useP) {
    System.err.print(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  if (file == null)   file=args[ai++];
  final PrintStream out=System.out;
  final BufferedImage img=ImageIO.read(new File(file));
  int w=img.getWidth() / ps;
  int h=img.getHeight() / ps;
  int maxx=0;
  int minx=w;
  int[][] pony=new int[h + 1][w];
  final int[] emptyset=new int[w];
  for (int x=0; x < w; x++)   emptyset[x]=-1;
  for (int y=0; y < h; y++) {
    boolean empty=true;
    for (int x=0; x < w; x++) {
      final int argb=img.getRGB(x * ps,y * ps);
      int a=(argb >> 24) & 0xFF;
      int r=(argb >> 16) & 0xFF;
      int g=(argb >> 8) & 0xFF;
      int b=argb & 0xFF;
      if ((0 < a) && (a < 255)) {
        r=r * a / 255 + 255 - a;
        g=g * a / 255 + 255 - a;
        b=b * a / 255 + 255 - a;
      }
      if (a != 0) {
        if (useP)         pony[y][x]=((r << 16) | (g << 8) | b);
 else         if (useC)         pony[y][x]=(new Colour(r,g,b,cw)).index;
 else         pony[y][x]=(new Colour(r,g,b)).index;
        empty=false;
        if (maxx < x)         maxx=x;
        if (minx > x)         minx=x;
      }
 else       pony[y][x]=-1;
    }
    if (empty)     pony[y]=null;
  }
  int yoff=0;
  while (pony[yoff] == null)   yoff++;
  for (int y=yoff; y < h; y++)   pony[y - yoff]=pony[y];
  h-=yoff;
  while (pony[h - 1] == null)   h--;
  for (int y=0; y < h; y++)   if (pony[y] == null)   pony[y]=emptyset;
  pony[h]=emptyset;
  int fore=-1;
  int back=-1;
  minx=(minx-=1) < 0 ? 0 : minx;
  int bw=0;
  String offl=new String();
  for (int x=minx; x <= maxx; x++) {
    if (pony[0][x] >= 0)     break;
    if (x - minx > 3) {
      offl+=' ';
      bw++;
    }
  }
  if (useP)   System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (bw + 3) + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  for (int y=0; y < h; y+=2) {
    for (int x=minx; x <= maxx; x++) {
      final int upper=pony[y][x];
      final int lower=pony[y + 1][x];
      if ((upper < 0) && (lower < 0)) {
        if (fore >= 0)         System.out.print(""String_Node_Str"");
        if (back >= 0)         System.out.print(""String_Node_Str"");
        fore=back=-1;
        System.out.print(' ');
      }
 else       if (upper < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
 else       if (lower < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else       if (lower == upper) {
        if (back != lower)         if (useP)         System.out.print(getOSIPCode(back=lower,true));
 else         System.out.print(""String_Node_Str"" + (back=lower) + ""String_Node_Str"");
        System.out.print(' ');
      }
 else       if ((back == lower) || (fore == upper)) {
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        if (back != lower)         if (useP)         System.out.print(getOSIPCode(back=lower,true));
 else         System.out.print(""String_Node_Str"" + (back=lower) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else {
        if (back != upper)         if (useP)         System.out.print(getOSIPCode(back=upper,true));
 else         System.out.print(""String_Node_Str"" + (back=upper) + ""String_Node_Str"");
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
    }
    fore=back=-1;
    if (useP) {
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
}",0.9520853231454952
187980,"/** 
 * Stage 7:  Match all files from RES(HASH) with SRC(HASH) and put in MATCH and delete all incorrect matches from MATCH
 */
@SuppressWarnings(""String_Node_Str"") public static void stage7(final String src,final String srchash,final String res,final String reshash,final String match) throws IOException {
  final File dirsrc=new File(src);
  final File dirres=new File(res);
  final File fsrchash=new File(srchash);
  final File freshash=new File(reshash);
  final File dirmatch=new File(match);
  String abssrc=dirsrc.getAbsolutePath();
  if (abssrc.endsWith(""String_Node_Str"") == false)   abssrc+='/';
  String absres=dirres.getAbsolutePath();
  if (absres.endsWith(""String_Node_Str"") == false)   absres+='/';
  String absmatch=dirmatch.getAbsolutePath();
  if (absmatch.endsWith(""String_Node_Str"") == false)   absmatch+='/';
  if (dirsrc.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-701);
  }
  if (dirsrc.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-702);
  }
  if (dirres.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-703);
  }
  if (dirres.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-704);
  }
  if (fsrchash.exists()) {
    System.err.println(""String_Node_Str"");
    System.exit(-705);
  }
  if (freshash.exists()) {
    System.err.println(""String_Node_Str"");
    System.exit(-706);
  }
  if (dirmatch.exists() == false) {
    dirmatch.mkdir();
  }
 else   if (dirmatch.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-707);
  }
  final HashMap<Long,ArrayList<String>> srcmap=new HashMap<Long,ArrayList<String>>();
  final HashMap<Long,ArrayList<String>> resmap=new HashMap<Long,ArrayList<String>>();
  for (  final Object[] objs : new Object[][]{{fsrchash,srcmap},{freshash,resmap}}) {
    final File hash=(File)(objs[0]);
    final HashMap<Long,ArrayList<String>> map=(HashMap<Long,ArrayList<String>>)(objs[1]);
    final Scanner sc=new Scanner(new BufferedInputStream(new FileInputStream(hash)));
    while (sc.hasNext()) {
      final String line=sc.nextLine();
      if (line.isEmpty())       break;
      final int space=line.indexOf(' ');
      final Long key=Long.valueOf(line.substring(0,space));
      final String value=line.substring(space + 1).replace(""String_Node_Str"",""String_Node_Str"");
      ArrayList<String> values=map.get(key);
      if (values == null)       map.put(key,values=new ArrayList<String>());
      values.add(value);
    }
  }
  final Set<Long> keys=srcmap.keySet();
  for (  final Long key : keys) {
    final ArrayList<String> srcs=srcmap.get(key);
    final ArrayList<String> ress=srcmap.get(key);
    final HashMap<String,SoftReference<long[]>> map=new HashMap<String,SoftReference<long[]>>();
    for (    final String relsrc : srcs) {
      final String asrc=abssrc + relsrc;
      final long[] dsrc;
      final int sw, sh;
{
        final BufferedImage img=ImageIO.read(new File(asrc));
        sw=img.getWidth();
        sh=img.getHeight();
        dsrc=new long[((sw * sh) + 63) >> 6];
        long p=0;
        for (int y=0; y < sh; y++)         for (int x=0; x < sw; x++, p++)         if ((img.getRGB(x,y) & 0xFF000000) != 0)         dsrc[(int)(p >> 6)]^=1L << (p & 63);
      }
      mid:       for (      final String relres : ress) {
        final String ares=absres + relres;
        final SoftReference<long[]> dressr=map.get(relres);
        long[] dres=dressr == null ? null : dressr.get();
        final BufferedImage img=ImageIO.read(new File(ares));
        final int w=img.getWidth(), h=img.getHeight();
        if ((w != sw) || (h != sh))         continue;
        if (dres == null) {
          dres=new long[((w * h) + 63) >> 6];
          long p=0;
          for (int y=0; y < h; y++)           for (int x=0; x < w; x++, p++)           if ((img.getRGB(x,y) & 0xFF000000) != 0)           dres[(int)(p >> 6)]^=1L << (p & 63);
          map.put(relres,new SoftReference<long[]>(dres));
        }
        for (int i=0, n=dsrc.length; i < n; i++)         if (dsrc[i] != dres[i])         continue mid;
        int ev;
        if (exec(""String_Node_Str"",""String_Node_Str"",ares,absmatch + relres) != 0)         if ((ev=exec(""String_Node_Str"",ares,absmatch + relres)) != 0)         System.err.println(""String_Node_Str"" + ev + ""String_Node_Str""+ ares+ ""String_Node_Str""+ absmatch+ relres+ ""String_Node_Str"");
      }
      (new File(abssrc + relsrc)).delete();
    }
    for (    final String relres : ress)     (new File(absres + relres)).delete();
  }
}","/** 
 * Stage 7:  Match all files from RES(HASH) with SRC(HASH) and put in MATCH and delete all incorrect matches from MATCH
 */
@SuppressWarnings(""String_Node_Str"") public static void stage7(final String src,final String srchash,final String res,final String reshash,final String match) throws IOException {
  final File dirsrc=new File(src);
  final File dirres=new File(res);
  final File fsrchash=new File(srchash);
  final File freshash=new File(reshash);
  final File dirmatch=new File(match);
  String abssrc=dirsrc.getAbsolutePath();
  if (abssrc.endsWith(""String_Node_Str"") == false)   abssrc+='/';
  String absres=dirres.getAbsolutePath();
  if (absres.endsWith(""String_Node_Str"") == false)   absres+='/';
  String absmatch=dirmatch.getAbsolutePath();
  if (absmatch.endsWith(""String_Node_Str"") == false)   absmatch+='/';
  if (dirsrc.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-701);
  }
  if (dirsrc.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-702);
  }
  if (dirres.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-703);
  }
  if (dirres.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-704);
  }
  if (fsrchash.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-705);
  }
  if (freshash.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-706);
  }
  if (dirmatch.exists() == false) {
    dirmatch.mkdir();
  }
 else   if (dirmatch.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-707);
  }
  final HashMap<Long,ArrayList<String>> srcmap=new HashMap<Long,ArrayList<String>>();
  final HashMap<Long,ArrayList<String>> resmap=new HashMap<Long,ArrayList<String>>();
  for (  final Object[] objs : new Object[][]{{fsrchash,srcmap},{freshash,resmap}}) {
    final File hash=(File)(objs[0]);
    final HashMap<Long,ArrayList<String>> map=(HashMap<Long,ArrayList<String>>)(objs[1]);
    final Scanner sc=new Scanner(new BufferedInputStream(new FileInputStream(hash)));
    while (sc.hasNext()) {
      final String line=sc.nextLine();
      if (line.isEmpty())       break;
      final int space=line.indexOf(' ');
      final Long key=Long.valueOf(line.substring(0,space));
      final String value=line.substring(space + 1).replace(""String_Node_Str"",""String_Node_Str"");
      ArrayList<String> values=map.get(key);
      if (values == null)       map.put(key,values=new ArrayList<String>());
      values.add(value);
    }
  }
  final Set<Long> keys=srcmap.keySet();
  for (  final Long key : keys) {
    final ArrayList<String> srcs=srcmap.get(key);
    final ArrayList<String> ress=srcmap.get(key);
    final HashMap<String,SoftReference<long[]>> map=new HashMap<String,SoftReference<long[]>>();
    for (    final String relsrc : srcs) {
      final String asrc=abssrc + relsrc;
      final long[] dsrc;
      final int sw, sh;
{
        final BufferedImage img=ImageIO.read(new File(asrc));
        sw=img.getWidth();
        sh=img.getHeight();
        dsrc=new long[((sw * sh) + 63) >> 6];
        long p=0;
        for (int y=0; y < sh; y++)         for (int x=0; x < sw; x++, p++)         if ((img.getRGB(x,y) & 0xFF000000) != 0)         dsrc[(int)(p >> 6)]^=1L << (p & 63);
      }
      mid:       for (      final String relres : ress) {
        final String ares=absres + relres;
        final SoftReference<long[]> dressr=map.get(relres);
        long[] dres=dressr == null ? null : dressr.get();
        final BufferedImage img=ImageIO.read(new File(ares));
        final int w=img.getWidth(), h=img.getHeight();
        if ((w != sw) || (h != sh))         continue;
        if (dres == null) {
          dres=new long[((w * h) + 63) >> 6];
          long p=0;
          for (int y=0; y < h; y++)           for (int x=0; x < w; x++, p++)           if ((img.getRGB(x,y) & 0xFF000000) != 0)           dres[(int)(p >> 6)]^=1L << (p & 63);
          map.put(relres,new SoftReference<long[]>(dres));
        }
        for (int i=0, n=dsrc.length; i < n; i++)         if (dsrc[i] != dres[i])         continue mid;
        int ev;
        if (exec(""String_Node_Str"",""String_Node_Str"",ares,absmatch + relres) != 0)         if ((ev=exec(""String_Node_Str"",ares,absmatch + relres)) != 0)         System.err.println(""String_Node_Str"" + ev + ""String_Node_Str""+ ares+ ""String_Node_Str""+ absmatch+ relres+ ""String_Node_Str"");
      }
      (new File(abssrc + relsrc)).delete();
    }
    for (    final String relres : ress)     (new File(absres + relres)).delete();
  }
}",0.9980498374864571
187981,"/** 
 * Stage 6:  Remove all unmatchable files from SRC, SRCHASH, RES and RESHASH
 */
@SuppressWarnings(""String_Node_Str"") public static void stage6(final String src,final String srchash,final String res,final String reshash) throws IOException {
  final File dirsrc=new File(src);
  final File dirres=new File(res);
  final File fsrchash=new File(srchash);
  final File freshash=new File(reshash);
  String abssrc=dirsrc.getAbsolutePath();
  if (abssrc.endsWith(""String_Node_Str"") == false)   abssrc+='/';
  String absres=dirres.getAbsolutePath();
  if (absres.endsWith(""String_Node_Str"") == false)   absres+='/';
  if (dirsrc.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-601);
  }
  if (dirsrc.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-602);
  }
  if (dirres.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-603);
  }
  if (dirres.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-604);
  }
  if (fsrchash.exists()) {
    System.err.println(""String_Node_Str"");
    System.exit(-605);
  }
  if (freshash.exists()) {
    System.err.println(""String_Node_Str"");
    System.exit(-606);
  }
  final ArrayDeque<long[]> srchashes=new ArrayDeque<long[]>();
  final ArrayDeque<long[]> reshashes=new ArrayDeque<long[]>();
  final ArrayDeque<String> srcfiles=new ArrayDeque<String>();
  final ArrayDeque<String> resfiles=new ArrayDeque<String>();
  for (  final Object[] objs : new Object[][]{{fsrchash,srchashes,srcfiles},{freshash,reshashes,resfiles}}) {
    final File hash=(File)(objs[0]);
    final ArrayDeque<long[]> hashes=(ArrayDeque<long[]>)(objs[1]);
    final ArrayDeque<String> files=(ArrayDeque<String>)(objs[2]);
    final Scanner sc=new Scanner(new BufferedInputStream(new FileInputStream(hash)));
    while (sc.hasNext()) {
      final String line=sc.nextLine();
      if (line.isEmpty())       break;
      final int space=line.indexOf(' ');
      hashes.offerLast(new long[]{Long.parseLong(line.substring(0,space))});
      files.offerLast(line.substring(space + 1).replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
  final ArrayDeque<String> srcok=new ArrayDeque<String>();
  final ArrayDeque<String> resok=new ArrayDeque<String>();
  while ((srcfiles.isEmpty() || resfiles.isEmpty()) == false) {
    final long srch=srchashes.peekLast()[0];
    final long resh=reshashes.peekLast()[0];
    if (srch > resh) {
      srchashes.pollLast();
      (new File(abssrc + srcfiles.pollLast())).delete();
    }
 else     if (resh > resh) {
      reshashes.pollLast();
      (new File(absres + resfiles.pollLast())).delete();
    }
 else {
      do {
        srchashes.pollLast();
        srcok.offerLast(Long.toString(srch) + ""String_Node_Str"" + srcfiles.pollLast().replace(""String_Node_Str"",""String_Node_Str""));
      }
 while (srchashes.peekLast()[0] == srch);
      do {
        reshashes.pollLast();
        resok.offerLast(Long.toString(resh) + ""String_Node_Str"" + resfiles.pollLast().replace(""String_Node_Str"",""String_Node_Str""));
      }
 while (reshashes.peekLast()[0] == resh);
    }
  }
  while (srcfiles.isEmpty() == false) {
    srchashes.pollLast();
    (new File(abssrc + srcfiles.pollLast())).delete();
  }
  while (resfiles.isEmpty() == false) {
    reshashes.pollLast();
    (new File(absres + resfiles.pollLast())).delete();
  }
{
    final PrintStream fout=new PrintStream(new BufferedOutputStream(new FileOutputStream(fsrchash)));
    while (srcok.isEmpty() == false)     fout.println(srcok.pollLast());
    fout.flush();
    fout.close();
  }
{
    final PrintStream fout=new PrintStream(new BufferedOutputStream(new FileOutputStream(freshash)));
    while (resok.isEmpty() == false)     fout.println(resok.pollLast());
    fout.flush();
    fout.close();
  }
}","/** 
 * Stage 6:  Remove all unmatchable files from SRC, SRCHASH, RES and RESHASH
 */
@SuppressWarnings(""String_Node_Str"") public static void stage6(final String src,final String srchash,final String res,final String reshash) throws IOException {
  final File dirsrc=new File(src);
  final File dirres=new File(res);
  final File fsrchash=new File(srchash);
  final File freshash=new File(reshash);
  String abssrc=dirsrc.getAbsolutePath();
  if (abssrc.endsWith(""String_Node_Str"") == false)   abssrc+='/';
  String absres=dirres.getAbsolutePath();
  if (absres.endsWith(""String_Node_Str"") == false)   absres+='/';
  if (dirsrc.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-601);
  }
  if (dirsrc.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-602);
  }
  if (dirres.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-603);
  }
  if (dirres.isDirectory() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-604);
  }
  if (fsrchash.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-605);
  }
  if (freshash.exists() == false) {
    System.err.println(""String_Node_Str"");
    System.exit(-606);
  }
  final ArrayDeque<long[]> srchashes=new ArrayDeque<long[]>();
  final ArrayDeque<long[]> reshashes=new ArrayDeque<long[]>();
  final ArrayDeque<String> srcfiles=new ArrayDeque<String>();
  final ArrayDeque<String> resfiles=new ArrayDeque<String>();
  for (  final Object[] objs : new Object[][]{{fsrchash,srchashes,srcfiles},{freshash,reshashes,resfiles}}) {
    final File hash=(File)(objs[0]);
    final ArrayDeque<long[]> hashes=(ArrayDeque<long[]>)(objs[1]);
    final ArrayDeque<String> files=(ArrayDeque<String>)(objs[2]);
    final Scanner sc=new Scanner(new BufferedInputStream(new FileInputStream(hash)));
    while (sc.hasNext()) {
      final String line=sc.nextLine();
      if (line.isEmpty())       break;
      final int space=line.indexOf(' ');
      hashes.offerLast(new long[]{Long.parseLong(line.substring(0,space))});
      files.offerLast(line.substring(space + 1).replace(""String_Node_Str"",""String_Node_Str""));
    }
  }
  final ArrayDeque<String> srcok=new ArrayDeque<String>();
  final ArrayDeque<String> resok=new ArrayDeque<String>();
  while ((srcfiles.isEmpty() || resfiles.isEmpty()) == false) {
    final long srch=srchashes.peekLast()[0];
    final long resh=reshashes.peekLast()[0];
    if (srch > resh) {
      srchashes.pollLast();
      (new File(abssrc + srcfiles.pollLast())).delete();
    }
 else     if (resh > resh) {
      reshashes.pollLast();
      (new File(absres + resfiles.pollLast())).delete();
    }
 else {
      do {
        srchashes.pollLast();
        srcok.offerLast(Long.toString(srch) + ""String_Node_Str"" + srcfiles.pollLast().replace(""String_Node_Str"",""String_Node_Str""));
      }
 while (srchashes.peekLast()[0] == srch);
      do {
        reshashes.pollLast();
        resok.offerLast(Long.toString(resh) + ""String_Node_Str"" + resfiles.pollLast().replace(""String_Node_Str"",""String_Node_Str""));
      }
 while (reshashes.peekLast()[0] == resh);
    }
  }
  while (srcfiles.isEmpty() == false) {
    srchashes.pollLast();
    (new File(abssrc + srcfiles.pollLast())).delete();
  }
  while (resfiles.isEmpty() == false) {
    reshashes.pollLast();
    (new File(absres + resfiles.pollLast())).delete();
  }
{
    final PrintStream fout=new PrintStream(new BufferedOutputStream(new FileOutputStream(fsrchash)));
    while (srcok.isEmpty() == false)     fout.println(srcok.pollLast());
    fout.flush();
    fout.close();
  }
{
    final PrintStream fout=new PrintStream(new BufferedOutputStream(new FileOutputStream(freshash)));
    while (resok.isEmpty() == false)     fout.println(resok.pollLast());
    fout.flush();
    fout.close();
  }
}",0.9976592977893368
187982,"/** 
 * <p>Constructor</p> <p> Selects the colour the closest the a proper terminal colour. </p>
 * @param red           The red   intensity [0–255].
 * @param green         The green intensity [0–255].
 * @param blue          The blue  intensity [0–255].
 * @param chromaWeight  The weight of chromaticity [0–∞[, 1 is unweighted.
 */
@SuppressWarnings(""String_Node_Str"") public Colour(final int red,final int green,final int blue,final double chromaWeight){
  if ((labs == null) || (chromaWeight != lastCW)) {
    if (labs == null)     labs=new double[240][];
    for (int b=0; b < 6; b++)     for (int g=0; g < 6; g++)     for (int r=0; r < 6; r++)     labs[r * 36 + g * 6 + b]=toLab(COLOUR_INTENSITIVITY[r],COLOUR_INTENSITIVITY[g],COLOUR_INTENSITIVITY[b],chromaWeight);
    for (int s=0; s < 24; s++)     labs[216 + s]=toLab(GREY_EXTRA_INTENSITIVITY[s],GREY_EXTRA_INTENSITIVITY[s],GREY_EXTRA_INTENSITIVITY[s],chromaWeight);
  }
  final double[] lab=toLab(red,green,blue,chromaWeight);
  final double L=lab[0], a=lab[1], b=lab[2];
  double d=-100.;
  int best=0;
  for (int i=0; i <= 240; i++) {
    final double[] tLab=labs[i];
    double ðL=L - tLab[0];
    double ða=a - tLab[1];
    double ðb=b - tLab[2];
    double ð=ðL * ðL + ða * ða + ðb * ðb;
    if ((d > ð) || (d < -50.)) {
      d=ð;
      best=i;
    }
  }
  final Colour that=new Colour(best + 16);
  this.red=that.red;
  this.green=that.green;
  this.blue=that.blue;
  this.index=that.index;
  this.systemColour=that.systemColour;
}","/** 
 * <p>Constructor</p> <p> Selects the colour the closest the a proper terminal colour. </p>
 * @param red           The red   intensity [0–255].
 * @param green         The green intensity [0–255].
 * @param blue          The blue  intensity [0–255].
 * @param chromaWeight  The weight of chromaticity [0–∞[, 1 is unweighted.
 */
@SuppressWarnings(""String_Node_Str"") public Colour(final int red,final int green,final int blue,final double chromaWeight){
  if ((labs == null) || (chromaWeight != lastCW)) {
    if (labs == null)     labs=new double[240][];
    for (int b=0; b < 6; b++)     for (int g=0; g < 6; g++)     for (int r=0; r < 6; r++)     labs[r * 36 + g * 6 + b]=toLab(COLOUR_INTENSITIVITY[r],COLOUR_INTENSITIVITY[g],COLOUR_INTENSITIVITY[b],chromaWeight);
    for (int s=0; s < 24; s++)     labs[216 + s]=toLab(GREY_EXTRA_INTENSITIVITY[s],GREY_EXTRA_INTENSITIVITY[s],GREY_EXTRA_INTENSITIVITY[s],chromaWeight);
  }
  final double[] lab=toLab(red,green,blue,chromaWeight);
  final double L=lab[0], a=lab[1], b=lab[2];
  double d=-100.;
  int best=0;
  for (int i=0; i < 240; i++) {
    final double[] tLab=labs[i];
    double ðL=L - tLab[0];
    double ða=a - tLab[1];
    double ðb=b - tLab[2];
    double ð=ðL * ðL + ða * ða + ðb * ðb;
    if ((d > ð) || (d < -50.)) {
      d=ð;
      best=i;
    }
  }
  final Colour that=new Colour(best + 16);
  this.red=that.red;
  this.green=that.green;
  this.blue=that.blue;
  this.index=that.index;
  this.systemColour=that.systemColour;
}",0.9996663329996665
187983,"/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  final PipeOut pout=new PipeOut();
  final PipeIn pin=new PipeIn(pout);
  final PrintStream Pout=new PrintStream(pout);
  System.setIn(stdin);
  System.setOut(Pout);
  img2unisay.main(args);
  Pout.close();
  System.setIn(pin);
  System.setOut(stdout);
  unisay2ponysay.main();
}","/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  final PipeOut pout=new PipeOut();
  final PipeIn pin=new PipeIn(pout);
  final PrintStream Pout=new PrintStream(pout);
  System.setIn(stdin);
  System.setOut(Pout);
  img2unisay.main(args);
  Pout.close();
  System.setIn(pin);
  System.setOut(stdout);
  unisay2ponysay.main();
}",0.9756511891279728
187984,"/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  boolean useP=false;
  int ai=0;
  int ps=1;
  for (; ; ai++)   if (args[ai].equals(""String_Node_Str""))   ps=2;
 else   if (args[ai].equals(""String_Node_Str""))   useP=true;
 else   break;
  if (args[ai].equals(""String_Node_Str""))   ai++;
  String file=args[ai++];
  final PrintStream out=System.out;
  final BufferedImage img=ImageIO.read(new File(file));
  int w=img.getWidth() / ps;
  int h=img.getHeight() / ps;
  int maxx=0;
  int minx=w;
  int[][] pony=new int[h + 1][w];
  final int[] emptyset=new int[w];
  for (int x=0; x < w; x++)   emptyset[x]=-1;
  for (int y=0; y < h; y++) {
    boolean empty=true;
    for (int x=0; x < w; x++) {
      final int argb=img.getRGB(x * ps,y * ps);
      int a=(argb >> 24) & 0xFF;
      int r=(argb >> 16) & 0xFF;
      int g=(argb >> 8) & 0xFF;
      int b=argb & 0xFF;
      if ((0 < a) && (a < 255)) {
        r=r * a / 255 + 255 - a;
        g=g * a / 255 + 255 - a;
        b=b * a / 255 + 255 - a;
      }
      if (a != 0) {
        pony[y][x]=useP ? ((r << 16) | (g << 8) | b) : (new Colour((byte)r,(byte)g,(byte)b)).index;
        empty=false;
        if (maxx < x)         maxx=x;
        if (minx > x)         minx=x;
      }
 else       pony[y][x]=-1;
    }
    if (empty)     pony[y]=null;
  }
  int yoff=0;
  while (pony[yoff] == null)   yoff++;
  for (int y=yoff; y < h; y++)   pony[y - yoff]=pony[y];
  h-=yoff;
  while (pony[h - 1] == null)   h--;
  for (int y=0; y < h; y++)   if (pony[y] == null)   pony[y]=emptyset;
  pony[h]=emptyset;
  int fore=-1;
  int back=-1;
  minx=(minx-=1) < 0 ? 0 : minx;
  int bw=0;
  String offl=new String();
  for (int x=minx; x <= maxx; x++) {
    if (pony[0][x] >= 0)     break;
    if (x - minx > 3) {
      offl+=' ';
      bw++;
    }
  }
  if (useP)   System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (bw + 3) + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  for (int y=0; y < h; y+=2) {
    for (int x=minx; x <= maxx; x++) {
      final int upper=pony[y][x];
      final int lower=pony[y + 1][x];
      if ((upper < 0) && (lower < 0)) {
        if (fore >= 0)         System.out.print(""String_Node_Str"");
        if (back >= 0)         System.out.print(""String_Node_Str"");
        fore=back=-1;
        System.out.print(' ');
      }
 else       if (upper < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
 else       if (lower < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else       if ((back == lower) || (fore == upper)) {
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        if (back != lower)         if (useP)         System.out.print(getOSIPCode(back=lower,true));
 else         System.out.print(""String_Node_Str"" + (back=lower) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else {
        if (back != upper)         if (useP)         System.out.print(getOSIPCode(back=upper,true));
 else         System.out.print(""String_Node_Str"" + (back=upper) + ""String_Node_Str"");
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
    }
    fore=back=-1;
    if (useP) {
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
}","/** 
 * This is the main entry point of the program
 * @param args  Startup arguments, start the program with </code>--help</code> for details
 * @throws IOException  On I/O exception
 */
public static void main(final String... args) throws IOException {
  if (args.length == 0) {
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    System.out.println();
    System.out.println();
    return;
  }
  boolean useP=false;
  boolean useC=false;
  int ai=0;
  int ps=1;
  double cw=1;
  String file=null;
  for (; ai < args.length; ai++)   if (args[ai].equals(""String_Node_Str""))   ps=2;
 else   if (args[ai].equals(""String_Node_Str""))   useP=true;
 else   if (args[ai].equals(""String_Node_Str"")) {
    useC=true;
    cw=Double.valueOf(args[++ai]);
  }
 else   if (args[ai].equals(""String_Node_Str"")) {
    ai++;
    break;
  }
 else   file=args[ai];
  if (useC && useP) {
    System.err.print(""String_Node_Str"");
    System.err.println(""String_Node_Str"");
    System.exit(-1);
  }
  if (file == null)   file=args[ai++];
  final PrintStream out=System.out;
  final BufferedImage img=ImageIO.read(new File(file));
  int w=img.getWidth() / ps;
  int h=img.getHeight() / ps;
  int maxx=0;
  int minx=w;
  int[][] pony=new int[h + 1][w];
  final int[] emptyset=new int[w];
  for (int x=0; x < w; x++)   emptyset[x]=-1;
  for (int y=0; y < h; y++) {
    boolean empty=true;
    for (int x=0; x < w; x++) {
      final int argb=img.getRGB(x * ps,y * ps);
      int a=(argb >> 24) & 0xFF;
      int r=(argb >> 16) & 0xFF;
      int g=(argb >> 8) & 0xFF;
      int b=argb & 0xFF;
      if ((0 < a) && (a < 255)) {
        r=r * a / 255 + 255 - a;
        g=g * a / 255 + 255 - a;
        b=b * a / 255 + 255 - a;
      }
      if (a != 0) {
        if (useP)         pony[y][x]=((r << 16) | (g << 8) | b);
 else         if (useC)         pony[y][x]=(new Colour(r,g,b,cw)).index;
 else         pony[y][x]=(new Colour(r,g,b)).index;
        empty=false;
        if (maxx < x)         maxx=x;
        if (minx > x)         minx=x;
      }
 else       pony[y][x]=-1;
    }
    if (empty)     pony[y]=null;
  }
  int yoff=0;
  while (pony[yoff] == null)   yoff++;
  for (int y=yoff; y < h; y++)   pony[y - yoff]=pony[y];
  h-=yoff;
  while (pony[h - 1] == null)   h--;
  for (int y=0; y < h; y++)   if (pony[y] == null)   pony[y]=emptyset;
  pony[h]=emptyset;
  int fore=-1;
  int back=-1;
  minx=(minx-=1) < 0 ? 0 : minx;
  int bw=0;
  String offl=new String();
  for (int x=minx; x <= maxx; x++) {
    if (pony[0][x] >= 0)     break;
    if (x - minx > 3) {
      offl+=' ';
      bw++;
    }
  }
  if (useP)   System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + (bw + 3) + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  System.out.println(offl + ""String_Node_Str"");
  for (int y=0; y < h; y+=2) {
    for (int x=minx; x <= maxx; x++) {
      final int upper=pony[y][x];
      final int lower=pony[y + 1][x];
      if ((upper < 0) && (lower < 0)) {
        if (fore >= 0)         System.out.print(""String_Node_Str"");
        if (back >= 0)         System.out.print(""String_Node_Str"");
        fore=back=-1;
        System.out.print(' ');
      }
 else       if (upper < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
 else       if (lower < 0) {
        if (back >= 0)         System.out.print(""String_Node_Str"");
        back=-1;
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else       if ((back == lower) || (fore == upper)) {
        if (fore != upper)         if (useP)         System.out.print(getOSIPCode(fore=upper,false));
 else         System.out.print(""String_Node_Str"" + (fore=upper) + ""String_Node_Str"");
        if (back != lower)         if (useP)         System.out.print(getOSIPCode(back=lower,true));
 else         System.out.print(""String_Node_Str"" + (back=lower) + ""String_Node_Str"");
        System.out.print('▀');
      }
 else {
        if (back != upper)         if (useP)         System.out.print(getOSIPCode(back=upper,true));
 else         System.out.print(""String_Node_Str"" + (back=upper) + ""String_Node_Str"");
        if (fore != lower)         if (useP)         System.out.print(getOSIPCode(fore=lower,false));
 else         System.out.print(""String_Node_Str"" + (fore=lower) + ""String_Node_Str"");
        System.out.print('▄');
      }
    }
    fore=back=-1;
    if (useP) {
      System.out.print(""String_Node_Str"");
      System.out.print(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
  }
}",0.9122777017783856
187985,"@Override public void closeDbFile(){
  super.closeDbFile();
  closed=true;
  dbFile.close();
}","@Override public void closeDbFile(){
  super.closeDbFile();
  closed=true;
  if (dbFile != null)   dbFile.close();
}",0.8952380952380953
187986,"/** 
 * Create a JLPCActor.
 * @return The new actor.
 */
@Override protected EvaluatorListJid instantiateActor() throws Exception {
  EvaluatorListJid transactionListJid=new EvaluatorListJid();
  return transactionListJid;
}","/** 
 * Create a JLPCActor.
 * @return The new actor.
 */
@Override protected EvaluatorListJid instantiateActor() throws Exception {
  return new EvaluatorListJid();
}",0.8316326530612245
187987,"/** 
 * Returns the transaction aggregator.
 * @return The transaction aggregator.
 */
public TransactionAggregator getTransactionAggregator() throws Exception {
  if (transactionAggregator != null) {
    return transactionAggregator;
  }
  logReader=null;
  Actor parent=getParent();
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TransactionProcessor transactionProcessor=new TransactionProcessor();
  transactionProcessor.initialize(getMailbox(),this);
  durableTransactionLogger=new DurableTransactionLogger();
  durableTransactionLogger.initialize(getMailboxFactory().createAsyncMailbox(),parent);
  durableTransactionLogger.setNext(transactionProcessor);
  String ts=(new DateTime()).toString(""String_Node_Str"");
  Path path=directoryPath.resolve(ts + ""String_Node_Str"");
  durableTransactionLogger.open(path,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  durableTransactionLogger.currentPosition=0L;
  Serializer serializer=new Serializer();
  serializer.initialize(getMailboxFactory().createAsyncMailbox(),parent);
  serializer.setNext(durableTransactionLogger);
  transactionAggregator=newTransactionAggregator();
  transactionAggregator.initialize(getMailboxFactory().createAsyncMailbox(),this);
  transactionAggregator.setNext(serializer);
  transactionAggregator.initialCapacity=initialCapacity;
  return transactionAggregator;
}","/** 
 * Returns the transaction aggregator.
 * @return The transaction aggregator.
 */
public TransactionAggregator getTransactionAggregator() throws Exception {
  if (transactionAggregator != null) {
    return transactionAggregator;
  }
  logReader=null;
  Actor parent=getParent();
  if (parent == null) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  TransactionProcessor transactionProcessor=new TransactionProcessor();
  transactionProcessor.initialize(getMailbox(),this);
  durableTransactionLogger=new DurableTransactionLogger();
  durableTransactionLogger.initialize(getMailboxFactory().createAsyncMailbox(),parent);
  durableTransactionLogger.setNext(transactionProcessor);
  String ts=(new DateTime()).toString(""String_Node_Str"");
  Path path=directoryPath.resolve(ts + ""String_Node_Str"");
  durableTransactionLogger.open(path,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  durableTransactionLogger.currentPosition=0L;
  Serializer serializer=new Serializer();
  serializer.initialize(getMailboxFactory().createAsyncMailbox(),parent);
  serializer.setNext(durableTransactionLogger);
  transactionAggregator=newTransactionAggregator();
  transactionAggregator.initialize(getMailboxFactory().createAsyncMailbox(),this);
  transactionAggregator.setNext(serializer);
  return transactionAggregator;
}",0.9738874586244944
187988,"private void makeRootJid() throws Exception {
  if (rootJid != null)   return;
  rootJid=new RootJid();
  rootJid.initialize(getMailboxFactory().createMailbox(),getParent());
  rootJid.setValue(JFileFactories.EVALUATER_LIST_JID_TYPE);
  transactionListJid=(EvaluatorListJid)rootJid.getValue();
  transactionListJid.initialCapacity=initialCapacity;
}","private void makeRootJid() throws Exception {
  if (rootJid != null)   return;
  rootJid=new RootJid();
  rootJid.initialize(getMailboxFactory().createMailbox(),getParent());
  rootJid.setValue(JFileFactories.EVALUATER_LIST_JID_TYPE);
  transactionListJid=(EvaluatorListJid)rootJid.getValue();
}",0.9161490683229814
187989,"protected void go(RP rp) throws Exception {
  pendingManager=new PendingManager();
  pendingManager.rp=rp;
  ndx=0;
  int w=0;
  while (w < win && w < batch) {
    sender();
    w+=1;
  }
}","protected void go(RP rp) throws Exception {
  pendingManager=new PendingManager();
  pendingManager.rp=rp;
  ndx=0;
  int w=0;
  while (w < win && w < count) {
    sender();
    w+=1;
  }
}",0.9788359788359788
187990,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory();
  factory.initialize(factoryMailbox);
  (new JFileFactories()).initialize(factoryMailbox,factory);
  IncrementCounterFactory ntf=new IncrementCounterFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  AggregateTransaction aggregateTransaction=new AggregateTransaction(ntf);
  Path directoryPath=FileSystems.getDefault().getPath(""String_Node_Str"");
  CounterDB db=new CounterDB(mailboxFactory,factory,directoryPath);
  db.initialCapacity=10000;
  db.clearDirectory();
  (new OpenDbFile(10000)).send(future,db);
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  TransactionAggregatorDriver transactionAggregatorDriver=new TransactionAggregatorDriver();
  transactionAggregatorDriver.initialize(mailboxFactory.createAsyncMailbox(),transactionAggregator);
  transactionAggregatorDriver.setInitialBufferCapacity(10000);
  transactionAggregatorDriver.win=3;
  transactionAggregatorDriver.aggregateTransaction=aggregateTransaction;
  transactionAggregatorDriver.batch=10;
  transactionAggregatorDriver.count=10;
  Go.req.send(future,transactionAggregatorDriver);
  Finish.req.send(future,transactionAggregator);
  long t0=System.currentTimeMillis();
  Go.req.send(future,transactionAggregatorDriver);
  Finish.req.send(future,transactionAggregator);
  long t1=System.currentTimeMillis();
  int transactions=transactionAggregatorDriver.batch * transactionAggregatorDriver.count;
  assertEquals(2 * transactions,db.getCounter());
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + transactions);
  System.out.println(""String_Node_Str"" + (1000L * transactions / (t1 - t0)));
  db.closeDbFile();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory();
  factory.initialize(factoryMailbox);
  (new JFileFactories()).initialize(factoryMailbox,factory);
  IncrementCounterFactory ntf=new IncrementCounterFactory(""String_Node_Str"");
  factory.registerActorFactory(ntf);
  JAFuture future=new JAFuture();
  AggregateTransaction aggregateTransaction=new AggregateTransaction(ntf);
  Path directoryPath=FileSystems.getDefault().getPath(""String_Node_Str"");
  CounterDB db=new CounterDB(mailboxFactory,factory,directoryPath);
  db.clearDirectory();
  (new OpenDbFile(10000)).send(future,db);
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  TransactionAggregatorDriver transactionAggregatorDriver=new TransactionAggregatorDriver();
  transactionAggregatorDriver.initialize(mailboxFactory.createAsyncMailbox(),transactionAggregator);
  transactionAggregatorDriver.setInitialBufferCapacity(10000);
  transactionAggregatorDriver.win=3;
  transactionAggregatorDriver.aggregateTransaction=aggregateTransaction;
  transactionAggregatorDriver.batch=5;
  transactionAggregatorDriver.count=5;
  System.out.println(""String_Node_Str"");
  Go.req.send(future,transactionAggregatorDriver);
  Finish.req.send(future,transactionAggregator);
  long t0=System.currentTimeMillis();
  Go.req.send(future,transactionAggregatorDriver);
  Finish.req.send(future,transactionAggregator);
  long t1=System.currentTimeMillis();
  int transactions=transactionAggregatorDriver.batch * transactionAggregatorDriver.count;
  assertEquals(2 * transactions,db.getCounter());
  System.out.println(""String_Node_Str"" + (t1 - t0));
  System.out.println(""String_Node_Str"" + transactions);
  if (t1 != t0)   System.out.println(""String_Node_Str"" + (1000L * transactions / (t1 - t0)));
  db.closeDbFile();
  mailboxFactory.close();
}",0.7859523199179698
187991,"/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    RootJid rootJid=req.block.getRootJid(getMailbox(),getParent());
    TransactionListJid transactionListJid=(TransactionListJid)rootJid.getValue();
    int i=0;
    while (i < transactionListJid.size()) {
      ActorJid actorJid=(ActorJid)transactionListJid.iGet(i);
      actorJid.getValue();
      i+=1;
    }
    req.send(this,blockFlowBuffer,rp);
    return;
  }
  throw new UnsupportedOperationException(reqClass.getName());
}","/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    RootJid rootJid=req.block.getRootJid(getMailboxFactory().createMailbox(),getParent());
    TransactionListJid transactionListJid=(TransactionListJid)rootJid.getValue();
    int i=0;
    while (i < transactionListJid.size()) {
      ActorJid actorJid=(ActorJid)transactionListJid.iGet(i);
      actorJid.getValue();
      i+=1;
    }
    req.send(this,blockFlowBuffer,rp);
    return;
  }
  throw new UnsupportedOperationException(reqClass.getName());
}",0.9868945868945868
187992,"protected void readRootJid(Block block){
  try {
    block.setRootJid(null);
    int rem=block.headerLength();
    byte[] hdr=new byte[rem];
    ByteBuffer hbb=ByteBuffer.wrap(hdr);
    long currentPosition=block.getCurrentPosition();
    int rl=fileChannel.read(hbb,currentPosition);
    if (rl == -1)     return;
    currentPosition+=rl;
    rem-=rl;
    while (rem > 0) {
      rl=fileChannel.read(hbb,currentPosition);
      if (rl == -1)       return;
      currentPosition+=rl;
      rem-=rl;
    }
    rem=block.setHeaderBytes(hdr);
    byte[] rjb=new byte[rem];
    if (rem > 0) {
      ByteBuffer rjbb=ByteBuffer.wrap(rjb);
      while (rem > 0) {
        rl=fileChannel.read(rjbb,currentPosition);
        if (rl == -1)         return;
        currentPosition+=rl;
        rem-=rl;
      }
    }
    if (block.setRootJidBytes(rjb)) {
      block.setCurrentPosition(currentPosition);
    }
  }
 catch (  Exception ex) {
    return;
  }
  return;
}","protected void readRootJid(Block block){
  try {
    block.setRootJid(null);
    int rem=block.headerLength();
    byte[] hdr=new byte[rem];
    ByteBuffer hbb=ByteBuffer.wrap(hdr);
    long currentPosition=block.getCurrentPosition();
    int rl=fileChannel.read(hbb,currentPosition);
    if (rl == -1) {
      return;
    }
    currentPosition+=rl;
    rem-=rl;
    while (rem > 0) {
      rl=fileChannel.read(hbb,currentPosition);
      if (rl == -1) {
        return;
      }
      currentPosition+=rl;
      rem-=rl;
    }
    rem=block.setHeaderBytes(hdr);
    byte[] rjb=new byte[rem];
    if (rem > 0) {
      ByteBuffer rjbb=ByteBuffer.wrap(rjb);
      while (rem > 0) {
        rl=fileChannel.read(rjbb,currentPosition);
        if (rl == -1) {
          return;
        }
        currentPosition+=rl;
        rem-=rl;
      }
    }
    if (block.setRootJidBytes(rjb)) {
      block.setCurrentPosition(currentPosition);
    }
  }
 catch (  Exception ex) {
    block.setRootJid(null);
    return;
  }
  return;
}",0.9281376518218624
187993,"/** 
 * Serializes the header and the assigned RootJid.
 * @return The bytes of the header and serialized RootJid.
 */
@Override public byte[] serialize() throws Exception {
  if (blockBytes != null)   return blockBytes;
  l=rootJid.getSerializedLength();
  blockBytes=new byte[headerLength() + l];
  AppendableBytes ab=new AppendableBytes(blockBytes,0);
  saveHeader(ab,l);
  rootJid.save(ab);
  return blockBytes;
}","/** 
 * Serializes the header and the assigned RootJid.
 * @return The bytes of the header and serialized RootJid.
 */
@Override public byte[] serialize() throws Exception {
  if (blockBytes != null)   return blockBytes;
  l=rootJid.getSerializedLength();
  blockBytes=new byte[headerLength() + l];
  AppendableBytes ab=new AppendableBytes(blockBytes,headerLength());
  rootJid.save(ab);
  ab=new AppendableBytes(blockBytes,0);
  saveHeader(ab,l);
  return blockBytes;
}",0.895152198421646
187994,"/** 
 * Return the RootJid, deserializing it as needed..
 * @param mailbox The mailbox.
 * @param parent  The parent.
 * @return The deserialized RootJid, or null.
 */
@Override public RootJid getRootJid(Mailbox mailbox,Actor parent) throws Exception {
  if (rootJid != null)   return rootJid;
  rb=null;
  if (rootJidBytes == null)   return null;
  RootJid rootJid=new RootJid(mailbox);
  rootJid.setParent(parent);
  rootJid.load(new ReadableBytes(rootJidBytes,0));
  return rootJid;
}","/** 
 * Return the RootJid, deserializing it as needed..
 * @param mailbox The mailbox.
 * @param parent  The parent.
 * @return The deserialized RootJid, or null.
 */
@Override public RootJid getRootJid(Mailbox mailbox,Actor parent) throws Exception {
  if (rootJid != null)   return rootJid;
  rb=null;
  if (rootJidBytes == null)   return null;
  rootJid=new RootJid(mailbox);
  rootJid.setParent(parent);
  rootJid.load(new ReadableBytes(rootJidBytes,0));
  return rootJid;
}",0.9917184265010353
187995,"/** 
 * Provides the data read from disk after the header.
 * @param bytesRead The data following the header on disk.
 * @return True when the data is valid.
 */
@Override public boolean setRootJidBytes(byte[] bytesRead){
  if (!super.setRootJidBytes(bytesRead))   return false;
  a32.reset();
  a32.update(bytesRead);
  boolean match=checksum == a32.getValue();
  if (match)   return true;
  rootJidBytes=null;
  return false;
}","/** 
 * Provides the data read from disk after the header.
 * @param bytesRead The data following the header on disk.
 * @return True when the data is valid.
 */
@Override public boolean setRootJidBytes(byte[] bytesRead){
  if (!super.setRootJidBytes(bytesRead))   return false;
  int i=0;
  while (i < bytesRead.length) {
    i+=1;
  }
  a32.reset();
  a32.update(bytesRead);
  boolean match=checksum == a32.getValue();
  if (match)   return true;
  rootJidBytes=null;
  return false;
}",0.9366812227074236
187996,"/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,final RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    forcedWriteRootJid(req.block,-1);
    req.send(DurableTransactionLogger.this,blockFlowBuffer,rp);
    return;
  }
  if (reqClass == Finish.class) {
    Finish.req.send(this,blockFlowBuffer,rp);
    return;
  }
  super.processRequest(request,rp);
}","/** 
 * The application method for processing requests sent to the actor.
 * @param request A request.
 * @param rp      The response processor.
 * @throws Exception Any uncaught exceptions raised while processing the request.
 */
@Override protected void processRequest(Object request,final RP rp) throws Exception {
  Class reqClass=request.getClass();
  if (reqClass == ProcessBlock.class) {
    ProcessBlock req=(ProcessBlock)request;
    Block block=req.block;
    block.setCurrentPosition(currentPosition);
    forcedWriteRootJid(block,-1);
    currentPosition=block.getCurrentPosition();
    req.send(DurableTransactionLogger.this,blockFlowBuffer,rp);
    return;
  }
  if (reqClass == Finish.class) {
    Finish.req.send(this,blockFlowBuffer,rp);
    return;
  }
  super.processRequest(request,rp);
}",0.9158878504672896
187997,"private void reader() throws Exception {
  while (true) {
    Block block=newBlock();
    readRootJid(block);
    if (block.isEmpty()) {
      long position=block.getCurrentPosition();
      long size=fileChannel.size();
      long rem=size - position;
      RP<Long> rp=_rp;
      _rp=null;
      rp.processResponse(rem);
      return;
    }
    ProcessBlock req=new ProcessBlock(block);
    sync=false;
    async=false;
    req.send(this,blockFlowBuffer,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        if (!async)         sync=true;
 else         reader();
      }
    }
);
    if (!sync) {
      async=true;
      return;
    }
  }
}","private void reader() throws Exception {
  while (true) {
    Block block=newBlock();
    block.setCurrentPosition(currentPosition);
    readRootJid(block);
    currentPosition=block.getCurrentPosition();
    if (block.isEmpty()) {
      long position=block.getCurrentPosition();
      long size=fileChannel.size();
      long rem=size - position;
      RP<Long> rp=_rp;
      _rp=null;
      rp.processResponse(rem);
      return;
    }
    ProcessBlock req=new ProcessBlock(block);
    sync=false;
    async=false;
    req.send(this,blockFlowBuffer,new RP<Object>(){
      @Override public void processResponse(      Object response) throws Exception {
        if (!async)         sync=true;
 else         reader();
      }
    }
);
    if (!sync) {
      async=true;
      return;
    }
  }
}",0.9364548494983278
187998,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  ReadLog.req.send(future,logReader);
  Finish.req.send(future,logReader);
  logReader.fileChannel.close();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  LogReader logReader=db.getLogReader();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  logReader.fileChannel=FileChannel.open(path,StandardOpenOption.READ);
  logReader.currentPosition=0;
  long rem=ReadLog.req.send(future,logReader);
  System.out.println(""String_Node_Str"" + rem);
  Finish.req.send(future,logReader);
  logReader.fileChannel.close();
  mailboxFactory.close();
}",0.9524849808847624
187999,"public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  factory.defineActorType(""String_Node_Str"",GetCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  DurableTransactionLogger durableTransactionLogger=db.getDurableTransactionLogger();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  durableTransactionLogger.fileChannel=FileChannel.open(path,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  int total=(Integer)(new AggregateTransaction(""String_Node_Str"")).send(future,transactionAggregator);
  assertEquals(6,total);
  durableTransactionLogger.fileChannel.close();
  mailboxFactory.close();
}","public void test() throws Exception {
  MailboxFactory mailboxFactory=JAMailboxFactory.newMailboxFactory(10);
  Mailbox factoryMailbox=mailboxFactory.createMailbox();
  JAFactory factory=new JAFactory(factoryMailbox);
  (new JFileFactories(factoryMailbox)).setParent(factory);
  factory.defineActorType(""String_Node_Str"",IncrementCounterTransaction.class);
  factory.defineActorType(""String_Node_Str"",GetCounterTransaction.class);
  JAFuture future=new JAFuture();
  Mailbox dbMailbox=mailboxFactory.createAsyncMailbox();
  CounterDB db=new CounterDB(dbMailbox);
  db.setParent(factory);
  DurableTransactionLogger durableTransactionLogger=db.getDurableTransactionLogger();
  Path path=FileSystems.getDefault().getPath(""String_Node_Str"");
  System.out.println(path.toAbsolutePath());
  durableTransactionLogger.fileChannel=FileChannel.open(path,StandardOpenOption.WRITE,StandardOpenOption.CREATE);
  durableTransactionLogger.currentPosition=0L;
  TransactionAggregator transactionAggregator=db.getTransactionAggregator();
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  (new AggregateTransaction(""String_Node_Str"")).sendEvent(transactionAggregator);
  int total=(Integer)(new AggregateTransaction(""String_Node_Str"")).send(future,transactionAggregator);
  assertEquals(6,total);
  durableTransactionLogger.fileChannel.close();
  mailboxFactory.close();
}",0.9861234130498968
188000,"@Override protected void eval(RP rp) throws Exception {
  IncrementCounter.req.send(this,getParent(),rp);
}","@Override protected void eval(RP rp) throws Exception {
  System.out.println(""String_Node_Str"");
  IncrementCounter.req.send(this,getParent(),rp);
}",0.8392156862745098
